<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>formbuilder</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_formbuilder</ClassName>
    <ID>117cc7aa-749f-4a37-8f9e-5a899f0c0458</ID>
    <Icon>#Res(54e7f8ab-64f1-b113-029e-1703a76c6fa4)</Icon>
    <EditorIcon>#Res(2e3a0105-394f-95bd-e7c9-1703d0ed2ddc)</EditorIcon>
    <StructureIcon>#Res(8eb487a9-46f2-ac3e-202e-1703f8be5f80)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Form</Category>
    <Dynamic>1</Dynamic>
    <Version>1.2.9200</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer, dialog, container, tablecell, accordeon, dialog_2, vdomclass, smartfolderdata</Containers>
    <Languages>en_US ,ru_RU ,fr_FR</Languages>
    <Handlers/>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>stateful</Name>
      <DisplayName>#Lang(199)</DisplayName>
      <Description>#Lang(299)</Description>
      <DefaultValue>0</DefaultValue>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
      <ErrorValidationMessage>#Lang(399)</ErrorValidationMessage>
      <Visible>1</Visible>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(499)|0)|(#Lang(499)|1))</CodeInterface>
      <ColorGroup>1</ColorGroup>
    </Attribute>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d+$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>visible</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|0)|(#Lang(402)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>zindex</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue>400</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue>200</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>overflow</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1)|(#Lang(405)|2)|(#Lang(406)|3))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>^[0123]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>classname</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(500)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>data</Name>
      <DisplayName>#Lang(111)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(211)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine()</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(311)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>datatype</Name>
      <DisplayName>#Lang(112)</DisplayName>
      <DefaultValue>json</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(212)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(407)|xml)|(#Lang(408)|json))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(312)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>language</Name>
      <DisplayName>#Lang(113)</DisplayName>
      <DefaultValue>en-US</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(213)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(409)|en-US)|(#Lang(411)|fr-FR)|(#Lang(412)|ru-RU))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(313)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>roles</Name>
      <DisplayName>#Lang(114)</DisplayName>
      <DefaultValue>[]</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(214)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField()</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(314)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">Form Builder</Sentence>
      <Sentence ID="002">The Form builder type produces an object that provide wysiwyg form generation.</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Hierarchy</Sentence>
      <Sentence ID="102">Visibility</Sentence>
      <Sentence ID="103">Z-Index</Sentence>
      <Sentence ID="104">Top</Sentence>
      <Sentence ID="105">Left</Sentence>
      <Sentence ID="106">Width</Sentence>
      <Sentence ID="107">Height</Sentence>
      <Sentence ID="108">Overflow</Sentence>
      <Sentence ID="109">Class CSS</Sentence>
      <Sentence ID="111">Form data</Sentence>
      <Sentence ID="112">Data Type</Sentence>
      <Sentence ID="113">UI language</Sentence>
      <Sentence ID="114">Access roles</Sentence>
      <Sentence ID="201">Order of rendering the object on the page. By default the value of hierarchy is 0, that means, that the object will be rendered in the order it is written in the XML-file of the VDOM application.</Sentence>
      <Sentence ID="202">Visibility of the object.</Sentence>
      <Sentence ID="203">Position in visual hierarchy of objects. If you have several objects in one container situated on each other, the z-index indicates the order of their displaying. The larger z-index is, the upper the object lies.</Sentence>
      <Sentence ID="204">Spacing between the top edge of the container and the object in pixels.</Sentence>
      <Sentence ID="205">Spacing between the left edge of the container and the object in pixels.</Sentence>
      <Sentence ID="206">Width of the object in pixels</Sentence>
      <Sentence ID="207">Height of the object in pixels.</Sentence>
      <Sentence ID="208">The overflow control mode: Auto - if the content fits in the object' borders - scrolling will not be shown; if not - the scrolling will be shown; Hidden - if the content does not fit in the object' borders - it will be cropped within the borders; Scroll - the horizontal and vertical scrolling will always be shown, no matter if the content fits or not; Visible - the whole content will always be shown without reference to the object's borders.</Sentence>
      <Sentence ID="209">Names of CSS classes.</Sentence>
      <Sentence ID="211">Form data</Sentence>
      <Sentence ID="212">Data Type</Sentence>
      <Sentence ID="213">UI language code</Sentence>
      <Sentence ID="214">Access roles availibe for item configuration separated by comma</Sentence>
      <Sentence ID="301">Incorrect value, must be positive integer from 0 to 99.</Sentence>
      <Sentence ID="302">Incorrect value, must be either 0 or 1.</Sentence>
      <Sentence ID="303">Incorrect value, must be positive integer from 0 to 9999.</Sentence>
      <Sentence ID="304">Incorrect value, must be even positive integer.</Sentence>
      <Sentence ID="305">Incorrect value, must be positive integer from 0 to 9999.</Sentence>
      <Sentence ID="306">Incorrect value, must be positive integer from 0 to 999999.</Sentence>
      <Sentence ID="307">Incorrect value, must be positive integer from 0 to 999999.</Sentence>
      <Sentence ID="308">Incorrect value.</Sentence>
      <Sentence ID="309">Incorrect value.</Sentence>
      <Sentence ID="311">Invalid form data</Sentence>
      <Sentence ID="312">Invalid data type</Sentence>
      <Sentence ID="313">Wrong language</Sentence>
      <Sentence ID="314">Wrong access roles value</Sentence>
      <Sentence ID="401">Invisible</Sentence>
      <Sentence ID="402">Visible</Sentence>
      <Sentence ID="403">Auto</Sentence>
      <Sentence ID="404">Hidden</Sentence>
      <Sentence ID="405">Scroll</Sentence>
      <Sentence ID="406">Visible</Sentence>
      <Sentence ID="407">xml</Sentence>
      <Sentence ID="408">json</Sentence>
      <Sentence ID="409">English</Sentence>
      <Sentence ID="411">French</Sentence>
      <Sentence ID="412">Russian</Sentence>
      <Sentence ID="501">Hide the object.</Sentence>
      <Sentence ID="502">Hide the object.</Sentence>
      <Sentence ID="503">Load data in HTML format to the server.</Sentence>
      <Sentence ID="504">Hide the object.</Sentence>
      <Sentence ID="505">Hide the object.</Sentence>
      <Sentence ID="506">Resize the object width and height</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508">setData</Sentence>
      <Sentence ID="509">Show the object</Sentence>
      <Sentence ID="511"></Sentence>
      <Sentence ID="512"></Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="515"></Sentence>
      <Sentence ID="516"></Sentence>
      <Sentence ID="517"></Sentence>
      <Sentence ID="518"></Sentence>
      <Sentence ID="519"></Sentence>
      <Sentence ID="601">Hide</Sentence>
      <Sentence ID="602">Hide</Sentence>
      <Sentence ID="603">LoadHTML</Sentence>
      <Sentence ID="604">Hide</Sentence>
      <Sentence ID="605">Hide</Sentence>
      <Sentence ID="606">ResizeTo</Sentence>
      <Sentence ID="607"></Sentence>
      <Sentence ID="608">setData</Sentence>
      <Sentence ID="609">Show</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">Fade</Sentence>
      <Sentence ID="703">HTMLdata</Sentence>
      <Sentence ID="704">Fade</Sentence>
      <Sentence ID="705">Width</Sentence>
      <Sentence ID="706">Height</Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708">data</Sentence>
      <Sentence ID="709">Fade</Sentence>
      <Sentence ID="801">Fade effect, time is indicated in milliseconds.</Sentence>
      <Sentence ID="802">Fade effect, time is indicated in milliseconds.</Sentence>
      <Sentence ID="803">Data in HTML format</Sentence>
      <Sentence ID="804">Fade effect, time is indicated in milliseconds.</Sentence>
      <Sentence ID="805">New value of width</Sentence>
      <Sentence ID="806">New value of height.</Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808">form data</Sentence>
      <Sentence ID="809">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="901">Current X-value</Sentence>
      <Sentence ID="902">Current Y-value</Sentence>
      <Sentence ID="903">Current X-value</Sentence>
      <Sentence ID="904">Current Y-value</Sentence>
      <Sentence ID="905">Current X-value</Sentence>
      <Sentence ID="906">Current Y-value</Sentence>
      <Sentence ID="907">Current X-value</Sentence>
      <Sentence ID="908">Current Y-value</Sentence>
      <Sentence ID="909">Current X-value</Sentence>
      <Sentence ID="911">Current Y-value</Sentence>
      <Sentence ID="912">Current X-value</Sentence>
      <Sentence ID="913">Current Y-value</Sentence>
      <Sentence ID="914">Current X-value</Sentence>
      <Sentence ID="915">Current Y-value</Sentence>
      <Sentence ID="916">Current X-value</Sentence>
      <Sentence ID="917">Current Y-value</Sentence>
      <Sentence ID="918">data</Sentence>
    </Language>
    <Language Code="ru_RU">
      <Sentence ID="001">Форма</Sentence>
      <Sentence ID="002">Добавить форму на страницу</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Иерархия</Sentence>
      <Sentence ID="102">Отображение</Sentence>
      <Sentence ID="103">Позиция</Sentence>
      <Sentence ID="104">Сверху</Sentence>
      <Sentence ID="105">Слева</Sentence>
      <Sentence ID="106">Ширина</Sentence>
      <Sentence ID="107">Высота</Sentence>
      <Sentence ID="108">Переполнение</Sentence>
      <Sentence ID="109">Класс CSS</Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113"></Sentence>
      <Sentence ID="114"></Sentence>
      <Sentence ID="201">Порядок визуализации объекта в ходе загрузки страницы</Sentence>
      <Sentence ID="202">Режим отображения объекта</Sentence>
      <Sentence ID="203">Положение в визуальной иерархии объектов</Sentence>
      <Sentence ID="204">Расстояние от верхней границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="205">Расстояние от левой границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="206">Ширина объекта в пикселях</Sentence>
      <Sentence ID="207">Высота объекта в пикселях</Sentence>
      <Sentence ID="208">Режим при переполнении</Sentence>
      <Sentence ID="209">Имена классов CSS</Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213"></Sentence>
      <Sentence ID="214"></Sentence>
      <Sentence ID="301">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="302">Неправильное значение, должен быть указан 0 или 1</Sentence>
      <Sentence ID="303">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="304">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="305">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="306">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="307">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="308">Неправильное значение</Sentence>
      <Sentence ID="309">Неправильное значение</Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313"></Sentence>
      <Sentence ID="314"></Sentence>
      <Sentence ID="401">Невидимый</Sentence>
      <Sentence ID="402">Видимый</Sentence>
      <Sentence ID="403">Автовыбор</Sentence>
      <Sentence ID="404">Скрытый</Sentence>
      <Sentence ID="405">Прокрутка</Sentence>
      <Sentence ID="406">Видимый</Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409"></Sentence>
      <Sentence ID="411"></Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="501">Скрыть объект</Sentence>
      <Sentence ID="502">Скрыть объект</Sentence>
      <Sentence ID="503">Загрузить данные в формате HTML</Sentence>
      <Sentence ID="504">Скрыть объект</Sentence>
      <Sentence ID="505">Скрыть объект</Sentence>
      <Sentence ID="506">Изменить размеры объекта</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508"></Sentence>
      <Sentence ID="509">Показать объект</Sentence>
      <Sentence ID="511"></Sentence>
      <Sentence ID="512"></Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="515"></Sentence>
      <Sentence ID="516"></Sentence>
      <Sentence ID="517"></Sentence>
      <Sentence ID="518"></Sentence>
      <Sentence ID="519"></Sentence>
      <Sentence ID="601">Скрыть</Sentence>
      <Sentence ID="602">Скрыть</Sentence>
      <Sentence ID="603">Загрузить HTML</Sentence>
      <Sentence ID="604">Скрыть</Sentence>
      <Sentence ID="605">Скрыть</Sentence>
      <Sentence ID="606">Изменить размеры</Sentence>
      <Sentence ID="607"></Sentence>
      <Sentence ID="608"></Sentence>
      <Sentence ID="609">Показать</Sentence>
      <Sentence ID="701">Исчезновение</Sentence>
      <Sentence ID="702">Исчезновение</Sentence>
      <Sentence ID="703">HTML-данные</Sentence>
      <Sentence ID="704">Исчезновение</Sentence>
      <Sentence ID="705">Ширина</Sentence>
      <Sentence ID="706">Высота</Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708"></Sentence>
      <Sentence ID="709">Появление</Sentence>
      <Sentence ID="801">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="802">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="803">Данные в формате HTML</Sentence>
      <Sentence ID="804">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="805">Новое значение ширины</Sentence>
      <Sentence ID="806">Новое значение высоты</Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808"></Sentence>
      <Sentence ID="809">Время появления в миллисекундах</Sentence>
      <Sentence ID="901">Текущее значение X</Sentence>
      <Sentence ID="902">Текущее значение Y</Sentence>
      <Sentence ID="903">Текущее значение X</Sentence>
      <Sentence ID="904">Текущее значение Y</Sentence>
      <Sentence ID="905">Текущее значение X</Sentence>
      <Sentence ID="906">Текущее значение Y</Sentence>
      <Sentence ID="907">Текущее значение X</Sentence>
      <Sentence ID="908">Текущее значение Y</Sentence>
      <Sentence ID="909">Текущее значение X</Sentence>
      <Sentence ID="911">Текущее значение Y</Sentence>
      <Sentence ID="912">Текущее значение X</Sentence>
      <Sentence ID="913">Текущее значение Y</Sentence>
      <Sentence ID="914">Текущее значение X</Sentence>
      <Sentence ID="915">Текущее значение Y</Sentence>
      <Sentence ID="916">Текущее значение X</Sentence>
      <Sentence ID="917">Текущее значение Y</Sentence>
      <Sentence ID="918"></Sentence>
    </Language>
    <Language Code="fr_FR">
      <Sentence ID="001">Formulaire</Sentence>
      <Sentence ID="002">Formulaire</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Hiérarchie</Sentence>
      <Sentence ID="102">Visibilité</Sentence>
      <Sentence ID="103">Z-Index</Sentence>
      <Sentence ID="104">Haut</Sentence>
      <Sentence ID="105">Gauche</Sentence>
      <Sentence ID="106">Largeur</Sentence>
      <Sentence ID="107">Hauteur</Sentence>
      <Sentence ID="108">Overflow</Sentence>
      <Sentence ID="109">Class</Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113"></Sentence>
      <Sentence ID="114"></Sentence>
      <Sentence ID="201">Hiérarchie de l'objet, ordre de chargement de l'objet par rapport aux autres</Sentence>
      <Sentence ID="202">Afficher ou cacher l'objet</Sentence>
      <Sentence ID="203">Niveau de superposition de l'objet par rapport aux autres</Sentence>
      <Sentence ID="204">Distance depuis le bord haut de l'objet parent en pixels</Sentence>
      <Sentence ID="205">Distance depuis le bord gauche de l'objet parent en pixels</Sentence>
      <Sentence ID="206">Largeur de l'objet en pixels</Sentence>
      <Sentence ID="207">Hauteur de l'objet en pixels</Sentence>
      <Sentence ID="208">Overflow mode</Sentence>
      <Sentence ID="209">CSS class name</Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213"></Sentence>
      <Sentence ID="214"></Sentence>
      <Sentence ID="301">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="302">Valeur Incorrecte</Sentence>
      <Sentence ID="303">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="304">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="305">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="306">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="307">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="308">Valeur Incorrecte</Sentence>
      <Sentence ID="309">Incorrect value</Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313"></Sentence>
      <Sentence ID="314"></Sentence>
      <Sentence ID="401">Invisible</Sentence>
      <Sentence ID="402">Visible</Sentence>
      <Sentence ID="403">Auto</Sentence>
      <Sentence ID="404">Hidden</Sentence>
      <Sentence ID="405">Scroll</Sentence>
      <Sentence ID="406">Visible</Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409"></Sentence>
      <Sentence ID="411"></Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="501">Hide the object</Sentence>
      <Sentence ID="502">Hide the object</Sentence>
      <Sentence ID="503">Load HTML-data</Sentence>
      <Sentence ID="504">Hide the object</Sentence>
      <Sentence ID="505">Hide the object</Sentence>
      <Sentence ID="506">Change object size</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508"></Sentence>
      <Sentence ID="509">Show the object</Sentence>
      <Sentence ID="511"></Sentence>
      <Sentence ID="512"></Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="515"></Sentence>
      <Sentence ID="516"></Sentence>
      <Sentence ID="517"></Sentence>
      <Sentence ID="518"></Sentence>
      <Sentence ID="519"></Sentence>
      <Sentence ID="601">Hide</Sentence>
      <Sentence ID="602">Hide</Sentence>
      <Sentence ID="603">Load HTML</Sentence>
      <Sentence ID="604">Hide</Sentence>
      <Sentence ID="605">Hide</Sentence>
      <Sentence ID="606">ResizeTo</Sentence>
      <Sentence ID="607"></Sentence>
      <Sentence ID="608"></Sentence>
      <Sentence ID="609">Show</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">Fade</Sentence>
      <Sentence ID="703">HTMLdata</Sentence>
      <Sentence ID="704">Fade</Sentence>
      <Sentence ID="705">Width</Sentence>
      <Sentence ID="706">Height</Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708"></Sentence>
      <Sentence ID="709">Fade</Sentence>
      <Sentence ID="801">Fade time</Sentence>
      <Sentence ID="802">Fade time</Sentence>
      <Sentence ID="803">Data in HTML format</Sentence>
      <Sentence ID="804">Fade time</Sentence>
      <Sentence ID="805">New width value</Sentence>
      <Sentence ID="806">New height value</Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808"></Sentence>
      <Sentence ID="809">Time of appearance</Sentence>
      <Sentence ID="901">Current X-value</Sentence>
      <Sentence ID="902">Current Y-value</Sentence>
      <Sentence ID="903">Current X-value</Sentence>
      <Sentence ID="904">Current Y-value</Sentence>
      <Sentence ID="905">Current X-value</Sentence>
      <Sentence ID="906">Current Y-value</Sentence>
      <Sentence ID="907">Current X-value</Sentence>
      <Sentence ID="908">Current Y-value</Sentence>
      <Sentence ID="909">Current X-value</Sentence>
      <Sentence ID="911">Current Y-value</Sentence>
      <Sentence ID="912">Current X-value</Sentence>
      <Sentence ID="913">Current Y-value</Sentence>
      <Sentence ID="914">Current X-value</Sentence>
      <Sentence ID="915">Current Y-value</Sentence>
      <Sentence ID="916">Current X-value</Sentence>
      <Sentence ID="917">Current Y-value</Sentence>
      <Sentence ID="918"></Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="54e7f8ab-64f1-b113-029e-1703a76c6fa4" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEz
NDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlE
PSJ4bXAuaWlkOkNDQThFNkU1MUZERTExRTFCNjk4RDExMUZCMTdFNEM3IiB4bXBNTTpEb2N1bWVu
dElEPSJ4bXAuZGlkOkNDQThFNkU2MUZERTExRTFCNjk4RDExMUZCMTdFNEM3Ij4gPHhtcE1NOkRl
cml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6Q0NBOEU2RTMxRkRFMTFFMUI2OThE
MTExRkIxN0U0QzciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6Q0NBOEU2RTQxRkRFMTFFMUI2
OThEMTExRkIxN0U0QzciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1l
dGE+IDw/eHBhY2tldCBlbmQ9InIiPz5PMq7sAAAVO0lEQVR42txa+7OdVXle7/q+vfc5J+cSEhJy
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
pxkAAAAASUVORK5CYII=]]></Resource>
    <Resource ID="2e3a0105-394f-95bd-e7c9-1703d0ed2ddc" Name="Icon" Type="jpg"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVh
ZHlxyWU8AAADIGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78i
IGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9i
ZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAy
MDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93
d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJk
ZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5z
OnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0
cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JU
b29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdpbmRvd3MiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5p
aWQ6Q0NBOEU2RTUxRkRFMTFFMUI2OThEMTExRkIxN0U0QzciIHhtcE1NOkRvY3VtZW50SUQ9Inht
cC5kaWQ6Q0NBOEU2RTYxRkRFMTFFMUI2OThEMTExRkIxN0U0QzciPiA8eG1wTU06RGVyaXZlZEZy
b20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpDQ0E4RTZFMzFGREUxMUUxQjY5OEQxMTFGQjE3
RTRDNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpDQ0E4RTZFNDFGREUxMUUxQjY5OEQxMTFG
QjE3RTRDNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94
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
SUVORK5CYII=]]></Resource>
    <Resource ID="8eb487a9-46f2-ac3e-202e-1703f8be5f80" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEz
NDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlE
PSJ4bXAuaWlkOjRFQTk3RDM2MUZFNDExRTFCMjFEOTNGMUQwOTYwN0JFIiB4bXBNTTpEb2N1bWVu
dElEPSJ4bXAuZGlkOjRFQTk3RDM3MUZFNDExRTFCMjFEOTNGMUQwOTYwN0JFIj4gPHhtcE1NOkRl
cml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NEVBOTdEMzQxRkU0MTFFMUIyMUQ5
M0YxRDA5NjA3QkUiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NEVBOTdEMzUxRkU0MTFFMUIy
MUQ5M0YxRDA5NjA3QkUiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1l
dGE+IDw/eHBhY2tldCBlbmQ9InIiPz5gnN14AAAAhUlEQVR42mLcsn2dPQMDQxcQmzGQBk4BcRkT
kFgBxH1AzEgiBulZATJAAohXMpAOQHokmBgoBEzYBf8JAvF/NPwOm1oWAha8B2Ihkl1AsReoaYAg
EP+H4lUjNAwIAqxh8I+B6T00vRPlgqdA7EeG5SA9T0EuSAHi+UC8kUQDXgBxIkCAAQDl7B+DjspN
DAAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="5d4c7980-13c6-c25a-ce89-f217748b5f9d" Name="form-builder.min.js" Type="js"><![CDATA[]]></Resource>
  </Resources>
  <SourceCode><![CDATA[

class VDOM_formbuilder(VDOM_object):
	def render(self, contents=""):
		display = u"display:none; " if self.visible == "0" else u""
		
		if self.overflow == "1":
			ov = u"hidden"
		elif self.overflow == "2":
			ov = u"scroll"
		elif self.overflow == "3":
			ov = u"visible"
		else:
			ov = u"auto"

		woid = (self.id).replace('-', '_')
		id = u"o_" + woid
		
		style = u"overflow:{ovf};z-index:{zind};position:{pos};top:{top}px;left:{left}px;width:{wid}px;height:{hei}px;" \
			.format(ovf = ov, zind = self.zindex, pos = self.position, 
					top = self.top, left = self.left, wid = self.width, hei = self.height)

		classname = u"""class="%s" """ % self.classname if self.classname else u""

		if VDOM_CONFIG_1["DEBUG"] == "1":
			debug_info = u"objtype='formbuilder' objname='%s' ver='%s'" % (self.name, self.type.version)
		else:
			debug_info = u""

		result = \
			u"""<div {debug_info} id="{id}" style="display:block;margin:0; {display} {style}" name="{name}" style="overflow:visible" {classname}></div>  	
				<script>jQuery(function($) {{		
				$('#{id}').formBuilder({{dataType: '{datatype}',formData: `{contents}`, i18n: {{locale: '{language}'}},
				onSave: function(evt, formData){{execEventBinded($(evt.currentTarget).parents('.form-builder').parent()[0].id.substring(2), 'save', {{'data':JSON.stringify(formData)}})}}  }}); }});</script>
			""".format(
					debug_info = debug_info, id = id,  woid= woid, display = display, style = style, name = self.name, 
					contents = self.data or "[]" if self.datatype=='json' else "'<form-template></form-template>'", classname = classname,
					datatype=self.datatype, language=self.language)
 
		return VDOM_object.render(self, contents=result)

	def wysiwyg(self, contents=""):
		from scripting.legacy.wysiwyg import get_empty_wysiwyg_value
			
		image_id = "54e7f8ab-64f1-b113-029e-1703a76c6fa4"
		result = get_empty_wysiwyg_value(self, image_id)
			
		return VDOM_object.wysiwyg(self, contents=result)
		

		]]></SourceCode>
  <Libraries>
    <Library Target="html"><![CDATA[<script type="text/javascript" src="/5d4c7980-13c6-c25a-ce89-f217748b5f9d.res"></script>]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="click" Help="#Lang(511)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(901)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(902)"/>
          </Parameters>
        </Event>
        <Event Name="ctrlclick" Help="#Lang(512)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(903)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(904)"/>
          </Parameters>
        </Event>
        <Event Name="dblclick" Help="#Lang(513)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(905)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(906)"/>
          </Parameters>
        </Event>
        <Event Name="mousedown" Help="#Lang(514)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(907)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(908)"/>
          </Parameters>
        </Event>
        <Event Name="mousemove" Help="#Lang(515)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(909)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(911)"/>
          </Parameters>
        </Event>
        <Event Name="mouseout" Help="#Lang(516)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(912)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(913)"/>
          </Parameters>
        </Event>
        <Event Name="mouseover" Help="#Lang(517)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(914)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(915)"/>
          </Parameters>
        </Event>
        <Event Name="mouseup" Help="#Lang(518)">
          <Parameters>
            <Parameter Name="X" Order="" VbType="" Help="#Lang(916)"/>
            <Parameter Name="Y" Order="" VbType="" Help="#Lang(917)"/>
          </Parameters>
        </Event>
        <Event Name="save" Help="#Lang(519)">
          <Parameters>
            <Parameter Name="data" Order="" VbType="" Help="#Lang(918)"/>
          </Parameters>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="addClass">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(701)" ScriptName="className" Help="#Lang(801)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q(this.domCont).addClass(className);
		  ]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(702)" ScriptName="fade" Help="#Lang(802)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[ 
vdom_ui_hide(this.domCont, fade);
]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="loadHTMLData">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(703)" ScriptName="HTMLdata" Help="#Lang(803)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[ 
$q(this.domCont).html(HTMLdata);
]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="removeClass">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(704)" ScriptName="className" Help="#Lang(804)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q(this.domCont).removeClass(className);
		  ]]></SourceCode>
        </Action>
        <Action Help="#Lang(505)" InterfaceName="#Lang(605)" MethodName="reset">
          <Parameters/>
          <SourceCode><![CDATA[
$q(this.domCont)[0].reset();
      ]]></SourceCode>
        </Action>
        <Action Help="#Lang(506)" InterfaceName="#Lang(606)" MethodName="resizeTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="width" Help="#Lang(805)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(706)" ScriptName="height" Help="#Lang(806)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[ 
$q(this.domCont).width(parseInt(width,10)).height(parseInt(height,10));
]]></SourceCode>
        </Action>
        <Action Help="#Lang(507)" InterfaceName="#Lang(607)" MethodName="setClass">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(707)" ScriptName="className" Help="#Lang(807)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[ 
$q(this.domCont).attr('class',className);
		  ]]></SourceCode>
        </Action>
        <Action Help="#Lang(508)" InterfaceName="#Lang(608)" MethodName="setData">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(708)" ScriptName="data" Help="#Lang(808)" RegularExpressionValidation=""/>
          </Parameters>
          <SourceCode><![CDATA[$q(this.domCont).data('formBuilder').actions.setData(JSON.parse(data));



]]></SourceCode>
        </Action>
        <Action Help="#Lang(509)" InterfaceName="#Lang(609)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(709)" ScriptName="fade" Help="#Lang(809)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[ 
vdom_ui_show(this.domCont,fade);
]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>