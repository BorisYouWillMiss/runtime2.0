<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>gantt</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_gantt</ClassName>
    <ID>ea0ba7cb-e375-4b52-a647-fb28225e451d</ID>
    <Icon>#Res(e0ab6594-77ca-47b3-a35c-d3939406ca8e)</Icon>
    <EditorIcon>#Res(2b5aee40-ed7f-4a64-8d36-f226fca44ac8)</EditorIcon>
    <StructureIcon>#Res(2b5aee40-ed7f-4a64-8d36-f226fca44ac8)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Additional</Category>
    <Dynamic>1</Dynamic>
    <Version>1.101.9201</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer</Containers>
    <Languages>en_US ,fr_FR ,ru_RU</Languages>
    <Handlers/>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>stateful</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|0)|(#Lang(402)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>visible</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>zindex</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue>130</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue>22</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>data</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>scales</Name>
      <DisplayName>#Lang(111)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(211)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(311)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>split</Name>
      <DisplayName>#Lang(112)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(212)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(405)|1)|(#Lang(406)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(312)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>readonly</Name>
      <DisplayName>#Lang(113)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(213)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(407)|1)|(#Lang(408)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(313)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>duration_unit</Name>
      <DisplayName>#Lang(114)</DisplayName>
      <DefaultValue>day</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(214)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(409)|day)|(#Lang(411)|hour))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(314)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>reordering_tasks</Name>
      <DisplayName>#Lang(115)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(215)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(412)|1)|(#Lang(413)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(315)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>disable_add</Name>
      <DisplayName>#Lang(116)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(216)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>Number(0,100)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(316)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>zooming</Name>
      <DisplayName>#Lang(117)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(217)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(414)|1)|(#Lang(415)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(317)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>start_date</Name>
      <DisplayName>#Lang(927)</DisplayName>
      <DefaultValue>new Date()</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(217)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(317)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>end_date</Name>
      <DisplayName>#Lang(928)</DisplayName>
      <DefaultValue></DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(217)</Help>
      <InterfaceType></InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(317)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>deadline</Name>
      <DisplayName>#Lang(118)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(218)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(416)|1)|(#Lang(417)|0))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(318)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>skip_off_time</Name>
      <DisplayName>#Lang(119)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(219)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(418)|1)|(#Lang(419)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(319)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>highlight_weekend</Name>
      <DisplayName>#Lang(121)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(221)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>Color()</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(321)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>classname</Name>
      <DisplayName>#Lang(122)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(222)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(500)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(322)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>style</Name>
      <DisplayName>#Lang(123)</DisplayName>
      <DefaultValue>.deadline {
    position: absolute;
    border-radius: 12px;
    border: 2px solid #585858;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 22px;
    height: 22px;
    margin-left: -11px;
    margin-top: 6px;
    z-index: 1;
    background-color: tomato;
}

.overdue-indicator {
    width: 24px;
    margin-top: 5px;
    height: 24px;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    border-radius: 17px;
    color: white;
    background: rgb(255, 60, 60);
    line-height: 25px;
    text-align: center;
    font-size: 24px;
}

.deadline_task{
    background-color: #FAD848;
}

.completed_task{
    border:2px solid silver;
    color:#ffffff;
    background: silver;
}

.completed_task .gantt_task_progress{
    background:silver;
}

.meeting_task{
    border:2px solid #DC8955;
    color:#ffffff;
    background: #FFA26E;
}

.meeting_task .gantt_task_progress{
    background:#E18E5A;
}

.work_task{
    border:2px solid #03A6D4;
    color:#ffffff;
    background: #00D1FF;
}

.work_task .gantt_task_progress{
    background:#07AAD8;
}

.overdue_task{
    border:2px solid #DDBB2B;
    color:#ffffff;
    background: #FAD848;
}

.overdue_task .gantt_task_progress{
    background:#E0BE2E;
}</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(223)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(323)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>datatype</Name>
      <DisplayName>#Lang(125)</DisplayName>
      <DefaultValue>json</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(225)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(423)|xml)|(#Lang(424)|json))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(325)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>language</Name>
      <DisplayName>#Lang(126)</DisplayName>
      <DefaultValue>en-US</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(226)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(425)|en-US)|(#Lang(426)|fr-FR)|(#Lang(427)|ru-RU))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(326)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>base_tasks</Name>
      <DisplayName>#Lang(127)</DisplayName>
      <DefaultValue>
gantt.config.lightbox.project_sections= [
    {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
    {name: "type", type: "typeselect", map_to: "type"},
    {name: "split", type:"checkbox", map_to: "render", options:[
        {key:"split", label:"Split Task"}
    ]},
    {name: "time", type: "duration", readonly: true, map_to: "auto"},
    {
        name: "deadline", map_to: {start_date: "deadline"},
        type: "duration_optional",
        button: true,
        single_date: true
    },
];
gantt.config.lightbox.milestone_sections= [
    {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
    {name: "type", type: "typeselect", map_to: "type"},
    {name: "time", type: "duration", single_date: true, map_to: "auto"},
    {
        name: "deadline", map_to: {start_date: "deadline"},
        type: "duration_optional",
        button: true,
        single_date: true
    },
];</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(227)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>3</Colorgroup>
      <ErrorValidationMessage>#Lang(327)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>custom</Name>
      <DisplayName>#Lang(128)</DisplayName>
      <DefaultValue>
gantt.config.types.meeting = "meeting";
gantt.locale.labels.type_meeting = "Meeting";
gantt.config.lightbox.meeting_sections = [
    {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
    {name: "time", map_to: "auto", type: "duration"},
    {
        name: "deadline", map_to: {start_date: "deadline"},
        type: "duration_optional",
        button: true,
        single_date: true
    },
    {name: "type", height: 50, type: "typeselect", map_to: "type"}
];

gantt.config.types.completed = "completed";
gantt.locale.labels.type_completed = "Completed";
gantt.config.lightbox.completed_sections = [
    {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
    {name: "time", map_to: "auto", type: "duration"},
    {name: "type", height: 50, type: "typeselect", map_to: "type"}
];

gantt.config.types.work = "work";
gantt.locale.labels.type_work = "Work";
gantt.config.lightbox.work_sections = gantt.config.lightbox.one_sections;

gantt.config.types.overdue = "overdue";
gantt.locale.labels.type_overdue = "Overdue";
gantt.config.lightbox.overdue_sections = gantt.config.lightbox.one_sections;
gantt.templates.task_class = function (start, end, task) {
if (task.deadline){
    if (task.deadline &amp;&amp; end.valueOf() &gt; task.deadline.valueOf()) {
        return 'overdue overdue_task';
    }

    if (task.deadline &amp;&amp; end.valueOf() &lt;= task.deadline.valueOf()) {
        return task.type + "_task";
    }
}
else {
    switch(task.type){
        case gantt.config.types.meeting:
            return "meeting_task";

        case gantt.config.types.work:
            return "work_task";

        case gantt.config.types.overdue:
            return "overdue_task";

        case gantt.config.types.completed:
            return "completed_task";
    
    }
}
return "";
};</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(228)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>3</Colorgroup>
      <ErrorValidationMessage>#Lang(328)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">Gantt</Sentence>
      <Sentence ID="002">The gantt chart</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Hierarchy</Sentence>
      <Sentence ID="103">Visibility</Sentence>
      <Sentence ID="104">Z-Index</Sentence>
      <Sentence ID="105">Top</Sentence>
      <Sentence ID="106">Left</Sentence>
      <Sentence ID="107">Width</Sentence>
      <Sentence ID="108">Height</Sentence>
      <Sentence ID="109">Data</Sentence>
      <Sentence ID="111">Time scale</Sentence>
      <Sentence ID="112">Split tasks</Sentence>
      <Sentence ID="113">Readonly</Sentence>
      <Sentence ID="114">Duration unit</Sentence>
      <Sentence ID="115">Reordering tasks</Sentence>
      <Sentence ID="116">Disable add button</Sentence>
      <Sentence ID="117">Zooming</Sentence>
      <Sentence ID="118">Deadline</Sentence>
      <Sentence ID="119">Skip off time</Sentence>
      <Sentence ID="121">Highlight weekend</Sentence>
      <Sentence ID="122">CSS Class</Sentence>
      <Sentence ID="123">Style</Sentence>
      <Sentence ID="125">Data Type</Sentence>
      <Sentence ID="126">UI language</Sentence>
      <Sentence ID="127">Base tasks</Sentence>
      <Sentence ID="128">Custom</Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Order of rendering the object on the page</Sentence>
      <Sentence ID="203">Visibility of the object</Sentence>
      <Sentence ID="204">Position in visual hierarchy of objects</Sentence>
      <Sentence ID="205">Spacing between the top edge of the container and the object in pixels</Sentence>
      <Sentence ID="206">Spacing between the left edge of the container and the object in pixels</Sentence>
      <Sentence ID="207">Width of the object in pixels</Sentence>
      <Sentence ID="208">Height of the object in pixels</Sentence>
      <Sentence ID="209">Specific dhtmlx gantt data</Sentence>
      <Sentence ID="211">Defines configuration settings of the time scale</Sentence>
      <Sentence ID="212">Available split tasks</Sentence>
      <Sentence ID="213">Set gantt diagramm only read mode</Sentence>
      <Sentence ID="214">Set duration unit</Sentence>
      <Sentence ID="215">Add reordering tasks by drag and drop</Sentence>
      <Sentence ID="216">Disable add button for levels &gt;= value, where value from 0 to 100</Sentence>
      <Sentence ID="217">Add support zooming time scale</Sentence>
      <Sentence ID="218">Add deadline to task</Sentence>
      <Sentence ID="219">Hide off time days in time scale</Sentence>
      <Sentence ID="221">Color to highlight the weekend</Sentence>
      <Sentence ID="222">CSS class name</Sentence>
      <Sentence ID="223">Custom style for gantt elements</Sentence>
      <Sentence ID="225">Data Type</Sentence>
      <Sentence ID="226">UI language code</Sentence>
      <Sentence ID="227">Define base tasks of gantt chart</Sentence>
      <Sentence ID="228">Add new custom task type</Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="303">Incorrect value, must be either 0 or 1</Sentence>
      <Sentence ID="304">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="305">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="306">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="307">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="308">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="309">Invalid data for gantt chart</Sentence>
      <Sentence ID="311">Error in time scale</Sentence>
      <Sentence ID="312">Error in split tasks</Sentence>
      <Sentence ID="313">Error in readonly</Sentence>
      <Sentence ID="314">Error in duration unit</Sentence>
      <Sentence ID="315">Error in reordering tasks</Sentence>
      <Sentence ID="316">Value must be in range from 0 to 100</Sentence>
      <Sentence ID="317">Error in zooming</Sentence>
      <Sentence ID="318">Error in deadline</Sentence>
      <Sentence ID="319">Error in skip off time</Sentence>
      <Sentence ID="321">Error in highlight weekend</Sentence>
      <Sentence ID="322">Names of CSS classes</Sentence>
      <Sentence ID="323">Error in style</Sentence>
      <Sentence ID="325">Invalid data type</Sentence>
      <Sentence ID="326">Wrong language</Sentence>
      <Sentence ID="327">Error in base tasks</Sentence>
      <Sentence ID="328">Error in custom task type</Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Invisible</Sentence>
      <Sentence ID="404">Visible</Sentence>
      <Sentence ID="405">Yes</Sentence>
      <Sentence ID="406">No</Sentence>
      <Sentence ID="407">Yes</Sentence>
      <Sentence ID="408">No</Sentence>
      <Sentence ID="409">day</Sentence>
      <Sentence ID="411">hour</Sentence>
      <Sentence ID="412">Yes</Sentence>
      <Sentence ID="413">No</Sentence>
      <Sentence ID="414">Yes</Sentence>
      <Sentence ID="415">No</Sentence>
      <Sentence ID="416">Yes</Sentence>
      <Sentence ID="417">No</Sentence>
      <Sentence ID="418">Yes</Sentence>
      <Sentence ID="419">No</Sentence>
      <Sentence ID="421">Invisible</Sentence>
      <Sentence ID="422">Visible</Sentence>
      <Sentence ID="423">xml</Sentence>
      <Sentence ID="424">json</Sentence>
      <Sentence ID="425">English</Sentence>
      <Sentence ID="426">French</Sentence>
      <Sentence ID="427">Russian</Sentence>
      <Sentence ID="501">Add new CSS class.</Sentence>
      <Sentence ID="502">Add new link for gantt diagram</Sentence>
      <Sentence ID="503">Add task into gantt diagram</Sentence>
      <Sentence ID="504">Hide the object</Sentence>
      <Sentence ID="505">Move the object to a new position</Sentence>
      <Sentence ID="506">Hide the object</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508">Set new gantt data</Sentence>
      <Sentence ID="509">Set focus on the object</Sentence>
      <Sentence ID="511">Set new CSS style of the object</Sentence>
      <Sentence ID="512">Show the object</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="515"></Sentence>
      <Sentence ID="516"></Sentence>
      <Sentence ID="517"></Sentence>
      <Sentence ID="518"></Sentence>
      <Sentence ID="519"></Sentence>
      <Sentence ID="521"></Sentence>
      <Sentence ID="522"></Sentence>
      <Sentence ID="523"></Sentence>
      <Sentence ID="524"></Sentence>
      <Sentence ID="525">After add, delete or update link</Sentence>
      <Sentence ID="526">After add, delete or update task</Sentence>
      <Sentence ID="527"></Sentence>
      <Sentence ID="601">addClass</Sentence>
      <Sentence ID="602">addLink</Sentence>
      <Sentence ID="603">addTask</Sentence>
      <Sentence ID="604">Hide</Sentence>
      <Sentence ID="605">moveTo</Sentence>
      <Sentence ID="606">Hide</Sentence>
      <Sentence ID="607">setClass</Sentence>
      <Sentence ID="608">setData</Sentence>
      <Sentence ID="609">setFocus</Sentence>
      <Sentence ID="611">setStyle</Sentence>
      <Sentence ID="612">Show</Sentence>
      <Sentence ID="701">className</Sentence>
      <Sentence ID="702">data</Sentence>
      <Sentence ID="703">data</Sentence>
      <Sentence ID="704">Fade</Sentence>
      <Sentence ID="705">newX</Sentence>
      <Sentence ID="706">newY</Sentence>
      <Sentence ID="707">Effect</Sentence>
      <Sentence ID="708">Fade</Sentence>
      <Sentence ID="709"></Sentence>
      <Sentence ID="711">data</Sentence>
      <Sentence ID="712">cssStyleValue</Sentence>
      <Sentence ID="713">Fade</Sentence>
      <Sentence ID="801">The name of the CSS class.</Sentence>
      <Sentence ID="802">Data for link</Sentence>
      <Sentence ID="803">Data for new task</Sentence>
      <Sentence ID="804">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="805">X-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="806">Y-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="807">Visual effect of moving, time is indicated in milliseconds</Sentence>
      <Sentence ID="808">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="809"></Sentence>
      <Sentence ID="811">New data for gantt chart</Sentence>
      <Sentence ID="812">CSS style value</Sentence>
      <Sentence ID="813">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="903">Current X-value</Sentence>
      <Sentence ID="904">Current X-value</Sentence>
      <Sentence ID="905">Current X-value</Sentence>
      <Sentence ID="906">Current X-value</Sentence>
      <Sentence ID="907">Current X-value</Sentence>
      <Sentence ID="908">Current X-value</Sentence>
      <Sentence ID="909">Current X-value</Sentence>
      <Sentence ID="911">Current X-value</Sentence>
      <Sentence ID="912">Current X-value</Sentence>
      <Sentence ID="913">Current X-value</Sentence>
      <Sentence ID="914">Current X-value</Sentence>
      <Sentence ID="915">Current X-value</Sentence>
      <Sentence ID="916">Current X-value</Sentence>
      <Sentence ID="917">Current X-value</Sentence>
      <Sentence ID="918">Current X-value</Sentence>
      <Sentence ID="919">Current X-value</Sentence>
      <Sentence ID="921">params</Sentence>
      <Sentence ID="922">Link object</Sentence>
      <Sentence ID="923">Link id</Sentence>
      <Sentence ID="924">Task object</Sentence>
      <Sentence ID="925">Task id</Sentence>
      <Sentence ID="926">Current X-value</Sentence>
      <Sentence ID="927">Start date</Sentence>
      <Sentence ID="928">End date</Sentence>
    </Language>
    <Language Code="fr_FR">
      <Sentence ID="001">Gantt</Sentence>
      <Sentence ID="002">The gantt chart</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Hiérarchie</Sentence>
      <Sentence ID="103">Visibilité</Sentence>
      <Sentence ID="104">Z-Index</Sentence>
      <Sentence ID="105">Haut</Sentence>
      <Sentence ID="106">Gauche</Sentence>
      <Sentence ID="107">Largeur</Sentence>
      <Sentence ID="108">Hauteur</Sentence>
      <Sentence ID="109">Data</Sentence>
      <Sentence ID="111">Time scale</Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113">Readonly</Sentence>
      <Sentence ID="114">Duration unit</Sentence>
      <Sentence ID="115"></Sentence>
      <Sentence ID="116">Disable add button</Sentence>
      <Sentence ID="117"></Sentence>
      <Sentence ID="118">Deadline</Sentence>
      <Sentence ID="119">Skip off time</Sentence>
      <Sentence ID="121"></Sentence>
      <Sentence ID="122">Class</Sentence>
      <Sentence ID="123">Style</Sentence>
      <Sentence ID="125"></Sentence>
      <Sentence ID="126"></Sentence>
      <Sentence ID="127">Base tasks</Sentence>
      <Sentence ID="128">Custom parameters</Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Hiérarchie de l'objet, ordre de chargement de l'objet par rapport aux autres</Sentence>
      <Sentence ID="203">Afficher ou cacher l'objet</Sentence>
      <Sentence ID="204">Niveau de superposition de l'objet par rapport aux autres</Sentence>
      <Sentence ID="205">Distance depuis le bord haut de l'objet parent en pixels</Sentence>
      <Sentence ID="206">Distance depuis le bord gauche de l'objet parent en pixels</Sentence>
      <Sentence ID="207">Largeur de l'objet en pixels</Sentence>
      <Sentence ID="208">Hauteur de l'objet en pixels</Sentence>
      <Sentence ID="209">Specific dhtmlx gantt data</Sentence>
      <Sentence ID="211">Defines configuration settings of the time scale</Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213">Set gantt diagramm only read mode</Sentence>
      <Sentence ID="214">Set duration unit</Sentence>
      <Sentence ID="215"></Sentence>
      <Sentence ID="216">Disable add button for levels &gt;= value, where value from 0 to 100</Sentence>
      <Sentence ID="217"></Sentence>
      <Sentence ID="218">Add deadline to task</Sentence>
      <Sentence ID="219">Hide off time days in time scale</Sentence>
      <Sentence ID="221"></Sentence>
      <Sentence ID="222">CSS class name</Sentence>
      <Sentence ID="223">Custom style for gantt elements</Sentence>
      <Sentence ID="225"></Sentence>
      <Sentence ID="226"></Sentence>
      <Sentence ID="227">Define base tasks of gantt chart</Sentence>
      <Sentence ID="228">Add new custom task type</Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="303">Valeur Incorrecte, doit être 0 ou 1</Sentence>
      <Sentence ID="304">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="305">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="306">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="307">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="308">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="309">Invalid data for gantt chart</Sentence>
      <Sentence ID="311">Error in time scale</Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313">Error in readonly</Sentence>
      <Sentence ID="314">Error in duration unit</Sentence>
      <Sentence ID="315"></Sentence>
      <Sentence ID="316">Value must be in range from 0 to 100</Sentence>
      <Sentence ID="317"></Sentence>
      <Sentence ID="318">Error in deadline</Sentence>
      <Sentence ID="319">Error in skip off time</Sentence>
      <Sentence ID="321"></Sentence>
      <Sentence ID="322">Incorrect value</Sentence>
      <Sentence ID="323">Error in style</Sentence>
      <Sentence ID="325"></Sentence>
      <Sentence ID="326"></Sentence>
      <Sentence ID="327">Error in base tasks</Sentence>
      <Sentence ID="328">Error in custom task type</Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Invisible</Sentence>
      <Sentence ID="404">Visible</Sentence>
      <Sentence ID="405"></Sentence>
      <Sentence ID="406"></Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409">day</Sentence>
      <Sentence ID="411">hour</Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="413"></Sentence>
      <Sentence ID="414"></Sentence>
      <Sentence ID="415"></Sentence>
      <Sentence ID="416">Yes</Sentence>
      <Sentence ID="417">No</Sentence>
      <Sentence ID="418"></Sentence>
      <Sentence ID="419"></Sentence>
      <Sentence ID="421">Invisible</Sentence>
      <Sentence ID="422">Visible</Sentence>
      <Sentence ID="423"></Sentence>
      <Sentence ID="424"></Sentence>
      <Sentence ID="425">English</Sentence>
      <Sentence ID="426">French</Sentence>
      <Sentence ID="427">Russian</Sentence>
      <Sentence ID="501">Add new CSS class.</Sentence>
      <Sentence ID="502">Add new link for gantt diagram</Sentence>
      <Sentence ID="503">Add task into gantt diagram</Sentence>
      <Sentence ID="504">Hide the object</Sentence>
      <Sentence ID="505">Move object to selected point</Sentence>
      <Sentence ID="506">Hide the object</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508">Set new gantt data</Sentence>
      <Sentence ID="509">Set focus to the object</Sentence>
      <Sentence ID="511">Set new CSS style</Sentence>
      <Sentence ID="512">Show the object</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="515"></Sentence>
      <Sentence ID="516"></Sentence>
      <Sentence ID="517"></Sentence>
      <Sentence ID="518"></Sentence>
      <Sentence ID="519"></Sentence>
      <Sentence ID="521"></Sentence>
      <Sentence ID="522"></Sentence>
      <Sentence ID="523"></Sentence>
      <Sentence ID="524"></Sentence>
      <Sentence ID="525">After add, delete or update link</Sentence>
      <Sentence ID="526">After add, delete or update task</Sentence>
      <Sentence ID="527"></Sentence>
      <Sentence ID="601">addClass</Sentence>
      <Sentence ID="602">addLink</Sentence>
      <Sentence ID="603">addTask</Sentence>
      <Sentence ID="604">Hide</Sentence>
      <Sentence ID="605">moveTo</Sentence>
      <Sentence ID="606">Hide</Sentence>
      <Sentence ID="607">setClass</Sentence>
      <Sentence ID="608">setData</Sentence>
      <Sentence ID="609">setFocus</Sentence>
      <Sentence ID="611">setStyle</Sentence>
      <Sentence ID="612">Show</Sentence>
      <Sentence ID="701">className</Sentence>
      <Sentence ID="702">data</Sentence>
      <Sentence ID="703">data</Sentence>
      <Sentence ID="704">Fade</Sentence>
      <Sentence ID="705">newX</Sentence>
      <Sentence ID="706">newY</Sentence>
      <Sentence ID="707">Effect</Sentence>
      <Sentence ID="708">Fade</Sentence>
      <Sentence ID="709"></Sentence>
      <Sentence ID="711">data</Sentence>
      <Sentence ID="712">cssStyleValue</Sentence>
      <Sentence ID="713">Fade</Sentence>
      <Sentence ID="801">The name of the CSS class.</Sentence>
      <Sentence ID="802">Data for link</Sentence>
      <Sentence ID="803">Data for new task</Sentence>
      <Sentence ID="804">Fade time</Sentence>
      <Sentence ID="805">X-coordinate of new point</Sentence>
      <Sentence ID="806">Y-coordinate of new point</Sentence>
      <Sentence ID="807">Visual effect by moving</Sentence>
      <Sentence ID="808">Fade time</Sentence>
      <Sentence ID="809"></Sentence>
      <Sentence ID="811">New data for gantt chart</Sentence>
      <Sentence ID="812">New CSS style value</Sentence>
      <Sentence ID="813">Time of appearance</Sentence>
      <Sentence ID="903">Current X-value</Sentence>
      <Sentence ID="904">Current X-value</Sentence>
      <Sentence ID="905">Current X-value</Sentence>
      <Sentence ID="906">Current X-value</Sentence>
      <Sentence ID="907">Current X-value</Sentence>
      <Sentence ID="908">Current X-value</Sentence>
      <Sentence ID="909">Current X-value</Sentence>
      <Sentence ID="911">Current X-value</Sentence>
      <Sentence ID="912">Current X-value</Sentence>
      <Sentence ID="913">Current X-value</Sentence>
      <Sentence ID="914">Current X-value</Sentence>
      <Sentence ID="915">Current X-value</Sentence>
      <Sentence ID="916">Current X-value</Sentence>
      <Sentence ID="917">Current X-value</Sentence>
      <Sentence ID="918">Current X-value</Sentence>
      <Sentence ID="919">Current X-value</Sentence>
      <Sentence ID="921"></Sentence>
      <Sentence ID="922">Link object</Sentence>
      <Sentence ID="923">Link id</Sentence>
      <Sentence ID="924">Task object</Sentence>
      <Sentence ID="925">Task id</Sentence>
      <Sentence ID="926">Current X-value</Sentence>
      <Sentence ID="927">Start date</Sentence>
      <Sentence ID="928">End date</Sentence>
    </Language>
    <Language Code="ru_RU">
      <Sentence ID="001">Gantt</Sentence>
      <Sentence ID="002">The gantt chart</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Иерархия</Sentence>
      <Sentence ID="103">Отображение</Sentence>
      <Sentence ID="104">Позиция</Sentence>
      <Sentence ID="105">Сверху</Sentence>
      <Sentence ID="106">Слева</Sentence>
      <Sentence ID="107">Ширина</Sentence>
      <Sentence ID="108">Высота</Sentence>
      <Sentence ID="109">Data</Sentence>
      <Sentence ID="111">Time scale</Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113">Readonly</Sentence>
      <Sentence ID="114">Duration unit</Sentence>
      <Sentence ID="115"></Sentence>
      <Sentence ID="116">Disable add button</Sentence>
      <Sentence ID="117"></Sentence>
      <Sentence ID="118">Deadline</Sentence>
      <Sentence ID="119">Skip off time</Sentence>
      <Sentence ID="121"></Sentence>
      <Sentence ID="122">Класс CSS</Sentence>
      <Sentence ID="123">Style</Sentence>
      <Sentence ID="125"></Sentence>
      <Sentence ID="126"></Sentence>
      <Sentence ID="127">Base tasks</Sentence>
      <Sentence ID="128">Custom parameters</Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Порядок визуализации объекта в ходе загрузки страницы</Sentence>
      <Sentence ID="203">Неправильное значение, должен быть указан 0 или 1</Sentence>
      <Sentence ID="204">Положение в визуальной иерархии объектов</Sentence>
      <Sentence ID="205">Расстояние от верхней границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="206">Расстояние от левой границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="207">Ширина объекта в пикселях</Sentence>
      <Sentence ID="208">Высота объекта в пикселях</Sentence>
      <Sentence ID="209">Specific dhtmlx gantt data</Sentence>
      <Sentence ID="211">Defines configuration settings of the time scale</Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213">Set gantt diagramm only read mode</Sentence>
      <Sentence ID="214">Set duration unit</Sentence>
      <Sentence ID="215"></Sentence>
      <Sentence ID="216">Disable add button for levels &gt;= value, where value from 0 to 100</Sentence>
      <Sentence ID="217"></Sentence>
      <Sentence ID="218">Add deadline to task</Sentence>
      <Sentence ID="219">Hide off time days in time scale</Sentence>
      <Sentence ID="221"></Sentence>
      <Sentence ID="222">Имя класса CSS</Sentence>
      <Sentence ID="223">Custom style for gantt elements</Sentence>
      <Sentence ID="225"></Sentence>
      <Sentence ID="226"></Sentence>
      <Sentence ID="227">Define base tasks of gantt chart</Sentence>
      <Sentence ID="228">Add new custom task type</Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="303">Неправильное значение</Sentence>
      <Sentence ID="304">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="305">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="306">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="307">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="308">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="309">Invalid data for gantt chart</Sentence>
      <Sentence ID="311">Error in time scale</Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313">Error in readonly</Sentence>
      <Sentence ID="314">Error in duration unit</Sentence>
      <Sentence ID="315"></Sentence>
      <Sentence ID="316">Value must be in range from 0 to 100</Sentence>
      <Sentence ID="317"></Sentence>
      <Sentence ID="318">Error in deadline</Sentence>
      <Sentence ID="319">Error in skip off time</Sentence>
      <Sentence ID="321"></Sentence>
      <Sentence ID="322">Неправильное значение</Sentence>
      <Sentence ID="323">Error in style</Sentence>
      <Sentence ID="325"></Sentence>
      <Sentence ID="326"></Sentence>
      <Sentence ID="327">Error in base tasks</Sentence>
      <Sentence ID="328">Error in custom task type</Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Не отображать</Sentence>
      <Sentence ID="404">Отображать</Sentence>
      <Sentence ID="405"></Sentence>
      <Sentence ID="406"></Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409">day</Sentence>
      <Sentence ID="411">hour</Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="413"></Sentence>
      <Sentence ID="414"></Sentence>
      <Sentence ID="415"></Sentence>
      <Sentence ID="416">Yes</Sentence>
      <Sentence ID="417">No</Sentence>
      <Sentence ID="418">Yes</Sentence>
      <Sentence ID="419">No</Sentence>
      <Sentence ID="421">Невидимая</Sentence>
      <Sentence ID="422">Видимая</Sentence>
      <Sentence ID="423"></Sentence>
      <Sentence ID="424"></Sentence>
      <Sentence ID="425">English</Sentence>
      <Sentence ID="426">French</Sentence>
      <Sentence ID="427">Russian</Sentence>
      <Sentence ID="501">Add new CSS class.</Sentence>
      <Sentence ID="502">Add new link for gantt diagram</Sentence>
      <Sentence ID="503">Add task into gantt diagram</Sentence>
      <Sentence ID="504">Скрыть объект</Sentence>
      <Sentence ID="505">Сдвинуть объект в заданную точку</Sentence>
      <Sentence ID="506">Скрыть объект</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508">Set new gantt data</Sentence>
      <Sentence ID="509">Установить фокус на объекте</Sentence>
      <Sentence ID="511">Установить новый стиль CSS</Sentence>
      <Sentence ID="512">Показать объект</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="515"></Sentence>
      <Sentence ID="516"></Sentence>
      <Sentence ID="517"></Sentence>
      <Sentence ID="518"></Sentence>
      <Sentence ID="519"></Sentence>
      <Sentence ID="521"></Sentence>
      <Sentence ID="522"></Sentence>
      <Sentence ID="523"></Sentence>
      <Sentence ID="524"></Sentence>
      <Sentence ID="525">After add, delete or update link</Sentence>
      <Sentence ID="526">After add, delete or update task</Sentence>
      <Sentence ID="527"></Sentence>
      <Sentence ID="601">addClass</Sentence>
      <Sentence ID="602">addLink</Sentence>
      <Sentence ID="603">addTask</Sentence>
      <Sentence ID="604">Скрыть</Sentence>
      <Sentence ID="605">Сдвинуть</Sentence>
      <Sentence ID="606">Скрыть</Sentence>
      <Sentence ID="607">setClass</Sentence>
      <Sentence ID="608">setData</Sentence>
      <Sentence ID="609">Установить фокус</Sentence>
      <Sentence ID="611">Установить стиль</Sentence>
      <Sentence ID="612">Показать</Sentence>
      <Sentence ID="701">className</Sentence>
      <Sentence ID="702">data</Sentence>
      <Sentence ID="703">data</Sentence>
      <Sentence ID="704">Исчезновение</Sentence>
      <Sentence ID="705">Координата по оси X</Sentence>
      <Sentence ID="706">Координата по оси Y</Sentence>
      <Sentence ID="707">Эффект</Sentence>
      <Sentence ID="708">Исчезновение</Sentence>
      <Sentence ID="709"></Sentence>
      <Sentence ID="711">data</Sentence>
      <Sentence ID="712">Стиль CSS</Sentence>
      <Sentence ID="713">Появление</Sentence>
      <Sentence ID="801">The name of the CSS class.</Sentence>
      <Sentence ID="802">Data for link</Sentence>
      <Sentence ID="803">Data for new task</Sentence>
      <Sentence ID="804">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="805">Координата новой точки по оси X</Sentence>
      <Sentence ID="806">Координата новой точки по оси Y</Sentence>
      <Sentence ID="807">Визуальный эффект при перетаскивании</Sentence>
      <Sentence ID="808">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="809"></Sentence>
      <Sentence ID="811">New data for gantt chart</Sentence>
      <Sentence ID="812">Новое значение стиля</Sentence>
      <Sentence ID="813">Время появления в миллисекундах</Sentence>
      <Sentence ID="903">Текущее значение X</Sentence>
      <Sentence ID="904">Текущее значение X</Sentence>
      <Sentence ID="905">Текущее значение X</Sentence>
      <Sentence ID="906">Текущее значение X</Sentence>
      <Sentence ID="907">Текущее значение X</Sentence>
      <Sentence ID="908">Текущее значение X</Sentence>
      <Sentence ID="909">Текущее значение X</Sentence>
      <Sentence ID="911">Текущее значение X</Sentence>
      <Sentence ID="912">Текущее значение X</Sentence>
      <Sentence ID="913">Текущее значение X</Sentence>
      <Sentence ID="914">Текущее значение X</Sentence>
      <Sentence ID="915">Текущее значение X</Sentence>
      <Sentence ID="916">Текущее значение X</Sentence>
      <Sentence ID="917">Текущее значение X</Sentence>
      <Sentence ID="918">Текущее значение X</Sentence>
      <Sentence ID="919">Текущее значение X</Sentence>
      <Sentence ID="921"></Sentence>
      <Sentence ID="922">Link object</Sentence>
      <Sentence ID="923">Link id</Sentence>
      <Sentence ID="924">Task object</Sentence>
      <Sentence ID="925">Task id</Sentence>
      <Sentence ID="926">Текущее значение X</Sentence>
      <Sentence ID="927">Start date</Sentence>
      <Sentence ID="928">End date</Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="2b5aee40-ed7f-4a64-8d36-f226fca44ac8" Name="GantIcon.png" Type="png"><![CDATA[
      iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA8ElEQVQ4T52SPQqEMBCFJ1FEwcoL2HgmDyDW9hZWimJlJXgBwTN4BCtvIoKdqEsChp31L2u6vLz5MrwZkqbpFoYhvD2EUrotywJZlkkxfj8TgDiOpQBRFCGfADC1KAqoqgoZDMOAvu8v4QgwDAOM44jM0zSBbdtIM00TCCFcQ4CzbyzLOshd14HjOHKAp2BQB+u6HvyU0luGALBiTdMOZpaBrutyIe6upmlEgeu6cNfFaYie5wlAWZagKAq/M5Cqqtd7cNan7/tQ1zV/CoIA8jz/D/DtZnuyj5V1Ms/z8x5IjbFt2yff9RSSJNleVvO6D9O3cZax4OrMAAAAAElFTkSuQmCC]]>
    </Resource>
    <Resource ID="32dda2ed-1356-4297-8c4b-371919c9c0c5" Name="Gantt.png" Type="png">
      <![CDATA[iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAQAAABecRxxAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QAAKqNIzIAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAHdElNRQfkAxMNBTr3rs8xAAAHj0lEQVR42u3dsYqcVRyH4TOyUSSCxWKhndh5A9ZaWdpqaSGolfZWegk24iVYCUbwIiwMpBAkBLV1CSFYaDFWlkEz82X/k3mfZ+pv+O2wvHBgmLMWAAAAAAAAAAAAAAAAAAAAcGp267uDnnuw3pueDhxrt/YHPXe1LqenA8d6ZnoAMEcAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIOxiesBa67P1yvQEovbro+kJs3Zrf9BzV+tysw131uvTHwNZu+kBsxwBIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIOwUrgf/ZXoAWYfdjX1GTuF6cGCIIwCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCECQCEncLNQE/Sc+ul6Qln5+G6Pz2BrZx7AN5a309PODtfrw+mJ7AVRwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIO/frwX9c70xPODv3pgewnd3aH/Tc1bqcng4cyxEAwgQAwgQAwgQAwgQAwgQAwgQAwgQAwgQAwgQAwgQAwgQAwgQAwgQAws799wD4L39PDzg7v67Xpif8fwJQ5z9gazemBzwORwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIczds3SfTA87Og+kBj2O39gc9d7Uup6cDx3IEgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgLCL6QEHemF9Mz3h7NxdH09P4Lo9rQF4dr09PeHs3J4ewPVzBIAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYCwp/V24L/WrekJZ+fu9ACu327tD3rual1OTweO5QgAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYQIAYU/rz4KfinfXm9MTNvPb+nx6Atdvf9Drj+nZJ+LLAz+/U3z9NP1hcv0cASBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACDM9eDH+X3dnp6wmZ+nB3D9dmt/0HNX63J6OnAsRwAIEwAIEwAIEwAIEwAIEwAIEwAI80UgHuXG+nR6wgbur6+mJ5wyXwTiUW6uh9MTNnBvvTo94ZQ5AkCYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECYAECY68F5lP36c3rCBs7hb3iCBIBH+XPdnJ7Ak+YIAGECAGECAGECAGECAGECAGECAGG+B0DLF+v96Qkb+HB9u80bCQAtL66Xpyds4Pmt3sgRAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMIEAMLcDkzLD+vB9IQN3NnqjXZrf9BzV+ty+jMAjuUIAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGECAGEXBz/3xvR04Fi7tZ+eAExxBIAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYAwAYCwi3VregIAAAAAAAAAAAAAAAAAAAAA8K9/ALHxwLV3wQfhAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIwLTAzLTE5VDEzOjA1OjU4KzAwOjAwSPQjOQAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMC0wMy0xOVQxMzowNTo1OCswMDowMDmpm4UAAAAZdEVYdFNvZnR3YXJlAHd3dy5pbmtzY2FwZS5vcmeb7jwaAAAAAElFTkSuQmCC]]>
    </Resource>
    <Resource ID="e0ab6594-77ca-47b3-a35c-d3939406ca8e" Name="GanttIcon-.png" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAACI0lEQVRoQ+2ava4BURDH55CoiIRKIiod0ekVRKGRkGgUPp6BlsQj6Ck0G4UnQOIxRIlXIPG1N0eQ3BtrzjH2466zyVb7nznz+4852SPLdF3XwQUX0zTtCuL3+6FQKPxbJAYAV5B4PA6r1UqB2O2AYUc2mw3s93tb6guFQhAOh6XWNgTJ5XIwnU6lkn1K3Ol0oNvtSqVzP0i5XIbFYiHlyqfErVYL2u22VDq1a0nZZYFYuCOn0wkymQyppEajAfw24xIGOR6P4PP5SDW8sxuJLvh9IPzdcjweixr0VJdMJiGRSJByGAULd4Sy+uVyoYQDY+x6v7osAcGKwCgrlQpomqZAMKOEn7umI584hGJmWDIjwq0jCBUIwTxTQlVHTLGVkFSoI9QjbyQSMe3V5M6OgvCt0+PxELwCqNfrMBgMSDmw4O8CSaVSmCEvnxeLRej1eqQcWDDaESyBU56TQPj8nM9nlIW/Xni9XlRHEZBAhsOh0BncEcP+yiVXgTSbTfQXUavV7N9+0SoFBbvdTmieAoGAYMbfMtKMyKyYzWZhNpuhIfx8j509niVRIKi1fwT5fB7m8zkadjgcnN0RlOAm4H/NLpdLVB6NRiEYDD50lv200MpugvV6DbFYDJWPRiOoVqsKBHWKKthut5BOp9E0/X4fSqWSczuCEhgIHDcjCsR1Xz7wLW8ymbzbWdvjHjNieyXEAtwDcv/MiWiI7eHMLR+e/QDdnlvi6ApBIgAAAABJRU5ErkJggg==]]>
    </Resource>
    <Resource ID="ec8cf865-3e9b-fde2-a67f-3ce5b21f1caf" Name="dhtmlxgantt.css" Type="css"><![CDATA[LmdyaWRIb3ZlclN0eWxlLC5ncmlkU2VsZWN0aW9uLC50aW1lbGluZVNlbGVjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNmZmYzYTF9LmdhbnR0X2dyaWRfc2NhbGUgLmdhbnR0X2dyaWRfaGVhZF9jZWxse2NvbG9yOiNhNmE2YTY7Ym9yZGVyLXRvcDpub25lIWltcG9ydGFudDtib3JkZXItcmlnaHQ6bm9uZSFpbXBvcnRhbnR9LmdhbnR0X2dyaWRfZGF0YSAuZ2FudHRfY2VsbHtib3JkZXItcmlnaHQ6bm9uZTtjb2xvcjojNDU0NTQ1fS5nYW50dF90YXNrX2xpbmsgLmdhbnR0X2xpbmtfYXJyb3dfcmlnaHR7Ym9yZGVyLXdpZHRoOjZweDttYXJnaW4tdG9wOi0zcHh9LmdhbnR0X3Rhc2tfbGluayAuZ2FudHRfbGlua19hcnJvd19sZWZ0e2JvcmRlci13aWR0aDo2cHg7bWFyZ2luLWxlZnQ6LTZweDttYXJnaW4tdG9wOi0zcHh9LmdhbnR0X3Rhc2tfbGluayAuZ2FudHRfbGlua19hcnJvd19kb3duLC5nYW50dF90YXNrX2xpbmsgLmdhbnR0X2xpbmtfYXJyb3dfdXB7Ym9yZGVyLXdpZHRoOjZweH0uZ2FudHRfdGFza19saW5lIC5nYW50dF90YXNrX3Byb2dyZXNzX2RyYWd7Ym90dG9tOi00cHg7aGVpZ2h0OjEwcHg7bWFyZ2luLWxlZnQ6LThweDt3aWR0aDoxNnB4fS5jaGFydEhlYWRlckJne2JhY2tncm91bmQtY29sb3I6I2ZmZn0uZ2FudHRfdGFzayAuZ2FudHRfdGFza19zY2FsZSAuZ2FudHRfc2NhbGVfY2VsbHtjb2xvcjojYTZhNmE2O2JvcmRlci1yaWdodDoxcHggc29saWQgI2ViZWJlYn0uZ2FudHRfcm93LmdhbnR0X3Byb2plY3QsLmdhbnR0X3Jvdy5vZGQuZ2FudHRfcHJvamVjdHtiYWNrZ3JvdW5kLWNvbG9yOiNlZGZmZWZ9LmdhbnR0X3Rhc2tfcm93LmdhbnR0X3Byb2plY3QsLmdhbnR0X3Rhc2tfcm93Lm9kZC5nYW50dF9wcm9qZWN0e2JhY2tncm91bmQtY29sb3I6I2Y1ZmZmNn0uZ2FudHRfdGFza19saW5lLmdhbnR0X3Byb2plY3R7YmFja2dyb3VuZC1jb2xvcjojNjVjMTZmO2JvcmRlcjoxcHggc29saWQgIzNjOTQ0NX0uZ2FudHRfdGFza19saW5lLmdhbnR0X3Byb2plY3QgLmdhbnR0X3Rhc2tfcHJvZ3Jlc3N7YmFja2dyb3VuZC1jb2xvcjojNDZhZDUxfS5idXR0b25CZ3tiYWNrZ3JvdW5kOiNmZmZ9LmdhbnR0X2NhbF9saWdodCAuZ2FudHRfYnRuX3NldHttYXJnaW46NXB4IDEwcHh9LmdhbnR0X2J0bl9zZXQuZ2FudHRfY2FuY2VsX2J0bl9zZXR7YmFja2dyb3VuZDojZmZmO2NvbG9yOiM0NTQ1NDU7Ym9yZGVyOjFweCBzb2xpZCAjY2VjZWNlfS5nYW50dF9idG5fc2V0LmdhbnR0X3NhdmVfYnRuX3NldHtiYWNrZ3JvdW5kOiMzZGI5ZDM7dGV4dC1zaGFkb3c6MCAtMXB4IDAgIzI0OGE5Zjtjb2xvcjojZmZmfS5nYW50dF9idG5fc2V0LmdhbnR0X2RlbGV0ZV9idG5fc2V0e3RleHQtc2hhZG93OjAgLTFweCAwICM2ZjZmNmY7YmFja2dyb3VuZDojZWM4ZTAwO3RleHQtc2hhZG93OjAgLTFweCAwICNhNjA7Y29sb3I6I2ZmZn0uZ2FudHRfY2FsX2xpZ2h0X3dpZGV7cGFkZGluZy1sZWZ0OjAhaW1wb3J0YW50O3BhZGRpbmctcmlnaHQ6MCFpbXBvcnRhbnR9LmdhbnR0X2NhbF9saWdodF93aWRlIC5nYW50dF9jYWxfbGFyZWF7Ym9yZGVyLWxlZnQ6bm9uZSFpbXBvcnRhbnQ7Ym9yZGVyLXJpZ2h0Om5vbmUhaW1wb3J0YW50fS5nYW50dF9wb3B1cF9idXR0b24uZ2FudHRfb2tfYnV0dG9ue2JhY2tncm91bmQ6IzNkYjlkMzt0ZXh0LXNoYWRvdzowIC0xcHggMCAjMjQ4YTlmO2NvbG9yOiNmZmY7Zm9udC13ZWlnaHQ6NzAwO2JvcmRlci13aWR0aDowfS5nYW50dF9wb3B1cF9idXR0b24uZ2FudHRfY2FuY2VsX2J1dHRvbntmb250LXdlaWdodDo3MDA7Y29sb3I6IzQ1NDU0NH0uZ2FudHRfcG9wdXBfdGl0bGV7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5nYW50dF9wb3B1cF9zaGFkb3d7Ym94LXNoYWRvdzozcHggM3B4IDNweCByZ2JhKDAsMCwwLC4wNyl9LmdhbnR0X3FpX2JpZ19pY29uLmljb25fZWRpdHtjb2xvcjojNDU0NTQ1O2JhY2tncm91bmQ6I2ZmZn0uZ2FudHRfcWlfYmlnX2ljb24uaWNvbl9kZWxldGV7dGV4dC1zaGFkb3c6MCAtMXB4IDAgI2E2MDtiYWNrZ3JvdW5kOiNlYzhlMDA7Y29sb3I6I2ZmZjtib3JkZXItd2lkdGg6MH0uZ2FudHRfdG9vbHRpcHtib3gtc2hhZG93OjNweCAzcHggM3B4IHJnYmEoMCwwLDAsLjA3KTtib3JkZXItbGVmdDoxcHggc29saWQgcmdiYSgwLDAsMCwuMDcpO2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjA3KTtmb250LXNpemU6OHB0O2NvbG9yOiM0NTQ1NDV9LmdhbnR0X2NvbnRhaW5lciwuZ2FudHRfdG9vbHRpcHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Zm9udC1mYW1pbHk6QXJpYWx9LmdhbnR0X2NvbnRhaW5lcntmb250LXNpemU6MTNweDtib3JkZXI6MXB4IHNvbGlkICNjZWNlY2U7cG9zaXRpb246cmVsYXRpdmU7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6aGlkZGVufS5nYW50dF90YXNrX3Njcm9sbHtvdmVyZmxvdy14OnNjcm9sbH0uZ2FudHRfZ3JpZCwuZ2FudHRfdGFza3twb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdy14OmhpZGRlbjtvdmVyZmxvdy15OmhpZGRlbjtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjp0b3B9LmdhbnR0X2dyaWRfc2NhbGUsLmdhbnR0X3Rhc2tfc2NhbGV7Y29sb3I6IzZiNmI2Yjtmb250LXNpemU6MTJweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjY2VjZWNlO2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2FudHRfZ3JpZF9zY2FsZSwuZ2FudHRfdGFza19zY2FsZSwuZ2FudHRfdGFza192c2Nyb2xse2JhY2tncm91bmQtY29sb3I6I2ZmZn0uZ2FudHRfc2NhbGVfbGluZXtib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXRvcDoxcHggc29saWQgI2NlY2VjZX0uZ2FudHRfc2NhbGVfbGluZTpmaXJzdC1jaGlsZHtib3JkZXItdG9wOm5vbmV9LmdhbnR0X2dyaWRfaGVhZF9jZWxse2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcDtib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNjZWNlY2U7dGV4dC1hbGlnbjpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmU7Y3Vyc29yOmRlZmF1bHQ7aGVpZ2h0OjEwMCU7Ym94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2xpbmUtaGVpZ2h0OjMzcHg7LW1vei11c2VyLXNlbGVjdDotbW96LW5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7b3ZlcmZsb3c6aGlkZGVufS5nYW50dF9zY2FsZV9saW5le2NsZWFyOmJvdGh9LmdhbnR0X2dyaWRfZGF0YXt3aWR0aDoxMDAlO292ZXJmbG93OmhpZGRlbjtwb3NpdGlvbjpyZWxhdGl2ZX0uZ2FudHRfcm93e3Bvc2l0aW9uOnJlbGF0aXZlOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDotbW96LW5vbmV9LmdhbnR0X2FkZCwuZ2FudHRfZ3JpZF9oZWFkX2FkZHt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQtaW1hZ2U6dXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQkFBQUFBUUNBWUFBQUFmOC85aEFBQUFHWFJGV0hSVGIyWjBkMkZ5WlFCQlpHOWlaU0JKYldGblpWSmxZV1I1Y2NsbFBBQUFBeUpwVkZoMFdFMU1PbU52YlM1aFpHOWlaUzU0YlhBQUFBQUFBRHcvZUhCaFkydGxkQ0JpWldkcGJqMGk3N3UvSWlCcFpEMGlWelZOTUUxd1EyVm9hVWg2Y21WVGVrNVVZM3ByWXpsa0lqOCtJRHg0T25odGNHMWxkR0VnZUcxc2JuTTZlRDBpWVdSdlltVTZibk02YldWMFlTOGlJSGc2ZUcxd2RHczlJa0ZrYjJKbElGaE5VQ0JEYjNKbElEVXVNeTFqTURFeElEWTJMakUwTlRZMk1Td2dNakF4TWk4d01pOHdOaTB4TkRvMU5qb3lOeUFnSUNBZ0lDQWdJajRnUEhKa1pqcFNSRVlnZUcxc2JuTTZjbVJtUFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMekF5THpJeUxYSmtaaTF6ZVc1MFlYZ3Ribk1qSWo0Z1BISmtaanBFWlhOamNtbHdkR2x2YmlCeVpHWTZZV0p2ZFhROUlpSWdlRzFzYm5NNmVHMXdQU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNoaGNDOHhMakF2SWlCNGJXeHVjenA0YlhCTlRUMGlhSFIwY0RvdkwyNXpMbUZrYjJKbExtTnZiUzk0WVhBdk1TNHdMMjF0THlJZ2VHMXNibk02YzNSU1pXWTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpWSmxaaU1pSUhodGNEcERjbVZoZEc5eVZHOXZiRDBpUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5UTmlBb1YybHVaRzkzY3lraUlIaHRjRTFOT2tsdWMzUmhibU5sU1VROUluaHRjQzVwYVdRNk5UUTNNak15TUVORE5rSTBNVEZGTWprNE1USTVRVGczTURoRk5EVkRRVGtpSUhodGNFMU5Pa1J2WTNWdFpXNTBTVVE5SW5odGNDNWthV1E2TlRRM01qTXlNRVJETmtJME1URkZNams0TVRJNVFUZzNNRGhGTkRWRFFUa2lQaUE4ZUcxd1RVMDZSR1Z5YVhabFpFWnliMjBnYzNSU1pXWTZhVzV6ZEdGdVkyVkpSRDBpZUcxd0xtbHBaRG8xTkRjeU16SXdRVU0yUWpReE1VVXlPVGd4TWpsQk9EY3dPRVUwTlVOQk9TSWdjM1JTWldZNlpHOWpkVzFsYm5SSlJEMGllRzF3TG1ScFpEbzFORGN5TXpJd1FrTTJRalF4TVVVeU9UZ3hNamxCT0Rjd09FVTBOVU5CT1NJdlBpQThMM0prWmpwRVpYTmpjbWx3ZEdsdmJqNGdQQzl5WkdZNlVrUkdQaUE4TDNnNmVHMXdiV1YwWVQ0Z1BEOTRjR0ZqYTJWMElHVnVaRDBpY2lJL1BzaFpUOFVBQUFCYlNVUkJWSGphWXJUZGVabUJFc0NFUis0d0VQK0g0c1BrR0dDRGcwMjBBUlI3Z2I0R0lBY1lES01EZFBuRHlBYllrR0c1RFZXOWNJUU12VWRCQkF1VVk0dkR6OGlBY1ppbkEyemdDSHFBWVFNc2VBeXdKY1lGQUFFR0FNK1VGR3VvaEZjekFBQUFBRWxGVGtTdVFtQ0MpO2JhY2tncm91bmQtcG9zaXRpb246NTAlO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTstbW96LW9wYWNpdHk6LjM7b3BhY2l0eTouM30uZ2FudHRfZ3JpZF9oZWFkX2NlbGwuZ2FudHRfZ3JpZF9oZWFkX2FkZHstbW96LW9wYWNpdHk6LjY7b3BhY2l0eTouNjt0b3A6MH0uZ2FudHRfZ3JpZF9oZWFkX2NlbGwuZ2FudHRfZ3JpZF9oZWFkX2FkZDpob3ZlcnstbW96LW9wYWNpdHk6MTtvcGFjaXR5OjF9LmdhbnR0X2dyaWRfZGF0YSAuZ2FudHRfcm93Lm9kZDpob3ZlciwuZ2FudHRfZ3JpZF9kYXRhIC5nYW50dF9yb3c6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZmZmM2ExfS5nYW50dF9ncmlkX2RhdGEgLmdhbnR0X3Jvdy5vZGQ6aG92ZXIgLmdhbnR0X2FkZCwuZ2FudHRfZ3JpZF9kYXRhIC5nYW50dF9yb3c6aG92ZXIgLmdhbnR0X2FkZHstbW96LW9wYWNpdHk6MTtvcGFjaXR5OjF9LmdhbnR0X3JvdywuZ2FudHRfdGFza19yb3d7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2ViZWJlYjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmdhbnR0X3Jvdy5vZGQsLmdhbnR0X3Rhc2tfcm93Lm9kZHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmdhbnR0X2NlbGwsLmdhbnR0X2dyaWRfaGVhZF9jZWxsLC5nYW50dF9yb3csLmdhbnR0X3NjYWxlX2NlbGwsLmdhbnR0X3Rhc2tfY2VsbCwuZ2FudHRfdGFza19yb3d7Ym94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94fS5nYW50dF9ncmlkX2hlYWRfY2VsbCwuZ2FudHRfc2NhbGVfY2VsbHtsaW5lLWhlaWdodDppbmhlcml0fS5nYW50dF9ncmlkX3NjYWxlIC5nYW50dF9ncmlkX2NvbHVtbl9yZXNpemVfd3JhcHtjdXJzb3I6Y29sLXJlc2l6ZTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxM3B4O21hcmdpbi1sZWZ0Oi03cHh9LmdhbnR0X2dyaWRfY29sdW1uX3Jlc2l6ZV93cmFwIC5nYW50dF9ncmlkX2NvbHVtbl9yZXNpemV7YmFja2dyb3VuZC1jb2xvcjojY2VjZWNlO2hlaWdodDoxMDAlO3dpZHRoOjFweDttYXJnaW46MCBhdXRvfS5nYW50dF9kcmFnX21hcmtlci5nYW50dF9ncmlkX3Jlc2l6ZV9hcmVhe2JhY2tncm91bmQtY29sb3I6aHNsYSgwLDAlLDkxJSwuNSk7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNjZWNlY2U7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjY2VjZWNlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7Ym94LXNpemluZzpib3JkZXItYm94fS5nYW50dF9jZWxse2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcDtib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNlYmViZWI7cGFkZGluZy1sZWZ0OjZweDtwYWRkaW5nLXJpZ2h0OjZweDtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW47d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtc2l6ZToxM3B4fS5nYW50dF9ncmlkX2RhdGEgLmdhbnR0X2xhc3RfY2VsbCwuZ2FudHRfZ3JpZF9zY2FsZSAuZ2FudHRfbGFzdF9jZWxsLC5nYW50dF90YXNrIC5nYW50dF90YXNrX3NjYWxlIC5nYW50dF9zY2FsZV9jZWxsLmdhbnR0X2xhc3RfY2VsbCwuZ2FudHRfdGFza19iZyAuZ2FudHRfbGFzdF9jZWxse2JvcmRlci1yaWdodC13aWR0aDowfS5nYW50dF90YXNrIC5nYW50dF90YXNrX3NjYWxlIC5nYW50dF9zY2FsZV9jZWxsLmdhbnR0X2xhc3RfY2VsbHtib3JkZXItcmlnaHQtd2lkdGg6MXB4fS5nYW50dF90YXNrX2Jne292ZXJmbG93OmhpZGRlbn0uZ2FudHRfc2NhbGVfY2VsbHtkaXNwbGF5OmlubGluZS1ibG9jazt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci1yaWdodDoxcHggc29saWQgI2NlY2VjZTt0ZXh0LWFsaWduOmNlbnRlcjtoZWlnaHQ6MTAwJX0uZ2FudHRfdGFza19jZWxse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDoxMDAlO2JvcmRlci1yaWdodDoxcHggc29saWQgI2ViZWJlYn0uZ2FudHRfbGF5b3V0X2NlbGwuZ2FudHRfdmVyX3Njcm9sbHt3aWR0aDowO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7aGVpZ2h0OjFweDtvdmVyZmxvdy14OmhpZGRlbjtvdmVyZmxvdy15OnNjcm9sbDtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3otaW5kZXg6MX0uZ2FudHRfdmVyX3Njcm9sbD5kaXZ7d2lkdGg6MXB4O2hlaWdodDoxcHh9LmdhbnR0X2hvcl9zY3JvbGx7aGVpZ2h0OjA7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt3aWR0aDoxMDAlO2NsZWFyOmJvdGg7b3ZlcmZsb3cteDpzY3JvbGw7b3ZlcmZsb3cteTpoaWRkZW59LmdhbnR0X2xheW91dF9jZWxsIC5nYW50dF9ob3Jfc2Nyb2xse3Bvc2l0aW9uOmFic29sdXRlfS5nYW50dF9ob3Jfc2Nyb2xsPmRpdnt3aWR0aDo1MDAwcHg7aGVpZ2h0OjFweH0uZ2FudHRfdHJlZV9pbmRlbnR7d2lkdGg6MTVweDtoZWlnaHQ6MTAwJTtkaXNwbGF5OmlubGluZS1ibG9ja30uZ2FudHRfdHJlZV9jb250ZW50LC5nYW50dF90cmVlX2ljb257dmVydGljYWwtYWxpZ246dG9wfS5nYW50dF90cmVlX2ljb257d2lkdGg6MjhweDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCV9LmdhbnR0X3RyZWVfY29udGVudCwuZ2FudHRfdHJlZV9pY29ue2hlaWdodDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5nYW50dF90cmVlX2ljb24uZ2FudHRfb3BlbntiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJJQUFBQVNDQVlBQUFCV3pvNVhBQUFBcmtsRVFWUTRUMk5rb0JKZ3BKSTVERVBBb0ZPblR2MC9jK1lNUVIrYm1KZ3dtSm1ad1gyRTRiVnAwNmI5ajR5TVpPRGc0TUJwMkk4ZlB4aVdMMS9Pa0pXVk5VQUdjWEp5TW56Ly9oM3VRckpkUkxGQklBUFFBY2hsSkxzSUZ1Q01qSXdNLy8vL0I1c0pNb1JrZzJDdUlkdHJRY0hCRE94c2JIQmZDUWdJTUh6NDhBSE8vL25yRjhPNnRXc0pSNys3dXpzREl4TVR6blQwLzk4L2hwMDdkK0kzaUdvcG0yRGV3S0ZnOE9WK0FKV2tmUk1yVG9iTEFBQUFBRWxGVGtTdVFtQ0MpO3dpZHRoOjE4cHg7Y3Vyc29yOnBvaW50ZXJ9LmdhbnR0X3RyZWVfaWNvbi5nYW50dF9jbG9zZXtiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJJQUFBQVNDQVlBQUFCV3pvNVhBQUFBa1VsRVFWUTRUMk5rb0JKZ3BKSTVERVBBb0ZPblR2MC9jK1lNUVIrYm1KZ3dtSm1ad1gyRTRiVnAwNmI5ajR5TVpPRGc0TUJwMkk4ZlB4aVdMMS9Pa0pXVk5lSU40dVRreEFpbjc5Ky9NNUFjUnRnQ0hHUUl5UWJoaWphaURRb0tEbVpnWjJQREdmMC9mLzFpV0xkMkxlSG9kM2QzWjJCa1lzSnAwUDkvL3hoMjd0eUozeUNxcFd5Q2VRT0hnc0dYK3dFWnBXNFQ1TEN4S3dBQUFBQkpSVTVFcmtKZ2dnPT0pO3dpZHRoOjE4cHg7Y3Vyc29yOnBvaW50ZXJ9LmdhbnR0X3RyZWVfaWNvbi5nYW50dF9ibGFua3t3aWR0aDoxOHB4fS5nYW50dF90cmVlX2ljb24uZ2FudHRfZm9sZGVyX29wZW57YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCSUFBQUFTQ0FZQUFBQld6bzVYQUFBQXMwbEVRVlE0VDYyVDBRMkVJQkJFcFFsenVhYU1zUW9xb29xTHNTbGpiTUxMbU14bVVYQlI0VStRdDdNemkyc3FMVmVKMDBTZ0VNS1dBbnZ2ellMeUF5SGZUNXNVMmZYREpTd0NBWEs4TUkwL1VUa3ZhN0lJRkpzZzNOU3duS2RGb0t0QVdPUTFDTjdDRXFlVG90RTVMN1F5SmhtQmNrbFpNNFpnVGlBcjNpT1Uza0Q5M3BwTzVTa01qQjFFZVhkQldvU2tScWwzWWVJUmUrY0d2a3RTMDU2SlI5d3NtZUJVa3VqQ2ZOWFdDUEM4R3VnUHFuNWlpL2hWK0ZvQUFBQUFTVVZPUks1Q1lJST0pfS5nYW50dF90cmVlX2ljb24uZ2FudHRfZm9sZGVyX2Nsb3NlZHtiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJJQUFBQVNDQVlBQUFCV3pvNVhBQUFBZkVsRVFWUTRUMk5rb0JKZ3BKSTVEQ2dHVFo4Ky9UODJnek16TXdsYUNGY0FNMFJLUWd5ckkvMERnL0VhaG1JUXlCQjBEUnZYcjRXNzh0bUxWMWd0QWJtWW9FRWduY2lHNFFwVG9nekNGeUV3U3lnMkNCUzJvQ0FaTlFoM2NBK2hNQUo1QWxjS3h1VkJsT2duTmdWak13eVVyUWptYW1LTEdhb1pCQUFPVEZ5TG5GRlc0d0FBQUFCSlJVNUVya0pnZ2c9PSl9LmdhbnR0X3RyZWVfaWNvbi5nYW50dF9maWxle2JhY2tncm91bmQtaW1hZ2U6dXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQklBQUFBU0NBWUFBQUJXem81WEFBQUFlRWxFUVZRNFQyTmtvQkpnUkRabit2VHAvd21abTVtWmlhSUhwaDdESUNrSk1VSm1NZmdIQm1NWWh0VWdiQW8zcmwrTDRscDBOVVFiQlBJMnVtdVJEYVBJSUZBWXdBeWp2MEhvTVFBTE01SmRoRzRRTE14R0RjS2R5SWRvR0lFODlPekZLNEtaRjVSbDhFWS9RUk9RRkdBMWlCUUQwTlVDQUpWamN4TzBuYUFRQUFBQUFFbEZUa1N1UW1DQyl9LmdhbnR0X2dyaWRfaGVhZF9jZWxsIC5nYW50dF9zb3J0e3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjVweDt0b3A6OHB4O3dpZHRoOjdweDtoZWlnaHQ6MTNweDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCV9LmdhbnR0X2dyaWRfaGVhZF9jZWxsIC5nYW50dF9zb3J0LmdhbnR0X2FzY3tiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFjQUFBQU5DQVlBQUFCbHlYUzFBQUFBUlVsRVFWUjRuR05nUUFLR3hpYi9HYkFCa0lTN2I4Qi9EQVV3Q1JpR0swQ1h3RkJBYjFEZlAvVS9Mc3p3SHdpMlg3cUZnVUVBckJ0ZEFWd0NCbUFLTUNTUUZTRHpBV1hYYU9Ic1hlcWtBQUFBQUVsRlRrU3VRbUNDKX0uZ2FudHRfZ3JpZF9oZWFkX2NlbGwgLmdhbnR0X3NvcnQuZ2FudHRfZGVzY3tiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFjQUFBQU5DQVlBQUFCbHlYUzFBQUFBUlVsRVFWUjQybU5nUUFMMS9WUC9NMkFESUludEYyLzl4MUFBbHJoMEM0N2hDbUE2MERGWXdYODhnSUZHd05EWTVEOHVERmJnN2h2d0h4MmptSUJUQWxrQjBlNEJBRWpsYU50QldKUG5BQUFBQUVsRlRrU3VRbUNDKX0uZ2FudHRfaW5zZXJ0ZWQsLmdhbnR0X3VwZGF0ZWR7Zm9udC13ZWlnaHQ6NzAwfS5nYW50dF9kZWxldGVke3RleHQtZGVjb3JhdGlvbjpsaW5lLXRocm91Z2h9LmdhbnR0X2ludmFsaWR7YmFja2dyb3VuZC1jb2xvcjojZmZlMGUwfS5nYW50dF9lcnJvcntjb2xvcjpyZWR9LmdhbnR0X3N0YXR1c3tyaWdodDoxcHg7cGFkZGluZzo1cHggMTBweDtiYWNrZ3JvdW5kOmhzbGEoMCwwJSw2MSUsLjEpO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxcHg7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycztvcGFjaXR5OjB9LmdhbnR0X3N0YXR1cy5nYW50dF9zdGF0dXNfdmlzaWJsZXtvcGFjaXR5OjF9I2dhbnR0X2FqYXhfZG90cyBzcGFue3RyYW5zaXRpb246b3BhY2l0eSAuMnM7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O29wYWNpdHk6MH0jZ2FudHRfYWpheF9kb3RzIHNwYW4uZ2FudHRfZG90X3Zpc2libGV7b3BhY2l0eToxfS5nYW50dF9tZXNzYWdlX2FyZWF7cG9zaXRpb246Zml4ZWQ7cmlnaHQ6NXB4O3dpZHRoOjI1MHB4O3otaW5kZXg6MTAwMH0uZ2FudHQtaW5mb3ttaW4td2lkdGg6MTIwcHg7cGFkZGluZzo0cHggNHB4IDRweCAyMHB4O2ZvbnQtZmFtaWx5OkFyaWFsO3otaW5kZXg6MTAwMDA7bWFyZ2luOjVweDttYXJnaW4tYm90dG9tOjEwcHg7dHJhbnNpdGlvbjphbGwgLjVzIGVhc2V9LmdhbnR0LWluZm8uaGlkZGVue2hlaWdodDowO3BhZGRpbmc6MDtib3JkZXItd2lkdGg6MDttYXJnaW46MDtvdmVyZmxvdzpoaWRkZW59LmdhbnR0X21vZGFsX2JveHtvdmVyZmxvdzpoaWRkZW47ZGlzcGxheTppbmxpbmUtYmxvY2s7bWluLXdpZHRoOjI1MHB4O3dpZHRoOjI1MHB4O3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6MjAwMDA7Ym94LXNoYWRvdzozcHggM3B4IDNweCByZ2JhKDAsMCwwLC4wNyk7Zm9udC1mYW1pbHk6QXJpYWw7Ym9yZGVyLXJhZGl1czo2cHg7Ym9yZGVyOjFweCBzb2xpZCAjY2VjZWNlO2JhY2tncm91bmQ6I2ZmZn0uZ2FudHRfcG9wdXBfdGl0bGV7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czo2cHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NnB4O2JvcmRlci13aWR0aDowfS5nYW50dF9idXR0b24sLmdhbnR0X3BvcHVwX2J1dHRvbntib3JkZXI6MXB4IHNvbGlkICNjZWNlY2U7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MzBweDtkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW46MCA1cHg7Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZDojZmZmfS5nYW50dC1pbmZvLC5nYW50dF9idXR0b24sLmdhbnR0X3BvcHVwX2J1dHRvbnt1c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Oi1tb3otbm9uZTtjdXJzb3I6cG9pbnRlcn0uZ2FudHRfcG9wdXBfdGV4dHtvdmVyZmxvdzpoaWRkZW59LmdhbnR0X3BvcHVwX2NvbnRyb2xze2JvcmRlci1yYWRpdXM6NnB4O3BhZGRpbmc6MTBweH0uZ2FudHRfcG9wdXBfYnV0dG9ue21pbi13aWR0aDoxMDBweH1kaXYuZGh4X21vZGFsX2NvdmVye2JhY2tncm91bmQtY29sb3I6IzAwMDtjdXJzb3I6ZGVmYXVsdDtmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKG9wYWNpdHk9MjApO29wYWNpdHk6LjI7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxOTk5OTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6bm9uZTt6b29tOjF9LmdhbnR0LWluZm8gaW1nLC5nYW50dF9tb2RhbF9ib3ggaW1ne2Zsb2F0OmxlZnQ7bWFyZ2luLXJpZ2h0OjIwcHh9LmdhbnR0LWFsZXJ0LWVycm9yLC5nYW50dC1jb25maXJtLWVycm9ye2JvcmRlcjoxcHggc29saWQgcmVkfS5nYW50dF9idXR0b24gaW5wdXQsLmdhbnR0X3BvcHVwX2J1dHRvbiBkaXZ7Ym9yZGVyLXJhZGl1czo0cHg7Zm9udC1zaXplOjE0cHg7Ym94LXNpemluZzpjb250ZW50LWJveDtwYWRkaW5nOjA7bWFyZ2luOjA7dmVydGljYWwtYWxpZ246dG9wfS5nYW50dF9wb3B1cF90aXRsZXtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjY2VjZWNlO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7Zm9udC1zaXplOjIwcHh9LmdhbnR0X3BvcHVwX3RleHR7bWFyZ2luOjE1cHggMTVweCA1cHg7Zm9udC1zaXplOjE0cHg7Y29sb3I6IzAwMDttaW4taGVpZ2h0OjMwcHg7Ym9yZGVyLXJhZGl1czo2cHh9LmdhbnR0LWVycm9yLC5nYW50dC1pbmZve2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiMwMDA7Ym94LXNoYWRvdzozcHggM3B4IDNweCByZ2JhKDAsMCwwLC4wNyk7cGFkZGluZzowO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjNweDtib3JkZXI6MXB4IHNvbGlkICNmZmZ9LmdhbnR0LWluZm8gZGl2e3BhZGRpbmc6NXB4IDEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgI2NlY2VjZX0uZ2FudHQtZXJyb3J7YmFja2dyb3VuZC1jb2xvcjojZDgxYjFiO2JvcmRlcjoxcHggc29saWQgI2ZmM2MzY30uZ2FudHQtZXJyb3IgZGl2e2JhY2tncm91bmQtY29sb3I6I2Q4MWIxYjtib3JkZXI6MXB4IHNvbGlkICM5NDAwMDA7Y29sb3I6I2ZmZn0uZ2FudHQtd2FybmluZ3tiYWNrZ3JvdW5kLWNvbG9yOiNmZjkwMDA7Ym9yZGVyOjFweCBzb2xpZCAjZmZhNjMzfS5nYW50dC13YXJuaW5nIGRpdntiYWNrZ3JvdW5kLWNvbG9yOiNmZjkwMDA7Ym9yZGVyOjFweCBzb2xpZCAjYjM2NTAwO2NvbG9yOiNmZmZ9LmdhbnR0X2RhdGFfYXJlYSBkaXYsLmdhbnR0X2dyaWQgZGl2ey1tcy10b3VjaC1hY3Rpb246bm9uZTstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6cmdiYSgwLDAsMCwwKX0uZ2FudHRfZGF0YV9hcmVhe3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6aGlkZGVuOy1tb3otdXNlci1zZWxlY3Q6LW1vei1ub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5nYW50dF9saW5rc19hcmVhe3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MH0uZ2FudHRfc2lkZV9jb250ZW50LC5nYW50dF90YXNrX2NvbnRlbnQsLmdhbnR0X3Rhc2tfcHJvZ3Jlc3N7bGluZS1oZWlnaHQ6aW5oZXJpdDtvdmVyZmxvdzpoaWRkZW47aGVpZ2h0OjEwMCV9LmdhbnR0X3Rhc2tfY29udGVudHtmb250LXNpemU6MTJweDtjb2xvcjojZmZmO3dpZHRoOjEwMCU7dG9wOjA7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246YWJzb2x1dGU7d2hpdGUtc3BhY2U6bm93cmFwO3RleHQtYWxpZ246Y2VudGVyfS5nYW50dF90YXNrX3Byb2dyZXNze3RleHQtYWxpZ246Y2VudGVyO3otaW5kZXg6MDtiYWNrZ3JvdW5kOiMyOTljYjR9LmdhbnR0X3Rhc2tfcHJvZ3Jlc3Nfd3JhcHBlcntib3JkZXItcmFkaXVzOmluaGVyaXQ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW59LmdhbnR0X3Rhc2tfbGluZXtib3JkZXItcmFkaXVzOjJweDtwb3NpdGlvbjphYnNvbHV0ZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7YmFja2dyb3VuZC1jb2xvcjojM2RiOWQzO2JvcmRlcjoxcHggc29saWQgIzI4OThiMDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6LW1vei1ub25lfS5nYW50dF90YXNrX2xpbmUuZ2FudHRfZHJhZ19tb3ZlIGRpdntjdXJzb3I6bW92ZX0uZ2FudHRfdG91Y2hfbW92ZSwuZ2FudHRfdG91Y2hfcHJvZ3Jlc3MgLmdhbnR0X3RvdWNoX3Jlc2l6ZXt0cmFuc2Zvcm06c2NhbGUoMS4wMiwxLjEpO3RyYW5zZm9ybS1vcmlnaW46NTAlfS5nYW50dF90b3VjaF9wcm9ncmVzcyAuZ2FudHRfdGFza19wcm9ncmVzc19kcmFnLC5nYW50dF90b3VjaF9yZXNpemUgLmdhbnR0X3Rhc2tfZHJhZ3t0cmFuc2Zvcm06c2NhbGVZKDEuMyk7dHJhbnNmb3JtLW9yaWdpbjo1MCV9LmdhbnR0X3NpZGVfY29udGVudHtwb3NpdGlvbjphYnNvbHV0ZTt3aGl0ZS1zcGFjZTpub3dyYXA7Y29sb3I6IzZlNmU2ZTt0b3A6MDtmb250LXNpemU6MTFweH0uZ2FudHRfc2lkZV9jb250ZW50LmdhbnR0X2xlZnR7cmlnaHQ6MTAwJTtwYWRkaW5nLXJpZ2h0OjIwcHh9LmdhbnR0X3NpZGVfY29udGVudC5nYW50dF9yaWdodHtsZWZ0OjEwMCU7cGFkZGluZy1sZWZ0OjIwcHh9LmdhbnR0X3NpZGVfY29udGVudC5nYW50dF9saW5rX2Nyb3NzaW5ne2JvdHRvbTo4Ljc1cHg7dG9wOmF1dG99LmdhbnR0X2xpbmtfYXJyb3csLmdhbnR0X3Rhc2tfbGluayAuZ2FudHRfbGluZV93cmFwcGVye3Bvc2l0aW9uOmFic29sdXRlO2N1cnNvcjpwb2ludGVyfS5nYW50dF9saW5lX3dyYXBwZXIgZGl2e2JhY2tncm91bmQtY29sb3I6I2ZmYTAxMX0uZ2FudHRfdGFza19saW5rOmhvdmVyIC5nYW50dF9saW5lX3dyYXBwZXIgZGl2e2JveC1zaGFkb3c6MCAwIDVweCAwICNmZmEwMTF9LmdhbnR0X3Rhc2tfbGluayBkaXYuZ2FudHRfbGlua19hcnJvd3tiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1zdHlsZTpzb2xpZDt3aWR0aDowO2hlaWdodDowfS5nYW50dF9saW5rX2NvbnRyb2x7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MjBweDt0b3A6MH0uZ2FudHRfbGlua19jb250cm9sIGRpdntkaXNwbGF5Om5vbmU7Y3Vyc29yOnBvaW50ZXI7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDo1MCU7bWFyZ2luLXRvcDotNy41cHg7dmVydGljYWwtYWxpZ246bWlkZGxlO2JvcmRlcjoxcHggc29saWQgIzkyOTI5Mjtib3JkZXItcmFkaXVzOjYuNXB4O2hlaWdodDoxM3B4O3dpZHRoOjEzcHg7YmFja2dyb3VuZC1jb2xvcjojZjBmMGYwfS5nYW50dF9saW5rX2NvbnRyb2wudGFza19yaWdodCBkaXYuZ2FudHRfbGlua19wb2ludHttYXJnaW4tbGVmdDo3cHh9LmdhbnR0X2xpbmtfY29udHJvbCBkaXY6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5nYW50dF9saW5rX2NvbnRyb2wudGFza19sZWZ0e2xlZnQ6LTIwcHh9LmdhbnR0X2xpbmtfY29udHJvbC50YXNrX3JpZ2h0e3JpZ2h0Oi0yMHB4fS5nYW50dF9saW5rX3RhcmdldCAuZ2FudHRfbGlua19jb250cm9sIGRpdiwuZ2FudHRfdGFza19saW5lLmdhbnR0X2RyYWdfbW92ZSAuZ2FudHRfbGlua19jb250cm9sIGRpdiwuZ2FudHRfdGFza19saW5lLmdhbnR0X2RyYWdfbW92ZSAuZ2FudHRfdGFza19kcmFnLC5nYW50dF90YXNrX2xpbmUuZ2FudHRfZHJhZ19tb3ZlIC5nYW50dF90YXNrX3Byb2dyZXNzX2RyYWcsLmdhbnR0X3Rhc2tfbGluZS5nYW50dF9kcmFnX3Byb2dyZXNzIC5nYW50dF9saW5rX2NvbnRyb2wgZGl2LC5nYW50dF90YXNrX2xpbmUuZ2FudHRfZHJhZ19wcm9ncmVzcyAuZ2FudHRfdGFza19kcmFnLC5nYW50dF90YXNrX2xpbmUuZ2FudHRfZHJhZ19wcm9ncmVzcyAuZ2FudHRfdGFza19wcm9ncmVzc19kcmFnLC5nYW50dF90YXNrX2xpbmUuZ2FudHRfZHJhZ19yZXNpemUgLmdhbnR0X2xpbmtfY29udHJvbCBkaXYsLmdhbnR0X3Rhc2tfbGluZS5nYW50dF9kcmFnX3Jlc2l6ZSAuZ2FudHRfdGFza19kcmFnLC5nYW50dF90YXNrX2xpbmUuZ2FudHRfZHJhZ19yZXNpemUgLmdhbnR0X3Rhc2tfcHJvZ3Jlc3NfZHJhZywuZ2FudHRfdGFza19saW5lLmdhbnR0X3NlbGVjdGVkIC5nYW50dF9saW5rX2NvbnRyb2wgZGl2LC5nYW50dF90YXNrX2xpbmUuZ2FudHRfc2VsZWN0ZWQgLmdhbnR0X3Rhc2tfZHJhZywuZ2FudHRfdGFza19saW5lLmdhbnR0X3NlbGVjdGVkIC5nYW50dF90YXNrX3Byb2dyZXNzX2RyYWcsLmdhbnR0X3Rhc2tfbGluZTpob3ZlciAuZ2FudHRfbGlua19jb250cm9sIGRpdiwuZ2FudHRfdGFza19saW5lOmhvdmVyIC5nYW50dF90YXNrX2RyYWcsLmdhbnR0X3Rhc2tfbGluZTpob3ZlciAuZ2FudHRfdGFza19wcm9ncmVzc19kcmFne2Rpc3BsYXk6YmxvY2t9LmdhbnR0X2xpbmtfc291cmNlLC5nYW50dF9saW5rX3RhcmdldHtib3gtc2hhZG93OjAgMCAzcHggIzNkYjlkM30uZ2FudHRfbGlua190YXJnZXQubGlua19maW5pc2hfYWxsb3csLmdhbnR0X2xpbmtfdGFyZ2V0Lmxpbmtfc3RhcnRfYWxsb3d7Ym94LXNoYWRvdzowIDAgM3B4ICNmZmJmNWV9LmdhbnR0X2xpbmtfdGFyZ2V0LmxpbmtfZmluaXNoX2RlbnksLmdhbnR0X2xpbmtfdGFyZ2V0Lmxpbmtfc3RhcnRfZGVueXtib3gtc2hhZG93OjAgMCAzcHggI2U4N2U3Yn0ubGlua19maW5pc2hfYWxsb3cgLmdhbnR0X2xpbmtfY29udHJvbC50YXNrX2VuZF9kYXRlIGRpdiwubGlua19zdGFydF9hbGxvdyAuZ2FudHRfbGlua19jb250cm9sLnRhc2tfc3RhcnRfZGF0ZSBkaXZ7YmFja2dyb3VuZC1jb2xvcjojZmZiZjVlO2JvcmRlci1jb2xvcjojZmZhMDExfS5saW5rX2ZpbmlzaF9kZW55IC5nYW50dF9saW5rX2NvbnRyb2wudGFza19lbmRfZGF0ZSBkaXYsLmxpbmtfc3RhcnRfZGVueSAuZ2FudHRfbGlua19jb250cm9sLnRhc2tfc3RhcnRfZGF0ZSBkaXZ7YmFja2dyb3VuZC1jb2xvcjojZTg3ZTdiO2JvcmRlci1jb2xvcjojZGQzZTNhfS5nYW50dF9saW5rX2Fycm93X3JpZ2h0e2JvcmRlci13aWR0aDo0cHggMCA0cHggNnB4O2JvcmRlci10b3AtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50O2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLWxlZnQtY29sb3I6I2ZmYTAxMTttYXJnaW4tdG9wOi0xcHh9LmdhbnR0X2xpbmtfYXJyb3dfbGVmdHtib3JkZXItd2lkdGg6NHB4IDZweCA0cHggMDttYXJnaW4tdG9wOi0xcHg7Ym9yZGVyLXRvcC1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmEwMTE7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLWxlZnQtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50fS5nYW50dF9saW5rX2Fycm93X3Vwe2JvcmRlci13aWR0aDowIDRweCA2cHg7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmEwMTE7Ym9yZGVyLXRvcC1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLXJpZ2h0LWNvbG9yOnRyYW5zcGFyZW50IWltcG9ydGFudDtib3JkZXItYm90dG9tLWNvbG9yOiNmZmEwMTE7Ym9yZGVyLWxlZnQtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50fS5nYW50dF9saW5rX2Fycm93X2Rvd257Ym9yZGVyLXdpZHRoOjRweCA2cHggMCA0cHg7Ym9yZGVyLXRvcC1jb2xvcjojZmZhMDExO2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCFpbXBvcnRhbnQ7Ym9yZGVyLWxlZnQtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50fS5nYW50dF90YXNrX2RyYWcsLmdhbnR0X3Rhc2tfcHJvZ3Jlc3NfZHJhZ3tjdXJzb3I6ZXctcmVzaXplO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZX0uZ2FudHRfdGFza19kcmFnLnRhc2tfcmlnaHR7Y3Vyc29yOmUtcmVzaXplfS5nYW50dF90YXNrX2RyYWcudGFza19sZWZ0e2N1cnNvcjp3LXJlc2l6ZX0uZ2FudHRfdGFza19kcmFne2hlaWdodDoxMDAlO3dpZHRoOjhweDt6LWluZGV4OjE7dG9wOi0xcHh9LmdhbnR0X3Rhc2tfZHJhZy50YXNrX2xlZnR7bGVmdDotN3B4fS5nYW50dF90YXNrX2RyYWcudGFza19yaWdodHtyaWdodDotN3B4fS5nYW50dF90YXNrX3Byb2dyZXNzX2RyYWd7aGVpZ2h0OjhweDt3aWR0aDo4cHg7Ym90dG9tOi00cHg7bWFyZ2luLWxlZnQ6LTRweDtiYWNrZ3JvdW5kLXBvc2l0aW9uOmJvdHRvbTtiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQUxDQVlBQUFCMjRnMDVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQXlKcFZGaDBXRTFNT21OdmJTNWhaRzlpWlM1NGJYQUFBQUFBQUR3L2VIQmhZMnRsZENCaVpXZHBiajBpNzd1L0lpQnBaRDBpVnpWTk1FMXdRMlZvYVVoNmNtVlRlazVVWTNwcll6bGtJajgrSUR4NE9uaHRjRzFsZEdFZ2VHMXNibk02ZUQwaVlXUnZZbVU2Ym5NNmJXVjBZUzhpSUhnNmVHMXdkR3M5SWtGa2IySmxJRmhOVUNCRGIzSmxJRFV1TXkxak1ERXhJRFkyTGpFME5UWTJNU3dnTWpBeE1pOHdNaTh3TmkweE5EbzFOam95TnlBZ0lDQWdJQ0FnSWo0Z1BISmtaanBTUkVZZ2VHMXNibk02Y21SbVBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1THpBeUx6SXlMWEprWmkxemVXNTBZWGd0Ym5NaklqNGdQSEprWmpwRVpYTmpjbWx3ZEdsdmJpQnlaR1k2WVdKdmRYUTlJaUlnZUcxc2JuTTZlRzF3UFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdklpQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SWdlRzFzYm5NNmMzUlNaV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5elZIbHdaUzlTWlhOdmRYSmpaVkpsWmlNaUlIaHRjRHBEY21WaGRHOXlWRzl2YkQwaVFXUnZZbVVnVUdodmRHOXphRzl3SUVOVE5pQW9WMmx1Wkc5M2N5a2lJSGh0Y0UxTk9rbHVjM1JoYm1ObFNVUTlJbmh0Y0M1cGFXUTZNa1kzUmprMFJVVkRNa1l6TVRGRk1rSTFPVGhFUVRBM09EVTBPVGt6TUVFaUlIaHRjRTFOT2tSdlkzVnRaVzUwU1VROUluaHRjQzVrYVdRNk1rWTNSamswUlVaRE1rWXpNVEZGTWtJMU9UaEVRVEEzT0RVME9Ua3pNRUVpUGlBOGVHMXdUVTA2UkdWeWFYWmxaRVp5YjIwZ2MzUlNaV1k2YVc1emRHRnVZMlZKUkQwaWVHMXdMbWxwWkRveVJqZEdPVFJGUTBNeVJqTXhNVVV5UWpVNU9FUkJNRGM0TlRRNU9UTXdRU0lnYzNSU1pXWTZaRzlqZFcxbGJuUkpSRDBpZUcxd0xtUnBaRG95UmpkR09UUkZSRU15UmpNeE1VVXlRalU1T0VSQk1EYzROVFE1T1RNd1FTSXZQaUE4TDNKa1pqcEVaWE5qY21sd2RHbHZiajRnUEM5eVpHWTZVa1JHUGlBOEwzZzZlRzF3YldWMFlUNGdQRDk0Y0dGamEyVjBJR1Z1WkQwaWNpSS9Qb2JQQnpJQUFBRGtTVVJCVkhqYVlwazJiUm9ERHNBRXhMMVFkakVRLzhPbWlBV0haazRnWHF5bXFoUU00dHk2ZlU4T1NNVUE4WGRpREJBQjRrMGE2aXFXUmdhNkVLY3dNUVhkdUhsbkw1RHBCOFJ2MEoySkRGU0ErSmlPdGdaY013aUEyQ0F4a0J4VURWWURMRUFLZ0lwVjlYUTBNWndGRWdQSkFabkhvV3BSREFnQzRuMlc1c2FpUUtmakNsUUdrQnhRRGNpTCs2QjZ3QWJrQS9FcUp3ZHJUa1VGT1FaQ0FLUUdwQmJJWEEzU0N6SmdnbytYSzdPRXVCZ0RzUUNrRnFnSHJCZnNCVDVlSGdaU0FVd1AySUJmdjM2VGJBQk1EeWdkdEsxWnY2VUVTTE9SYUFiSWhHNkFBQU1BS044d0UyNERYV2NBQUFBQVNVVk9SSzVDWUlJPSk7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O3otaW5kZXg6MX0uZ2FudHRfdGFza19wcm9ncmVzc19kcmFnOmhvdmVye2JhY2tncm91bmQtaW1hZ2U6dXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQkFBQUFBTENBWUFBQUIyNGcwNUFBQUFCbUpMUjBRQS93RC9BUCtndmFlVEFBQUFDWEJJV1hNQUFBc1RBQUFMRXdFQW1wd1lBQUFBczBsRVFWUW96NldNUFc3Q1FCZ0ZKeFphaVo2MHFjZ2R3alZNbXp1OGdwd2hEVUxhYlh5QmRIQUd1elJIaXZRaVFab3ZpZ1MyK0p0dTk1dDVUMDNUTUlUdEN0akVjNVZTT2d4NWs1RjRDbnhKV2dLVVVsNXN2NmVVdmsvZGFpQ2VBZTFmRENDcEJ0cTRqUS9ZbmdPOXBNV3BHSDk5T09jRHR0OGlmbVdFdU8zRC9SK3dYUU9kcEdjdUlHa0dkTkZRMlJhd2xUVGxTc0xkMlJZNTUrTzk1SnlQRlEveThNQUUrQ3lsZkFEcHh2WUhXUDhDWGorSlI0d2RLSFlBQUFBQVNVVk9SSzVDWUlJPSl9LmdhbnR0X2xpbmtfdG9vbHRpcHtib3gtc2hhZG93OjNweCAzcHggM3B4ICM4ODg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1sZWZ0OjFweCBkb3R0ZWQgI2NlY2VjZTtib3JkZXItdG9wOjFweCBkb3R0ZWQgI2NlY2VjZTtmb250LWZhbWlseTpUYWhvbWE7Zm9udC1zaXplOjhwdDtjb2xvcjojNDQ0O3BhZGRpbmc6NnB4O2xpbmUtaGVpZ2h0OjIwcHh9LmdhbnR0X2xpbmtfZGlyZWN0aW9ue2hlaWdodDowO2JvcmRlcjowIG5vbmUgI2ZmYTAxMTtib3JkZXItYm90dG9tLXN0eWxlOmRhc2hlZDtib3JkZXItYm90dG9tLXdpZHRoOjJweDt0cmFuc2Zvcm0tb3JpZ2luOjAgMDstbXMtdHJhbnNmb3JtLW9yaWdpbjowIDA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMDt6LWluZGV4OjI7bWFyZ2luLWxlZnQ6MXB4O3Bvc2l0aW9uOmFic29sdXRlfS5nYW50dF9ncmlkX2RhdGEgLmdhbnR0X3Jvdy5nYW50dF9zZWxlY3RlZCwuZ2FudHRfZ3JpZF9kYXRhIC5nYW50dF9yb3cub2RkLmdhbnR0X3NlbGVjdGVkLC5nYW50dF90YXNrX3Jvdy5nYW50dF9zZWxlY3RlZHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmYzYTF9LmdhbnR0X3Rhc2tfcm93LmdhbnR0X3NlbGVjdGVkIC5nYW50dF90YXNrX2NlbGx7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmVjNmV9LmdhbnR0X3Rhc2tfbGluZS5nYW50dF9zZWxlY3RlZHtib3gtc2hhZG93OjAgMCA1cHggIzI5OWNiNH0uZ2FudHRfdGFza19saW5lLmdhbnR0X3Byb2plY3QuZ2FudHRfc2VsZWN0ZWR7Ym94LXNoYWRvdzowIDAgNXB4ICM0NmFkNTF9LmdhbnR0X3Rhc2tfbGluZS5nYW50dF9taWxlc3RvbmV7dmlzaWJpbGl0eTpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjojZDMzZGFmO2JvcmRlcjowIHNvbGlkICM2MTE2NGY7Ym94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3h9LmdhbnR0X3Rhc2tfbGluZS5nYW50dF9taWxlc3RvbmUgZGl2e3Zpc2liaWxpdHk6dmlzaWJsZX0uZ2FudHRfdGFza19saW5lLmdhbnR0X21pbGVzdG9uZSAuZ2FudHRfdGFza19jb250ZW50e2JhY2tncm91bmQ6aW5oZXJpdDtib3JkZXI6aW5oZXJpdDtib3JkZXItd2lkdGg6MXB4O2JvcmRlci1yYWRpdXM6aW5oZXJpdDtib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LmdhbnR0X3Rhc2tfbGluZS5nYW50dF90YXNrX2lubGluZV9jb2xvcntib3JkZXItY29sb3I6Izk5OX0uZ2FudHRfdGFza19saW5lLmdhbnR0X3Rhc2tfaW5saW5lX2NvbG9yIC5nYW50dF90YXNrX3Byb2dyZXNze2JhY2tncm91bmQtY29sb3I6IzM2MzYzNjtvcGFjaXR5Oi4yfS5nYW50dF90YXNrX2xpbmUuZ2FudHRfdGFza19pbmxpbmVfY29sb3IuZ2FudHRfcHJvamVjdC5nYW50dF9zZWxlY3RlZCwuZ2FudHRfdGFza19saW5lLmdhbnR0X3Rhc2tfaW5saW5lX2NvbG9yLmdhbnR0X3NlbGVjdGVke2JveC1zaGFkb3c6MCAwIDVweCAjOTk5fS5nYW50dF90YXNrX2xpbmsuZ2FudHRfbGlua19pbmxpbmVfY29sb3I6aG92ZXIgLmdhbnR0X2xpbmVfd3JhcHBlciBkaXZ7Ym94LXNoYWRvdzowIDAgNXB4IDAgIzk5OX0uZ2FudHRfY3JpdGljYWxfdGFza3tiYWNrZ3JvdW5kLWNvbG9yOiNlNjMwMzA7Ym9yZGVyLWNvbG9yOiM5ZDNhM2F9LmdhbnR0X2NyaXRpY2FsX3Rhc2sgLmdhbnR0X3Rhc2tfcHJvZ3Jlc3N7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC40KX0uZ2FudHRfY3JpdGljYWxfbGluayAuZ2FudHRfbGluZV93cmFwcGVyPmRpdntiYWNrZ3JvdW5kLWNvbG9yOiNlNjMwMzB9LmdhbnR0X2NyaXRpY2FsX2xpbmsgLmdhbnR0X2xpbmtfYXJyb3d7Ym9yZGVyLWNvbG9yOiNlNjMwMzB9LmdhbnR0X2J0bl9zZXQ6Zm9jdXMsLmdhbnR0X2NlbGw6Zm9jdXMsLmdhbnR0X2dyaWRfaGVhZF9jZWxsOmZvY3VzLC5nYW50dF9wb3B1cF9idXR0b246Zm9jdXMsLmdhbnR0X3FpX2JpZ19pY29uOmZvY3VzLC5nYW50dF9yb3c6Zm9jdXN7Ym94LXNoYWRvdzppbnNldCAwIDAgMXB4IDFweCAjNGQ5MGZlfS5nYW50dF9zcGxpdF9wYXJlbnR7b3BhY2l0eTouMTtwb2ludGVyLWV2ZW50czpub25lfS5nYW50dF91bnNlbGVjdGFibGUsLmdhbnR0X3Vuc2VsZWN0YWJsZSBkaXZ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Oi1tb3otbm9uZX0uZ2FudHRfY2FsX2xpZ2h0ey13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudDtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czo2cHg7Zm9udC1mYW1pbHk6QXJpYWw7Zm9udC1zaXplOjEzcHg7Ym9yZGVyOjFweCBzb2xpZCAjY2VjZWNlO2NvbG9yOiM2YjZiNmI7Zm9udC1zaXplOjEycHg7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDAwMTt3aWR0aDo1NTBweDtoZWlnaHQ6MjUwcHg7Ym94LXNoYWRvdzozcHggM3B4IDNweCByZ2JhKDAsMCwwLC4wNyl9LmdhbnR0X2NhbF9saWdodF93aWRle3dpZHRoOjY1MHB4fS5nYW50dF9jYWxfbGlnaHQgc2VsZWN0e2ZvbnQtZmFtaWx5OkFyaWFsO2JvcmRlcjoxcHggc29saWQgI2NlY2VjZTtmb250LXNpemU6MTNweDtwYWRkaW5nOjJweDttYXJnaW46MH0uZ2FudHRfY2FsX2x0aXRsZXtwYWRkaW5nOjdweCAxMHB4O292ZXJmbG93OmhpZGRlbjstd2Via2l0LWJvcmRlci10b3AtbGVmdC1yYWRpdXM6NnB4Oy13ZWJraXQtYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowOy13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NnB4Oy13ZWJraXQtYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDo2cHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6NnB4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDowO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NnB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo2cHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH0uZ2FudHRfY2FsX2x0aXRsZSwuZ2FudHRfY2FsX2x0aXRsZSBzcGFue3doaXRlLXNwYWNlOm5vd3JhcH0uZ2FudHRfY2FsX2xzZWN0aW9ue2NvbG9yOiM3MjcyNzI7Zm9udC13ZWlnaHQ6NzAwO3BhZGRpbmc6MTJweCAwIDVweCAxMHB4fS5nYW50dF9jYWxfbHNlY3Rpb24gLmdhbnR0X2Z1bGxkYXl7ZmxvYXQ6cmlnaHQ7bWFyZ2luLXJpZ2h0OjVweDtmb250LXNpemU6MTJweDtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MjBweDt2ZXJ0aWNhbC1hbGlnbjp0b3A7Y3Vyc29yOnBvaW50ZXJ9LmdhbnR0X2NhbF9sc2VjdGlvbntmb250LXNpemU6MTNweH0uZ2FudHRfY2FsX2x0ZXh0e3BhZGRpbmc6MnB4IDEwcHg7b3ZlcmZsb3c6aGlkZGVufS5nYW50dF9jYWxfbHRleHQgdGV4dGFyZWF7b3ZlcmZsb3cteTphdXRvO292ZXJmbG93LXg6aGlkZGVuO2ZvbnQtZmFtaWx5OkFyaWFsO2ZvbnQtc2l6ZToxM3B4O2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXI6MXB4IHNvbGlkICNjZWNlY2U7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtvdXRsaW5lOm5vbmUhaW1wb3J0YW50O3Jlc2l6ZTpub25lfS5nYW50dF9zZWN0aW9uX2NvbnN0cmFpbnQgW2RhdGEtY29uc3RyYWludC10aW1lLXNlbGVjdF17bWFyZ2luLWxlZnQ6MjBweH0uZ2FudHRfdGltZXtmb250LXdlaWdodDo3MDB9LmdhbnR0X2NhbF9saWdodCAuZ2FudHRfdGl0bGV7cGFkZGluZy1sZWZ0OjEwcHh9LmdhbnR0X2NhbF9sYXJlYXtib3JkZXI6MXB4IHNvbGlkICNjZWNlY2U7Ym9yZGVyLWxlZnQ6bm9uZTtib3JkZXItcmlnaHQ6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7b3ZlcmZsb3c6aGlkZGVuO2hlaWdodDoxcHh9LmdhbnR0X2J0bl9zZXR7bWFyZ2luOjEwcHggN3B4IDVweCAxMHB4O3BhZGRpbmc6NXB4IDE1cHggNXB4IDEwcHg7ZmxvYXQ6bGVmdDtib3JkZXItcmFkaXVzOjRweDtib3JkZXI6MCBzb2xpZCAjY2VjZWNlO2hlaWdodDozMnB4O2ZvbnQtd2VpZ2h0OjcwMDtiYWNrZ3JvdW5kOiNmZmY7Ym94LXNpemluZzpib3JkZXItYm94O2N1cnNvcjpwb2ludGVyfS5nYW50dF9oaWRkZW57ZGlzcGxheTpub25lfS5nYW50dF9idG5fc2V0IGRpdntmbG9hdDpsZWZ0O2ZvbnQtc2l6ZToxM3B4O2hlaWdodDoyMnB4O2xpbmUtaGVpZ2h0OjIycHg7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uZ2FudHRfc2F2ZV9idG57YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCQUFBQUFRQ0FZQUFBQWY4LzloQUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUF5SnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU15MWpNREV4SURZMkxqRTBOVFkyTVN3Z01qQXhNaTh3TWk4d05pMHhORG8xTmpveU55QWdJQ0FnSUNBZ0lqNGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlnZUcxc2JuTTZjM1JTWldZOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOXpWSGx3WlM5U1pYTnZkWEpqWlZKbFppTWlJSGh0Y0RwRGNtVmhkRzl5Vkc5dmJEMGlRV1J2WW1VZ1VHaHZkRzl6YUc5d0lFTlROaUFvVjJsdVpHOTNjeWtpSUhodGNFMU5Pa2x1YzNSaGJtTmxTVVE5SW5odGNDNXBhV1E2TVRrMU9VVTVSREZETXpBME1URkZNa0V4TVVaQlFUZEROREF6T1VFNVJqTWlJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZNVGsxT1VVNVJESkRNekEwTVRGRk1rRXhNVVpCUVRkRE5EQXpPVUU1UmpNaVBpQThlRzF3VFUwNlJHVnlhWFpsWkVaeWIyMGdjM1JTWldZNmFXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEb3hPVFU1UlRsRFJrTXpNRFF4TVVVeVFURXhSa0ZCTjBNME1ETTVRVGxHTXlJZ2MzUlNaV1k2Wkc5amRXMWxiblJKUkQwaWVHMXdMbVJwWkRveE9UVTVSVGxFTUVNek1EUXhNVVV5UVRFeFJrRkJOME0wTURNNVFUbEdNeUl2UGlBOEwzSmtaanBFWlhOamNtbHdkR2x2Ymo0Z1BDOXlaR1k2VWtSR1BpQThMM2c2ZUcxd2JXVjBZVDRnUEQ5NGNHRmphMlYwSUdWdVpEMGljaUkvUGpEcm9YWUFBQUVYU1VSQlZIamFZdnovL3o4REpZQ1JVZ1BJQVV4QWJBbkVIaUFITUlCY1FDd0dhUllYRjNlNmV2WHFvZmZ2MzkvZHYzOC9DeW1hR1NVa0pCenYzTGx6Q3NqLy8vZnYzd2RBaWhra0lRbkV2a0FzaFU4ekx5K3Y3YTFidDA2QU5QLzc5Kzg3a0RJQXk1MDVjeWJxMDZkUHIzcDdlenV3R1FMVGZPUEdqV1AvRVNBWkxnOGtQS0JPK2cwMVJCSk5zeld5WnFDNnVTZ1dnSWcvZi80c2h4blMyZG5aQmpNRXFOa1NGR0JJbWk4Q0tUWU1BNEJZQ0dqSWN6UkRIQzVkdW5RUVNmTjdJS1dJNFVVa2pqZE1NZEN3bnc4ZVBMandIeFY0WXcxZ1pBNVE0N3ovMkVFTHpoaENFK0FCR3ZJUVdTZVF2d2NVMzhRYUFNTDJ3SGorQy9YM015QWxpamVCNFpCb0JPSVBRR3hKS0lWU25Cc0JBZ3dBQmRkQmNsV2ZjWlVBQUFBQVNVVk9SSzVDWUlJPSk7bWFyZ2luLXRvcDoycHg7d2lkdGg6MjFweH0uZ2FudHRfY2FuY2VsX2J0bnttYXJnaW4tdG9wOjJweDtiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQXlKcFZGaDBXRTFNT21OdmJTNWhaRzlpWlM1NGJYQUFBQUFBQUR3L2VIQmhZMnRsZENCaVpXZHBiajBpNzd1L0lpQnBaRDBpVnpWTk1FMXdRMlZvYVVoNmNtVlRlazVVWTNwcll6bGtJajgrSUR4NE9uaHRjRzFsZEdFZ2VHMXNibk02ZUQwaVlXUnZZbVU2Ym5NNmJXVjBZUzhpSUhnNmVHMXdkR3M5SWtGa2IySmxJRmhOVUNCRGIzSmxJRFV1TXkxak1ERXhJRFkyTGpFME5UWTJNU3dnTWpBeE1pOHdNaTh3TmkweE5EbzFOam95TnlBZ0lDQWdJQ0FnSWo0Z1BISmtaanBTUkVZZ2VHMXNibk02Y21SbVBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1THpBeUx6SXlMWEprWmkxemVXNTBZWGd0Ym5NaklqNGdQSEprWmpwRVpYTmpjbWx3ZEdsdmJpQnlaR1k2WVdKdmRYUTlJaUlnZUcxc2JuTTZlRzF3UFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdklpQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SWdlRzFzYm5NNmMzUlNaV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5elZIbHdaUzlTWlhOdmRYSmpaVkpsWmlNaUlIaHRjRHBEY21WaGRHOXlWRzl2YkQwaVFXUnZZbVVnVUdodmRHOXphRzl3SUVOVE5pQW9WMmx1Wkc5M2N5a2lJSGh0Y0UxTk9rbHVjM1JoYm1ObFNVUTlJbmh0Y0M1cGFXUTZNRGt6TURBM016bERNekEwTVRGRk1qZzJRVFZGTXpGRVF6Z3dSa0pFUkRZaUlIaHRjRTFOT2tSdlkzVnRaVzUwU1VROUluaHRjQzVrYVdRNk1Ea3pNREEzTTBGRE16QTBNVEZGTWpnMlFUVkZNekZFUXpnd1JrSkVSRFlpUGlBOGVHMXdUVTA2UkdWeWFYWmxaRVp5YjIwZ2MzUlNaV1k2YVc1emRHRnVZMlZKUkQwaWVHMXdMbWxwWkRvd09UTXdNRGN6TjBNek1EUXhNVVV5T0RaQk5VVXpNVVJET0RCR1FrUkVOaUlnYzNSU1pXWTZaRzlqZFcxbGJuUkpSRDBpZUcxd0xtUnBaRG93T1RNd01EY3pPRU16TURReE1VVXlPRFpCTlVVek1VUkRPREJHUWtSRU5pSXZQaUE4TDNKa1pqcEVaWE5qY21sd2RHbHZiajRnUEM5eVpHWTZVa1JHUGlBOEwzZzZlRzF3YldWMFlUNGdQRDk0Y0dGamEyVjBJR1Z1WkQwaWNpSS9QbVl1WU9VQUFBRWRTVVJCVkhqYVl2ei8vejhESllBRlhXRGx5cFU4UUtvSWlEMkEyQXdxZkFxSWR3QnhYM2g0K0JkazlZeklMZ0JxdGdkUzg0RllFWWVGOTRFNEVXaklRWmdBRTVMbVFDQjFBS29aWktNUEVBdEFNWWg5R1NwM0FLaldEOFVGUUFFaElQc2hFSU9jM3dIRU5VQmIvcUo1N1N5UU1vSnlQd0t4RWxETk8xZ1lGRUUxN3dNS1ZtSUpsek5RemVlZ3JqYUE2cW1CZWNFYlN2ZmgwR3dNeEdlQmhvUG9lbVE5TUFPMGtFSWJsMllUcVBBRktLMkliTUIzQWphYllJa1JabVFEN2tOcE15STBHMFBwTzhnR2JJVUZKajdOUURrMklOV0lySWNKS2ZCQUtjd0pxdmtjRHMwVGdGZ1hHbzE5S0NrUm1wRFdRZFdERWswTlVvQ0JvcTBGcWhrRS9JRVdiS0pLVW1aRXo0M1F6RlNLSXpOMTQ4MU01QUNBQUFNQWxmbC9sQ3dScGFnQUFBQUFTVVZPUks1Q1lJST0pO3dpZHRoOjIwcHh9LmdhbnR0X2RlbGV0ZV9idG57YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCQUFBQUFRQ0FZQUFBQWY4LzloQUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUF5SnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU15MWpNREV4SURZMkxqRTBOVFkyTVN3Z01qQXhNaTh3TWk4d05pMHhORG8xTmpveU55QWdJQ0FnSUNBZ0lqNGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlnZUcxc2JuTTZjM1JTWldZOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOXpWSGx3WlM5U1pYTnZkWEpqWlZKbFppTWlJSGh0Y0RwRGNtVmhkRzl5Vkc5dmJEMGlRV1J2WW1VZ1VHaHZkRzl6YUc5d0lFTlROaUFvVjJsdVpHOTNjeWtpSUhodGNFMU5Pa2x1YzNSaGJtTmxTVVE5SW5odGNDNXBhV1E2TWpGRU56STNOVU5ETXpBME1URkZNamhCTmpKR1FUYzNNVUl5UXpZek5FWWlJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZNakZFTnpJM05VUkRNekEwTVRGRk1qaEJOakpHUVRjM01VSXlRell6TkVZaVBpQThlRzF3VFUwNlJHVnlhWFpsWkVaeWIyMGdjM1JTWldZNmFXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEb3lNVVEzTWpjMVFVTXpNRFF4TVVVeU9FRTJNa1pCTnpjeFFqSkROak0wUmlJZ2MzUlNaV1k2Wkc5amRXMWxiblJKUkQwaWVHMXdMbVJwWkRveU1VUTNNamMxUWtNek1EUXhNVVV5T0VFMk1rWkJOemN4UWpKRE5qTTBSaUl2UGlBOEwzSmtaanBFWlhOamNtbHdkR2x2Ymo0Z1BDOXlaR1k2VWtSR1BpQThMM2c2ZUcxd2JXVjBZVDRnUEQ5NGNHRmphMlYwSUdWdVpEMGljaUkvUG1VRDBnQUFBQUJ2U1VSQlZIamFZdnovL3o4REl5TWpBeFlRaWNSZWppNEowb2ZLUU5QOEh3bWdHUWJYQjhJc1dHd0RTU3dEdWlvS2pZOXVCdGhWakZBWFlIVUdBUUEya1ltQlVvQVVCcEdrMExBd2dCdndIK1lYNG1rd3B0Z0xvd1lNUmdPSVRVeVlLUkZJTi93bkRqUWdKeVNBQUFNQXByeUt6TDh3amZVQUFBQUFTVVZPUks1Q1lJST0pO21hcmdpbi10b3A6MnB4O3dpZHRoOjIwcHh9LmdhbnR0X2NhbF9jb3Zlcnt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTAwMDA7dG9wOjA7bGVmdDowO2JhY2tncm91bmQtY29sb3I6IzAwMDtvcGFjaXR5Oi4xO2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEob3BhY2l0eT0xMCl9LmdhbnR0X2N1c3RvbV9idXR0b257cGFkZGluZzowIDNweDtmb250LWZhbWlseTpBcmlhbDtmb250LXNpemU6MTNweDtmb250LXdlaWdodDo0MDA7bWFyZ2luLXJpZ2h0OjEwcHg7bWFyZ2luLXRvcDotNXB4O2N1cnNvcjpwb2ludGVyO2Zsb2F0OnJpZ2h0O2hlaWdodDoyMXB4O3dpZHRoOjkwcHg7Ym9yZGVyOjFweCBzb2xpZCAjY2VjZWNlO3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6NHB4fS5nYW50dF9jdXN0b21fYnV0dG9uIGRpdntjdXJzb3I6cG9pbnRlcjtmbG9hdDpub25lO2hlaWdodDoyMXB4O2xpbmUtaGVpZ2h0OjIxcHg7dmVydGljYWwtYWxpZ246bWlkZGxlfS5nYW50dF9jdXN0b21fYnV0dG9uIGRpdjpmaXJzdC1jaGlsZHtkaXNwbGF5Om5vbmV9LmdhbnR0X2NhbF9saWdodF93aWRle3dpZHRoOjU4MHB4O3BhZGRpbmc6MnB4IDRweH0uZ2FudHRfY2FsX2xpZ2h0X3dpZGUgLmdhbnR0X2NhbF9sYXJlYXtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCAjY2VjZWNlfS5nYW50dF9jYWxfbGlnaHRfd2lkZSAuZ2FudHRfY2FsX2xzZWN0aW9ue2JvcmRlcjowO2Zsb2F0OmxlZnQ7dGV4dC1hbGlnbjpyaWdodDt3aWR0aDo4MHB4O2hlaWdodDoyMHB4O3BhZGRpbmc6NXB4IDEwcHggMCAwfS5nYW50dF9jYWxfbGlnaHRfd2lkZSAuZ2FudHRfd3JhcF9zZWN0aW9ue3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MTBweCAwO292ZXJmbG93OmhpZGRlbjtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZWJlYmVifS5nYW50dF9jYWxfbGlnaHRfd2lkZSAuZ2FudHRfc2VjdGlvbl90aW1le292ZXJmbG93OmhpZGRlbjtwYWRkaW5nLXRvcDoycHghaW1wb3J0YW50O3BhZGRpbmctcmlnaHQ6MDtoZWlnaHQ6MjBweCFpbXBvcnRhbnR9LmdhbnR0X2NhbF9saWdodF93aWRlIC5nYW50dF9jYWxfbHRleHR7cGFkZGluZy1yaWdodDowfS5nYW50dF9jYWxfbGlnaHRfd2lkZSAuZ2FudHRfY2FsX2xhcmVhe3BhZGRpbmc6MCAxMHB4O3dpZHRoOjEwMCV9LmdhbnR0X2NhbF9saWdodF93aWRlIC5nYW50dF9zZWN0aW9uX3RpbWV7YmFja2dyb3VuZDp0cmFuc3BhcmVudH0uZ2FudHRfY2FsX2xpZ2h0X3dpZGUgLmdhbnR0X2NhbF9jaGVja2JveCBsYWJlbHtwYWRkaW5nLWxlZnQ6MH0uZ2FudHRfY2FsX2xpZ2h0X3dpZGUgLmdhbnR0X2NhbF9sc2VjdGlvbiAuZ2FudHRfZnVsbGRheXtmbG9hdDpub25lO21hcmdpbi1yaWdodDowO2ZvbnQtd2VpZ2h0OjcwMDtjdXJzb3I6cG9pbnRlcn0uZ2FudHRfY2FsX2xpZ2h0X3dpZGUgLmdhbnR0X2N1c3RvbV9idXR0b257cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDttYXJnaW4tdG9wOjJweH0uZ2FudHRfY2FsX2xpZ2h0X3dpZGUgLmdhbnR0X3JlcGVhdF9yaWdodHttYXJnaW4tcmlnaHQ6NTVweH0uZ2FudHRfY2FsX2xpZ2h0X3dpZGUuZ2FudHRfY2FsX2xpZ2h0X2Z1bGx7d2lkdGg6NzM4cHh9LmdhbnR0X2NhbF93aWRlX2NoZWNrYm94IGlucHV0e21hcmdpbi10b3A6OHB4O21hcmdpbi1sZWZ0OjE0cHh9LmdhbnR0X2NhbF9saWdodCBpbnB1dHtmb250LXNpemU6MTNweH0uZ2FudHRfc2VjdGlvbl90aW1le2JhY2tncm91bmQtY29sb3I6I2ZmZjt3aGl0ZS1zcGFjZTpub3dyYXA7cGFkZGluZzoycHggMTBweCA1cHg7cGFkZGluZy10b3A6MnB4IWltcG9ydGFudH0uZ2FudHRfc2VjdGlvbl90aW1lIC5nYW50dF90aW1lX3NlbGVjdHN7ZmxvYXQ6bGVmdDtoZWlnaHQ6MjVweH0uZ2FudHRfc2VjdGlvbl90aW1lIC5nYW50dF90aW1lX3NlbGVjdHMgc2VsZWN0e2hlaWdodDoyM3B4O3BhZGRpbmc6MnB4O2JvcmRlcjoxcHggc29saWQgI2NlY2VjZX0uZ2FudHRfZHVyYXRpb257d2lkdGg6MTAwcHg7aGVpZ2h0OjIzcHg7ZmxvYXQ6bGVmdDt3aGl0ZS1zcGFjZTpub3dyYXA7bWFyZ2luLWxlZnQ6MjBweDtsaW5lLWhlaWdodDoyM3B4fS5nYW50dF9kdXJhdGlvbiAuZ2FudHRfZHVyYXRpb25fZGVjLC5nYW50dF9kdXJhdGlvbiAuZ2FudHRfZHVyYXRpb25faW5jLC5nYW50dF9kdXJhdGlvbiAuZ2FudHRfZHVyYXRpb25fdmFsdWV7Ym94LXNpemluZzpib3JkZXItYm94O3RleHQtYWxpZ246Y2VudGVyO3ZlcnRpY2FsLWFsaWduOnRvcDtoZWlnaHQ6MTAwJTtib3JkZXI6MXB4IHNvbGlkICNjZWNlY2V9LmdhbnR0X2R1cmF0aW9uIC5nYW50dF9kdXJhdGlvbl92YWx1ZXt3aWR0aDo0MHB4O3BhZGRpbmc6M3B4IDRweDtib3JkZXItbGVmdC13aWR0aDowO2JvcmRlci1yaWdodC13aWR0aDowfS5nYW50dF9kdXJhdGlvbiAuZ2FudHRfZHVyYXRpb25fZGVjLC5nYW50dF9kdXJhdGlvbiAuZ2FudHRfZHVyYXRpb25faW5je3dpZHRoOjIwcHg7cGFkZGluZzoxcHg7cGFkZGluZy1ib3R0b206MXB4O2JhY2tncm91bmQ6I2ZmZn0uZ2FudHRfZHVyYXRpb24gLmdhbnR0X2R1cmF0aW9uX2RlY3stbW96LWJvcmRlci10b3AtbGVmdC1yYWRpdXM6NHB4Oy1tb3otYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czo0cHg7LXdlYmtpdC1ib3JkZXItdG9wLWxlZnQtcmFkaXVzOjRweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NHB4O2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NHB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NHB4fS5nYW50dF9kdXJhdGlvbiAuZ2FudHRfZHVyYXRpb25faW5je21hcmdpbi1yaWdodDo0cHg7LW1vei1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo0cHg7LW1vei1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo0cHg7LXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo0cHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo0cHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NHB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjRweH0uZ2FudHRfcmVzb3VyY2Vze21heC1oZWlnaHQ6MTUwcHg7aGVpZ2h0OmF1dG87b3ZlcmZsb3cteTphdXRvfS5nYW50dF9yZXNvdXJjZV9yb3d7ZGlzcGxheTpibG9jaztwYWRkaW5nOjEwcHggMDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZWJlYmViO2N1cnNvcjpwb2ludGVyfS5nYW50dF9yZXNvdXJjZV9yb3cgaW5wdXRbdHlwZT1jaGVja2JveF06bm90KDpjaGVja2VkKSwuZ2FudHRfcmVzb3VyY2Vfcm93IGlucHV0W3R5cGU9Y2hlY2tib3hdOm5vdCg6Y2hlY2tlZCl+ZGl2e29wYWNpdHk6LjV9LmdhbnR0X3Jlc291cmNlX3RvZ2dsZXt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmdhbnR0X3Jlc291cmNlc19maWx0ZXIgLmdhbnR0X3Jlc291cmNlc19maWx0ZXJfaW5wdXR7cGFkZGluZzoxcHggMnB4O2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2FudHRfcmVzb3VyY2VzX2ZpbHRlciAuc3dpdGNoX3Vuc2V0dGVke3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uZ2FudHRfcmVzb3VyY2VfY2VsbHtkaXNwbGF5OmlubGluZS1ibG9ja30uZ2FudHRfcmVzb3VyY2VfY2VsbC5nYW50dF9yZXNvdXJjZV9jZWxsX2NoZWNrYm94e3dpZHRoOjI0cHg7bWF4LXdpZHRoOjI0cHg7bWluLXdpZHRoOjI0cHg7dmVydGljYWwtYWxpZ246bWlkZGxlfS5nYW50dF9yZXNvdXJjZV9jZWxsLmdhbnR0X3Jlc291cmNlX2NlbGxfbGFiZWx7d2lkdGg6NDAlO21heC13aWR0aDo0MCU7dmVydGljYWwtYWxpZ246bWlkZGxlfS5nYW50dF9yZXNvdXJjZV9jZWxsLmdhbnR0X3Jlc291cmNlX2NlbGxfdmFsdWV7d2lkdGg6MzAlO21heC13aWR0aDozMCU7dmVydGljYWwtYWxpZ246bWlkZGxlfS5nYW50dF9yZXNvdXJjZV9jZWxsLmdhbnR0X3Jlc291cmNlX2NlbGxfdmFsdWUgaW5wdXQsLmdhbnR0X3Jlc291cmNlX2NlbGwuZ2FudHRfcmVzb3VyY2VfY2VsbF92YWx1ZSBzZWxlY3R7d2lkdGg6ODAlO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtwYWRkaW5nOjFweCAycHg7Ym94LXNpemluZzpib3JkZXItYm94fS5nYW50dF9yZXNvdXJjZV9jZWxsLmdhbnR0X3Jlc291cmNlX2NlbGxfdW5pdHt3aWR0aDoxMCU7bWF4LXdpZHRoOjEwJTt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmdhbnR0X3Jlc291cmNlX2Vhcmx5X3ZhbHVle29wYWNpdHk6Ljg7Zm9udC1zaXplOi45ZW19LmdhbnR0X2NhbF9xdWlja19pbmZve2JvcmRlcjoxcHggc29saWQgI2NlY2VjZTtib3JkZXItcmFkaXVzOjZweDtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjMwMDtib3gtc2hhZG93OjNweCAzcHggM3B4IHJnYmEoMCwwLDAsLjA3KTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7d2lkdGg6MzAwcHg7dHJhbnNpdGlvbjpsZWZ0IC41cyBlYXNlLHJpZ2h0IC41czstbW96LXRyYW5zaXRpb246bGVmdCAuNXMgZWFzZSxyaWdodCAuNXM7LXdlYmtpdC10cmFuc2l0aW9uOmxlZnQgLjVzIGVhc2UscmlnaHQgLjVzOy1vLXRyYW5zaXRpb246bGVmdCAuNXMgZWFzZSxyaWdodCAuNXN9LmdhbnR0X25vX2FuaW1hdGV7dHJhbnNpdGlvbjpub25lOy1tb3otdHJhbnNpdGlvbjpub25lOy13ZWJraXQtdHJhbnNpdGlvbjpub25lOy1vLXRyYW5zaXRpb246bm9uZX0uZ2FudHRfY2FsX3F1aWNrX2luZm8uZ2FudHRfcWlfbGVmdCAuZ2FudHRfcWlfYmlnX2ljb257ZmxvYXQ6cmlnaHR9LmdhbnR0X2NhbF9xaV90aXRsZXstd2Via2l0LWJvcmRlci10b3AtbGVmdC1yYWRpdXM6NnB4Oy13ZWJraXQtYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowOy13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NnB4Oy13ZWJraXQtYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDo2cHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MDstbW96LWJvcmRlci1yYWRpdXMtdG9wcmlnaHQ6NnB4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDowO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NnB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo2cHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDtwYWRkaW5nOjVweCAwIDhweCAxMnB4O2NvbG9yOiM0NTQ1NDU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNjZWNlY2V9LmdhbnR0X2NhbF9xaV90ZGF0ZXtmb250LXNpemU6MTRweDtmb250LXdlaWdodDo3MDB9LmdhbnR0X2NhbF9xaV90Y29udGVudHtmb250LXNpemU6MTNweH0uZ2FudHRfY2FsX3FpX2NvbnRlbnR7cGFkZGluZzoxNnB4IDhweDtmb250LXNpemU6MTNweDtjb2xvcjojNDU0NTQ1O292ZXJmbG93OmhpZGRlbn0uZ2FudHRfY2FsX3FpX2NvbnRyb2xzey13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czowOy13ZWJraXQtYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czo2cHg7LXdlYmtpdC1ib3JkZXItdG9wLXJpZ2h0LXJhZGl1czowOy13ZWJraXQtYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6NnB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3BsZWZ0OjA7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6NnB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDowOy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDo2cHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NnB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6NnB4O3BhZGRpbmctbGVmdDo3cHh9LmdhbnR0X2NhbF9xaV9jb250cm9scyAuZ2FudHRfbWVudV9pY29ue21hcmdpbi10b3A6NnB4O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0uZ2FudHRfY2FsX3FpX2NvbnRyb2xzIC5nYW50dF9tZW51X2ljb24uaWNvbl9lZGl0e3dpZHRoOjIwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCUUFBQUFVQ0FZQUFBQ05pUjBOQUFBQUJtSkxSMFFBL3dEL0FQK2d2YWVUQUFBQUNYQklXWE1BQUE3RUFBQU94QUdWS3c0YkFBQUFCM1JKVFVVSDNRWUZDakk1WlFqNWJBQUFBRk5KUkVGVU9NdnQwekVPQUNBSUEwRGt3VHltSDhiSlRSVEtaR0pYeWFXRUtQS1RDUUFINExzMzdjSXRjRFV6c3hITkRMWk5oQ3E3R3Qxd2g5RXJWN0VqeUdBaHlHTHBobG5zQ2xXdVMzMnJuMGN6QVYrdk5Hck0vTEJ0QUFBQUFFbEZUa1N1UW1DQyl9LmdhbnR0X2NhbF9xaV9jb250cm9scyAuZ2FudHRfbWVudV9pY29uLmljb25fZGVsZXRle3dpZHRoOjIwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCQUFBQUFRQ0FZQUFBQWY4LzloQUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUF5SnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU15MWpNREV4SURZMkxqRTBOVFkyTVN3Z01qQXhNaTh3TWk4d05pMHhORG8xTmpveU55QWdJQ0FnSUNBZ0lqNGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlnZUcxc2JuTTZjM1JTWldZOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOXpWSGx3WlM5U1pYTnZkWEpqWlZKbFppTWlJSGh0Y0RwRGNtVmhkRzl5Vkc5dmJEMGlRV1J2WW1VZ1VHaHZkRzl6YUc5d0lFTlROaUFvVjJsdVpHOTNjeWtpSUhodGNFMU5Pa2x1YzNSaGJtTmxTVVE5SW5odGNDNXBhV1E2TWpGRU56STNOVU5ETXpBME1URkZNamhCTmpKR1FUYzNNVUl5UXpZek5FWWlJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZNakZFTnpJM05VUkRNekEwTVRGRk1qaEJOakpHUVRjM01VSXlRell6TkVZaVBpQThlRzF3VFUwNlJHVnlhWFpsWkVaeWIyMGdjM1JTWldZNmFXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEb3lNVVEzTWpjMVFVTXpNRFF4TVVVeU9FRTJNa1pCTnpjeFFqSkROak0wUmlJZ2MzUlNaV1k2Wkc5amRXMWxiblJKUkQwaWVHMXdMbVJwWkRveU1VUTNNamMxUWtNek1EUXhNVVV5T0VFMk1rWkJOemN4UWpKRE5qTTBSaUl2UGlBOEwzSmtaanBFWlhOamNtbHdkR2x2Ymo0Z1BDOXlaR1k2VWtSR1BpQThMM2c2ZUcxd2JXVjBZVDRnUEQ5NGNHRmphMlYwSUdWdVpEMGljaUkvUG1VRDBnQUFBQUJ2U1VSQlZIamFZdnovL3o4REl5TWpBeFlRaWNSZWppNEowb2ZLUU5QOEh3bWdHUWJYQjhJc1dHd0RTU3dEdWlvS2pZOXVCdGhWakZBWFlIVUdBUUEya1ltQlVvQVVCcEdrMExBd2dCdndIK1lYNG1rd3B0Z0xvd1lNUmdPSVRVeVlLUkZJTi93bkRqUWdKeVNBQUFNQXByeUt6TDh3amZVQUFBQUFTVVZPUks1Q1lJST0pfS5nYW50dF9xaV9iaWdfaWNvbntmb250LXNpemU6MTNweDtib3JkZXItcmFkaXVzOjRweDtmb250LXdlaWdodDo3MDA7YmFja2dyb3VuZDojZmZmO21hcmdpbjo1cHggOXB4IDhweCAwO21pbi13aWR0aDo2MHB4O2xpbmUtaGVpZ2h0OjMycHg7dmVydGljYWwtYWxpZ246bWlkZGxlO3BhZGRpbmc6MCAxMHB4IDAgNXB4O2N1cnNvcjpwb2ludGVyO2JvcmRlcjoxcHggc29saWQgI2NlY2VjZX0uZ2FudHRfY2FsX3FpX2NvbnRyb2xzIGRpdntmbG9hdDpsZWZ0O2hlaWdodDozMnB4O3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjMycHh9LmdhbnR0X3Rvb2x0aXB7cGFkZGluZzoxMHB4O3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6NTA7d2hpdGUtc3BhY2U6bm93cmFwfS5nYW50dF9yZXNvdXJjZV9tYXJrZXJ7cG9zaXRpb246YWJzb2x1dGU7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1zaXplOjE0cHg7Y29sb3I6I2ZmZn0uZ2FudHRfcmVzb3VyY2VfbWFya2VyX29re2JhY2tncm91bmQ6cmdiYSg3OCwyMDgsMTM0LC43NSl9LmdhbnR0X3Jlc291cmNlX21hcmtlcl9vdmVydGltZXtiYWNrZ3JvdW5kOmhzbGEoMCwxMDAlLDc2JSwuNjkpfS5nYW50dF9oaXN0b2dyYW1fbGFiZWx7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjE7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc2l6ZToxM3B4fS5nYW50dF9oaXN0b2dyYW1fZmlsbHtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDEsMTU3LDE4MCwuMik7d2lkdGg6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MH0uZ2FudHRfaGlzdG9ncmFtX2hvcl9iYXJ7aGVpZ2h0OjFweDttYXJnaW4tdG9wOi0xcHh9LmdhbnR0X2hpc3RvZ3JhbV9ob3JfYmFyLC5nYW50dF9oaXN0b2dyYW1fdmVydF9iYXJ7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDojMjk5ZGI0O21hcmdpbi1sZWZ0Oi0xcHh9LmdhbnR0X2hpc3RvZ3JhbV92ZXJ0X2Jhcnt3aWR0aDoxcHh9LmdhbnR0X2hpc3RvZ3JhbV9jZWxse3Bvc2l0aW9uOmFic29sdXRlO3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToxM3B4O2NvbG9yOiMwMDB9LmdhbnR0X21hcmtlcntoZWlnaHQ6MTAwJTt3aWR0aDoycHg7dG9wOjA7cG9zaXRpb246YWJzb2x1dGU7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwwLDAsLjQpO2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2FudHRfbWFya2VyIC5nYW50dF9tYXJrZXJfY29udGVudHtwYWRkaW5nOjVweDtiYWNrZ3JvdW5kOmluaGVyaXQ7Y29sb3I6I2ZmZjtwb3NpdGlvbjphYnNvbHV0ZTtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxMnB4O29wYWNpdHk6Ljh9LmdhbnR0X21hcmtlcl9hcmVhe3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0uZ2FudHRfZ3JpZF9lZGl0b3JfcGxhY2Vob2xkZXJ7cG9zaXRpb246YWJzb2x1dGV9LmdhbnR0X2dyaWRfZWRpdG9yX3BsYWNlaG9sZGVyPmRpdiwuZ2FudHRfZ3JpZF9lZGl0b3JfcGxhY2Vob2xkZXIgaW5wdXQsLmdhbnR0X2dyaWRfZWRpdG9yX3BsYWNlaG9sZGVyIHNlbGVjdHt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2FudHRfcm93X3BsYWNlaG9sZGVyIGRpdntvcGFjaXR5Oi41fS5nYW50dF9yb3dfcGxhY2Vob2xkZXIgLmdhbnR0X2FkZCwuZ2FudHRfcm93X3BsYWNlaG9sZGVyIC5nYW50dF9maWxle2Rpc3BsYXk6bm9uZX0uZ2FudHRfZHJhZ19tYXJrZXIuZ2FudHRfZ3JpZF9kbmRfbWFya2Vye2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7dHJhbnNpdGlvbjphbGwgLjFzIGVhc2V9LmdhbnR0X2dyaWRfZG5kX21hcmtlcl9saW5le2hlaWdodDo0cHg7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiMzNDk4ZGJ9LmdhbnR0X2dyaWRfZG5kX21hcmtlcl9saW5lOmJlZm9yZXtiYWNrZ3JvdW5kOiNmZmY7d2lkdGg6MTJweDtoZWlnaHQ6MTJweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjNweCBzb2xpZCAjMzQ5OGRiO2JvcmRlci1yYWRpdXM6NnB4O2NvbnRlbnQ6IiI7bGluZS1oZWlnaHQ6MXB4O2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luLWxlZnQ6LTExcHg7bWFyZ2luLXRvcDotNHB4O3BvaW50ZXItZXZlbnRzOm5vbmV9LmdhbnR0X2dyaWRfZG5kX21hcmtlcl9mb2xkZXJ7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTtwb2ludGVyLWV2ZW50czpub25lO2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2hhZG93Omluc2V0IDAgMCAwIDJweCAjM2Y5OGRiO2JhY2tncm91bmQ6dHJhbnNwYXJlbnR9LmdhbnR0X292ZXJsYXlfYXJlYXtkaXNwbGF5Om5vbmV9LmdhbnR0X292ZXJsYXksLmdhbnR0X292ZXJsYXlfYXJlYXtwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6aW5oZXJpdDt3aWR0aDppbmhlcml0O3RvcDowO2xlZnQ6MH0uZ2FudHRfY2xpY2tfZHJhZ19yZWN0e3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDtvdXRsaW5lOjFweCBzb2xpZCAjM2Y5OGRiO2JhY2tncm91bmQtY29sb3I6cmdiYSg1MiwxNTIsMjE5LC4zKX0uZ2FudHRfbGF5b3V0X2NvbnRlbnR7d2lkdGg6MTAwJTtvdmVyZmxvdzphdXRvO2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2FudHRfbGF5b3V0X2NlbGx7cG9zaXRpb246cmVsYXRpdmU7Ym94LXNpemluZzpib3JkZXItYm94fS5nYW50dF9sYXlvdXRfY2VsbD4uZ2FudHRfbGF5b3V0X2hlYWRlcntiYWNrZ3JvdW5kOiMzM2FhZTg7Y29sb3I6I2ZmZjtmb250LXNpemU6MTdweDtwYWRkaW5nOjVweCAxMHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2FudHRfbGF5b3V0X2hlYWRlci5jb2xsYXBzZWRfeHtiYWNrZ3JvdW5kOiNhOWE5YTl9LmdhbnR0X2xheW91dF9oZWFkZXIuY29sbGFwc2VkX3ggLmdhbnR0X2hlYWRlcl9hcnJvdzpiZWZvcmV7Y29udGVudDoiXDIxRTcifS5nYW50dF9sYXlvdXRfaGVhZGVyLmNvbGxhcHNlZF95e2JhY2tncm91bmQ6I2E5YTlhOX0uZ2FudHRfbGF5b3V0X2hlYWRlci5jb2xsYXBzZWRfeSAuZ2FudHRfaGVhZGVyX2Fycm93OmJlZm9yZXtjb250ZW50OiJcMjFFOSJ9LmdhbnR0X2xheW91dF9oZWFkZXJ7Y3Vyc29yOnBvaW50ZXJ9LmdhbnR0X2xheW91dF9oZWFkZXIgLmdhbnR0X2hlYWRlcl9hcnJvd3tmbG9hdDpyaWdodDt0ZXh0LWFsaWduOnJpZ2h0fS5nYW50dF9sYXlvdXRfaGVhZGVyIC5nYW50dF9oZWFkZXJfYXJyb3c6YmVmb3Jle2NvbnRlbnQ6IlwyMUU2In0uZ2FudHRfbGF5b3V0X2hlYWRlci52ZXJ0aWNhbCAuZ2FudHRfaGVhZGVyX2Fycm93OmJlZm9yZXtjb250ZW50OiJcMjFFNyJ9LmdhbnR0X2xheW91dF9vdXRlcl9zY3JvbGxfdmVydGljYWwgLmdhbnR0X2xheW91dF9jb250ZW50e292ZXJmbG93LXk6aGlkZGVufS5nYW50dF9sYXlvdXRfb3V0ZXJfc2Nyb2xsX2hvcml6b250YWwgLmdhbnR0X2xheW91dF9jb250ZW50e292ZXJmbG93LXg6aGlkZGVufS5nYW50dF9sYXlvdXRfeD4uZ2FudHRfbGF5b3V0X2NlbGx7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246dG9wfS5nYW50dF9sYXlvdXRfeHt3aGl0ZS1zcGFjZTpub3dyYXB9LmdhbnR0X3Jlc2l6aW5ne29wYWNpdHk6Ljc7YmFja2dyb3VuZDojZjJmMmYyfS5nYW50dF9sYXlvdXRfY2VsbF9ib3JkZXJfcmlnaHQuZ2FudHRfcmVzaXplcntvdmVyZmxvdzp2aXNpYmxlO2JvcmRlci1yaWdodDowfS5nYW50dF9yZXNpemVye2N1cnNvcjplLXJlc2l6ZTtwb3NpdGlvbjpyZWxhdGl2ZX0uZ2FudHRfcmVzaXplcl95e2N1cnNvcjpuLXJlc2l6ZX0uZ2FudHRfcmVzaXplcl9zdGlja3tiYWNrZ3JvdW5kOiMzM2FhZTg7ei1pbmRleDo5OTk5O3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3dpZHRoOjEwMCV9LmdhbnR0X3Jlc2l6ZXJfeCAuZ2FudHRfcmVzaXplcl94e3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjIwcHg7aGVpZ2h0OjEwMCU7bWFyZ2luLWxlZnQ6LTEwcHg7dG9wOjA7bGVmdDowO3otaW5kZXg6MX0uZ2FudHRfcmVzaXplcl95IC5nYW50dF9yZXNpemVyX3l7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjIwcHg7d2lkdGg6MTAwJTt0b3A6LTEwcHg7bGVmdDowO3otaW5kZXg6MX0uZ2FudHRfcmVzaXplcl9lcnJvcntiYWNrZ3JvdW5kOiNjZDVjNWMhaW1wb3J0YW50fS5nYW50dF9sYXlvdXRfY2VsbF9ib3JkZXJfbGVmdHtib3JkZXItbGVmdDoxcHggc29saWQgI2NlY2VjZX0uZ2FudHRfbGF5b3V0X2NlbGxfYm9yZGVyX3JpZ2h0e2JvcmRlci1yaWdodDoxcHggc29saWQgI2NlY2VjZX0uZ2FudHRfbGF5b3V0X2NlbGxfYm9yZGVyX3RvcHtib3JkZXItdG9wOjFweCBzb2xpZCAjY2VjZWNlfS5nYW50dF9sYXlvdXRfY2VsbF9ib3JkZXJfYm90dG9te2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNjZWNlY2V9LmdhbnR0X2xheW91dF9jZWxsX2JvcmRlcl90cmFuc3BhcmVudHtib3JkZXItY29sb3I6dHJhbnNwYXJlbnR9LmdhbnR0X3dpbmRvd3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2xlZnQ6NTAlO3otaW5kZXg6OTk5OTk5OTk5O2JhY2tncm91bmQ6I2ZmZn0uZ2FudHRfd2luZG93X2NvbnRlbnR7cG9zaXRpb246cmVsYXRpdmV9LmdhbnR0X3dpbmRvd19jb250ZW50X2hlYWRlcntiYWNrZ3JvdW5kOiMzOWM7Y29sb3I6I2ZmZjtoZWlnaHQ6MzNweDtwYWRkaW5nOjEwcHggMTBweCAwO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNmZmY7cG9zaXRpb246cmVsYXRpdmV9LmdhbnR0X3dpbmRvd19jb250ZW50X2hlYWRlcl90ZXh0e3BhZGRpbmctbGVmdDoxMCV9LmdhbnR0X3dpbmRvd19jb250ZW50X2hlYWRlcl9idXR0b25ze3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMHB4O3JpZ2h0OjEwcHh9LmdhbnR0X3dpbmRvd19jb250ZW50X2hlYWRlcl9idXR0b25zOmhvdmVye2NvbG9yOiMwMDA7Y3Vyc29yOnBvaW50ZXJ9LmdhbnR0X3dpbmRvd19jb250ZW50X3Jlc2l6ZXJ7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTVweDtoZWlnaHQ6MTVweDtib3R0b206MDtsaW5lLWhlaWdodDoxNXB4O3JpZ2h0Oi0xcHg7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZC1pbWFnZTp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBOEFBQUFQQ0FNQUFBQU1DR1Y0QUFBQUJsQk1WRVVBQUFBQUFBQ2xaN25QQUFBQUFYUlNUbE1BUU9iWVpnQUFBQlpKUkVGVWVBRmpJQVV3VXNobHBKRExTSWhMR0FBQUNRNEFGazc5SmFNQUFBQUFTVVZPUks1Q1lJST0pO2N1cnNvcjpudy1yZXNpemU7ei1pbmRleDo5OTl9LmdhbnR0X3dpbmRvd19jb250ZW50X2ZyYW1le3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMSk7ei1pbmRleDo5OTk5fS5nYW50dF93aW5kb3dfZHJhZ3tjdXJzb3I6cG9pbnRlciFpbXBvcnRhbnR9LmdhbnR0X3dpbmRvd19yZXNpemluZ3tvdmVyZmxvdzp2aXNpYmxlfS5nYW50dF93aW5kb3dfcmVzaXppbmdfYm9keXtvdmVyZmxvdzpoaWRkZW4haW1wb3J0YW50fS5nYW50dF93aW5kb3dfbW9kYWx7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4xKTt6LWluZGV4Ojk5OTk7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cG9zaXRpb246Zml4ZWR9LmdhbnR0X2NhbF9saWdodCwuZ2FudHRfY2FsX3F1aWNrX2luZm8sLmdhbnR0X2NvbnRhaW5lciwuZ2FudHRfbWVzc2FnZV9hcmVhLC5nYW50dF9tb2RhbF9ib3gsLmdhbnR0X3Rvb2x0aXB7dGV4dC1yZW5kZXJpbmc6b3B0aW1pemVMZWdpYmlsaXR5Oy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlfS5nYW50dF9ub3NlbGVjdHstbW96LXVzZXItc2VsZWN0Oi1tb3otbm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uZ2FudHRfZHJhZ19tYXJrZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0xMDAwcHg7bGVmdDotMTAwMHB4O2ZvbnQtZmFtaWx5OkFyaWFsO2ZvbnQtc2l6ZToxM3B4fS5nYW50dF9kcmFnX21hcmtlciAuZ2FudHRfdHJlZV9pY29uLmdhbnR0X2JsYW5rLC5nYW50dF9kcmFnX21hcmtlciAuZ2FudHRfdHJlZV9pY29uLmdhbnR0X2Nsb3NlLC5nYW50dF9kcmFnX21hcmtlciAuZ2FudHRfdHJlZV9pY29uLmdhbnR0X29wZW4sLmdhbnR0X2RyYWdfbWFya2VyIC5nYW50dF90cmVlX2luZGVudHtkaXNwbGF5Om5vbmV9LmdhbnR0X2RyYWdfbWFya2VyLC5nYW50dF9kcmFnX21hcmtlciAuZ2FudHRfcm93Lm9kZHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmdhbnR0X2RyYWdfbWFya2VyIC5nYW50dF9yb3d7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNkMmQyZDI7Ym9yZGVyLXRvcDoxcHggc29saWQgI2QyZDJkMn0uZ2FudHRfZHJhZ19tYXJrZXIgLmdhbnR0X2NlbGx7Ym9yZGVyLWNvbG9yOiNkMmQyZDJ9LmdhbnR0X3Jvdy5nYW50dF9vdmVyLC5nYW50dF90YXNrX3Jvdy5nYW50dF9vdmVye2JhY2tncm91bmQtY29sb3I6IzAwNzBmZX0uZ2FudHRfcm93LmdhbnR0X3RyYW5zcGFyZW50IC5nYW50dF9jZWxse29wYWNpdHk6Ljd9LmdhbnR0X3Rhc2tfcm93LmdhbnR0X3RyYW5zcGFyZW50e2JhY2tncm91bmQtY29sb3I6I2Y4ZmRmZH0uZ2FudHRfcG9wdXBfYnV0dG9uLmdhbnR0X2RlbGV0ZV9idXR0b257YmFja2dyb3VuZDojM2RiOWQzO3RleHQtc2hhZG93OjAgLTFweCAwICMyNDhhOWY7Y29sb3I6I2ZmZjtmb250LXdlaWdodDo3MDA7Ym9yZGVyLXdpZHRoOjB9LmdhbnR0X2NvbnRhaW5lcl9yZXNpemVfd2F0Y2hlcntiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3otaW5kZXg6LTE7cG9pbnRlci1ldmVudHM6bm9uZTtib3JkZXI6MDtib3gtc2l6aW5nOmJvcmRlci1ib3g7b3BhY2l0eTowfQ==]]></Resource>
    <Resource ID="d33d62b0-81cb-3424-6214-3ce5fcfadac6" Name="dhtmlxgantt.js" Type="js"><![CDATA[]]></Resource>
  </Resources>
  <SourceCode><![CDATA[
class VDOM_gantt(VDOM_object):

    def render(self, contents=""):
        display = u"display: none;" if self.visible == "0" else u""
        woid = (self.id).replace('-', '_')
        
        id = u"o_" + woid
        id_gantt = u"g_" + woid
        ov = u"auto"
        style = u"overflow:{ovf};z-index:{zind};position:{pos};top:{top}px;left:{left}px;width:{wid}px;height:{hei}px;" \
                    .format(ovf = ov, zind = self.zindex, pos = self.position, 
                                top = self.top, left = self.left, wid = self.width, hei = self.height)

        classname = u"""class="%s" """ % self.classname if self.classname else u""

        params = []
        custom_style = []

        if self.data:
            data = u"""gantt.parse(%(data)s);""" % {"data": self.data}
        else:
            data = u""


        if self.style:
            custom_style.append(self.style)

        if self.scales:
            params.append(u"""gantt.config.scales = %(scales)s;""" % {"scales": self.scales})

        if self.reordering_tasks == "1":
            params.append(u"""gantt.config.order_branch = true;""")


        if self.duration_unit == "day":
            params.append(u"""gantt.config.duration_unit = "day";""")
        elif self.duration_unit == "hour":
            params.append(u"""gantt.config.duration_unit = "hour";""")


        if self.readonly == "1":
            params.append(u"""gantt.config.readonly = true;""")

        if self.split == "1":
            params.append(u"""gantt.locale.labels.section_split = "Display";""")

        if self.skip_off_time == "1":
            params.append(u"""gantt.config.skip_off_time = true;""")


        if self.disable_add:
            try:
                level = int(self.disable_add)
                params.append(u"""
                gantt.templates.grid_row_class = function( start, end, task ) {
                    return ( task.$level >= %(level)s ) ? "nested_task" : ""
                };
                """ % {"level": level})

                custom_style.append(u"""
                .nested_task .gantt_add{
                    display: none;
                }
                """)
            except:
                raise Exception (u" Disable add button param error value must be integer")

        if self.highlight_weekend:
            params.append(u"""
            gantt.config.work_time = true;
            gantt.config.correct_work_time = true;
            
            gantt.templates.timeline_cell_class = function(task,date){
                if(!gantt.isWorkTime({task:task, date:date})){
                    return "week_end" ;
                }
            };
            
            gantt.templates.scale_cell_class = function(date){
              if(!gantt.isWorkTime(date))
                  return "week_end";
            };
            """)

            custom_style.append(u"""
            .gantt_task_cell.week_end,
            .gantt_scale_cell.week_end {
                background-color: #%(color)s;
            }

            .gantt_task_row.gantt_selected .gantt_task_cell.week_end {
                background-color: #F8EC9C !important;
            }""" % {"color": self.highlight_weekend})

        if self.zooming == "1":
            params.append(u"""
                
                gantt.config.min_column_width = 54;
                var zoomConfig = {
                    minColumnWidth: 54,
                    maxColumnWidth: 54,
                    levels: [
                        [
                            { unit: "day", step: 1},
                            { unit: "week", step: 1}
                        ],
                        [
                            { unit: "day", step: 1},
                            { unit: "month", step: 1},
                            { unit: "hour", step: 6}
                        ],
                        [
                            {unit: "day",step: 1},
                            {unit: "hour",step: 3}
                        ],
                        [
                            { unit: "day", step: 1 },
                            { unit: "hour", step: 1}
                        ]
                    ],
                    useKey: "ctrlKey",
                    trigger: "wheel",
                    element: function(){
                        return gantt.$root.querySelector(".gantt_task");
                    }
                }

                gantt.ext.zoom.init(zoomConfig);

            """)

        if self.deadline == "1":
            params.append(u"""
                gantt.config.lightbox.sections = [
                    {name: "description", height: 70, map_to: "text", type: "textarea", focus: true},
                    {name: "time", map_to: "auto", type: "duration"},
                    {
                        name: "deadline", map_to: {start_date: "deadline"},
                        type: "duration_optional",
                        button: true,
                        single_date: true
                    },
                    {name: "type", height: 50, type: "typeselect", map_to: "type"}
                ];
                gantt.config.xml_date = "%d-%m-%Y %H:%i:%s";

                gantt.locale.labels.deadline_enable_button = 'Set';
                gantt.locale.labels.deadline_disable_button = 'Remove';

                gantt.config.columns = [
                    {
                        name: "overdue", label: "", width: 38, template: function (obj) {
                            if (obj.deadline) {
                                var deadline = gantt.date.parseDate(obj.deadline, "xml_date");
                                if (deadline && obj.end_date > deadline) {
                                    return '<div class="overdue-indicator">!</div>';
                                }
                            }
                            return '<div></div>';
                        }
                    },
                    {name: "text", label: "Task name", width: "*", tree: true, resize: true},
                    {name: "start_date", label: "Start time", align: "center", width: 80},
                    {name: "deadline", label: "Deadline", width: 80, align: "center", template: function (obj) {
                            if(obj.deadline) {
                                console.log(obj.deadline);
                                return obj.deadline
                            }
                            return ""
                        }
                    },
                    {name: "duration", label: "Duration", align: "center", width: 60},
                    {name: "add", label: "", width: 36}
                ];
                gantt.config.grid_width = 420;
                gantt.locale.labels.section_deadline = "Deadline";

                gantt.addTaskLayer(function draw_deadline(task) {
                    if (task.deadline) {
                        var el = document.createElement('div');
                        el.className = 'deadline';
                        var sizes = gantt.getTaskPosition(task, task.deadline);

                        el.style.left = sizes.left + 'px';
                        el.style.top = sizes.top + 'px';

                        el.setAttribute('title', gantt.templates.task_date(task.deadline));
                        return el;
                    }
                    return false;
                });

                gantt.templates.rightside_text = function (start, end, task) {
                    if (task.deadline) {
                        if (end.valueOf() > task.deadline.valueOf()) {
                            var overdue = Math.ceil(Math.abs((end.getTime() - task.deadline.getTime()) / (24 * 60 * 60 * 1000)));
                            var text = "<b>Overdue: " + overdue + " days</b>";
                            return text;
                        }
                    }
                };

                gantt.attachEvent("onTaskLoading", function (task) {
                    if (task.deadline)
                        task.deadline = gantt.date.parseDate(task.deadline, "xml_date");
                    return true;
                });
            """)

        if self.base_tasks:
            params.append(self.base_tasks)

        if self.custom:
            params.append(self.custom)

        if VDOM_CONFIG_1["DEBUG"] == "1":
            debug_info = u"objtype='gantt' objname='%s' ver='%s'" % (self.name, self.type.version)
        else:
            debug_info = u""

        result = u"""
                <div %(debug_info)s id="%(id)s" style="display:block; margin:0; %(display)s %(style)s" name="%(name)s" style="overflow:visible" %(classname)s>
                    <div id="%(id_gantt)s" style="width:100%%; height:100%%;"></div>
                </div>

                <style>
                %(custom_style)s
                </style>

                <script>

                    %(params)s
                    //cosnt gantt = Gantt.getGanttInstance();
                    %(gantt_config_start_date)s;
                    %(gantt_config_end_date)s;
                    gantt.init("%(id_gantt)s");
                    %(data)s
                    
                    gantt.attachEvent("onAfterTaskDelete", function(id,item){
                        execEventBinded('%(woid)s', 'ontaskchanged', {item: JSON.stringify(item), id: id});
                        return true;
                    });

                    gantt.attachEvent("onAfterTaskUpdate", function(id,item){
                        execEventBinded('%(woid)s', 'ontaskchanged', {item: JSON.stringify(item), id: id});
                        return true;
                    });

                    gantt.attachEvent("onAfterTaskAdd", function(id,item){
                        execEventBinded('%(woid)s', 'ontaskchanged', {item: JSON.stringify(item), id: id});
                        return true;
                    });

                    
                    gantt.attachEvent("onAfterLinkAdd", function(id,item){
                        execEventBinded('%(woid)s', 'onlinkchanged', {item: JSON.stringify(item), id: id});
                        return true;
                    });

                    gantt.attachEvent("onAfterLinkDelete", function(id,item){
                        execEventBinded('%(woid)s', 'onlinkchanged', {item: JSON.stringify(item), id: id});
                        return true;
                    });

                    gantt.attachEvent("onAfterLinkUpdate", function(id,item){
                        execEventBinded('%(woid)s', 'onlinkchanged', {item: JSON.stringify(item), id: id});
                        return true;
                    });
                    
                </script>
            """ % {
                        "debug_info":              debug_info,
                        "id":                      id,
                        "woid":                    woid,
                        "display":                 display,
                        "style":                   style,
                        "name":                    self.name,
                        "classname":               classname,
                        "id_gantt":                id_gantt,
                        "params":                  '\n'.join(params),
                        "custom_style":            '\n'.join(custom_style),
                        "data":                    data,
                        "gantt_config_start_date": "" if not self.start_date else "gantt.config.start_date = {}".format(self.start_date),
                        "gantt_config_end_date":   "" if not self.end_date else "gantt.config.end_date = {}".format(self.end_date)
                    }


        return VDOM_object.render(self, contents=result)

    def wysiwyg(self, contents=""):
        from scripting.legacy.wysiwyg import get_empty_wysiwyg_value

        image_id = "32dda2ed-1356-4297-8c4b-371919c9c0c5"
        result = get_empty_wysiwyg_value(self, image_id)

        return VDOM_object.wysiwyg(self, contents=result)]]></SourceCode>
  <Libraries>
    <Library Target="html"><![CDATA[<script type="text/javascript" src="/d33d62b0-81cb-3424-6214-3ce5fcfadac6.js"></script>]]></Library>
    <Library Target="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/ec8cf865-3e9b-fde2-a67f-3ce5b21f1caf.css" />]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="click" Help="#Lang(514)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(903)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(904)"/>
          </Parameters>
        </Event>
        <Event Name="ctrlclick" Help="#Lang(515)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(905)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(906)"/>
          </Parameters>
        </Event>
        <Event Name="dblclick" Help="#Lang(516)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(907)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(908)"/>
          </Parameters>
        </Event>
        <Event Name="focus" Help="#Lang(517)">
          <Parameters/>
        </Event>
        <Event Name="mousedown" Help="#Lang(518)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(909)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(911)"/>
          </Parameters>
        </Event>
        <Event Name="mousemove" Help="#Lang(519)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(912)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(913)"/>
          </Parameters>
        </Event>
        <Event Name="mouseout" Help="#Lang(521)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(914)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(915)"/>
          </Parameters>
        </Event>
        <Event Name="mouseover" Help="#Lang(522)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(916)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(917)"/>
          </Parameters>
        </Event>
        <Event Name="mouseup" Help="#Lang(523)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(918)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(919)"/>
          </Parameters>
        </Event>
        <Event Name="onbeforetaskadd" Help="#Lang(524)">
          <Parameters>
            <Parameter Name="params" Order="0" VbType="" Help="#Lang(921)"/>
          </Parameters>
        </Event>
        <Event Name="onlinkchanged" Help="#Lang(525)">
          <Parameters>
            <Parameter Name="item" Order="0" VbType="" Help="#Lang(922)"/>
            <Parameter Name="id" Order="0" VbType="" Help="#Lang(923)"/>
          </Parameters>
        </Event>
        <Event Name="ontaskchanged" Help="#Lang(526)">
          <Parameters>
            <Parameter Name="item" Order="0" VbType="" Help="#Lang(924)"/>
            <Parameter Name="id" Order="0" VbType="" Help="#Lang(925)"/>
          </Parameters>
        </Event>
        <Event Name="valuechange" Help="#Lang(527)">
          <Parameters>
            <Parameter Name="itemValue" Order="0" VbType="" Help="#Lang(926)"/>
          </Parameters>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="addClass">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(701)" ScriptName="className" Help="#Lang(801)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[$q(this.domCont).addClass(className);]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="addLink">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(702)" ScriptName="data" Help="#Lang(802)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[//const id_gantt = 'ganttg_' + this.domCont.id;
const linkId = gantt.addLink(data);
]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="addTask">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(703)" ScriptName="data" Help="#Lang(803)" RegularExpressionValidation=""/>
          </Parameters>
          <SourceCode><![CDATA[//const id_gantt = 'ganttg_' + this.domCont.id;
const taskId= gantt.addTask(data);]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(704)" ScriptName="fade" Help="#Lang(804)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_hide(this.domCont, fade);]]></SourceCode>
        </Action>
        <Action Help="#Lang(505)" InterfaceName="#Lang(605)" MethodName="moveTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="newX" Help="#Lang(805)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(706)" ScriptName="newY" Help="#Lang(806)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(707)" ScriptName="Effect" Help="#Lang(807)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_moveTo(this.domCont, newX, newY, Effect);]]></SourceCode>
        </Action>
        <Action Help="#Lang(506)" InterfaceName="#Lang(606)" MethodName="removeClass">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(708)" ScriptName="className" Help="#Lang(808)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[$q(this.domCont).removeClass(className);]]></SourceCode>
        </Action>
        <Action Help="#Lang(507)" InterfaceName="#Lang(607)" MethodName="setClass">
          <Parameters>
            <Parameter DefaultValue="" Interface="setClass" InterfaceName="#Lang(709)" ScriptName="className" Help="#Lang(809)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[$q(this.domCont).attr('class',className);]]></SourceCode>
        </Action>
        <Action Help="#Lang(508)" InterfaceName="#Lang(608)" MethodName="setData">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(711)" ScriptName="data" Help="#Lang(811)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[gantt.clearAll(); 
gantt.parse(data);
]]></SourceCode>
        </Action>
        <Action Help="#Lang(509)" InterfaceName="#Lang(609)" MethodName="setFocus">
          <Parameters/>
          <SourceCode><![CDATA[jQuery(this.domCont).focus();]]></SourceCode>
        </Action>
        <Action Help="#Lang(511)" InterfaceName="#Lang(611)" MethodName="setStyle">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(712)" ScriptName="cssStyleValue" Help="#Lang(812)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[var t=$q(this.domCont);
t.attr('style', t.attr('style') + ';' + cssStyleValue);]]></SourceCode>
        </Action>
        <Action Help="#Lang(512)" InterfaceName="#Lang(612)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(713)" ScriptName="fade" Help="#Lang(813)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_show(this.domCont, fade);]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>