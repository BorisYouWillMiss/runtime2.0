<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>codeeditor</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_codeeditor</ClassName>
    <ID>9a8f8e07-cb43-ff0f-7179-4a437911af23</ID>
    <Icon>#Res(2a2d2448-2e13-b0bb-8a81-17014fba35bd)</Icon>
    <EditorIcon>#Res(c43c7089-459d-acc2-f636-fb4b23f22d5b)</EditorIcon>
    <StructureIcon>#Res(a7280e78-723d-4c0e-07b3-fb4b16697f8a)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Form</Category>
    <Dynamic>1</Dynamic>
    <Version>1.389.8401</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer, dialog, container, tablecell, form, accordeon, tabview, dialog_2, vdomclass</Containers>
    <Languages>en_US ,fr_FR ,ru_RU</Languages>
    <Handlers/>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>stateful</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|0)|(#Lang(402)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>visible</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>zindex</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue>250</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue>100</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>value</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>syntax</Name>
      <DisplayName>#Lang(111)</DisplayName>
      <DefaultValue>vscript</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(211)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(405)|vscript)|(#Lang(406)|xml)|(#Lang(407)|python)|(#Lang(408)|javascript)|(#Lang(409)|html)|(#Lang(411)|css))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(311)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>is_readonly</Name>
      <DisplayName>#Lang(112)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(212)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(412)|1)|(#Lang(413)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(312)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>customname</Name>
      <DisplayName>#Lang(113)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(213)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(100)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(313)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">Code editor</Sentence>
      <Sentence ID="002">The Code editor type produces an object used to display the multiline text as a piece of code. It can automatically numerate the lines of code and highlight the code elements.</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Hierarchy</Sentence>
      <Sentence ID="103">Visibility</Sentence>
      <Sentence ID="104">Z-Index</Sentence>
      <Sentence ID="105">Top</Sentence>
      <Sentence ID="106">Left</Sentence>
      <Sentence ID="107">Width</Sentence>
      <Sentence ID="108">Height</Sentence>
      <Sentence ID="109">Value</Sentence>
      <Sentence ID="111">Syntax</Sentence>
      <Sentence ID="112">readonly</Sentence>
      <Sentence ID="113">Custom name</Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Order of rendering the object on the page</Sentence>
      <Sentence ID="203">Visibility of the object</Sentence>
      <Sentence ID="204">Position in visual hierarchy of objects</Sentence>
      <Sentence ID="205">Spacing between the top edge of the container and the object in pixels</Sentence>
      <Sentence ID="206">Spacing between the left edge of the container and the object in pixels</Sentence>
      <Sentence ID="207">Width of the object in pixels</Sentence>
      <Sentence ID="208">Height of the object in pixels</Sentence>
      <Sentence ID="209">Text to display</Sentence>
      <Sentence ID="211">Syntax</Sentence>
      <Sentence ID="212">Toggle readonly mode</Sentence>
      <Sentence ID="213">custom name for input</Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="303">Incorrect value, must be either 0 or 1</Sentence>
      <Sentence ID="304">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="305">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="306">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="307">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="308">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="309">Incorrect value</Sentence>
      <Sentence ID="311">Incorrect value</Sentence>
      <Sentence ID="312">newAttribute11</Sentence>
      <Sentence ID="313">invalid custom name for input</Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Invisible</Sentence>
      <Sentence ID="404">Visible</Sentence>
      <Sentence ID="405">VScript</Sentence>
      <Sentence ID="406">XML</Sentence>
      <Sentence ID="407">Python</Sentence>
      <Sentence ID="408">Javascript</Sentence>
      <Sentence ID="409">HTML</Sentence>
      <Sentence ID="411">CSS</Sentence>
      <Sentence ID="412">ReadOnly</Sentence>
      <Sentence ID="413">Editable</Sentence>
      <Sentence ID="501">Set new text value</Sentence>
      <Sentence ID="502">Hide the object</Sentence>
      <Sentence ID="503">Move the object to a new position</Sentence>
      <Sentence ID="504">Show the object</Sentence>
      <Sentence ID="505">Show the object</Sentence>
      <Sentence ID="506">Set cursor to line</Sentence>
      <Sentence ID="507">Set new text value</Sentence>
      <Sentence ID="508">Show the object</Sentence>
      <Sentence ID="509">Show the object</Sentence>
      <Sentence ID="511">Set new text value</Sentence>
      <Sentence ID="512">Show the object</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="601">setValue</Sentence>
      <Sentence ID="602">Hide</Sentence>
      <Sentence ID="603">moveTo</Sentence>
      <Sentence ID="604">Show</Sentence>
      <Sentence ID="605">Show</Sentence>
      <Sentence ID="606">setCursor</Sentence>
      <Sentence ID="607">setValue</Sentence>
      <Sentence ID="608">Show</Sentence>
      <Sentence ID="609">Show</Sentence>
      <Sentence ID="611">setValue</Sentence>
      <Sentence ID="612">Show</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">newX</Sentence>
      <Sentence ID="703">newY</Sentence>
      <Sentence ID="704">Effect</Sentence>
      <Sentence ID="705">Fade</Sentence>
      <Sentence ID="706"></Sentence>
      <Sentence ID="707">line</Sentence>
      <Sentence ID="708">Fade</Sentence>
      <Sentence ID="709">Fade</Sentence>
      <Sentence ID="711">Value</Sentence>
      <Sentence ID="712">Fade</Sentence>
      <Sentence ID="801">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="802">X-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="803">Y-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="804">Visual effect of moving, time is indicated in milliseconds</Sentence>
      <Sentence ID="805">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="806"></Sentence>
      <Sentence ID="807">Line number</Sentence>
      <Sentence ID="808">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="809">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="811">New text value</Sentence>
      <Sentence ID="812">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
    </Language>
    <Language Code="fr_FR">
      <Sentence ID="001">Zone de Texte</Sentence>
      <Sentence ID="002">Zone de Texte</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Hiérarchie</Sentence>
      <Sentence ID="103">Visibilité</Sentence>
      <Sentence ID="104">Z-Index</Sentence>
      <Sentence ID="105">Haut</Sentence>
      <Sentence ID="106">Gauche</Sentence>
      <Sentence ID="107">Largeur</Sentence>
      <Sentence ID="108">Hauteur</Sentence>
      <Sentence ID="109">Valeur</Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113"></Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Hiérarchie de l'objet, ordre de chargement de l'objet par rapport aux autres</Sentence>
      <Sentence ID="203">Afficher ou cacher l'objet</Sentence>
      <Sentence ID="204">Niveau de superposition de l'objet par rapport aux autres</Sentence>
      <Sentence ID="205">Distance depuis le bord haut de l'objet parent en pixels</Sentence>
      <Sentence ID="206">Distance depuis le bord gauche de l'objet parent en pixels</Sentence>
      <Sentence ID="207">Largeur de l'objet en pixels</Sentence>
      <Sentence ID="208">Hauteur de l'objet en pixels</Sentence>
      <Sentence ID="209">Texte dans le champs</Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213"></Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="303">Valeur Incorrecte, doit être 0 ou 1</Sentence>
      <Sentence ID="304">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="305">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="306">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="307">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="308">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="309">Valeur Incorrecte</Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313"></Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Invisible</Sentence>
      <Sentence ID="404">Visible</Sentence>
      <Sentence ID="405"></Sentence>
      <Sentence ID="406"></Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409"></Sentence>
      <Sentence ID="411"></Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="413"></Sentence>
      <Sentence ID="501">Set new text</Sentence>
      <Sentence ID="502">Hide the object</Sentence>
      <Sentence ID="503">Move object to selected point</Sentence>
      <Sentence ID="504">Show the object</Sentence>
      <Sentence ID="505">Show the object</Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507">Set new text</Sentence>
      <Sentence ID="508">Show the object</Sentence>
      <Sentence ID="509">Show the object</Sentence>
      <Sentence ID="511">Set new text</Sentence>
      <Sentence ID="512">Show the object</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="601">setValue</Sentence>
      <Sentence ID="602">Hide</Sentence>
      <Sentence ID="603">moveTo</Sentence>
      <Sentence ID="604">Show</Sentence>
      <Sentence ID="605">Show</Sentence>
      <Sentence ID="606"></Sentence>
      <Sentence ID="607">setValue</Sentence>
      <Sentence ID="608">Show</Sentence>
      <Sentence ID="609">Show</Sentence>
      <Sentence ID="611">setValue</Sentence>
      <Sentence ID="612">Show</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">newX</Sentence>
      <Sentence ID="703">newY</Sentence>
      <Sentence ID="704">Effect</Sentence>
      <Sentence ID="705">Fade</Sentence>
      <Sentence ID="706"></Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708">Fade</Sentence>
      <Sentence ID="709">Fade</Sentence>
      <Sentence ID="711">Value</Sentence>
      <Sentence ID="712">Fade</Sentence>
      <Sentence ID="801">Fade time</Sentence>
      <Sentence ID="802">X-coordinate of new point</Sentence>
      <Sentence ID="803">Y-coordinate of new point</Sentence>
      <Sentence ID="804">Visual effect by moving</Sentence>
      <Sentence ID="805">Time of appearance</Sentence>
      <Sentence ID="806"></Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808">Time of appearance</Sentence>
      <Sentence ID="809">Time of appearance</Sentence>
      <Sentence ID="811">New text</Sentence>
      <Sentence ID="812">Time of appearance</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
    </Language>
    <Language Code="ru_RU">
      <Sentence ID="001">Поле текста</Sentence>
      <Sentence ID="002">Текстовое поле формы</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Иерархия</Sentence>
      <Sentence ID="103">Отображение</Sentence>
      <Sentence ID="104">Позиция</Sentence>
      <Sentence ID="105">Сверху</Sentence>
      <Sentence ID="106">Слева</Sentence>
      <Sentence ID="107">Ширина</Sentence>
      <Sentence ID="108">Высота</Sentence>
      <Sentence ID="109">Значение</Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113"></Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Порядок визуализации объекта в ходе загрузки страницы</Sentence>
      <Sentence ID="203">Режим отображения объекта</Sentence>
      <Sentence ID="204">Положение в визуальной иерархии объектов</Sentence>
      <Sentence ID="205">Расстояние от верхней границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="206">Расстояние от левой границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="207">Ширина объекта в пикселях</Sentence>
      <Sentence ID="208">Высота объекта в пикселях</Sentence>
      <Sentence ID="209">Отображаемый текст</Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213"></Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="303">Неправильное значение, должен быть указан 0 или 1</Sentence>
      <Sentence ID="304">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="305">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="306">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="307">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="308">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="309">Неправильное значение</Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313"></Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Не отображать</Sentence>
      <Sentence ID="404">Отображать</Sentence>
      <Sentence ID="405"></Sentence>
      <Sentence ID="406"></Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409"></Sentence>
      <Sentence ID="411"></Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="413"></Sentence>
      <Sentence ID="501">Установить новый текст</Sentence>
      <Sentence ID="502">Скрыть объект</Sentence>
      <Sentence ID="503">Сдвинуть объект в заданную точку</Sentence>
      <Sentence ID="504">Показать объект</Sentence>
      <Sentence ID="505">Показать объект</Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507">Установить новый текст</Sentence>
      <Sentence ID="508">Показать объект</Sentence>
      <Sentence ID="509">Показать объект</Sentence>
      <Sentence ID="511">Установить новый текст</Sentence>
      <Sentence ID="512">Показать объект</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="601">Установить текст</Sentence>
      <Sentence ID="602">Скрыть</Sentence>
      <Sentence ID="603">Сдвинуть</Sentence>
      <Sentence ID="604">Показать</Sentence>
      <Sentence ID="605">Показать</Sentence>
      <Sentence ID="606"></Sentence>
      <Sentence ID="607">Установить текст</Sentence>
      <Sentence ID="608">Показать</Sentence>
      <Sentence ID="609">Показать</Sentence>
      <Sentence ID="611">Установить текст</Sentence>
      <Sentence ID="612">Показать</Sentence>
      <Sentence ID="701">Исчезновение</Sentence>
      <Sentence ID="702">Координата по оси X</Sentence>
      <Sentence ID="703">Координата по оси X</Sentence>
      <Sentence ID="704">Эффект</Sentence>
      <Sentence ID="705">Появление</Sentence>
      <Sentence ID="706"></Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708">Появление</Sentence>
      <Sentence ID="709">Появление</Sentence>
      <Sentence ID="711">Текст</Sentence>
      <Sentence ID="712">Появление</Sentence>
      <Sentence ID="801">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="802">Координата новой точки по оси X</Sentence>
      <Sentence ID="803">Координата новой точки по оси Y</Sentence>
      <Sentence ID="804">Визуальный эффект при перетаскивании</Sentence>
      <Sentence ID="805">Время появления в миллисекундах</Sentence>
      <Sentence ID="806"></Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808">Время появления в миллисекундах</Sentence>
      <Sentence ID="809">Время появления в миллисекундах</Sentence>
      <Sentence ID="811">Новый текст</Sentence>
      <Sentence ID="812">Время появления в миллисекундах</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="064add91-8595-0f40-10ea-09d38022edee" Name="codemirror" Type="js"><![CDATA[]]></Resource>
    <Resource ID="2a2d2448-2e13-b0bb-8a81-17014fba35bd" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
			bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
			bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
			eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
			NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
			dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
			dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
			IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
			ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
			cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
			SUQ9InhtcC5paWQ6MkNGM0JEMURGRDhCMTFFMTgyOTJFMzAxM0NFMjgxMDciIHhtcE1NOkRvY3Vt
			ZW50SUQ9InhtcC5kaWQ6MkNGM0JEMUVGRDhCMTFFMTgyOTJFMzAxM0NFMjgxMDciPiA8eG1wTU06
			RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDoyQ0YzQkQxQkZEOEIxMUUxODI5
			MkUzMDEzQ0UyODEwNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDoyQ0YzQkQxQ0ZEOEIxMUUx
			ODI5MkUzMDEzQ0UyODEwNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
			bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PvPxTuMAAAUKSURBVHja7JpPaCNVHMd/L50k/U+73Vqa
			GC91jeBS2LQ1qbWuhe0lJw8LHjwI4kWLh6Kr0ENLCxbWdU+yelFREGFhBS/1siK4PbSFUqSIYNZA
			yV9Lu9u60abpv/F9X/omMyGbpklIpksePCbzZubl95nf+/1+7zfvMdKViYmJ5xwOxzcul+tSR0dH
			vcViIVVVRa1mYYyJenR0RJubm8lwOLwcj8ffnp2dDWj3yB8zMzM3+vv7308kEmxra4t2dnbo4ODA
			VCCKolBTUxO1t7dTc3Ozury8fHNycvKaBjI1NXWjt7f3g0gkQqlUivb39wXE4eGheAtmAMHoqKur
			EzBWq5Xq6+vJ6XTS6urqp9PT09fY+Pj48x6P54/19XW2t7dHsgLCjCCodrtdwNhsNurq6lJXVlYu
			Kq2trV/qIXZ3d2lhYYGCwaA4N1OB4D09PTQ4OKi9XMje1tb2lcLp+jGcMJRQl5aWaG1tTaiuoaHB
			VCAQHrJBGz6fT2gKbXy4ebjGLHb98InFYoIcN5mtQCbIFgqFNDAMfz7cbAoMWw+CCzkhnnUTvXLF
			2Pbfv0S3vz1ZgtffJGpqNrbd+5norz+LAoK8EgQVDIpslAaVD0L1v0YUvJ9uO9dBlNwh9neM6Ne7
			j//Xy6OkDr1K1NBI9PBBuq3nQsbvFwGTLSsYFBDJBlzMWSQEOvno3XTbW2OiTX3vQ2J5QHBdPPfT
			j0Rf30q33bkrnmVFgmTLCgaLnjKnINc/1zTBro5mLnCh2Gef5NfEnTSguO8YQpyjH96feBG8/1Js
			RgMryfp+/y0/TAVLaSAPNvLbx5kBMVGpgTxZIB5vSV6noiBsZSkdBBEAeewwuNcrfhHccpZoKB07
			4MK9L4v7tYJ+0B9cOvovQ1FOvINPQeCtEZ1FEAsGMsL1XspE+uyCQIfqfkHcp+qyOBGXYpE0RCFT
			nLKASBg+FUGUlpFaFLxRGekfp1F+XQy/F18ilVet/Yfvy+q6lYLv5H/Kivzjk2BrXqsGUgM5ZUqL
			af7xzFn/uzzGXsmU9jhdAIAhdSgJJFeaeppUVx9Ei+2jHCAqn4aI6L2b5NE6krlQYKorM0vaephJ
			dfUlvEbl+MxR+NDiEIZ4UGCqqw2XhXuGLNE8xq5LdYUxXh6tql09Me63Yl5L5ZNHlm34mICWab5V
			OffLnQNgDHYDj3XWNGJeY69NUcwGglQXWSIdfw6Nhs6I18JaiS5WGFLdAsa+ev4pYrliTeIRURny
			9sJBHE8b09wCU12tZKW6hj7KDZLrQ3apaWqhs9dT95slq6K/YJZVKu0r/tVRw2+DcWftARALPWiU
			1Uz5SD6NQlbILqsFy1aSDBppbGw0vauFjHIhFBWLuZbt7W1Vrqej9PX1mR7E6/WKI2SG7IlEQrXE
			4/F/cCKXp4eGhmhkZERslTBbgUyQbWBgQJMXssdisUfM7XZ/5/f738BuAmyPwPKvy+Wizs5OoULs
			NJC2U2lnIA0Zbx5CJ5NJ2tjYoHA4LDYzoA3Dam5u7jZzOBzPcMHvDw8P2+TGFVklRDU9mrQDOYyk
			JuSGn/n5+T0OdkFI193d/Y7T6bzl8/kYNKP3YhKgmiDyqPdS0MTi4qIajUbHuHl8oUnHYcasVutN
			PtTs2HXT0tIiNFJNiGwYeFhu2GJ3RiAQSPHzcUAIGfUPcAAnV9/H/MERXp28qc5U37sYS/FDjB9/
			4S95imsjKq/9L8AAJ/6bZaasazgAAAAASUVORK5CYII=]]></Resource>
    <Resource ID="3b92e99a-bae2-fecd-a5fc-39bcf6e535bf" Name="codemirror.js" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciB2ZXJzaW9uIDIuMjIKLy8KLy8gQWxsIGZ1bmN0aW9ucyB0aGF0IG5lZWQg
			YWNjZXNzIHRvIHRoZSBlZGl0b3IncyBzdGF0ZSBsaXZlIGluc2lkZQovLyB0aGUgQ29kZU1pcnJv
			ciBmdW5jdGlvbi4gQmVsb3cgdGhhdCwgYXQgdGhlIGJvdHRvbSBvZiB0aGUgZmlsZSwKLy8gc29t
			ZSB1dGlsaXRpZXMgYXJlIGRlZmluZWQuCgovLyBDb2RlTWlycm9yIGlzIHRoZSBvbmx5IGdsb2Jh
			bCB2YXIgd2UgY2xhaW0KdmFyIENvZGVNaXJyb3IgPSAoZnVuY3Rpb24oKSB7CiAgLy8gVGhpcyBp
			cyB0aGUgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBlZGl0b3IgaW5zdGFuY2UuIEl0cwogIC8v
			IGNsb3N1cmUgaXMgdXNlZCB0byBzdG9yZSB0aGUgZWRpdG9yIHN0YXRlLgogIGZ1bmN0aW9uIENv
			ZGVNaXJyb3IocGxhY2UsIGdpdmVuT3B0aW9ucykgewogICAgLy8gRGV0ZXJtaW5lIGVmZmVjdGl2
			ZSBvcHRpb25zIGJhc2VkIG9uIGdpdmVuIHZhbHVlcyBhbmQgZGVmYXVsdHMuCiAgICB2YXIgb3B0
			aW9ucyA9IHt9LCBkZWZhdWx0cyA9IENvZGVNaXJyb3IuZGVmYXVsdHM7CiAgICBmb3IgKHZhciBv
			cHQgaW4gZGVmYXVsdHMpCiAgICAgIGlmIChkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShvcHQpKQog
			ICAgICAgIG9wdGlvbnNbb3B0XSA9IChnaXZlbk9wdGlvbnMgJiYgZ2l2ZW5PcHRpb25zLmhhc093
			blByb3BlcnR5KG9wdCkgPyBnaXZlbk9wdGlvbnMgOiBkZWZhdWx0cylbb3B0XTsKCiAgICB2YXIg
			dGFyZ2V0RG9jdW1lbnQgPSBvcHRpb25zWyJkb2N1bWVudCJdOwogICAgLy8gVGhlIGVsZW1lbnQg
			aW4gd2hpY2ggdGhlIGVkaXRvciBsaXZlcy4KICAgIHZhciB3cmFwcGVyID0gdGFyZ2V0RG9jdW1l
			bnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9ICJDb2RlTWly
			cm9yIiArIChvcHRpb25zLmxpbmVXcmFwcGluZyA/ICIgQ29kZU1pcnJvci13cmFwIiA6ICIiKTsK
			ICAgIC8vIFRoaXMgbWVzcyBjcmVhdGVzIHRoZSBiYXNlIERPTSBzdHJ1Y3R1cmUgZm9yIHRoZSBl
			ZGl0b3IuCiAgICB3cmFwcGVyLmlubmVySFRNTCA9CiAgICAgICc8ZGl2IHN0eWxlPSJvdmVyZmxv
			dzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7IHdpZHRoOiAzcHg7IGhlaWdodDogMHB4OyI+
			JyArIC8vIFdyYXBzIGFuZCBoaWRlcyBpbnB1dCB0ZXh0YXJlYQogICAgICAgICc8dGV4dGFyZWEg
			c3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgcGFkZGluZzogMDsgd2lkdGg6IDFweDsgaGVpZ2h0
			OiAxZW0iIHdyYXA9Im9mZiIgJyArCiAgICAgICAgICAnYXV0b2NvcnJlY3Q9Im9mZiIgYXV0b2Nh
			cGl0YWxpemU9Im9mZiI+PC90ZXh0YXJlYT48L2Rpdj4nICsKICAgICAgJzxkaXYgY2xhc3M9IkNv
			ZGVNaXJyb3Itc2Nyb2xsIiB0YWJpbmRleD0iLTEiPicgKwogICAgICAgICc8ZGl2IHN0eWxlPSJw
			b3NpdGlvbjogcmVsYXRpdmUiPicgKyAvLyBTZXQgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGV4dCwg
			Y2F1c2VzIHNjcm9sbGluZwogICAgICAgICAgJzxkaXYgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2
			ZSI+JyArIC8vIE1vdmVkIGFyb3VuZCBpdHMgcGFyZW50IHRvIGNvdmVyIHZpc2libGUgdmlldwog
			ICAgICAgICAgICAnPGRpdiBjbGFzcz0iQ29kZU1pcnJvci1ndXR0ZXIiPjxkaXYgY2xhc3M9IkNv
			ZGVNaXJyb3ItZ3V0dGVyLXRleHQiPjwvZGl2PjwvZGl2PicgKwogICAgICAgICAgICAvLyBQcm92
			aWRlcyBwb3NpdGlvbmluZyByZWxhdGl2ZSB0byAodmlzaWJsZSkgdGV4dCBvcmlnaW4KICAgICAg
			ICAgICAgJzxkaXYgY2xhc3M9IkNvZGVNaXJyb3ItbGluZXMiPjxkaXYgc3R5bGU9InBvc2l0aW9u
			OiByZWxhdGl2ZTsgei1pbmRleDogMCI+JyArCiAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9InBv
			c2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDEwMCU7IGhlaWdodDogMDsgb3ZlcmZsb3c6IGhpZGRl
			bjsgdmlzaWJpbGl0eTogaGlkZGVuOyI+PC9kaXY+JyArCiAgICAgICAgICAgICAgJzxwcmUgY2xh
			c3M9IkNvZGVNaXJyb3ItY3Vyc29yIj4mIzE2MDs8L3ByZT4nICsgLy8gQWJzb2x1dGVseSBwb3Np
			dGlvbmVkIGJsaW5reSBjdXJzb3IKICAgICAgICAgICAgICAnPGRpdiBzdHlsZT0icG9zaXRpb246
			IHJlbGF0aXZlOyB6LWluZGV4OiAtMSI+PC9kaXY+PGRpdj48L2Rpdj4nICsgLy8gRElWcyBjb250
			YWluaW5nIHRoZSBzZWxlY3Rpb24gYW5kIHRoZSBhY3R1YWwgY29kZQogICAgICAgICAgICAnPC9k
			aXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JzsKICAgIGlmIChwbGFjZS5hcHBlbmRDaGlsZCkg
			cGxhY2UuYXBwZW5kQ2hpbGQod3JhcHBlcik7IGVsc2UgcGxhY2Uod3JhcHBlcik7CiAgICAvLyBJ
			J3ZlIG5ldmVyIHNlZW4gbW9yZSBlbGVnYW50IGNvZGUgaW4gbXkgbGlmZS4KICAgIHZhciBpbnB1
			dERpdiA9IHdyYXBwZXIuZmlyc3RDaGlsZCwgaW5wdXQgPSBpbnB1dERpdi5maXJzdENoaWxkLAog
			ICAgICAgIHNjcm9sbGVyID0gd3JhcHBlci5sYXN0Q2hpbGQsIGNvZGUgPSBzY3JvbGxlci5maXJz
			dENoaWxkLAogICAgICAgIG1vdmVyID0gY29kZS5maXJzdENoaWxkLCBndXR0ZXIgPSBtb3Zlci5m
			aXJzdENoaWxkLCBndXR0ZXJUZXh0ID0gZ3V0dGVyLmZpcnN0Q2hpbGQsCiAgICAgICAgbGluZVNw
			YWNlID0gZ3V0dGVyLm5leHRTaWJsaW5nLmZpcnN0Q2hpbGQsIG1lYXN1cmUgPSBsaW5lU3BhY2Uu
			Zmlyc3RDaGlsZCwKICAgICAgICBjdXJzb3IgPSBtZWFzdXJlLm5leHRTaWJsaW5nLCBzZWxlY3Rp
			b25EaXYgPSBjdXJzb3IubmV4dFNpYmxpbmcsCiAgICAgICAgbGluZURpdiA9IHNlbGVjdGlvbkRp
			di5uZXh0U2libGluZzsKICAgIHRoZW1lQ2hhbmdlZCgpOwogICAgLy8gTmVlZGVkIHRvIGhpZGUg
			YmlnIGJsdWUgYmxpbmtpbmcgY3Vyc29yIG9uIE1vYmlsZSBTYWZhcmkKICAgIGlmIChpb3MpIGlu
			cHV0LnN0eWxlLndpZHRoID0gIjBweCI7CiAgICBpZiAoIXdlYmtpdCkgbGluZVNwYWNlLmRyYWdn
			YWJsZSA9IHRydWU7CiAgICBsaW5lU3BhY2Uuc3R5bGUub3V0bGluZSA9ICJub25lIjsKICAgIGlm
			IChvcHRpb25zLnRhYmluZGV4ICE9IG51bGwpIGlucHV0LnRhYkluZGV4ID0gb3B0aW9ucy50YWJp
			bmRleDsKICAgIGlmICghb3B0aW9ucy5ndXR0ZXIgJiYgIW9wdGlvbnMubGluZU51bWJlcnMpIGd1
			dHRlci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKICAgIC8vIENoZWNrIGZvciBwcm9ibGVtIHdp
			dGggSUUgaW5uZXJIVE1MIG5vdCB3b3JraW5nIHdoZW4gd2UgaGF2ZSBhCiAgICAvLyBQIChvciBz
			aW1pbGFyKSBwYXJlbnQgbm9kZS4KICAgIHRyeSB7IHN0cmluZ1dpZHRoKCJ4Iik7IH0KICAgIGNh
			dGNoIChlKSB7CiAgICAgIGlmIChlLm1lc3NhZ2UubWF0Y2goL3J1bnRpbWUvaSkpCiAgICAgICAg
			ZSA9IG5ldyBFcnJvcigiQSBDb2RlTWlycm9yIGluc2lkZSBhIFAtc3R5bGUgZWxlbWVudCBkb2Vz
			IG5vdCB3b3JrIGluIEludGVybmV0IEV4cGxvcmVyLiAoaW5uZXJIVE1MIGJ1ZykiKTsKICAgICAg
			dGhyb3cgZTsKICAgIH0KCiAgICAvLyBEZWxheWVkIG9iamVjdCB3cmFwIHRpbWVvdXRzLCBtYWtp
			bmcgc3VyZSBvbmx5IG9uZSBpcyBhY3RpdmUuIGJsaW5rZXIgaG9sZHMgYW4gaW50ZXJ2YWwuCiAg
			ICB2YXIgcG9sbCA9IG5ldyBEZWxheWVkKCksIGhpZ2hsaWdodCA9IG5ldyBEZWxheWVkKCksIGJs
			aW5rZXI7CgogICAgLy8gbW9kZSBob2xkcyBhIG1vZGUgQVBJIG9iamVjdC4gZG9jIGlzIHRoZSB0
			cmVlIG9mIExpbmUgb2JqZWN0cywKICAgIC8vIHdvcmsgYW4gYXJyYXkgb2YgbGluZXMgdGhhdCBz
			aG91bGQgYmUgcGFyc2VkLCBhbmQgaGlzdG9yeSB0aGUKICAgIC8vIHVuZG8gaGlzdG9yeSAoaW5z
			dGFuY2Ugb2YgSGlzdG9yeSBjb25zdHJ1Y3RvcikuCiAgICB2YXIgbW9kZSwgZG9jID0gbmV3IEJy
			YW5jaENodW5rKFtuZXcgTGVhZkNodW5rKFtuZXcgTGluZSgiIildKV0pLCB3b3JrLCBmb2N1c2Vk
			OwogICAgbG9hZE1vZGUoKTsKICAgIC8vIFRoZSBzZWxlY3Rpb24uIFRoZXNlIGFyZSBhbHdheXMg
			bWFpbnRhaW5lZCB0byBwb2ludCBhdCB2YWxpZAogICAgLy8gcG9zaXRpb25zLiBJbnZlcnRlZCBp
			cyB1c2VkIHRvIHJlbWVtYmVyIHRoYXQgdGhlIHVzZXIgaXMKICAgIC8vIHNlbGVjdGluZyBib3R0
			b20tdG8tdG9wLgogICAgdmFyIHNlbCA9IHtmcm9tOiB7bGluZTogMCwgY2g6IDB9LCB0bzoge2xp
			bmU6IDAsIGNoOiAwfSwgaW52ZXJ0ZWQ6IGZhbHNlfTsKICAgIC8vIFNlbGVjdGlvbi1yZWxhdGVk
			IGZsYWdzLiBzaGlmdFNlbGVjdGluZyBvYnZpb3VzbHkgdHJhY2tzCiAgICAvLyB3aGV0aGVyIHRo
			ZSB1c2VyIGlzIGhvbGRpbmcgc2hpZnQuCiAgICB2YXIgc2hpZnRTZWxlY3RpbmcsIGxhc3RDbGlj
			aywgbGFzdERvdWJsZUNsaWNrLCBsYXN0U2Nyb2xsUG9zID0gMCwgZHJhZ2dpbmdUZXh0LAogICAg
			ICAgIG92ZXJ3cml0ZSA9IGZhbHNlLCBzdXBwcmVzc0VkaXRzID0gZmFsc2U7CiAgICAvLyBWYXJp
			YWJsZXMgdXNlZCBieSBzdGFydE9wZXJhdGlvbi9lbmRPcGVyYXRpb24gdG8gdHJhY2sgd2hhdAog
			ICAgLy8gaGFwcGVuZWQgZHVyaW5nIHRoZSBvcGVyYXRpb24uCiAgICB2YXIgdXBkYXRlSW5wdXQs
			IHVzZXJTZWxDaGFuZ2UsIGNoYW5nZXMsIHRleHRDaGFuZ2VkLCBzZWxlY3Rpb25DaGFuZ2VkLCBs
			ZWF2ZUlucHV0QWxvbmUsCiAgICAgICAgZ3V0dGVyRGlydHksIGNhbGxiYWNrczsKICAgIC8vIEN1
			cnJlbnQgdmlzaWJsZSByYW5nZSAobWF5IGJlIGJpZ2dlciB0aGFuIHRoZSB2aWV3IHdpbmRvdyku
			CiAgICB2YXIgZGlzcGxheU9mZnNldCA9IDAsIHNob3dpbmdGcm9tID0gMCwgc2hvd2luZ1RvID0g
			MCwgbGFzdFNpemVDID0gMDsKICAgIC8vIGJyYWNrZXRIaWdobGlnaHRlZCBpcyB1c2VkIHRvIHJl
			bWVtYmVyIHRoYXQgYSBiYWNrZXQgaGFzIGJlZW4KICAgIC8vIG1hcmtlZC4KICAgIHZhciBicmFj
			a2V0SGlnaGxpZ2h0ZWQ7CiAgICAvLyBUcmFja3MgdGhlIG1heGltdW0gbGluZSBsZW5ndGggc28g
			dGhhdCB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIKICAgIC8vIGNhbiBiZSBrZXB0IHN0YXRpYyB3
			aGVuIHNjcm9sbGluZy4KICAgIHZhciBtYXhMaW5lID0gIiIsIG1heFdpZHRoOwoKICAgIC8vIElu
			aXRpYWxpemUgdGhlIGNvbnRlbnQuCiAgICBvcGVyYXRpb24oZnVuY3Rpb24oKXtzZXRWYWx1ZShv
			cHRpb25zLnZhbHVlIHx8ICIiKTsgdXBkYXRlSW5wdXQgPSBmYWxzZTt9KSgpOwogICAgdmFyIGhp
			c3RvcnkgPSBuZXcgSGlzdG9yeSgpOwoKICAgIC8vIFJlZ2lzdGVyIG91ciBldmVudCBoYW5kbGVy
			cy4KICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJtb3VzZWRvd24iLCBvcGVyYXRpb24ob25Nb3VzZURv
			d24pKTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJkYmxjbGljayIsIG9wZXJhdGlvbihvbkRvdWJs
			ZUNsaWNrKSk7CiAgICBjb25uZWN0KGxpbmVTcGFjZSwgImRyYWdzdGFydCIsIG9uRHJhZ1N0YXJ0
			KTsKICAgIGNvbm5lY3QobGluZVNwYWNlLCAic2VsZWN0c3RhcnQiLCBlX3ByZXZlbnREZWZhdWx0
			KTsKICAgIC8vIEdlY2tvIGJyb3dzZXJzIGZpcmUgY29udGV4dG1lbnUgKmFmdGVyKiBvcGVuaW5n
			IHRoZSBtZW51LCBhdAogICAgLy8gd2hpY2ggcG9pbnQgd2UgY2FuJ3QgbWVzcyB3aXRoIGl0IGFu
			eW1vcmUuIENvbnRleHQgbWVudSBpcwogICAgLy8gaGFuZGxlZCBpbiBvbk1vdXNlRG93biBmb3Ig
			R2Vja28uCiAgICBpZiAoIWdlY2tvKSBjb25uZWN0KHNjcm9sbGVyLCAiY29udGV4dG1lbnUiLCBv
			bkNvbnRleHRNZW51KTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJzY3JvbGwiLCBmdW5jdGlvbigp
			IHsKICAgICAgbGFzdFNjcm9sbFBvcyA9IHNjcm9sbGVyLnNjcm9sbFRvcDsKICAgICAgdXBkYXRl
			RGlzcGxheShbXSk7CiAgICAgIGlmIChvcHRpb25zLmZpeGVkR3V0dGVyKSBndXR0ZXIuc3R5bGUu
			bGVmdCA9IHNjcm9sbGVyLnNjcm9sbExlZnQgKyAicHgiOwogICAgICBpZiAob3B0aW9ucy5vblNj
			cm9sbCkgb3B0aW9ucy5vblNjcm9sbChpbnN0YW5jZSk7CiAgICB9KTsKICAgIGNvbm5lY3Qod2lu
			ZG93LCAicmVzaXplIiwgZnVuY3Rpb24oKSB7dXBkYXRlRGlzcGxheSh0cnVlKTt9KTsKICAgIGNv
			bm5lY3QoaW5wdXQsICJrZXl1cCIsIG9wZXJhdGlvbihvbktleVVwKSk7CiAgICBjb25uZWN0KGlu
			cHV0LCAiaW5wdXQiLCBmYXN0UG9sbCk7CiAgICBjb25uZWN0KGlucHV0LCAia2V5ZG93biIsIG9w
			ZXJhdGlvbihvbktleURvd24pKTsKICAgIGNvbm5lY3QoaW5wdXQsICJrZXlwcmVzcyIsIG9wZXJh
			dGlvbihvbktleVByZXNzKSk7CiAgICBjb25uZWN0KGlucHV0LCAiZm9jdXMiLCBvbkZvY3VzKTsK
			ICAgIGNvbm5lY3QoaW5wdXQsICJibHVyIiwgb25CbHVyKTsKCiAgICBjb25uZWN0KHNjcm9sbGVy
			LCAiZHJhZ2VudGVyIiwgZV9zdG9wKTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJkcmFnb3ZlciIs
			IGVfc3RvcCk7CiAgICBjb25uZWN0KHNjcm9sbGVyLCAiZHJvcCIsIG9wZXJhdGlvbihvbkRyb3Ap
			KTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJwYXN0ZSIsIGZ1bmN0aW9uKCl7Zm9jdXNJbnB1dCgp
			OyBmYXN0UG9sbCgpO30pOwogICAgY29ubmVjdChpbnB1dCwgInBhc3RlIiwgZmFzdFBvbGwpOwog
			ICAgY29ubmVjdChpbnB1dCwgImN1dCIsIG9wZXJhdGlvbihmdW5jdGlvbigpewogICAgICBpZiAo
			IW9wdGlvbnMucmVhZE9ubHkpIHJlcGxhY2VTZWxlY3Rpb24oIiIpOwogICAgfSkpOwoKICAgIC8v
			IElFIHRocm93cyB1bnNwZWNpZmllZCBlcnJvciBpbiBjZXJ0YWluIGNhc2VzLCB3aGVuCiAgICAv
			LyB0cnlpbmcgdG8gYWNjZXNzIGFjdGl2ZUVsZW1lbnQgYmVmb3JlIG9ubG9hZAogICAgdmFyIGhh
			c0ZvY3VzOyB0cnkgeyBoYXNGb2N1cyA9ICh0YXJnZXREb2N1bWVudC5hY3RpdmVFbGVtZW50ID09
			IGlucHV0KTsgfSBjYXRjaChlKSB7IH0KICAgIGlmIChoYXNGb2N1cykgc2V0VGltZW91dChvbkZv
			Y3VzLCAyMCk7CiAgICBlbHNlIG9uQmx1cigpOwoKICAgIGZ1bmN0aW9uIGlzTGluZShsKSB7cmV0
			dXJuIGwgPj0gMCAmJiBsIDwgZG9jLnNpemU7fQogICAgLy8gVGhlIGluc3RhbmNlIG9iamVjdCB0
			aGF0IHdlJ2xsIHJldHVybi4gTW9zdGx5IGNhbGxzIG91dCB0bwogICAgLy8gbG9jYWwgZnVuY3Rp
			b25zIGluIHRoZSBDb2RlTWlycm9yIGZ1bmN0aW9uLiBTb21lIGRvIHNvbWUgZXh0cmEKICAgIC8v
			IHJhbmdlIGNoZWNraW5nIGFuZC9vciBjbGlwcGluZy4gb3BlcmF0aW9uIGlzIHVzZWQgdG8gd3Jh
			cCB0aGUKICAgIC8vIGNhbGwgc28gdGhhdCBjaGFuZ2VzIGl0IG1ha2VzIGFyZSB0cmFja2VkLCBh
			bmQgdGhlIGRpc3BsYXkgaXMKICAgIC8vIHVwZGF0ZWQgYWZ0ZXJ3YXJkcy4KICAgIHZhciBpbnN0
			YW5jZSA9IHdyYXBwZXIuQ29kZU1pcnJvciA9IHsKICAgICAgZ2V0VmFsdWU6IGdldFZhbHVlLAog
			ICAgICBzZXRWYWx1ZTogb3BlcmF0aW9uKHNldFZhbHVlKSwKICAgICAgZ2V0U2VsZWN0aW9uOiBn
			ZXRTZWxlY3Rpb24sCiAgICAgIHJlcGxhY2VTZWxlY3Rpb246IG9wZXJhdGlvbihyZXBsYWNlU2Vs
			ZWN0aW9uKSwKICAgICAgZm9jdXM6IGZ1bmN0aW9uKCl7d2luZG93LmZvY3VzKCk7IGZvY3VzSW5w
			dXQoKTsgb25Gb2N1cygpOyBmYXN0UG9sbCgpO30sCiAgICAgIHNldE9wdGlvbjogZnVuY3Rpb24o
			b3B0aW9uLCB2YWx1ZSkgewogICAgICAgIHZhciBvbGRWYWwgPSBvcHRpb25zW29wdGlvbl07CiAg
			ICAgICAgb3B0aW9uc1tvcHRpb25dID0gdmFsdWU7CiAgICAgICAgaWYgKG9wdGlvbiA9PSAibW9k
			ZSIgfHwgb3B0aW9uID09ICJpbmRlbnRVbml0IikgbG9hZE1vZGUoKTsKICAgICAgICBlbHNlIGlm
			IChvcHRpb24gPT0gInJlYWRPbmx5IiAmJiB2YWx1ZSA9PSAibm9jdXJzb3IiKSB7b25CbHVyKCk7
			IGlucHV0LmJsdXIoKTt9CiAgICAgICAgZWxzZSBpZiAob3B0aW9uID09ICJyZWFkT25seSIgJiYg
			IXZhbHVlKSB7cmVzZXRJbnB1dCh0cnVlKTt9CiAgICAgICAgZWxzZSBpZiAob3B0aW9uID09ICJ0
			aGVtZSIpIHRoZW1lQ2hhbmdlZCgpOwogICAgICAgIGVsc2UgaWYgKG9wdGlvbiA9PSAibGluZVdy
			YXBwaW5nIiAmJiBvbGRWYWwgIT0gdmFsdWUpIG9wZXJhdGlvbih3cmFwcGluZ0NoYW5nZWQpKCk7
			CiAgICAgICAgZWxzZSBpZiAob3B0aW9uID09ICJ0YWJTaXplIikgdXBkYXRlRGlzcGxheSh0cnVl
			KTsKICAgICAgICBpZiAob3B0aW9uID09ICJsaW5lTnVtYmVycyIgfHwgb3B0aW9uID09ICJndXR0
			ZXIiIHx8IG9wdGlvbiA9PSAiZmlyc3RMaW5lTnVtYmVyIiB8fCBvcHRpb24gPT0gInRoZW1lIikg
			ewogICAgICAgICAgZ3V0dGVyQ2hhbmdlZCgpOwogICAgICAgICAgdXBkYXRlRGlzcGxheSh0cnVl
			KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGdldE9wdGlvbjogZnVuY3Rpb24ob3B0aW9uKSB7
			cmV0dXJuIG9wdGlvbnNbb3B0aW9uXTt9LAogICAgICB1bmRvOiBvcGVyYXRpb24odW5kbyksCiAg
			ICAgIHJlZG86IG9wZXJhdGlvbihyZWRvKSwKICAgICAgaW5kZW50TGluZTogb3BlcmF0aW9uKGZ1
			bmN0aW9uKG4sIGRpcikgewogICAgICAgIGlmICh0eXBlb2YgZGlyICE9ICJzdHJpbmciKSB7CiAg
			ICAgICAgICBpZiAoZGlyID09IG51bGwpIGRpciA9IG9wdGlvbnMuc21hcnRJbmRlbnQgPyAic21h
			cnQiIDogInByZXYiOwogICAgICAgICAgZWxzZSBkaXIgPSBkaXIgPyAiYWRkIiA6ICJzdWJ0cmFj
			dCI7CiAgICAgICAgfQogICAgICAgIGlmIChpc0xpbmUobikpIGluZGVudExpbmUobiwgZGlyKTsK
			ICAgICAgfSksCiAgICAgIGluZGVudFNlbGVjdGlvbjogb3BlcmF0aW9uKGluZGVudFNlbGVjdGVk
			KSwKICAgICAgaGlzdG9yeVNpemU6IGZ1bmN0aW9uKCkge3JldHVybiB7dW5kbzogaGlzdG9yeS5k
			b25lLmxlbmd0aCwgcmVkbzogaGlzdG9yeS51bmRvbmUubGVuZ3RofTt9LAogICAgICBjbGVhckhp
			c3Rvcnk6IGZ1bmN0aW9uKCkge2hpc3RvcnkgPSBuZXcgSGlzdG9yeSgpO30sCiAgICAgIG1hdGNo
			QnJhY2tldHM6IG9wZXJhdGlvbihmdW5jdGlvbigpe21hdGNoQnJhY2tldHModHJ1ZSk7fSksCiAg
			ICAgIGdldFRva2VuQXQ6IG9wZXJhdGlvbihmdW5jdGlvbihwb3MpIHsKICAgICAgICBwb3MgPSBj
			bGlwUG9zKHBvcyk7CiAgICAgICAgcmV0dXJuIGdldExpbmUocG9zLmxpbmUpLmdldFRva2VuQXQo
			bW9kZSwgZ2V0U3RhdGVCZWZvcmUocG9zLmxpbmUpLCBwb3MuY2gpOwogICAgICB9KSwKICAgICAg
			Z2V0U3RhdGVBZnRlcjogZnVuY3Rpb24obGluZSkgewogICAgICAgIGxpbmUgPSBjbGlwTGluZShs
			aW5lID09IG51bGwgPyBkb2Muc2l6ZSAtIDE6IGxpbmUpOwogICAgICAgIHJldHVybiBnZXRTdGF0
			ZUJlZm9yZShsaW5lICsgMSk7CiAgICAgIH0sCiAgICAgIGN1cnNvckNvb3JkczogZnVuY3Rpb24o
			c3RhcnQpewogICAgICAgIGlmIChzdGFydCA9PSBudWxsKSBzdGFydCA9IHNlbC5pbnZlcnRlZDsK
			ICAgICAgICByZXR1cm4gcGFnZUNvb3JkcyhzdGFydCA/IHNlbC5mcm9tIDogc2VsLnRvKTsKICAg
			ICAgfSwKICAgICAgY2hhckNvb3JkczogZnVuY3Rpb24ocG9zKXtyZXR1cm4gcGFnZUNvb3Jkcyhj
			bGlwUG9zKHBvcykpO30sCiAgICAgIGNvb3Jkc0NoYXI6IGZ1bmN0aW9uKGNvb3JkcykgewogICAg
			ICAgIHZhciBvZmYgPSBlbHRPZmZzZXQobGluZVNwYWNlKTsKICAgICAgICByZXR1cm4gY29vcmRz
			Q2hhcihjb29yZHMueCAtIG9mZi5sZWZ0LCBjb29yZHMueSAtIG9mZi50b3ApOwogICAgICB9LAog
			ICAgICBtYXJrVGV4dDogb3BlcmF0aW9uKG1hcmtUZXh0KSwKICAgICAgc2V0Qm9va21hcms6IHNl
			dEJvb2ttYXJrLAogICAgICBzZXRNYXJrZXI6IG9wZXJhdGlvbihhZGRHdXR0ZXJNYXJrZXIpLAog
			ICAgICBjbGVhck1hcmtlcjogb3BlcmF0aW9uKHJlbW92ZUd1dHRlck1hcmtlciksCiAgICAgIHNl
			dExpbmVDbGFzczogb3BlcmF0aW9uKHNldExpbmVDbGFzcyksCiAgICAgIGhpZGVMaW5lOiBvcGVy
			YXRpb24oZnVuY3Rpb24oaCkge3JldHVybiBzZXRMaW5lSGlkZGVuKGgsIHRydWUpO30pLAogICAg
			ICBzaG93TGluZTogb3BlcmF0aW9uKGZ1bmN0aW9uKGgpIHtyZXR1cm4gc2V0TGluZUhpZGRlbiho
			LCBmYWxzZSk7fSksCiAgICAgIG9uRGVsZXRlTGluZTogZnVuY3Rpb24obGluZSwgZikgewogICAg
			ICAgIGlmICh0eXBlb2YgbGluZSA9PSAibnVtYmVyIikgewogICAgICAgICAgaWYgKCFpc0xpbmUo
			bGluZSkpIHJldHVybiBudWxsOwogICAgICAgICAgbGluZSA9IGdldExpbmUobGluZSk7CiAgICAg
			ICAgfQogICAgICAgIChsaW5lLmhhbmRsZXJzIHx8IChsaW5lLmhhbmRsZXJzID0gW10pKS5wdXNo
			KGYpOwogICAgICAgIHJldHVybiBsaW5lOwogICAgICB9LAogICAgICBsaW5lSW5mbzogbGluZUlu
			Zm8sCiAgICAgIGFkZFdpZGdldDogZnVuY3Rpb24ocG9zLCBub2RlLCBzY3JvbGwsIHZlcnQsIGhv
			cml6KSB7CiAgICAgICAgcG9zID0gbG9jYWxDb29yZHMoY2xpcFBvcyhwb3MpKTsKICAgICAgICB2
			YXIgdG9wID0gcG9zLnlCb3QsIGxlZnQgPSBwb3MueDsKICAgICAgICBub2RlLnN0eWxlLnBvc2l0
			aW9uID0gImFic29sdXRlIjsKICAgICAgICBjb2RlLmFwcGVuZENoaWxkKG5vZGUpOwogICAgICAg
			IGlmICh2ZXJ0ID09ICJvdmVyIikgdG9wID0gcG9zLnk7CiAgICAgICAgZWxzZSBpZiAodmVydCA9
			PSAibmVhciIpIHsKICAgICAgICAgIHZhciB2c3BhY2UgPSBNYXRoLm1heChzY3JvbGxlci5vZmZz
			ZXRIZWlnaHQsIGRvYy5oZWlnaHQgKiB0ZXh0SGVpZ2h0KCkpLAogICAgICAgICAgICAgIGhzcGFj
			ZSA9IE1hdGgubWF4KGNvZGUuY2xpZW50V2lkdGgsIGxpbmVTcGFjZS5jbGllbnRXaWR0aCkgLSBw
			YWRkaW5nTGVmdCgpOwogICAgICAgICAgaWYgKHBvcy55Qm90ICsgbm9kZS5vZmZzZXRIZWlnaHQg
			PiB2c3BhY2UgJiYgcG9zLnkgPiBub2RlLm9mZnNldEhlaWdodCkKICAgICAgICAgICAgdG9wID0g
			cG9zLnkgLSBub2RlLm9mZnNldEhlaWdodDsKICAgICAgICAgIGlmIChsZWZ0ICsgbm9kZS5vZmZz
			ZXRXaWR0aCA+IGhzcGFjZSkKICAgICAgICAgICAgbGVmdCA9IGhzcGFjZSAtIG5vZGUub2Zmc2V0
			V2lkdGg7CiAgICAgICAgfQogICAgICAgIG5vZGUuc3R5bGUudG9wID0gKHRvcCArIHBhZGRpbmdU
			b3AoKSkgKyAicHgiOwogICAgICAgIG5vZGUuc3R5bGUubGVmdCA9IG5vZGUuc3R5bGUucmlnaHQg
			PSAiIjsKICAgICAgICBpZiAoaG9yaXogPT0gInJpZ2h0IikgewogICAgICAgICAgbGVmdCA9IGNv
			ZGUuY2xpZW50V2lkdGggLSBub2RlLm9mZnNldFdpZHRoOwogICAgICAgICAgbm9kZS5zdHlsZS5y
			aWdodCA9ICIwcHgiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoaG9yaXogPT0gImxl
			ZnQiKSBsZWZ0ID0gMDsKICAgICAgICAgIGVsc2UgaWYgKGhvcml6ID09ICJtaWRkbGUiKSBsZWZ0
			ID0gKGNvZGUuY2xpZW50V2lkdGggLSBub2RlLm9mZnNldFdpZHRoKSAvIDI7CiAgICAgICAgICBu
			b2RlLnN0eWxlLmxlZnQgPSAobGVmdCArIHBhZGRpbmdMZWZ0KCkpICsgInB4IjsKICAgICAgICB9
			CiAgICAgICAgaWYgKHNjcm9sbCkKICAgICAgICAgIHNjcm9sbEludG9WaWV3KGxlZnQsIHRvcCwg
			bGVmdCArIG5vZGUub2Zmc2V0V2lkdGgsIHRvcCArIG5vZGUub2Zmc2V0SGVpZ2h0KTsKICAgICAg
			fSwKCiAgICAgIGxpbmVDb3VudDogZnVuY3Rpb24oKSB7cmV0dXJuIGRvYy5zaXplO30sCiAgICAg
			IGNsaXBQb3M6IGNsaXBQb3MsCiAgICAgIGdldEN1cnNvcjogZnVuY3Rpb24oc3RhcnQpIHsKICAg
			ICAgICBpZiAoc3RhcnQgPT0gbnVsbCkgc3RhcnQgPSBzZWwuaW52ZXJ0ZWQ7CiAgICAgICAgcmV0
			dXJuIGNvcHlQb3Moc3RhcnQgPyBzZWwuZnJvbSA6IHNlbC50byk7CiAgICAgIH0sCiAgICAgIHNv
			bWV0aGluZ1NlbGVjdGVkOiBmdW5jdGlvbigpIHtyZXR1cm4gIXBvc0VxKHNlbC5mcm9tLCBzZWwu
			dG8pO30sCiAgICAgIHNldEN1cnNvcjogb3BlcmF0aW9uKGZ1bmN0aW9uKGxpbmUsIGNoLCB1c2Vy
			KSB7CiAgICAgICAgaWYgKGNoID09IG51bGwgJiYgdHlwZW9mIGxpbmUubGluZSA9PSAibnVtYmVy
			Iikgc2V0Q3Vyc29yKGxpbmUubGluZSwgbGluZS5jaCwgdXNlcik7CiAgICAgICAgZWxzZSBzZXRD
			dXJzb3IobGluZSwgY2gsIHVzZXIpOwogICAgICB9KSwKICAgICAgc2V0U2VsZWN0aW9uOiBvcGVy
			YXRpb24oZnVuY3Rpb24oZnJvbSwgdG8sIHVzZXIpIHsKICAgICAgICAodXNlciA/IHNldFNlbGVj
			dGlvblVzZXIgOiBzZXRTZWxlY3Rpb24pKGNsaXBQb3MoZnJvbSksIGNsaXBQb3ModG8gfHwgZnJv
			bSkpOwogICAgICB9KSwKICAgICAgZ2V0TGluZTogZnVuY3Rpb24obGluZSkge2lmIChpc0xpbmUo
			bGluZSkpIHJldHVybiBnZXRMaW5lKGxpbmUpLnRleHQ7fSwKICAgICAgZ2V0TGluZUhhbmRsZTog
			ZnVuY3Rpb24obGluZSkge2lmIChpc0xpbmUobGluZSkpIHJldHVybiBnZXRMaW5lKGxpbmUpO30s
			CiAgICAgIHNldExpbmU6IG9wZXJhdGlvbihmdW5jdGlvbihsaW5lLCB0ZXh0KSB7CiAgICAgICAg
			aWYgKGlzTGluZShsaW5lKSkgcmVwbGFjZVJhbmdlKHRleHQsIHtsaW5lOiBsaW5lLCBjaDogMH0s
			IHtsaW5lOiBsaW5lLCBjaDogZ2V0TGluZShsaW5lKS50ZXh0Lmxlbmd0aH0pOwogICAgICB9KSwK
			ICAgICAgcmVtb3ZlTGluZTogb3BlcmF0aW9uKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBpZiAo
			aXNMaW5lKGxpbmUpKSByZXBsYWNlUmFuZ2UoIiIsIHtsaW5lOiBsaW5lLCBjaDogMH0sIGNsaXBQ
			b3Moe2xpbmU6IGxpbmUrMSwgY2g6IDB9KSk7CiAgICAgIH0pLAogICAgICByZXBsYWNlUmFuZ2U6
			IG9wZXJhdGlvbihyZXBsYWNlUmFuZ2UpLAogICAgICBnZXRSYW5nZTogZnVuY3Rpb24oZnJvbSwg
			dG8pIHtyZXR1cm4gZ2V0UmFuZ2UoY2xpcFBvcyhmcm9tKSwgY2xpcFBvcyh0bykpO30sCgogICAg
			ICBleGVjQ29tbWFuZDogZnVuY3Rpb24oY21kKSB7cmV0dXJuIGNvbW1hbmRzW2NtZF0oaW5zdGFu
			Y2UpO30sCiAgICAgIC8vIFN0dWZmIHVzZWQgYnkgY29tbWFuZHMsIHByb2JhYmx5IG5vdCBtdWNo
			IHVzZSB0byBvdXRzaWRlIGNvZGUuCiAgICAgIG1vdmVIOiBvcGVyYXRpb24obW92ZUgpLAogICAg
			ICBkZWxldGVIOiBvcGVyYXRpb24oZGVsZXRlSCksCiAgICAgIG1vdmVWOiBvcGVyYXRpb24obW92
			ZVYpLAogICAgICB0b2dnbGVPdmVyd3JpdGU6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmKG92ZXJ3
			cml0ZSl7CiAgICAgICAgICBvdmVyd3JpdGUgPSBmYWxzZTsKICAgICAgICAgIGN1cnNvci5jbGFz
			c05hbWUgPSBjdXJzb3IuY2xhc3NOYW1lLnJlcGxhY2UoIiBDb2RlTWlycm9yLW92ZXJ3cml0ZSIs
			ICIiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgb3ZlcndyaXRlID0gdHJ1ZTsKICAgICAg
			ICAgIGN1cnNvci5jbGFzc05hbWUgKz0gIiBDb2RlTWlycm9yLW92ZXJ3cml0ZSI7CiAgICAgICAg
			fQogICAgICB9LAoKICAgICAgcG9zRnJvbUluZGV4OiBmdW5jdGlvbihvZmYpIHsKICAgICAgICB2
			YXIgbGluZU5vID0gMCwgY2g7CiAgICAgICAgZG9jLml0ZXIoMCwgZG9jLnNpemUsIGZ1bmN0aW9u
			KGxpbmUpIHsKICAgICAgICAgIHZhciBzeiA9IGxpbmUudGV4dC5sZW5ndGggKyAxOwogICAgICAg
			ICAgaWYgKHN6ID4gb2ZmKSB7IGNoID0gb2ZmOyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgb2Zm
			IC09IHN6OwogICAgICAgICAgKytsaW5lTm87CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNs
			aXBQb3Moe2xpbmU6IGxpbmVObywgY2g6IGNofSk7CiAgICAgIH0sCiAgICAgIGluZGV4RnJvbVBv
			czogZnVuY3Rpb24gKGNvb3JkcykgewogICAgICAgIGlmIChjb29yZHMubGluZSA8IDAgfHwgY29v
			cmRzLmNoIDwgMCkgcmV0dXJuIDA7CiAgICAgICAgdmFyIGluZGV4ID0gY29vcmRzLmNoOwogICAg
			ICAgIGRvYy5pdGVyKDAsIGNvb3Jkcy5saW5lLCBmdW5jdGlvbiAobGluZSkgewogICAgICAgICAg
			aW5kZXggKz0gbGluZS50ZXh0Lmxlbmd0aCArIDE7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJu
			IGluZGV4OwogICAgICB9LAogICAgICBzY3JvbGxUbzogZnVuY3Rpb24oeCwgeSkgewogICAgICAg
			IGlmICh4ICE9IG51bGwpIHNjcm9sbGVyLnNjcm9sbExlZnQgPSB4OwogICAgICAgIGlmICh5ICE9
			IG51bGwpIHNjcm9sbGVyLnNjcm9sbFRvcCA9IHk7CiAgICAgICAgdXBkYXRlRGlzcGxheShbXSk7
			CiAgICAgIH0sCgogICAgICBvcGVyYXRpb246IGZ1bmN0aW9uKGYpe3JldHVybiBvcGVyYXRpb24o
			ZikoKTt9LAogICAgICByZWZyZXNoOiBmdW5jdGlvbigpewogICAgICAgIHVwZGF0ZURpc3BsYXko
			dHJ1ZSk7CiAgICAgICAgaWYgKHNjcm9sbGVyLnNjcm9sbEhlaWdodCA+IGxhc3RTY3JvbGxQb3Mp
			CiAgICAgICAgICBzY3JvbGxlci5zY3JvbGxUb3AgPSBsYXN0U2Nyb2xsUG9zOwogICAgICB9LAog
			ICAgICBnZXRJbnB1dEZpZWxkOiBmdW5jdGlvbigpe3JldHVybiBpbnB1dDt9LAogICAgICBnZXRX
			cmFwcGVyRWxlbWVudDogZnVuY3Rpb24oKXtyZXR1cm4gd3JhcHBlcjt9LAogICAgICBnZXRTY3Jv
			bGxlckVsZW1lbnQ6IGZ1bmN0aW9uKCl7cmV0dXJuIHNjcm9sbGVyO30sCiAgICAgIGdldEd1dHRl
			ckVsZW1lbnQ6IGZ1bmN0aW9uKCl7cmV0dXJuIGd1dHRlcjt9CiAgICB9OwoKICAgIGZ1bmN0aW9u
			IGdldExpbmUobikgeyByZXR1cm4gZ2V0TGluZUF0KGRvYywgbik7IH0KICAgIGZ1bmN0aW9uIHVw
			ZGF0ZUxpbmVIZWlnaHQobGluZSwgaGVpZ2h0KSB7CiAgICAgIGd1dHRlckRpcnR5ID0gdHJ1ZTsK
			ICAgICAgdmFyIGRpZmYgPSBoZWlnaHQgLSBsaW5lLmhlaWdodDsKICAgICAgZm9yICh2YXIgbiA9
			IGxpbmU7IG47IG4gPSBuLnBhcmVudCkgbi5oZWlnaHQgKz0gZGlmZjsKICAgIH0KCiAgICBmdW5j
			dGlvbiBzZXRWYWx1ZShjb2RlKSB7CiAgICAgIHZhciB0b3AgPSB7bGluZTogMCwgY2g6IDB9Owog
			ICAgICB1cGRhdGVMaW5lcyh0b3AsIHtsaW5lOiBkb2Muc2l6ZSAtIDEsIGNoOiBnZXRMaW5lKGRv
			Yy5zaXplLTEpLnRleHQubGVuZ3RofSwKICAgICAgICAgICAgICAgICAgc3BsaXRMaW5lcyhjb2Rl
			KSwgdG9wLCB0b3ApOwogICAgICB1cGRhdGVJbnB1dCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlv
			biBnZXRWYWx1ZShjb2RlKSB7CiAgICAgIHZhciB0ZXh0ID0gW107CiAgICAgIGRvYy5pdGVyKDAs
			IGRvYy5zaXplLCBmdW5jdGlvbihsaW5lKSB7IHRleHQucHVzaChsaW5lLnRleHQpOyB9KTsKICAg
			ICAgcmV0dXJuIHRleHQuam9pbigiXG4iKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvbk1vdXNlRG93
			bihlKSB7CiAgICAgIHNldFNoaWZ0KGVfcHJvcChlLCAic2hpZnRLZXkiKSk7CiAgICAgIC8vIENo
			ZWNrIHdoZXRoZXIgdGhpcyBpcyBhIGNsaWNrIGluIGEgd2lkZ2V0CiAgICAgIGZvciAodmFyIG4g
			PSBlX3RhcmdldChlKTsgbiAhPSB3cmFwcGVyOyBuID0gbi5wYXJlbnROb2RlKQogICAgICAgIGlm
			IChuLnBhcmVudE5vZGUgPT0gY29kZSAmJiBuICE9IG1vdmVyKSByZXR1cm47CgogICAgICAvLyBT
			ZWUgaWYgdGhpcyBpcyBhIGNsaWNrIGluIHRoZSBndXR0ZXIKICAgICAgZm9yICh2YXIgbiA9IGVf
			dGFyZ2V0KGUpOyBuICE9IHdyYXBwZXI7IG4gPSBuLnBhcmVudE5vZGUpCiAgICAgICAgaWYgKG4u
			cGFyZW50Tm9kZSA9PSBndXR0ZXJUZXh0KSB7CiAgICAgICAgICBpZiAob3B0aW9ucy5vbkd1dHRl
			ckNsaWNrKQogICAgICAgICAgICBvcHRpb25zLm9uR3V0dGVyQ2xpY2soaW5zdGFuY2UsIGluZGV4
			T2YoZ3V0dGVyVGV4dC5jaGlsZE5vZGVzLCBuKSArIHNob3dpbmdGcm9tLCBlKTsKICAgICAgICAg
			IHJldHVybiBlX3ByZXZlbnREZWZhdWx0KGUpOwogICAgICAgIH0KCiAgICAgIHZhciBzdGFydCA9
			IHBvc0Zyb21Nb3VzZShlKTsKCiAgICAgIHN3aXRjaCAoZV9idXR0b24oZSkpIHsKICAgICAgY2Fz
			ZSAzOgogICAgICAgIGlmIChnZWNrbyAmJiAhbWFjKSBvbkNvbnRleHRNZW51KGUpOwogICAgICAg
			IHJldHVybjsKICAgICAgY2FzZSAyOgogICAgICAgIGlmIChzdGFydCkgc2V0Q3Vyc29yKHN0YXJ0
			LmxpbmUsIHN0YXJ0LmNoLCB0cnVlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgLy8g
			Rm9yIGJ1dHRvbiAxLCBpZiBpdCB3YXMgY2xpY2tlZCBpbnNpZGUgdGhlIGVkaXRvcgogICAgICAv
			LyAocG9zRnJvbU1vdXNlIHJldHVybmluZyBub24tbnVsbCksIHdlIGhhdmUgdG8gYWRqdXN0IHRo
			ZQogICAgICAvLyBzZWxlY3Rpb24uCiAgICAgIGlmICghc3RhcnQpIHtpZiAoZV90YXJnZXQoZSkg
			PT0gc2Nyb2xsZXIpIGVfcHJldmVudERlZmF1bHQoZSk7IHJldHVybjt9CgogICAgICBpZiAoIWZv
			Y3VzZWQpIG9uRm9jdXMoKTsKCiAgICAgIHZhciBub3cgPSArbmV3IERhdGU7CiAgICAgIGlmIChs
			YXN0RG91YmxlQ2xpY2sgJiYgbGFzdERvdWJsZUNsaWNrLnRpbWUgPiBub3cgLSA0MDAgJiYgcG9z
			RXEobGFzdERvdWJsZUNsaWNrLnBvcywgc3RhcnQpKSB7CiAgICAgICAgZV9wcmV2ZW50RGVmYXVs
			dChlKTsKICAgICAgICBzZXRUaW1lb3V0KGZvY3VzSW5wdXQsIDIwKTsKICAgICAgICByZXR1cm4g
			c2VsZWN0TGluZShzdGFydC5saW5lKTsKICAgICAgfSBlbHNlIGlmIChsYXN0Q2xpY2sgJiYgbGFz
			dENsaWNrLnRpbWUgPiBub3cgLSA0MDAgJiYgcG9zRXEobGFzdENsaWNrLnBvcywgc3RhcnQpKSB7
			CiAgICAgICAgbGFzdERvdWJsZUNsaWNrID0ge3RpbWU6IG5vdywgcG9zOiBzdGFydH07CiAgICAg
			ICAgZV9wcmV2ZW50RGVmYXVsdChlKTsKICAgICAgICByZXR1cm4gc2VsZWN0V29yZEF0KHN0YXJ0
			KTsKICAgICAgfSBlbHNlIHsgbGFzdENsaWNrID0ge3RpbWU6IG5vdywgcG9zOiBzdGFydH07IH0K
			CiAgICAgIHZhciBsYXN0ID0gc3RhcnQsIGdvaW5nOwogICAgICBpZiAoZHJhZ0FuZERyb3AgJiYg
			IW9wdGlvbnMucmVhZE9ubHkgJiYgIXBvc0VxKHNlbC5mcm9tLCBzZWwudG8pICYmCiAgICAgICAg
			ICAhcG9zTGVzcyhzdGFydCwgc2VsLmZyb20pICYmICFwb3NMZXNzKHNlbC50bywgc3RhcnQpKSB7
			CiAgICAgICAgLy8gTGV0IHRoZSBkcmFnIGhhbmRsZXIgaGFuZGxlIHRoaXMuCiAgICAgICAgaWYg
			KHdlYmtpdCkgbGluZVNwYWNlLmRyYWdnYWJsZSA9IHRydWU7CiAgICAgICAgdmFyIHVwID0gY29u
			bmVjdCh0YXJnZXREb2N1bWVudCwgIm1vdXNldXAiLCBvcGVyYXRpb24oZnVuY3Rpb24oZTIpIHsK
			ICAgICAgICAgIGlmICh3ZWJraXQpIGxpbmVTcGFjZS5kcmFnZ2FibGUgPSBmYWxzZTsKICAgICAg
			ICAgIGRyYWdnaW5nVGV4dCA9IGZhbHNlOwogICAgICAgICAgdXAoKTsKICAgICAgICAgIGlmIChN
			YXRoLmFicyhlLmNsaWVudFggLSBlMi5jbGllbnRYKSArIE1hdGguYWJzKGUuY2xpZW50WSAtIGUy
			LmNsaWVudFkpIDwgMTApIHsKICAgICAgICAgICAgZV9wcmV2ZW50RGVmYXVsdChlMik7CiAgICAg
			ICAgICAgIHNldEN1cnNvcihzdGFydC5saW5lLCBzdGFydC5jaCwgdHJ1ZSk7CiAgICAgICAgICAg
			IGZvY3VzSW5wdXQoKTsKICAgICAgICAgIH0KICAgICAgICB9KSwgdHJ1ZSk7CiAgICAgICAgZHJh
			Z2dpbmdUZXh0ID0gdHJ1ZTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZV9wcmV2ZW50
			RGVmYXVsdChlKTsKICAgICAgc2V0Q3Vyc29yKHN0YXJ0LmxpbmUsIHN0YXJ0LmNoLCB0cnVlKTsK
			CiAgICAgIGZ1bmN0aW9uIGV4dGVuZChlKSB7CiAgICAgICAgdmFyIGN1ciA9IHBvc0Zyb21Nb3Vz
			ZShlLCB0cnVlKTsKICAgICAgICBpZiAoY3VyICYmICFwb3NFcShjdXIsIGxhc3QpKSB7CiAgICAg
			ICAgICBpZiAoIWZvY3VzZWQpIG9uRm9jdXMoKTsKICAgICAgICAgIGxhc3QgPSBjdXI7CiAgICAg
			ICAgICBzZXRTZWxlY3Rpb25Vc2VyKHN0YXJ0LCBjdXIpOwogICAgICAgICAgdXBkYXRlSW5wdXQg
			PSBmYWxzZTsKICAgICAgICAgIHZhciB2aXNpYmxlID0gdmlzaWJsZUxpbmVzKCk7CiAgICAgICAg
			ICBpZiAoY3VyLmxpbmUgPj0gdmlzaWJsZS50byB8fCBjdXIubGluZSA8IHZpc2libGUuZnJvbSkK
			ICAgICAgICAgICAgZ29pbmcgPSBzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpe2V4dGVu
			ZChlKTt9KSwgMTUwKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBtb3ZlID0gY29ubmVj
			dCh0YXJnZXREb2N1bWVudCwgIm1vdXNlbW92ZSIsIG9wZXJhdGlvbihmdW5jdGlvbihlKSB7CiAg
			ICAgICAgY2xlYXJUaW1lb3V0KGdvaW5nKTsKICAgICAgICBlX3ByZXZlbnREZWZhdWx0KGUpOwog
			ICAgICAgIGV4dGVuZChlKTsKICAgICAgfSksIHRydWUpOwogICAgICB2YXIgdXAgPSBjb25uZWN0
			KHRhcmdldERvY3VtZW50LCAibW91c2V1cCIsIG9wZXJhdGlvbihmdW5jdGlvbihlKSB7CiAgICAg
			ICAgY2xlYXJUaW1lb3V0KGdvaW5nKTsKICAgICAgICB2YXIgY3VyID0gcG9zRnJvbU1vdXNlKGUp
			OwogICAgICAgIGlmIChjdXIpIHNldFNlbGVjdGlvblVzZXIoc3RhcnQsIGN1cik7CiAgICAgICAg
			ZV9wcmV2ZW50RGVmYXVsdChlKTsKICAgICAgICBmb2N1c0lucHV0KCk7CiAgICAgICAgdXBkYXRl
			SW5wdXQgPSB0cnVlOwogICAgICAgIG1vdmUoKTsgdXAoKTsKICAgICAgfSksIHRydWUpOwogICAg
			fQogICAgZnVuY3Rpb24gb25Eb3VibGVDbGljayhlKSB7CiAgICAgIGZvciAodmFyIG4gPSBlX3Rh
			cmdldChlKTsgbiAhPSB3cmFwcGVyOyBuID0gbi5wYXJlbnROb2RlKQogICAgICAgIGlmIChuLnBh
			cmVudE5vZGUgPT0gZ3V0dGVyVGV4dCkgcmV0dXJuIGVfcHJldmVudERlZmF1bHQoZSk7CiAgICAg
			IHZhciBzdGFydCA9IHBvc0Zyb21Nb3VzZShlKTsKICAgICAgaWYgKCFzdGFydCkgcmV0dXJuOwog
			ICAgICBsYXN0RG91YmxlQ2xpY2sgPSB7dGltZTogK25ldyBEYXRlLCBwb3M6IHN0YXJ0fTsKICAg
			ICAgZV9wcmV2ZW50RGVmYXVsdChlKTsKICAgICAgc2VsZWN0V29yZEF0KHN0YXJ0KTsKICAgIH0K
			ICAgIGZ1bmN0aW9uIG9uRHJvcChlKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAg
			dmFyIHBvcyA9IHBvc0Zyb21Nb3VzZShlLCB0cnVlKSwgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5m
			aWxlczsKICAgICAgaWYgKCFwb3MgfHwgb3B0aW9ucy5yZWFkT25seSkgcmV0dXJuOwogICAgICBp
			ZiAoZmlsZXMgJiYgZmlsZXMubGVuZ3RoICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5G
			aWxlKSB7CiAgICAgICAgZnVuY3Rpb24gbG9hZEZpbGUoZmlsZSwgaSkgewogICAgICAgICAgdmFy
			IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyOwogICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0
			aW9uKCkgewogICAgICAgICAgICB0ZXh0W2ldID0gcmVhZGVyLnJlc3VsdDsKICAgICAgICAgICAg
			aWYgKCsrcmVhZCA9PSBuKSB7CgkgICAgICBwb3MgPSBjbGlwUG9zKHBvcyk7CgkgICAgICBvcGVy
			YXRpb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgZW5kID0gcmVwbGFjZVJhbmdl
			KHRleHQuam9pbigiIiksIHBvcywgcG9zKTsKICAgICAgICAgICAgICAgIHNldFNlbGVjdGlvblVz
			ZXIocG9zLCBlbmQpOwogICAgICAgICAgICAgIH0pKCk7CgkgICAgfQogICAgICAgICAgfTsKICAg
			ICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpOwogICAgICAgIH0KICAgICAgICB2YXIgbiA9
			IGZpbGVzLmxlbmd0aCwgdGV4dCA9IEFycmF5KG4pLCByZWFkID0gMDsKICAgICAgICBmb3IgKHZh
			ciBpID0gMDsgaSA8IG47ICsraSkgbG9hZEZpbGUoZmlsZXNbaV0sIGkpOwogICAgICB9CiAgICAg
			IGVsc2UgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgdGV4dCA9IGUuZGF0YVRyYW5zZmVy
			LmdldERhdGEoIlRleHQiKTsKICAgICAgICAgIGlmICh0ZXh0KSB7CiAgICAgICAgICAgIHZhciBj
			dXJGcm9tID0gc2VsLmZyb20sIGN1clRvID0gc2VsLnRvOwogICAgICAgICAgICBzZXRTZWxlY3Rp
			b25Vc2VyKHBvcywgcG9zKTsKICAgICAgICAgICAgaWYgKGRyYWdnaW5nVGV4dCkgcmVwbGFjZVJh
			bmdlKCIiLCBjdXJGcm9tLCBjdXJUbyk7CiAgICAgICAgICAgIHJlcGxhY2VTZWxlY3Rpb24odGV4
			dCk7CgkgICAgZm9jdXNJbnB1dCgpOwoJICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoKGUpe30K
			ICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZSkgewogICAgICB2YXIgdHh0
			ID0gZ2V0U2VsZWN0aW9uKCk7CiAgICAgIC8vIERpc2FibGVkIHVudGlsIGZ1cnRoZXIgbm90aWNl
			LiBEb2Vzbid0IHdvcmsgb24gbW9zdCBicm93c2VycywKICAgICAgLy8gYW5kIGNyYXNoZXMgU2Fm
			YXJpIChpc3N1ZSAjMzMyKS4KICAgICAgLy9odG1sRXNjYXBlKHR4dCk7CiAgICAgIC8vZS5kYXRh
			VHJhbnNmZXIuc2V0RHJhZ0ltYWdlKGVzY2FwZUVsZW1lbnQsIDAsIDApOwogICAgICBlLmRhdGFU
			cmFuc2Zlci5zZXREYXRhKCJUZXh0IiwgdHh0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBkb0hhbmRs
			ZUJpbmRpbmcoYm91bmQsIGRyb3BTaGlmdCkgewogICAgICBpZiAodHlwZW9mIGJvdW5kID09ICJz
			dHJpbmciKSB7CiAgICAgICAgYm91bmQgPSBjb21tYW5kc1tib3VuZF07CiAgICAgICAgaWYgKCFi
			b3VuZCkgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHZhciBwcmV2U2hpZnQgPSBzaGlmdFNl
			bGVjdGluZzsKICAgICAgdHJ5IHsKICAgICAgICBpZiAob3B0aW9ucy5yZWFkT25seSkgc3VwcHJl
			c3NFZGl0cyA9IHRydWU7CiAgICAgICAgaWYgKGRyb3BTaGlmdCkgc2hpZnRTZWxlY3RpbmcgPSBu
			dWxsOwogICAgICAgIGJvdW5kKGluc3RhbmNlKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAg
			aWYgKGUgIT0gUGFzcykgdGhyb3cgZTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZmlu
			YWxseSB7CiAgICAgICAgc2hpZnRTZWxlY3RpbmcgPSBwcmV2U2hpZnQ7CiAgICAgICAgc3VwcHJl
			c3NFZGl0cyA9IGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVu
			Y3Rpb24gaGFuZGxlS2V5QmluZGluZyhlKSB7CiAgICAgIC8vIEhhbmRsZSBhdXRvIGtleW1hcCB0
			cmFuc2l0aW9ucwogICAgICB2YXIgc3RhcnRNYXAgPSBnZXRLZXlNYXAob3B0aW9ucy5rZXlNYXAp
			LCBuZXh0ID0gc3RhcnRNYXAuYXV0bzsKICAgICAgY2xlYXJUaW1lb3V0KG1heWJlVHJhbnNpdGlv
			bik7CiAgICAgIGlmIChuZXh0ICYmICFpc01vZGlmaWVyS2V5KGUpKSBtYXliZVRyYW5zaXRpb24g
			PSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChnZXRLZXlNYXAob3B0aW9ucy5r
			ZXlNYXApID09IHN0YXJ0TWFwKSB7CiAgICAgICAgICBvcHRpb25zLmtleU1hcCA9IChuZXh0LmNh
			bGwgPyBuZXh0LmNhbGwobnVsbCwgaW5zdGFuY2UpIDogbmV4dCk7CiAgICAgICAgfQogICAgICB9
			LCA1MCk7CgogICAgICB2YXIgbmFtZSA9IGtleU5hbWVzW2VfcHJvcChlLCAia2V5Q29kZSIpXSwg
			aGFuZGxlZCA9IGZhbHNlOwogICAgICBpZiAobmFtZSA9PSBudWxsIHx8IGUuYWx0R3JhcGhLZXkp
			IHJldHVybiBmYWxzZTsKICAgICAgaWYgKGVfcHJvcChlLCAiYWx0S2V5IikpIG5hbWUgPSAiQWx0
			LSIgKyBuYW1lOwogICAgICBpZiAoZV9wcm9wKGUsICJjdHJsS2V5IikpIG5hbWUgPSAiQ3RybC0i
			ICsgbmFtZTsKICAgICAgaWYgKGVfcHJvcChlLCAibWV0YUtleSIpKSBuYW1lID0gIkNtZC0iICsg
			bmFtZTsKCiAgICAgIGlmIChlX3Byb3AoZSwgInNoaWZ0S2V5IikpCiAgICAgICAgaGFuZGxlZCA9
			IGxvb2t1cEtleSgiU2hpZnQtIiArIG5hbWUsIG9wdGlvbnMuZXh0cmFLZXlzLCBvcHRpb25zLmtl
			eU1hcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGIpIHtyZXR1cm4gZG9I
			YW5kbGVCaW5kaW5nKGIsIHRydWUpO30pOwogICAgICBpZiAoIWhhbmRsZWQpCiAgICAgICAgaGFu
			ZGxlZCA9IGxvb2t1cEtleShuYW1lLCBvcHRpb25zLmV4dHJhS2V5cywgb3B0aW9ucy5rZXlNYXAs
			IGRvSGFuZGxlQmluZGluZyk7CgogICAgICBpZiAoaGFuZGxlZCkgZV9wcmV2ZW50RGVmYXVsdChl
			KTsKICAgICAgcmV0dXJuIGhhbmRsZWQ7CiAgICB9CiAgICBmdW5jdGlvbiBoYW5kbGVDaGFyQmlu
			ZGluZyhlLCBjaCkgewogICAgICB2YXIgaGFuZGxlZCA9IGxvb2t1cEtleSgiJyIgKyBjaCArICIn
			Iiwgb3B0aW9ucy5leHRyYUtleXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlv
			bnMua2V5TWFwLCBkb0hhbmRsZUJpbmRpbmcpOwogICAgICBpZiAoaGFuZGxlZCkgZV9wcmV2ZW50
			RGVmYXVsdChlKTsKICAgICAgcmV0dXJuIGhhbmRsZWQ7CiAgICB9CgogICAgdmFyIGxhc3RTdG9w
			cGVkS2V5ID0gbnVsbCwgbWF5YmVUcmFuc2l0aW9uOwogICAgZnVuY3Rpb24gb25LZXlEb3duKGUp
			IHsKICAgICAgaWYgKCFmb2N1c2VkKSBvbkZvY3VzKCk7CiAgICAgIGlmIChpZSAmJiBlLmtleUNv
			ZGUgPT0gMjcpIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9CiAgICAgIGlmIChwb2xsaW5nRmFz
			dCkgeyBpZiAocmVhZElucHV0KCkpIHBvbGxpbmdGYXN0ID0gZmFsc2U7IH0KICAgICAgaWYgKG9w
			dGlvbnMub25LZXlFdmVudCAmJiBvcHRpb25zLm9uS2V5RXZlbnQoaW5zdGFuY2UsIGFkZFN0b3Ao
			ZSkpKSByZXR1cm47CiAgICAgIHZhciBjb2RlID0gZV9wcm9wKGUsICJrZXlDb2RlIik7CiAgICAg
			IC8vIElFIGRvZXMgc3RyYW5nZSB0aGluZ3Mgd2l0aCBlc2NhcGUuCiAgICAgIHNldFNoaWZ0KGNv
			ZGUgPT0gMTYgfHwgZV9wcm9wKGUsICJzaGlmdEtleSIpKTsKICAgICAgLy8gRmlyc3QgZ2l2ZSBv
			bktleUV2ZW50IG9wdGlvbiBhIGNoYW5jZSB0byBoYW5kbGUgdGhpcy4KICAgICAgdmFyIGhhbmRs
			ZWQgPSBoYW5kbGVLZXlCaW5kaW5nKGUpOwogICAgICBpZiAod2luZG93Lm9wZXJhKSB7CiAgICAg
			ICAgbGFzdFN0b3BwZWRLZXkgPSBoYW5kbGVkID8gY29kZSA6IG51bGw7CiAgICAgICAgLy8gT3Bl
			cmEgaGFzIG5vIGN1dCBldmVudC4uLiB3ZSB0cnkgdG8gYXQgbGVhc3QgY2F0Y2ggdGhlIGtleSBj
			b21ibwogICAgICAgIGlmICghaGFuZGxlZCAmJiBjb2RlID09IDg4ICYmIGVfcHJvcChlLCBtYWMg
			PyAibWV0YUtleSIgOiAiY3RybEtleSIpKQogICAgICAgICAgcmVwbGFjZVNlbGVjdGlvbigiIik7
			CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIG9uS2V5UHJlc3MoZSkgewogICAgICBpZiAocG9s
			bGluZ0Zhc3QpIHJlYWRJbnB1dCgpOwogICAgICBpZiAob3B0aW9ucy5vbktleUV2ZW50ICYmIG9w
			dGlvbnMub25LZXlFdmVudChpbnN0YW5jZSwgYWRkU3RvcChlKSkpIHJldHVybjsKICAgICAgdmFy
			IGtleUNvZGUgPSBlX3Byb3AoZSwgImtleUNvZGUiKSwgY2hhckNvZGUgPSBlX3Byb3AoZSwgImNo
			YXJDb2RlIik7CiAgICAgIGlmICh3aW5kb3cub3BlcmEgJiYga2V5Q29kZSA9PSBsYXN0U3RvcHBl
			ZEtleSkge2xhc3RTdG9wcGVkS2V5ID0gbnVsbDsgZV9wcmV2ZW50RGVmYXVsdChlKTsgcmV0dXJu
			O30KICAgICAgaWYgKHdpbmRvdy5vcGVyYSAmJiAhZS53aGljaCAmJiBoYW5kbGVLZXlCaW5kaW5n
			KGUpKSByZXR1cm47CiAgICAgIHZhciBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUg
			PT0gbnVsbCA/IGtleUNvZGUgOiBjaGFyQ29kZSk7CiAgICAgIGlmIChvcHRpb25zLmVsZWN0cmlj
			Q2hhcnMgJiYgbW9kZS5lbGVjdHJpY0NoYXJzICYmIG9wdGlvbnMuc21hcnRJbmRlbnQgJiYgIW9w
			dGlvbnMucmVhZE9ubHkpIHsKICAgICAgICBpZiAobW9kZS5lbGVjdHJpY0NoYXJzLmluZGV4T2Yo
			Y2gpID4gLTEpCiAgICAgICAgICBzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpIHtpbmRl
			bnRMaW5lKHNlbC50by5saW5lLCAic21hcnQiKTt9KSwgNzUpOwogICAgICB9CiAgICAgIGlmICho
			YW5kbGVDaGFyQmluZGluZyhlLCBjaCkpIHJldHVybjsKICAgICAgZmFzdFBvbGwoKTsKICAgIH0K
			ICAgIGZ1bmN0aW9uIG9uS2V5VXAoZSkgewogICAgICBpZiAob3B0aW9ucy5vbktleUV2ZW50ICYm
			IG9wdGlvbnMub25LZXlFdmVudChpbnN0YW5jZSwgYWRkU3RvcChlKSkpIHJldHVybjsKICAgICAg
			aWYgKGVfcHJvcChlLCAia2V5Q29kZSIpID09IDE2KSBzaGlmdFNlbGVjdGluZyA9IG51bGw7CiAg
			ICB9CgogICAgZnVuY3Rpb24gb25Gb2N1cygpIHsKICAgICAgaWYgKG9wdGlvbnMucmVhZE9ubHkg
			PT0gIm5vY3Vyc29yIikgcmV0dXJuOwogICAgICBpZiAoIWZvY3VzZWQpIHsKICAgICAgICBpZiAo
			b3B0aW9ucy5vbkZvY3VzKSBvcHRpb25zLm9uRm9jdXMoaW5zdGFuY2UpOwogICAgICAgIGZvY3Vz
			ZWQgPSB0cnVlOwogICAgICAgIGlmICh3cmFwcGVyLmNsYXNzTmFtZS5zZWFyY2goL1xiQ29kZU1p
			cnJvci1mb2N1c2VkXGIvKSA9PSAtMSkKICAgICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lICs9ICIg
			Q29kZU1pcnJvci1mb2N1c2VkIjsKICAgICAgICBpZiAoIWxlYXZlSW5wdXRBbG9uZSkgcmVzZXRJ
			bnB1dCh0cnVlKTsKICAgICAgfQogICAgICBzbG93UG9sbCgpOwogICAgICByZXN0YXJ0Qmxpbmso
			KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgaWYgKGZvY3VzZWQpIHsKICAg
			ICAgICBpZiAob3B0aW9ucy5vbkJsdXIpIG9wdGlvbnMub25CbHVyKGluc3RhbmNlKTsKICAgICAg
			ICBmb2N1c2VkID0gZmFsc2U7CiAgICAgICAgaWYgKGJyYWNrZXRIaWdobGlnaHRlZCkKICAgICAg
			ICAgIG9wZXJhdGlvbihmdW5jdGlvbigpewogICAgICAgICAgICBpZiAoYnJhY2tldEhpZ2hsaWdo
			dGVkKSB7IGJyYWNrZXRIaWdobGlnaHRlZCgpOyBicmFja2V0SGlnaGxpZ2h0ZWQgPSBudWxsOyB9
			CiAgICAgICAgICB9KSgpOwogICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gd3JhcHBlci5jbGFz
			c05hbWUucmVwbGFjZSgiIENvZGVNaXJyb3ItZm9jdXNlZCIsICIiKTsKICAgICAgfQogICAgICBj
			bGVhckludGVydmFsKGJsaW5rZXIpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge2lmICgh
			Zm9jdXNlZCkgc2hpZnRTZWxlY3RpbmcgPSBudWxsO30sIDE1MCk7CiAgICB9CgogICAgLy8gUmVw
			bGFjZSB0aGUgcmFuZ2UgZnJvbSBmcm9tIHRvIHRvIGJ5IHRoZSBzdHJpbmdzIGluIG5ld1RleHQu
			CiAgICAvLyBBZnRlcndhcmRzLCBzZXQgdGhlIHNlbGVjdGlvbiB0byBzZWxGcm9tLCBzZWxUby4K
			ICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmVzKGZyb20sIHRvLCBuZXdUZXh0LCBzZWxGcm9tLCBzZWxU
			bykgewogICAgICBpZiAoc3VwcHJlc3NFZGl0cykgcmV0dXJuOwogICAgICBpZiAoaGlzdG9yeSkg
			ewogICAgICAgIHZhciBvbGQgPSBbXTsKICAgICAgICBkb2MuaXRlcihmcm9tLmxpbmUsIHRvLmxp
			bmUgKyAxLCBmdW5jdGlvbihsaW5lKSB7IG9sZC5wdXNoKGxpbmUudGV4dCk7IH0pOwogICAgICAg
			IGhpc3RvcnkuYWRkQ2hhbmdlKGZyb20ubGluZSwgbmV3VGV4dC5sZW5ndGgsIG9sZCk7CiAgICAg
			ICAgd2hpbGUgKGhpc3RvcnkuZG9uZS5sZW5ndGggPiBvcHRpb25zLnVuZG9EZXB0aCkgaGlzdG9y
			eS5kb25lLnNoaWZ0KCk7CiAgICAgIH0KICAgICAgdXBkYXRlTGluZXNOb1VuZG8oZnJvbSwgdG8s
			IG5ld1RleHQsIHNlbEZyb20sIHNlbFRvKTsKICAgIH0KICAgIGZ1bmN0aW9uIHVucmVkb0hlbHBl
			cihmcm9tLCB0bykgewogICAgICBpZiAoIWZyb20ubGVuZ3RoKSByZXR1cm47CiAgICAgIHZhciBz
			ZXQgPSBmcm9tLnBvcCgpLCBvdXQgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IHNldC5sZW5ndGgg
			LSAxOyBpID49IDA7IGkgLT0gMSkgewogICAgICAgIHZhciBjaGFuZ2UgPSBzZXRbaV07CiAgICAg
			ICAgdmFyIHJlcGxhY2VkID0gW10sIGVuZCA9IGNoYW5nZS5zdGFydCArIGNoYW5nZS5hZGRlZDsK
			ICAgICAgICBkb2MuaXRlcihjaGFuZ2Uuc3RhcnQsIGVuZCwgZnVuY3Rpb24obGluZSkgeyByZXBs
			YWNlZC5wdXNoKGxpbmUudGV4dCk7IH0pOwogICAgICAgIG91dC5wdXNoKHtzdGFydDogY2hhbmdl
			LnN0YXJ0LCBhZGRlZDogY2hhbmdlLm9sZC5sZW5ndGgsIG9sZDogcmVwbGFjZWR9KTsKICAgICAg
			ICB2YXIgcG9zID0gY2xpcFBvcyh7bGluZTogY2hhbmdlLnN0YXJ0ICsgY2hhbmdlLm9sZC5sZW5n
			dGggLSAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICBjaDogZWRpdEVuZChyZXBsYWNlZFty
			ZXBsYWNlZC5sZW5ndGgtMV0sIGNoYW5nZS5vbGRbY2hhbmdlLm9sZC5sZW5ndGgtMV0pfSk7CiAg
			ICAgICAgdXBkYXRlTGluZXNOb1VuZG8oe2xpbmU6IGNoYW5nZS5zdGFydCwgY2g6IDB9LCB7bGlu
			ZTogZW5kIC0gMSwgY2g6IGdldExpbmUoZW5kLTEpLnRleHQubGVuZ3RofSwgY2hhbmdlLm9sZCwg
			cG9zLCBwb3MpOwogICAgICB9CiAgICAgIHVwZGF0ZUlucHV0ID0gdHJ1ZTsKICAgICAgdG8ucHVz
			aChvdXQpOwogICAgfQogICAgZnVuY3Rpb24gdW5kbygpIHt1bnJlZG9IZWxwZXIoaGlzdG9yeS5k
			b25lLCBoaXN0b3J5LnVuZG9uZSk7fQogICAgZnVuY3Rpb24gcmVkbygpIHt1bnJlZG9IZWxwZXIo
			aGlzdG9yeS51bmRvbmUsIGhpc3RvcnkuZG9uZSk7fQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmVz
			Tm9VbmRvKGZyb20sIHRvLCBuZXdUZXh0LCBzZWxGcm9tLCBzZWxUbykgewogICAgICBpZiAoc3Vw
			cHJlc3NFZGl0cykgcmV0dXJuOwogICAgICB2YXIgcmVjb21wdXRlTWF4TGVuZ3RoID0gZmFsc2Us
			IG1heExpbmVMZW5ndGggPSBtYXhMaW5lLmxlbmd0aDsKICAgICAgaWYgKCFvcHRpb25zLmxpbmVX
			cmFwcGluZykKICAgICAgICBkb2MuaXRlcihmcm9tLmxpbmUsIHRvLmxpbmUsIGZ1bmN0aW9uKGxp
			bmUpIHsKICAgICAgICAgIGlmIChsaW5lLnRleHQubGVuZ3RoID09IG1heExpbmVMZW5ndGgpIHty
			ZWNvbXB1dGVNYXhMZW5ndGggPSB0cnVlOyByZXR1cm4gdHJ1ZTt9CiAgICAgICAgfSk7CiAgICAg
			IGlmIChmcm9tLmxpbmUgIT0gdG8ubGluZSB8fCBuZXdUZXh0Lmxlbmd0aCA+IDEpIGd1dHRlckRp
			cnR5ID0gdHJ1ZTsKCiAgICAgIHZhciBubGluZXMgPSB0by5saW5lIC0gZnJvbS5saW5lLCBmaXJz
			dExpbmUgPSBnZXRMaW5lKGZyb20ubGluZSksIGxhc3RMaW5lID0gZ2V0TGluZSh0by5saW5lKTsK
			ICAgICAgLy8gRmlyc3QgYWRqdXN0IHRoZSBsaW5lIHN0cnVjdHVyZSwgdGFraW5nIHNvbWUgY2Fy
			ZSB0byBsZWF2ZSBoaWdobGlnaHRpbmcgaW50YWN0LgogICAgICBpZiAoZnJvbS5jaCA9PSAwICYm
			IHRvLmNoID09IDAgJiYgbmV3VGV4dFtuZXdUZXh0Lmxlbmd0aCAtIDFdID09ICIiKSB7CiAgICAg
			ICAgLy8gVGhpcyBpcyBhIHdob2xlLWxpbmUgcmVwbGFjZS4gVHJlYXRlZCBzcGVjaWFsbHkgdG8g
			bWFrZQogICAgICAgIC8vIHN1cmUgbGluZSBvYmplY3RzIG1vdmUgdGhlIHdheSB0aGV5IGFyZSBz
			dXBwb3NlZCB0by4KICAgICAgICB2YXIgYWRkZWQgPSBbXSwgcHJldkxpbmUgPSBudWxsOwogICAg
			ICAgIGlmIChmcm9tLmxpbmUpIHsKICAgICAgICAgIHByZXZMaW5lID0gZ2V0TGluZShmcm9tLmxp
			bmUgLSAxKTsKICAgICAgICAgIHByZXZMaW5lLmZpeE1hcmtFbmRzKGxhc3RMaW5lKTsKICAgICAg
			ICB9IGVsc2UgbGFzdExpbmUuZml4TWFya1N0YXJ0cygpOwogICAgICAgIGZvciAodmFyIGkgPSAw
			LCBlID0gbmV3VGV4dC5sZW5ndGggLSAxOyBpIDwgZTsgKytpKQogICAgICAgICAgYWRkZWQucHVz
			aChMaW5lLmluaGVyaXRNYXJrcyhuZXdUZXh0W2ldLCBwcmV2TGluZSkpOwogICAgICAgIGlmIChu
			bGluZXMpIGRvYy5yZW1vdmUoZnJvbS5saW5lLCBubGluZXMsIGNhbGxiYWNrcyk7CiAgICAgICAg
			aWYgKGFkZGVkLmxlbmd0aCkgZG9jLmluc2VydChmcm9tLmxpbmUsIGFkZGVkKTsKICAgICAgfSBl
			bHNlIGlmIChmaXJzdExpbmUgPT0gbGFzdExpbmUpIHsKICAgICAgICBpZiAobmV3VGV4dC5sZW5n
			dGggPT0gMSkKICAgICAgICAgIGZpcnN0TGluZS5yZXBsYWNlKGZyb20uY2gsIHRvLmNoLCBuZXdU
			ZXh0WzBdKTsKICAgICAgICBlbHNlIHsKICAgICAgICAgIGxhc3RMaW5lID0gZmlyc3RMaW5lLnNw
			bGl0KHRvLmNoLCBuZXdUZXh0W25ld1RleHQubGVuZ3RoLTFdKTsKICAgICAgICAgIGZpcnN0TGlu
			ZS5yZXBsYWNlKGZyb20uY2gsIG51bGwsIG5ld1RleHRbMF0pOwogICAgICAgICAgZmlyc3RMaW5l
			LmZpeE1hcmtFbmRzKGxhc3RMaW5lKTsKICAgICAgICAgIHZhciBhZGRlZCA9IFtdOwogICAgICAg
			ICAgZm9yICh2YXIgaSA9IDEsIGUgPSBuZXdUZXh0Lmxlbmd0aCAtIDE7IGkgPCBlOyArK2kpCiAg
			ICAgICAgICAgIGFkZGVkLnB1c2goTGluZS5pbmhlcml0TWFya3MobmV3VGV4dFtpXSwgZmlyc3RM
			aW5lKSk7CiAgICAgICAgICBhZGRlZC5wdXNoKGxhc3RMaW5lKTsKICAgICAgICAgIGRvYy5pbnNl
			cnQoZnJvbS5saW5lICsgMSwgYWRkZWQpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChuZXdU
			ZXh0Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgZmlyc3RMaW5lLnJlcGxhY2UoZnJvbS5jaCwgbnVs
			bCwgbmV3VGV4dFswXSk7CiAgICAgICAgbGFzdExpbmUucmVwbGFjZShudWxsLCB0by5jaCwgIiIp
			OwogICAgICAgIGZpcnN0TGluZS5hcHBlbmQobGFzdExpbmUpOwogICAgICAgIGRvYy5yZW1vdmUo
			ZnJvbS5saW5lICsgMSwgbmxpbmVzLCBjYWxsYmFja3MpOwogICAgICB9IGVsc2UgewogICAgICAg
			IHZhciBhZGRlZCA9IFtdOwogICAgICAgIGZpcnN0TGluZS5yZXBsYWNlKGZyb20uY2gsIG51bGws
			IG5ld1RleHRbMF0pOwogICAgICAgIGxhc3RMaW5lLnJlcGxhY2UobnVsbCwgdG8uY2gsIG5ld1Rl
			eHRbbmV3VGV4dC5sZW5ndGgtMV0pOwogICAgICAgIGZpcnN0TGluZS5maXhNYXJrRW5kcyhsYXN0
			TGluZSk7CiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGUgPSBuZXdUZXh0Lmxlbmd0aCAtIDE7IGkg
			PCBlOyArK2kpCiAgICAgICAgICBhZGRlZC5wdXNoKExpbmUuaW5oZXJpdE1hcmtzKG5ld1RleHRb
			aV0sIGZpcnN0TGluZSkpOwogICAgICAgIGlmIChubGluZXMgPiAxKSBkb2MucmVtb3ZlKGZyb20u
			bGluZSArIDEsIG5saW5lcyAtIDEsIGNhbGxiYWNrcyk7CiAgICAgICAgZG9jLmluc2VydChmcm9t
			LmxpbmUgKyAxLCBhZGRlZCk7CiAgICAgIH0KICAgICAgaWYgKG9wdGlvbnMubGluZVdyYXBwaW5n
			KSB7CiAgICAgICAgdmFyIHBlckxpbmUgPSBzY3JvbGxlci5jbGllbnRXaWR0aCAvIGNoYXJXaWR0
			aCgpIC0gMzsKICAgICAgICBkb2MuaXRlcihmcm9tLmxpbmUsIGZyb20ubGluZSArIG5ld1RleHQu
			bGVuZ3RoLCBmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICBpZiAobGluZS5oaWRkZW4pIHJldHVy
			bjsKICAgICAgICAgIHZhciBndWVzcyA9IE1hdGguY2VpbChsaW5lLnRleHQubGVuZ3RoIC8gcGVy
			TGluZSkgfHwgMTsKICAgICAgICAgIGlmIChndWVzcyAhPSBsaW5lLmhlaWdodCkgdXBkYXRlTGlu
			ZUhlaWdodChsaW5lLCBndWVzcyk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAg
			ZG9jLml0ZXIoZnJvbS5saW5lLCBpICsgbmV3VGV4dC5sZW5ndGgsIGZ1bmN0aW9uKGxpbmUpIHsK
			ICAgICAgICAgIHZhciBsID0gbGluZS50ZXh0OwogICAgICAgICAgaWYgKGwubGVuZ3RoID4gbWF4
			TGluZUxlbmd0aCkgewogICAgICAgICAgICBtYXhMaW5lID0gbDsgbWF4TGluZUxlbmd0aCA9IGwu
			bGVuZ3RoOyBtYXhXaWR0aCA9IG51bGw7CiAgICAgICAgICAgIHJlY29tcHV0ZU1heExlbmd0aCA9
			IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGlmIChyZWNvbXB1dGVNYXhM
			ZW5ndGgpIHsKICAgICAgICAgIG1heExpbmVMZW5ndGggPSAwOyBtYXhMaW5lID0gIiI7IG1heFdp
			ZHRoID0gbnVsbDsKICAgICAgICAgIGRvYy5pdGVyKDAsIGRvYy5zaXplLCBmdW5jdGlvbihsaW5l
			KSB7CiAgICAgICAgICAgIHZhciBsID0gbGluZS50ZXh0OwogICAgICAgICAgICBpZiAobC5sZW5n
			dGggPiBtYXhMaW5lTGVuZ3RoKSB7CiAgICAgICAgICAgICAgbWF4TGluZUxlbmd0aCA9IGwubGVu
			Z3RoOyBtYXhMaW5lID0gbDsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQog
			ICAgICB9CgogICAgICAvLyBBZGQgdGhlc2UgbGluZXMgdG8gdGhlIHdvcmsgYXJyYXksIHNvIHRo
			YXQgdGhleSB3aWxsIGJlCiAgICAgIC8vIGhpZ2hsaWdodGVkLiBBZGp1c3Qgd29yayBsaW5lcyBp
			ZiBsaW5lcyB3ZXJlIGFkZGVkL3JlbW92ZWQuCiAgICAgIHZhciBuZXdXb3JrID0gW10sIGxlbmRp
			ZmYgPSBuZXdUZXh0Lmxlbmd0aCAtIG5saW5lcyAtIDE7CiAgICAgIGZvciAodmFyIGkgPSAwLCBs
			ID0gd29yay5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgICAgICB2YXIgdGFzayA9IHdvcmtbaV07
			CiAgICAgICAgaWYgKHRhc2sgPCBmcm9tLmxpbmUpIG5ld1dvcmsucHVzaCh0YXNrKTsKICAgICAg
			ICBlbHNlIGlmICh0YXNrID4gdG8ubGluZSkgbmV3V29yay5wdXNoKHRhc2sgKyBsZW5kaWZmKTsK
			ICAgICAgfQogICAgICB2YXIgaGxFbmQgPSBmcm9tLmxpbmUgKyBNYXRoLm1pbihuZXdUZXh0Lmxl
			bmd0aCwgNTAwKTsKICAgICAgaGlnaGxpZ2h0TGluZXMoZnJvbS5saW5lLCBobEVuZCk7CiAgICAg
			IG5ld1dvcmsucHVzaChobEVuZCk7CiAgICAgIHdvcmsgPSBuZXdXb3JrOwogICAgICBzdGFydFdv
			cmtlcigxMDApOwogICAgICAvLyBSZW1lbWJlciB0aGF0IHRoZXNlIGxpbmVzIGNoYW5nZWQsIGZv
			ciB1cGRhdGluZyB0aGUgZGlzcGxheQogICAgICBjaGFuZ2VzLnB1c2goe2Zyb206IGZyb20ubGlu
			ZSwgdG86IHRvLmxpbmUgKyAxLCBkaWZmOiBsZW5kaWZmfSk7CiAgICAgIHZhciBjaGFuZ2VPYmog
			PSB7ZnJvbTogZnJvbSwgdG86IHRvLCB0ZXh0OiBuZXdUZXh0fTsKICAgICAgaWYgKHRleHRDaGFu
			Z2VkKSB7CiAgICAgICAgZm9yICh2YXIgY3VyID0gdGV4dENoYW5nZWQ7IGN1ci5uZXh0OyBjdXIg
			PSBjdXIubmV4dCkge30KICAgICAgICBjdXIubmV4dCA9IGNoYW5nZU9iajsKICAgICAgfSBlbHNl
			IHRleHRDaGFuZ2VkID0gY2hhbmdlT2JqOwoKICAgICAgLy8gVXBkYXRlIHRoZSBzZWxlY3Rpb24K
			ICAgICAgZnVuY3Rpb24gdXBkYXRlTGluZShuKSB7cmV0dXJuIG4gPD0gTWF0aC5taW4odG8ubGlu
			ZSwgdG8ubGluZSArIGxlbmRpZmYpID8gbiA6IG4gKyBsZW5kaWZmO30KICAgICAgc2V0U2VsZWN0
			aW9uKHNlbEZyb20sIHNlbFRvLCB1cGRhdGVMaW5lKHNlbC5mcm9tLmxpbmUpLCB1cGRhdGVMaW5l
			KHNlbC50by5saW5lKSk7CgogICAgICAvLyBNYWtlIHN1cmUgdGhlIHNjcm9sbC1zaXplIGRpdiBo
			YXMgdGhlIGNvcnJlY3QgaGVpZ2h0LgogICAgICBpZiAoc2Nyb2xsZXIuY2xpZW50SGVpZ2h0KQog
			ICAgICAgIGNvZGUuc3R5bGUuaGVpZ2h0ID0gKGRvYy5oZWlnaHQgKiB0ZXh0SGVpZ2h0KCkgKyAy
			ICogcGFkZGluZ1RvcCgpKSArICJweCI7CiAgICB9CgogICAgZnVuY3Rpb24gcmVwbGFjZVJhbmdl
			KGNvZGUsIGZyb20sIHRvKSB7CiAgICAgIGZyb20gPSBjbGlwUG9zKGZyb20pOwogICAgICBpZiAo
			IXRvKSB0byA9IGZyb207IGVsc2UgdG8gPSBjbGlwUG9zKHRvKTsKICAgICAgY29kZSA9IHNwbGl0
			TGluZXMoY29kZSk7CiAgICAgIGZ1bmN0aW9uIGFkanVzdFBvcyhwb3MpIHsKICAgICAgICBpZiAo
			cG9zTGVzcyhwb3MsIGZyb20pKSByZXR1cm4gcG9zOwogICAgICAgIGlmICghcG9zTGVzcyh0bywg
			cG9zKSkgcmV0dXJuIGVuZDsKICAgICAgICB2YXIgbGluZSA9IHBvcy5saW5lICsgY29kZS5sZW5n
			dGggLSAodG8ubGluZSAtIGZyb20ubGluZSkgLSAxOwogICAgICAgIHZhciBjaCA9IHBvcy5jaDsK
			ICAgICAgICBpZiAocG9zLmxpbmUgPT0gdG8ubGluZSkKICAgICAgICAgIGNoICs9IGNvZGVbY29k
			ZS5sZW5ndGgtMV0ubGVuZ3RoIC0gKHRvLmNoIC0gKHRvLmxpbmUgPT0gZnJvbS5saW5lID8gZnJv
			bS5jaCA6IDApKTsKICAgICAgICByZXR1cm4ge2xpbmU6IGxpbmUsIGNoOiBjaH07CiAgICAgIH0K
			ICAgICAgdmFyIGVuZDsKICAgICAgcmVwbGFjZVJhbmdlMShjb2RlLCBmcm9tLCB0bywgZnVuY3Rp
			b24oZW5kMSkgewogICAgICAgIGVuZCA9IGVuZDE7CiAgICAgICAgcmV0dXJuIHtmcm9tOiBhZGp1
			c3RQb3Moc2VsLmZyb20pLCB0bzogYWRqdXN0UG9zKHNlbC50byl9OwogICAgICB9KTsKICAgICAg
			cmV0dXJuIGVuZDsKICAgIH0KICAgIGZ1bmN0aW9uIHJlcGxhY2VTZWxlY3Rpb24oY29kZSwgY29s
			bGFwc2UpIHsKICAgICAgcmVwbGFjZVJhbmdlMShzcGxpdExpbmVzKGNvZGUpLCBzZWwuZnJvbSwg
			c2VsLnRvLCBmdW5jdGlvbihlbmQpIHsKICAgICAgICBpZiAoY29sbGFwc2UgPT0gImVuZCIpIHJl
			dHVybiB7ZnJvbTogZW5kLCB0bzogZW5kfTsKICAgICAgICBlbHNlIGlmIChjb2xsYXBzZSA9PSAi
			c3RhcnQiKSByZXR1cm4ge2Zyb206IHNlbC5mcm9tLCB0bzogc2VsLmZyb219OwogICAgICAgIGVs
			c2UgcmV0dXJuIHtmcm9tOiBzZWwuZnJvbSwgdG86IGVuZH07CiAgICAgIH0pOwogICAgfQogICAg
			ZnVuY3Rpb24gcmVwbGFjZVJhbmdlMShjb2RlLCBmcm9tLCB0bywgY29tcHV0ZVNlbCkgewogICAg
			ICB2YXIgZW5kY2ggPSBjb2RlLmxlbmd0aCA9PSAxID8gY29kZVswXS5sZW5ndGggKyBmcm9tLmNo
			IDogY29kZVtjb2RlLmxlbmd0aC0xXS5sZW5ndGg7CiAgICAgIHZhciBuZXdTZWwgPSBjb21wdXRl
			U2VsKHtsaW5lOiBmcm9tLmxpbmUgKyBjb2RlLmxlbmd0aCAtIDEsIGNoOiBlbmRjaH0pOwogICAg
			ICB1cGRhdGVMaW5lcyhmcm9tLCB0bywgY29kZSwgbmV3U2VsLmZyb20sIG5ld1NlbC50byk7CiAg
			ICB9CgogICAgZnVuY3Rpb24gZ2V0UmFuZ2UoZnJvbSwgdG8pIHsKICAgICAgdmFyIGwxID0gZnJv
			bS5saW5lLCBsMiA9IHRvLmxpbmU7CiAgICAgIGlmIChsMSA9PSBsMikgcmV0dXJuIGdldExpbmUo
			bDEpLnRleHQuc2xpY2UoZnJvbS5jaCwgdG8uY2gpOwogICAgICB2YXIgY29kZSA9IFtnZXRMaW5l
			KGwxKS50ZXh0LnNsaWNlKGZyb20uY2gpXTsKICAgICAgZG9jLml0ZXIobDEgKyAxLCBsMiwgZnVu
			Y3Rpb24obGluZSkgeyBjb2RlLnB1c2gobGluZS50ZXh0KTsgfSk7CiAgICAgIGNvZGUucHVzaChn
			ZXRMaW5lKGwyKS50ZXh0LnNsaWNlKDAsIHRvLmNoKSk7CiAgICAgIHJldHVybiBjb2RlLmpvaW4o
			IlxuIik7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oKSB7CiAgICAgIHJldHVybiBn
			ZXRSYW5nZShzZWwuZnJvbSwgc2VsLnRvKTsKICAgIH0KCiAgICB2YXIgcG9sbGluZ0Zhc3QgPSBm
			YWxzZTsgLy8gRW5zdXJlcyBzbG93UG9sbCBkb2Vzbid0IGNhbmNlbCBmYXN0UG9sbAogICAgZnVu
			Y3Rpb24gc2xvd1BvbGwoKSB7CiAgICAgIGlmIChwb2xsaW5nRmFzdCkgcmV0dXJuOwogICAgICBw
			b2xsLnNldChvcHRpb25zLnBvbGxJbnRlcnZhbCwgZnVuY3Rpb24oKSB7CiAgICAgICAgc3RhcnRP
			cGVyYXRpb24oKTsKICAgICAgICByZWFkSW5wdXQoKTsKICAgICAgICBpZiAoZm9jdXNlZCkgc2xv
			d1BvbGwoKTsKICAgICAgICBlbmRPcGVyYXRpb24oKTsKICAgICAgfSk7CiAgICB9CiAgICBmdW5j
			dGlvbiBmYXN0UG9sbCgpIHsKICAgICAgdmFyIG1pc3NlZCA9IGZhbHNlOwogICAgICBwb2xsaW5n
			RmFzdCA9IHRydWU7CiAgICAgIGZ1bmN0aW9uIHAoKSB7CiAgICAgICAgc3RhcnRPcGVyYXRpb24o
			KTsKICAgICAgICB2YXIgY2hhbmdlZCA9IHJlYWRJbnB1dCgpOwogICAgICAgIGlmICghY2hhbmdl
			ZCAmJiAhbWlzc2VkKSB7bWlzc2VkID0gdHJ1ZTsgcG9sbC5zZXQoNjAsIHApO30KICAgICAgICBl
			bHNlIHtwb2xsaW5nRmFzdCA9IGZhbHNlOyBzbG93UG9sbCgpO30KICAgICAgICBlbmRPcGVyYXRp
			b24oKTsKICAgICAgfQogICAgICBwb2xsLnNldCgyMCwgcCk7CiAgICB9CgogICAgLy8gUHJldmlu
			cHV0IGlzIGEgaGFjayB0byB3b3JrIHdpdGggSU1FLiBJZiB3ZSByZXNldCB0aGUgdGV4dGFyZWEK
			ICAgIC8vIG9uIGV2ZXJ5IGNoYW5nZSwgdGhhdCBicmVha3MgSU1FLiBTbyB3ZSBsb29rIGZvciBj
			aGFuZ2VzCiAgICAvLyBjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgY29udGVudCBpbnN0ZWFkLiAo
			TW9kZXJuIGJyb3dzZXJzIGhhdmUKICAgIC8vIGV2ZW50cyB0aGF0IGluZGljYXRlIElNRSB0YWtp
			bmcgcGxhY2UsIGJ1dCB0aGVzZSBhcmUgbm90IHdpZGVseQogICAgLy8gc3VwcG9ydGVkIG9yIGNv
			bXBhdGlibGUgZW5vdWdoIHlldCB0byByZWx5IG9uLikKICAgIHZhciBwcmV2SW5wdXQgPSAiIjsK
			ICAgIGZ1bmN0aW9uIHJlYWRJbnB1dCgpIHsKICAgICAgaWYgKGxlYXZlSW5wdXRBbG9uZSB8fCAh
			Zm9jdXNlZCB8fCBoYXNTZWxlY3Rpb24oaW5wdXQpIHx8IG9wdGlvbnMucmVhZE9ubHkpIHJldHVy
			biBmYWxzZTsKICAgICAgdmFyIHRleHQgPSBpbnB1dC52YWx1ZTsKICAgICAgaWYgKHRleHQgPT0g
			cHJldklucHV0KSByZXR1cm4gZmFsc2U7CiAgICAgIHNoaWZ0U2VsZWN0aW5nID0gbnVsbDsKICAg
			ICAgdmFyIHNhbWUgPSAwLCBsID0gTWF0aC5taW4ocHJldklucHV0Lmxlbmd0aCwgdGV4dC5sZW5n
			dGgpOwogICAgICB3aGlsZSAoc2FtZSA8IGwgJiYgcHJldklucHV0W3NhbWVdID09IHRleHRbc2Ft
			ZV0pICsrc2FtZTsKICAgICAgaWYgKHNhbWUgPCBwcmV2SW5wdXQubGVuZ3RoKQogICAgICAgIHNl
			bC5mcm9tID0ge2xpbmU6IHNlbC5mcm9tLmxpbmUsIGNoOiBzZWwuZnJvbS5jaCAtIChwcmV2SW5w
			dXQubGVuZ3RoIC0gc2FtZSl9OwogICAgICBlbHNlIGlmIChvdmVyd3JpdGUgJiYgcG9zRXEoc2Vs
			LmZyb20sIHNlbC50bykpCiAgICAgICAgc2VsLnRvID0ge2xpbmU6IHNlbC50by5saW5lLCBjaDog
			TWF0aC5taW4oZ2V0TGluZShzZWwudG8ubGluZSkudGV4dC5sZW5ndGgsIHNlbC50by5jaCArICh0
			ZXh0Lmxlbmd0aCAtIHNhbWUpKX07CiAgICAgIHJlcGxhY2VTZWxlY3Rpb24odGV4dC5zbGljZShz
			YW1lKSwgImVuZCIpOwogICAgICBwcmV2SW5wdXQgPSB0ZXh0OwogICAgICByZXR1cm4gdHJ1ZTsK
			ICAgIH0KICAgIGZ1bmN0aW9uIHJlc2V0SW5wdXQodXNlcikgewogICAgICBpZiAoIXBvc0VxKHNl
			bC5mcm9tLCBzZWwudG8pKSB7CiAgICAgICAgcHJldklucHV0ID0gIiI7CiAgICAgICAgaW5wdXQu
			dmFsdWUgPSBnZXRTZWxlY3Rpb24oKTsKICAgICAgICBzZWxlY3RJbnB1dChpbnB1dCk7CiAgICAg
			IH0gZWxzZSBpZiAodXNlcikgcHJldklucHV0ID0gaW5wdXQudmFsdWUgPSAiIjsKICAgIH0KCiAg
			ICBmdW5jdGlvbiBmb2N1c0lucHV0KCkgewogICAgICBpZiAob3B0aW9ucy5yZWFkT25seSAhPSAi
			bm9jdXJzb3IiKSBpbnB1dC5mb2N1cygpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNjcm9sbEVkaXRv
			ckludG9WaWV3KCkgewogICAgICBpZiAoIWN1cnNvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHJl
			dHVybjsKICAgICAgdmFyIHJlY3QgPSBjdXJzb3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAg
			ICAgIC8vIElFIHJldHVybnMgYm9ndXMgY29vcmRpbmF0ZXMgd2hlbiB0aGUgaW5zdGFuY2Ugc2l0
			cyBpbnNpZGUgb2YgYW4gaWZyYW1lIGFuZCB0aGUgY3Vyc29yIGlzIGhpZGRlbgogICAgICBpZiAo
			aWUgJiYgcmVjdC50b3AgPT0gcmVjdC5ib3R0b20pIHJldHVybjsKICAgICAgdmFyIHdpbkggPSB3
			aW5kb3cuaW5uZXJIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQs
			IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpOwogICAgICBpZiAocmVjdC50
			b3AgPCAwIHx8IHJlY3QuYm90dG9tID4gd2luSCkgY3Vyc29yLnNjcm9sbEludG9WaWV3KCk7CiAg
			ICB9CiAgICBmdW5jdGlvbiBzY3JvbGxDdXJzb3JJbnRvVmlldygpIHsKICAgICAgdmFyIGN1cnNv
			ciA9IGxvY2FsQ29vcmRzKHNlbC5pbnZlcnRlZCA/IHNlbC5mcm9tIDogc2VsLnRvKTsKICAgICAg
			dmFyIHggPSBvcHRpb25zLmxpbmVXcmFwcGluZyA/IE1hdGgubWluKGN1cnNvci54LCBsaW5lU3Bh
			Y2Uub2Zmc2V0V2lkdGgpIDogY3Vyc29yLng7CiAgICAgIHJldHVybiBzY3JvbGxJbnRvVmlldyh4
			LCBjdXJzb3IueSwgeCwgY3Vyc29yLnlCb3QpOwogICAgfQogICAgZnVuY3Rpb24gc2Nyb2xsSW50
			b1ZpZXcoeDEsIHkxLCB4MiwgeTIpIHsKICAgICAgdmFyIHBsID0gcGFkZGluZ0xlZnQoKSwgcHQg
			PSBwYWRkaW5nVG9wKCksIGxoID0gdGV4dEhlaWdodCgpOwogICAgICB5MSArPSBwdDsgeTIgKz0g
			cHQ7IHgxICs9IHBsOyB4MiArPSBwbDsKICAgICAgdmFyIHNjcmVlbiA9IHNjcm9sbGVyLmNsaWVu
			dEhlaWdodCwgc2NyZWVudG9wID0gc2Nyb2xsZXIuc2Nyb2xsVG9wLCBzY3JvbGxlZCA9IGZhbHNl
			LCByZXN1bHQgPSB0cnVlOwogICAgICBpZiAoeTEgPCBzY3JlZW50b3ApIHtzY3JvbGxlci5zY3Jv
			bGxUb3AgPSBNYXRoLm1heCgwLCB5MSAtIDIqbGgpOyBzY3JvbGxlZCA9IHRydWU7fQogICAgICBl
			bHNlIGlmICh5MiA+IHNjcmVlbnRvcCArIHNjcmVlbikge3Njcm9sbGVyLnNjcm9sbFRvcCA9IHky
			ICsgbGggLSBzY3JlZW47IHNjcm9sbGVkID0gdHJ1ZTt9CgogICAgICB2YXIgc2NyZWVudyA9IHNj
			cm9sbGVyLmNsaWVudFdpZHRoLCBzY3JlZW5sZWZ0ID0gc2Nyb2xsZXIuc2Nyb2xsTGVmdDsKICAg
			ICAgdmFyIGd1dHRlcncgPSBvcHRpb25zLmZpeGVkR3V0dGVyID8gZ3V0dGVyLmNsaWVudFdpZHRo
			IDogMDsKICAgICAgaWYgKHgxIDwgc2NyZWVubGVmdCArIGd1dHRlcncpIHsKICAgICAgICBpZiAo
			eDEgPCA1MCkgeDEgPSAwOwogICAgICAgIHNjcm9sbGVyLnNjcm9sbExlZnQgPSBNYXRoLm1heCgw
			LCB4MSAtIDEwIC0gZ3V0dGVydyk7CiAgICAgICAgc2Nyb2xsZWQgPSB0cnVlOwogICAgICB9CiAg
			ICAgIGVsc2UgaWYgKHgyID4gc2NyZWVudyArIHNjcmVlbmxlZnQgLSAzKSB7CiAgICAgICAgc2Ny
			b2xsZXIuc2Nyb2xsTGVmdCA9IHgyICsgMTAgLSBzY3JlZW53OwogICAgICAgIHNjcm9sbGVkID0g
			dHJ1ZTsKICAgICAgICBpZiAoeDIgPiBjb2RlLmNsaWVudFdpZHRoKSByZXN1bHQgPSBmYWxzZTsK
			ICAgICAgfQogICAgICBpZiAoc2Nyb2xsZWQgJiYgb3B0aW9ucy5vblNjcm9sbCkgb3B0aW9ucy5v
			blNjcm9sbChpbnN0YW5jZSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgZnVuY3Rp
			b24gdmlzaWJsZUxpbmVzKCkgewogICAgICB2YXIgbGggPSB0ZXh0SGVpZ2h0KCksIHRvcCA9IHNj
			cm9sbGVyLnNjcm9sbFRvcCAtIHBhZGRpbmdUb3AoKTsKICAgICAgdmFyIGZyb21faGVpZ2h0ID0g
			TWF0aC5tYXgoMCwgTWF0aC5mbG9vcih0b3AgLyBsaCkpOwogICAgICB2YXIgdG9faGVpZ2h0ID0g
			TWF0aC5jZWlsKCh0b3AgKyBzY3JvbGxlci5jbGllbnRIZWlnaHQpIC8gbGgpOwogICAgICByZXR1
			cm4ge2Zyb206IGxpbmVBdEhlaWdodChkb2MsIGZyb21faGVpZ2h0KSwKICAgICAgICAgICAgICB0
			bzogbGluZUF0SGVpZ2h0KGRvYywgdG9faGVpZ2h0KX07CiAgICB9CiAgICAvLyBVc2VzIGEgc2V0
			IG9mIGNoYW5nZXMgcGx1cyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gdG8KICAgIC8vIGRl
			dGVybWluZSB3aGljaCBET00gdXBkYXRlcyBoYXZlIHRvIGJlIG1hZGUsIGFuZCBtYWtlcyB0aGUK
			ICAgIC8vIHVwZGF0ZXMuCiAgICBmdW5jdGlvbiB1cGRhdGVEaXNwbGF5KGNoYW5nZXMsIHN1cHBy
			ZXNzQ2FsbGJhY2spIHsKICAgICAgaWYgKCFzY3JvbGxlci5jbGllbnRXaWR0aCkgewogICAgICAg
			IHNob3dpbmdGcm9tID0gc2hvd2luZ1RvID0gZGlzcGxheU9mZnNldCA9IDA7CiAgICAgICAgcmV0
			dXJuOwogICAgICB9CiAgICAgIC8vIENvbXB1dGUgdGhlIG5ldyB2aXNpYmxlIHdpbmRvdwogICAg
			ICB2YXIgdmlzaWJsZSA9IHZpc2libGVMaW5lcygpOwogICAgICAvLyBCYWlsIG91dCBpZiB0aGUg
			dmlzaWJsZSBhcmVhIGlzIGFscmVhZHkgcmVuZGVyZWQgYW5kIG5vdGhpbmcgY2hhbmdlZC4KICAg
			ICAgaWYgKGNoYW5nZXMgIT09IHRydWUgJiYgY2hhbmdlcy5sZW5ndGggPT0gMCAmJiB2aXNpYmxl
			LmZyb20gPiBzaG93aW5nRnJvbSAmJiB2aXNpYmxlLnRvIDwgc2hvd2luZ1RvKSByZXR1cm47CiAg
			ICAgIHZhciBmcm9tID0gTWF0aC5tYXgodmlzaWJsZS5mcm9tIC0gMTAwLCAwKSwgdG8gPSBNYXRo
			Lm1pbihkb2Muc2l6ZSwgdmlzaWJsZS50byArIDEwMCk7CiAgICAgIGlmIChzaG93aW5nRnJvbSA8
			IGZyb20gJiYgZnJvbSAtIHNob3dpbmdGcm9tIDwgMjApIGZyb20gPSBzaG93aW5nRnJvbTsKICAg
			ICAgaWYgKHNob3dpbmdUbyA+IHRvICYmIHNob3dpbmdUbyAtIHRvIDwgMjApIHRvID0gTWF0aC5t
			aW4oZG9jLnNpemUsIHNob3dpbmdUbyk7CgogICAgICAvLyBDcmVhdGUgYSByYW5nZSBvZiB0aGVv
			cmV0aWNhbGx5IGludGFjdCBsaW5lcywgYW5kIHB1bmNoIGhvbGVzCiAgICAgIC8vIGluIHRoYXQg
			dXNpbmcgdGhlIGNoYW5nZSBpbmZvLgogICAgICB2YXIgaW50YWN0ID0gY2hhbmdlcyA9PT0gdHJ1
			ZSA/IFtdIDoKICAgICAgICBjb21wdXRlSW50YWN0KFt7ZnJvbTogc2hvd2luZ0Zyb20sIHRvOiBz
			aG93aW5nVG8sIGRvbVN0YXJ0OiAwfV0sIGNoYW5nZXMpOwogICAgICAvLyBDbGlwIG9mZiB0aGUg
			cGFydHMgdGhhdCB3b24ndCBiZSB2aXNpYmxlCiAgICAgIHZhciBpbnRhY3RMaW5lcyA9IDA7CiAg
			ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW50YWN0Lmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFy
			IHJhbmdlID0gaW50YWN0W2ldOwogICAgICAgIGlmIChyYW5nZS5mcm9tIDwgZnJvbSkge3Jhbmdl
			LmRvbVN0YXJ0ICs9IChmcm9tIC0gcmFuZ2UuZnJvbSk7IHJhbmdlLmZyb20gPSBmcm9tO30KICAg
			ICAgICBpZiAocmFuZ2UudG8gPiB0bykgcmFuZ2UudG8gPSB0bzsKICAgICAgICBpZiAocmFuZ2Uu
			ZnJvbSA+PSByYW5nZS50bykgaW50YWN0LnNwbGljZShpLS0sIDEpOwogICAgICAgIGVsc2UgaW50
			YWN0TGluZXMgKz0gcmFuZ2UudG8gLSByYW5nZS5mcm9tOwogICAgICB9CiAgICAgIGlmIChpbnRh
			Y3RMaW5lcyA9PSB0byAtIGZyb20pIHJldHVybjsKICAgICAgaW50YWN0LnNvcnQoZnVuY3Rpb24o
			YSwgYikge3JldHVybiBhLmRvbVN0YXJ0IC0gYi5kb21TdGFydDt9KTsKCiAgICAgIHZhciB0aCA9
			IHRleHRIZWlnaHQoKSwgZ3V0dGVyRGlzcGxheSA9IGd1dHRlci5zdHlsZS5kaXNwbGF5OwogICAg
			ICBsaW5lRGl2LnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgIHBhdGNoRGlzcGxheShmcm9t
			LCB0bywgaW50YWN0KTsKICAgICAgbGluZURpdi5zdHlsZS5kaXNwbGF5ID0gZ3V0dGVyLnN0eWxl
			LmRpc3BsYXkgPSAiIjsKCiAgICAgIC8vIFBvc2l0aW9uIHRoZSBtb3ZlciBkaXYgdG8gYWxpZ24g
			d2l0aCB0aGUgbGluZXMgaXQncyBzdXBwb3NlZAogICAgICAvLyB0byBiZSBzaG93aW5nICh3aGlj
			aCB3aWxsIGNvdmVyIHRoZSB2aXNpYmxlIGRpc3BsYXkpCiAgICAgIHZhciBkaWZmZXJlbnQgPSBm
			cm9tICE9IHNob3dpbmdGcm9tIHx8IHRvICE9IHNob3dpbmdUbyB8fCBsYXN0U2l6ZUMgIT0gc2Ny
			b2xsZXIuY2xpZW50SGVpZ2h0ICsgdGg7CiAgICAgIC8vIFRoaXMgaXMganVzdCBhIGJvZ3VzIGZv
			cm11bGEgdGhhdCBkZXRlY3RzIHdoZW4gdGhlIGVkaXRvciBpcwogICAgICAvLyByZXNpemVkIG9y
			IHRoZSBmb250IHNpemUgY2hhbmdlcy4KICAgICAgaWYgKGRpZmZlcmVudCkgbGFzdFNpemVDID0g
			c2Nyb2xsZXIuY2xpZW50SGVpZ2h0ICsgdGg7CiAgICAgIHNob3dpbmdGcm9tID0gZnJvbTsgc2hv
			d2luZ1RvID0gdG87CiAgICAgIGRpc3BsYXlPZmZzZXQgPSBoZWlnaHRBdExpbmUoZG9jLCBmcm9t
			KTsKICAgICAgbW92ZXIuc3R5bGUudG9wID0gKGRpc3BsYXlPZmZzZXQgKiB0aCkgKyAicHgiOwog
			ICAgICBpZiAoc2Nyb2xsZXIuY2xpZW50SGVpZ2h0KQogICAgICAgIGNvZGUuc3R5bGUuaGVpZ2h0
			ID0gKGRvYy5oZWlnaHQgKiB0aCArIDIgKiBwYWRkaW5nVG9wKCkpICsgInB4IjsKCiAgICAgIC8v
			IFNpbmNlIHRoaXMgaXMgYWxsIHJhdGhlciBlcnJvciBwcm9uZSwgaXQgaXMgaG9ub3VyZWQgd2l0
			aCB0aGUKICAgICAgLy8gb25seSBhc3NlcnRpb24gaW4gdGhlIHdob2xlIGZpbGUuCiAgICAgIGlm
			IChsaW5lRGl2LmNoaWxkTm9kZXMubGVuZ3RoICE9IHNob3dpbmdUbyAtIHNob3dpbmdGcm9tKQog
			ICAgICAgIHRocm93IG5ldyBFcnJvcigiQkFEIFBBVENIISAiICsgSlNPTi5zdHJpbmdpZnkoaW50
			YWN0KSArICIgc2l6ZT0iICsgKHNob3dpbmdUbyAtIHNob3dpbmdGcm9tKSArCiAgICAgICAgICAg
			ICAgICAgICAgICAgICIgbm9kZXM9IiArIGxpbmVEaXYuY2hpbGROb2Rlcy5sZW5ndGgpOwoKICAg
			ICAgaWYgKG9wdGlvbnMubGluZVdyYXBwaW5nKSB7CiAgICAgICAgbWF4V2lkdGggPSBzY3JvbGxl
			ci5jbGllbnRXaWR0aDsKICAgICAgICB2YXIgY3VyTm9kZSA9IGxpbmVEaXYuZmlyc3RDaGlsZCwg
			aGVpZ2h0Q2hhbmdlZCA9IGZhbHNlOwogICAgICAgIGRvYy5pdGVyKHNob3dpbmdGcm9tLCBzaG93
			aW5nVG8sIGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgIGlmICghbGluZS5oaWRkZW4pIHsKICAg
			ICAgICAgICAgdmFyIGhlaWdodCA9IE1hdGgucm91bmQoY3VyTm9kZS5vZmZzZXRIZWlnaHQgLyB0
			aCkgfHwgMTsKICAgICAgICAgICAgaWYgKGxpbmUuaGVpZ2h0ICE9IGhlaWdodCkgewogICAgICAg
			ICAgICAgIHVwZGF0ZUxpbmVIZWlnaHQobGluZSwgaGVpZ2h0KTsKICAgICAgICAgICAgICBndXR0
			ZXJEaXJ0eSA9IGhlaWdodENoYW5nZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9
			CiAgICAgICAgICBjdXJOb2RlID0gY3VyTm9kZS5uZXh0U2libGluZzsKICAgICAgICB9KTsKICAg
			ICAgICBpZiAoaGVpZ2h0Q2hhbmdlZCkKICAgICAgICAgIGNvZGUuc3R5bGUuaGVpZ2h0ID0gKGRv
			Yy5oZWlnaHQgKiB0aCArIDIgKiBwYWRkaW5nVG9wKCkpICsgInB4IjsKICAgICAgfSBlbHNlIHsK
			ICAgICAgICBpZiAobWF4V2lkdGggPT0gbnVsbCkgbWF4V2lkdGggPSBzdHJpbmdXaWR0aChtYXhM
			aW5lKTsKICAgICAgICBpZiAobWF4V2lkdGggPiBzY3JvbGxlci5jbGllbnRXaWR0aCkgewogICAg
			ICAgICAgbGluZVNwYWNlLnN0eWxlLndpZHRoID0gbWF4V2lkdGggKyAicHgiOwogICAgICAgICAg
			Ly8gTmVlZGVkIHRvIHByZXZlbnQgb2RkIHdyYXBwaW5nL2hpZGluZyBvZiB3aWRnZXRzIHBsYWNl
			ZCBpbiBoZXJlLgogICAgICAgICAgY29kZS5zdHlsZS53aWR0aCA9ICIiOwogICAgICAgICAgY29k
			ZS5zdHlsZS53aWR0aCA9IHNjcm9sbGVyLnNjcm9sbFdpZHRoICsgInB4IjsKICAgICAgICB9IGVs
			c2UgewogICAgICAgICAgbGluZVNwYWNlLnN0eWxlLndpZHRoID0gY29kZS5zdHlsZS53aWR0aCA9
			ICIiOwogICAgICAgIH0KICAgICAgfQogICAgICBndXR0ZXIuc3R5bGUuZGlzcGxheSA9IGd1dHRl
			ckRpc3BsYXk7CiAgICAgIGlmIChkaWZmZXJlbnQgfHwgZ3V0dGVyRGlydHkpIHVwZGF0ZUd1dHRl
			cigpOwogICAgICB1cGRhdGVTZWxlY3Rpb24oKTsKICAgICAgaWYgKCFzdXBwcmVzc0NhbGxiYWNr
			ICYmIG9wdGlvbnMub25VcGRhdGUpIG9wdGlvbnMub25VcGRhdGUoaW5zdGFuY2UpOwogICAgICBy
			ZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21wdXRlSW50YWN0KGludGFjdCwgY2hh
			bmdlcykgewogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoYW5nZXMubGVuZ3RoIHx8IDA7IGkg
			PCBsOyArK2kpIHsKICAgICAgICB2YXIgY2hhbmdlID0gY2hhbmdlc1tpXSwgaW50YWN0MiA9IFtd
			LCBkaWZmID0gY2hhbmdlLmRpZmYgfHwgMDsKICAgICAgICBmb3IgKHZhciBqID0gMCwgbDIgPSBp
			bnRhY3QubGVuZ3RoOyBqIDwgbDI7ICsraikgewogICAgICAgICAgdmFyIHJhbmdlID0gaW50YWN0
			W2pdOwogICAgICAgICAgaWYgKGNoYW5nZS50byA8PSByYW5nZS5mcm9tICYmIGNoYW5nZS5kaWZm
			KQogICAgICAgICAgICBpbnRhY3QyLnB1c2goe2Zyb206IHJhbmdlLmZyb20gKyBkaWZmLCB0bzog
			cmFuZ2UudG8gKyBkaWZmLAogICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVN0YXJ0OiByYW5n
			ZS5kb21TdGFydH0pOwogICAgICAgICAgZWxzZSBpZiAoY2hhbmdlLnRvIDw9IHJhbmdlLmZyb20g
			fHwgY2hhbmdlLmZyb20gPj0gcmFuZ2UudG8pCiAgICAgICAgICAgIGludGFjdDIucHVzaChyYW5n
			ZSk7CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYgKGNoYW5nZS5mcm9tID4gcmFuZ2Uu
			ZnJvbSkKICAgICAgICAgICAgICBpbnRhY3QyLnB1c2goe2Zyb206IHJhbmdlLmZyb20sIHRvOiBj
			aGFuZ2UuZnJvbSwgZG9tU3RhcnQ6IHJhbmdlLmRvbVN0YXJ0fSk7CiAgICAgICAgICAgIGlmIChj
			aGFuZ2UudG8gPCByYW5nZS50bykKICAgICAgICAgICAgICBpbnRhY3QyLnB1c2goe2Zyb206IGNo
			YW5nZS50byArIGRpZmYsIHRvOiByYW5nZS50byArIGRpZmYsCiAgICAgICAgICAgICAgICAgICAg
			ICAgICAgICBkb21TdGFydDogcmFuZ2UuZG9tU3RhcnQgKyAoY2hhbmdlLnRvIC0gcmFuZ2UuZnJv
			bSl9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW50YWN0ID0gaW50YWN0MjsKICAg
			ICAgfQogICAgICByZXR1cm4gaW50YWN0OwogICAgfQoKICAgIGZ1bmN0aW9uIHBhdGNoRGlzcGxh
			eShmcm9tLCB0bywgaW50YWN0KSB7CiAgICAgIC8vIFRoZSBmaXJzdCBwYXNzIHJlbW92ZXMgdGhl
			IERPTSBub2RlcyB0aGF0IGFyZW4ndCBpbnRhY3QuCiAgICAgIGlmICghaW50YWN0Lmxlbmd0aCkg
			bGluZURpdi5pbm5lckhUTUwgPSAiIjsKICAgICAgZWxzZSB7CiAgICAgICAgZnVuY3Rpb24ga2ls
			bE5vZGUobm9kZSkgewogICAgICAgICAgdmFyIHRtcCA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICAg
			ICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7CiAgICAgICAgICByZXR1cm4g
			dG1wOwogICAgICAgIH0KICAgICAgICB2YXIgZG9tUG9zID0gMCwgY3VyTm9kZSA9IGxpbmVEaXYu
			Zmlyc3RDaGlsZCwgbjsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGludGFjdC5sZW5ndGg7
			ICsraSkgewogICAgICAgICAgdmFyIGN1ciA9IGludGFjdFtpXTsKICAgICAgICAgIHdoaWxlIChj
			dXIuZG9tU3RhcnQgPiBkb21Qb3MpIHtjdXJOb2RlID0ga2lsbE5vZGUoY3VyTm9kZSk7IGRvbVBv
			cysrO30KICAgICAgICAgIGZvciAodmFyIGogPSAwLCBlID0gY3VyLnRvIC0gY3VyLmZyb207IGog
			PCBlOyArK2opIHtjdXJOb2RlID0gY3VyTm9kZS5uZXh0U2libGluZzsgZG9tUG9zKys7fQogICAg
			ICAgIH0KICAgICAgICB3aGlsZSAoY3VyTm9kZSkgY3VyTm9kZSA9IGtpbGxOb2RlKGN1ck5vZGUp
			OwogICAgICB9CiAgICAgIC8vIFRoaXMgcGFzcyBmaWxscyBpbiB0aGUgbGluZXMgdGhhdCBhY3R1
			YWxseSBjaGFuZ2VkLgogICAgICB2YXIgbmV4dEludGFjdCA9IGludGFjdC5zaGlmdCgpLCBjdXJO
			b2RlID0gbGluZURpdi5maXJzdENoaWxkLCBqID0gZnJvbTsKICAgICAgdmFyIHNjcmF0Y2ggPSB0
			YXJnZXREb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgbmV3RWx0OwogICAgICBkb2MuaXRl
			cihmcm9tLCB0bywgZnVuY3Rpb24obGluZSkgewogICAgICAgIGlmIChuZXh0SW50YWN0ICYmIG5l
			eHRJbnRhY3QudG8gPT0gaikgbmV4dEludGFjdCA9IGludGFjdC5zaGlmdCgpOwogICAgICAgIGlm
			ICghbmV4dEludGFjdCB8fCBuZXh0SW50YWN0LmZyb20gPiBqKSB7CiAgICAgICAgICBpZiAobGlu
			ZS5oaWRkZW4pIHZhciBodG1sID0gc2NyYXRjaC5pbm5lckhUTUwgPSAiPHByZT48L3ByZT4iOwog
			ICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJzxwcmU+JyArIGxpbmUuZ2V0
			SFRNTChtYWtlVGFiKSArICc8L3ByZT4nOwogICAgICAgICAgICAvLyBLbHVkZ2UgdG8gbWFrZSBz
			dXJlIHRoZSBzdHlsZWQgZWxlbWVudCBsaWVzIGJlaGluZCB0aGUgc2VsZWN0aW9uIChieSB6LWlu
			ZGV4KQogICAgICAgICAgICBpZiAobGluZS5jbGFzc05hbWUpCiAgICAgICAgICAgICAgaHRtbCA9
			ICc8ZGl2IHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPjxwcmUgY2xhc3M9IicgKyBsaW5lLmNs
			YXNzTmFtZSArCiAgICAgICAgICAgICAgJyIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVm
			dDogMDsgcmlnaHQ6IDA7IHRvcDogMDsgYm90dG9tOiAwOyB6LWluZGV4OiAtMiI+JiMxNjA7PC9w
			cmU+JyArIGh0bWwgKyAiPC9kaXY+IjsKICAgICAgICAgIH0KICAgICAgICAgIHNjcmF0Y2guaW5u
			ZXJIVE1MID0gaHRtbDsKICAgICAgICAgIGxpbmVEaXYuaW5zZXJ0QmVmb3JlKHNjcmF0Y2guZmly
			c3RDaGlsZCwgY3VyTm9kZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN1ck5vZGUgPSBj
			dXJOb2RlLm5leHRTaWJsaW5nOwogICAgICAgIH0KICAgICAgICArK2o7CiAgICAgIH0pOwogICAg
			fQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUd1dHRlcigpIHsKICAgICAgaWYgKCFvcHRpb25zLmd1dHRl
			ciAmJiAhb3B0aW9ucy5saW5lTnVtYmVycykgcmV0dXJuOwogICAgICB2YXIgaFRleHQgPSBtb3Zl
			ci5vZmZzZXRIZWlnaHQsIGhFZGl0b3IgPSBzY3JvbGxlci5jbGllbnRIZWlnaHQ7CiAgICAgIGd1
			dHRlci5zdHlsZS5oZWlnaHQgPSAoaFRleHQgLSBoRWRpdG9yIDwgMiA/IGhFZGl0b3IgOiBoVGV4
			dCkgKyAicHgiOwogICAgICB2YXIgaHRtbCA9IFtdLCBpID0gc2hvd2luZ0Zyb207CiAgICAgIGRv
			Yy5pdGVyKHNob3dpbmdGcm9tLCBNYXRoLm1heChzaG93aW5nVG8sIHNob3dpbmdGcm9tICsgMSks
			IGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBpZiAobGluZS5oaWRkZW4pIHsKICAgICAgICAgIGh0
			bWwucHVzaCgiPHByZT48L3ByZT4iKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIG1h
			cmtlciA9IGxpbmUuZ3V0dGVyTWFya2VyOwogICAgICAgICAgdmFyIHRleHQgPSBvcHRpb25zLmxp
			bmVOdW1iZXJzID8gaSArIG9wdGlvbnMuZmlyc3RMaW5lTnVtYmVyIDogbnVsbDsKICAgICAgICAg
			IGlmIChtYXJrZXIgJiYgbWFya2VyLnRleHQpCiAgICAgICAgICAgIHRleHQgPSBtYXJrZXIudGV4
			dC5yZXBsYWNlKCIlTiUiLCB0ZXh0ICE9IG51bGwgPyB0ZXh0IDogIiIpOwogICAgICAgICAgZWxz
			ZSBpZiAodGV4dCA9PSBudWxsKQogICAgICAgICAgICB0ZXh0ID0gIlx1MDBhMCI7CiAgICAgICAg
			ICBodG1sLnB1c2goKG1hcmtlciAmJiBtYXJrZXIuc3R5bGUgPyAnPHByZSBjbGFzcz0iJyArIG1h
			cmtlci5zdHlsZSArICciPicgOiAiPHByZT4iKSwgdGV4dCk7CiAgICAgICAgICBmb3IgKHZhciBq
			ID0gMTsgaiA8IGxpbmUuaGVpZ2h0OyArK2opIGh0bWwucHVzaCgiPGJyLz4mIzE2MDsiKTsKICAg
			ICAgICAgIGh0bWwucHVzaCgiPC9wcmU+Iik7CiAgICAgICAgfQogICAgICAgICsraTsKICAgICAg
			fSk7CiAgICAgIGd1dHRlci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICBndXR0ZXJUZXh0
			LmlubmVySFRNTCA9IGh0bWwuam9pbigiIik7CiAgICAgIHZhciBtaW53aWR0aCA9IFN0cmluZyhk
			b2Muc2l6ZSkubGVuZ3RoLCBmaXJzdE5vZGUgPSBndXR0ZXJUZXh0LmZpcnN0Q2hpbGQsIHZhbCA9
			IGVsdFRleHQoZmlyc3ROb2RlKSwgcGFkID0gIiI7CiAgICAgIHdoaWxlICh2YWwubGVuZ3RoICsg
			cGFkLmxlbmd0aCA8IG1pbndpZHRoKSBwYWQgKz0gIlx1MDBhMCI7CiAgICAgIGlmIChwYWQpIGZp
			cnN0Tm9kZS5pbnNlcnRCZWZvcmUodGFyZ2V0RG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocGFkKSwg
			Zmlyc3ROb2RlLmZpcnN0Q2hpbGQpOwogICAgICBndXR0ZXIuc3R5bGUuZGlzcGxheSA9ICIiOwog
			ICAgICBsaW5lU3BhY2Uuc3R5bGUubWFyZ2luTGVmdCA9IGd1dHRlci5vZmZzZXRXaWR0aCArICJw
			eCI7CiAgICAgIGd1dHRlckRpcnR5ID0gZmFsc2U7CiAgICB9CiAgICBmdW5jdGlvbiB1cGRhdGVT
			ZWxlY3Rpb24oKSB7CiAgICAgIHZhciBjb2xsYXBzZWQgPSBwb3NFcShzZWwuZnJvbSwgc2VsLnRv
			KTsKICAgICAgdmFyIGZyb21Qb3MgPSBsb2NhbENvb3JkcyhzZWwuZnJvbSwgdHJ1ZSk7CiAgICAg
			IHZhciB0b1BvcyA9IGNvbGxhcHNlZCA/IGZyb21Qb3MgOiBsb2NhbENvb3JkcyhzZWwudG8sIHRy
			dWUpOwogICAgICB2YXIgaGVhZFBvcyA9IHNlbC5pbnZlcnRlZCA/IGZyb21Qb3MgOiB0b1Bvcywg
			dGggPSB0ZXh0SGVpZ2h0KCk7CiAgICAgIHZhciB3cmFwT2ZmID0gZWx0T2Zmc2V0KHdyYXBwZXIp
			LCBsaW5lT2ZmID0gZWx0T2Zmc2V0KGxpbmVEaXYpOwogICAgICBpbnB1dERpdi5zdHlsZS50b3Ag
			PSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxlci5vZmZzZXRIZWlnaHQsIGhlYWRQb3MueSAr
			IGxpbmVPZmYudG9wIC0gd3JhcE9mZi50b3ApKSArICJweCI7CiAgICAgIGlucHV0RGl2LnN0eWxl
			LmxlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxlci5vZmZzZXRXaWR0aCwgaGVhZFBv
			cy54ICsgbGluZU9mZi5sZWZ0IC0gd3JhcE9mZi5sZWZ0KSkgKyAicHgiOwogICAgICBpZiAoY29s
			bGFwc2VkKSB7CiAgICAgICAgY3Vyc29yLnN0eWxlLnRvcCA9IGhlYWRQb3MueSArICJweCI7CiAg
			ICAgICAgY3Vyc29yLnN0eWxlLmxlZnQgPSAob3B0aW9ucy5saW5lV3JhcHBpbmcgPyBNYXRoLm1p
			bihoZWFkUG9zLngsIGxpbmVTcGFjZS5vZmZzZXRXaWR0aCkgOiBoZWFkUG9zLngpICsgInB4IjsK
			ICAgICAgICBjdXJzb3Iuc3R5bGUuZGlzcGxheSA9ICIiOwogICAgICAgIHNlbGVjdGlvbkRpdi5z
			dHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBzYW1lTGlu
			ZSA9IGZyb21Qb3MueSA9PSB0b1Bvcy55LCBodG1sID0gIiI7CiAgICAgICAgZnVuY3Rpb24gYWRk
			KGxlZnQsIHRvcCwgcmlnaHQsIGhlaWdodCkgewogICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFz
			cz0iQ29kZU1pcnJvci1zZWxlY3RlZCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDog
			JyArIGxlZnQgKwogICAgICAgICAgICAncHg7IHRvcDogJyArIHRvcCArICdweDsgcmlnaHQ6ICcg
			KyByaWdodCArICdweDsgaGVpZ2h0OiAnICsgaGVpZ2h0ICsgJ3B4Ij48L2Rpdj4nOwogICAgICAg
			IH0KICAgICAgICBpZiAoc2VsLmZyb20uY2ggJiYgZnJvbVBvcy55ID49IDApIHsKICAgICAgICAg
			IHZhciByaWdodCA9IHNhbWVMaW5lID8gbGluZVNwYWNlLmNsaWVudFdpZHRoIC0gdG9Qb3MueCA6
			IDA7CiAgICAgICAgICBhZGQoZnJvbVBvcy54LCBmcm9tUG9zLnksIHJpZ2h0LCB0aCk7CiAgICAg
			ICAgfQogICAgICAgIHZhciBtaWRkbGVTdGFydCA9IE1hdGgubWF4KDAsIGZyb21Qb3MueSArIChz
			ZWwuZnJvbS5jaCA/IHRoIDogMCkpOwogICAgICAgIHZhciBtaWRkbGVIZWlnaHQgPSBNYXRoLm1p
			bih0b1Bvcy55LCBsaW5lU3BhY2UuY2xpZW50SGVpZ2h0KSAtIG1pZGRsZVN0YXJ0OwogICAgICAg
			IGlmIChtaWRkbGVIZWlnaHQgPiAwLjIgKiB0aCkKICAgICAgICAgIGFkZCgwLCBtaWRkbGVTdGFy
			dCwgMCwgbWlkZGxlSGVpZ2h0KTsKICAgICAgICBpZiAoKCFzYW1lTGluZSB8fCAhc2VsLmZyb20u
			Y2gpICYmIHRvUG9zLnkgPCBsaW5lU3BhY2UuY2xpZW50SGVpZ2h0IC0gLjUgKiB0aCkKICAgICAg
			ICAgIGFkZCgwLCB0b1Bvcy55LCBsaW5lU3BhY2UuY2xpZW50V2lkdGggLSB0b1Bvcy54LCB0aCk7
			CiAgICAgICAgc2VsZWN0aW9uRGl2LmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgY3Vyc29yLnN0
			eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgc2VsZWN0aW9uRGl2LnN0eWxlLmRpc3BsYXkg
			PSAiIjsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldFNoaWZ0KHZhbCkgewogICAgICBp
			ZiAodmFsKSBzaGlmdFNlbGVjdGluZyA9IHNoaWZ0U2VsZWN0aW5nIHx8IChzZWwuaW52ZXJ0ZWQg
			PyBzZWwudG8gOiBzZWwuZnJvbSk7CiAgICAgIGVsc2Ugc2hpZnRTZWxlY3RpbmcgPSBudWxsOwog
			ICAgfQogICAgZnVuY3Rpb24gc2V0U2VsZWN0aW9uVXNlcihmcm9tLCB0bykgewogICAgICB2YXIg
			c2ggPSBzaGlmdFNlbGVjdGluZyAmJiBjbGlwUG9zKHNoaWZ0U2VsZWN0aW5nKTsKICAgICAgaWYg
			KHNoKSB7CiAgICAgICAgaWYgKHBvc0xlc3Moc2gsIGZyb20pKSBmcm9tID0gc2g7CiAgICAgICAg
			ZWxzZSBpZiAocG9zTGVzcyh0bywgc2gpKSB0byA9IHNoOwogICAgICB9CiAgICAgIHNldFNlbGVj
			dGlvbihmcm9tLCB0byk7CiAgICAgIHVzZXJTZWxDaGFuZ2UgPSB0cnVlOwogICAgfQogICAgLy8g
			VXBkYXRlIHRoZSBzZWxlY3Rpb24uIExhc3QgdHdvIGFyZ3MgYXJlIG9ubHkgdXNlZCBieQogICAg
			Ly8gdXBkYXRlTGluZXMsIHNpbmNlIHRoZXkgaGF2ZSB0byBiZSBleHByZXNzZWQgaW4gdGhlIGxp
			bmUKICAgIC8vIG51bWJlcnMgYmVmb3JlIHRoZSB1cGRhdGUuCiAgICBmdW5jdGlvbiBzZXRTZWxl
			Y3Rpb24oZnJvbSwgdG8sIG9sZEZyb20sIG9sZFRvKSB7CiAgICAgIGdvYWxDb2x1bW4gPSBudWxs
			OwogICAgICBpZiAob2xkRnJvbSA9PSBudWxsKSB7b2xkRnJvbSA9IHNlbC5mcm9tLmxpbmU7IG9s
			ZFRvID0gc2VsLnRvLmxpbmU7fQogICAgICBpZiAocG9zRXEoc2VsLmZyb20sIGZyb20pICYmIHBv
			c0VxKHNlbC50bywgdG8pKSByZXR1cm47CiAgICAgIGlmIChwb3NMZXNzKHRvLCBmcm9tKSkge3Zh
			ciB0bXAgPSB0bzsgdG8gPSBmcm9tOyBmcm9tID0gdG1wO30KCiAgICAgIC8vIFNraXAgb3ZlciBo
			aWRkZW4gbGluZXMuCiAgICAgIGlmIChmcm9tLmxpbmUgIT0gb2xkRnJvbSkgZnJvbSA9IHNraXBI
			aWRkZW4oZnJvbSwgb2xkRnJvbSwgc2VsLmZyb20uY2gpOwogICAgICBpZiAodG8ubGluZSAhPSBv
			bGRUbykgdG8gPSBza2lwSGlkZGVuKHRvLCBvbGRUbywgc2VsLnRvLmNoKTsKCiAgICAgIGlmIChw
			b3NFcShmcm9tLCB0bykpIHNlbC5pbnZlcnRlZCA9IGZhbHNlOwogICAgICBlbHNlIGlmIChwb3NF
			cShmcm9tLCBzZWwudG8pKSBzZWwuaW52ZXJ0ZWQgPSBmYWxzZTsKICAgICAgZWxzZSBpZiAocG9z
			RXEodG8sIHNlbC5mcm9tKSkgc2VsLmludmVydGVkID0gdHJ1ZTsKCiAgICAgIGlmIChvcHRpb25z
			LmF1dG9DbGVhckVtcHR5TGluZXMgJiYgcG9zRXEoc2VsLmZyb20sIHNlbC50bykpIHsKICAgICAg
			ICB2YXIgaGVhZCA9IHNlbC5pbnZlcnRlZCA/IGZyb20gOiB0bzsKICAgICAgICBpZiAoaGVhZC5s
			aW5lICE9IHNlbC5mcm9tLmxpbmUpIHsKICAgICAgICAgIHZhciBvbGRMaW5lID0gZ2V0TGluZShz
			ZWwuZnJvbS5saW5lKTsKICAgICAgICAgIGlmICgvXlxzKyQvLnRlc3Qob2xkTGluZS50ZXh0KSkK
			ICAgICAgICAgICAgc2V0VGltZW91dChvcGVyYXRpb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICAg
			ICAgaWYgKG9sZExpbmUucGFyZW50ICYmIC9eXHMrJC8udGVzdChvbGRMaW5lLnRleHQpKSB7CiAg
			ICAgICAgICAgICAgICB2YXIgbm8gPSBsaW5lTm8ob2xkTGluZSk7CiAgICAgICAgICAgICAgICBy
			ZXBsYWNlUmFuZ2UoIiIsIHtsaW5lOiBubywgY2g6IDB9LCB7bGluZTogbm8sIGNoOiBvbGRMaW5l
			LnRleHQubGVuZ3RofSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCAxMCkpOwogICAg
			ICAgIH0KICAgICAgfQoKICAgICAgc2VsLmZyb20gPSBmcm9tOyBzZWwudG8gPSB0bzsKICAgICAg
			c2VsZWN0aW9uQ2hhbmdlZCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBza2lwSGlkZGVuKHBv
			cywgb2xkTGluZSwgb2xkQ2gpIHsKICAgICAgZnVuY3Rpb24gZ2V0Tm9uSGlkZGVuKGRpcikgewog
			ICAgICAgIHZhciBsTm8gPSBwb3MubGluZSArIGRpciwgZW5kID0gZGlyID09IDEgPyBkb2Muc2l6
			ZSA6IC0xOwogICAgICAgIHdoaWxlIChsTm8gIT0gZW5kKSB7CiAgICAgICAgICB2YXIgbGluZSA9
			IGdldExpbmUobE5vKTsKICAgICAgICAgIGlmICghbGluZS5oaWRkZW4pIHsKICAgICAgICAgICAg
			dmFyIGNoID0gcG9zLmNoOwogICAgICAgICAgICBpZiAoY2ggPiBvbGRDaCB8fCBjaCA+IGxpbmUu
			dGV4dC5sZW5ndGgpIGNoID0gbGluZS50ZXh0Lmxlbmd0aDsKICAgICAgICAgICAgcmV0dXJuIHts
			aW5lOiBsTm8sIGNoOiBjaH07CiAgICAgICAgICB9CiAgICAgICAgICBsTm8gKz0gZGlyOwogICAg
			ICAgIH0KICAgICAgfQogICAgICB2YXIgbGluZSA9IGdldExpbmUocG9zLmxpbmUpOwogICAgICBp
			ZiAoIWxpbmUuaGlkZGVuKSByZXR1cm4gcG9zOwogICAgICBpZiAocG9zLmxpbmUgPj0gb2xkTGlu
			ZSkgcmV0dXJuIGdldE5vbkhpZGRlbigxKSB8fCBnZXROb25IaWRkZW4oLTEpOwogICAgICBlbHNl
			IHJldHVybiBnZXROb25IaWRkZW4oLTEpIHx8IGdldE5vbkhpZGRlbigxKTsKICAgIH0KICAgIGZ1
			bmN0aW9uIHNldEN1cnNvcihsaW5lLCBjaCwgdXNlcikgewogICAgICB2YXIgcG9zID0gY2xpcFBv
			cyh7bGluZTogbGluZSwgY2g6IGNoIHx8IDB9KTsKICAgICAgKHVzZXIgPyBzZXRTZWxlY3Rpb25V
			c2VyIDogc2V0U2VsZWN0aW9uKShwb3MsIHBvcyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2xpcExp
			bmUobikge3JldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihuLCBkb2Muc2l6ZS0xKSk7fQogICAg
			ZnVuY3Rpb24gY2xpcFBvcyhwb3MpIHsKICAgICAgaWYgKHBvcy5saW5lIDwgMCkgcmV0dXJuIHts
			aW5lOiAwLCBjaDogMH07CiAgICAgIGlmIChwb3MubGluZSA+PSBkb2Muc2l6ZSkgcmV0dXJuIHts
			aW5lOiBkb2Muc2l6ZS0xLCBjaDogZ2V0TGluZShkb2Muc2l6ZS0xKS50ZXh0Lmxlbmd0aH07CiAg
			ICAgIHZhciBjaCA9IHBvcy5jaCwgbGluZWxlbiA9IGdldExpbmUocG9zLmxpbmUpLnRleHQubGVu
			Z3RoOwogICAgICBpZiAoY2ggPT0gbnVsbCB8fCBjaCA+IGxpbmVsZW4pIHJldHVybiB7bGluZTog
			cG9zLmxpbmUsIGNoOiBsaW5lbGVufTsKICAgICAgZWxzZSBpZiAoY2ggPCAwKSByZXR1cm4ge2xp
			bmU6IHBvcy5saW5lLCBjaDogMH07CiAgICAgIGVsc2UgcmV0dXJuIHBvczsKICAgIH0KCiAgICBm
			dW5jdGlvbiBmaW5kUG9zSChkaXIsIHVuaXQpIHsKICAgICAgdmFyIGVuZCA9IHNlbC5pbnZlcnRl
			ZCA/IHNlbC5mcm9tIDogc2VsLnRvLCBsaW5lID0gZW5kLmxpbmUsIGNoID0gZW5kLmNoOwogICAg
			ICB2YXIgbGluZU9iaiA9IGdldExpbmUobGluZSk7CiAgICAgIGZ1bmN0aW9uIGZpbmROZXh0TGlu
			ZSgpIHsKICAgICAgICBmb3IgKHZhciBsID0gbGluZSArIGRpciwgZSA9IGRpciA8IDAgPyAtMSA6
			IGRvYy5zaXplOyBsICE9IGU7IGwgKz0gZGlyKSB7CiAgICAgICAgICB2YXIgbG8gPSBnZXRMaW5l
			KGwpOwogICAgICAgICAgaWYgKCFsby5oaWRkZW4pIHsgbGluZSA9IGw7IGxpbmVPYmogPSBsbzsg
			cmV0dXJuIHRydWU7IH0KICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbW92ZU9uY2Uo
			Ym91bmRUb0xpbmUpIHsKICAgICAgICBpZiAoY2ggPT0gKGRpciA8IDAgPyAwIDogbGluZU9iai50
			ZXh0Lmxlbmd0aCkpIHsKICAgICAgICAgIGlmICghYm91bmRUb0xpbmUgJiYgZmluZE5leHRMaW5l
			KCkpIGNoID0gZGlyIDwgMCA/IGxpbmVPYmoudGV4dC5sZW5ndGggOiAwOwogICAgICAgICAgZWxz
			ZSByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIGNoICs9IGRpcjsKICAgICAgICByZXR1cm4g
			dHJ1ZTsKICAgICAgfQogICAgICBpZiAodW5pdCA9PSAiY2hhciIpIG1vdmVPbmNlKCk7CiAgICAg
			IGVsc2UgaWYgKHVuaXQgPT0gImNvbHVtbiIpIG1vdmVPbmNlKHRydWUpOwogICAgICBlbHNlIGlm
			ICh1bml0ID09ICJ3b3JkIikgewogICAgICAgIHZhciBzYXdXb3JkID0gZmFsc2U7CiAgICAgICAg
			Zm9yICg7OykgewogICAgICAgICAgaWYgKGRpciA8IDApIGlmICghbW92ZU9uY2UoKSkgYnJlYWs7
			CiAgICAgICAgICBpZiAoaXNXb3JkQ2hhcihsaW5lT2JqLnRleHQuY2hhckF0KGNoKSkpIHNhd1dv
			cmQgPSB0cnVlOwogICAgICAgICAgZWxzZSBpZiAoc2F3V29yZCkge2lmIChkaXIgPCAwKSB7ZGly
			ID0gMTsgbW92ZU9uY2UoKTt9IGJyZWFrO30KICAgICAgICAgIGlmIChkaXIgPiAwKSBpZiAoIW1v
			dmVPbmNlKCkpIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4ge2xpbmU6IGxp
			bmUsIGNoOiBjaH07CiAgICB9CiAgICBmdW5jdGlvbiBtb3ZlSChkaXIsIHVuaXQpIHsKICAgICAg
			dmFyIHBvcyA9IGRpciA8IDAgPyBzZWwuZnJvbSA6IHNlbC50bzsKICAgICAgaWYgKHNoaWZ0U2Vs
			ZWN0aW5nIHx8IHBvc0VxKHNlbC5mcm9tLCBzZWwudG8pKSBwb3MgPSBmaW5kUG9zSChkaXIsIHVu
			aXQpOwogICAgICBzZXRDdXJzb3IocG9zLmxpbmUsIHBvcy5jaCwgdHJ1ZSk7CiAgICB9CiAgICBm
			dW5jdGlvbiBkZWxldGVIKGRpciwgdW5pdCkgewogICAgICBpZiAoIXBvc0VxKHNlbC5mcm9tLCBz
			ZWwudG8pKSByZXBsYWNlUmFuZ2UoIiIsIHNlbC5mcm9tLCBzZWwudG8pOwogICAgICBlbHNlIGlm
			IChkaXIgPCAwKSByZXBsYWNlUmFuZ2UoIiIsIGZpbmRQb3NIKGRpciwgdW5pdCksIHNlbC50byk7
			CiAgICAgIGVsc2UgcmVwbGFjZVJhbmdlKCIiLCBzZWwuZnJvbSwgZmluZFBvc0goZGlyLCB1bml0
			KSk7CiAgICAgIHVzZXJTZWxDaGFuZ2UgPSB0cnVlOwogICAgfQogICAgdmFyIGdvYWxDb2x1bW4g
			PSBudWxsOwogICAgZnVuY3Rpb24gbW92ZVYoZGlyLCB1bml0KSB7CiAgICAgIHZhciBkaXN0ID0g
			MCwgcG9zID0gbG9jYWxDb29yZHMoc2VsLmludmVydGVkID8gc2VsLmZyb20gOiBzZWwudG8sIHRy
			dWUpOwogICAgICBpZiAoZ29hbENvbHVtbiAhPSBudWxsKSBwb3MueCA9IGdvYWxDb2x1bW47CiAg
			ICAgIGlmICh1bml0ID09ICJwYWdlIikgZGlzdCA9IE1hdGgubWluKHNjcm9sbGVyLmNsaWVudEhl
			aWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGll
			bnRIZWlnaHQpOwogICAgICBlbHNlIGlmICh1bml0ID09ICJsaW5lIikgZGlzdCA9IHRleHRIZWln
			aHQoKTsKICAgICAgdmFyIHRhcmdldCA9IGNvb3Jkc0NoYXIocG9zLngsIHBvcy55ICsgZGlzdCAq
			IGRpciArIDIpOwogICAgICBzZXRDdXJzb3IodGFyZ2V0LmxpbmUsIHRhcmdldC5jaCwgdHJ1ZSk7
			CiAgICAgIGdvYWxDb2x1bW4gPSBwb3MueDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZWxlY3RXb3Jk
			QXQocG9zKSB7CiAgICAgIHZhciBsaW5lID0gZ2V0TGluZShwb3MubGluZSkudGV4dDsKICAgICAg
			dmFyIHN0YXJ0ID0gcG9zLmNoLCBlbmQgPSBwb3MuY2g7CiAgICAgIHdoaWxlIChzdGFydCA+IDAg
			JiYgaXNXb3JkQ2hhcihsaW5lLmNoYXJBdChzdGFydCAtIDEpKSkgLS1zdGFydDsKICAgICAgd2hp
			bGUgKGVuZCA8IGxpbmUubGVuZ3RoICYmIGlzV29yZENoYXIobGluZS5jaGFyQXQoZW5kKSkpICsr
			ZW5kOwogICAgICBzZXRTZWxlY3Rpb25Vc2VyKHtsaW5lOiBwb3MubGluZSwgY2g6IHN0YXJ0fSwg
			e2xpbmU6IHBvcy5saW5lLCBjaDogZW5kfSk7CiAgICB9CiAgICBmdW5jdGlvbiBzZWxlY3RMaW5l
			KGxpbmUpIHsKICAgICAgc2V0U2VsZWN0aW9uVXNlcih7bGluZTogbGluZSwgY2g6IDB9LCBjbGlw
			UG9zKHtsaW5lOiBsaW5lICsgMSwgY2g6IDB9KSk7CiAgICB9CiAgICBmdW5jdGlvbiBpbmRlbnRT
			ZWxlY3RlZChtb2RlKSB7CiAgICAgIGlmIChwb3NFcShzZWwuZnJvbSwgc2VsLnRvKSkgcmV0dXJu
			IGluZGVudExpbmUoc2VsLmZyb20ubGluZSwgbW9kZSk7CiAgICAgIHZhciBlID0gc2VsLnRvLmxp
			bmUgLSAoc2VsLnRvLmNoID8gMCA6IDEpOwogICAgICBmb3IgKHZhciBpID0gc2VsLmZyb20ubGlu
			ZTsgaSA8PSBlOyArK2kpIGluZGVudExpbmUoaSwgbW9kZSk7CiAgICB9CgogICAgZnVuY3Rpb24g
			aW5kZW50TGluZShuLCBob3cpIHsKICAgICAgaWYgKCFob3cpIGhvdyA9ICJhZGQiOwogICAgICBp
			ZiAoaG93ID09ICJzbWFydCIpIHsKICAgICAgICBpZiAoIW1vZGUuaW5kZW50KSBob3cgPSAicHJl
			diI7CiAgICAgICAgZWxzZSB2YXIgc3RhdGUgPSBnZXRTdGF0ZUJlZm9yZShuKTsKICAgICAgfQoK
			ICAgICAgdmFyIGxpbmUgPSBnZXRMaW5lKG4pLCBjdXJTcGFjZSA9IGxpbmUuaW5kZW50YXRpb24o
			b3B0aW9ucy50YWJTaXplKSwKICAgICAgICAgIGN1clNwYWNlU3RyaW5nID0gbGluZS50ZXh0Lm1h
			dGNoKC9eXHMqLylbMF0sIGluZGVudGF0aW9uOwogICAgICBpZiAoaG93ID09ICJwcmV2Iikgewog
			ICAgICAgIGlmIChuKSBpbmRlbnRhdGlvbiA9IGdldExpbmUobi0xKS5pbmRlbnRhdGlvbihvcHRp
			b25zLnRhYlNpemUpOwogICAgICAgIGVsc2UgaW5kZW50YXRpb24gPSAwOwogICAgICB9CiAgICAg
			IGVsc2UgaWYgKGhvdyA9PSAic21hcnQiKSBpbmRlbnRhdGlvbiA9IG1vZGUuaW5kZW50KHN0YXRl
			LCBsaW5lLnRleHQuc2xpY2UoY3VyU3BhY2VTdHJpbmcubGVuZ3RoKSwgbGluZS50ZXh0KTsKICAg
			ICAgZWxzZSBpZiAoaG93ID09ICJhZGQiKSBpbmRlbnRhdGlvbiA9IGN1clNwYWNlICsgb3B0aW9u
			cy5pbmRlbnRVbml0OwogICAgICBlbHNlIGlmIChob3cgPT0gInN1YnRyYWN0IikgaW5kZW50YXRp
			b24gPSBjdXJTcGFjZSAtIG9wdGlvbnMuaW5kZW50VW5pdDsKICAgICAgaW5kZW50YXRpb24gPSBN
			YXRoLm1heCgwLCBpbmRlbnRhdGlvbik7CiAgICAgIHZhciBkaWZmID0gaW5kZW50YXRpb24gLSBj
			dXJTcGFjZTsKCiAgICAgIGlmICghZGlmZikgewogICAgICAgIGlmIChzZWwuZnJvbS5saW5lICE9
			IG4gJiYgc2VsLnRvLmxpbmUgIT0gbikgcmV0dXJuOwogICAgICAgIHZhciBpbmRlbnRTdHJpbmcg
			PSBjdXJTcGFjZVN0cmluZzsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB2YXIgaW5kZW50
			U3RyaW5nID0gIiIsIHBvcyA9IDA7CiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZW50V2l0aFRhYnMp
			CiAgICAgICAgICBmb3IgKHZhciBpID0gTWF0aC5mbG9vcihpbmRlbnRhdGlvbiAvIG9wdGlvbnMu
			dGFiU2l6ZSk7IGk7IC0taSkge3BvcyArPSBvcHRpb25zLnRhYlNpemU7IGluZGVudFN0cmluZyAr
			PSAiXHQiO30KICAgICAgICB3aGlsZSAocG9zIDwgaW5kZW50YXRpb24pIHsrK3BvczsgaW5kZW50
			U3RyaW5nICs9ICIgIjt9CiAgICAgIH0KCiAgICAgIHJlcGxhY2VSYW5nZShpbmRlbnRTdHJpbmcs
			IHtsaW5lOiBuLCBjaDogMH0sIHtsaW5lOiBuLCBjaDogY3VyU3BhY2VTdHJpbmcubGVuZ3RofSk7
			CiAgICB9CgogICAgZnVuY3Rpb24gbG9hZE1vZGUoKSB7CiAgICAgIG1vZGUgPSBDb2RlTWlycm9y
			LmdldE1vZGUob3B0aW9ucywgb3B0aW9ucy5tb2RlKTsKICAgICAgZG9jLml0ZXIoMCwgZG9jLnNp
			emUsIGZ1bmN0aW9uKGxpbmUpIHsgbGluZS5zdGF0ZUFmdGVyID0gbnVsbDsgfSk7CiAgICAgIHdv
			cmsgPSBbMF07CiAgICAgIHN0YXJ0V29ya2VyKCk7CiAgICB9CiAgICBmdW5jdGlvbiBndXR0ZXJD
			aGFuZ2VkKCkgewogICAgICB2YXIgdmlzaWJsZSA9IG9wdGlvbnMuZ3V0dGVyIHx8IG9wdGlvbnMu
			bGluZU51bWJlcnM7CiAgICAgIGd1dHRlci5zdHlsZS5kaXNwbGF5ID0gdmlzaWJsZSA/ICIiIDog
			Im5vbmUiOwogICAgICBpZiAodmlzaWJsZSkgZ3V0dGVyRGlydHkgPSB0cnVlOwogICAgICBlbHNl
			IGxpbmVEaXYucGFyZW50Tm9kZS5zdHlsZS5tYXJnaW5MZWZ0ID0gMDsKICAgIH0KICAgIGZ1bmN0
			aW9uIHdyYXBwaW5nQ2hhbmdlZChmcm9tLCB0bykgewogICAgICBpZiAob3B0aW9ucy5saW5lV3Jh
			cHBpbmcpIHsKICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSArPSAiIENvZGVNaXJyb3Itd3JhcCI7
			CiAgICAgICAgdmFyIHBlckxpbmUgPSBzY3JvbGxlci5jbGllbnRXaWR0aCAvIGNoYXJXaWR0aCgp
			IC0gMzsKICAgICAgICBkb2MuaXRlcigwLCBkb2Muc2l6ZSwgZnVuY3Rpb24obGluZSkgewogICAg
			ICAgICAgaWYgKGxpbmUuaGlkZGVuKSByZXR1cm47CiAgICAgICAgICB2YXIgZ3Vlc3MgPSBNYXRo
			LmNlaWwobGluZS50ZXh0Lmxlbmd0aCAvIHBlckxpbmUpIHx8IDE7CiAgICAgICAgICBpZiAoZ3Vl
			c3MgIT0gMSkgdXBkYXRlTGluZUhlaWdodChsaW5lLCBndWVzcyk7CiAgICAgICAgfSk7CiAgICAg
			ICAgbGluZVNwYWNlLnN0eWxlLndpZHRoID0gY29kZS5zdHlsZS53aWR0aCA9ICIiOwogICAgICB9
			IGVsc2UgewogICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gd3JhcHBlci5jbGFzc05hbWUucmVw
			bGFjZSgiIENvZGVNaXJyb3Itd3JhcCIsICIiKTsKICAgICAgICBtYXhXaWR0aCA9IG51bGw7IG1h
			eExpbmUgPSAiIjsKICAgICAgICBkb2MuaXRlcigwLCBkb2Muc2l6ZSwgZnVuY3Rpb24obGluZSkg
			ewogICAgICAgICAgaWYgKGxpbmUuaGVpZ2h0ICE9IDEgJiYgIWxpbmUuaGlkZGVuKSB1cGRhdGVM
			aW5lSGVpZ2h0KGxpbmUsIDEpOwogICAgICAgICAgaWYgKGxpbmUudGV4dC5sZW5ndGggPiBtYXhM
			aW5lLmxlbmd0aCkgbWF4TGluZSA9IGxpbmUudGV4dDsKICAgICAgICB9KTsKICAgICAgfQogICAg
			ICBjaGFuZ2VzLnB1c2goe2Zyb206IDAsIHRvOiBkb2Muc2l6ZX0pOwogICAgfQogICAgZnVuY3Rp
			b24gbWFrZVRhYihjb2wpIHsKICAgICAgdmFyIHcgPSBvcHRpb25zLnRhYlNpemUgLSBjb2wgJSBv
			cHRpb25zLnRhYlNpemU7CiAgICAgIGZvciAodmFyIHN0ciA9ICc8c3BhbiBjbGFzcz0iY20tdGFi
			Ij4nLCBpID0gMDsgaSA8IHc7ICsraSkgc3RyICs9ICIgIjsKICAgICAgcmV0dXJuIHtodG1sOiBz
			dHIgKyAiPC9zcGFuPiIsIHdpZHRoOiB3fTsKICAgIH0KICAgIGZ1bmN0aW9uIHRoZW1lQ2hhbmdl
			ZCgpIHsKICAgICAgc2Nyb2xsZXIuY2xhc3NOYW1lID0gc2Nyb2xsZXIuY2xhc3NOYW1lLnJlcGxh
			Y2UoL1xzKmNtLXMtXHcrL2csICIiKSArCiAgICAgICAgb3B0aW9ucy50aGVtZS5yZXBsYWNlKC8o
			XnxccylccyovZywgIiBjbS1zLSIpOwogICAgfQoKICAgIGZ1bmN0aW9uIFRleHRNYXJrZXIoKSB7
			IHRoaXMuc2V0ID0gW107IH0KICAgIFRleHRNYXJrZXIucHJvdG90eXBlLmNsZWFyID0gb3BlcmF0
			aW9uKGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWluID0gSW5maW5pdHksIG1heCA9IC1JbmZpbml0
			eTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLnNldC5sZW5ndGg7IGkgPCBlOyArK2kp
			IHsKICAgICAgICB2YXIgbGluZSA9IHRoaXMuc2V0W2ldLCBtayA9IGxpbmUubWFya2VkOwogICAg
			ICAgIGlmICghbWsgfHwgIWxpbmUucGFyZW50KSBjb250aW51ZTsKICAgICAgICB2YXIgbGluZU4g
			PSBsaW5lTm8obGluZSk7CiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBsaW5lTik7IG1heCA9
			IE1hdGgubWF4KG1heCwgbGluZU4pOwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWsubGVu
			Z3RoOyArK2opCiAgICAgICAgICBpZiAobWtbal0uc2V0ID09IHRoaXMuc2V0KSBtay5zcGxpY2Uo
			ai0tLCAxKTsKICAgICAgfQogICAgICBpZiAobWluICE9IEluZmluaXR5KQogICAgICAgIGNoYW5n
			ZXMucHVzaCh7ZnJvbTogbWluLCB0bzogbWF4ICsgMX0pOwogICAgfSk7CiAgICBUZXh0TWFya2Vy
			LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBmcm9tLCB0bzsKICAgICAg
			Zm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLnNldC5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAg
			ICB2YXIgbGluZSA9IHRoaXMuc2V0W2ldLCBtayA9IGxpbmUubWFya2VkOwogICAgICAgIGZvciAo
			dmFyIGogPSAwOyBqIDwgbWsubGVuZ3RoOyArK2opIHsKICAgICAgICAgIHZhciBtYXJrID0gbWtb
			al07CiAgICAgICAgICBpZiAobWFyay5zZXQgPT0gdGhpcy5zZXQpIHsKICAgICAgICAgICAgaWYg
			KG1hcmsuZnJvbSAhPSBudWxsIHx8IG1hcmsudG8gIT0gbnVsbCkgewogICAgICAgICAgICAgIHZh
			ciBmb3VuZCA9IGxpbmVObyhsaW5lKTsKICAgICAgICAgICAgICBpZiAoZm91bmQgIT0gbnVsbCkg
			ewogICAgICAgICAgICAgICAgaWYgKG1hcmsuZnJvbSAhPSBudWxsKSBmcm9tID0ge2xpbmU6IGZv
			dW5kLCBjaDogbWFyay5mcm9tfTsKICAgICAgICAgICAgICAgIGlmIChtYXJrLnRvICE9IG51bGwp
			IHRvID0ge2xpbmU6IGZvdW5kLCBjaDogbWFyay50b307CiAgICAgICAgICAgICAgfQogICAgICAg
			ICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB7ZnJvbTog
			ZnJvbSwgdG86IHRvfTsKICAgIH07CgogICAgZnVuY3Rpb24gbWFya1RleHQoZnJvbSwgdG8sIGNs
			YXNzTmFtZSkgewogICAgICBmcm9tID0gY2xpcFBvcyhmcm9tKTsgdG8gPSBjbGlwUG9zKHRvKTsK
			ICAgICAgdmFyIHRtID0gbmV3IFRleHRNYXJrZXIoKTsKICAgICAgZnVuY3Rpb24gYWRkKGxpbmUs
			IGZyb20sIHRvLCBjbGFzc05hbWUpIHsKICAgICAgICBnZXRMaW5lKGxpbmUpLmFkZE1hcmsobmV3
			IE1hcmtlZFRleHQoZnJvbSwgdG8sIGNsYXNzTmFtZSwgdG0uc2V0KSk7CiAgICAgIH0KICAgICAg
			aWYgKGZyb20ubGluZSA9PSB0by5saW5lKSBhZGQoZnJvbS5saW5lLCBmcm9tLmNoLCB0by5jaCwg
			Y2xhc3NOYW1lKTsKICAgICAgZWxzZSB7CiAgICAgICAgYWRkKGZyb20ubGluZSwgZnJvbS5jaCwg
			bnVsbCwgY2xhc3NOYW1lKTsKICAgICAgICBmb3IgKHZhciBpID0gZnJvbS5saW5lICsgMSwgZSA9
			IHRvLmxpbmU7IGkgPCBlOyArK2kpCiAgICAgICAgICBhZGQoaSwgbnVsbCwgbnVsbCwgY2xhc3NO
			YW1lKTsKICAgICAgICBhZGQodG8ubGluZSwgbnVsbCwgdG8uY2gsIGNsYXNzTmFtZSk7CiAgICAg
			IH0KICAgICAgY2hhbmdlcy5wdXNoKHtmcm9tOiBmcm9tLmxpbmUsIHRvOiB0by5saW5lICsgMX0p
			OwogICAgICByZXR1cm4gdG07CiAgICB9CgogICAgZnVuY3Rpb24gc2V0Qm9va21hcmsocG9zKSB7
			CiAgICAgIHBvcyA9IGNsaXBQb3MocG9zKTsKICAgICAgdmFyIGJtID0gbmV3IEJvb2ttYXJrKHBv
			cy5jaCk7CiAgICAgIGdldExpbmUocG9zLmxpbmUpLmFkZE1hcmsoYm0pOwogICAgICByZXR1cm4g
			Ym07CiAgICB9CgogICAgZnVuY3Rpb24gYWRkR3V0dGVyTWFya2VyKGxpbmUsIHRleHQsIGNsYXNz
			TmFtZSkgewogICAgICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIpIGxpbmUgPSBnZXRMaW5l
			KGNsaXBMaW5lKGxpbmUpKTsKICAgICAgbGluZS5ndXR0ZXJNYXJrZXIgPSB7dGV4dDogdGV4dCwg
			c3R5bGU6IGNsYXNzTmFtZX07CiAgICAgIGd1dHRlckRpcnR5ID0gdHJ1ZTsKICAgICAgcmV0dXJu
			IGxpbmU7CiAgICB9CiAgICBmdW5jdGlvbiByZW1vdmVHdXR0ZXJNYXJrZXIobGluZSkgewogICAg
			ICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIpIGxpbmUgPSBnZXRMaW5lKGNsaXBMaW5lKGxp
			bmUpKTsKICAgICAgbGluZS5ndXR0ZXJNYXJrZXIgPSBudWxsOwogICAgICBndXR0ZXJEaXJ0eSA9
			IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlTGluZShoYW5kbGUsIG9wKSB7CiAgICAg
			IHZhciBubyA9IGhhbmRsZSwgbGluZSA9IGhhbmRsZTsKICAgICAgaWYgKHR5cGVvZiBoYW5kbGUg
			PT0gIm51bWJlciIpIGxpbmUgPSBnZXRMaW5lKGNsaXBMaW5lKGhhbmRsZSkpOwogICAgICBlbHNl
			IG5vID0gbGluZU5vKGhhbmRsZSk7CiAgICAgIGlmIChubyA9PSBudWxsKSByZXR1cm4gbnVsbDsK
			ICAgICAgaWYgKG9wKGxpbmUsIG5vKSkgY2hhbmdlcy5wdXNoKHtmcm9tOiBubywgdG86IG5vICsg
			MX0pOwogICAgICBlbHNlIHJldHVybiBudWxsOwogICAgICByZXR1cm4gbGluZTsKICAgIH0KICAg
			IGZ1bmN0aW9uIHNldExpbmVDbGFzcyhoYW5kbGUsIGNsYXNzTmFtZSkgewogICAgICByZXR1cm4g
			Y2hhbmdlTGluZShoYW5kbGUsIGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBpZiAobGluZS5jbGFz
			c05hbWUgIT0gY2xhc3NOYW1lKSB7CiAgICAgICAgICBsaW5lLmNsYXNzTmFtZSA9IGNsYXNzTmFt
			ZTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICBm
			dW5jdGlvbiBzZXRMaW5lSGlkZGVuKGhhbmRsZSwgaGlkZGVuKSB7CiAgICAgIHJldHVybiBjaGFu
			Z2VMaW5lKGhhbmRsZSwgZnVuY3Rpb24obGluZSwgbm8pIHsKICAgICAgICBpZiAobGluZS5oaWRk
			ZW4gIT0gaGlkZGVuKSB7CiAgICAgICAgICBsaW5lLmhpZGRlbiA9IGhpZGRlbjsKICAgICAgICAg
			IHVwZGF0ZUxpbmVIZWlnaHQobGluZSwgaGlkZGVuID8gMCA6IDEpOwogICAgICAgICAgdmFyIGZs
			aW5lID0gc2VsLmZyb20ubGluZSwgdGxpbmUgPSBzZWwudG8ubGluZTsKICAgICAgICAgIGlmICho
			aWRkZW4gJiYgKGZsaW5lID09IG5vIHx8IHRsaW5lID09IG5vKSkgewogICAgICAgICAgICB2YXIg
			ZnJvbSA9IGZsaW5lID09IG5vID8gc2tpcEhpZGRlbih7bGluZTogZmxpbmUsIGNoOiAwfSwgZmxp
			bmUsIDApIDogc2VsLmZyb207CiAgICAgICAgICAgIHZhciB0byA9IHRsaW5lID09IG5vID8gc2tp
			cEhpZGRlbih7bGluZTogdGxpbmUsIGNoOiAwfSwgdGxpbmUsIDApIDogc2VsLnRvOwogICAgICAg
			ICAgICBzZXRTZWxlY3Rpb24oZnJvbSwgdG8pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJu
			IChndXR0ZXJEaXJ0eSA9IHRydWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgZnVu
			Y3Rpb24gbGluZUluZm8obGluZSkgewogICAgICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIp
			IHsKICAgICAgICBpZiAoIWlzTGluZShsaW5lKSkgcmV0dXJuIG51bGw7CiAgICAgICAgdmFyIG4g
			PSBsaW5lOwogICAgICAgIGxpbmUgPSBnZXRMaW5lKGxpbmUpOwogICAgICAgIGlmICghbGluZSkg
			cmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgdmFyIG4gPSBsaW5lTm8o
			bGluZSk7CiAgICAgICAgaWYgKG4gPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAg
			dmFyIG1hcmtlciA9IGxpbmUuZ3V0dGVyTWFya2VyOwogICAgICByZXR1cm4ge2xpbmU6IG4sIGhh
			bmRsZTogbGluZSwgdGV4dDogbGluZS50ZXh0LCBtYXJrZXJUZXh0OiBtYXJrZXIgJiYgbWFya2Vy
			LnRleHQsCiAgICAgICAgICAgICAgbWFya2VyQ2xhc3M6IG1hcmtlciAmJiBtYXJrZXIuc3R5bGUs
			IGxpbmVDbGFzczogbGluZS5jbGFzc05hbWV9OwogICAgfQoKICAgIGZ1bmN0aW9uIHN0cmluZ1dp
			ZHRoKHN0cikgewogICAgICBtZWFzdXJlLmlubmVySFRNTCA9ICI8cHJlPjxzcGFuPng8L3NwYW4+
			PC9wcmU+IjsKICAgICAgbWVhc3VyZS5maXJzdENoaWxkLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5u
			b2RlVmFsdWUgPSBzdHI7CiAgICAgIHJldHVybiBtZWFzdXJlLmZpcnN0Q2hpbGQuZmlyc3RDaGls
			ZC5vZmZzZXRXaWR0aCB8fCAxMDsKICAgIH0KICAgIC8vIFRoZXNlIGFyZSB1c2VkIHRvIGdvIGZy
			b20gcGl4ZWwgcG9zaXRpb25zIHRvIGNoYXJhY3RlcgogICAgLy8gcG9zaXRpb25zLCB0YWtpbmcg
			dmFyeWluZyBjaGFyYWN0ZXIgd2lkdGhzIGludG8gYWNjb3VudC4KICAgIGZ1bmN0aW9uIGNoYXJG
			cm9tWChsaW5lLCB4KSB7CiAgICAgIGlmICh4IDw9IDApIHJldHVybiAwOwogICAgICB2YXIgbGlu
			ZU9iaiA9IGdldExpbmUobGluZSksIHRleHQgPSBsaW5lT2JqLnRleHQ7CiAgICAgIGZ1bmN0aW9u
			IGdldFgobGVuKSB7CiAgICAgICAgbWVhc3VyZS5pbm5lckhUTUwgPSAiPHByZT48c3Bhbj4iICsg
			bGluZU9iai5nZXRIVE1MKG1ha2VUYWIsIGxlbikgKyAiPC9zcGFuPjwvcHJlPiI7CiAgICAgICAg
			cmV0dXJuIG1lYXN1cmUuZmlyc3RDaGlsZC5maXJzdENoaWxkLm9mZnNldFdpZHRoOwogICAgICB9
			CiAgICAgIHZhciBmcm9tID0gMCwgZnJvbVggPSAwLCB0byA9IHRleHQubGVuZ3RoLCB0b1g7CiAg
			ICAgIC8vIEd1ZXNzIGEgc3VpdGFibGUgdXBwZXIgYm91bmQgZm9yIG91ciBzZWFyY2guCiAgICAg
			IHZhciBlc3RpbWF0ZWQgPSBNYXRoLm1pbih0bywgTWF0aC5jZWlsKHggLyBjaGFyV2lkdGgoKSkp
			OwogICAgICBmb3IgKDs7KSB7CiAgICAgICAgdmFyIGVzdFggPSBnZXRYKGVzdGltYXRlZCk7CiAg
			ICAgICAgaWYgKGVzdFggPD0geCAmJiBlc3RpbWF0ZWQgPCB0bykgZXN0aW1hdGVkID0gTWF0aC5t
			aW4odG8sIE1hdGguY2VpbChlc3RpbWF0ZWQgKiAxLjIpKTsKICAgICAgICBlbHNlIHt0b1ggPSBl
			c3RYOyB0byA9IGVzdGltYXRlZDsgYnJlYWs7fQogICAgICB9CiAgICAgIGlmICh4ID4gdG9YKSBy
			ZXR1cm4gdG87CiAgICAgIC8vIFRyeSB0byBndWVzcyBhIHN1aXRhYmxlIGxvd2VyIGJvdW5kIGFz
			IHdlbGwuCiAgICAgIGVzdGltYXRlZCA9IE1hdGguZmxvb3IodG8gKiAwLjgpOyBlc3RYID0gZ2V0
			WChlc3RpbWF0ZWQpOwogICAgICBpZiAoZXN0WCA8IHgpIHtmcm9tID0gZXN0aW1hdGVkOyBmcm9t
			WCA9IGVzdFg7fQogICAgICAvLyBEbyBhIGJpbmFyeSBzZWFyY2ggYmV0d2VlbiB0aGVzZSBib3Vu
			ZHMuCiAgICAgIGZvciAoOzspIHsKICAgICAgICBpZiAodG8gLSBmcm9tIDw9IDEpIHJldHVybiAo
			dG9YIC0geCA+IHggLSBmcm9tWCkgPyBmcm9tIDogdG87CiAgICAgICAgdmFyIG1pZGRsZSA9IE1h
			dGguY2VpbCgoZnJvbSArIHRvKSAvIDIpLCBtaWRkbGVYID0gZ2V0WChtaWRkbGUpOwogICAgICAg
			IGlmIChtaWRkbGVYID4geCkge3RvID0gbWlkZGxlOyB0b1ggPSBtaWRkbGVYO30KICAgICAgICBl
			bHNlIHtmcm9tID0gbWlkZGxlOyBmcm9tWCA9IG1pZGRsZVg7fQogICAgICB9CiAgICB9CgogICAg
			dmFyIHRlbXBJZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmKS50b1N0cmlu
			ZygxNik7CiAgICBmdW5jdGlvbiBtZWFzdXJlTGluZShsaW5lLCBjaCkgewogICAgICBpZiAoY2gg
			PT0gMCkgcmV0dXJuIHt0b3A6IDAsIGxlZnQ6IDB9OwogICAgICB2YXIgZXh0cmEgPSAiIjsKICAg
			ICAgLy8gSW5jbHVkZSBleHRyYSB0ZXh0IGF0IHRoZSBlbmQgdG8gbWFrZSBzdXJlIHRoZSBtZWFz
			dXJlZCBsaW5lIGlzIHdyYXBwZWQgaW4gdGhlIHJpZ2h0IHdheS4KICAgICAgaWYgKG9wdGlvbnMu
			bGluZVdyYXBwaW5nKSB7CiAgICAgICAgdmFyIGVuZCA9IGxpbmUudGV4dC5pbmRleE9mKCIgIiwg
			Y2ggKyAyKTsKICAgICAgICBleHRyYSA9IGh0bWxFc2NhcGUobGluZS50ZXh0LnNsaWNlKGNoICsg
			MSwgZW5kIDwgMCA/IGxpbmUudGV4dC5sZW5ndGggOiBlbmQgKyAoaWUgPyA1IDogMCkpKTsKICAg
			ICAgfQogICAgICBtZWFzdXJlLmlubmVySFRNTCA9ICI8cHJlPiIgKyBsaW5lLmdldEhUTUwobWFr
			ZVRhYiwgY2gpICsKICAgICAgICAnPHNwYW4gaWQ9IkNvZGVNaXJyb3ItdGVtcC0nICsgdGVtcElk
			ICsgJyI+JyArIGh0bWxFc2NhcGUobGluZS50ZXh0LmNoYXJBdChjaCkgfHwgIiAiKSArICI8L3Nw
			YW4+IiArCiAgICAgICAgZXh0cmEgKyAiPC9wcmU+IjsKICAgICAgdmFyIGVsdCA9IGRvY3VtZW50
			LmdldEVsZW1lbnRCeUlkKCJDb2RlTWlycm9yLXRlbXAtIiArIHRlbXBJZCk7CiAgICAgIHZhciB0
			b3AgPSBlbHQub2Zmc2V0VG9wLCBsZWZ0ID0gZWx0Lm9mZnNldExlZnQ7CiAgICAgIC8vIE9sZGVy
			IElFcyByZXBvcnQgemVybyBvZmZzZXRzIGZvciBzcGFucyBkaXJlY3RseSBhZnRlciBhIHdyYXAK
			ICAgICAgaWYgKGllICYmIHRvcCA9PSAwICYmIGxlZnQgPT0gMCkgewogICAgICAgIHZhciBiYWNr
			dXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICAgICAgYmFja3VwLmlubmVy
			SFRNTCA9ICJ4IjsKICAgICAgICBlbHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYmFja3VwLCBl
			bHQubmV4dFNpYmxpbmcpOwogICAgICAgIHRvcCA9IGJhY2t1cC5vZmZzZXRUb3A7CiAgICAgIH0K
			ICAgICAgcmV0dXJuIHt0b3A6IHRvcCwgbGVmdDogbGVmdH07CiAgICB9CiAgICBmdW5jdGlvbiBs
			b2NhbENvb3Jkcyhwb3MsIGluTGluZVdyYXApIHsKICAgICAgdmFyIHgsIGxoID0gdGV4dEhlaWdo
			dCgpLCB5ID0gbGggKiAoaGVpZ2h0QXRMaW5lKGRvYywgcG9zLmxpbmUpIC0gKGluTGluZVdyYXAg
			PyBkaXNwbGF5T2Zmc2V0IDogMCkpOwogICAgICBpZiAocG9zLmNoID09IDApIHggPSAwOwogICAg
			ICBlbHNlIHsKICAgICAgICB2YXIgc3AgPSBtZWFzdXJlTGluZShnZXRMaW5lKHBvcy5saW5lKSwg
			cG9zLmNoKTsKICAgICAgICB4ID0gc3AubGVmdDsKICAgICAgICBpZiAob3B0aW9ucy5saW5lV3Jh
			cHBpbmcpIHkgKz0gTWF0aC5tYXgoMCwgc3AudG9wKTsKICAgICAgfQogICAgICByZXR1cm4ge3g6
			IHgsIHk6IHksIHlCb3Q6IHkgKyBsaH07CiAgICB9CiAgICAvLyBDb29yZHMgbXVzdCBiZSBsaW5l
			U3BhY2UtbG9jYWwKICAgIGZ1bmN0aW9uIGNvb3Jkc0NoYXIoeCwgeSkgewogICAgICBpZiAoeSA8
			IDApIHkgPSAwOwogICAgICB2YXIgdGggPSB0ZXh0SGVpZ2h0KCksIGN3ID0gY2hhcldpZHRoKCks
			IGhlaWdodFBvcyA9IGRpc3BsYXlPZmZzZXQgKyBNYXRoLmZsb29yKHkgLyB0aCk7CiAgICAgIHZh
			ciBsaW5lTm8gPSBsaW5lQXRIZWlnaHQoZG9jLCBoZWlnaHRQb3MpOwogICAgICBpZiAobGluZU5v
			ID49IGRvYy5zaXplKSByZXR1cm4ge2xpbmU6IGRvYy5zaXplIC0gMSwgY2g6IGdldExpbmUoZG9j
			LnNpemUgLSAxKS50ZXh0Lmxlbmd0aH07CiAgICAgIHZhciBsaW5lT2JqID0gZ2V0TGluZShsaW5l
			Tm8pLCB0ZXh0ID0gbGluZU9iai50ZXh0OwogICAgICB2YXIgdHcgPSBvcHRpb25zLmxpbmVXcmFw
			cGluZywgaW5uZXJPZmYgPSB0dyA/IGhlaWdodFBvcyAtIGhlaWdodEF0TGluZShkb2MsIGxpbmVO
			bykgOiAwOwogICAgICBpZiAoeCA8PSAwICYmIGlubmVyT2ZmID09IDApIHJldHVybiB7bGluZTog
			bGluZU5vLCBjaDogMH07CiAgICAgIGZ1bmN0aW9uIGdldFgobGVuKSB7CiAgICAgICAgdmFyIHNw
			ID0gbWVhc3VyZUxpbmUobGluZU9iaiwgbGVuKTsKICAgICAgICBpZiAodHcpIHsKICAgICAgICAg
			IHZhciBvZmYgPSBNYXRoLnJvdW5kKHNwLnRvcCAvIHRoKTsKICAgICAgICAgIHJldHVybiBNYXRo
			Lm1heCgwLCBzcC5sZWZ0ICsgKG9mZiAtIGlubmVyT2ZmKSAqIHNjcm9sbGVyLmNsaWVudFdpZHRo
			KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNwLmxlZnQ7CiAgICAgIH0KICAgICAgdmFyIGZy
			b20gPSAwLCBmcm9tWCA9IDAsIHRvID0gdGV4dC5sZW5ndGgsIHRvWDsKICAgICAgLy8gR3Vlc3Mg
			YSBzdWl0YWJsZSB1cHBlciBib3VuZCBmb3Igb3VyIHNlYXJjaC4KICAgICAgdmFyIGVzdGltYXRl
			ZCA9IE1hdGgubWluKHRvLCBNYXRoLmNlaWwoKHggKyBpbm5lck9mZiAqIHNjcm9sbGVyLmNsaWVu
			dFdpZHRoICogLjkpIC8gY3cpKTsKICAgICAgZm9yICg7OykgewogICAgICAgIHZhciBlc3RYID0g
			Z2V0WChlc3RpbWF0ZWQpOwogICAgICAgIGlmIChlc3RYIDw9IHggJiYgZXN0aW1hdGVkIDwgdG8p
			IGVzdGltYXRlZCA9IE1hdGgubWluKHRvLCBNYXRoLmNlaWwoZXN0aW1hdGVkICogMS4yKSk7CiAg
			ICAgICAgZWxzZSB7dG9YID0gZXN0WDsgdG8gPSBlc3RpbWF0ZWQ7IGJyZWFrO30KICAgICAgfQog
			ICAgICBpZiAoeCA+IHRvWCkgcmV0dXJuIHtsaW5lOiBsaW5lTm8sIGNoOiB0b307CiAgICAgIC8v
			IFRyeSB0byBndWVzcyBhIHN1aXRhYmxlIGxvd2VyIGJvdW5kIGFzIHdlbGwuCiAgICAgIGVzdGlt
			YXRlZCA9IE1hdGguZmxvb3IodG8gKiAwLjgpOyBlc3RYID0gZ2V0WChlc3RpbWF0ZWQpOwogICAg
			ICBpZiAoZXN0WCA8IHgpIHtmcm9tID0gZXN0aW1hdGVkOyBmcm9tWCA9IGVzdFg7fQogICAgICAv
			LyBEbyBhIGJpbmFyeSBzZWFyY2ggYmV0d2VlbiB0aGVzZSBib3VuZHMuCiAgICAgIGZvciAoOzsp
			IHsKICAgICAgICBpZiAodG8gLSBmcm9tIDw9IDEpIHJldHVybiB7bGluZTogbGluZU5vLCBjaDog
			KHRvWCAtIHggPiB4IC0gZnJvbVgpID8gZnJvbSA6IHRvfTsKICAgICAgICB2YXIgbWlkZGxlID0g
			TWF0aC5jZWlsKChmcm9tICsgdG8pIC8gMiksIG1pZGRsZVggPSBnZXRYKG1pZGRsZSk7CiAgICAg
			ICAgaWYgKG1pZGRsZVggPiB4KSB7dG8gPSBtaWRkbGU7IHRvWCA9IG1pZGRsZVg7fQogICAgICAg
			IGVsc2Uge2Zyb20gPSBtaWRkbGU7IGZyb21YID0gbWlkZGxlWDt9CiAgICAgIH0KICAgIH0KICAg
			IGZ1bmN0aW9uIHBhZ2VDb29yZHMocG9zKSB7CiAgICAgIHZhciBsb2NhbCA9IGxvY2FsQ29vcmRz
			KHBvcywgdHJ1ZSksIG9mZiA9IGVsdE9mZnNldChsaW5lU3BhY2UpOwogICAgICByZXR1cm4ge3g6
			IG9mZi5sZWZ0ICsgbG9jYWwueCwgeTogb2ZmLnRvcCArIGxvY2FsLnksIHlCb3Q6IG9mZi50b3Ag
			KyBsb2NhbC55Qm90fTsKICAgIH0KCiAgICB2YXIgY2FjaGVkSGVpZ2h0LCBjYWNoZWRIZWlnaHRG
			b3IsIG1lYXN1cmVUZXh0OwogICAgZnVuY3Rpb24gdGV4dEhlaWdodCgpIHsKICAgICAgaWYgKG1l
			YXN1cmVUZXh0ID09IG51bGwpIHsKICAgICAgICBtZWFzdXJlVGV4dCA9ICI8cHJlPiI7CiAgICAg
			ICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OTsgKytpKSBtZWFzdXJlVGV4dCArPSAieDxici8+IjsK
			ICAgICAgICBtZWFzdXJlVGV4dCArPSAieDwvcHJlPiI7CiAgICAgIH0KICAgICAgdmFyIG9mZnNl
			dEhlaWdodCA9IGxpbmVEaXYuY2xpZW50SGVpZ2h0OwogICAgICBpZiAob2Zmc2V0SGVpZ2h0ID09
			IGNhY2hlZEhlaWdodEZvcikgcmV0dXJuIGNhY2hlZEhlaWdodDsKICAgICAgY2FjaGVkSGVpZ2h0
			Rm9yID0gb2Zmc2V0SGVpZ2h0OwogICAgICBtZWFzdXJlLmlubmVySFRNTCA9IG1lYXN1cmVUZXh0
			OwogICAgICBjYWNoZWRIZWlnaHQgPSBtZWFzdXJlLmZpcnN0Q2hpbGQub2Zmc2V0SGVpZ2h0IC8g
			NTAgfHwgMTsKICAgICAgbWVhc3VyZS5pbm5lckhUTUwgPSAiIjsKICAgICAgcmV0dXJuIGNhY2hl
			ZEhlaWdodDsKICAgIH0KICAgIHZhciBjYWNoZWRXaWR0aCwgY2FjaGVkV2lkdGhGb3IgPSAwOwog
			ICAgZnVuY3Rpb24gY2hhcldpZHRoKCkgewogICAgICBpZiAoc2Nyb2xsZXIuY2xpZW50V2lkdGgg
			PT0gY2FjaGVkV2lkdGhGb3IpIHJldHVybiBjYWNoZWRXaWR0aDsKICAgICAgY2FjaGVkV2lkdGhG
			b3IgPSBzY3JvbGxlci5jbGllbnRXaWR0aDsKICAgICAgcmV0dXJuIChjYWNoZWRXaWR0aCA9IHN0
			cmluZ1dpZHRoKCJ4IikpOwogICAgfQogICAgZnVuY3Rpb24gcGFkZGluZ1RvcCgpIHtyZXR1cm4g
			bGluZVNwYWNlLm9mZnNldFRvcDt9CiAgICBmdW5jdGlvbiBwYWRkaW5nTGVmdCgpIHtyZXR1cm4g
			bGluZVNwYWNlLm9mZnNldExlZnQ7fQoKICAgIGZ1bmN0aW9uIHBvc0Zyb21Nb3VzZShlLCBsaWJl
			cmFsKSB7CiAgICAgIHZhciBvZmZXID0gZWx0T2Zmc2V0KHNjcm9sbGVyLCB0cnVlKSwgeCwgeTsK
			ICAgICAgLy8gRmFpbHMgdW5wcmVkaWN0YWJseSBvbiBJRVs2N10gd2hlbiBtb3VzZSBpcyBkcmFn
			Z2VkIGFyb3VuZCBxdWlja2x5LgogICAgICB0cnkgeyB4ID0gZS5jbGllbnRYOyB5ID0gZS5jbGll
			bnRZOyB9IGNhdGNoIChlKSB7IHJldHVybiBudWxsOyB9CiAgICAgIC8vIFRoaXMgaXMgYSBtZXNz
			IG9mIGEgaGV1cmlzdGljIHRvIHRyeSBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgYQogICAgICAvLyBz
			Y3JvbGwtYmFyIHdhcyBjbGlja2VkIG9yIG5vdCwgYW5kIHRvIHJldHVybiBudWxsIGlmIG9uZSB3
			YXMKICAgICAgLy8gKGFuZCAhbGliZXJhbCkuCiAgICAgIGlmICghbGliZXJhbCAmJiAoeCAtIG9m
			ZlcubGVmdCA+IHNjcm9sbGVyLmNsaWVudFdpZHRoIHx8IHkgLSBvZmZXLnRvcCA+IHNjcm9sbGVy
			LmNsaWVudEhlaWdodCkpCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIHZhciBvZmZMID0gZWx0
			T2Zmc2V0KGxpbmVTcGFjZSwgdHJ1ZSk7CiAgICAgIHJldHVybiBjb29yZHNDaGFyKHggLSBvZmZM
			LmxlZnQsIHkgLSBvZmZMLnRvcCk7CiAgICB9CiAgICBmdW5jdGlvbiBvbkNvbnRleHRNZW51KGUp
			IHsKICAgICAgdmFyIHBvcyA9IHBvc0Zyb21Nb3VzZShlKSwgc2Nyb2xsUG9zID0gc2Nyb2xsZXIu
			c2Nyb2xsVG9wOwogICAgICBpZiAoIXBvcyB8fCB3aW5kb3cub3BlcmEpIHJldHVybjsgLy8gT3Bl
			cmEgaXMgZGlmZmljdWx0LgogICAgICBpZiAocG9zRXEoc2VsLmZyb20sIHNlbC50bykgfHwgcG9z
			TGVzcyhwb3MsIHNlbC5mcm9tKSB8fCAhcG9zTGVzcyhwb3MsIHNlbC50bykpCiAgICAgICAgb3Bl
			cmF0aW9uKHNldEN1cnNvcikocG9zLmxpbmUsIHBvcy5jaCk7CgogICAgICB2YXIgb2xkQ1NTID0g
			aW5wdXQuc3R5bGUuY3NzVGV4dDsKICAgICAgaW5wdXREaXYuc3R5bGUucG9zaXRpb24gPSAiYWJz
			b2x1dGUiOwogICAgICBpbnB1dC5zdHlsZS5jc3NUZXh0ID0gInBvc2l0aW9uOiBmaXhlZDsgd2lk
			dGg6IDMwcHg7IGhlaWdodDogMzBweDsgdG9wOiAiICsgKGUuY2xpZW50WSAtIDUpICsKICAgICAg
			ICAicHg7IGxlZnQ6ICIgKyAoZS5jbGllbnRYIC0gNSkgKyAicHg7IHotaW5kZXg6IDEwMDA7IGJh
			Y2tncm91bmQ6IHdoaXRlOyAiICsKICAgICAgICAiYm9yZGVyLXdpZHRoOiAwOyBvdXRsaW5lOiBu
			b25lOyBvdmVyZmxvdzogaGlkZGVuOyBvcGFjaXR5OiAuMDU7IGZpbHRlcjogYWxwaGEob3BhY2l0
			eT01KTsiOwogICAgICBsZWF2ZUlucHV0QWxvbmUgPSB0cnVlOwogICAgICB2YXIgdmFsID0gaW5w
			dXQudmFsdWUgPSBnZXRTZWxlY3Rpb24oKTsKICAgICAgZm9jdXNJbnB1dCgpOwogICAgICBzZWxl
			Y3RJbnB1dChpbnB1dCk7CiAgICAgIGZ1bmN0aW9uIHJlaGlkZSgpIHsKICAgICAgICB2YXIgbmV3
			VmFsID0gc3BsaXRMaW5lcyhpbnB1dC52YWx1ZSkuam9pbigiXG4iKTsKICAgICAgICBpZiAobmV3
			VmFsICE9IHZhbCkgb3BlcmF0aW9uKHJlcGxhY2VTZWxlY3Rpb24pKG5ld1ZhbCwgImVuZCIpOwog
			ICAgICAgIGlucHV0RGl2LnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIjsKICAgICAgICBpbnB1
			dC5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTOwogICAgICAgIGlmIChpZV9sdDkpIHNjcm9sbGVyLnNj
			cm9sbFRvcCA9IHNjcm9sbFBvczsKICAgICAgICBsZWF2ZUlucHV0QWxvbmUgPSBmYWxzZTsKICAg
			ICAgICByZXNldElucHV0KHRydWUpOwogICAgICAgIHNsb3dQb2xsKCk7CiAgICAgIH0KCiAgICAg
			IGlmIChnZWNrbykgewogICAgICAgIGVfc3RvcChlKTsKICAgICAgICB2YXIgbW91c2V1cCA9IGNv
			bm5lY3Qod2luZG93LCAibW91c2V1cCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgbW91c2V1cCgp
			OwogICAgICAgICAgc2V0VGltZW91dChyZWhpZGUsIDIwKTsKICAgICAgICB9LCB0cnVlKTsKICAg
			ICAgfSBlbHNlIHsKICAgICAgICBzZXRUaW1lb3V0KHJlaGlkZSwgNTApOwogICAgICB9CiAgICB9
			CgogICAgLy8gQ3Vyc29yLWJsaW5raW5nCiAgICBmdW5jdGlvbiByZXN0YXJ0QmxpbmsoKSB7CiAg
			ICAgIGNsZWFySW50ZXJ2YWwoYmxpbmtlcik7CiAgICAgIHZhciBvbiA9IHRydWU7CiAgICAgIGN1
			cnNvci5zdHlsZS52aXNpYmlsaXR5ID0gIiI7CiAgICAgIGJsaW5rZXIgPSBzZXRJbnRlcnZhbChm
			dW5jdGlvbigpIHsKICAgICAgICBjdXJzb3Iuc3R5bGUudmlzaWJpbGl0eSA9IChvbiA9ICFvbikg
			PyAiIiA6ICJoaWRkZW4iOwogICAgICB9LCA2NTApOwogICAgfQoKICAgIHZhciBtYXRjaGluZyA9
			IHsiKCI6ICIpPiIsICIpIjogIig8IiwgIlsiOiAiXT4iLCAiXSI6ICJbPCIsICJ7IjogIn0+Iiwg
			In0iOiAiezwifTsKICAgIGZ1bmN0aW9uIG1hdGNoQnJhY2tldHMoYXV0b2NsZWFyKSB7CiAgICAg
			IHZhciBoZWFkID0gc2VsLmludmVydGVkID8gc2VsLmZyb20gOiBzZWwudG8sIGxpbmUgPSBnZXRM
			aW5lKGhlYWQubGluZSksIHBvcyA9IGhlYWQuY2ggLSAxOwogICAgICB2YXIgbWF0Y2ggPSAocG9z
			ID49IDAgJiYgbWF0Y2hpbmdbbGluZS50ZXh0LmNoYXJBdChwb3MpXSkgfHwgbWF0Y2hpbmdbbGlu
			ZS50ZXh0LmNoYXJBdCgrK3BvcyldOwogICAgICBpZiAoIW1hdGNoKSByZXR1cm47CiAgICAgIHZh
			ciBjaCA9IG1hdGNoLmNoYXJBdCgwKSwgZm9yd2FyZCA9IG1hdGNoLmNoYXJBdCgxKSA9PSAiPiIs
			IGQgPSBmb3J3YXJkID8gMSA6IC0xLCBzdCA9IGxpbmUuc3R5bGVzOwogICAgICBmb3IgKHZhciBv
			ZmYgPSBwb3MgKyAxLCBpID0gMCwgZSA9IHN0Lmxlbmd0aDsgaSA8IGU7IGkrPTIpCiAgICAgICAg
			aWYgKChvZmYgLT0gc3RbaV0ubGVuZ3RoKSA8PSAwKSB7dmFyIHN0eWxlID0gc3RbaSsxXTsgYnJl
			YWs7fQoKICAgICAgdmFyIHN0YWNrID0gW2xpbmUudGV4dC5jaGFyQXQocG9zKV0sIHJlID0gL1so
			KXt9W1xdXS87CiAgICAgIGZ1bmN0aW9uIHNjYW4obGluZSwgZnJvbSwgdG8pIHsKICAgICAgICBp
			ZiAoIWxpbmUudGV4dCkgcmV0dXJuOwogICAgICAgIHZhciBzdCA9IGxpbmUuc3R5bGVzLCBwb3Mg
			PSBmb3J3YXJkID8gMCA6IGxpbmUudGV4dC5sZW5ndGggLSAxLCBjdXI7CiAgICAgICAgZm9yICh2
			YXIgaSA9IGZvcndhcmQgPyAwIDogc3QubGVuZ3RoIC0gMiwgZSA9IGZvcndhcmQgPyBzdC5sZW5n
			dGggOiAtMjsgaSAhPSBlOyBpICs9IDIqZCkgewogICAgICAgICAgdmFyIHRleHQgPSBzdFtpXTsK
			ICAgICAgICAgIGlmIChzdFtpKzFdICE9IG51bGwgJiYgc3RbaSsxXSAhPSBzdHlsZSkge3BvcyAr
			PSBkICogdGV4dC5sZW5ndGg7IGNvbnRpbnVlO30KICAgICAgICAgIGZvciAodmFyIGogPSBmb3J3
			YXJkID8gMCA6IHRleHQubGVuZ3RoIC0gMSwgdGUgPSBmb3J3YXJkID8gdGV4dC5sZW5ndGggOiAt
			MTsgaiAhPSB0ZTsgaiArPSBkLCBwb3MrPWQpIHsKICAgICAgICAgICAgaWYgKHBvcyA+PSBmcm9t
			ICYmIHBvcyA8IHRvICYmIHJlLnRlc3QoY3VyID0gdGV4dC5jaGFyQXQoaikpKSB7CiAgICAgICAg
			ICAgICAgdmFyIG1hdGNoID0gbWF0Y2hpbmdbY3VyXTsKICAgICAgICAgICAgICBpZiAobWF0Y2gu
			Y2hhckF0KDEpID09ICI+IiA9PSBmb3J3YXJkKSBzdGFjay5wdXNoKGN1cik7CiAgICAgICAgICAg
			ICAgZWxzZSBpZiAoc3RhY2sucG9wKCkgIT0gbWF0Y2guY2hhckF0KDApKSByZXR1cm4ge3Bvczog
			cG9zLCBtYXRjaDogZmFsc2V9OwogICAgICAgICAgICAgIGVsc2UgaWYgKCFzdGFjay5sZW5ndGgp
			IHJldHVybiB7cG9zOiBwb3MsIG1hdGNoOiB0cnVlfTsKICAgICAgICAgICAgfQogICAgICAgICAg
			fQogICAgICAgIH0KICAgICAgfQogICAgICBmb3IgKHZhciBpID0gaGVhZC5saW5lLCBlID0gZm9y
			d2FyZCA/IE1hdGgubWluKGkgKyAxMDAsIGRvYy5zaXplKSA6IE1hdGgubWF4KC0xLCBpIC0gMTAw
			KTsgaSAhPSBlOyBpKz1kKSB7CiAgICAgICAgdmFyIGxpbmUgPSBnZXRMaW5lKGkpLCBmaXJzdCA9
			IGkgPT0gaGVhZC5saW5lOwogICAgICAgIHZhciBmb3VuZCA9IHNjYW4obGluZSwgZmlyc3QgJiYg
			Zm9yd2FyZCA/IHBvcyArIDEgOiAwLCBmaXJzdCAmJiAhZm9yd2FyZCA/IHBvcyA6IGxpbmUudGV4
			dC5sZW5ndGgpOwogICAgICAgIGlmIChmb3VuZCkgYnJlYWs7CiAgICAgIH0KICAgICAgaWYgKCFm
			b3VuZCkgZm91bmQgPSB7cG9zOiBudWxsLCBtYXRjaDogZmFsc2V9OwogICAgICB2YXIgc3R5bGUg
			PSBmb3VuZC5tYXRjaCA/ICJDb2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCIgOiAiQ29kZU1pcnJv
			ci1ub25tYXRjaGluZ2JyYWNrZXQiOwogICAgICB2YXIgb25lID0gbWFya1RleHQoe2xpbmU6IGhl
			YWQubGluZSwgY2g6IHBvc30sIHtsaW5lOiBoZWFkLmxpbmUsIGNoOiBwb3MrMX0sIHN0eWxlKSwK
			ICAgICAgICAgIHR3byA9IGZvdW5kLnBvcyAhPSBudWxsICYmIG1hcmtUZXh0KHtsaW5lOiBpLCBj
			aDogZm91bmQucG9zfSwge2xpbmU6IGksIGNoOiBmb3VuZC5wb3MgKyAxfSwgc3R5bGUpOwogICAg
			ICB2YXIgY2xlYXIgPSBvcGVyYXRpb24oZnVuY3Rpb24oKXtvbmUuY2xlYXIoKTsgdHdvICYmIHR3
			by5jbGVhcigpO30pOwogICAgICBpZiAoYXV0b2NsZWFyKSBzZXRUaW1lb3V0KGNsZWFyLCA4MDAp
			OwogICAgICBlbHNlIGJyYWNrZXRIaWdobGlnaHRlZCA9IGNsZWFyOwogICAgfQoKICAgIC8vIEZp
			bmRzIHRoZSBsaW5lIHRvIHN0YXJ0IHdpdGggd2hlbiBzdGFydGluZyBhIHBhcnNlLiBUcmllcyB0
			bwogICAgLy8gZmluZCBhIGxpbmUgd2l0aCBhIHN0YXRlQWZ0ZXIsIHNvIHRoYXQgaXQgY2FuIHN0
			YXJ0IHdpdGggYQogICAgLy8gdmFsaWQgc3RhdGUuIElmIHRoYXQgZmFpbHMsIGl0IHJldHVybnMg
			dGhlIGxpbmUgd2l0aCB0aGUKICAgIC8vIHNtYWxsZXN0IGluZGVudGF0aW9uLCB3aGljaCB0ZW5k
			cyB0byBuZWVkIHRoZSBsZWFzdCBjb250ZXh0IHRvCiAgICAvLyBwYXJzZSBjb3JyZWN0bHkuCiAg
			ICBmdW5jdGlvbiBmaW5kU3RhcnRMaW5lKG4pIHsKICAgICAgdmFyIG1pbmluZGVudCwgbWlubGlu
			ZTsKICAgICAgZm9yICh2YXIgc2VhcmNoID0gbiwgbGltID0gbiAtIDQwOyBzZWFyY2ggPiBsaW07
			IC0tc2VhcmNoKSB7CiAgICAgICAgaWYgKHNlYXJjaCA9PSAwKSByZXR1cm4gMDsKICAgICAgICB2
			YXIgbGluZSA9IGdldExpbmUoc2VhcmNoLTEpOwogICAgICAgIGlmIChsaW5lLnN0YXRlQWZ0ZXIp
			IHJldHVybiBzZWFyY2g7CiAgICAgICAgdmFyIGluZGVudGVkID0gbGluZS5pbmRlbnRhdGlvbihv
			cHRpb25zLnRhYlNpemUpOwogICAgICAgIGlmIChtaW5saW5lID09IG51bGwgfHwgbWluaW5kZW50
			ID4gaW5kZW50ZWQpIHsKICAgICAgICAgIG1pbmxpbmUgPSBzZWFyY2ggLSAxOwogICAgICAgICAg
			bWluaW5kZW50ID0gaW5kZW50ZWQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBtaW5s
			aW5lOwogICAgfQogICAgZnVuY3Rpb24gZ2V0U3RhdGVCZWZvcmUobikgewogICAgICB2YXIgc3Rh
			cnQgPSBmaW5kU3RhcnRMaW5lKG4pLCBzdGF0ZSA9IHN0YXJ0ICYmIGdldExpbmUoc3RhcnQtMSku
			c3RhdGVBZnRlcjsKICAgICAgaWYgKCFzdGF0ZSkgc3RhdGUgPSBzdGFydFN0YXRlKG1vZGUpOwog
			ICAgICBlbHNlIHN0YXRlID0gY29weVN0YXRlKG1vZGUsIHN0YXRlKTsKICAgICAgZG9jLml0ZXIo
			c3RhcnQsIG4sIGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBsaW5lLmhpZ2hsaWdodChtb2RlLCBz
			dGF0ZSwgb3B0aW9ucy50YWJTaXplKTsKICAgICAgICBsaW5lLnN0YXRlQWZ0ZXIgPSBjb3B5U3Rh
			dGUobW9kZSwgc3RhdGUpOwogICAgICB9KTsKICAgICAgaWYgKHN0YXJ0IDwgbikgY2hhbmdlcy5w
			dXNoKHtmcm9tOiBzdGFydCwgdG86IG59KTsKICAgICAgaWYgKG4gPCBkb2Muc2l6ZSAmJiAhZ2V0
			TGluZShuKS5zdGF0ZUFmdGVyKSB3b3JrLnB1c2gobik7CiAgICAgIHJldHVybiBzdGF0ZTsKICAg
			IH0KICAgIGZ1bmN0aW9uIGhpZ2hsaWdodExpbmVzKHN0YXJ0LCBlbmQpIHsKICAgICAgdmFyIHN0
			YXRlID0gZ2V0U3RhdGVCZWZvcmUoc3RhcnQpOwogICAgICBkb2MuaXRlcihzdGFydCwgZW5kLCBm
			dW5jdGlvbihsaW5lKSB7CiAgICAgICAgbGluZS5oaWdobGlnaHQobW9kZSwgc3RhdGUsIG9wdGlv
			bnMudGFiU2l6ZSk7CiAgICAgICAgbGluZS5zdGF0ZUFmdGVyID0gY29weVN0YXRlKG1vZGUsIHN0
			YXRlKTsKICAgICAgfSk7CiAgICB9CiAgICBmdW5jdGlvbiBoaWdobGlnaHRXb3JrZXIoKSB7CiAg
			ICAgIHZhciBlbmQgPSArbmV3IERhdGUgKyBvcHRpb25zLndvcmtUaW1lOwogICAgICB2YXIgZm91
			bmRXb3JrID0gd29yay5sZW5ndGg7CiAgICAgIHdoaWxlICh3b3JrLmxlbmd0aCkgewogICAgICAg
			IGlmICghZ2V0TGluZShzaG93aW5nRnJvbSkuc3RhdGVBZnRlcikgdmFyIHRhc2sgPSBzaG93aW5n
			RnJvbTsKICAgICAgICBlbHNlIHZhciB0YXNrID0gd29yay5wb3AoKTsKICAgICAgICBpZiAodGFz
			ayA+PSBkb2Muc2l6ZSkgY29udGludWU7CiAgICAgICAgdmFyIHN0YXJ0ID0gZmluZFN0YXJ0TGlu
			ZSh0YXNrKSwgc3RhdGUgPSBzdGFydCAmJiBnZXRMaW5lKHN0YXJ0LTEpLnN0YXRlQWZ0ZXI7CiAg
			ICAgICAgaWYgKHN0YXRlKSBzdGF0ZSA9IGNvcHlTdGF0ZShtb2RlLCBzdGF0ZSk7CiAgICAgICAg
			ZWxzZSBzdGF0ZSA9IHN0YXJ0U3RhdGUobW9kZSk7CgogICAgICAgIHZhciB1bmNoYW5nZWQgPSAw
			LCBjb21wYXJlID0gbW9kZS5jb21wYXJlU3RhdGVzLCByZWFsQ2hhbmdlID0gZmFsc2UsCiAgICAg
			ICAgICAgIGkgPSBzdGFydCwgYmFpbCA9IGZhbHNlOwogICAgICAgIGRvYy5pdGVyKGksIGRvYy5z
			aXplLCBmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICB2YXIgaGFkU3RhdGUgPSBsaW5lLnN0YXRl
			QWZ0ZXI7CiAgICAgICAgICBpZiAoK25ldyBEYXRlID4gZW5kKSB7CiAgICAgICAgICAgIHdvcmsu
			cHVzaChpKTsKICAgICAgICAgICAgc3RhcnRXb3JrZXIob3B0aW9ucy53b3JrRGVsYXkpOwogICAg
			ICAgICAgICBpZiAocmVhbENoYW5nZSkgY2hhbmdlcy5wdXNoKHtmcm9tOiB0YXNrLCB0bzogaSAr
			IDF9KTsKICAgICAgICAgICAgcmV0dXJuIChiYWlsID0gdHJ1ZSk7CiAgICAgICAgICB9CiAgICAg
			ICAgICB2YXIgY2hhbmdlZCA9IGxpbmUuaGlnaGxpZ2h0KG1vZGUsIHN0YXRlLCBvcHRpb25zLnRh
			YlNpemUpOwogICAgICAgICAgaWYgKGNoYW5nZWQpIHJlYWxDaGFuZ2UgPSB0cnVlOwogICAgICAg
			ICAgbGluZS5zdGF0ZUFmdGVyID0gY29weVN0YXRlKG1vZGUsIHN0YXRlKTsKICAgICAgICAgIGlm
			IChjb21wYXJlKSB7CiAgICAgICAgICAgIGlmIChoYWRTdGF0ZSAmJiBjb21wYXJlKGhhZFN0YXRl
			LCBzdGF0ZSkpIHJldHVybiB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYg
			KGNoYW5nZWQgIT09IGZhbHNlIHx8ICFoYWRTdGF0ZSkgdW5jaGFuZ2VkID0gMDsKICAgICAgICAg
			ICAgZWxzZSBpZiAoKyt1bmNoYW5nZWQgPiAzICYmICghbW9kZS5pbmRlbnQgfHwgbW9kZS5pbmRl
			bnQoaGFkU3RhdGUsICIiKSA9PSBtb2RlLmluZGVudChzdGF0ZSwgIiIpKSkKICAgICAgICAgICAg
			ICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgICsraTsKICAgICAgICB9KTsKICAg
			ICAgICBpZiAoYmFpbCkgcmV0dXJuOwogICAgICAgIGlmIChyZWFsQ2hhbmdlKSBjaGFuZ2VzLnB1
			c2goe2Zyb206IHRhc2ssIHRvOiBpICsgMX0pOwogICAgICB9CiAgICAgIGlmIChmb3VuZFdvcmsg
			JiYgb3B0aW9ucy5vbkhpZ2hsaWdodENvbXBsZXRlKQogICAgICAgIG9wdGlvbnMub25IaWdobGln
			aHRDb21wbGV0ZShpbnN0YW5jZSk7CiAgICB9CiAgICBmdW5jdGlvbiBzdGFydFdvcmtlcih0aW1l
			KSB7CiAgICAgIGlmICghd29yay5sZW5ndGgpIHJldHVybjsKICAgICAgaGlnaGxpZ2h0LnNldCh0
			aW1lLCBvcGVyYXRpb24oaGlnaGxpZ2h0V29ya2VyKSk7CiAgICB9CgogICAgLy8gT3BlcmF0aW9u
			cyBhcmUgdXNlZCB0byB3cmFwIGNoYW5nZXMgaW4gc3VjaCBhIHdheSB0aGF0IGVhY2gKICAgIC8v
			IGNoYW5nZSB3b24ndCBoYXZlIHRvIHVwZGF0ZSB0aGUgY3Vyc29yIGFuZCBkaXNwbGF5ICh3aGlj
			aCB3b3VsZAogICAgLy8gYmUgYXdrd2FyZCwgc2xvdywgYW5kIGVycm9yLXByb25lKSwgYnV0IGlu
			c3RlYWQgdXBkYXRlcyBhcmUKICAgIC8vIGJhdGNoZWQgYW5kIHRoZW4gYWxsIGNvbWJpbmVkIGFu
			ZCBleGVjdXRlZCBhdCBvbmNlLgogICAgZnVuY3Rpb24gc3RhcnRPcGVyYXRpb24oKSB7CiAgICAg
			IHVwZGF0ZUlucHV0ID0gdXNlclNlbENoYW5nZSA9IHRleHRDaGFuZ2VkID0gbnVsbDsKICAgICAg
			Y2hhbmdlcyA9IFtdOyBzZWxlY3Rpb25DaGFuZ2VkID0gZmFsc2U7IGNhbGxiYWNrcyA9IFtdOwog
			ICAgfQogICAgZnVuY3Rpb24gZW5kT3BlcmF0aW9uKCkgewogICAgICB2YXIgcmVTY3JvbGwgPSBm
			YWxzZSwgdXBkYXRlZDsKICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQpIHJlU2Nyb2xsID0gIXNj
			cm9sbEN1cnNvckludG9WaWV3KCk7CiAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdXBkYXRlZCA9
			IHVwZGF0ZURpc3BsYXkoY2hhbmdlcywgdHJ1ZSk7CiAgICAgIGVsc2UgewogICAgICAgIGlmIChz
			ZWxlY3Rpb25DaGFuZ2VkKSB1cGRhdGVTZWxlY3Rpb24oKTsKICAgICAgICBpZiAoZ3V0dGVyRGly
			dHkpIHVwZGF0ZUd1dHRlcigpOwogICAgICB9CiAgICAgIGlmIChyZVNjcm9sbCkgc2Nyb2xsQ3Vy
			c29ySW50b1ZpZXcoKTsKICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQpIHtzY3JvbGxFZGl0b3JJ
			bnRvVmlldygpOyByZXN0YXJ0QmxpbmsoKTt9CgogICAgICBpZiAoZm9jdXNlZCAmJiAhbGVhdmVJ
			bnB1dEFsb25lICYmCiAgICAgICAgICAodXBkYXRlSW5wdXQgPT09IHRydWUgfHwgKHVwZGF0ZUlu
			cHV0ICE9PSBmYWxzZSAmJiBzZWxlY3Rpb25DaGFuZ2VkKSkpCiAgICAgICAgcmVzZXRJbnB1dCh1
			c2VyU2VsQ2hhbmdlKTsKCiAgICAgIGlmIChzZWxlY3Rpb25DaGFuZ2VkICYmIG9wdGlvbnMubWF0
			Y2hCcmFja2V0cykKICAgICAgICBzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpIHsKICAg
			ICAgICAgIGlmIChicmFja2V0SGlnaGxpZ2h0ZWQpIHticmFja2V0SGlnaGxpZ2h0ZWQoKTsgYnJh
			Y2tldEhpZ2hsaWdodGVkID0gbnVsbDt9CiAgICAgICAgICBpZiAocG9zRXEoc2VsLmZyb20sIHNl
			bC50bykpIG1hdGNoQnJhY2tldHMoZmFsc2UpOwogICAgICAgIH0pLCAyMCk7CiAgICAgIHZhciB0
			YyA9IHRleHRDaGFuZ2VkLCBjYnMgPSBjYWxsYmFja3M7IC8vIHRoZXNlIGNhbiBiZSByZXNldCBi
			eSBjYWxsYmFja3MKICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQgJiYgb3B0aW9ucy5vbkN1cnNv
			ckFjdGl2aXR5KQogICAgICAgIG9wdGlvbnMub25DdXJzb3JBY3Rpdml0eShpbnN0YW5jZSk7CiAg
			ICAgIGlmICh0YyAmJiBvcHRpb25zLm9uQ2hhbmdlICYmIGluc3RhbmNlKQogICAgICAgIG9wdGlv
			bnMub25DaGFuZ2UoaW5zdGFuY2UsIHRjKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMu
			bGVuZ3RoOyArK2kpIGNic1tpXShpbnN0YW5jZSk7CiAgICAgIGlmICh1cGRhdGVkICYmIG9wdGlv
			bnMub25VcGRhdGUpIG9wdGlvbnMub25VcGRhdGUoaW5zdGFuY2UpOwogICAgfQogICAgdmFyIG5l
			c3RlZE9wZXJhdGlvbiA9IDA7CiAgICBmdW5jdGlvbiBvcGVyYXRpb24oZikgewogICAgICByZXR1
			cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFuZXN0ZWRPcGVyYXRpb24rKykgc3RhcnRPcGVy
			YXRpb24oKTsKICAgICAgICB0cnkge3ZhciByZXN1bHQgPSBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50
			cyk7fQogICAgICAgIGZpbmFsbHkge2lmICghLS1uZXN0ZWRPcGVyYXRpb24pIGVuZE9wZXJhdGlv
			bigpO30KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgfQoKICAgIGZvciAodmFy
			IGV4dCBpbiBleHRlbnNpb25zKQogICAgICBpZiAoZXh0ZW5zaW9ucy5wcm9wZXJ0eUlzRW51bWVy
			YWJsZShleHQpICYmCiAgICAgICAgICAhaW5zdGFuY2UucHJvcGVydHlJc0VudW1lcmFibGUoZXh0
			KSkKICAgICAgICBpbnN0YW5jZVtleHRdID0gZXh0ZW5zaW9uc1tleHRdOwogICAgcmV0dXJuIGlu
			c3RhbmNlOwogIH0gLy8gKGVuZCBvZiBmdW5jdGlvbiBDb2RlTWlycm9yKQoKICAvLyBUaGUgZGVm
			YXVsdCBjb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgQ29kZU1pcnJvci5kZWZhdWx0cyA9IHsKICAg
			IHZhbHVlOiAiIiwKICAgIG1vZGU6IG51bGwsCiAgICB0aGVtZTogImRlZmF1bHQiLAogICAgaW5k
			ZW50VW5pdDogMiwKICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSwKICAgIHNtYXJ0SW5kZW50OiB0
			cnVlLAogICAgdGFiU2l6ZTogNCwKICAgIGtleU1hcDogImRlZmF1bHQiLAogICAgZXh0cmFLZXlz
			OiBudWxsLAogICAgZWxlY3RyaWNDaGFyczogdHJ1ZSwKICAgIGF1dG9DbGVhckVtcHR5TGluZXM6
			IGZhbHNlLAogICAgb25LZXlFdmVudDogbnVsbCwKICAgIGxpbmVXcmFwcGluZzogZmFsc2UsCiAg
			ICBsaW5lTnVtYmVyczogZmFsc2UsCiAgICBndXR0ZXI6IGZhbHNlLAogICAgZml4ZWRHdXR0ZXI6
			IGZhbHNlLAogICAgZmlyc3RMaW5lTnVtYmVyOiAxLAogICAgcmVhZE9ubHk6IGZhbHNlLAogICAg
			b25DaGFuZ2U6IG51bGwsCiAgICBvbkN1cnNvckFjdGl2aXR5OiBudWxsLAogICAgb25HdXR0ZXJD
			bGljazogbnVsbCwKICAgIG9uSGlnaGxpZ2h0Q29tcGxldGU6IG51bGwsCiAgICBvblVwZGF0ZTog
			bnVsbCwKICAgIG9uRm9jdXM6IG51bGwsIG9uQmx1cjogbnVsbCwgb25TY3JvbGw6IG51bGwsCiAg
			ICBtYXRjaEJyYWNrZXRzOiBmYWxzZSwKICAgIHdvcmtUaW1lOiAxMDAsCiAgICB3b3JrRGVsYXk6
			IDIwMCwKICAgIHBvbGxJbnRlcnZhbDogMTAwLAogICAgdW5kb0RlcHRoOiA0MCwKICAgIHRhYmlu
			ZGV4OiBudWxsLAogICAgZG9jdW1lbnQ6IHdpbmRvdy5kb2N1bWVudAogIH07CgogIHZhciBpb3Mg
			PSAvQXBwbGVXZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgL01vYmlsZVwvXHcr
			Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogIHZhciBtYWMgPSBpb3MgfHwgL01hYy8udGVz
			dChuYXZpZ2F0b3IucGxhdGZvcm0pOwogIHZhciB3aW4gPSAvV2luLy50ZXN0KG5hdmlnYXRvci5w
			bGF0Zm9ybSk7CgogIC8vIEtub3duIG1vZGVzLCBieSBuYW1lIGFuZCBieSBNSU1FCiAgdmFyIG1v
			ZGVzID0ge30sIG1pbWVNb2RlcyA9IHt9OwogIENvZGVNaXJyb3IuZGVmaW5lTW9kZSA9IGZ1bmN0
			aW9uKG5hbWUsIG1vZGUpIHsKICAgIGlmICghQ29kZU1pcnJvci5kZWZhdWx0cy5tb2RlICYmIG5h
			bWUgIT0gIm51bGwiKSBDb2RlTWlycm9yLmRlZmF1bHRzLm1vZGUgPSBuYW1lOwogICAgbW9kZXNb
			bmFtZV0gPSBtb2RlOwogIH07CiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FID0gZnVuY3Rpb24obWlt
			ZSwgc3BlYykgewogICAgbWltZU1vZGVzW21pbWVdID0gc3BlYzsKICB9OwogIENvZGVNaXJyb3Iu
			cmVzb2x2ZU1vZGUgPSBmdW5jdGlvbihzcGVjKSB7CiAgICBpZiAodHlwZW9mIHNwZWMgPT0gInN0
			cmluZyIgJiYgbWltZU1vZGVzLmhhc093blByb3BlcnR5KHNwZWMpKQogICAgICBzcGVjID0gbWlt
			ZU1vZGVzW3NwZWNdOwogICAgaWYgKHR5cGVvZiBzcGVjID09ICJzdHJpbmciKSByZXR1cm4ge25h
			bWU6IHNwZWN9OwogICAgZWxzZSByZXR1cm4gc3BlYyB8fCB7bmFtZTogIm51bGwifTsKICB9Owog
			IENvZGVNaXJyb3IuZ2V0TW9kZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIHNwZWMpIHsKICAgIHZhciBz
			cGVjID0gQ29kZU1pcnJvci5yZXNvbHZlTW9kZShzcGVjKTsKICAgIHZhciBtZmFjdG9yeSA9IG1v
			ZGVzW3NwZWMubmFtZV07CiAgICBpZiAoIW1mYWN0b3J5KSB7CiAgICAgIGlmICh3aW5kb3cuY29u
			c29sZSkgY29uc29sZS53YXJuKCJObyBtb2RlICIgKyBzcGVjLm5hbWUgKyAiIGZvdW5kLCBmYWxs
			aW5nIGJhY2sgdG8gcGxhaW4gdGV4dC4iKTsKICAgICAgcmV0dXJuIENvZGVNaXJyb3IuZ2V0TW9k
			ZShvcHRpb25zLCAidGV4dC9wbGFpbiIpOwogICAgfQogICAgcmV0dXJuIG1mYWN0b3J5KG9wdGlv
			bnMsIHNwZWMpOwogIH07CiAgQ29kZU1pcnJvci5saXN0TW9kZXMgPSBmdW5jdGlvbigpIHsKICAg
			IHZhciBsaXN0ID0gW107CiAgICBmb3IgKHZhciBtIGluIG1vZGVzKQogICAgICBpZiAobW9kZXMu
			cHJvcGVydHlJc0VudW1lcmFibGUobSkpIGxpc3QucHVzaChtKTsKICAgIHJldHVybiBsaXN0Owog
			IH07CiAgQ29kZU1pcnJvci5saXN0TUlNRXMgPSBmdW5jdGlvbigpIHsKICAgIHZhciBsaXN0ID0g
			W107CiAgICBmb3IgKHZhciBtIGluIG1pbWVNb2RlcykKICAgICAgaWYgKG1pbWVNb2Rlcy5wcm9w
			ZXJ0eUlzRW51bWVyYWJsZShtKSkgbGlzdC5wdXNoKHttaW1lOiBtLCBtb2RlOiBtaW1lTW9kZXNb
			bV19KTsKICAgIHJldHVybiBsaXN0OwogIH07CgogIHZhciBleHRlbnNpb25zID0gQ29kZU1pcnJv
			ci5leHRlbnNpb25zID0ge307CiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24gPSBmdW5jdGlv
			bihuYW1lLCBmdW5jKSB7CiAgICBleHRlbnNpb25zW25hbWVdID0gZnVuYzsKICB9OwoKICB2YXIg
			Y29tbWFuZHMgPSBDb2RlTWlycm9yLmNvbW1hbmRzID0gewogICAgc2VsZWN0QWxsOiBmdW5jdGlv
			bihjbSkge2NtLnNldFNlbGVjdGlvbih7bGluZTogMCwgY2g6IDB9LCB7bGluZTogY20ubGluZUNv
			dW50KCkgLSAxfSk7fSwKICAgIGtpbGxMaW5lOiBmdW5jdGlvbihjbSkgewogICAgICB2YXIgZnJv
			bSA9IGNtLmdldEN1cnNvcih0cnVlKSwgdG8gPSBjbS5nZXRDdXJzb3IoZmFsc2UpLCBzZWwgPSAh
			cG9zRXEoZnJvbSwgdG8pOwogICAgICBpZiAoIXNlbCAmJiBjbS5nZXRMaW5lKGZyb20ubGluZSku
			bGVuZ3RoID09IGZyb20uY2gpIGNtLnJlcGxhY2VSYW5nZSgiIiwgZnJvbSwge2xpbmU6IGZyb20u
			bGluZSArIDEsIGNoOiAwfSk7CiAgICAgIGVsc2UgY20ucmVwbGFjZVJhbmdlKCIiLCBmcm9tLCBz
			ZWwgPyB0byA6IHtsaW5lOiBmcm9tLmxpbmV9KTsKICAgIH0sCiAgICBkZWxldGVMaW5lOiBmdW5j
			dGlvbihjbSkge3ZhciBsID0gY20uZ2V0Q3Vyc29yKCkubGluZTsgY20ucmVwbGFjZVJhbmdlKCIi
			LCB7bGluZTogbCwgY2g6IDB9LCB7bGluZTogbH0pO30sCiAgICB1bmRvOiBmdW5jdGlvbihjbSkg
			e2NtLnVuZG8oKTt9LAogICAgcmVkbzogZnVuY3Rpb24oY20pIHtjbS5yZWRvKCk7fSwKICAgIGdv
			RG9jU3RhcnQ6IGZ1bmN0aW9uKGNtKSB7Y20uc2V0Q3Vyc29yKDAsIDAsIHRydWUpO30sCiAgICBn
			b0RvY0VuZDogZnVuY3Rpb24oY20pIHtjbS5zZXRTZWxlY3Rpb24oe2xpbmU6IGNtLmxpbmVDb3Vu
			dCgpIC0gMX0sIG51bGwsIHRydWUpO30sCiAgICBnb0xpbmVTdGFydDogZnVuY3Rpb24oY20pIHtj
			bS5zZXRDdXJzb3IoY20uZ2V0Q3Vyc29yKCkubGluZSwgMCwgdHJ1ZSk7fSwKICAgIGdvTGluZVN0
			YXJ0U21hcnQ6IGZ1bmN0aW9uKGNtKSB7CiAgICAgIHZhciBjdXIgPSBjbS5nZXRDdXJzb3IoKTsK
			ICAgICAgdmFyIHRleHQgPSBjbS5nZXRMaW5lKGN1ci5saW5lKSwgZmlyc3ROb25XUyA9IE1hdGgu
			bWF4KDAsIHRleHQuc2VhcmNoKC9cUy8pKTsKICAgICAgY20uc2V0Q3Vyc29yKGN1ci5saW5lLCBj
			dXIuY2ggPD0gZmlyc3ROb25XUyAmJiBjdXIuY2ggPyAwIDogZmlyc3ROb25XUywgdHJ1ZSk7CiAg
			ICB9LAogICAgZ29MaW5lRW5kOiBmdW5jdGlvbihjbSkge2NtLnNldFNlbGVjdGlvbih7bGluZTog
			Y20uZ2V0Q3Vyc29yKCkubGluZX0sIG51bGwsIHRydWUpO30sCiAgICBnb0xpbmVVcDogZnVuY3Rp
			b24oY20pIHtjbS5tb3ZlVigtMSwgImxpbmUiKTt9LAogICAgZ29MaW5lRG93bjogZnVuY3Rpb24o
			Y20pIHtjbS5tb3ZlVigxLCAibGluZSIpO30sCiAgICBnb1BhZ2VVcDogZnVuY3Rpb24oY20pIHtj
			bS5tb3ZlVigtMSwgInBhZ2UiKTt9LAogICAgZ29QYWdlRG93bjogZnVuY3Rpb24oY20pIHtjbS5t
			b3ZlVigxLCAicGFnZSIpO30sCiAgICBnb0NoYXJMZWZ0OiBmdW5jdGlvbihjbSkge2NtLm1vdmVI
			KC0xLCAiY2hhciIpO30sCiAgICBnb0NoYXJSaWdodDogZnVuY3Rpb24oY20pIHtjbS5tb3ZlSCgx
			LCAiY2hhciIpO30sCiAgICBnb0NvbHVtbkxlZnQ6IGZ1bmN0aW9uKGNtKSB7Y20ubW92ZUgoLTEs
			ICJjb2x1bW4iKTt9LAogICAgZ29Db2x1bW5SaWdodDogZnVuY3Rpb24oY20pIHtjbS5tb3ZlSCgx
			LCAiY29sdW1uIik7fSwKICAgIGdvV29yZExlZnQ6IGZ1bmN0aW9uKGNtKSB7Y20ubW92ZUgoLTEs
			ICJ3b3JkIik7fSwKICAgIGdvV29yZFJpZ2h0OiBmdW5jdGlvbihjbSkge2NtLm1vdmVIKDEsICJ3
			b3JkIik7fSwKICAgIGRlbENoYXJMZWZ0OiBmdW5jdGlvbihjbSkge2NtLmRlbGV0ZUgoLTEsICJj
			aGFyIik7fSwKICAgIGRlbENoYXJSaWdodDogZnVuY3Rpb24oY20pIHtjbS5kZWxldGVIKDEsICJj
			aGFyIik7fSwKICAgIGRlbFdvcmRMZWZ0OiBmdW5jdGlvbihjbSkge2NtLmRlbGV0ZUgoLTEsICJ3
			b3JkIik7fSwKICAgIGRlbFdvcmRSaWdodDogZnVuY3Rpb24oY20pIHtjbS5kZWxldGVIKDEsICJ3
			b3JkIik7fSwKICAgIGluZGVudEF1dG86IGZ1bmN0aW9uKGNtKSB7Y20uaW5kZW50U2VsZWN0aW9u
			KCJzbWFydCIpO30sCiAgICBpbmRlbnRNb3JlOiBmdW5jdGlvbihjbSkge2NtLmluZGVudFNlbGVj
			dGlvbigiYWRkIik7fSwKICAgIGluZGVudExlc3M6IGZ1bmN0aW9uKGNtKSB7Y20uaW5kZW50U2Vs
			ZWN0aW9uKCJzdWJ0cmFjdCIpO30sCiAgICBpbnNlcnRUYWI6IGZ1bmN0aW9uKGNtKSB7Y20ucmVw
			bGFjZVNlbGVjdGlvbigiXHQiLCAiZW5kIik7fSwKICAgIHRyYW5zcG9zZUNoYXJzOiBmdW5jdGlv
			bihjbSkgewogICAgICB2YXIgY3VyID0gY20uZ2V0Q3Vyc29yKCksIGxpbmUgPSBjbS5nZXRMaW5l
			KGN1ci5saW5lKTsKICAgICAgaWYgKGN1ci5jaCA+IDAgJiYgY3VyLmNoIDwgbGluZS5sZW5ndGgg
			LSAxKQogICAgICAgIGNtLnJlcGxhY2VSYW5nZShsaW5lLmNoYXJBdChjdXIuY2gpICsgbGluZS5j
			aGFyQXQoY3VyLmNoIC0gMSksCiAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXIubGlu
			ZSwgY2g6IGN1ci5jaCAtIDF9LCB7bGluZTogY3VyLmxpbmUsIGNoOiBjdXIuY2ggKyAxfSk7CiAg
			ICB9LAogICAgbmV3bGluZUFuZEluZGVudDogZnVuY3Rpb24oY20pIHsKICAgICAgY20ucmVwbGFj
			ZVNlbGVjdGlvbigiXG4iLCAiZW5kIik7CiAgICAgIGNtLmluZGVudExpbmUoY20uZ2V0Q3Vyc29y
			KCkubGluZSk7CiAgICB9LAogICAgdG9nZ2xlT3ZlcndyaXRlOiBmdW5jdGlvbihjbSkge2NtLnRv
			Z2dsZU92ZXJ3cml0ZSgpO30KICB9OwoKICB2YXIga2V5TWFwID0gQ29kZU1pcnJvci5rZXlNYXAg
			PSB7fTsKICBrZXlNYXAuYmFzaWMgPSB7CiAgICAiTGVmdCI6ICJnb0NoYXJMZWZ0IiwgIlJpZ2h0
			IjogImdvQ2hhclJpZ2h0IiwgIlVwIjogImdvTGluZVVwIiwgIkRvd24iOiAiZ29MaW5lRG93biIs
			CiAgICAiRW5kIjogImdvTGluZUVuZCIsICJIb21lIjogImdvTGluZVN0YXJ0U21hcnQiLCAiUGFn
			ZVVwIjogImdvUGFnZVVwIiwgIlBhZ2VEb3duIjogImdvUGFnZURvd24iLAogICAgIkRlbGV0ZSI6
			ICJkZWxDaGFyUmlnaHQiLCAiQmFja3NwYWNlIjogImRlbENoYXJMZWZ0IiwgIlRhYiI6ICJpbmRl
			bnRNb3JlIiwgIlNoaWZ0LVRhYiI6ICJpbmRlbnRMZXNzIiwKICAgICJFbnRlciI6ICJuZXdsaW5l
			QW5kSW5kZW50IiwgIkluc2VydCI6ICJ0b2dnbGVPdmVyd3JpdGUiCiAgfTsKICAvLyBOb3RlIHRo
			YXQgdGhlIHNhdmUgYW5kIGZpbmQtcmVsYXRlZCBjb21tYW5kcyBhcmVuJ3QgZGVmaW5lZCBieQog
			IC8vIGRlZmF1bHQuIFVua25vd24gY29tbWFuZHMgYXJlIHNpbXBseSBpZ25vcmVkLgogIGtleU1h
			cC5wY0RlZmF1bHQgPSB7CiAgICAiQ3RybC1BIjogInNlbGVjdEFsbCIsICJDdHJsLUQiOiAiZGVs
			ZXRlTGluZSIsICJDdHJsLVoiOiAidW5kbyIsICJTaGlmdC1DdHJsLVoiOiAicmVkbyIsICJDdHJs
			LVkiOiAicmVkbyIsCiAgICAiQ3RybC1Ib21lIjogImdvRG9jU3RhcnQiLCAiQWx0LVVwIjogImdv
			RG9jU3RhcnQiLCAiQ3RybC1FbmQiOiAiZ29Eb2NFbmQiLCAiQ3RybC1Eb3duIjogImdvRG9jRW5k
			IiwKICAgICJDdHJsLUxlZnQiOiAiZ29Xb3JkTGVmdCIsICJDdHJsLVJpZ2h0IjogImdvV29yZFJp
			Z2h0IiwgIkFsdC1MZWZ0IjogImdvTGluZVN0YXJ0IiwgIkFsdC1SaWdodCI6ICJnb0xpbmVFbmQi
			LAogICAgIkN0cmwtQmFja3NwYWNlIjogImRlbFdvcmRMZWZ0IiwgIkN0cmwtRGVsZXRlIjogImRl
			bFdvcmRSaWdodCIsICJDdHJsLVMiOiAic2F2ZSIsICJDdHJsLUYiOiAiZmluZCIsCiAgICAiQ3Ry
			bC1HIjogImZpbmROZXh0IiwgIlNoaWZ0LUN0cmwtRyI6ICJmaW5kUHJldiIsICJTaGlmdC1DdHJs
			LUYiOiAicmVwbGFjZSIsICJTaGlmdC1DdHJsLVIiOiAicmVwbGFjZUFsbCIsCiAgICBmYWxsdGhy
			b3VnaDogImJhc2ljIgogIH07CiAga2V5TWFwLm1hY0RlZmF1bHQgPSB7CiAgICAiQ21kLUEiOiAi
			c2VsZWN0QWxsIiwgIkNtZC1EIjogImRlbGV0ZUxpbmUiLCAiQ21kLVoiOiAidW5kbyIsICJTaGlm
			dC1DbWQtWiI6ICJyZWRvIiwgIkNtZC1ZIjogInJlZG8iLAogICAgIkNtZC1VcCI6ICJnb0RvY1N0
			YXJ0IiwgIkNtZC1FbmQiOiAiZ29Eb2NFbmQiLCAiQ21kLURvd24iOiAiZ29Eb2NFbmQiLCAiQWx0
			LUxlZnQiOiAiZ29Xb3JkTGVmdCIsCiAgICAiQWx0LVJpZ2h0IjogImdvV29yZFJpZ2h0IiwgIkNt
			ZC1MZWZ0IjogImdvTGluZVN0YXJ0IiwgIkNtZC1SaWdodCI6ICJnb0xpbmVFbmQiLCAiQWx0LUJh
			Y2tzcGFjZSI6ICJkZWxXb3JkTGVmdCIsCiAgICAiQ3RybC1BbHQtQmFja3NwYWNlIjogImRlbFdv
			cmRSaWdodCIsICJBbHQtRGVsZXRlIjogImRlbFdvcmRSaWdodCIsICJDbWQtUyI6ICJzYXZlIiwg
			IkNtZC1GIjogImZpbmQiLAogICAgIkNtZC1HIjogImZpbmROZXh0IiwgIlNoaWZ0LUNtZC1HIjog
			ImZpbmRQcmV2IiwgIkNtZC1BbHQtRiI6ICJyZXBsYWNlIiwgIlNoaWZ0LUNtZC1BbHQtRiI6ICJy
			ZXBsYWNlQWxsIiwKICAgIGZhbGx0aHJvdWdoOiBbImJhc2ljIiwgImVtYWNzeSJdCiAgfTsKICBr
			ZXlNYXBbImRlZmF1bHQiXSA9IG1hYyA/IGtleU1hcC5tYWNEZWZhdWx0IDoga2V5TWFwLnBjRGVm
			YXVsdDsKICBrZXlNYXAuZW1hY3N5ID0gewogICAgIkN0cmwtRiI6ICJnb0NoYXJSaWdodCIsICJD
			dHJsLUIiOiAiZ29DaGFyTGVmdCIsICJDdHJsLVAiOiAiZ29MaW5lVXAiLCAiQ3RybC1OIjogImdv
			TGluZURvd24iLAogICAgIkFsdC1GIjogImdvV29yZFJpZ2h0IiwgIkFsdC1CIjogImdvV29yZExl
			ZnQiLCAiQ3RybC1BIjogImdvTGluZVN0YXJ0IiwgIkN0cmwtRSI6ICJnb0xpbmVFbmQiLAogICAg
			IkN0cmwtViI6ICJnb1BhZ2VVcCIsICJTaGlmdC1DdHJsLVYiOiAiZ29QYWdlRG93biIsICJDdHJs
			LUQiOiAiZGVsQ2hhclJpZ2h0IiwgIkN0cmwtSCI6ICJkZWxDaGFyTGVmdCIsCiAgICAiQWx0LUQi
			OiAiZGVsV29yZFJpZ2h0IiwgIkFsdC1CYWNrc3BhY2UiOiAiZGVsV29yZExlZnQiLCAiQ3RybC1L
			IjogImtpbGxMaW5lIiwgIkN0cmwtVCI6ICJ0cmFuc3Bvc2VDaGFycyIKICB9OwoKICBmdW5jdGlv
			biBnZXRLZXlNYXAodmFsKSB7CiAgICBpZiAodHlwZW9mIHZhbCA9PSAic3RyaW5nIikgcmV0dXJu
			IGtleU1hcFt2YWxdOwogICAgZWxzZSByZXR1cm4gdmFsOwogIH0KICBmdW5jdGlvbiBsb29rdXBL
			ZXkobmFtZSwgZXh0cmFNYXAsIG1hcCwgaGFuZGxlKSB7CiAgICBmdW5jdGlvbiBsb29rdXAobWFw
			KSB7CiAgICAgIG1hcCA9IGdldEtleU1hcChtYXApOwogICAgICB2YXIgZm91bmQgPSBtYXBbbmFt
			ZV07CiAgICAgIGlmIChmb3VuZCAhPSBudWxsICYmIGhhbmRsZShmb3VuZCkpIHJldHVybiB0cnVl
			OwogICAgICBpZiAobWFwLmNhdGNoYWxsKSByZXR1cm4gaGFuZGxlKG1hcC5jYXRjaGFsbCk7CiAg
			ICAgIHZhciBmYWxsdGhyb3VnaCA9IG1hcC5mYWxsdGhyb3VnaDsKICAgICAgaWYgKGZhbGx0aHJv
			dWdoID09IG51bGwpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9T
			dHJpbmcuY2FsbChmYWxsdGhyb3VnaCkgIT0gIltvYmplY3QgQXJyYXldIikKICAgICAgICByZXR1
			cm4gbG9va3VwKGZhbGx0aHJvdWdoKTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSBmYWxsdGhy
			b3VnaC5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAgICBpZiAobG9va3VwKGZhbGx0aHJvdWdo
			W2ldKSkgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAg
			aWYgKGV4dHJhTWFwICYmIGxvb2t1cChleHRyYU1hcCkpIHJldHVybiB0cnVlOwogICAgcmV0dXJu
			IGxvb2t1cChtYXApOwogIH0KICBmdW5jdGlvbiBpc01vZGlmaWVyS2V5KGV2ZW50KSB7CiAgICB2
			YXIgbmFtZSA9IGtleU5hbWVzW2VfcHJvcChldmVudCwgImtleUNvZGUiKV07CiAgICByZXR1cm4g
			bmFtZSA9PSAiQ3RybCIgfHwgbmFtZSA9PSAiQWx0IiB8fCBuYW1lID09ICJTaGlmdCIgfHwgbmFt
			ZSA9PSAiTW9kIjsKICB9CgogIENvZGVNaXJyb3IuZnJvbVRleHRBcmVhID0gZnVuY3Rpb24odGV4
			dGFyZWEsIG9wdGlvbnMpIHsKICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9OwogICAgb3B0
			aW9ucy52YWx1ZSA9IHRleHRhcmVhLnZhbHVlOwogICAgaWYgKCFvcHRpb25zLnRhYmluZGV4ICYm
			IHRleHRhcmVhLnRhYmluZGV4KQogICAgICBvcHRpb25zLnRhYmluZGV4ID0gdGV4dGFyZWEudGFi
			aW5kZXg7CgogICAgZnVuY3Rpb24gc2F2ZSgpIHt0ZXh0YXJlYS52YWx1ZSA9IGluc3RhbmNlLmdl
			dFZhbHVlKCk7fQogICAgaWYgKHRleHRhcmVhLmZvcm0pIHsKICAgICAgLy8gRGVwbG9yYWJsZSBo
			YWNrIHRvIG1ha2UgdGhlIHN1Ym1pdCBtZXRob2QgZG8gdGhlIHJpZ2h0IHRoaW5nLgogICAgICB2
			YXIgcm1TdWJtaXQgPSBjb25uZWN0KHRleHRhcmVhLmZvcm0sICJzdWJtaXQiLCBzYXZlLCB0cnVl
			KTsKICAgICAgaWYgKHR5cGVvZiB0ZXh0YXJlYS5mb3JtLnN1Ym1pdCA9PSAiZnVuY3Rpb24iKSB7
			CiAgICAgICAgdmFyIHJlYWxTdWJtaXQgPSB0ZXh0YXJlYS5mb3JtLnN1Ym1pdDsKICAgICAgICBm
			dW5jdGlvbiB3cmFwcGVkU3VibWl0KCkgewogICAgICAgICAgc2F2ZSgpOwogICAgICAgICAgdGV4
			dGFyZWEuZm9ybS5zdWJtaXQgPSByZWFsU3VibWl0OwogICAgICAgICAgdGV4dGFyZWEuZm9ybS5z
			dWJtaXQoKTsKICAgICAgICAgIHRleHRhcmVhLmZvcm0uc3VibWl0ID0gd3JhcHBlZFN1Ym1pdDsK
			ICAgICAgICB9CiAgICAgICAgdGV4dGFyZWEuZm9ybS5zdWJtaXQgPSB3cmFwcGVkU3VibWl0Owog
			ICAgICB9CiAgICB9CgogICAgdGV4dGFyZWEuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIHZh
			ciBpbnN0YW5jZSA9IENvZGVNaXJyb3IoZnVuY3Rpb24obm9kZSkgewogICAgICB0ZXh0YXJlYS5w
			YXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0ZXh0YXJlYS5uZXh0U2libGluZyk7CiAgICB9
			LCBvcHRpb25zKTsKICAgIGluc3RhbmNlLnNhdmUgPSBzYXZlOwogICAgaW5zdGFuY2UuZ2V0VGV4
			dEFyZWEgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRleHRhcmVhOyB9OwogICAgaW5zdGFuY2UudG9U
			ZXh0QXJlYSA9IGZ1bmN0aW9uKCkgewogICAgICBzYXZlKCk7CiAgICAgIHRleHRhcmVhLnBhcmVu
			dE5vZGUucmVtb3ZlQ2hpbGQoaW5zdGFuY2UuZ2V0V3JhcHBlckVsZW1lbnQoKSk7CiAgICAgIHRl
			eHRhcmVhLnN0eWxlLmRpc3BsYXkgPSAiIjsKICAgICAgaWYgKHRleHRhcmVhLmZvcm0pIHsKICAg
			ICAgICBybVN1Ym1pdCgpOwogICAgICAgIGlmICh0eXBlb2YgdGV4dGFyZWEuZm9ybS5zdWJtaXQg
			PT0gImZ1bmN0aW9uIikKICAgICAgICAgIHRleHRhcmVhLmZvcm0uc3VibWl0ID0gcmVhbFN1Ym1p
			dDsKICAgICAgfQogICAgfTsKICAgIHJldHVybiBpbnN0YW5jZTsKICB9OwoKICAvLyBVdGlsaXR5
			IGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIHN0YXRlLiBFeHBvcnRlZCBiZWNhdXNlIG1vZGVz
			CiAgLy8gc29tZXRpbWVzIG5lZWQgdG8gZG8gdGhpcy4KICBmdW5jdGlvbiBjb3B5U3RhdGUobW9k
			ZSwgc3RhdGUpIHsKICAgIGlmIChzdGF0ZSA9PT0gdHJ1ZSkgcmV0dXJuIHN0YXRlOwogICAgaWYg
			KG1vZGUuY29weVN0YXRlKSByZXR1cm4gbW9kZS5jb3B5U3RhdGUoc3RhdGUpOwogICAgdmFyIG5z
			dGF0ZSA9IHt9OwogICAgZm9yICh2YXIgbiBpbiBzdGF0ZSkgewogICAgICB2YXIgdmFsID0gc3Rh
			dGVbbl07CiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheSkgdmFsID0gdmFsLmNvbmNhdChb
			XSk7CiAgICAgIG5zdGF0ZVtuXSA9IHZhbDsKICAgIH0KICAgIHJldHVybiBuc3RhdGU7CiAgfQog
			IENvZGVNaXJyb3IuY29weVN0YXRlID0gY29weVN0YXRlOwogIGZ1bmN0aW9uIHN0YXJ0U3RhdGUo
			bW9kZSwgYTEsIGEyKSB7CiAgICByZXR1cm4gbW9kZS5zdGFydFN0YXRlID8gbW9kZS5zdGFydFN0
			YXRlKGExLCBhMikgOiB0cnVlOwogIH0KICBDb2RlTWlycm9yLnN0YXJ0U3RhdGUgPSBzdGFydFN0
			YXRlOwoKICAvLyBUaGUgY2hhcmFjdGVyIHN0cmVhbSB1c2VkIGJ5IGEgbW9kZSdzIHBhcnNlci4K
			ICBmdW5jdGlvbiBTdHJpbmdTdHJlYW0oc3RyaW5nLCB0YWJTaXplKSB7CiAgICB0aGlzLnBvcyA9
			IHRoaXMuc3RhcnQgPSAwOwogICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7CiAgICB0aGlzLnRhYlNp
			emUgPSB0YWJTaXplIHx8IDg7CiAgfQogIFN0cmluZ1N0cmVhbS5wcm90b3R5cGUgPSB7CiAgICBl
			b2w6IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLnBvcyA+PSB0aGlzLnN0cmluZy5sZW5ndGg7fSwK
			ICAgIHNvbDogZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMucG9zID09IDA7fSwKICAgIHBlZWs6IGZ1
			bmN0aW9uKCkge3JldHVybiB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MpO30sCiAgICBuZXh0
			OiBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMucG9zIDwgdGhpcy5zdHJpbmcubGVuZ3RoKQog
			ICAgICAgIHJldHVybiB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MrKyk7CiAgICB9LAogICAg
			ZWF0OiBmdW5jdGlvbihtYXRjaCkgewogICAgICB2YXIgY2ggPSB0aGlzLnN0cmluZy5jaGFyQXQo
			dGhpcy5wb3MpOwogICAgICBpZiAodHlwZW9mIG1hdGNoID09ICJzdHJpbmciKSB2YXIgb2sgPSBj
			aCA9PSBtYXRjaDsKICAgICAgZWxzZSB2YXIgb2sgPSBjaCAmJiAobWF0Y2gudGVzdCA/IG1hdGNo
			LnRlc3QoY2gpIDogbWF0Y2goY2gpKTsKICAgICAgaWYgKG9rKSB7Kyt0aGlzLnBvczsgcmV0dXJu
			IGNoO30KICAgIH0sCiAgICBlYXRXaGlsZTogZnVuY3Rpb24obWF0Y2gpIHsKICAgICAgdmFyIHN0
			YXJ0ID0gdGhpcy5wb3M7CiAgICAgIHdoaWxlICh0aGlzLmVhdChtYXRjaCkpe30KICAgICAgcmV0
			dXJuIHRoaXMucG9zID4gc3RhcnQ7CiAgICB9LAogICAgZWF0U3BhY2U6IGZ1bmN0aW9uKCkgewog
			ICAgICB2YXIgc3RhcnQgPSB0aGlzLnBvczsKICAgICAgd2hpbGUgKC9bXHNcdTAwYTBdLy50ZXN0
			KHRoaXMuc3RyaW5nLmNoYXJBdCh0aGlzLnBvcykpKSArK3RoaXMucG9zOwogICAgICByZXR1cm4g
			dGhpcy5wb3MgPiBzdGFydDsKICAgIH0sCiAgICBza2lwVG9FbmQ6IGZ1bmN0aW9uKCkge3RoaXMu
			cG9zID0gdGhpcy5zdHJpbmcubGVuZ3RoO30sCiAgICBza2lwVG86IGZ1bmN0aW9uKGNoKSB7CiAg
			ICAgIHZhciBmb3VuZCA9IHRoaXMuc3RyaW5nLmluZGV4T2YoY2gsIHRoaXMucG9zKTsKICAgICAg
			aWYgKGZvdW5kID4gLTEpIHt0aGlzLnBvcyA9IGZvdW5kOyByZXR1cm4gdHJ1ZTt9CiAgICB9LAog
			ICAgYmFja1VwOiBmdW5jdGlvbihuKSB7dGhpcy5wb3MgLT0gbjt9LAogICAgY29sdW1uOiBmdW5j
			dGlvbigpIHtyZXR1cm4gY291bnRDb2x1bW4odGhpcy5zdHJpbmcsIHRoaXMuc3RhcnQsIHRoaXMu
			dGFiU2l6ZSk7fSwKICAgIGluZGVudGF0aW9uOiBmdW5jdGlvbigpIHtyZXR1cm4gY291bnRDb2x1
			bW4odGhpcy5zdHJpbmcsIG51bGwsIHRoaXMudGFiU2l6ZSk7fSwKICAgIG1hdGNoOiBmdW5jdGlv
			bihwYXR0ZXJuLCBjb25zdW1lLCBjYXNlSW5zZW5zaXRpdmUpIHsKICAgICAgaWYgKHR5cGVvZiBw
			YXR0ZXJuID09ICJzdHJpbmciKSB7CiAgICAgICAgZnVuY3Rpb24gY2FzZWQoc3RyKSB7cmV0dXJu
			IGNhc2VJbnNlbnNpdGl2ZSA/IHN0ci50b0xvd2VyQ2FzZSgpIDogc3RyO30KICAgICAgICBpZiAo
			Y2FzZWQodGhpcy5zdHJpbmcpLmluZGV4T2YoY2FzZWQocGF0dGVybiksIHRoaXMucG9zKSA9PSB0
			aGlzLnBvcykgewogICAgICAgICAgaWYgKGNvbnN1bWUgIT09IGZhbHNlKSB0aGlzLnBvcyArPSBw
			YXR0ZXJuLmxlbmd0aDsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQog
			ICAgICBlbHNlIHsKICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0cmluZy5zbGljZSh0aGlzLnBv
			cykubWF0Y2gocGF0dGVybik7CiAgICAgICAgaWYgKG1hdGNoICYmIGNvbnN1bWUgIT09IGZhbHNl
			KSB0aGlzLnBvcyArPSBtYXRjaFswXS5sZW5ndGg7CiAgICAgICAgcmV0dXJuIG1hdGNoOwogICAg
			ICB9CiAgICB9LAogICAgY3VycmVudDogZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJpbmcuc2xp
			Y2UodGhpcy5zdGFydCwgdGhpcy5wb3MpO30KICB9OwogIENvZGVNaXJyb3IuU3RyaW5nU3RyZWFt
			ID0gU3RyaW5nU3RyZWFtOwoKICBmdW5jdGlvbiBNYXJrZWRUZXh0KGZyb20sIHRvLCBjbGFzc05h
			bWUsIHNldCkgewogICAgdGhpcy5mcm9tID0gZnJvbTsgdGhpcy50byA9IHRvOyB0aGlzLnN0eWxl
			ID0gY2xhc3NOYW1lOyB0aGlzLnNldCA9IHNldDsKICB9CiAgTWFya2VkVGV4dC5wcm90b3R5cGUg
			PSB7CiAgICBhdHRhY2g6IGZ1bmN0aW9uKGxpbmUpIHsgdGhpcy5zZXQucHVzaChsaW5lKTsgfSwK
			ICAgIGRldGFjaDogZnVuY3Rpb24obGluZSkgewogICAgICB2YXIgaXggPSBpbmRleE9mKHRoaXMu
			c2V0LCBsaW5lKTsKICAgICAgaWYgKGl4ID4gLTEpIHRoaXMuc2V0LnNwbGljZShpeCwgMSk7CiAg
			ICB9LAogICAgc3BsaXQ6IGZ1bmN0aW9uKHBvcywgbGVuQmVmb3JlKSB7CiAgICAgIGlmICh0aGlz
			LnRvIDw9IHBvcyAmJiB0aGlzLnRvICE9IG51bGwpIHJldHVybiBudWxsOwogICAgICB2YXIgZnJv
			bSA9IHRoaXMuZnJvbSA8IHBvcyB8fCB0aGlzLmZyb20gPT0gbnVsbCA/IG51bGwgOiB0aGlzLmZy
			b20gLSBwb3MgKyBsZW5CZWZvcmU7CiAgICAgIHZhciB0byA9IHRoaXMudG8gPT0gbnVsbCA/IG51
			bGwgOiB0aGlzLnRvIC0gcG9zICsgbGVuQmVmb3JlOwogICAgICByZXR1cm4gbmV3IE1hcmtlZFRl
			eHQoZnJvbSwgdG8sIHRoaXMuc3R5bGUsIHRoaXMuc2V0KTsKICAgIH0sCiAgICBkdXA6IGZ1bmN0
			aW9uKCkgeyByZXR1cm4gbmV3IE1hcmtlZFRleHQobnVsbCwgbnVsbCwgdGhpcy5zdHlsZSwgdGhp
			cy5zZXQpOyB9LAogICAgY2xpcFRvOiBmdW5jdGlvbihmcm9tT3BlbiwgZnJvbSwgdG9PcGVuLCB0
			bywgZGlmZikgewogICAgICBpZiAodGhpcy5mcm9tICE9IG51bGwgJiYgdGhpcy5mcm9tID49IGZy
			b20pCiAgICAgICAgdGhpcy5mcm9tID0gTWF0aC5tYXgodG8sIHRoaXMuZnJvbSkgKyBkaWZmOwog
			ICAgICBpZiAodGhpcy50byAhPSBudWxsICYmIHRoaXMudG8gPiBmcm9tKQogICAgICAgIHRoaXMu
			dG8gPSB0byA8IHRoaXMudG8gPyB0aGlzLnRvICsgZGlmZiA6IGZyb207CiAgICAgIGlmIChmcm9t
			T3BlbiAmJiB0byA+IHRoaXMuZnJvbSAmJiAodG8gPCB0aGlzLnRvIHx8IHRoaXMudG8gPT0gbnVs
			bCkpCiAgICAgICAgdGhpcy5mcm9tID0gbnVsbDsKICAgICAgaWYgKHRvT3BlbiAmJiAoZnJvbSA8
			IHRoaXMudG8gfHwgdGhpcy50byA9PSBudWxsKSAmJiAoZnJvbSA+IHRoaXMuZnJvbSB8fCB0aGlz
			LmZyb20gPT0gbnVsbCkpCiAgICAgICAgdGhpcy50byA9IG51bGw7CiAgICB9LAogICAgaXNEZWFk
			OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZnJvbSAhPSBudWxsICYmIHRoaXMudG8gIT0gbnVs
			bCAmJiB0aGlzLmZyb20gPj0gdGhpcy50bzsgfSwKICAgIHNhbWVTZXQ6IGZ1bmN0aW9uKHgpIHsg
			cmV0dXJuIHRoaXMuc2V0ID09IHguc2V0OyB9CiAgfTsKCiAgZnVuY3Rpb24gQm9va21hcmsocG9z
			KSB7CiAgICB0aGlzLmZyb20gPSBwb3M7IHRoaXMudG8gPSBwb3M7IHRoaXMubGluZSA9IG51bGw7
			CiAgfQogIEJvb2ttYXJrLnByb3RvdHlwZSA9IHsKICAgIGF0dGFjaDogZnVuY3Rpb24obGluZSkg
			eyB0aGlzLmxpbmUgPSBsaW5lOyB9LAogICAgZGV0YWNoOiBmdW5jdGlvbihsaW5lKSB7IGlmICh0
			aGlzLmxpbmUgPT0gbGluZSkgdGhpcy5saW5lID0gbnVsbDsgfSwKICAgIHNwbGl0OiBmdW5jdGlv
			bihwb3MsIGxlbkJlZm9yZSkgewogICAgICBpZiAocG9zIDwgdGhpcy5mcm9tKSB7CiAgICAgICAg
			dGhpcy5mcm9tID0gdGhpcy50byA9ICh0aGlzLmZyb20gLSBwb3MpICsgbGVuQmVmb3JlOwogICAg
			ICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICB9LAogICAgaXNEZWFkOiBmdW5jdGlvbigpIHsg
			cmV0dXJuIHRoaXMuZnJvbSA+IHRoaXMudG87IH0sCiAgICBjbGlwVG86IGZ1bmN0aW9uKGZyb21P
			cGVuLCBmcm9tLCB0b09wZW4sIHRvLCBkaWZmKSB7CiAgICAgIGlmICgoZnJvbU9wZW4gfHwgZnJv
			bSA8IHRoaXMuZnJvbSkgJiYgKHRvT3BlbiB8fCB0byA+IHRoaXMudG8pKSB7CiAgICAgICAgdGhp
			cy5mcm9tID0gMDsgdGhpcy50byA9IC0xOwogICAgICB9IGVsc2UgaWYgKHRoaXMuZnJvbSA+IGZy
			b20pIHsKICAgICAgICB0aGlzLmZyb20gPSB0aGlzLnRvID0gTWF0aC5tYXgodG8sIHRoaXMuZnJv
			bSkgKyBkaWZmOwogICAgICB9CiAgICB9LAogICAgc2FtZVNldDogZnVuY3Rpb24oeCkgeyByZXR1
			cm4gZmFsc2U7IH0sCiAgICBmaW5kOiBmdW5jdGlvbigpIHsKICAgICAgaWYgKCF0aGlzLmxpbmUg
			fHwgIXRoaXMubGluZS5wYXJlbnQpIHJldHVybiBudWxsOwogICAgICByZXR1cm4ge2xpbmU6IGxp
			bmVObyh0aGlzLmxpbmUpLCBjaDogdGhpcy5mcm9tfTsKICAgIH0sCiAgICBjbGVhcjogZnVuY3Rp
			b24oKSB7CiAgICAgIGlmICh0aGlzLmxpbmUpIHsKICAgICAgICB2YXIgZm91bmQgPSBpbmRleE9m
			KHRoaXMubGluZS5tYXJrZWQsIHRoaXMpOwogICAgICAgIGlmIChmb3VuZCAhPSAtMSkgdGhpcy5s
			aW5lLm1hcmtlZC5zcGxpY2UoZm91bmQsIDEpOwogICAgICAgIHRoaXMubGluZSA9IG51bGw7CiAg
			ICAgIH0KICAgIH0KICB9OwoKICAvLyBMaW5lIG9iamVjdHMuIFRoZXNlIGhvbGQgc3RhdGUgcmVs
			YXRlZCB0byBhIGxpbmUsIGluY2x1ZGluZwogIC8vIGhpZ2hsaWdodGluZyBpbmZvICh0aGUgc3R5
			bGVzIGFycmF5KS4KICBmdW5jdGlvbiBMaW5lKHRleHQsIHN0eWxlcykgewogICAgdGhpcy5zdHls
			ZXMgPSBzdHlsZXMgfHwgW3RleHQsIG51bGxdOwogICAgdGhpcy50ZXh0ID0gdGV4dDsKICAgIHRo
			aXMuaGVpZ2h0ID0gMTsKICAgIHRoaXMubWFya2VkID0gdGhpcy5ndXR0ZXJNYXJrZXIgPSB0aGlz
			LmNsYXNzTmFtZSA9IHRoaXMuaGFuZGxlcnMgPSBudWxsOwogICAgdGhpcy5zdGF0ZUFmdGVyID0g
			dGhpcy5wYXJlbnQgPSB0aGlzLmhpZGRlbiA9IG51bGw7CiAgfQogIExpbmUuaW5oZXJpdE1hcmtz
			ID0gZnVuY3Rpb24odGV4dCwgb3JpZykgewogICAgdmFyIGxuID0gbmV3IExpbmUodGV4dCksIG1r
			ID0gb3JpZyAmJiBvcmlnLm1hcmtlZDsKICAgIGlmIChtaykgewogICAgICBmb3IgKHZhciBpID0g
			MDsgaSA8IG1rLmxlbmd0aDsgKytpKSB7CiAgICAgICAgaWYgKG1rW2ldLnRvID09IG51bGwgJiYg
			bWtbaV0uc3R5bGUpIHsKICAgICAgICAgIHZhciBuZXdtayA9IGxuLm1hcmtlZCB8fCAobG4ubWFy
			a2VkID0gW10pLCBtYXJrID0gbWtbaV07CiAgICAgICAgICB2YXIgbm1hcmsgPSBtYXJrLmR1cCgp
			OyBuZXdtay5wdXNoKG5tYXJrKTsgbm1hcmsuYXR0YWNoKGxuKTsKICAgICAgICB9CiAgICAgIH0K
			ICAgIH0KICAgIHJldHVybiBsbjsKICB9CiAgTGluZS5wcm90b3R5cGUgPSB7CiAgICAvLyBSZXBs
			YWNlIGEgcGllY2Ugb2YgYSBsaW5lLCBrZWVwaW5nIHRoZSBzdHlsZXMgYXJvdW5kIGl0IGludGFj
			dC4KICAgIHJlcGxhY2U6IGZ1bmN0aW9uKGZyb20sIHRvXywgdGV4dCkgewogICAgICB2YXIgc3Qg
			PSBbXSwgbWsgPSB0aGlzLm1hcmtlZCwgdG8gPSB0b18gPT0gbnVsbCA/IHRoaXMudGV4dC5sZW5n
			dGggOiB0b187CiAgICAgIGNvcHlTdHlsZXMoMCwgZnJvbSwgdGhpcy5zdHlsZXMsIHN0KTsKICAg
			ICAgaWYgKHRleHQpIHN0LnB1c2godGV4dCwgbnVsbCk7CiAgICAgIGNvcHlTdHlsZXModG8sIHRo
			aXMudGV4dC5sZW5ndGgsIHRoaXMuc3R5bGVzLCBzdCk7CiAgICAgIHRoaXMuc3R5bGVzID0gc3Q7
			CiAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBmcm9tKSArIHRleHQgKyB0aGlz
			LnRleHQuc2xpY2UodG8pOwogICAgICB0aGlzLnN0YXRlQWZ0ZXIgPSBudWxsOwogICAgICBpZiAo
			bWspIHsKICAgICAgICB2YXIgZGlmZiA9IHRleHQubGVuZ3RoIC0gKHRvIC0gZnJvbSk7CiAgICAg
			ICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkgewogICAgICAgICAgdmFyIG1h
			cmsgPSBta1tpXTsKICAgICAgICAgIG1hcmsuY2xpcFRvKGZyb20gPT0gbnVsbCwgZnJvbSB8fCAw
			LCB0b18gPT0gbnVsbCwgdG8sIGRpZmYpOwogICAgICAgICAgaWYgKG1hcmsuaXNEZWFkKCkpIHtt
			YXJrLmRldGFjaCh0aGlzKTsgbWsuc3BsaWNlKGktLSwgMSk7fQogICAgICAgIH0KICAgICAgfQog
			ICAgfSwKICAgIC8vIFNwbGl0IGEgcGFydCBvZmYgYSBsaW5lLCBrZWVwaW5nIHN0eWxlcyBhbmQg
			bWFya2VycyBpbnRhY3QuCiAgICBzcGxpdDogZnVuY3Rpb24ocG9zLCB0ZXh0QmVmb3JlKSB7CiAg
			ICAgIHZhciBzdCA9IFt0ZXh0QmVmb3JlLCBudWxsXSwgbWsgPSB0aGlzLm1hcmtlZDsKICAgICAg
			Y29weVN0eWxlcyhwb3MsIHRoaXMudGV4dC5sZW5ndGgsIHRoaXMuc3R5bGVzLCBzdCk7CiAgICAg
			IHZhciB0YWtlbiA9IG5ldyBMaW5lKHRleHRCZWZvcmUgKyB0aGlzLnRleHQuc2xpY2UocG9zKSwg
			c3QpOwogICAgICBpZiAobWspIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1rLmxlbmd0
			aDsgKytpKSB7CiAgICAgICAgICB2YXIgbWFyayA9IG1rW2ldOwogICAgICAgICAgdmFyIG5ld21h
			cmsgPSBtYXJrLnNwbGl0KHBvcywgdGV4dEJlZm9yZS5sZW5ndGgpOwogICAgICAgICAgaWYgKG5l
			d21hcmspIHsKICAgICAgICAgICAgaWYgKCF0YWtlbi5tYXJrZWQpIHRha2VuLm1hcmtlZCA9IFtd
			OwogICAgICAgICAgICB0YWtlbi5tYXJrZWQucHVzaChuZXdtYXJrKTsgbmV3bWFyay5hdHRhY2go
			dGFrZW4pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGFrZW47
			CiAgICB9LAogICAgYXBwZW5kOiBmdW5jdGlvbihsaW5lKSB7CiAgICAgIHZhciBteWxlbiA9IHRo
			aXMudGV4dC5sZW5ndGgsIG1rID0gbGluZS5tYXJrZWQsIG15bWsgPSB0aGlzLm1hcmtlZDsKICAg
			ICAgdGhpcy50ZXh0ICs9IGxpbmUudGV4dDsKICAgICAgY29weVN0eWxlcygwLCBsaW5lLnRleHQu
			bGVuZ3RoLCBsaW5lLnN0eWxlcywgdGhpcy5zdHlsZXMpOwogICAgICBpZiAobXltaykgewogICAg
			ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXltay5sZW5ndGg7ICsraSkKICAgICAgICAgIGlmICht
			eW1rW2ldLnRvID09IG51bGwpIG15bWtbaV0udG8gPSBteWxlbjsKICAgICAgfQogICAgICBpZiAo
			bWsgJiYgbWsubGVuZ3RoKSB7CiAgICAgICAgaWYgKCFteW1rKSB0aGlzLm1hcmtlZCA9IG15bWsg
			PSBbXTsKICAgICAgICBvdXRlcjogZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkg
			ewogICAgICAgICAgdmFyIG1hcmsgPSBta1tpXTsKICAgICAgICAgIGlmICghbWFyay5mcm9tKSB7
			CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXltay5sZW5ndGg7ICsraikgewogICAg
			ICAgICAgICAgIHZhciBteW1hcmsgPSBteW1rW2pdOwogICAgICAgICAgICAgIGlmIChteW1hcmsu
			dG8gPT0gbXlsZW4gJiYgbXltYXJrLnNhbWVTZXQobWFyaykpIHsKICAgICAgICAgICAgICAgIG15
			bWFyay50byA9IG1hcmsudG8gPT0gbnVsbCA/IG51bGwgOiBtYXJrLnRvICsgbXlsZW47CiAgICAg
			ICAgICAgICAgICBpZiAobXltYXJrLmlzRGVhZCgpKSB7CiAgICAgICAgICAgICAgICAgIG15bWFy
			ay5kZXRhY2godGhpcyk7CiAgICAgICAgICAgICAgICAgIG1rLnNwbGljZShpLS0sIDEpOwogICAg
			ICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7CiAgICAgICAgICAg
			ICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBteW1rLnB1c2gobWFyayk7
			CiAgICAgICAgICBtYXJrLmF0dGFjaCh0aGlzKTsKICAgICAgICAgIG1hcmsuZnJvbSArPSBteWxl
			bjsKICAgICAgICAgIGlmIChtYXJrLnRvICE9IG51bGwpIG1hcmsudG8gKz0gbXlsZW47CiAgICAg
			ICAgfQogICAgICB9CiAgICB9LAogICAgZml4TWFya0VuZHM6IGZ1bmN0aW9uKG90aGVyKSB7CiAg
			ICAgIHZhciBtayA9IHRoaXMubWFya2VkLCBvbWsgPSBvdGhlci5tYXJrZWQ7CiAgICAgIGlmICgh
			bWspIHJldHVybjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkgewog
			ICAgICAgIHZhciBtYXJrID0gbWtbaV0sIGNsb3NlID0gbWFyay50byA9PSBudWxsOwogICAgICAg
			IGlmIChjbG9zZSAmJiBvbWspIHsKICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb21rLmxl
			bmd0aDsgKytqKQogICAgICAgICAgICBpZiAob21rW2pdLnNhbWVTZXQobWFyaykpIHtjbG9zZSA9
			IGZhbHNlOyBicmVhazt9CiAgICAgICAgfQogICAgICAgIGlmIChjbG9zZSkgbWFyay50byA9IHRo
			aXMudGV4dC5sZW5ndGg7CiAgICAgIH0KICAgIH0sCiAgICBmaXhNYXJrU3RhcnRzOiBmdW5jdGlv
			bigpIHsKICAgICAgdmFyIG1rID0gdGhpcy5tYXJrZWQ7CiAgICAgIGlmICghbWspIHJldHVybjsK
			ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkKICAgICAgICBpZiAobWtb
			aV0uZnJvbSA9PSBudWxsKSBta1tpXS5mcm9tID0gMDsKICAgIH0sCiAgICBhZGRNYXJrOiBmdW5j
			dGlvbihtYXJrKSB7CiAgICAgIG1hcmsuYXR0YWNoKHRoaXMpOwogICAgICBpZiAodGhpcy5tYXJr
			ZWQgPT0gbnVsbCkgdGhpcy5tYXJrZWQgPSBbXTsKICAgICAgdGhpcy5tYXJrZWQucHVzaChtYXJr
			KTsKICAgICAgdGhpcy5tYXJrZWQuc29ydChmdW5jdGlvbihhLCBiKXtyZXR1cm4gKGEuZnJvbSB8
			fCAwKSAtIChiLmZyb20gfHwgMCk7fSk7CiAgICB9LAogICAgLy8gUnVuIHRoZSBnaXZlbiBtb2Rl
			J3MgcGFyc2VyIG92ZXIgYSBsaW5lLCB1cGRhdGUgdGhlIHN0eWxlcwogICAgLy8gYXJyYXksIHdo
			aWNoIGNvbnRhaW5zIGFsdGVybmF0aW5nIGZyYWdtZW50cyBvZiB0ZXh0IGFuZCBDU1MKICAgIC8v
			IGNsYXNzZXMuCiAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKG1vZGUsIHN0YXRlLCB0YWJTaXplKSB7
			CiAgICAgIHZhciBzdHJlYW0gPSBuZXcgU3RyaW5nU3RyZWFtKHRoaXMudGV4dCwgdGFiU2l6ZSks
			IHN0ID0gdGhpcy5zdHlsZXMsIHBvcyA9IDA7CiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2UsIGN1
			cldvcmQgPSBzdFswXSwgcHJldldvcmQ7CiAgICAgIGlmICh0aGlzLnRleHQgPT0gIiIgJiYgbW9k
			ZS5ibGFua0xpbmUpIG1vZGUuYmxhbmtMaW5lKHN0YXRlKTsKICAgICAgd2hpbGUgKCFzdHJlYW0u
			ZW9sKCkpIHsKICAgICAgICB2YXIgc3R5bGUgPSBtb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUpOwog
			ICAgICAgIHZhciBzdWJzdHIgPSB0aGlzLnRleHQuc2xpY2Uoc3RyZWFtLnN0YXJ0LCBzdHJlYW0u
			cG9zKTsKICAgICAgICBzdHJlYW0uc3RhcnQgPSBzdHJlYW0ucG9zOwogICAgICAgIGlmIChwb3Mg
			JiYgc3RbcG9zLTFdID09IHN0eWxlKQogICAgICAgICAgc3RbcG9zLTJdICs9IHN1YnN0cjsKICAg
			ICAgICBlbHNlIGlmIChzdWJzdHIpIHsKICAgICAgICAgIGlmICghY2hhbmdlZCAmJiAoc3RbcG9z
			KzFdICE9IHN0eWxlIHx8IChwb3MgJiYgc3RbcG9zLTJdICE9IHByZXZXb3JkKSkpIGNoYW5nZWQg
			PSB0cnVlOwogICAgICAgICAgc3RbcG9zKytdID0gc3Vic3RyOyBzdFtwb3MrK10gPSBzdHlsZTsK
			ICAgICAgICAgIHByZXZXb3JkID0gY3VyV29yZDsgY3VyV29yZCA9IHN0W3Bvc107CiAgICAgICAg
			fQogICAgICAgIC8vIEdpdmUgdXAgd2hlbiBsaW5lIGlzIHJpZGljdWxvdXNseSBsb25nCiAgICAg
			ICAgaWYgKHN0cmVhbS5wb3MgPiA1MDAwKSB7CiAgICAgICAgICBzdFtwb3MrK10gPSB0aGlzLnRl
			eHQuc2xpY2Uoc3RyZWFtLnBvcyk7IHN0W3BvcysrXSA9IG51bGw7CiAgICAgICAgICBicmVhazsK
			ICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHN0Lmxlbmd0aCAhPSBwb3MpIHtzdC5sZW5ndGgg
			PSBwb3M7IGNoYW5nZWQgPSB0cnVlO30KICAgICAgaWYgKHBvcyAmJiBzdFtwb3MtMl0gIT0gcHJl
			dldvcmQpIGNoYW5nZWQgPSB0cnVlOwogICAgICAvLyBTaG9ydCBsaW5lcyB3aXRoIHNpbXBsZSBo
			aWdobGlnaHRzIHJldHVybiBudWxsLCBhbmQgYXJlCiAgICAgIC8vIGNvdW50ZWQgYXMgY2hhbmdl
			ZCBieSB0aGUgZHJpdmVyIGJlY2F1c2UgdGhleSBhcmUgbGlrZWx5IHRvCiAgICAgIC8vIGhpZ2hs
			aWdodCB0aGUgc2FtZSB3YXkgaW4gdmFyaW91cyBjb250ZXh0cy4KICAgICAgcmV0dXJuIGNoYW5n
			ZWQgfHwgKHN0Lmxlbmd0aCA8IDUgJiYgdGhpcy50ZXh0Lmxlbmd0aCA8IDEwID8gbnVsbCA6IGZh
			bHNlKTsKICAgIH0sCiAgICAvLyBGZXRjaCB0aGUgcGFyc2VyIHRva2VuIGZvciBhIGdpdmVuIGNo
			YXJhY3Rlci4gVXNlZnVsIGZvciBoYWNrcwogICAgLy8gdGhhdCB3YW50IHRvIGluc3BlY3QgdGhl
			IG1vZGUgc3RhdGUgKHNheSwgZm9yIGNvbXBsZXRpb24pLgogICAgZ2V0VG9rZW5BdDogZnVuY3Rp
			b24obW9kZSwgc3RhdGUsIGNoKSB7CiAgICAgIHZhciB0eHQgPSB0aGlzLnRleHQsIHN0cmVhbSA9
			IG5ldyBTdHJpbmdTdHJlYW0odHh0KTsKICAgICAgd2hpbGUgKHN0cmVhbS5wb3MgPCBjaCAmJiAh
			c3RyZWFtLmVvbCgpKSB7CiAgICAgICAgc3RyZWFtLnN0YXJ0ID0gc3RyZWFtLnBvczsKICAgICAg
			ICB2YXIgc3R5bGUgPSBtb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUpOwogICAgICB9CiAgICAgIHJl
			dHVybiB7c3RhcnQ6IHN0cmVhbS5zdGFydCwKICAgICAgICAgICAgICBlbmQ6IHN0cmVhbS5wb3Ms
			CiAgICAgICAgICAgICAgc3RyaW5nOiBzdHJlYW0uY3VycmVudCgpLAogICAgICAgICAgICAgIGNs
			YXNzTmFtZTogc3R5bGUgfHwgbnVsbCwKICAgICAgICAgICAgICBzdGF0ZTogc3RhdGV9OwogICAg
			fSwKICAgIGluZGVudGF0aW9uOiBmdW5jdGlvbih0YWJTaXplKSB7cmV0dXJuIGNvdW50Q29sdW1u
			KHRoaXMudGV4dCwgbnVsbCwgdGFiU2l6ZSk7fSwKICAgIC8vIFByb2R1Y2VzIGFuIEhUTUwgZnJh
			Z21lbnQgZm9yIHRoZSBsaW5lLCB0YWtpbmcgc2VsZWN0aW9uLAogICAgLy8gbWFya2luZywgYW5k
			IGhpZ2hsaWdodGluZyBpbnRvIGFjY291bnQuCiAgICBnZXRIVE1MOiBmdW5jdGlvbihtYWtlVGFi
			LCBlbmRBdCkgewogICAgICB2YXIgaHRtbCA9IFtdLCBmaXJzdCA9IHRydWUsIGNvbCA9IDA7CiAg
			ICAgIGZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGUpIHsKICAgICAgICBpZiAoIXRleHQpIHJldHVy
			bjsKICAgICAgICAvLyBXb3JrIGFyb3VuZCBhIGJ1ZyB3aGVyZSwgaW4gc29tZSBjb21wYXQgbW9k
			ZXMsIElFIGlnbm9yZXMgbGVhZGluZyBzcGFjZXMKICAgICAgICBpZiAoZmlyc3QgJiYgaWUgJiYg
			dGV4dC5jaGFyQXQoMCkgPT0gIiAiKSB0ZXh0ID0gIlx1MDBhMCIgKyB0ZXh0LnNsaWNlKDEpOwog
			ICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgaWYgKHRleHQuaW5kZXhPZigiXHQiKSA9PSAt
			MSkgewogICAgICAgICAgY29sICs9IHRleHQubGVuZ3RoOwogICAgICAgICAgdmFyIGVzY2FwZWQg
			PSBodG1sRXNjYXBlKHRleHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgZXNjYXBl
			ZCA9ICIiOwogICAgICAgICAgZm9yICh2YXIgcG9zID0gMDs7KSB7CiAgICAgICAgICAgIHZhciBp
			ZHggPSB0ZXh0LmluZGV4T2YoIlx0IiwgcG9zKTsKICAgICAgICAgICAgaWYgKGlkeCA9PSAtMSkg
			ewogICAgICAgICAgICAgIGVzY2FwZWQgKz0gaHRtbEVzY2FwZSh0ZXh0LnNsaWNlKHBvcykpOwog
			ICAgICAgICAgICAgIGNvbCArPSB0ZXh0Lmxlbmd0aCAtIHBvczsKICAgICAgICAgICAgICBicmVh
			azsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb2wgKz0gaWR4IC0gcG9zOwog
			ICAgICAgICAgICAgIHZhciB0YWIgPSBtYWtlVGFiKGNvbCk7CiAgICAgICAgICAgICAgZXNjYXBl
			ZCArPSBodG1sRXNjYXBlKHRleHQuc2xpY2UocG9zLCBpZHgpKSArIHRhYi5odG1sOwogICAgICAg
			ICAgICAgIGNvbCArPSB0YWIud2lkdGg7CiAgICAgICAgICAgICAgcG9zID0gaWR4ICsgMTsKICAg
			ICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc3R5bGUpIGh0bWwu
			cHVzaCgnPHNwYW4gY2xhc3M9IicsIHN0eWxlLCAnIj4nLCBlc2NhcGVkLCAiPC9zcGFuPiIpOwog
			ICAgICAgIGVsc2UgaHRtbC5wdXNoKGVzY2FwZWQpOwogICAgICB9CiAgICAgIHZhciBzdCA9IHRo
			aXMuc3R5bGVzLCBhbGxUZXh0ID0gdGhpcy50ZXh0LCBtYXJrZWQgPSB0aGlzLm1hcmtlZDsKICAg
			ICAgdmFyIGxlbiA9IGFsbFRleHQubGVuZ3RoOwogICAgICBpZiAoZW5kQXQgIT0gbnVsbCkgbGVu
			ID0gTWF0aC5taW4oZW5kQXQsIGxlbik7CiAgICAgIGZ1bmN0aW9uIHN0eWxlVG9DbGFzcyhzdHls
			ZSkgewogICAgICAgIGlmICghc3R5bGUpIHJldHVybiBudWxsOwogICAgICAgIHJldHVybiAiY20t
			IiArIHN0eWxlLnJlcGxhY2UoLyArL2csICIgY20tIik7CiAgICAgIH0KCiAgICAgIGlmICghYWxs
			VGV4dCAmJiBlbmRBdCA9PSBudWxsKQogICAgICAgIHNwYW4oIiAiKTsKICAgICAgZWxzZSBpZiAo
			IW1hcmtlZCB8fCAhbWFya2VkLmxlbmd0aCkKICAgICAgICBmb3IgKHZhciBpID0gMCwgY2ggPSAw
			OyBjaCA8IGxlbjsgaSs9MikgewogICAgICAgICAgdmFyIHN0ciA9IHN0W2ldLCBzdHlsZSA9IHN0
			W2krMV0sIGwgPSBzdHIubGVuZ3RoOwogICAgICAgICAgaWYgKGNoICsgbCA+IGxlbikgc3RyID0g
			c3RyLnNsaWNlKDAsIGxlbiAtIGNoKTsKICAgICAgICAgIGNoICs9IGw7CiAgICAgICAgICBzcGFu
			KHN0ciwgc3R5bGVUb0NsYXNzKHN0eWxlKSk7CiAgICAgICAgfQogICAgICBlbHNlIHsKICAgICAg
			ICB2YXIgcG9zID0gMCwgaSA9IDAsIHRleHQgPSAiIiwgc3R5bGUsIHNnID0gMDsKICAgICAgICB2
			YXIgbmV4dENoYW5nZSA9IG1hcmtlZFswXS5mcm9tIHx8IDAsIG1hcmtzID0gW10sIG1hcmtwb3Mg
			PSAwOwogICAgICAgIGZ1bmN0aW9uIGFkdmFuY2VNYXJrcygpIHsKICAgICAgICAgIHZhciBtOwog
			ICAgICAgICAgd2hpbGUgKG1hcmtwb3MgPCBtYXJrZWQubGVuZ3RoICYmCiAgICAgICAgICAgICAg
			ICAgKChtID0gbWFya2VkW21hcmtwb3NdKS5mcm9tID09IHBvcyB8fCBtLmZyb20gPT0gbnVsbCkp
			IHsKICAgICAgICAgICAgaWYgKG0uc3R5bGUgIT0gbnVsbCkgbWFya3MucHVzaChtKTsKICAgICAg
			ICAgICAgKyttYXJrcG9zOwogICAgICAgICAgfQogICAgICAgICAgbmV4dENoYW5nZSA9IG1hcmtw
			b3MgPCBtYXJrZWQubGVuZ3RoID8gbWFya2VkW21hcmtwb3NdLmZyb20gOiBJbmZpbml0eTsKICAg
			ICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyArK2kpIHsKICAgICAgICAg
			ICAgdmFyIHRvID0gbWFya3NbaV0udG8gfHwgSW5maW5pdHk7CiAgICAgICAgICAgIGlmICh0byA9
			PSBwb3MpIG1hcmtzLnNwbGljZShpLS0sIDEpOwogICAgICAgICAgICBlbHNlIG5leHRDaGFuZ2Ug
			PSBNYXRoLm1pbih0bywgbmV4dENoYW5nZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAg
			IHZhciBtID0gMDsKICAgICAgICB3aGlsZSAocG9zIDwgbGVuKSB7CiAgICAgICAgICBpZiAobmV4
			dENoYW5nZSA9PSBwb3MpIGFkdmFuY2VNYXJrcygpOwogICAgICAgICAgdmFyIHVwdG8gPSBNYXRo
			Lm1pbihsZW4sIG5leHRDaGFuZ2UpOwogICAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAg
			ICAgaWYgKHRleHQpIHsKICAgICAgICAgICAgICB2YXIgZW5kID0gcG9zICsgdGV4dC5sZW5ndGg7
			CiAgICAgICAgICAgICAgdmFyIGFwcGxpZWRTdHlsZSA9IHN0eWxlOwogICAgICAgICAgICAgIGZv
			ciAodmFyIGogPSAwOyBqIDwgbWFya3MubGVuZ3RoOyArK2opCiAgICAgICAgICAgICAgICBhcHBs
			aWVkU3R5bGUgPSAoYXBwbGllZFN0eWxlID8gYXBwbGllZFN0eWxlICsgIiAiIDogIiIpICsgbWFy
			a3Nbal0uc3R5bGU7CiAgICAgICAgICAgICAgc3BhbihlbmQgPiB1cHRvID8gdGV4dC5zbGljZSgw
			LCB1cHRvIC0gcG9zKSA6IHRleHQsIGFwcGxpZWRTdHlsZSk7CiAgICAgICAgICAgICAgaWYgKGVu
			ZCA+PSB1cHRvKSB7dGV4dCA9IHRleHQuc2xpY2UodXB0byAtIHBvcyk7IHBvcyA9IHVwdG87IGJy
			ZWFrO30KICAgICAgICAgICAgICBwb3MgPSBlbmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAg
			dGV4dCA9IHN0W2krK107IHN0eWxlID0gc3R5bGVUb0NsYXNzKHN0W2krK10pOwogICAgICAgICAg
			fQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gaHRtbC5qb2luKCIiKTsKICAgIH0sCiAg
			ICBjbGVhblVwOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5wYXJlbnQgPSBudWxsOwogICAgICBp
			ZiAodGhpcy5tYXJrZWQpCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLm1hcmtlZC5s
			ZW5ndGg7IGkgPCBlOyArK2kpIHRoaXMubWFya2VkW2ldLmRldGFjaCh0aGlzKTsKICAgIH0KICB9
			OwogIC8vIFV0aWxpdHkgdXNlZCBieSByZXBsYWNlIGFuZCBzcGxpdCBhYm92ZQogIGZ1bmN0aW9u
			IGNvcHlTdHlsZXMoZnJvbSwgdG8sIHNvdXJjZSwgZGVzdCkgewogICAgZm9yICh2YXIgaSA9IDAs
			IHBvcyA9IDAsIHN0YXRlID0gMDsgcG9zIDwgdG87IGkrPTIpIHsKICAgICAgdmFyIHBhcnQgPSBz
			b3VyY2VbaV0sIGVuZCA9IHBvcyArIHBhcnQubGVuZ3RoOwogICAgICBpZiAoc3RhdGUgPT0gMCkg
			ewogICAgICAgIGlmIChlbmQgPiBmcm9tKSBkZXN0LnB1c2gocGFydC5zbGljZShmcm9tIC0gcG9z
			LCBNYXRoLm1pbihwYXJ0Lmxlbmd0aCwgdG8gLSBwb3MpKSwgc291cmNlW2krMV0pOwogICAgICAg
			IGlmIChlbmQgPj0gZnJvbSkgc3RhdGUgPSAxOwogICAgICB9CiAgICAgIGVsc2UgaWYgKHN0YXRl
			ID09IDEpIHsKICAgICAgICBpZiAoZW5kID4gdG8pIGRlc3QucHVzaChwYXJ0LnNsaWNlKDAsIHRv
			IC0gcG9zKSwgc291cmNlW2krMV0pOwogICAgICAgIGVsc2UgZGVzdC5wdXNoKHBhcnQsIHNvdXJj
			ZVtpKzFdKTsKICAgICAgfQogICAgICBwb3MgPSBlbmQ7CiAgICB9CiAgfQoKICAvLyBEYXRhIHN0
			cnVjdHVyZSB0aGF0IGhvbGRzIHRoZSBzZXF1ZW5jZSBvZiBsaW5lcy4KICBmdW5jdGlvbiBMZWFm
			Q2h1bmsobGluZXMpIHsKICAgIHRoaXMubGluZXMgPSBsaW5lczsKICAgIHRoaXMucGFyZW50ID0g
			bnVsbDsKICAgIGZvciAodmFyIGkgPSAwLCBlID0gbGluZXMubGVuZ3RoLCBoZWlnaHQgPSAwOyBp
			IDwgZTsgKytpKSB7CiAgICAgIGxpbmVzW2ldLnBhcmVudCA9IHRoaXM7CiAgICAgIGhlaWdodCAr
			PSBsaW5lc1tpXS5oZWlnaHQ7CiAgICB9CiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDsKICB9CiAg
			TGVhZkNodW5rLnByb3RvdHlwZSA9IHsKICAgIGNodW5rU2l6ZTogZnVuY3Rpb24oKSB7IHJldHVy
			biB0aGlzLmxpbmVzLmxlbmd0aDsgfSwKICAgIHJlbW92ZTogZnVuY3Rpb24oYXQsIG4sIGNhbGxi
			YWNrcykgewogICAgICBmb3IgKHZhciBpID0gYXQsIGUgPSBhdCArIG47IGkgPCBlOyArK2kpIHsK
			ICAgICAgICB2YXIgbGluZSA9IHRoaXMubGluZXNbaV07CiAgICAgICAgdGhpcy5oZWlnaHQgLT0g
			bGluZS5oZWlnaHQ7CiAgICAgICAgbGluZS5jbGVhblVwKCk7CiAgICAgICAgaWYgKGxpbmUuaGFu
			ZGxlcnMpCiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpbmUuaGFuZGxlcnMubGVuZ3Ro
			OyArK2opIGNhbGxiYWNrcy5wdXNoKGxpbmUuaGFuZGxlcnNbal0pOwogICAgICB9CiAgICAgIHRo
			aXMubGluZXMuc3BsaWNlKGF0LCBuKTsKICAgIH0sCiAgICBjb2xsYXBzZTogZnVuY3Rpb24obGlu
			ZXMpIHsKICAgICAgbGluZXMuc3BsaWNlLmFwcGx5KGxpbmVzLCBbbGluZXMubGVuZ3RoLCAwXS5j
			b25jYXQodGhpcy5saW5lcykpOwogICAgfSwKICAgIGluc2VydEhlaWdodDogZnVuY3Rpb24oYXQs
			IGxpbmVzLCBoZWlnaHQpIHsKICAgICAgdGhpcy5oZWlnaHQgKz0gaGVpZ2h0OwogICAgICB0aGlz
			LmxpbmVzLnNwbGljZS5hcHBseSh0aGlzLmxpbmVzLCBbYXQsIDBdLmNvbmNhdChsaW5lcykpOwog
			ICAgICBmb3IgKHZhciBpID0gMCwgZSA9IGxpbmVzLmxlbmd0aDsgaSA8IGU7ICsraSkgbGluZXNb
			aV0ucGFyZW50ID0gdGhpczsKICAgIH0sCiAgICBpdGVyTjogZnVuY3Rpb24oYXQsIG4sIG9wKSB7
			CiAgICAgIGZvciAodmFyIGUgPSBhdCArIG47IGF0IDwgZTsgKythdCkKICAgICAgICBpZiAob3Ao
			dGhpcy5saW5lc1thdF0pKSByZXR1cm4gdHJ1ZTsKICAgIH0KICB9OwogIGZ1bmN0aW9uIEJyYW5j
			aENodW5rKGNoaWxkcmVuKSB7CiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgICB2YXIg
			c2l6ZSA9IDAsIGhlaWdodCA9IDA7CiAgICBmb3IgKHZhciBpID0gMCwgZSA9IGNoaWxkcmVuLmxl
			bmd0aDsgaSA8IGU7ICsraSkgewogICAgICB2YXIgY2ggPSBjaGlsZHJlbltpXTsKICAgICAgc2l6
			ZSArPSBjaC5jaHVua1NpemUoKTsgaGVpZ2h0ICs9IGNoLmhlaWdodDsKICAgICAgY2gucGFyZW50
			ID0gdGhpczsKICAgIH0KICAgIHRoaXMuc2l6ZSA9IHNpemU7CiAgICB0aGlzLmhlaWdodCA9IGhl
			aWdodDsKICAgIHRoaXMucGFyZW50ID0gbnVsbDsKICB9CiAgQnJhbmNoQ2h1bmsucHJvdG90eXBl
			ID0gewogICAgY2h1bmtTaXplOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuc2l6ZTsgfSwKICAg
			IHJlbW92ZTogZnVuY3Rpb24oYXQsIG4sIGNhbGxiYWNrcykgewogICAgICB0aGlzLnNpemUgLT0g
			bjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7
			CiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1Np
			emUoKTsKICAgICAgICBpZiAoYXQgPCBzeikgewogICAgICAgICAgdmFyIHJtID0gTWF0aC5taW4o
			biwgc3ogLSBhdCksIG9sZEhlaWdodCA9IGNoaWxkLmhlaWdodDsKICAgICAgICAgIGNoaWxkLnJl
			bW92ZShhdCwgcm0sIGNhbGxiYWNrcyk7CiAgICAgICAgICB0aGlzLmhlaWdodCAtPSBvbGRIZWln
			aHQgLSBjaGlsZC5oZWlnaHQ7CiAgICAgICAgICBpZiAoc3ogPT0gcm0pIHsgdGhpcy5jaGlsZHJl
			bi5zcGxpY2UoaS0tLCAxKTsgY2hpbGQucGFyZW50ID0gbnVsbDsgfQogICAgICAgICAgaWYgKChu
			IC09IHJtKSA9PSAwKSBicmVhazsKICAgICAgICAgIGF0ID0gMDsKICAgICAgICB9IGVsc2UgYXQg
			LT0gc3o7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuc2l6ZSAtIG4gPCAyNSkgewogICAgICAgIHZh
			ciBsaW5lcyA9IFtdOwogICAgICAgIHRoaXMuY29sbGFwc2UobGluZXMpOwogICAgICAgIHRoaXMu
			Y2hpbGRyZW4gPSBbbmV3IExlYWZDaHVuayhsaW5lcyldOwogICAgICAgIHRoaXMuY2hpbGRyZW5b
			MF0ucGFyZW50ID0gdGhpczsKICAgICAgfQogICAgfSwKICAgIGNvbGxhcHNlOiBmdW5jdGlvbihs
			aW5lcykgewogICAgICBmb3IgKHZhciBpID0gMCwgZSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBp
			IDwgZTsgKytpKSB0aGlzLmNoaWxkcmVuW2ldLmNvbGxhcHNlKGxpbmVzKTsKICAgIH0sCiAgICBp
			bnNlcnQ6IGZ1bmN0aW9uKGF0LCBsaW5lcykgewogICAgICB2YXIgaGVpZ2h0ID0gMDsKICAgICAg
			Zm9yICh2YXIgaSA9IDAsIGUgPSBsaW5lcy5sZW5ndGg7IGkgPCBlOyArK2kpIGhlaWdodCArPSBs
			aW5lc1tpXS5oZWlnaHQ7CiAgICAgIHRoaXMuaW5zZXJ0SGVpZ2h0KGF0LCBsaW5lcywgaGVpZ2h0
			KTsKICAgIH0sCiAgICBpbnNlcnRIZWlnaHQ6IGZ1bmN0aW9uKGF0LCBsaW5lcywgaGVpZ2h0KSB7
			CiAgICAgIHRoaXMuc2l6ZSArPSBsaW5lcy5sZW5ndGg7CiAgICAgIHRoaXMuaGVpZ2h0ICs9IGhl
			aWdodDsKICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8
			IGU7ICsraSkgewogICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIHN6ID0gY2hp
			bGQuY2h1bmtTaXplKCk7CiAgICAgICAgaWYgKGF0IDw9IHN6KSB7CiAgICAgICAgICBjaGlsZC5p
			bnNlcnRIZWlnaHQoYXQsIGxpbmVzLCBoZWlnaHQpOwogICAgICAgICAgaWYgKGNoaWxkLmxpbmVz
			ICYmIGNoaWxkLmxpbmVzLmxlbmd0aCA+IDUwKSB7CiAgICAgICAgICAgIHdoaWxlIChjaGlsZC5s
			aW5lcy5sZW5ndGggPiA1MCkgewogICAgICAgICAgICAgIHZhciBzcGlsbGVkID0gY2hpbGQubGlu
			ZXMuc3BsaWNlKGNoaWxkLmxpbmVzLmxlbmd0aCAtIDI1LCAyNSk7CiAgICAgICAgICAgICAgdmFy
			IG5ld2xlYWYgPSBuZXcgTGVhZkNodW5rKHNwaWxsZWQpOwogICAgICAgICAgICAgIGNoaWxkLmhl
			aWdodCAtPSBuZXdsZWFmLmhlaWdodDsKICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGlj
			ZShpICsgMSwgMCwgbmV3bGVhZik7CiAgICAgICAgICAgICAgbmV3bGVhZi5wYXJlbnQgPSB0aGlz
			OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMubWF5YmVTcGlsbCgpOwogICAgICAgICAg
			fQogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGF0IC09IHN6OwogICAgICB9CiAg
			ICB9LAogICAgbWF5YmVTcGlsbDogZnVuY3Rpb24oKSB7CiAgICAgIGlmICh0aGlzLmNoaWxkcmVu
			Lmxlbmd0aCA8PSAxMCkgcmV0dXJuOwogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICBkbyB7CiAg
			ICAgICAgdmFyIHNwaWxsZWQgPSBtZS5jaGlsZHJlbi5zcGxpY2UobWUuY2hpbGRyZW4ubGVuZ3Ro
			IC0gNSwgNSk7CiAgICAgICAgdmFyIHNpYmxpbmcgPSBuZXcgQnJhbmNoQ2h1bmsoc3BpbGxlZCk7
			CiAgICAgICAgaWYgKCFtZS5wYXJlbnQpIHsgLy8gQmVjb21lIHRoZSBwYXJlbnQgbm9kZQogICAg
			ICAgICAgdmFyIGNvcHkgPSBuZXcgQnJhbmNoQ2h1bmsobWUuY2hpbGRyZW4pOwogICAgICAgICAg
			Y29weS5wYXJlbnQgPSBtZTsKICAgICAgICAgIG1lLmNoaWxkcmVuID0gW2NvcHksIHNpYmxpbmdd
			OwogICAgICAgICAgbWUgPSBjb3B5OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtZS5zaXpl
			IC09IHNpYmxpbmcuc2l6ZTsKICAgICAgICAgIG1lLmhlaWdodCAtPSBzaWJsaW5nLmhlaWdodDsK
			ICAgICAgICAgIHZhciBteUluZGV4ID0gaW5kZXhPZihtZS5wYXJlbnQuY2hpbGRyZW4sIG1lKTsK
			ICAgICAgICAgIG1lLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UobXlJbmRleCArIDEsIDAsIHNpYmxp
			bmcpOwogICAgICAgIH0KICAgICAgICBzaWJsaW5nLnBhcmVudCA9IG1lLnBhcmVudDsKICAgICAg
			fSB3aGlsZSAobWUuY2hpbGRyZW4ubGVuZ3RoID4gMTApOwogICAgICBtZS5wYXJlbnQubWF5YmVT
			cGlsbCgpOwogICAgfSwKICAgIGl0ZXI6IGZ1bmN0aW9uKGZyb20sIHRvLCBvcCkgeyB0aGlzLml0
			ZXJOKGZyb20sIHRvIC0gZnJvbSwgb3ApOyB9LAogICAgaXRlck46IGZ1bmN0aW9uKGF0LCBuLCBv
			cCkgewogICAgICBmb3IgKHZhciBpID0gMCwgZSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwg
			ZTsgKytpKSB7CiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgc3ogPSBjaGls
			ZC5jaHVua1NpemUoKTsKICAgICAgICBpZiAoYXQgPCBzeikgewogICAgICAgICAgdmFyIHVzZWQg
			PSBNYXRoLm1pbihuLCBzeiAtIGF0KTsKICAgICAgICAgIGlmIChjaGlsZC5pdGVyTihhdCwgdXNl
			ZCwgb3ApKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgIGlmICgobiAtPSB1c2VkKSA9PSAwKSBicmVh
			azsKICAgICAgICAgIGF0ID0gMDsKICAgICAgICB9IGVsc2UgYXQgLT0gc3o7CiAgICAgIH0KICAg
			IH0KICB9OwoKICBmdW5jdGlvbiBnZXRMaW5lQXQoY2h1bmssIG4pIHsKICAgIHdoaWxlICghY2h1
			bmsubGluZXMpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7OyArK2kpIHsKICAgICAgICB2YXIgY2hp
			bGQgPSBjaHVuay5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1NpemUoKTsKICAgICAgICBp
			ZiAobiA8IHN6KSB7IGNodW5rID0gY2hpbGQ7IGJyZWFrOyB9CiAgICAgICAgbiAtPSBzejsKICAg
			ICAgfQogICAgfQogICAgcmV0dXJuIGNodW5rLmxpbmVzW25dOwogIH0KICBmdW5jdGlvbiBsaW5l
			Tm8obGluZSkgewogICAgaWYgKGxpbmUucGFyZW50ID09IG51bGwpIHJldHVybiBudWxsOwogICAg
			dmFyIGN1ciA9IGxpbmUucGFyZW50LCBubyA9IGluZGV4T2YoY3VyLmxpbmVzLCBsaW5lKTsKICAg
			IGZvciAodmFyIGNodW5rID0gY3VyLnBhcmVudDsgY2h1bms7IGN1ciA9IGNodW5rLCBjaHVuayA9
			IGNodW5rLnBhcmVudCkgewogICAgICBmb3IgKHZhciBpID0gMCwgZSA9IGNodW5rLmNoaWxkcmVu
			Lmxlbmd0aDsgOyArK2kpIHsKICAgICAgICBpZiAoY2h1bmsuY2hpbGRyZW5baV0gPT0gY3VyKSBi
			cmVhazsKICAgICAgICBubyArPSBjaHVuay5jaGlsZHJlbltpXS5jaHVua1NpemUoKTsKICAgICAg
			fQogICAgfQogICAgcmV0dXJuIG5vOwogIH0KICBmdW5jdGlvbiBsaW5lQXRIZWlnaHQoY2h1bmss
			IGgpIHsKICAgIHZhciBuID0gMDsKICAgIG91dGVyOiBkbyB7CiAgICAgIGZvciAodmFyIGkgPSAw
			LCBlID0gY2h1bmsuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgZTsgKytpKSB7CiAgICAgICAgdmFyIGNo
			aWxkID0gY2h1bmsuY2hpbGRyZW5baV0sIGNoID0gY2hpbGQuaGVpZ2h0OwogICAgICAgIGlmICho
			IDwgY2gpIHsgY2h1bmsgPSBjaGlsZDsgY29udGludWUgb3V0ZXI7IH0KICAgICAgICBoIC09IGNo
			OwogICAgICAgIG4gKz0gY2hpbGQuY2h1bmtTaXplKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIG47
			CiAgICB9IHdoaWxlICghY2h1bmsubGluZXMpOwogICAgZm9yICh2YXIgaSA9IDAsIGUgPSBjaHVu
			ay5saW5lcy5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAgdmFyIGxpbmUgPSBjaHVuay5saW5l
			c1tpXSwgbGggPSBsaW5lLmhlaWdodDsKICAgICAgaWYgKGggPCBsaCkgYnJlYWs7CiAgICAgIGgg
			LT0gbGg7CiAgICB9CiAgICByZXR1cm4gbiArIGk7CiAgfQogIGZ1bmN0aW9uIGhlaWdodEF0TGlu
			ZShjaHVuaywgbikgewogICAgdmFyIGggPSAwOwogICAgb3V0ZXI6IGRvIHsKICAgICAgZm9yICh2
			YXIgaSA9IDAsIGUgPSBjaHVuay5jaGlsZHJlbi5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAg
			ICB2YXIgY2hpbGQgPSBjaHVuay5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1NpemUoKTsK
			ICAgICAgICBpZiAobiA8IHN6KSB7IGNodW5rID0gY2hpbGQ7IGNvbnRpbnVlIG91dGVyOyB9CiAg
			ICAgICAgbiAtPSBzejsKICAgICAgICBoICs9IGNoaWxkLmhlaWdodDsKICAgICAgfQogICAgICBy
			ZXR1cm4gaDsKICAgIH0gd2hpbGUgKCFjaHVuay5saW5lcyk7CiAgICBmb3IgKHZhciBpID0gMDsg
			aSA8IG47ICsraSkgaCArPSBjaHVuay5saW5lc1tpXS5oZWlnaHQ7CiAgICByZXR1cm4gaDsKICB9
			CgogIC8vIFRoZSBoaXN0b3J5IG9iamVjdCAnY2h1bmtzJyBjaGFuZ2VzIHRoYXQgYXJlIG1hZGUg
			Y2xvc2UgdG9nZXRoZXIKICAvLyBhbmQgYXQgYWxtb3N0IHRoZSBzYW1lIHRpbWUgaW50byBiaWdn
			ZXIgdW5kb2FibGUgdW5pdHMuCiAgZnVuY3Rpb24gSGlzdG9yeSgpIHsKICAgIHRoaXMudGltZSA9
			IDA7CiAgICB0aGlzLmRvbmUgPSBbXTsgdGhpcy51bmRvbmUgPSBbXTsKICB9CiAgSGlzdG9yeS5w
			cm90b3R5cGUgPSB7CiAgICBhZGRDaGFuZ2U6IGZ1bmN0aW9uKHN0YXJ0LCBhZGRlZCwgb2xkKSB7
			CiAgICAgIHRoaXMudW5kb25lLmxlbmd0aCA9IDA7CiAgICAgIHZhciB0aW1lID0gK25ldyBEYXRl
			LCBjdXIgPSB0aGlzLmRvbmVbdGhpcy5kb25lLmxlbmd0aCAtIDFdLCBsYXN0ID0gY3VyICYmIGN1
			cltjdXIubGVuZ3RoIC0gMV07CiAgICAgIHZhciBkdGltZSA9IHRpbWUgLSB0aGlzLnRpbWU7CiAg
			ICAgIGlmIChkdGltZSA+IDQwMCB8fCAhbGFzdCkgewogICAgICAgIHRoaXMuZG9uZS5wdXNoKFt7
			c3RhcnQ6IHN0YXJ0LCBhZGRlZDogYWRkZWQsIG9sZDogb2xkfV0pOwogICAgICB9IGVsc2UgaWYg
			KGxhc3Quc3RhcnQgPiBzdGFydCArIG9sZC5sZW5ndGggfHwgbGFzdC5zdGFydCArIGxhc3QuYWRk
			ZWQgPCBzdGFydCAtIGxhc3QuYWRkZWQgKyBsYXN0Lm9sZC5sZW5ndGgpIHsKICAgICAgICBjdXIu
			cHVzaCh7c3RhcnQ6IHN0YXJ0LCBhZGRlZDogYWRkZWQsIG9sZDogb2xkfSk7CiAgICAgIH0gZWxz
			ZSB7CiAgICAgICAgdmFyIG9sZG9mZiA9IDA7CiAgICAgICAgaWYgKHN0YXJ0IDwgbGFzdC5zdGFy
			dCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IGxhc3Quc3RhcnQgLSBzdGFydCAtIDE7IGkgPj0g
			MDsgLS1pKQogICAgICAgICAgICBsYXN0Lm9sZC51bnNoaWZ0KG9sZFtpXSk7CiAgICAgICAgICBs
			YXN0LmFkZGVkICs9IGxhc3Quc3RhcnQgLSBzdGFydDsKICAgICAgICAgIGxhc3Quc3RhcnQgPSBz
			dGFydDsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAobGFzdC5zdGFydCA8IHN0YXJ0KSB7CiAg
			ICAgICAgICBvbGRvZmYgPSBzdGFydCAtIGxhc3Quc3RhcnQ7CiAgICAgICAgICBhZGRlZCArPSBv
			bGRvZmY7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSBsYXN0LmFkZGVkIC0gb2xkb2Zm
			LCBlID0gb2xkLmxlbmd0aDsgaSA8IGU7ICsraSkKICAgICAgICAgIGxhc3Qub2xkLnB1c2gob2xk
			W2ldKTsKICAgICAgICBpZiAobGFzdC5hZGRlZCA8IGFkZGVkKSBsYXN0LmFkZGVkID0gYWRkZWQ7
			CiAgICAgIH0KICAgICAgdGhpcy50aW1lID0gdGltZTsKICAgIH0KICB9OwoKICBmdW5jdGlvbiBz
			dG9wTWV0aG9kKCkge2Vfc3RvcCh0aGlzKTt9CiAgLy8gRW5zdXJlIGFuIGV2ZW50IGhhcyBhIHN0
			b3AgbWV0aG9kLgogIGZ1bmN0aW9uIGFkZFN0b3AoZXZlbnQpIHsKICAgIGlmICghZXZlbnQuc3Rv
			cCkgZXZlbnQuc3RvcCA9IHN0b3BNZXRob2Q7CiAgICByZXR1cm4gZXZlbnQ7CiAgfQoKICBmdW5j
			dGlvbiBlX3ByZXZlbnREZWZhdWx0KGUpIHsKICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnBy
			ZXZlbnREZWZhdWx0KCk7CiAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTsKICB9CiAgZnVu
			Y3Rpb24gZV9zdG9wUHJvcGFnYXRpb24oZSkgewogICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSBl
			LnN0b3BQcm9wYWdhdGlvbigpOwogICAgZWxzZSBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7CiAgfQog
			IGZ1bmN0aW9uIGVfc3RvcChlKSB7ZV9wcmV2ZW50RGVmYXVsdChlKTsgZV9zdG9wUHJvcGFnYXRp
			b24oZSk7fQogIENvZGVNaXJyb3IuZV9zdG9wID0gZV9zdG9wOwogIENvZGVNaXJyb3IuZV9wcmV2
			ZW50RGVmYXVsdCA9IGVfcHJldmVudERlZmF1bHQ7CiAgQ29kZU1pcnJvci5lX3N0b3BQcm9wYWdh
			dGlvbiA9IGVfc3RvcFByb3BhZ2F0aW9uOwoKICBmdW5jdGlvbiBlX3RhcmdldChlKSB7cmV0dXJu
			IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDt9CiAgZnVuY3Rpb24gZV9idXR0b24oZSkgewogICAg
			aWYgKGUud2hpY2gpIHJldHVybiBlLndoaWNoOwogICAgZWxzZSBpZiAoZS5idXR0b24gJiAxKSBy
			ZXR1cm4gMTsKICAgIGVsc2UgaWYgKGUuYnV0dG9uICYgMikgcmV0dXJuIDM7CiAgICBlbHNlIGlm
			IChlLmJ1dHRvbiAmIDQpIHJldHVybiAyOwogIH0KCiAgLy8gQWxsb3cgM3JkLXBhcnR5IGNvZGUg
			dG8gb3ZlcnJpZGUgZXZlbnQgcHJvcGVydGllcyBieSBhZGRpbmcgYW4gb3ZlcnJpZGUKICAvLyBv
			YmplY3QgdG8gYW4gZXZlbnQgb2JqZWN0LgogIGZ1bmN0aW9uIGVfcHJvcChlLCBwcm9wKSB7CiAg
			ICB2YXIgb3ZlcnJpZGRlbiA9IGUub3ZlcnJpZGUgJiYgZS5vdmVycmlkZS5oYXNPd25Qcm9wZXJ0
			eShwcm9wKTsKICAgIHJldHVybiBvdmVycmlkZGVuID8gZS5vdmVycmlkZVtwcm9wXSA6IGVbcHJv
			cF07CiAgfQoKICAvLyBFdmVudCBoYW5kbGVyIHJlZ2lzdHJhdGlvbi4gSWYgZGlzY29ubmVjdCBp
			cyB0cnVlLCBpdCdsbCByZXR1cm4gYQogIC8vIGZ1bmN0aW9uIHRoYXQgdW5yZWdpc3RlcnMgdGhl
			IGhhbmRsZXIuCiAgZnVuY3Rpb24gY29ubmVjdChub2RlLCB0eXBlLCBoYW5kbGVyLCBkaXNjb25u
			ZWN0KSB7CiAgICBpZiAodHlwZW9mIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA9PSAiZnVuY3Rpb24i
			KSB7CiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7CiAg
			ICAgIGlmIChkaXNjb25uZWN0KSByZXR1cm4gZnVuY3Rpb24oKSB7bm9kZS5yZW1vdmVFdmVudExp
			c3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTt9OwogICAgfQogICAgZWxzZSB7CiAgICAgIHZh
			ciB3cmFwSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7aGFuZGxlcihldmVudCB8fCB3aW5kb3cu
			ZXZlbnQpO307CiAgICAgIG5vZGUuYXR0YWNoRXZlbnQoIm9uIiArIHR5cGUsIHdyYXBIYW5kbGVy
			KTsKICAgICAgaWYgKGRpc2Nvbm5lY3QpIHJldHVybiBmdW5jdGlvbigpIHtub2RlLmRldGFjaEV2
			ZW50KCJvbiIgKyB0eXBlLCB3cmFwSGFuZGxlcik7fTsKICAgIH0KICB9CiAgQ29kZU1pcnJvci5j
			b25uZWN0ID0gY29ubmVjdDsKCiAgZnVuY3Rpb24gRGVsYXllZCgpIHt0aGlzLmlkID0gbnVsbDt9
			CiAgRGVsYXllZC5wcm90b3R5cGUgPSB7c2V0OiBmdW5jdGlvbihtcywgZikge2NsZWFyVGltZW91
			dCh0aGlzLmlkKTsgdGhpcy5pZCA9IHNldFRpbWVvdXQoZiwgbXMpO319OwoKICB2YXIgUGFzcyA9
			IENvZGVNaXJyb3IuUGFzcyA9IHt0b1N0cmluZzogZnVuY3Rpb24oKXtyZXR1cm4gIkNvZGVNaXJy
			b3IuUGFzcyI7fX07CgogIC8vIERldGVjdCBkcmFnLWFuZC1kcm9wCiAgdmFyIGRyYWdBbmREcm9w
			ID0gZnVuY3Rpb24oKSB7CiAgICAvLyBJRTggaGFzIG9uZHJhZ3N0YXJ0IGFuZCBvbmRyb3AgcHJv
			cGVydGllcywgYnV0IGRvZXNuJ3Qgc2VlbSB0bwogICAgLy8gYWN0dWFsbHkgc3VwcG9ydCBvbmRy
			YWdzdGFydCB0aGUgd2F5IGl0J3Mgc3VwcG9zZWQgdG8gd29yay4KICAgIGlmICgvTVNJRSBbMS04
			XVxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSByZXR1cm4gZmFsc2U7CiAgICB2YXIgZGl2
			ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICByZXR1cm4gImRyYWdnYWJsZSIg
			aW4gZGl2OwogIH0oKTsKCiAgdmFyIGdlY2tvID0gL2dlY2tvXC9cZHs3fS9pLnRlc3QobmF2aWdh
			dG9yLnVzZXJBZ2VudCk7CiAgdmFyIGllID0gL01TSUUgXGQvLnRlc3QobmF2aWdhdG9yLnVzZXJB
			Z2VudCk7CiAgdmFyIGllX2x0OSA9IC9NU0lFIFsxLThdXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJB
			Z2VudCk7CiAgdmFyIHdlYmtpdCA9IC9XZWJLaXRcLy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50
			KTsKCiAgdmFyIGxpbmVTZXAgPSAiXG4iOwogIC8vIEZlYXR1cmUtZGV0ZWN0IHdoZXRoZXIgbmV3
			bGluZXMgaW4gdGV4dGFyZWFzIGFyZSBjb252ZXJ0ZWQgdG8gXHJcbgogIChmdW5jdGlvbiAoKSB7
			CiAgICB2YXIgdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZXh0YXJlYSIpOwogICAgdGUu
			dmFsdWUgPSAiZm9vXG5iYXIiOwogICAgaWYgKHRlLnZhbHVlLmluZGV4T2YoIlxyIikgPiAtMSkg
			bGluZVNlcCA9ICJcclxuIjsKICB9KCkpOwoKICAvLyBDb3VudHMgdGhlIGNvbHVtbiBvZmZzZXQg
			aW4gYSBzdHJpbmcsIHRha2luZyB0YWJzIGludG8gYWNjb3VudC4KICAvLyBVc2VkIG1vc3RseSB0
			byBmaW5kIGluZGVudGF0aW9uLgogIGZ1bmN0aW9uIGNvdW50Q29sdW1uKHN0cmluZywgZW5kLCB0
			YWJTaXplKSB7CiAgICBpZiAoZW5kID09IG51bGwpIHsKICAgICAgZW5kID0gc3RyaW5nLnNlYXJj
			aCgvW15cc1x1MDBhMF0vKTsKICAgICAgaWYgKGVuZCA9PSAtMSkgZW5kID0gc3RyaW5nLmxlbmd0
			aDsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwLCBuID0gMDsgaSA8IGVuZDsgKytpKSB7CiAgICAg
			IGlmIChzdHJpbmcuY2hhckF0KGkpID09ICJcdCIpIG4gKz0gdGFiU2l6ZSAtIChuICUgdGFiU2l6
			ZSk7CiAgICAgIGVsc2UgKytuOwogICAgfQogICAgcmV0dXJuIG47CiAgfQoKICBmdW5jdGlvbiBj
			b21wdXRlZFN0eWxlKGVsdCkgewogICAgaWYgKGVsdC5jdXJyZW50U3R5bGUpIHJldHVybiBlbHQu
			Y3VycmVudFN0eWxlOwogICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsdCwgbnVs
			bCk7CiAgfQoKICAvLyBGaW5kIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IGJ5IGZvbGxvd2lu
			ZyB0aGUgb2Zmc2V0UGFyZW50IGNoYWluLgogIC8vIElmIHNjcmVlbj09dHJ1ZSwgaXQgcmV0dXJu
			cyBzY3JlZW4gKHJhdGhlciB0aGFuIHBhZ2UpIGNvb3JkaW5hdGVzLgogIGZ1bmN0aW9uIGVsdE9m
			ZnNldChub2RlLCBzY3JlZW4pIHsKICAgIHZhciBib2QgPSBub2RlLm93bmVyRG9jdW1lbnQuYm9k
			eTsKICAgIHZhciB4ID0gMCwgeSA9IDAsIHNraXBCb2R5ID0gZmFsc2U7CiAgICBmb3IgKHZhciBu
			ID0gbm9kZTsgbjsgbiA9IG4ub2Zmc2V0UGFyZW50KSB7CiAgICAgIHZhciBvbCA9IG4ub2Zmc2V0
			TGVmdCwgb3QgPSBuLm9mZnNldFRvcDsKICAgICAgLy8gRmlyZWZveCByZXBvcnRzIHdlaXJkIGlu
			dmVydGVkIG9mZnNldHMgd2hlbiB0aGUgYm9keSBoYXMgYSBib3JkZXIuCiAgICAgIGlmIChuID09
			IGJvZCkgeyB4ICs9IE1hdGguYWJzKG9sKTsgeSArPSBNYXRoLmFicyhvdCk7IH0KICAgICAgZWxz
			ZSB7IHggKz0gb2wsIHkgKz0gb3Q7IH0KICAgICAgaWYgKHNjcmVlbiAmJiBjb21wdXRlZFN0eWxl
			KG4pLnBvc2l0aW9uID09ICJmaXhlZCIpCiAgICAgICAgc2tpcEJvZHkgPSB0cnVlOwogICAgfQog
			ICAgdmFyIGUgPSBzY3JlZW4gJiYgIXNraXBCb2R5ID8gbnVsbCA6IGJvZDsKICAgIGZvciAodmFy
			IG4gPSBub2RlLnBhcmVudE5vZGU7IG4gIT0gZTsgbiA9IG4ucGFyZW50Tm9kZSkKICAgICAgaWYg
			KG4uc2Nyb2xsTGVmdCAhPSBudWxsKSB7IHggLT0gbi5zY3JvbGxMZWZ0OyB5IC09IG4uc2Nyb2xs
			VG9wO30KICAgIHJldHVybiB7bGVmdDogeCwgdG9wOiB5fTsKICB9CiAgLy8gVXNlIHRoZSBmYXN0
			ZXIgYW5kIHNhbmVyIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBtZXRob2Qgd2hlbiBwb3NzaWJsZS4K
			ICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPSBu
			dWxsKSBlbHRPZmZzZXQgPSBmdW5jdGlvbihub2RlLCBzY3JlZW4pIHsKICAgIC8vIFRha2UgdGhl
			IHBhcnRzIG9mIGJvdW5kaW5nIGNsaWVudCByZWN0IHRoYXQgd2UgYXJlIGludGVyZXN0ZWQgaW4g
			c28gd2UgYXJlIGFibGUgdG8gZWRpdCBpZiBuZWVkIGJlLAogICAgLy8gc2luY2UgdGhlIHJldHVy
			bmVkIHZhbHVlIGNhbm5vdCBiZSBjaGFuZ2VkIGV4dGVybmFsbHkgKHRoZXkgYXJlIGtlcHQgaW4g
			c3luYyBhcyB0aGUgZWxlbWVudCBtb3ZlcyB3aXRoaW4gdGhlIHBhZ2UpCiAgICB0cnkgeyB2YXIg
			Ym94ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgYm94ID0geyB0b3A6IGJveC50b3As
			IGxlZnQ6IGJveC5sZWZ0IH07IH0KICAgIGNhdGNoKGUpIHsgYm94ID0ge3RvcDogMCwgbGVmdDog
			MH07IH0KICAgIGlmICghc2NyZWVuKSB7CiAgICAgIC8vIEdldCB0aGUgdG9wbGV2ZWwgc2Nyb2xs
			LCB3b3JraW5nIGFyb3VuZCBicm93c2VyIGRpZmZlcmVuY2VzLgogICAgICBpZiAod2luZG93LnBh
			Z2VZT2Zmc2V0ID09IG51bGwpIHsKICAgICAgICB2YXIgdCA9IGRvY3VtZW50LmRvY3VtZW50RWxl
			bWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGU7CiAgICAgICAgaWYgKHQuc2Nyb2xsVG9w
			ID09IG51bGwpIHQgPSBkb2N1bWVudC5ib2R5OwogICAgICAgIGJveC50b3AgKz0gdC5zY3JvbGxU
			b3A7IGJveC5sZWZ0ICs9IHQuc2Nyb2xsTGVmdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBib3gu
			dG9wICs9IHdpbmRvdy5wYWdlWU9mZnNldDsgYm94LmxlZnQgKz0gd2luZG93LnBhZ2VYT2Zmc2V0
			OwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYm94OwogIH07CgogIC8vIEdldCBhIG5vZGUncyB0
			ZXh0IGNvbnRlbnQuCiAgZnVuY3Rpb24gZWx0VGV4dChub2RlKSB7CiAgICByZXR1cm4gbm9kZS50
			ZXh0Q29udGVudCB8fCBub2RlLmlubmVyVGV4dCB8fCBub2RlLm5vZGVWYWx1ZSB8fCAiIjsKICB9
			CiAgZnVuY3Rpb24gc2VsZWN0SW5wdXQobm9kZSkgewogICAgaWYgKGlvcykgeyAvLyBNb2JpbGUg
			U2FmYXJpIGFwcGFyZW50bHkgaGFzIGEgYnVnIHdoZXJlIHNlbGVjdCgpIGlzIGJyb2tlbi4KICAg
			ICAgbm9kZS5zZWxlY3Rpb25TdGFydCA9IDA7CiAgICAgIG5vZGUuc2VsZWN0aW9uRW5kID0gbm9k
			ZS52YWx1ZS5sZW5ndGg7CiAgICB9IGVsc2Ugbm9kZS5zZWxlY3QoKTsKICB9CgogIC8vIE9wZXJh
			dGlvbnMgb24ge2xpbmUsIGNofSBvYmplY3RzLgogIGZ1bmN0aW9uIHBvc0VxKGEsIGIpIHtyZXR1
			cm4gYS5saW5lID09IGIubGluZSAmJiBhLmNoID09IGIuY2g7fQogIGZ1bmN0aW9uIHBvc0xlc3Mo
			YSwgYikge3JldHVybiBhLmxpbmUgPCBiLmxpbmUgfHwgKGEubGluZSA9PSBiLmxpbmUgJiYgYS5j
			aCA8IGIuY2gpO30KICBmdW5jdGlvbiBjb3B5UG9zKHgpIHtyZXR1cm4ge2xpbmU6IHgubGluZSwg
			Y2g6IHguY2h9O30KCiAgdmFyIGVzY2FwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50
			KCJwcmUiKTsKICBmdW5jdGlvbiBodG1sRXNjYXBlKHN0cikgewogICAgZXNjYXBlRWxlbWVudC50
			ZXh0Q29udGVudCA9IHN0cjsKICAgIHJldHVybiBlc2NhcGVFbGVtZW50LmlubmVySFRNTDsKICB9
			CiAgLy8gUmVjZW50IChsYXRlIDIwMTEpIE9wZXJhIGJldGFzIGluc2VydCBib2d1cyBuZXdsaW5l
			cyBhdCB0aGUgc3RhcnQKICAvLyBvZiB0aGUgdGV4dENvbnRlbnQsIHNvIHdlIHN0cmlwIHRob3Nl
			LgogIGlmIChodG1sRXNjYXBlKCJhIikgPT0gIlxuYSIpCiAgICBodG1sRXNjYXBlID0gZnVuY3Rp
			b24oc3RyKSB7CiAgICAgIGVzY2FwZUVsZW1lbnQudGV4dENvbnRlbnQgPSBzdHI7CiAgICAgIHJl
			dHVybiBlc2NhcGVFbGVtZW50LmlubmVySFRNTC5zbGljZSgxKTsKICAgIH07CiAgLy8gU29tZSBJ
			RXMgZG9uJ3QgcHJlc2VydmUgdGFicyB0aHJvdWdoIGlubmVySFRNTAogIGVsc2UgaWYgKGh0bWxF
			c2NhcGUoIlx0IikgIT0gIlx0IikKICAgIGh0bWxFc2NhcGUgPSBmdW5jdGlvbihzdHIpIHsKICAg
			ICAgZXNjYXBlRWxlbWVudC5pbm5lckhUTUwgPSAiIjsKICAgICAgZXNjYXBlRWxlbWVudC5hcHBl
			bmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIpKTsKICAgICAgcmV0dXJuIGVzY2Fw
			ZUVsZW1lbnQuaW5uZXJIVE1MOwogICAgfTsKICBDb2RlTWlycm9yLmh0bWxFc2NhcGUgPSBodG1s
			RXNjYXBlOwoKICAvLyBVc2VkIHRvIHBvc2l0aW9uIHRoZSBjdXJzb3IgYWZ0ZXIgYW4gdW5kby9y
			ZWRvIGJ5IGZpbmRpbmcgdGhlCiAgLy8gbGFzdCBlZGl0ZWQgY2hhcmFjdGVyLgogIGZ1bmN0aW9u
			IGVkaXRFbmQoZnJvbSwgdG8pIHsKICAgIGlmICghdG8pIHJldHVybiAwOwogICAgaWYgKCFmcm9t
			KSByZXR1cm4gdG8ubGVuZ3RoOwogICAgZm9yICh2YXIgaSA9IGZyb20ubGVuZ3RoLCBqID0gdG8u
			bGVuZ3RoOyBpID49IDAgJiYgaiA+PSAwOyAtLWksIC0taikKICAgICAgaWYgKGZyb20uY2hhckF0
			KGkpICE9IHRvLmNoYXJBdChqKSkgYnJlYWs7CiAgICByZXR1cm4gaiArIDE7CiAgfQoKICBmdW5j
			dGlvbiBpbmRleE9mKGNvbGxlY3Rpb24sIGVsdCkgewogICAgaWYgKGNvbGxlY3Rpb24uaW5kZXhP
			ZikgcmV0dXJuIGNvbGxlY3Rpb24uaW5kZXhPZihlbHQpOwogICAgZm9yICh2YXIgaSA9IDAsIGUg
			PSBjb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGU7ICsraSkKICAgICAgaWYgKGNvbGxlY3Rpb25baV0g
			PT0gZWx0KSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9CiAgZnVuY3Rpb24gaXNXb3JkQ2hh
			cihjaCkgewogICAgcmV0dXJuIC9cdy8udGVzdChjaCkgfHwgY2gudG9VcHBlckNhc2UoKSAhPSBj
			aC50b0xvd2VyQ2FzZSgpOwogIH0KCiAgLy8gU2VlIGlmICIiLnNwbGl0IGlzIHRoZSBicm9rZW4g
			SUUgdmVyc2lvbiwgaWYgc28sIHByb3ZpZGUgYW4KICAvLyBhbHRlcm5hdGl2ZSB3YXkgdG8gc3Bs
			aXQgbGluZXMuCiAgdmFyIHNwbGl0TGluZXMgPSAiXG5cbmIiLnNwbGl0KC9cbi8pLmxlbmd0aCAh
			PSAzID8gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICB2YXIgcG9zID0gMCwgbmwsIHJlc3VsdCA9IFtd
			OwogICAgd2hpbGUgKChubCA9IHN0cmluZy5pbmRleE9mKCJcbiIsIHBvcykpID4gLTEpIHsKICAg
			ICAgcmVzdWx0LnB1c2goc3RyaW5nLnNsaWNlKHBvcywgc3RyaW5nLmNoYXJBdChubC0xKSA9PSAi
			XHIiID8gbmwgLSAxIDogbmwpKTsKICAgICAgcG9zID0gbmwgKyAxOwogICAgfQogICAgcmVzdWx0
			LnB1c2goc3RyaW5nLnNsaWNlKHBvcykpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9IDogZnVuY3Rp
			b24oc3RyaW5nKXtyZXR1cm4gc3RyaW5nLnNwbGl0KC9ccj9cbi8pO307CiAgQ29kZU1pcnJvci5z
			cGxpdExpbmVzID0gc3BsaXRMaW5lczsKCiAgdmFyIGhhc1NlbGVjdGlvbiA9IHdpbmRvdy5nZXRT
			ZWxlY3Rpb24gPyBmdW5jdGlvbih0ZSkgewogICAgdHJ5IHsgcmV0dXJuIHRlLnNlbGVjdGlvblN0
			YXJ0ICE9IHRlLnNlbGVjdGlvbkVuZDsgfQogICAgY2F0Y2goZSkgeyByZXR1cm4gZmFsc2U7IH0K
			ICB9IDogZnVuY3Rpb24odGUpIHsKICAgIHRyeSB7dmFyIHJhbmdlID0gdGUub3duZXJEb2N1bWVu
			dC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTt9CiAgICBjYXRjaChlKSB7fQogICAgaWYgKCFyYW5n
			ZSB8fCByYW5nZS5wYXJlbnRFbGVtZW50KCkgIT0gdGUpIHJldHVybiBmYWxzZTsKICAgIHJldHVy
			biByYW5nZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgcmFuZ2UpICE9IDA7CiAgfTsK
			CiAgQ29kZU1pcnJvci5kZWZpbmVNb2RlKCJudWxsIiwgZnVuY3Rpb24oKSB7CiAgICByZXR1cm4g
			e3Rva2VuOiBmdW5jdGlvbihzdHJlYW0pIHtzdHJlYW0uc2tpcFRvRW5kKCk7fX07CiAgfSk7CiAg
			Q29kZU1pcnJvci5kZWZpbmVNSU1FKCJ0ZXh0L3BsYWluIiwgIm51bGwiKTsKCiAgdmFyIGtleU5h
			bWVzID0gezM6ICJFbnRlciIsIDg6ICJCYWNrc3BhY2UiLCA5OiAiVGFiIiwgMTM6ICJFbnRlciIs
			IDE2OiAiU2hpZnQiLCAxNzogIkN0cmwiLCAxODogIkFsdCIsCiAgICAgICAgICAgICAgICAgIDE5
			OiAiUGF1c2UiLCAyMDogIkNhcHNMb2NrIiwgMjc6ICJFc2MiLCAzMjogIlNwYWNlIiwgMzM6ICJQ
			YWdlVXAiLCAzNDogIlBhZ2VEb3duIiwgMzU6ICJFbmQiLAogICAgICAgICAgICAgICAgICAzNjog
			IkhvbWUiLCAzNzogIkxlZnQiLCAzODogIlVwIiwgMzk6ICJSaWdodCIsIDQwOiAiRG93biIsIDQ0
			OiAiUHJpbnRTY3JuIiwgNDU6ICJJbnNlcnQiLAogICAgICAgICAgICAgICAgICA0NjogIkRlbGV0
			ZSIsIDU5OiAiOyIsIDkxOiAiTW9kIiwgOTI6ICJNb2QiLCA5MzogIk1vZCIsIDE4NjogIjsiLCAx
			ODc6ICI9IiwgMTg4OiAiLCIsCiAgICAgICAgICAgICAgICAgIDE4OTogIi0iLCAxOTA6ICIuIiwg
			MTkxOiAiLyIsIDE5MjogImAiLCAyMTk6ICJbIiwgMjIwOiAiXFwiLCAyMjE6ICJdIiwgMjIyOiAi
			JyIsIDYzMjc2OiAiUGFnZVVwIiwKICAgICAgICAgICAgICAgICAgNjMyNzc6ICJQYWdlRG93biIs
			IDYzMjc1OiAiRW5kIiwgNjMyNzM6ICJIb21lIiwgNjMyMzQ6ICJMZWZ0IiwgNjMyMzI6ICJVcCIs
			IDYzMjM1OiAiUmlnaHQiLAogICAgICAgICAgICAgICAgICA2MzIzMzogIkRvd24iLCA2MzMwMjog
			Ikluc2VydCIsIDYzMjcyOiAiRGVsZXRlIn07CiAgQ29kZU1pcnJvci5rZXlOYW1lcyA9IGtleU5h
			bWVzOwogIChmdW5jdGlvbigpIHsKICAgIC8vIE51bWJlciBrZXlzCiAgICBmb3IgKHZhciBpID0g
			MDsgaSA8IDEwOyBpKyspIGtleU5hbWVzW2kgKyA0OF0gPSBTdHJpbmcoaSk7CiAgICAvLyBBbHBo
			YWJldGljIGtleXMKICAgIGZvciAodmFyIGkgPSA2NTsgaSA8PSA5MDsgaSsrKSBrZXlOYW1lc1tp
			XSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSk7CiAgICAvLyBGdW5jdGlvbiBrZXlzCiAgICBmb3Ig
			KHZhciBpID0gMTsgaSA8PSAxMjsgaSsrKSBrZXlOYW1lc1tpICsgMTExXSA9IGtleU5hbWVzW2kg
			KyA2MzIzNV0gPSAiRiIgKyBpOwogIH0pKCk7CgogIHJldHVybiBDb2RlTWlycm9yOwp9KSgpOwo=]]></Resource>
    <Resource ID="5cd10fee-6e10-5253-24ea-3edb0a87f9ec" Name="utils.js" Type="js"><![CDATA[Lyogc2VhcmNoY3Vyc29yICovCihmdW5jdGlvbigpe2Z1bmN0aW9uIFNlYXJjaEN1cnNvcihjbSxx
			dWVyeSxwb3MsY2FzZUZvbGQpe3RoaXMuYXRPY2N1cnJlbmNlPWZhbHNlO3RoaXMuY209Y207aWYo
			Y2FzZUZvbGQ9PW51bGwpY2FzZUZvbGQ9dHlwZW9mIHF1ZXJ5PT0ic3RyaW5nIiYmcXVlcnk9PXF1
			ZXJ5LnRvTG93ZXJDYXNlKCk7cG9zPXBvcz9jbS5jbGlwUG9zKHBvcyk6e2xpbmU6MCxjaDowfTt0
			aGlzLnBvcz17ZnJvbTpwb3MsdG86cG9zfTtpZih0eXBlb2YgcXVlcnkhPSJzdHJpbmciKXRoaXMu
			bWF0Y2hlcz1mdW5jdGlvbihyZXZlcnNlLHBvcyl7aWYocmV2ZXJzZSl7dmFyIGxpbmU9Y20uZ2V0
			TGluZShwb3MubGluZSkuc2xpY2UoMCxwb3MuY2gpLG1hdGNoPWxpbmUubWF0Y2gocXVlcnkpLHN0
			YXJ0PTA7d2hpbGUobWF0Y2gpe3ZhciBpbmQ9bGluZS5pbmRleE9mKG1hdGNoWzBdKTtzdGFydCs9
			aW5kO2xpbmU9bGluZS5zbGljZShpbmQrMSk7dmFyIG5ld21hdGNoPWxpbmUubWF0Y2gocXVlcnkp
			O2lmKG5ld21hdGNoKW1hdGNoPSBuZXdtYXRjaDtlbHNlIGJyZWFrO3N0YXJ0Kyt9fWVsc2UgdmFy
			IGxpbmU9Y20uZ2V0TGluZShwb3MubGluZSkuc2xpY2UocG9zLmNoKSxtYXRjaD1saW5lLm1hdGNo
			KHF1ZXJ5KSxzdGFydD1tYXRjaCYmcG9zLmNoK2xpbmUuaW5kZXhPZihtYXRjaFswXSk7aWYobWF0
			Y2gpcmV0dXJue2Zyb206e2xpbmU6cG9zLmxpbmUsY2g6c3RhcnR9LHRvOntsaW5lOnBvcy5saW5l
			LGNoOnN0YXJ0K21hdGNoWzBdLmxlbmd0aH0sbWF0Y2g6bWF0Y2h9fTtlbHNle2lmKGNhc2VGb2xk
			KXF1ZXJ5PXF1ZXJ5LnRvTG93ZXJDYXNlKCk7dmFyIGZvbGQ9Y2FzZUZvbGQ/ZnVuY3Rpb24oc3Ry
			KXtyZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCl9OmZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0cn07dmFy
			IHRhcmdldD1xdWVyeS5zcGxpdCgiXG4iKTtpZih0YXJnZXQubGVuZ3RoPT0xKXRoaXMubWF0Y2hl
			cz1mdW5jdGlvbihyZXZlcnNlLHBvcyl7dmFyIGxpbmU9Zm9sZChjbS5nZXRMaW5lKHBvcy5saW5l
			KSksbGVuPXF1ZXJ5Lmxlbmd0aCwgbWF0Y2g7aWYocmV2ZXJzZT9wb3MuY2g+PWxlbiYmKG1hdGNo
			PWxpbmUubGFzdEluZGV4T2YocXVlcnkscG9zLmNoLWxlbikpIT0tMToobWF0Y2g9bGluZS5pbmRl
			eE9mKHF1ZXJ5LHBvcy5jaCkpIT0tMSlyZXR1cm57ZnJvbTp7bGluZTpwb3MubGluZSxjaDptYXRj
			aH0sdG86e2xpbmU6cG9zLmxpbmUsY2g6bWF0Y2grbGVufX19O2Vsc2UgdGhpcy5tYXRjaGVzPWZ1
			bmN0aW9uKHJldmVyc2UscG9zKXt2YXIgbG49cG9zLmxpbmUsaWR4PXJldmVyc2U/dGFyZ2V0Lmxl
			bmd0aC0xOjAsbWF0Y2g9dGFyZ2V0W2lkeF0sbGluZT1mb2xkKGNtLmdldExpbmUobG4pKTt2YXIg
			b2Zmc2V0QT1yZXZlcnNlP2xpbmUuaW5kZXhPZihtYXRjaCkrbWF0Y2gubGVuZ3RoOmxpbmUubGFz
			dEluZGV4T2YobWF0Y2gpO2lmKHJldmVyc2U/b2Zmc2V0QT49cG9zLmNofHxvZmZzZXRBIT1tYXRj
			aC5sZW5ndGg6b2Zmc2V0QTw9cG9zLmNofHxvZmZzZXRBIT1saW5lLmxlbmd0aC1tYXRjaC5sZW5n
			dGgpcmV0dXJuOyBmb3IoOzspe2lmKHJldmVyc2U/IWxuOmxuPT1jbS5saW5lQ291bnQoKS0xKXJl
			dHVybjtsaW5lPWZvbGQoY20uZ2V0TGluZShsbis9cmV2ZXJzZT8tMToxKSk7bWF0Y2g9dGFyZ2V0
			W3JldmVyc2U/LS1pZHg6KytpZHhdO2lmKGlkeD4wJiZpZHg8dGFyZ2V0Lmxlbmd0aC0xKWlmKGxp
			bmUhPW1hdGNoKXJldHVybjtlbHNlIGNvbnRpbnVlO3ZhciBvZmZzZXRCPXJldmVyc2U/bGluZS5s
			YXN0SW5kZXhPZihtYXRjaCk6bGluZS5pbmRleE9mKG1hdGNoKSttYXRjaC5sZW5ndGg7aWYocmV2
			ZXJzZT9vZmZzZXRCIT1saW5lLmxlbmd0aC1tYXRjaC5sZW5ndGg6b2Zmc2V0QiE9bWF0Y2gubGVu
			Z3RoKXJldHVybjt2YXIgc3RhcnQ9e2xpbmU6cG9zLmxpbmUsY2g6b2Zmc2V0QX0sZW5kPXtsaW5l
			OmxuLGNoOm9mZnNldEJ9O3JldHVybntmcm9tOnJldmVyc2U/ZW5kOnN0YXJ0LHRvOnJldmVyc2U/
			c3RhcnQ6ZW5kfX19fX1TZWFyY2hDdXJzb3IucHJvdG90eXBlPXtmaW5kTmV4dDpmdW5jdGlvbigp
			e3JldHVybiB0aGlzLmZpbmQoZmFsc2UpfSwgZmluZFByZXZpb3VzOmZ1bmN0aW9uKCl7cmV0dXJu
			IHRoaXMuZmluZCh0cnVlKX0sZmluZDpmdW5jdGlvbihyZXZlcnNlKXt2YXIgc2VsZj10aGlzLHBv
			cz10aGlzLmNtLmNsaXBQb3MocmV2ZXJzZT90aGlzLnBvcy5mcm9tOnRoaXMucG9zLnRvKTtmdW5j
			dGlvbiBzYXZlUG9zQW5kRmFpbChsaW5lKXt2YXIgcG9zPXtsaW5lOmxpbmUsY2g6MH07c2VsZi5w
			b3M9e2Zyb206cG9zLHRvOnBvc307c2VsZi5hdE9jY3VycmVuY2U9ZmFsc2U7cmV0dXJuIGZhbHNl
			fWZvcig7Oyl7aWYodGhpcy5wb3M9dGhpcy5tYXRjaGVzKHJldmVyc2UscG9zKSl7dGhpcy5hdE9j
			Y3VycmVuY2U9dHJ1ZTtyZXR1cm4gdGhpcy5wb3MubWF0Y2h8fHRydWV9aWYocmV2ZXJzZSl7aWYo
			IXBvcy5saW5lKXJldHVybiBzYXZlUG9zQW5kRmFpbCgwKTtwb3M9e2xpbmU6cG9zLmxpbmUtMSxj
			aDp0aGlzLmNtLmdldExpbmUocG9zLmxpbmUtMSkubGVuZ3RofX1lbHNle3ZhciBtYXhMaW5lPXRo
			aXMuY20ubGluZUNvdW50KCk7IGlmKHBvcy5saW5lPT1tYXhMaW5lLTEpcmV0dXJuIHNhdmVQb3NB
			bmRGYWlsKG1heExpbmUpO3Bvcz17bGluZTpwb3MubGluZSsxLGNoOjB9fX19LGZyb206ZnVuY3Rp
			b24oKXtpZih0aGlzLmF0T2NjdXJyZW5jZSlyZXR1cm4gdGhpcy5wb3MuZnJvbX0sdG86ZnVuY3Rp
			b24oKXtpZih0aGlzLmF0T2NjdXJyZW5jZSlyZXR1cm4gdGhpcy5wb3MudG99LHJlcGxhY2U6ZnVu
			Y3Rpb24obmV3VGV4dCl7dmFyIHNlbGY9dGhpcztpZih0aGlzLmF0T2NjdXJyZW5jZSlzZWxmLnBv
			cy50bz10aGlzLmNtLnJlcGxhY2VSYW5nZShuZXdUZXh0LHNlbGYucG9zLmZyb20sc2VsZi5wb3Mu
			dG8pfX07Q29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oImdldFNlYXJjaEN1cnNvciIsZnVuY3Rp
			b24ocXVlcnkscG9zLGNhc2VGb2xkKXtyZXR1cm4gbmV3IFNlYXJjaEN1cnNvcih0aGlzLHF1ZXJ5
			LHBvcyxjYXNlRm9sZCl9KX0pKCk7Ci8qIG1hdGNoLWhpZ2hsaWdodGVyICovCihmdW5jdGlvbigp
			e3ZhciBERUZBVUxUX01JTl9DSEFSUz0yO2Z1bmN0aW9uIE1hdGNoSGlnaGxpZ2h0U3RhdGUoKXt0
			aGlzLm1hcmtlZD1bXX1mdW5jdGlvbiBnZXRNYXRjaEhpZ2hsaWdodFN0YXRlKGNtKXtyZXR1cm4g
			Y20uX21hdGNoSGlnaGxpZ2h0U3RhdGV8fChjbS5fbWF0Y2hIaWdobGlnaHRTdGF0ZT1uZXcgTWF0
			Y2hIaWdobGlnaHRTdGF0ZSl9ZnVuY3Rpb24gY2xlYXJNYXJrcyhjbSl7dmFyIHN0YXRlPWdldE1h
			dGNoSGlnaGxpZ2h0U3RhdGUoY20pO2Zvcih2YXIgaT0wO2k8c3RhdGUubWFya2VkLmxlbmd0aDsr
			K2kpc3RhdGUubWFya2VkW2ldLmNsZWFyKCk7c3RhdGUubWFya2VkPVtdfWZ1bmN0aW9uIG1hcmtE
			b2N1bWVudChjbSxjbGFzc05hbWUsbWluQ2hhcnMpe2NsZWFyTWFya3MoY20pO21pbkNoYXJzPXR5
			cGVvZiBtaW5DaGFycyE9PSJ1bmRlZmluZWQiP21pbkNoYXJzOkRFRkFVTFRfTUlOX0NIQVJTO2lm
			KGNtLnNvbWV0aGluZ1NlbGVjdGVkKCkmJmNtLmdldFNlbGVjdGlvbigpLmxlbmd0aD49IG1pbkNo
			YXJzKXt2YXIgc3RhdGU9Z2V0TWF0Y2hIaWdobGlnaHRTdGF0ZShjbSk7dmFyIHF1ZXJ5PWNtLmdl
			dFNlbGVjdGlvbigpO2NtLm9wZXJhdGlvbihmdW5jdGlvbigpe2lmKGNtLmxpbmVDb3VudCgpPDJF
			Mylmb3IodmFyIGN1cnNvcj1jbS5nZXRTZWFyY2hDdXJzb3IocXVlcnkpO2N1cnNvci5maW5kTmV4
			dCgpOylpZighKGN1cnNvci5mcm9tKCkubGluZT09PWNtLmdldEN1cnNvcih0cnVlKS5saW5lJiZj
			dXJzb3IuZnJvbSgpLmNoPT09Y20uZ2V0Q3Vyc29yKHRydWUpLmNoKSlzdGF0ZS5tYXJrZWQucHVz
			aChjbS5tYXJrVGV4dChjdXJzb3IuZnJvbSgpLGN1cnNvci50bygpLGNsYXNzTmFtZSkpfSl9fUNv
			ZGVNaXJyb3IuZGVmaW5lRXh0ZW5zaW9uKCJtYXRjaEhpZ2hsaWdodCIsZnVuY3Rpb24oY2xhc3NO
			YW1lLG1pbkNoYXJzKXttYXJrRG9jdW1lbnQodGhpcyxjbGFzc05hbWUsbWluQ2hhcnMpfSl9KSgp
			Owo=]]></Resource>
    <Resource ID="637e54fd-1431-0dee-2e82-f223db960509" Name="buttons" Type="gif"><![CDATA[R0lGODlhAAMYANU7AGOR1s/Tz/7+/vjumv8lJbTE5P37BoiGg6usr3t7esHR65aLW2CQPoqw6uGm
			DT9gp+3RaqWzzZaszc/h+AAAAEhGSC9TmP9oaP8A/2aBnE+C1OTq8ZCgsy8vMISUrbXOjN7d3om8
			YEFrwfDz+DFHYVJSULSoi6K96iF3EYu0jdKkXZ99KjY8Rnif4lBfdJmYlh8+h2JhYnVjSUA+PG1v
			c7++wCAcIBARED8vHwD//wAA/////wAAAAAAAAAAAAAAACH5BAEAADsALAAAAAAAAxgAAAb/wJ1w
			SCwaj8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHrNbrvf8Lh8Tq/b7/i8fs/v+/+AgYKD
			hIWGh4iJiouMjY6PkJGSURRXlZOYmZpPCi0aGgAAGg1OBaanpxERCputrmUKAAVVGxqvkhMnJwWs
			ThsKBScTG2cKERLIycoSvWICJxsjpBMNpFABCEMg2UunNaoBVybj4VPjJuVPGiPsIxsbDQACTAUC
			9vf3EiTNkyM1B3U+SVBCoaDBg5QOKhSjcCGUhgibSIBY0AUTDxpgCKG4RIOIIRQvJUEYkqDBHSWR
			hHSocuXJkS4Lmoz55EQDmzcLEFuyIVi1/2r8xESI1q4ouw0RlPg78OIAiBFMD9QYwalBLnjWoIDw
			ACJahBr08EXIEJRJgHMLBgyAIGPBgQXpkJwdl3Zt27dxk6ybwHfCCGoDu+EbLKHGviY3Eiu2gWBn
			lA6QIT9RfGMH5ScgSrCwo+ABQZAiRToJHZohaJCUDKguqNqAaCUZbAjhQEH2DhY06MEIPGXDg7K3
			ClndUSCeiOMadtE74fGBCAAtWE34ODNlEgnSJKT4wD2FB+gjeBsR8OLFBhA1yoNAX36eEwUNBFSj
			wmHoBhp5j9TLVyPDrCcmqDXACwMk8IEMMkDggAxLBKgWgQYiqCCDTOzVVzS1MBHBYPhwQP/Ch00E
			YEMJldVgQwfcRAHCDDOAcE0JJYQTAIz5JTFCDJXR0RlwqG1U2kOnbYREDBVUkMAOCczQQQlIzjBa
			kChB4VprrK1mQBM0nCCECxRYtAMHHpAhggUWWDHCCQD4CJFeGkwA2potcfTESg9Zd0RMMinRgE8A
			HJeBBg8kxwRzFvx5HHTBUAcGdg1IwF0IkIbgQQvhJVFDAiAcUEIMLyQQQwkHIJAAWEr909SRUDU1
			FRQRvBBAAS6QqsSGAQQwAQen4PSfEgiotcAHa0GgQgkrLLhErwP8GuywxVKohAAW8qWAAiNo4F4S
			G3J4DwgBkODEDTgKcUMJHUxRQwmyPlH/5BDrQpFAB45BQUMM3JyboxPz1kviDiI8UGYTeVryGhI2
			VDBEB5UcYMPATAQcRWurUQDxlVAszMEfZ4qyk51FTPBJA8RwHFwSLZTc5wMSTNDZKEw0ACgrEpAJ
			XQueVSfndWduFymkGVAqXhFNBTBCBTUEUAMCFYwQAFPPlndeeju8sF56L1yr4QsIZBBDE9ketZ89
			DYigpRIOLkADgmgX6yTZvp5Nw5+fCKTE0tFKW20M6RqRrT018G2P0t4iFq6JHbwwRQxbSwHjEIsv
			MSOoI9BgQwxOCREAkTUSgcAMRNcwAwWGP7F555+HXmedDjmcRMEHX1ICw0uo/sTEVbYG/8UJFNxb
			CgA8NiH3FHH7+y8UwZM5BZ6wq+mSzSITgfwSokCXwdj8sryEyzUTp0ELogz/BaM679zzBj9rjt8B
			RcJY5AEB0JDiEZdmumk484Iqat5KFJABDS7kxoQEAqiBCi5wgRPgowUFsAD1jkAgtSjIARB0gNqW
			0MC1OGAdRaGGPI4AAlftZQN98YsGaoAfbN2jBgSwBwH6BrhvxaADN7DBDWgQLydcDn9NaNwOdJiE
			GBgtRgmYXAkSEIAXlKACPEQC0sgFOiksEWGmO92cduCBS1gxeURgnRAQJoTXSUEmCQijGMWoBNpJ
			DGJFMhgTMkCBzUBBFBpBCZyU0Bnlsf/ECOTzl4vkGBElTMBfD5hFQ0ZGPBFsj3dDMOQCkcCc7MHH
			E2OK3c2WgJ0TaGdnIcgAyMqnDRpgDQEvoEECysOAUqZACUGjwT12YA8QEJFpT+CfC5Lyv7+B0IDV
			mAAALOAvVDpQQWDyQAb256UkNBACCqqbAADDwABsYIzQTMAGSGjCAK6QbyscAQgCx4QYligxUXSC
			DWwjhcQMwZw8uRy6aFCuAFTgBTFgzA72SEGE+U8KL7AnFRx2xyJUsQh56qdlEFaQG7iONC9pyQ5o
			QICGJiAHED1SEsyIRgFsoF1KYAEFMhCFAuymCjsyEwc4yseE6iUD9BykJCfZsObBhKX/AMVTR44z
			pn8pQJGDepkQaEqmOC7qTJeMVAY4sMkkCAAEMaCBUotGgxB8IAAhYMAplYifBKRvnkUiovve4wlP
			bG+RRuCAAAhIwPjYUgEx8yUyIShWW7qgmAwMFgTXgYO61tUdtjDCAewhNKOwo28CuKcRACiAa56Q
			AC1EjAzFdaIoIMAG4ZzMvdCphHFa9rKYHScTPGeQyG72cwXxbEtjisV/Og+hR7jB2nbAxR2KxqR3
			qkQCGkqAh0Z0CRCrXQUsig01KsGgJyDAEIQ7hn55j5CMiAAonCAK6rmpCbqIrnRxMh+c6UICCVgA
			AxbQgmqQLwoM4I4AIIWCJIDAkwgA/2VuRpneUNKTjqJ4gHM8EiYlcOAvIABGC+QTik9E4LhAWysE
			PSAAVSBgAi4oADeN8AIBOwAAI8DBBCSMA2rltQgJsAcCuFWrDm9jBAJI3BEIi0LAlngC3WpCDVRb
			iRVDVivjzBwTKnADsKx4tUmI0Q5mEMrKiAgBkssGk5RQA4SlN7Q7+B2RjYwAJCfECFik4mv4iYQb
			lEsIC+vilEcLzQMkwMtzogA7drsBbFh1CVW8AW13sOY9kASmp5WJS0tKp5cuz851jtOdo/AJsDLy
			E1I4wbQGbYrptkAJ2GFAVFegAhWsoJQM+C4UwnuPD5QXCUdN6lKRpNR5gcBqJPNIof80YAwAF8FD
			H/qQPATwF2BIwKdHOICDCewOlbmABBXAMRFk/cAL/mXCdrswEYhYRPTU4NjHXhq3dE2EtlqT1Svk
			S4pbepAbmOcJmZ0CUg0Sg/ciAYklGBGJOsApIbygAuRewsK40eRLFCB7q6MAu2U32iiYFkq/vfIO
			sryDCkSZtAU5QGsOgIKCS3SlBSGzmX377YPQtqG0TIL+diWFT8AbuYlQAHOEXaHk9O4I0f1JNUpG
			8kPjrMMB+IAKUC7pJ6AAUuMNwaWZUDIByKLiwLCAAjRQAH1EQR6iiNurlbCAXjsgAyNAgAQQwIEa
			cIADOEBC0SPo62FImC/VOsKo/mH/NGQnWypFToKz/WHRGuRXAdPG+BQ6Q3EwqLQJVQyoQIlArg7k
			RnKqjaeVqZCA1iSg4Cg4uBOKVGZRMbwJL6Dt+5CQARHEEc5F4Lkd+6hnOSZEzv+O8xwBNufYQn7y
			n0dCAfwLBV3e/AzYqdVTUV6rljshBYr+QFSnugTubaAFuvSzEkj9XxAA4AEk0LcTRDACVRh46Ek4
			ANWPDkJgFEAVUEeC8qluoatb+Ag0ONqpElC/XLvPRGLHB4hBGIBppV0PnS+DcdX+hC97+QBe/jIU
			KjAAClTA8MwrCG0JqJuLVSGt7JcIxfFcUaALaBABfmUUSCEFKQB4JtAE3OMmEHZ7/6AGPf7iLRHw
			If73BMbVUzDwgXOzADJQAXXlArfydCgYfUcQACJIgjiwF3aFdRwnBO6DAKHidceGACjyAuQUVuJn
			UShmfgsWgETYBQmgA0iYABiwhIK3BPSnFvZ3eE2geATAf2LQLx9HCZZQhJPgasugDKvQBxEAfBvI
			Bi5gV2hYV8xVFO8QDWnCYAlQAhDWDm04AgDQAe8UfgHALXy4h344hFwYiFZwAEioAwewhBjQhEnw
			hAIihU2AAASQFAhwAaIliJZ4iUUYCpq4iW+IBJzIiUyAaqk2iqOIiaYYBWEEf1+2ioPHObnmiE6Q
			Iot3irRYi7Z4i7iYi7q4i7zYixW++IvAGIzCOIzEWIzGeIzImIxZEAQAOw==]]></Resource>
    <Resource ID="94ed1ed3-118f-9ce1-8ad2-994ab5a03518" Name="toolbar" Type="gif"><![CDATA[R0lGODlhAQAaAKIAAOvr6/Ly8v///5mZme3t7QAAAAAAAAAAACH5BAAAAAAALAAAAAABABoAAAMJ
			KLHcQSDKCcRIADs=]]></Resource>
    <Resource ID="95be4415-7ccb-b87b-f50f-77c8485f6bd9" Name="_for_vdom.js" Type="js"><![CDATA[]]></Resource>
    <Resource ID="966f39fb-3da2-95f2-c33a-398880aff765" Name="codemirror.min.js" Type="js"><![CDATA[LyogQ29kZU1pcnJvciB2ZXJzaW9uIDIuMjIgKi8KdmFyIENvZGVNaXJyb3I9ZnVuY3Rpb24oKXtm
			dW5jdGlvbiBDb2RlTWlycm9yKHBsYWNlLGdpdmVuT3B0aW9ucyl7dmFyIG9wdGlvbnM9e30sZGVm
			YXVsdHM9Q29kZU1pcnJvci5kZWZhdWx0cztmb3IodmFyIG9wdCBpbiBkZWZhdWx0cylpZihkZWZh
			dWx0cy5oYXNPd25Qcm9wZXJ0eShvcHQpKW9wdGlvbnNbb3B0XT0oZ2l2ZW5PcHRpb25zJiZnaXZl
			bk9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KT9naXZlbk9wdGlvbnM6ZGVmYXVsdHMpW29wdF07
			dmFyIHRhcmdldERvY3VtZW50PW9wdGlvbnNbImRvY3VtZW50Il07dmFyIHdyYXBwZXI9dGFyZ2V0
			RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7d3JhcHBlci5jbGFzc05hbWU9IkNvZGVNaXJy
			b3IiKyhvcHRpb25zLmxpbmVXcmFwcGluZz8iIENvZGVNaXJyb3Itd3JhcCI6IiIpO3dyYXBwZXIu
			aW5uZXJIVE1MPSc8ZGl2IHN0eWxlPSJvdmVyZmxvdzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRp
			dmU7IHdpZHRoOiAzcHg7IGhlaWdodDogMHB4OyI+JysgJzx0ZXh0YXJlYSBzdHlsZT0icG9zaXRp
			b246IGFic29sdXRlOyBwYWRkaW5nOiAwOyB3aWR0aDogMXB4OyBoZWlnaHQ6IDFlbSIgd3JhcD0i
			b2ZmIiAnKydhdXRvY29ycmVjdD0ib2ZmIiBhdXRvY2FwaXRhbGl6ZT0ib2ZmIj48L3RleHRhcmVh
			PjwvZGl2PicrJzxkaXYgY2xhc3M9IkNvZGVNaXJyb3Itc2Nyb2xsIiB0YWJpbmRleD0iLTEiPicr
			JzxkaXYgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2ZSI+JysnPGRpdiBzdHlsZT0icG9zaXRpb246
			IHJlbGF0aXZlIj4nKyc8ZGl2IGNsYXNzPSJDb2RlTWlycm9yLWd1dHRlciI+PGRpdiBjbGFzcz0i
			Q29kZU1pcnJvci1ndXR0ZXItdGV4dCI+PC9kaXY+PC9kaXY+JysnPGRpdiBjbGFzcz0iQ29kZU1p
			cnJvci1saW5lcyI+PGRpdiBzdHlsZT0icG9zaXRpb246IHJlbGF0aXZlOyB6LWluZGV4OiAwIj4n
			Kyc8ZGl2IHN0eWxlPSJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDA7
			IG92ZXJmbG93OiBoaWRkZW47IHZpc2liaWxpdHk6IGhpZGRlbjsiPjwvZGl2PicrICc8cHJlIGNs
			YXNzPSJDb2RlTWlycm9yLWN1cnNvciI+JiMxNjA7PC9wcmU+JysnPGRpdiBzdHlsZT0icG9zaXRp
			b246IHJlbGF0aXZlOyB6LWluZGV4OiAtMSI+PC9kaXY+PGRpdj48L2Rpdj4nKyI8L2Rpdj48L2Rp
			dj48L2Rpdj48L2Rpdj48L2Rpdj4iO2lmKHBsYWNlLmFwcGVuZENoaWxkKXBsYWNlLmFwcGVuZENo
			aWxkKHdyYXBwZXIpO2Vsc2UgcGxhY2Uod3JhcHBlcik7dmFyIGlucHV0RGl2PXdyYXBwZXIuZmly
			c3RDaGlsZCxpbnB1dD1pbnB1dERpdi5maXJzdENoaWxkLHNjcm9sbGVyPXdyYXBwZXIubGFzdENo
			aWxkLGNvZGU9c2Nyb2xsZXIuZmlyc3RDaGlsZCxtb3Zlcj1jb2RlLmZpcnN0Q2hpbGQsZ3V0dGVy
			PW1vdmVyLmZpcnN0Q2hpbGQsZ3V0dGVyVGV4dD1ndXR0ZXIuZmlyc3RDaGlsZCxsaW5lU3BhY2U9
			Z3V0dGVyLm5leHRTaWJsaW5nLmZpcnN0Q2hpbGQsbWVhc3VyZT1saW5lU3BhY2UuZmlyc3RDaGls
			ZCxjdXJzb3I9bWVhc3VyZS5uZXh0U2libGluZyxzZWxlY3Rpb25EaXY9IGN1cnNvci5uZXh0U2li
			bGluZyxsaW5lRGl2PXNlbGVjdGlvbkRpdi5uZXh0U2libGluZzt0aGVtZUNoYW5nZWQoKTtpZihp
			b3MpaW5wdXQuc3R5bGUud2lkdGg9IjBweCI7aWYoIXdlYmtpdClsaW5lU3BhY2UuZHJhZ2dhYmxl
			PXRydWU7bGluZVNwYWNlLnN0eWxlLm91dGxpbmU9Im5vbmUiO2lmKG9wdGlvbnMudGFiaW5kZXgh
			PW51bGwpaW5wdXQudGFiSW5kZXg9b3B0aW9ucy50YWJpbmRleDtpZighb3B0aW9ucy5ndXR0ZXIm
			JiFvcHRpb25zLmxpbmVOdW1iZXJzKWd1dHRlci5zdHlsZS5kaXNwbGF5PSJub25lIjt0cnl7c3Ry
			aW5nV2lkdGgoIngiKX1jYXRjaChlKXtpZihlLm1lc3NhZ2UubWF0Y2goL3J1bnRpbWUvaSkpZT1u
			ZXcgRXJyb3IoIkEgQ29kZU1pcnJvciBpbnNpZGUgYSBQLXN0eWxlIGVsZW1lbnQgZG9lcyBub3Qg
			d29yayBpbiBJbnRlcm5ldCBFeHBsb3Jlci4gKGlubmVySFRNTCBidWcpIik7dGhyb3cgZTt9dmFy
			IHBvbGw9bmV3IERlbGF5ZWQsaGlnaGxpZ2h0PW5ldyBEZWxheWVkLCBibGlua2VyO3ZhciBtb2Rl
			LGRvYz1uZXcgQnJhbmNoQ2h1bmsoW25ldyBMZWFmQ2h1bmsoW25ldyBMaW5lKCIiKV0pXSksd29y
			ayxmb2N1c2VkO2xvYWRNb2RlKCk7dmFyIHNlbD17ZnJvbTp7bGluZTowLGNoOjB9LHRvOntsaW5l
			OjAsY2g6MH0saW52ZXJ0ZWQ6ZmFsc2V9O3ZhciBzaGlmdFNlbGVjdGluZyxsYXN0Q2xpY2ssbGFz
			dERvdWJsZUNsaWNrLGxhc3RTY3JvbGxQb3M9MCxkcmFnZ2luZ1RleHQsb3ZlcndyaXRlPWZhbHNl
			LHN1cHByZXNzRWRpdHM9ZmFsc2U7dmFyIHVwZGF0ZUlucHV0LHVzZXJTZWxDaGFuZ2UsY2hhbmdl
			cyx0ZXh0Q2hhbmdlZCxzZWxlY3Rpb25DaGFuZ2VkLGxlYXZlSW5wdXRBbG9uZSxndXR0ZXJEaXJ0
			eSxjYWxsYmFja3M7dmFyIGRpc3BsYXlPZmZzZXQ9MCxzaG93aW5nRnJvbT0wLHNob3dpbmdUbz0w
			LGxhc3RTaXplQz0wO3ZhciBicmFja2V0SGlnaGxpZ2h0ZWQ7dmFyIG1heExpbmU9IiIsbWF4V2lk
			dGg7b3BlcmF0aW9uKGZ1bmN0aW9uKCl7c2V0VmFsdWUob3B0aW9ucy52YWx1ZXx8ICIiKTt1cGRh
			dGVJbnB1dD1mYWxzZX0pKCk7dmFyIGhpc3Rvcnk9bmV3IEhpc3Rvcnk7Y29ubmVjdChzY3JvbGxl
			ciwibW91c2Vkb3duIixvcGVyYXRpb24ob25Nb3VzZURvd24pKTtjb25uZWN0KHNjcm9sbGVyLCJk
			YmxjbGljayIsb3BlcmF0aW9uKG9uRG91YmxlQ2xpY2spKTtjb25uZWN0KGxpbmVTcGFjZSwiZHJh
			Z3N0YXJ0IixvbkRyYWdTdGFydCk7Y29ubmVjdChsaW5lU3BhY2UsInNlbGVjdHN0YXJ0IixlX3By
			ZXZlbnREZWZhdWx0KTtpZighZ2Vja28pY29ubmVjdChzY3JvbGxlciwiY29udGV4dG1lbnUiLG9u
			Q29udGV4dE1lbnUpO2Nvbm5lY3Qoc2Nyb2xsZXIsInNjcm9sbCIsZnVuY3Rpb24oKXtsYXN0U2Ny
			b2xsUG9zPXNjcm9sbGVyLnNjcm9sbFRvcDt1cGRhdGVEaXNwbGF5KFtdKTtpZihvcHRpb25zLmZp
			eGVkR3V0dGVyKWd1dHRlci5zdHlsZS5sZWZ0PXNjcm9sbGVyLnNjcm9sbExlZnQrInB4IjtpZihv
			cHRpb25zLm9uU2Nyb2xsKW9wdGlvbnMub25TY3JvbGwoaW5zdGFuY2UpfSk7IGNvbm5lY3Qod2lu
			ZG93LCJyZXNpemUiLGZ1bmN0aW9uKCl7dXBkYXRlRGlzcGxheSh0cnVlKX0pO2Nvbm5lY3QoaW5w
			dXQsImtleXVwIixvcGVyYXRpb24ob25LZXlVcCkpO2Nvbm5lY3QoaW5wdXQsImlucHV0IixmYXN0
			UG9sbCk7Y29ubmVjdChpbnB1dCwia2V5ZG93biIsb3BlcmF0aW9uKG9uS2V5RG93bikpO2Nvbm5l
			Y3QoaW5wdXQsImtleXByZXNzIixvcGVyYXRpb24ob25LZXlQcmVzcykpO2Nvbm5lY3QoaW5wdXQs
			ImZvY3VzIixvbkZvY3VzKTtjb25uZWN0KGlucHV0LCJibHVyIixvbkJsdXIpO2Nvbm5lY3Qoc2Ny
			b2xsZXIsImRyYWdlbnRlciIsZV9zdG9wKTtjb25uZWN0KHNjcm9sbGVyLCJkcmFnb3ZlciIsZV9z
			dG9wKTtjb25uZWN0KHNjcm9sbGVyLCJkcm9wIixvcGVyYXRpb24ob25Ecm9wKSk7Y29ubmVjdChz
			Y3JvbGxlciwicGFzdGUiLGZ1bmN0aW9uKCl7Zm9jdXNJbnB1dCgpO2Zhc3RQb2xsKCl9KTtjb25u
			ZWN0KGlucHV0LCJwYXN0ZSIsZmFzdFBvbGwpO2Nvbm5lY3QoaW5wdXQsICJjdXQiLG9wZXJhdGlv
			bihmdW5jdGlvbigpe2lmKCFvcHRpb25zLnJlYWRPbmx5KXJlcGxhY2VTZWxlY3Rpb24oIiIpfSkp
			O3ZhciBoYXNGb2N1czt0cnl7aGFzRm9jdXM9dGFyZ2V0RG9jdW1lbnQuYWN0aXZlRWxlbWVudD09
			aW5wdXR9Y2F0Y2goZSl7fWlmKGhhc0ZvY3VzKXNldFRpbWVvdXQob25Gb2N1cywyMCk7ZWxzZSBv
			bkJsdXIoKTtmdW5jdGlvbiBpc0xpbmUobCl7cmV0dXJuIGw+PTAmJmw8ZG9jLnNpemV9dmFyIGlu
			c3RhbmNlPXdyYXBwZXIuQ29kZU1pcnJvcj17Z2V0VmFsdWU6Z2V0VmFsdWUsc2V0VmFsdWU6b3Bl
			cmF0aW9uKHNldFZhbHVlKSxnZXRTZWxlY3Rpb246Z2V0U2VsZWN0aW9uLHJlcGxhY2VTZWxlY3Rp
			b246b3BlcmF0aW9uKHJlcGxhY2VTZWxlY3Rpb24pLGZvY3VzOmZ1bmN0aW9uKCl7d2luZG93LmZv
			Y3VzKCk7Zm9jdXNJbnB1dCgpO29uRm9jdXMoKTtmYXN0UG9sbCgpfSxzZXRPcHRpb246ZnVuY3Rp
			b24ob3B0aW9uLHZhbHVlKXt2YXIgb2xkVmFsPW9wdGlvbnNbb3B0aW9uXTsgb3B0aW9uc1tvcHRp
			b25dPXZhbHVlO2lmKG9wdGlvbj09Im1vZGUifHxvcHRpb249PSJpbmRlbnRVbml0Iilsb2FkTW9k
			ZSgpO2Vsc2UgaWYob3B0aW9uPT0icmVhZE9ubHkiJiZ2YWx1ZT09Im5vY3Vyc29yIil7b25CbHVy
			KCk7aW5wdXQuYmx1cigpfWVsc2UgaWYob3B0aW9uPT0icmVhZE9ubHkiJiYhdmFsdWUpcmVzZXRJ
			bnB1dCh0cnVlKTtlbHNlIGlmKG9wdGlvbj09InRoZW1lIil0aGVtZUNoYW5nZWQoKTtlbHNlIGlm
			KG9wdGlvbj09ImxpbmVXcmFwcGluZyImJm9sZFZhbCE9dmFsdWUpb3BlcmF0aW9uKHdyYXBwaW5n
			Q2hhbmdlZCkoKTtlbHNlIGlmKG9wdGlvbj09InRhYlNpemUiKXVwZGF0ZURpc3BsYXkodHJ1ZSk7
			aWYob3B0aW9uPT0ibGluZU51bWJlcnMifHxvcHRpb249PSJndXR0ZXIifHxvcHRpb249PSJmaXJz
			dExpbmVOdW1iZXIifHxvcHRpb249PSJ0aGVtZSIpe2d1dHRlckNoYW5nZWQoKTt1cGRhdGVEaXNw
			bGF5KHRydWUpfX0sZ2V0T3B0aW9uOmZ1bmN0aW9uKG9wdGlvbil7cmV0dXJuIG9wdGlvbnNbb3B0
			aW9uXX0sIHVuZG86b3BlcmF0aW9uKHVuZG8pLHJlZG86b3BlcmF0aW9uKHJlZG8pLGluZGVudExp
			bmU6b3BlcmF0aW9uKGZ1bmN0aW9uKG4sZGlyKXtpZih0eXBlb2YgZGlyIT0ic3RyaW5nIilpZihk
			aXI9PW51bGwpZGlyPW9wdGlvbnMuc21hcnRJbmRlbnQ/InNtYXJ0IjoicHJldiI7ZWxzZSBkaXI9
			ZGlyPyJhZGQiOiJzdWJ0cmFjdCI7aWYoaXNMaW5lKG4pKWluZGVudExpbmUobixkaXIpfSksaW5k
			ZW50U2VsZWN0aW9uOm9wZXJhdGlvbihpbmRlbnRTZWxlY3RlZCksaGlzdG9yeVNpemU6ZnVuY3Rp
			b24oKXtyZXR1cm57dW5kbzpoaXN0b3J5LmRvbmUubGVuZ3RoLHJlZG86aGlzdG9yeS51bmRvbmUu
			bGVuZ3RofX0sY2xlYXJIaXN0b3J5OmZ1bmN0aW9uKCl7aGlzdG9yeT1uZXcgSGlzdG9yeX0sbWF0
			Y2hCcmFja2V0czpvcGVyYXRpb24oZnVuY3Rpb24oKXttYXRjaEJyYWNrZXRzKHRydWUpfSksZ2V0
			VG9rZW5BdDpvcGVyYXRpb24oZnVuY3Rpb24ocG9zKXtwb3M9Y2xpcFBvcyhwb3MpO3JldHVybiBn
			ZXRMaW5lKHBvcy5saW5lKS5nZXRUb2tlbkF0KG1vZGUsIGdldFN0YXRlQmVmb3JlKHBvcy5saW5l
			KSxwb3MuY2gpfSksZ2V0U3RhdGVBZnRlcjpmdW5jdGlvbihsaW5lKXtsaW5lPWNsaXBMaW5lKGxp
			bmU9PW51bGw/ZG9jLnNpemUtMTpsaW5lKTtyZXR1cm4gZ2V0U3RhdGVCZWZvcmUobGluZSsxKX0s
			Y3Vyc29yQ29vcmRzOmZ1bmN0aW9uKHN0YXJ0KXtpZihzdGFydD09bnVsbClzdGFydD1zZWwuaW52
			ZXJ0ZWQ7cmV0dXJuIHBhZ2VDb29yZHMoc3RhcnQ/c2VsLmZyb206c2VsLnRvKX0sY2hhckNvb3Jk
			czpmdW5jdGlvbihwb3Mpe3JldHVybiBwYWdlQ29vcmRzKGNsaXBQb3MocG9zKSl9LGNvb3Jkc0No
			YXI6ZnVuY3Rpb24oY29vcmRzKXt2YXIgb2ZmPWVsdE9mZnNldChsaW5lU3BhY2UpO3JldHVybiBj
			b29yZHNDaGFyKGNvb3Jkcy54LW9mZi5sZWZ0LGNvb3Jkcy55LW9mZi50b3ApfSxtYXJrVGV4dDpv
			cGVyYXRpb24obWFya1RleHQpLHNldEJvb2ttYXJrOnNldEJvb2ttYXJrLHNldE1hcmtlcjpvcGVy
			YXRpb24oYWRkR3V0dGVyTWFya2VyKSwgY2xlYXJNYXJrZXI6b3BlcmF0aW9uKHJlbW92ZUd1dHRl
			ck1hcmtlciksc2V0TGluZUNsYXNzOm9wZXJhdGlvbihzZXRMaW5lQ2xhc3MpLGhpZGVMaW5lOm9w
			ZXJhdGlvbihmdW5jdGlvbihoKXtyZXR1cm4gc2V0TGluZUhpZGRlbihoLHRydWUpfSksc2hvd0xp
			bmU6b3BlcmF0aW9uKGZ1bmN0aW9uKGgpe3JldHVybiBzZXRMaW5lSGlkZGVuKGgsZmFsc2UpfSks
			b25EZWxldGVMaW5lOmZ1bmN0aW9uKGxpbmUsZil7aWYodHlwZW9mIGxpbmU9PSJudW1iZXIiKXtp
			ZighaXNMaW5lKGxpbmUpKXJldHVybiBudWxsO2xpbmU9Z2V0TGluZShsaW5lKX0obGluZS5oYW5k
			bGVyc3x8KGxpbmUuaGFuZGxlcnM9W10pKS5wdXNoKGYpO3JldHVybiBsaW5lfSxsaW5lSW5mbzps
			aW5lSW5mbyxhZGRXaWRnZXQ6ZnVuY3Rpb24ocG9zLG5vZGUsc2Nyb2xsLHZlcnQsaG9yaXope3Bv
			cz1sb2NhbENvb3JkcyhjbGlwUG9zKHBvcykpO3ZhciB0b3A9cG9zLnlCb3QsbGVmdD1wb3MueDtu
			b2RlLnN0eWxlLnBvc2l0aW9uPSAiYWJzb2x1dGUiO2NvZGUuYXBwZW5kQ2hpbGQobm9kZSk7aWYo
			dmVydD09Im92ZXIiKXRvcD1wb3MueTtlbHNlIGlmKHZlcnQ9PSJuZWFyIil7dmFyIHZzcGFjZT1N
			YXRoLm1heChzY3JvbGxlci5vZmZzZXRIZWlnaHQsZG9jLmhlaWdodCp0ZXh0SGVpZ2h0KCkpLGhz
			cGFjZT1NYXRoLm1heChjb2RlLmNsaWVudFdpZHRoLGxpbmVTcGFjZS5jbGllbnRXaWR0aCktcGFk
			ZGluZ0xlZnQoKTtpZihwb3MueUJvdCtub2RlLm9mZnNldEhlaWdodD52c3BhY2UmJnBvcy55Pm5v
			ZGUub2Zmc2V0SGVpZ2h0KXRvcD1wb3MueS1ub2RlLm9mZnNldEhlaWdodDtpZihsZWZ0K25vZGUu
			b2Zmc2V0V2lkdGg+aHNwYWNlKWxlZnQ9aHNwYWNlLW5vZGUub2Zmc2V0V2lkdGh9bm9kZS5zdHls
			ZS50b3A9dG9wK3BhZGRpbmdUb3AoKSsicHgiO25vZGUuc3R5bGUubGVmdD1ub2RlLnN0eWxlLnJp
			Z2h0PSIiO2lmKGhvcml6PT0icmlnaHQiKXtsZWZ0PWNvZGUuY2xpZW50V2lkdGgtbm9kZS5vZmZz
			ZXRXaWR0aDsgbm9kZS5zdHlsZS5yaWdodD0iMHB4In1lbHNle2lmKGhvcml6PT0ibGVmdCIpbGVm
			dD0wO2Vsc2UgaWYoaG9yaXo9PSJtaWRkbGUiKWxlZnQ9KGNvZGUuY2xpZW50V2lkdGgtbm9kZS5v
			ZmZzZXRXaWR0aCkvMjtub2RlLnN0eWxlLmxlZnQ9bGVmdCtwYWRkaW5nTGVmdCgpKyJweCJ9aWYo
			c2Nyb2xsKXNjcm9sbEludG9WaWV3KGxlZnQsdG9wLGxlZnQrbm9kZS5vZmZzZXRXaWR0aCx0b3Ar
			bm9kZS5vZmZzZXRIZWlnaHQpfSxsaW5lQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jLnNpemV9
			LGNsaXBQb3M6Y2xpcFBvcyxnZXRDdXJzb3I6ZnVuY3Rpb24oc3RhcnQpe2lmKHN0YXJ0PT1udWxs
			KXN0YXJ0PXNlbC5pbnZlcnRlZDtyZXR1cm4gY29weVBvcyhzdGFydD9zZWwuZnJvbTpzZWwudG8p
			fSxzb21ldGhpbmdTZWxlY3RlZDpmdW5jdGlvbigpe3JldHVybiFwb3NFcShzZWwuZnJvbSxzZWwu
			dG8pfSxzZXRDdXJzb3I6b3BlcmF0aW9uKGZ1bmN0aW9uKGxpbmUsY2gsdXNlcil7aWYoY2g9PSBu
			dWxsJiZ0eXBlb2YgbGluZS5saW5lPT0ibnVtYmVyIilzZXRDdXJzb3IobGluZS5saW5lLGxpbmUu
			Y2gsdXNlcik7ZWxzZSBzZXRDdXJzb3IobGluZSxjaCx1c2VyKX0pLHNldFNlbGVjdGlvbjpvcGVy
			YXRpb24oZnVuY3Rpb24oZnJvbSx0byx1c2VyKXsodXNlcj9zZXRTZWxlY3Rpb25Vc2VyOnNldFNl
			bGVjdGlvbikoY2xpcFBvcyhmcm9tKSxjbGlwUG9zKHRvfHxmcm9tKSl9KSxnZXRMaW5lOmZ1bmN0
			aW9uKGxpbmUpe2lmKGlzTGluZShsaW5lKSlyZXR1cm4gZ2V0TGluZShsaW5lKS50ZXh0fSxnZXRM
			aW5lSGFuZGxlOmZ1bmN0aW9uKGxpbmUpe2lmKGlzTGluZShsaW5lKSlyZXR1cm4gZ2V0TGluZShs
			aW5lKX0sc2V0TGluZTpvcGVyYXRpb24oZnVuY3Rpb24obGluZSx0ZXh0KXtpZihpc0xpbmUobGlu
			ZSkpcmVwbGFjZVJhbmdlKHRleHQse2xpbmU6bGluZSxjaDowfSx7bGluZTpsaW5lLGNoOmdldExp
			bmUobGluZSkudGV4dC5sZW5ndGh9KX0pLHJlbW92ZUxpbmU6b3BlcmF0aW9uKGZ1bmN0aW9uKGxp
			bmUpe2lmKGlzTGluZShsaW5lKSlyZXBsYWNlUmFuZ2UoIiIsIHtsaW5lOmxpbmUsY2g6MH0sY2xp
			cFBvcyh7bGluZTpsaW5lKzEsY2g6MH0pKX0pLHJlcGxhY2VSYW5nZTpvcGVyYXRpb24ocmVwbGFj
			ZVJhbmdlKSxnZXRSYW5nZTpmdW5jdGlvbihmcm9tLHRvKXtyZXR1cm4gZ2V0UmFuZ2UoY2xpcFBv
			cyhmcm9tKSxjbGlwUG9zKHRvKSl9LGV4ZWNDb21tYW5kOmZ1bmN0aW9uKGNtZCl7cmV0dXJuIGNv
			bW1hbmRzW2NtZF0oaW5zdGFuY2UpfSxtb3ZlSDpvcGVyYXRpb24obW92ZUgpLGRlbGV0ZUg6b3Bl
			cmF0aW9uKGRlbGV0ZUgpLG1vdmVWOm9wZXJhdGlvbihtb3ZlViksdG9nZ2xlT3ZlcndyaXRlOmZ1
			bmN0aW9uKCl7aWYob3ZlcndyaXRlKXtvdmVyd3JpdGU9ZmFsc2U7Y3Vyc29yLmNsYXNzTmFtZT1j
			dXJzb3IuY2xhc3NOYW1lLnJlcGxhY2UoIiBDb2RlTWlycm9yLW92ZXJ3cml0ZSIsIiIpfWVsc2V7
			b3ZlcndyaXRlPXRydWU7Y3Vyc29yLmNsYXNzTmFtZSs9IiBDb2RlTWlycm9yLW92ZXJ3cml0ZSJ9
			fSxwb3NGcm9tSW5kZXg6ZnVuY3Rpb24ob2ZmKXt2YXIgbGluZU5vPSAwLGNoO2RvYy5pdGVyKDAs
			ZG9jLnNpemUsZnVuY3Rpb24obGluZSl7dmFyIHN6PWxpbmUudGV4dC5sZW5ndGgrMTtpZihzej5v
			ZmYpe2NoPW9mZjtyZXR1cm4gdHJ1ZX1vZmYtPXN6OysrbGluZU5vfSk7cmV0dXJuIGNsaXBQb3Mo
			e2xpbmU6bGluZU5vLGNoOmNofSl9LGluZGV4RnJvbVBvczpmdW5jdGlvbihjb29yZHMpe2lmKGNv
			b3Jkcy5saW5lPDB8fGNvb3Jkcy5jaDwwKXJldHVybiAwO3ZhciBpbmRleD1jb29yZHMuY2g7ZG9j
			Lml0ZXIoMCxjb29yZHMubGluZSxmdW5jdGlvbihsaW5lKXtpbmRleCs9bGluZS50ZXh0Lmxlbmd0
			aCsxfSk7cmV0dXJuIGluZGV4fSxzY3JvbGxUbzpmdW5jdGlvbih4LHkpe2lmKHghPW51bGwpc2Ny
			b2xsZXIuc2Nyb2xsTGVmdD14O2lmKHkhPW51bGwpc2Nyb2xsZXIuc2Nyb2xsVG9wPXk7dXBkYXRl
			RGlzcGxheShbXSl9LG9wZXJhdGlvbjpmdW5jdGlvbihmKXtyZXR1cm4gb3BlcmF0aW9uKGYpKCl9
			LHJlZnJlc2g6ZnVuY3Rpb24oKXt1cGRhdGVEaXNwbGF5KHRydWUpOyBpZihzY3JvbGxlci5zY3Jv
			bGxIZWlnaHQ+bGFzdFNjcm9sbFBvcylzY3JvbGxlci5zY3JvbGxUb3A9bGFzdFNjcm9sbFBvc30s
			Z2V0SW5wdXRGaWVsZDpmdW5jdGlvbigpe3JldHVybiBpbnB1dH0sZ2V0V3JhcHBlckVsZW1lbnQ6
			ZnVuY3Rpb24oKXtyZXR1cm4gd3JhcHBlcn0sZ2V0U2Nyb2xsZXJFbGVtZW50OmZ1bmN0aW9uKCl7
			cmV0dXJuIHNjcm9sbGVyfSxnZXRHdXR0ZXJFbGVtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIGd1dHRl
			cn19O2Z1bmN0aW9uIGdldExpbmUobil7cmV0dXJuIGdldExpbmVBdChkb2Msbil9ZnVuY3Rpb24g
			dXBkYXRlTGluZUhlaWdodChsaW5lLGhlaWdodCl7Z3V0dGVyRGlydHk9dHJ1ZTt2YXIgZGlmZj1o
			ZWlnaHQtbGluZS5oZWlnaHQ7Zm9yKHZhciBuPWxpbmU7bjtuPW4ucGFyZW50KW4uaGVpZ2h0Kz1k
			aWZmfWZ1bmN0aW9uIHNldFZhbHVlKGNvZGUpe3ZhciB0b3A9e2xpbmU6MCxjaDowfTt1cGRhdGVM
			aW5lcyh0b3Ase2xpbmU6ZG9jLnNpemUtMSxjaDpnZXRMaW5lKGRvYy5zaXplLSAxKS50ZXh0Lmxl
			bmd0aH0sc3BsaXRMaW5lcyhjb2RlKSx0b3AsdG9wKTt1cGRhdGVJbnB1dD10cnVlfWZ1bmN0aW9u
			IGdldFZhbHVlKGNvZGUpe3ZhciB0ZXh0PVtdO2RvYy5pdGVyKDAsZG9jLnNpemUsZnVuY3Rpb24o
			bGluZSl7dGV4dC5wdXNoKGxpbmUudGV4dCl9KTtyZXR1cm4gdGV4dC5qb2luKCJcbiIpfWZ1bmN0
			aW9uIG9uTW91c2VEb3duKGUpe3NldFNoaWZ0KGVfcHJvcChlLCJzaGlmdEtleSIpKTtmb3IodmFy
			IG49ZV90YXJnZXQoZSk7biE9d3JhcHBlcjtuPW4ucGFyZW50Tm9kZSlpZihuLnBhcmVudE5vZGU9
			PWNvZGUmJm4hPW1vdmVyKXJldHVybjtmb3IodmFyIG49ZV90YXJnZXQoZSk7biE9d3JhcHBlcjtu
			PW4ucGFyZW50Tm9kZSlpZihuLnBhcmVudE5vZGU9PWd1dHRlclRleHQpe2lmKG9wdGlvbnMub25H
			dXR0ZXJDbGljaylvcHRpb25zLm9uR3V0dGVyQ2xpY2soaW5zdGFuY2UsaW5kZXhPZihndXR0ZXJU
			ZXh0LmNoaWxkTm9kZXMsbikrc2hvd2luZ0Zyb20sZSk7cmV0dXJuIGVfcHJldmVudERlZmF1bHQo
			ZSl9dmFyIHN0YXJ0PSBwb3NGcm9tTW91c2UoZSk7c3dpdGNoKGVfYnV0dG9uKGUpKXtjYXNlIDM6
			aWYoZ2Vja28mJiFtYWMpb25Db250ZXh0TWVudShlKTtyZXR1cm47Y2FzZSAyOmlmKHN0YXJ0KXNl
			dEN1cnNvcihzdGFydC5saW5lLHN0YXJ0LmNoLHRydWUpO3JldHVybn1pZighc3RhcnQpe2lmKGVf
			dGFyZ2V0KGUpPT1zY3JvbGxlcillX3ByZXZlbnREZWZhdWx0KGUpO3JldHVybn1pZighZm9jdXNl
			ZClvbkZvY3VzKCk7dmFyIG5vdz0rbmV3IERhdGU7aWYobGFzdERvdWJsZUNsaWNrJiZsYXN0RG91
			YmxlQ2xpY2sudGltZT5ub3ctNDAwJiZwb3NFcShsYXN0RG91YmxlQ2xpY2sucG9zLHN0YXJ0KSl7
			ZV9wcmV2ZW50RGVmYXVsdChlKTtzZXRUaW1lb3V0KGZvY3VzSW5wdXQsMjApO3JldHVybiBzZWxl
			Y3RMaW5lKHN0YXJ0LmxpbmUpfWVsc2UgaWYobGFzdENsaWNrJiZsYXN0Q2xpY2sudGltZT5ub3ct
			NDAwJiZwb3NFcShsYXN0Q2xpY2sucG9zLHN0YXJ0KSl7bGFzdERvdWJsZUNsaWNrPXt0aW1lOm5v
			dywgcG9zOnN0YXJ0fTtlX3ByZXZlbnREZWZhdWx0KGUpO3JldHVybiBzZWxlY3RXb3JkQXQoc3Rh
			cnQpfWVsc2UgbGFzdENsaWNrPXt0aW1lOm5vdyxwb3M6c3RhcnR9O3ZhciBsYXN0PXN0YXJ0LGdv
			aW5nO2lmKGRyYWdBbmREcm9wJiYhb3B0aW9ucy5yZWFkT25seSYmIXBvc0VxKHNlbC5mcm9tLHNl
			bC50bykmJiFwb3NMZXNzKHN0YXJ0LHNlbC5mcm9tKSYmIXBvc0xlc3Moc2VsLnRvLHN0YXJ0KSl7
			aWYod2Via2l0KWxpbmVTcGFjZS5kcmFnZ2FibGU9dHJ1ZTt2YXIgdXA9Y29ubmVjdCh0YXJnZXRE
			b2N1bWVudCwibW91c2V1cCIsb3BlcmF0aW9uKGZ1bmN0aW9uKGUyKXtpZih3ZWJraXQpbGluZVNw
			YWNlLmRyYWdnYWJsZT1mYWxzZTtkcmFnZ2luZ1RleHQ9ZmFsc2U7dXAoKTtpZihNYXRoLmFicyhl
			LmNsaWVudFgtZTIuY2xpZW50WCkrTWF0aC5hYnMoZS5jbGllbnRZLWUyLmNsaWVudFkpPDEwKXtl
			X3ByZXZlbnREZWZhdWx0KGUyKTtzZXRDdXJzb3Ioc3RhcnQubGluZSxzdGFydC5jaCwgdHJ1ZSk7
			Zm9jdXNJbnB1dCgpfX0pLHRydWUpO2RyYWdnaW5nVGV4dD10cnVlO3JldHVybn1lX3ByZXZlbnRE
			ZWZhdWx0KGUpO3NldEN1cnNvcihzdGFydC5saW5lLHN0YXJ0LmNoLHRydWUpO2Z1bmN0aW9uIGV4
			dGVuZChlKXt2YXIgY3VyPXBvc0Zyb21Nb3VzZShlLHRydWUpO2lmKGN1ciYmIXBvc0VxKGN1cixs
			YXN0KSl7aWYoIWZvY3VzZWQpb25Gb2N1cygpO2xhc3Q9Y3VyO3NldFNlbGVjdGlvblVzZXIoc3Rh
			cnQsY3VyKTt1cGRhdGVJbnB1dD1mYWxzZTt2YXIgdmlzaWJsZT12aXNpYmxlTGluZXMoKTtpZihj
			dXIubGluZT49dmlzaWJsZS50b3x8Y3VyLmxpbmU8dmlzaWJsZS5mcm9tKWdvaW5nPXNldFRpbWVv
			dXQob3BlcmF0aW9uKGZ1bmN0aW9uKCl7ZXh0ZW5kKGUpfSksMTUwKX19dmFyIG1vdmU9Y29ubmVj
			dCh0YXJnZXREb2N1bWVudCwibW91c2Vtb3ZlIixvcGVyYXRpb24oZnVuY3Rpb24oZSl7Y2xlYXJU
			aW1lb3V0KGdvaW5nKTtlX3ByZXZlbnREZWZhdWx0KGUpO2V4dGVuZChlKX0pLCB0cnVlKTt2YXIg
			dXA9Y29ubmVjdCh0YXJnZXREb2N1bWVudCwibW91c2V1cCIsb3BlcmF0aW9uKGZ1bmN0aW9uKGUp
			e2NsZWFyVGltZW91dChnb2luZyk7dmFyIGN1cj1wb3NGcm9tTW91c2UoZSk7aWYoY3VyKXNldFNl
			bGVjdGlvblVzZXIoc3RhcnQsY3VyKTtlX3ByZXZlbnREZWZhdWx0KGUpO2ZvY3VzSW5wdXQoKTt1
			cGRhdGVJbnB1dD10cnVlO21vdmUoKTt1cCgpfSksdHJ1ZSl9ZnVuY3Rpb24gb25Eb3VibGVDbGlj
			ayhlKXtmb3IodmFyIG49ZV90YXJnZXQoZSk7biE9d3JhcHBlcjtuPW4ucGFyZW50Tm9kZSlpZihu
			LnBhcmVudE5vZGU9PWd1dHRlclRleHQpcmV0dXJuIGVfcHJldmVudERlZmF1bHQoZSk7dmFyIHN0
			YXJ0PXBvc0Zyb21Nb3VzZShlKTtpZighc3RhcnQpcmV0dXJuO2xhc3REb3VibGVDbGljaz17dGlt
			ZTorbmV3IERhdGUscG9zOnN0YXJ0fTtlX3ByZXZlbnREZWZhdWx0KGUpO3NlbGVjdFdvcmRBdChz
			dGFydCl9ZnVuY3Rpb24gb25Ecm9wKGUpe2UucHJldmVudERlZmF1bHQoKTsgdmFyIHBvcz1wb3NG
			cm9tTW91c2UoZSx0cnVlKSxmaWxlcz1lLmRhdGFUcmFuc2Zlci5maWxlcztpZighcG9zfHxvcHRp
			b25zLnJlYWRPbmx5KXJldHVybjtpZihmaWxlcyYmZmlsZXMubGVuZ3RoJiZ3aW5kb3cuRmlsZVJl
			YWRlciYmd2luZG93LkZpbGUpe2Z1bmN0aW9uIGxvYWRGaWxlKGZpbGUsaSl7dmFyIHJlYWRlcj1u
			ZXcgRmlsZVJlYWRlcjtyZWFkZXIub25sb2FkPWZ1bmN0aW9uKCl7dGV4dFtpXT1yZWFkZXIucmVz
			dWx0O2lmKCsrcmVhZD09bil7cG9zPWNsaXBQb3MocG9zKTtvcGVyYXRpb24oZnVuY3Rpb24oKXt2
			YXIgZW5kPXJlcGxhY2VSYW5nZSh0ZXh0LmpvaW4oIiIpLHBvcyxwb3MpO3NldFNlbGVjdGlvblVz
			ZXIocG9zLGVuZCl9KSgpfX07cmVhZGVyLnJlYWRBc1RleHQoZmlsZSl9dmFyIG49ZmlsZXMubGVu
			Z3RoLHRleHQ9QXJyYXkobikscmVhZD0wO2Zvcih2YXIgaT0wO2k8bjsrK2kpbG9hZEZpbGUoZmls
			ZXNbaV0saSl9ZWxzZSB0cnl7dmFyIHRleHQ9ZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgiVGV4dCIp
			OyBpZih0ZXh0KXt2YXIgY3VyRnJvbT1zZWwuZnJvbSxjdXJUbz1zZWwudG87c2V0U2VsZWN0aW9u
			VXNlcihwb3MscG9zKTtpZihkcmFnZ2luZ1RleHQpcmVwbGFjZVJhbmdlKCIiLGN1ckZyb20sY3Vy
			VG8pO3JlcGxhY2VTZWxlY3Rpb24odGV4dCk7Zm9jdXNJbnB1dCgpfX1jYXRjaChlKXt9fWZ1bmN0
			aW9uIG9uRHJhZ1N0YXJ0KGUpe3ZhciB0eHQ9Z2V0U2VsZWN0aW9uKCk7ZS5kYXRhVHJhbnNmZXIu
			c2V0RGF0YSgiVGV4dCIsdHh0KX1mdW5jdGlvbiBkb0hhbmRsZUJpbmRpbmcoYm91bmQsZHJvcFNo
			aWZ0KXtpZih0eXBlb2YgYm91bmQ9PSJzdHJpbmciKXtib3VuZD1jb21tYW5kc1tib3VuZF07aWYo
			IWJvdW5kKXJldHVybiBmYWxzZX12YXIgcHJldlNoaWZ0PXNoaWZ0U2VsZWN0aW5nO3RyeXtpZihv
			cHRpb25zLnJlYWRPbmx5KXN1cHByZXNzRWRpdHM9dHJ1ZTtpZihkcm9wU2hpZnQpc2hpZnRTZWxl
			Y3Rpbmc9bnVsbDtib3VuZChpbnN0YW5jZSl9Y2F0Y2goZSl7aWYoZSE9UGFzcyl0aHJvdyBlOyBy
			ZXR1cm4gZmFsc2V9ZmluYWxseXtzaGlmdFNlbGVjdGluZz1wcmV2U2hpZnQ7c3VwcHJlc3NFZGl0
			cz1mYWxzZX1yZXR1cm4gdHJ1ZX1mdW5jdGlvbiBoYW5kbGVLZXlCaW5kaW5nKGUpe3ZhciBzdGFy
			dE1hcD1nZXRLZXlNYXAob3B0aW9ucy5rZXlNYXApLG5leHQ9c3RhcnRNYXAuYXV0bztjbGVhclRp
			bWVvdXQobWF5YmVUcmFuc2l0aW9uKTtpZihuZXh0JiYhaXNNb2RpZmllcktleShlKSltYXliZVRy
			YW5zaXRpb249c2V0VGltZW91dChmdW5jdGlvbigpe2lmKGdldEtleU1hcChvcHRpb25zLmtleU1h
			cCk9PXN0YXJ0TWFwKW9wdGlvbnMua2V5TWFwPW5leHQuY2FsbD9uZXh0LmNhbGwobnVsbCxpbnN0
			YW5jZSk6bmV4dH0sNTApO3ZhciBuYW1lPWtleU5hbWVzW2VfcHJvcChlLCJrZXlDb2RlIildLGhh
			bmRsZWQ9ZmFsc2U7aWYobmFtZT09bnVsbHx8ZS5hbHRHcmFwaEtleSlyZXR1cm4gZmFsc2U7aWYo
			ZV9wcm9wKGUsImFsdEtleSIpKW5hbWU9IkFsdC0iK25hbWU7aWYoZV9wcm9wKGUsICJjdHJsS2V5
			IikpbmFtZT0iQ3RybC0iK25hbWU7aWYoZV9wcm9wKGUsIm1ldGFLZXkiKSluYW1lPSJDbWQtIitu
			YW1lO2lmKGVfcHJvcChlLCJzaGlmdEtleSIpKWhhbmRsZWQ9bG9va3VwS2V5KCJTaGlmdC0iK25h
			bWUsb3B0aW9ucy5leHRyYUtleXMsb3B0aW9ucy5rZXlNYXAsZnVuY3Rpb24oYil7cmV0dXJuIGRv
			SGFuZGxlQmluZGluZyhiLHRydWUpfSk7aWYoIWhhbmRsZWQpaGFuZGxlZD1sb29rdXBLZXkobmFt
			ZSxvcHRpb25zLmV4dHJhS2V5cyxvcHRpb25zLmtleU1hcCxkb0hhbmRsZUJpbmRpbmcpO2lmKGhh
			bmRsZWQpZV9wcmV2ZW50RGVmYXVsdChlKTtyZXR1cm4gaGFuZGxlZH1mdW5jdGlvbiBoYW5kbGVD
			aGFyQmluZGluZyhlLGNoKXt2YXIgaGFuZGxlZD1sb29rdXBLZXkoIiciK2NoKyInIixvcHRpb25z
			LmV4dHJhS2V5cyxvcHRpb25zLmtleU1hcCxkb0hhbmRsZUJpbmRpbmcpO2lmKGhhbmRsZWQpZV9w
			cmV2ZW50RGVmYXVsdChlKTtyZXR1cm4gaGFuZGxlZH12YXIgbGFzdFN0b3BwZWRLZXk9IG51bGws
			bWF5YmVUcmFuc2l0aW9uO2Z1bmN0aW9uIG9uS2V5RG93bihlKXtpZighZm9jdXNlZClvbkZvY3Vz
			KCk7aWYoaWUmJmUua2V5Q29kZT09MjcpZS5yZXR1cm5WYWx1ZT1mYWxzZTtpZihwb2xsaW5nRmFz
			dClpZihyZWFkSW5wdXQoKSlwb2xsaW5nRmFzdD1mYWxzZTtpZihvcHRpb25zLm9uS2V5RXZlbnQm
			Jm9wdGlvbnMub25LZXlFdmVudChpbnN0YW5jZSxhZGRTdG9wKGUpKSlyZXR1cm47dmFyIGNvZGU9
			ZV9wcm9wKGUsImtleUNvZGUiKTtzZXRTaGlmdChjb2RlPT0xNnx8ZV9wcm9wKGUsInNoaWZ0S2V5
			IikpO3ZhciBoYW5kbGVkPWhhbmRsZUtleUJpbmRpbmcoZSk7aWYod2luZG93Lm9wZXJhKXtsYXN0
			U3RvcHBlZEtleT1oYW5kbGVkP2NvZGU6bnVsbDtpZighaGFuZGxlZCYmY29kZT09ODgmJmVfcHJv
			cChlLG1hYz8ibWV0YUtleSI6ImN0cmxLZXkiKSlyZXBsYWNlU2VsZWN0aW9uKCIiKX19ZnVuY3Rp
			b24gb25LZXlQcmVzcyhlKXtpZihwb2xsaW5nRmFzdClyZWFkSW5wdXQoKTsgaWYob3B0aW9ucy5v
			bktleUV2ZW50JiZvcHRpb25zLm9uS2V5RXZlbnQoaW5zdGFuY2UsYWRkU3RvcChlKSkpcmV0dXJu
			O3ZhciBrZXlDb2RlPWVfcHJvcChlLCJrZXlDb2RlIiksY2hhckNvZGU9ZV9wcm9wKGUsImNoYXJD
			b2RlIik7aWYod2luZG93Lm9wZXJhJiZrZXlDb2RlPT1sYXN0U3RvcHBlZEtleSl7bGFzdFN0b3Bw
			ZWRLZXk9bnVsbDtlX3ByZXZlbnREZWZhdWx0KGUpO3JldHVybn1pZih3aW5kb3cub3BlcmEmJiFl
			LndoaWNoJiZoYW5kbGVLZXlCaW5kaW5nKGUpKXJldHVybjt2YXIgY2g9U3RyaW5nLmZyb21DaGFy
			Q29kZShjaGFyQ29kZT09bnVsbD9rZXlDb2RlOmNoYXJDb2RlKTtpZihvcHRpb25zLmVsZWN0cmlj
			Q2hhcnMmJm1vZGUuZWxlY3RyaWNDaGFycyYmb3B0aW9ucy5zbWFydEluZGVudCYmIW9wdGlvbnMu
			cmVhZE9ubHkpaWYobW9kZS5lbGVjdHJpY0NoYXJzLmluZGV4T2YoY2gpPi0xKXNldFRpbWVvdXQo
			b3BlcmF0aW9uKGZ1bmN0aW9uKCl7aW5kZW50TGluZShzZWwudG8ubGluZSwgInNtYXJ0Iil9KSw3
			NSk7aWYoaGFuZGxlQ2hhckJpbmRpbmcoZSxjaCkpcmV0dXJuO2Zhc3RQb2xsKCl9ZnVuY3Rpb24g
			b25LZXlVcChlKXtpZihvcHRpb25zLm9uS2V5RXZlbnQmJm9wdGlvbnMub25LZXlFdmVudChpbnN0
			YW5jZSxhZGRTdG9wKGUpKSlyZXR1cm47aWYoZV9wcm9wKGUsImtleUNvZGUiKT09MTYpc2hpZnRT
			ZWxlY3Rpbmc9bnVsbH1mdW5jdGlvbiBvbkZvY3VzKCl7aWYob3B0aW9ucy5yZWFkT25seT09Im5v
			Y3Vyc29yIilyZXR1cm47aWYoIWZvY3VzZWQpe2lmKG9wdGlvbnMub25Gb2N1cylvcHRpb25zLm9u
			Rm9jdXMoaW5zdGFuY2UpO2ZvY3VzZWQ9dHJ1ZTtpZih3cmFwcGVyLmNsYXNzTmFtZS5zZWFyY2go
			L1xiQ29kZU1pcnJvci1mb2N1c2VkXGIvKT09LTEpd3JhcHBlci5jbGFzc05hbWUrPSIgQ29kZU1p
			cnJvci1mb2N1c2VkIjtpZighbGVhdmVJbnB1dEFsb25lKXJlc2V0SW5wdXQodHJ1ZSl9c2xvd1Bv
			bGwoKTtyZXN0YXJ0QmxpbmsoKX1mdW5jdGlvbiBvbkJsdXIoKXtpZihmb2N1c2VkKXtpZihvcHRp
			b25zLm9uQmx1cilvcHRpb25zLm9uQmx1cihpbnN0YW5jZSk7IGZvY3VzZWQ9ZmFsc2U7aWYoYnJh
			Y2tldEhpZ2hsaWdodGVkKW9wZXJhdGlvbihmdW5jdGlvbigpe2lmKGJyYWNrZXRIaWdobGlnaHRl
			ZCl7YnJhY2tldEhpZ2hsaWdodGVkKCk7YnJhY2tldEhpZ2hsaWdodGVkPW51bGx9fSkoKTt3cmFw
			cGVyLmNsYXNzTmFtZT13cmFwcGVyLmNsYXNzTmFtZS5yZXBsYWNlKCIgQ29kZU1pcnJvci1mb2N1
			c2VkIiwiIil9Y2xlYXJJbnRlcnZhbChibGlua2VyKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aWYo
			IWZvY3VzZWQpc2hpZnRTZWxlY3Rpbmc9bnVsbH0sMTUwKX1mdW5jdGlvbiB1cGRhdGVMaW5lcyhm
			cm9tLHRvLG5ld1RleHQsc2VsRnJvbSxzZWxUbyl7aWYoc3VwcHJlc3NFZGl0cylyZXR1cm47aWYo
			aGlzdG9yeSl7dmFyIG9sZD1bXTtkb2MuaXRlcihmcm9tLmxpbmUsdG8ubGluZSsxLGZ1bmN0aW9u
			KGxpbmUpe29sZC5wdXNoKGxpbmUudGV4dCl9KTtoaXN0b3J5LmFkZENoYW5nZShmcm9tLmxpbmUs
			bmV3VGV4dC5sZW5ndGgsb2xkKTt3aGlsZShoaXN0b3J5LmRvbmUubGVuZ3RoPiBvcHRpb25zLnVu
			ZG9EZXB0aCloaXN0b3J5LmRvbmUuc2hpZnQoKX11cGRhdGVMaW5lc05vVW5kbyhmcm9tLHRvLG5l
			d1RleHQsc2VsRnJvbSxzZWxUbyl9ZnVuY3Rpb24gdW5yZWRvSGVscGVyKGZyb20sdG8pe2lmKCFm
			cm9tLmxlbmd0aClyZXR1cm47dmFyIHNldD1mcm9tLnBvcCgpLG91dD1bXTtmb3IodmFyIGk9c2V0
			Lmxlbmd0aC0xO2k+PTA7aS09MSl7dmFyIGNoYW5nZT1zZXRbaV07dmFyIHJlcGxhY2VkPVtdLGVu
			ZD1jaGFuZ2Uuc3RhcnQrY2hhbmdlLmFkZGVkO2RvYy5pdGVyKGNoYW5nZS5zdGFydCxlbmQsZnVu
			Y3Rpb24obGluZSl7cmVwbGFjZWQucHVzaChsaW5lLnRleHQpfSk7b3V0LnB1c2goe3N0YXJ0OmNo
			YW5nZS5zdGFydCxhZGRlZDpjaGFuZ2Uub2xkLmxlbmd0aCxvbGQ6cmVwbGFjZWR9KTt2YXIgcG9z
			PWNsaXBQb3Moe2xpbmU6Y2hhbmdlLnN0YXJ0K2NoYW5nZS5vbGQubGVuZ3RoLTEsY2g6ZWRpdEVu
			ZChyZXBsYWNlZFtyZXBsYWNlZC5sZW5ndGgtMV0sY2hhbmdlLm9sZFtjaGFuZ2Uub2xkLmxlbmd0
			aC0gMV0pfSk7dXBkYXRlTGluZXNOb1VuZG8oe2xpbmU6Y2hhbmdlLnN0YXJ0LGNoOjB9LHtsaW5l
			OmVuZC0xLGNoOmdldExpbmUoZW5kLTEpLnRleHQubGVuZ3RofSxjaGFuZ2Uub2xkLHBvcyxwb3Mp
			fXVwZGF0ZUlucHV0PXRydWU7dG8ucHVzaChvdXQpfWZ1bmN0aW9uIHVuZG8oKXt1bnJlZG9IZWxw
			ZXIoaGlzdG9yeS5kb25lLGhpc3RvcnkudW5kb25lKX1mdW5jdGlvbiByZWRvKCl7dW5yZWRvSGVs
			cGVyKGhpc3RvcnkudW5kb25lLGhpc3RvcnkuZG9uZSl9ZnVuY3Rpb24gdXBkYXRlTGluZXNOb1Vu
			ZG8oZnJvbSx0byxuZXdUZXh0LHNlbEZyb20sc2VsVG8pe2lmKHN1cHByZXNzRWRpdHMpcmV0dXJu
			O3ZhciByZWNvbXB1dGVNYXhMZW5ndGg9ZmFsc2UsbWF4TGluZUxlbmd0aD1tYXhMaW5lLmxlbmd0
			aDtpZighb3B0aW9ucy5saW5lV3JhcHBpbmcpZG9jLml0ZXIoZnJvbS5saW5lLHRvLmxpbmUsZnVu
			Y3Rpb24obGluZSl7aWYobGluZS50ZXh0Lmxlbmd0aD09bWF4TGluZUxlbmd0aCl7cmVjb21wdXRl
			TWF4TGVuZ3RoPSB0cnVlO3JldHVybiB0cnVlfX0pO2lmKGZyb20ubGluZSE9dG8ubGluZXx8bmV3
			VGV4dC5sZW5ndGg+MSlndXR0ZXJEaXJ0eT10cnVlO3ZhciBubGluZXM9dG8ubGluZS1mcm9tLmxp
			bmUsZmlyc3RMaW5lPWdldExpbmUoZnJvbS5saW5lKSxsYXN0TGluZT1nZXRMaW5lKHRvLmxpbmUp
			O2lmKGZyb20uY2g9PTAmJnRvLmNoPT0wJiZuZXdUZXh0W25ld1RleHQubGVuZ3RoLTFdPT0iIil7
			dmFyIGFkZGVkPVtdLHByZXZMaW5lPW51bGw7aWYoZnJvbS5saW5lKXtwcmV2TGluZT1nZXRMaW5l
			KGZyb20ubGluZS0xKTtwcmV2TGluZS5maXhNYXJrRW5kcyhsYXN0TGluZSl9ZWxzZSBsYXN0TGlu
			ZS5maXhNYXJrU3RhcnRzKCk7Zm9yKHZhciBpPTAsZT1uZXdUZXh0Lmxlbmd0aC0xO2k8ZTsrK2kp
			YWRkZWQucHVzaChMaW5lLmluaGVyaXRNYXJrcyhuZXdUZXh0W2ldLHByZXZMaW5lKSk7aWYobmxp
			bmVzKWRvYy5yZW1vdmUoZnJvbS5saW5lLG5saW5lcyxjYWxsYmFja3MpO2lmKGFkZGVkLmxlbmd0
			aClkb2MuaW5zZXJ0KGZyb20ubGluZSwgYWRkZWQpfWVsc2UgaWYoZmlyc3RMaW5lPT1sYXN0TGlu
			ZSlpZihuZXdUZXh0Lmxlbmd0aD09MSlmaXJzdExpbmUucmVwbGFjZShmcm9tLmNoLHRvLmNoLG5l
			d1RleHRbMF0pO2Vsc2V7bGFzdExpbmU9Zmlyc3RMaW5lLnNwbGl0KHRvLmNoLG5ld1RleHRbbmV3
			VGV4dC5sZW5ndGgtMV0pO2ZpcnN0TGluZS5yZXBsYWNlKGZyb20uY2gsbnVsbCxuZXdUZXh0WzBd
			KTtmaXJzdExpbmUuZml4TWFya0VuZHMobGFzdExpbmUpO3ZhciBhZGRlZD1bXTtmb3IodmFyIGk9
			MSxlPW5ld1RleHQubGVuZ3RoLTE7aTxlOysraSlhZGRlZC5wdXNoKExpbmUuaW5oZXJpdE1hcmtz
			KG5ld1RleHRbaV0sZmlyc3RMaW5lKSk7YWRkZWQucHVzaChsYXN0TGluZSk7ZG9jLmluc2VydChm
			cm9tLmxpbmUrMSxhZGRlZCl9ZWxzZSBpZihuZXdUZXh0Lmxlbmd0aD09MSl7Zmlyc3RMaW5lLnJl
			cGxhY2UoZnJvbS5jaCxudWxsLG5ld1RleHRbMF0pO2xhc3RMaW5lLnJlcGxhY2UobnVsbCx0by5j
			aCwiIik7Zmlyc3RMaW5lLmFwcGVuZChsYXN0TGluZSk7IGRvYy5yZW1vdmUoZnJvbS5saW5lKzEs
			bmxpbmVzLGNhbGxiYWNrcyl9ZWxzZXt2YXIgYWRkZWQ9W107Zmlyc3RMaW5lLnJlcGxhY2UoZnJv
			bS5jaCxudWxsLG5ld1RleHRbMF0pO2xhc3RMaW5lLnJlcGxhY2UobnVsbCx0by5jaCxuZXdUZXh0
			W25ld1RleHQubGVuZ3RoLTFdKTtmaXJzdExpbmUuZml4TWFya0VuZHMobGFzdExpbmUpO2Zvcih2
			YXIgaT0xLGU9bmV3VGV4dC5sZW5ndGgtMTtpPGU7KytpKWFkZGVkLnB1c2goTGluZS5pbmhlcml0
			TWFya3MobmV3VGV4dFtpXSxmaXJzdExpbmUpKTtpZihubGluZXM+MSlkb2MucmVtb3ZlKGZyb20u
			bGluZSsxLG5saW5lcy0xLGNhbGxiYWNrcyk7ZG9jLmluc2VydChmcm9tLmxpbmUrMSxhZGRlZCl9
			aWYob3B0aW9ucy5saW5lV3JhcHBpbmcpe3ZhciBwZXJMaW5lPXNjcm9sbGVyLmNsaWVudFdpZHRo
			L2NoYXJXaWR0aCgpLTM7ZG9jLml0ZXIoZnJvbS5saW5lLGZyb20ubGluZStuZXdUZXh0Lmxlbmd0
			aCxmdW5jdGlvbihsaW5lKXtpZihsaW5lLmhpZGRlbilyZXR1cm47IHZhciBndWVzcz1NYXRoLmNl
			aWwobGluZS50ZXh0Lmxlbmd0aC9wZXJMaW5lKXx8MTtpZihndWVzcyE9bGluZS5oZWlnaHQpdXBk
			YXRlTGluZUhlaWdodChsaW5lLGd1ZXNzKX0pfWVsc2V7ZG9jLml0ZXIoZnJvbS5saW5lLGkrbmV3
			VGV4dC5sZW5ndGgsZnVuY3Rpb24obGluZSl7dmFyIGw9bGluZS50ZXh0O2lmKGwubGVuZ3RoPm1h
			eExpbmVMZW5ndGgpe21heExpbmU9bDttYXhMaW5lTGVuZ3RoPWwubGVuZ3RoO21heFdpZHRoPW51
			bGw7cmVjb21wdXRlTWF4TGVuZ3RoPWZhbHNlfX0pO2lmKHJlY29tcHV0ZU1heExlbmd0aCl7bWF4
			TGluZUxlbmd0aD0wO21heExpbmU9IiI7bWF4V2lkdGg9bnVsbDtkb2MuaXRlcigwLGRvYy5zaXpl
			LGZ1bmN0aW9uKGxpbmUpe3ZhciBsPWxpbmUudGV4dDtpZihsLmxlbmd0aD5tYXhMaW5lTGVuZ3Ro
			KXttYXhMaW5lTGVuZ3RoPWwubGVuZ3RoO21heExpbmU9bH19KX19dmFyIG5ld1dvcms9W10sbGVu
			ZGlmZj1uZXdUZXh0Lmxlbmd0aC1ubGluZXMtMTsgZm9yKHZhciBpPTAsbD13b3JrLmxlbmd0aDtp
			PGw7KytpKXt2YXIgdGFzaz13b3JrW2ldO2lmKHRhc2s8ZnJvbS5saW5lKW5ld1dvcmsucHVzaCh0
			YXNrKTtlbHNlIGlmKHRhc2s+dG8ubGluZSluZXdXb3JrLnB1c2godGFzaytsZW5kaWZmKX12YXIg
			aGxFbmQ9ZnJvbS5saW5lK01hdGgubWluKG5ld1RleHQubGVuZ3RoLDUwMCk7aGlnaGxpZ2h0TGlu
			ZXMoZnJvbS5saW5lLGhsRW5kKTtuZXdXb3JrLnB1c2goaGxFbmQpO3dvcms9bmV3V29yaztzdGFy
			dFdvcmtlcigxMDApO2NoYW5nZXMucHVzaCh7ZnJvbTpmcm9tLmxpbmUsdG86dG8ubGluZSsxLGRp
			ZmY6bGVuZGlmZn0pO3ZhciBjaGFuZ2VPYmo9e2Zyb206ZnJvbSx0bzp0byx0ZXh0Om5ld1RleHR9
			O2lmKHRleHRDaGFuZ2VkKXtmb3IodmFyIGN1cj10ZXh0Q2hhbmdlZDtjdXIubmV4dDtjdXI9Y3Vy
			Lm5leHQpO2N1ci5uZXh0PWNoYW5nZU9ian1lbHNlIHRleHRDaGFuZ2VkPWNoYW5nZU9iajtmdW5j
			dGlvbiB1cGRhdGVMaW5lKG4pe3JldHVybiBuPD0gTWF0aC5taW4odG8ubGluZSx0by5saW5lK2xl
			bmRpZmYpP246bitsZW5kaWZmfXNldFNlbGVjdGlvbihzZWxGcm9tLHNlbFRvLHVwZGF0ZUxpbmUo
			c2VsLmZyb20ubGluZSksdXBkYXRlTGluZShzZWwudG8ubGluZSkpO2lmKHNjcm9sbGVyLmNsaWVu
			dEhlaWdodCljb2RlLnN0eWxlLmhlaWdodD1kb2MuaGVpZ2h0KnRleHRIZWlnaHQoKSsyKnBhZGRp
			bmdUb3AoKSsicHgifWZ1bmN0aW9uIHJlcGxhY2VSYW5nZShjb2RlLGZyb20sdG8pe2Zyb209Y2xp
			cFBvcyhmcm9tKTtpZighdG8pdG89ZnJvbTtlbHNlIHRvPWNsaXBQb3ModG8pO2NvZGU9c3BsaXRM
			aW5lcyhjb2RlKTtmdW5jdGlvbiBhZGp1c3RQb3MocG9zKXtpZihwb3NMZXNzKHBvcyxmcm9tKSly
			ZXR1cm4gcG9zO2lmKCFwb3NMZXNzKHRvLHBvcykpcmV0dXJuIGVuZDt2YXIgbGluZT1wb3MubGlu
			ZStjb2RlLmxlbmd0aC0odG8ubGluZS1mcm9tLmxpbmUpLTE7dmFyIGNoPXBvcy5jaDtpZihwb3Mu
			bGluZT09dG8ubGluZSljaCs9IGNvZGVbY29kZS5sZW5ndGgtMV0ubGVuZ3RoLSh0by5jaC0odG8u
			bGluZT09ZnJvbS5saW5lP2Zyb20uY2g6MCkpO3JldHVybntsaW5lOmxpbmUsY2g6Y2h9fXZhciBl
			bmQ7cmVwbGFjZVJhbmdlMShjb2RlLGZyb20sdG8sZnVuY3Rpb24oZW5kMSl7ZW5kPWVuZDE7cmV0
			dXJue2Zyb206YWRqdXN0UG9zKHNlbC5mcm9tKSx0bzphZGp1c3RQb3Moc2VsLnRvKX19KTtyZXR1
			cm4gZW5kfWZ1bmN0aW9uIHJlcGxhY2VTZWxlY3Rpb24oY29kZSxjb2xsYXBzZSl7cmVwbGFjZVJh
			bmdlMShzcGxpdExpbmVzKGNvZGUpLHNlbC5mcm9tLHNlbC50byxmdW5jdGlvbihlbmQpe2lmKGNv
			bGxhcHNlPT0iZW5kIilyZXR1cm57ZnJvbTplbmQsdG86ZW5kfTtlbHNlIGlmKGNvbGxhcHNlPT0i
			c3RhcnQiKXJldHVybntmcm9tOnNlbC5mcm9tLHRvOnNlbC5mcm9tfTtlbHNlIHJldHVybntmcm9t
			OnNlbC5mcm9tLHRvOmVuZH19KX1mdW5jdGlvbiByZXBsYWNlUmFuZ2UxKGNvZGUsZnJvbSx0byxj
			b21wdXRlU2VsKXt2YXIgZW5kY2g9IGNvZGUubGVuZ3RoPT0xP2NvZGVbMF0ubGVuZ3RoK2Zyb20u
			Y2g6Y29kZVtjb2RlLmxlbmd0aC0xXS5sZW5ndGg7dmFyIG5ld1NlbD1jb21wdXRlU2VsKHtsaW5l
			OmZyb20ubGluZStjb2RlLmxlbmd0aC0xLGNoOmVuZGNofSk7dXBkYXRlTGluZXMoZnJvbSx0byxj
			b2RlLG5ld1NlbC5mcm9tLG5ld1NlbC50byl9ZnVuY3Rpb24gZ2V0UmFuZ2UoZnJvbSx0byl7dmFy
			IGwxPWZyb20ubGluZSxsMj10by5saW5lO2lmKGwxPT1sMilyZXR1cm4gZ2V0TGluZShsMSkudGV4
			dC5zbGljZShmcm9tLmNoLHRvLmNoKTt2YXIgY29kZT1bZ2V0TGluZShsMSkudGV4dC5zbGljZShm
			cm9tLmNoKV07ZG9jLml0ZXIobDErMSxsMixmdW5jdGlvbihsaW5lKXtjb2RlLnB1c2gobGluZS50
			ZXh0KX0pO2NvZGUucHVzaChnZXRMaW5lKGwyKS50ZXh0LnNsaWNlKDAsdG8uY2gpKTtyZXR1cm4g
			Y29kZS5qb2luKCJcbiIpfWZ1bmN0aW9uIGdldFNlbGVjdGlvbigpe3JldHVybiBnZXRSYW5nZShz
			ZWwuZnJvbSxzZWwudG8pfSB2YXIgcG9sbGluZ0Zhc3Q9ZmFsc2U7ZnVuY3Rpb24gc2xvd1BvbGwo
			KXtpZihwb2xsaW5nRmFzdClyZXR1cm47cG9sbC5zZXQob3B0aW9ucy5wb2xsSW50ZXJ2YWwsZnVu
			Y3Rpb24oKXtzdGFydE9wZXJhdGlvbigpO3JlYWRJbnB1dCgpO2lmKGZvY3VzZWQpc2xvd1BvbGwo
			KTtlbmRPcGVyYXRpb24oKX0pfWZ1bmN0aW9uIGZhc3RQb2xsKCl7dmFyIG1pc3NlZD1mYWxzZTtw
			b2xsaW5nRmFzdD10cnVlO2Z1bmN0aW9uIHAoKXtzdGFydE9wZXJhdGlvbigpO3ZhciBjaGFuZ2Vk
			PXJlYWRJbnB1dCgpO2lmKCFjaGFuZ2VkJiYhbWlzc2VkKXttaXNzZWQ9dHJ1ZTtwb2xsLnNldCg2
			MCxwKX1lbHNle3BvbGxpbmdGYXN0PWZhbHNlO3Nsb3dQb2xsKCl9ZW5kT3BlcmF0aW9uKCl9cG9s
			bC5zZXQoMjAscCl9dmFyIHByZXZJbnB1dD0iIjtmdW5jdGlvbiByZWFkSW5wdXQoKXtpZihsZWF2
			ZUlucHV0QWxvbmV8fCFmb2N1c2VkfHxoYXNTZWxlY3Rpb24oaW5wdXQpfHxvcHRpb25zLnJlYWRP
			bmx5KXJldHVybiBmYWxzZTsgdmFyIHRleHQ9aW5wdXQudmFsdWU7aWYodGV4dD09cHJldklucHV0
			KXJldHVybiBmYWxzZTtzaGlmdFNlbGVjdGluZz1udWxsO3ZhciBzYW1lPTAsbD1NYXRoLm1pbihw
			cmV2SW5wdXQubGVuZ3RoLHRleHQubGVuZ3RoKTt3aGlsZShzYW1lPGwmJnByZXZJbnB1dFtzYW1l
			XT09dGV4dFtzYW1lXSkrK3NhbWU7aWYoc2FtZTxwcmV2SW5wdXQubGVuZ3RoKXNlbC5mcm9tPXts
			aW5lOnNlbC5mcm9tLmxpbmUsY2g6c2VsLmZyb20uY2gtKHByZXZJbnB1dC5sZW5ndGgtc2FtZSl9
			O2Vsc2UgaWYob3ZlcndyaXRlJiZwb3NFcShzZWwuZnJvbSxzZWwudG8pKXNlbC50bz17bGluZTpz
			ZWwudG8ubGluZSxjaDpNYXRoLm1pbihnZXRMaW5lKHNlbC50by5saW5lKS50ZXh0Lmxlbmd0aCxz
			ZWwudG8uY2grKHRleHQubGVuZ3RoLXNhbWUpKX07cmVwbGFjZVNlbGVjdGlvbih0ZXh0LnNsaWNl
			KHNhbWUpLCJlbmQiKTtwcmV2SW5wdXQ9dGV4dDtyZXR1cm4gdHJ1ZX1mdW5jdGlvbiByZXNldElu
			cHV0KHVzZXIpe2lmKCFwb3NFcShzZWwuZnJvbSwgc2VsLnRvKSl7cHJldklucHV0PSIiO2lucHV0
			LnZhbHVlPWdldFNlbGVjdGlvbigpO3NlbGVjdElucHV0KGlucHV0KX1lbHNlIGlmKHVzZXIpcHJl
			dklucHV0PWlucHV0LnZhbHVlPSIifWZ1bmN0aW9uIGZvY3VzSW5wdXQoKXtpZihvcHRpb25zLnJl
			YWRPbmx5IT0ibm9jdXJzb3IiKWlucHV0LmZvY3VzKCl9ZnVuY3Rpb24gc2Nyb2xsRWRpdG9ySW50
			b1ZpZXcoKXtpZighY3Vyc29yLmdldEJvdW5kaW5nQ2xpZW50UmVjdClyZXR1cm47dmFyIHJlY3Q9
			Y3Vyc29yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2lmKGllJiZyZWN0LnRvcD09cmVjdC5ib3R0
			b20pcmV0dXJuO3ZhciB3aW5IPXdpbmRvdy5pbm5lckhlaWdodHx8TWF0aC5tYXgoZG9jdW1lbnQu
			Ym9keS5vZmZzZXRIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCk7
			aWYocmVjdC50b3A8MHx8cmVjdC5ib3R0b20+d2luSCljdXJzb3Iuc2Nyb2xsSW50b1ZpZXcoKX1m
			dW5jdGlvbiBzY3JvbGxDdXJzb3JJbnRvVmlldygpe3ZhciBjdXJzb3I9IGxvY2FsQ29vcmRzKHNl
			bC5pbnZlcnRlZD9zZWwuZnJvbTpzZWwudG8pO3ZhciB4PW9wdGlvbnMubGluZVdyYXBwaW5nP01h
			dGgubWluKGN1cnNvci54LGxpbmVTcGFjZS5vZmZzZXRXaWR0aCk6Y3Vyc29yLng7cmV0dXJuIHNj
			cm9sbEludG9WaWV3KHgsY3Vyc29yLnkseCxjdXJzb3IueUJvdCl9ZnVuY3Rpb24gc2Nyb2xsSW50
			b1ZpZXcoeDEseTEseDIseTIpe3ZhciBwbD1wYWRkaW5nTGVmdCgpLHB0PXBhZGRpbmdUb3AoKSxs
			aD10ZXh0SGVpZ2h0KCk7eTErPXB0O3kyKz1wdDt4MSs9cGw7eDIrPXBsO3ZhciBzY3JlZW49c2Ny
			b2xsZXIuY2xpZW50SGVpZ2h0LHNjcmVlbnRvcD1zY3JvbGxlci5zY3JvbGxUb3Asc2Nyb2xsZWQ9
			ZmFsc2UscmVzdWx0PXRydWU7aWYoeTE8c2NyZWVudG9wKXtzY3JvbGxlci5zY3JvbGxUb3A9TWF0
			aC5tYXgoMCx5MS0yKmxoKTtzY3JvbGxlZD10cnVlfWVsc2UgaWYoeTI+c2NyZWVudG9wK3NjcmVl
			bil7c2Nyb2xsZXIuc2Nyb2xsVG9wPXkyK2xoLXNjcmVlbjsgc2Nyb2xsZWQ9dHJ1ZX12YXIgc2Ny
			ZWVudz1zY3JvbGxlci5jbGllbnRXaWR0aCxzY3JlZW5sZWZ0PXNjcm9sbGVyLnNjcm9sbExlZnQ7
			dmFyIGd1dHRlcnc9b3B0aW9ucy5maXhlZEd1dHRlcj9ndXR0ZXIuY2xpZW50V2lkdGg6MDtpZih4
			MTxzY3JlZW5sZWZ0K2d1dHRlcncpe2lmKHgxPDUwKXgxPTA7c2Nyb2xsZXIuc2Nyb2xsTGVmdD1N
			YXRoLm1heCgwLHgxLTEwLWd1dHRlcncpO3Njcm9sbGVkPXRydWV9ZWxzZSBpZih4Mj5zY3JlZW53
			K3NjcmVlbmxlZnQtMyl7c2Nyb2xsZXIuc2Nyb2xsTGVmdD14MisxMC1zY3JlZW53O3Njcm9sbGVk
			PXRydWU7aWYoeDI+Y29kZS5jbGllbnRXaWR0aClyZXN1bHQ9ZmFsc2V9aWYoc2Nyb2xsZWQmJm9w
			dGlvbnMub25TY3JvbGwpb3B0aW9ucy5vblNjcm9sbChpbnN0YW5jZSk7cmV0dXJuIHJlc3VsdH1m
			dW5jdGlvbiB2aXNpYmxlTGluZXMoKXt2YXIgbGg9dGV4dEhlaWdodCgpLHRvcD1zY3JvbGxlci5z
			Y3JvbGxUb3AtcGFkZGluZ1RvcCgpO3ZhciBmcm9tX2hlaWdodD0gTWF0aC5tYXgoMCxNYXRoLmZs
			b29yKHRvcC9saCkpO3ZhciB0b19oZWlnaHQ9TWF0aC5jZWlsKCh0b3Arc2Nyb2xsZXIuY2xpZW50
			SGVpZ2h0KS9saCk7cmV0dXJue2Zyb206bGluZUF0SGVpZ2h0KGRvYyxmcm9tX2hlaWdodCksdG86
			bGluZUF0SGVpZ2h0KGRvYyx0b19oZWlnaHQpfX1mdW5jdGlvbiB1cGRhdGVEaXNwbGF5KGNoYW5n
			ZXMsc3VwcHJlc3NDYWxsYmFjayl7aWYoIXNjcm9sbGVyLmNsaWVudFdpZHRoKXtzaG93aW5nRnJv
			bT1zaG93aW5nVG89ZGlzcGxheU9mZnNldD0wO3JldHVybn12YXIgdmlzaWJsZT12aXNpYmxlTGlu
			ZXMoKTtpZihjaGFuZ2VzIT09dHJ1ZSYmY2hhbmdlcy5sZW5ndGg9PTAmJnZpc2libGUuZnJvbT5z
			aG93aW5nRnJvbSYmdmlzaWJsZS50bzxzaG93aW5nVG8pcmV0dXJuO3ZhciBmcm9tPU1hdGgubWF4
			KHZpc2libGUuZnJvbS0xMDAsMCksdG89TWF0aC5taW4oZG9jLnNpemUsdmlzaWJsZS50bysxMDAp
			O2lmKHNob3dpbmdGcm9tPGZyb20mJmZyb20tIHNob3dpbmdGcm9tPDIwKWZyb209c2hvd2luZ0Zy
			b207aWYoc2hvd2luZ1RvPnRvJiZzaG93aW5nVG8tdG88MjApdG89TWF0aC5taW4oZG9jLnNpemUs
			c2hvd2luZ1RvKTt2YXIgaW50YWN0PWNoYW5nZXM9PT10cnVlP1tdOmNvbXB1dGVJbnRhY3QoW3tm
			cm9tOnNob3dpbmdGcm9tLHRvOnNob3dpbmdUbyxkb21TdGFydDowfV0sY2hhbmdlcyk7dmFyIGlu
			dGFjdExpbmVzPTA7Zm9yKHZhciBpPTA7aTxpbnRhY3QubGVuZ3RoOysraSl7dmFyIHJhbmdlPWlu
			dGFjdFtpXTtpZihyYW5nZS5mcm9tPGZyb20pe3JhbmdlLmRvbVN0YXJ0Kz1mcm9tLXJhbmdlLmZy
			b207cmFuZ2UuZnJvbT1mcm9tfWlmKHJhbmdlLnRvPnRvKXJhbmdlLnRvPXRvO2lmKHJhbmdlLmZy
			b20+PXJhbmdlLnRvKWludGFjdC5zcGxpY2UoaS0tLDEpO2Vsc2UgaW50YWN0TGluZXMrPXJhbmdl
			LnRvLXJhbmdlLmZyb219aWYoaW50YWN0TGluZXM9PXRvLWZyb20pcmV0dXJuO2ludGFjdC5zb3J0
			KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuZG9tU3RhcnQtIGIuZG9tU3RhcnR9KTt2YXIgdGg9dGV4
			dEhlaWdodCgpLGd1dHRlckRpc3BsYXk9Z3V0dGVyLnN0eWxlLmRpc3BsYXk7bGluZURpdi5zdHls
			ZS5kaXNwbGF5PSJub25lIjtwYXRjaERpc3BsYXkoZnJvbSx0byxpbnRhY3QpO2xpbmVEaXYuc3R5
			bGUuZGlzcGxheT1ndXR0ZXIuc3R5bGUuZGlzcGxheT0iIjt2YXIgZGlmZmVyZW50PWZyb20hPXNo
			b3dpbmdGcm9tfHx0byE9c2hvd2luZ1RvfHxsYXN0U2l6ZUMhPXNjcm9sbGVyLmNsaWVudEhlaWdo
			dCt0aDtpZihkaWZmZXJlbnQpbGFzdFNpemVDPXNjcm9sbGVyLmNsaWVudEhlaWdodCt0aDtzaG93
			aW5nRnJvbT1mcm9tO3Nob3dpbmdUbz10bztkaXNwbGF5T2Zmc2V0PWhlaWdodEF0TGluZShkb2Ms
			ZnJvbSk7bW92ZXIuc3R5bGUudG9wPWRpc3BsYXlPZmZzZXQqdGgrInB4IjtpZihzY3JvbGxlci5j
			bGllbnRIZWlnaHQpY29kZS5zdHlsZS5oZWlnaHQ9ZG9jLmhlaWdodCp0aCsyKnBhZGRpbmdUb3Ao
			KSsicHgiO2lmKGxpbmVEaXYuY2hpbGROb2Rlcy5sZW5ndGghPSBzaG93aW5nVG8tc2hvd2luZ0Zy
			b20pdGhyb3cgbmV3IEVycm9yKCJCQUQgUEFUQ0ghICIrSlNPTi5zdHJpbmdpZnkoaW50YWN0KSsi
			IHNpemU9Iisoc2hvd2luZ1RvLXNob3dpbmdGcm9tKSsiIG5vZGVzPSIrbGluZURpdi5jaGlsZE5v
			ZGVzLmxlbmd0aCk7aWYob3B0aW9ucy5saW5lV3JhcHBpbmcpe21heFdpZHRoPXNjcm9sbGVyLmNs
			aWVudFdpZHRoO3ZhciBjdXJOb2RlPWxpbmVEaXYuZmlyc3RDaGlsZCxoZWlnaHRDaGFuZ2VkPWZh
			bHNlO2RvYy5pdGVyKHNob3dpbmdGcm9tLHNob3dpbmdUbyxmdW5jdGlvbihsaW5lKXtpZighbGlu
			ZS5oaWRkZW4pe3ZhciBoZWlnaHQ9TWF0aC5yb3VuZChjdXJOb2RlLm9mZnNldEhlaWdodC90aCl8
			fDE7aWYobGluZS5oZWlnaHQhPWhlaWdodCl7dXBkYXRlTGluZUhlaWdodChsaW5lLGhlaWdodCk7
			Z3V0dGVyRGlydHk9aGVpZ2h0Q2hhbmdlZD10cnVlfX1jdXJOb2RlPWN1ck5vZGUubmV4dFNpYmxp
			bmd9KTtpZihoZWlnaHRDaGFuZ2VkKWNvZGUuc3R5bGUuaGVpZ2h0PSBkb2MuaGVpZ2h0KnRoKzIq
			cGFkZGluZ1RvcCgpKyJweCJ9ZWxzZXtpZihtYXhXaWR0aD09bnVsbCltYXhXaWR0aD1zdHJpbmdX
			aWR0aChtYXhMaW5lKTtpZihtYXhXaWR0aD5zY3JvbGxlci5jbGllbnRXaWR0aCl7bGluZVNwYWNl
			LnN0eWxlLndpZHRoPW1heFdpZHRoKyJweCI7Y29kZS5zdHlsZS53aWR0aD0iIjtjb2RlLnN0eWxl
			LndpZHRoPXNjcm9sbGVyLnNjcm9sbFdpZHRoKyJweCJ9ZWxzZSBsaW5lU3BhY2Uuc3R5bGUud2lk
			dGg9Y29kZS5zdHlsZS53aWR0aD0iIn1ndXR0ZXIuc3R5bGUuZGlzcGxheT1ndXR0ZXJEaXNwbGF5
			O2lmKGRpZmZlcmVudHx8Z3V0dGVyRGlydHkpdXBkYXRlR3V0dGVyKCk7dXBkYXRlU2VsZWN0aW9u
			KCk7aWYoIXN1cHByZXNzQ2FsbGJhY2smJm9wdGlvbnMub25VcGRhdGUpb3B0aW9ucy5vblVwZGF0
			ZShpbnN0YW5jZSk7cmV0dXJuIHRydWV9ZnVuY3Rpb24gY29tcHV0ZUludGFjdChpbnRhY3QsY2hh
			bmdlcyl7Zm9yKHZhciBpPTAsbD1jaGFuZ2VzLmxlbmd0aHx8IDA7aTxsOysraSl7dmFyIGNoYW5n
			ZT1jaGFuZ2VzW2ldLGludGFjdDI9W10sZGlmZj1jaGFuZ2UuZGlmZnx8MDtmb3IodmFyIGo9MCxs
			Mj1pbnRhY3QubGVuZ3RoO2o8bDI7KytqKXt2YXIgcmFuZ2U9aW50YWN0W2pdO2lmKGNoYW5nZS50
			bzw9cmFuZ2UuZnJvbSYmY2hhbmdlLmRpZmYpaW50YWN0Mi5wdXNoKHtmcm9tOnJhbmdlLmZyb20r
			ZGlmZix0bzpyYW5nZS50bytkaWZmLGRvbVN0YXJ0OnJhbmdlLmRvbVN0YXJ0fSk7ZWxzZSBpZihj
			aGFuZ2UudG88PXJhbmdlLmZyb218fGNoYW5nZS5mcm9tPj1yYW5nZS50bylpbnRhY3QyLnB1c2go
			cmFuZ2UpO2Vsc2V7aWYoY2hhbmdlLmZyb20+cmFuZ2UuZnJvbSlpbnRhY3QyLnB1c2goe2Zyb206
			cmFuZ2UuZnJvbSx0bzpjaGFuZ2UuZnJvbSxkb21TdGFydDpyYW5nZS5kb21TdGFydH0pO2lmKGNo
			YW5nZS50bzxyYW5nZS50bylpbnRhY3QyLnB1c2goe2Zyb206Y2hhbmdlLnRvK2RpZmYsdG86cmFu
			Z2UudG8rZGlmZixkb21TdGFydDpyYW5nZS5kb21TdGFydCsgKGNoYW5nZS50by1yYW5nZS5mcm9t
			KX0pfX1pbnRhY3Q9aW50YWN0Mn1yZXR1cm4gaW50YWN0fWZ1bmN0aW9uIHBhdGNoRGlzcGxheShm
			cm9tLHRvLGludGFjdCl7aWYoIWludGFjdC5sZW5ndGgpbGluZURpdi5pbm5lckhUTUw9IiI7ZWxz
			ZXtmdW5jdGlvbiBraWxsTm9kZShub2RlKXt2YXIgdG1wPW5vZGUubmV4dFNpYmxpbmc7bm9kZS5w
			YXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO3JldHVybiB0bXB9dmFyIGRvbVBvcz0wLGN1ck5v
			ZGU9bGluZURpdi5maXJzdENoaWxkLG47Zm9yKHZhciBpPTA7aTxpbnRhY3QubGVuZ3RoOysraSl7
			dmFyIGN1cj1pbnRhY3RbaV07d2hpbGUoY3VyLmRvbVN0YXJ0PmRvbVBvcyl7Y3VyTm9kZT1raWxs
			Tm9kZShjdXJOb2RlKTtkb21Qb3MrK31mb3IodmFyIGo9MCxlPWN1ci50by1jdXIuZnJvbTtqPGU7
			KytqKXtjdXJOb2RlPWN1ck5vZGUubmV4dFNpYmxpbmc7ZG9tUG9zKyt9fXdoaWxlKGN1ck5vZGUp
			Y3VyTm9kZT1raWxsTm9kZShjdXJOb2RlKX12YXIgbmV4dEludGFjdD0gaW50YWN0LnNoaWZ0KCks
			Y3VyTm9kZT1saW5lRGl2LmZpcnN0Q2hpbGQsaj1mcm9tO3ZhciBzY3JhdGNoPXRhcmdldERvY3Vt
			ZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLG5ld0VsdDtkb2MuaXRlcihmcm9tLHRvLGZ1bmN0aW9u
			KGxpbmUpe2lmKG5leHRJbnRhY3QmJm5leHRJbnRhY3QudG89PWopbmV4dEludGFjdD1pbnRhY3Qu
			c2hpZnQoKTtpZighbmV4dEludGFjdHx8bmV4dEludGFjdC5mcm9tPmope2lmKGxpbmUuaGlkZGVu
			KXZhciBodG1sPXNjcmF0Y2guaW5uZXJIVE1MPSI8cHJlPjwvcHJlPiI7ZWxzZXt2YXIgaHRtbD0i
			PHByZT4iK2xpbmUuZ2V0SFRNTChtYWtlVGFiKSsiPC9wcmU+IjtpZihsaW5lLmNsYXNzTmFtZSlo
			dG1sPSc8ZGl2IHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPjxwcmUgY2xhc3M9IicrbGluZS5j
			bGFzc05hbWUrJyIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMDsgcmlnaHQ6IDA7
			IHRvcDogMDsgYm90dG9tOiAwOyB6LWluZGV4OiAtMiI+JiMxNjA7PC9wcmU+JysgaHRtbCsiPC9k
			aXY+In1zY3JhdGNoLmlubmVySFRNTD1odG1sO2xpbmVEaXYuaW5zZXJ0QmVmb3JlKHNjcmF0Y2gu
			Zmlyc3RDaGlsZCxjdXJOb2RlKX1lbHNlIGN1ck5vZGU9Y3VyTm9kZS5uZXh0U2libGluZzsrK2p9
			KX1mdW5jdGlvbiB1cGRhdGVHdXR0ZXIoKXtpZighb3B0aW9ucy5ndXR0ZXImJiFvcHRpb25zLmxp
			bmVOdW1iZXJzKXJldHVybjt2YXIgaFRleHQ9bW92ZXIub2Zmc2V0SGVpZ2h0LGhFZGl0b3I9c2Ny
			b2xsZXIuY2xpZW50SGVpZ2h0O2d1dHRlci5zdHlsZS5oZWlnaHQ9KGhUZXh0LWhFZGl0b3I8Mj9o
			RWRpdG9yOmhUZXh0KSsicHgiO3ZhciBodG1sPVtdLGk9c2hvd2luZ0Zyb207ZG9jLml0ZXIoc2hv
			d2luZ0Zyb20sTWF0aC5tYXgoc2hvd2luZ1RvLHNob3dpbmdGcm9tKzEpLGZ1bmN0aW9uKGxpbmUp
			e2lmKGxpbmUuaGlkZGVuKWh0bWwucHVzaCgiPHByZT48L3ByZT4iKTtlbHNle3ZhciBtYXJrZXI9
			bGluZS5ndXR0ZXJNYXJrZXI7dmFyIHRleHQ9b3B0aW9ucy5saW5lTnVtYmVycz8gaStvcHRpb25z
			LmZpcnN0TGluZU51bWJlcjpudWxsO2lmKG1hcmtlciYmbWFya2VyLnRleHQpdGV4dD1tYXJrZXIu
			dGV4dC5yZXBsYWNlKCIlTiUiLHRleHQhPW51bGw/dGV4dDoiIik7ZWxzZSBpZih0ZXh0PT1udWxs
			KXRleHQ9Ilx1MDBhMCI7aHRtbC5wdXNoKG1hcmtlciYmbWFya2VyLnN0eWxlPyc8cHJlIGNsYXNz
			PSInK21hcmtlci5zdHlsZSsnIj4nOiI8cHJlPiIsdGV4dCk7Zm9yKHZhciBqPTE7ajxsaW5lLmhl
			aWdodDsrK2opaHRtbC5wdXNoKCI8YnIvPiYjMTYwOyIpO2h0bWwucHVzaCgiPC9wcmU+Iil9Kytp
			fSk7Z3V0dGVyLnN0eWxlLmRpc3BsYXk9Im5vbmUiO2d1dHRlclRleHQuaW5uZXJIVE1MPWh0bWwu
			am9pbigiIik7dmFyIG1pbndpZHRoPVN0cmluZyhkb2Muc2l6ZSkubGVuZ3RoLGZpcnN0Tm9kZT1n
			dXR0ZXJUZXh0LmZpcnN0Q2hpbGQsdmFsPWVsdFRleHQoZmlyc3ROb2RlKSxwYWQ9IiI7d2hpbGUo
			dmFsLmxlbmd0aCtwYWQubGVuZ3RoPG1pbndpZHRoKXBhZCs9ICJcdTAwYTAiO2lmKHBhZClmaXJz
			dE5vZGUuaW5zZXJ0QmVmb3JlKHRhcmdldERvY3VtZW50LmNyZWF0ZVRleHROb2RlKHBhZCksZmly
			c3ROb2RlLmZpcnN0Q2hpbGQpO2d1dHRlci5zdHlsZS5kaXNwbGF5PSIiO2xpbmVTcGFjZS5zdHls
			ZS5tYXJnaW5MZWZ0PWd1dHRlci5vZmZzZXRXaWR0aCsicHgiO2d1dHRlckRpcnR5PWZhbHNlfWZ1
			bmN0aW9uIHVwZGF0ZVNlbGVjdGlvbigpe3ZhciBjb2xsYXBzZWQ9cG9zRXEoc2VsLmZyb20sc2Vs
			LnRvKTt2YXIgZnJvbVBvcz1sb2NhbENvb3JkcyhzZWwuZnJvbSx0cnVlKTt2YXIgdG9Qb3M9Y29s
			bGFwc2VkP2Zyb21Qb3M6bG9jYWxDb29yZHMoc2VsLnRvLHRydWUpO3ZhciBoZWFkUG9zPXNlbC5p
			bnZlcnRlZD9mcm9tUG9zOnRvUG9zLHRoPXRleHRIZWlnaHQoKTt2YXIgd3JhcE9mZj1lbHRPZmZz
			ZXQod3JhcHBlciksbGluZU9mZj1lbHRPZmZzZXQobGluZURpdik7aW5wdXREaXYuc3R5bGUudG9w
			PU1hdGgubWF4KDAsTWF0aC5taW4oc2Nyb2xsZXIub2Zmc2V0SGVpZ2h0LCBoZWFkUG9zLnkrbGlu
			ZU9mZi50b3Atd3JhcE9mZi50b3ApKSsicHgiO2lucHV0RGl2LnN0eWxlLmxlZnQ9TWF0aC5tYXgo
			MCxNYXRoLm1pbihzY3JvbGxlci5vZmZzZXRXaWR0aCxoZWFkUG9zLngrbGluZU9mZi5sZWZ0LXdy
			YXBPZmYubGVmdCkpKyJweCI7aWYoY29sbGFwc2VkKXtjdXJzb3Iuc3R5bGUudG9wPWhlYWRQb3Mu
			eSsicHgiO2N1cnNvci5zdHlsZS5sZWZ0PShvcHRpb25zLmxpbmVXcmFwcGluZz9NYXRoLm1pbiho
			ZWFkUG9zLngsbGluZVNwYWNlLm9mZnNldFdpZHRoKTpoZWFkUG9zLngpKyJweCI7Y3Vyc29yLnN0
			eWxlLmRpc3BsYXk9IiI7c2VsZWN0aW9uRGl2LnN0eWxlLmRpc3BsYXk9Im5vbmUifWVsc2V7dmFy
			IHNhbWVMaW5lPWZyb21Qb3MueT09dG9Qb3MueSxodG1sPSIiO2Z1bmN0aW9uIGFkZChsZWZ0LHRv
			cCxyaWdodCxoZWlnaHQpe2h0bWwrPSc8ZGl2IGNsYXNzPSJDb2RlTWlycm9yLXNlbGVjdGVkIiBz
			dHlsZT0icG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAnKyBsZWZ0KyJweDsgdG9wOiAiK3RvcCsi
			cHg7IHJpZ2h0OiAiK3JpZ2h0KyJweDsgaGVpZ2h0OiAiK2hlaWdodCsncHgiPjwvZGl2Pid9aWYo
			c2VsLmZyb20uY2gmJmZyb21Qb3MueT49MCl7dmFyIHJpZ2h0PXNhbWVMaW5lP2xpbmVTcGFjZS5j
			bGllbnRXaWR0aC10b1Bvcy54OjA7YWRkKGZyb21Qb3MueCxmcm9tUG9zLnkscmlnaHQsdGgpfXZh
			ciBtaWRkbGVTdGFydD1NYXRoLm1heCgwLGZyb21Qb3MueSsoc2VsLmZyb20uY2g/dGg6MCkpO3Zh
			ciBtaWRkbGVIZWlnaHQ9TWF0aC5taW4odG9Qb3MueSxsaW5lU3BhY2UuY2xpZW50SGVpZ2h0KS1t
			aWRkbGVTdGFydDtpZihtaWRkbGVIZWlnaHQ+MC4yKnRoKWFkZCgwLG1pZGRsZVN0YXJ0LDAsbWlk
			ZGxlSGVpZ2h0KTtpZigoIXNhbWVMaW5lfHwhc2VsLmZyb20uY2gpJiZ0b1Bvcy55PGxpbmVTcGFj
			ZS5jbGllbnRIZWlnaHQtMC41KnRoKWFkZCgwLHRvUG9zLnksbGluZVNwYWNlLmNsaWVudFdpZHRo
			LXRvUG9zLngsdGgpO3NlbGVjdGlvbkRpdi5pbm5lckhUTUw9IGh0bWw7Y3Vyc29yLnN0eWxlLmRp
			c3BsYXk9Im5vbmUiO3NlbGVjdGlvbkRpdi5zdHlsZS5kaXNwbGF5PSIifX1mdW5jdGlvbiBzZXRT
			aGlmdCh2YWwpe2lmKHZhbClzaGlmdFNlbGVjdGluZz1zaGlmdFNlbGVjdGluZ3x8KHNlbC5pbnZl
			cnRlZD9zZWwudG86c2VsLmZyb20pO2Vsc2Ugc2hpZnRTZWxlY3Rpbmc9bnVsbH1mdW5jdGlvbiBz
			ZXRTZWxlY3Rpb25Vc2VyKGZyb20sdG8pe3ZhciBzaD1zaGlmdFNlbGVjdGluZyYmY2xpcFBvcyhz
			aGlmdFNlbGVjdGluZyk7aWYoc2gpaWYocG9zTGVzcyhzaCxmcm9tKSlmcm9tPXNoO2Vsc2UgaWYo
			cG9zTGVzcyh0byxzaCkpdG89c2g7c2V0U2VsZWN0aW9uKGZyb20sdG8pO3VzZXJTZWxDaGFuZ2U9
			dHJ1ZX1mdW5jdGlvbiBzZXRTZWxlY3Rpb24oZnJvbSx0byxvbGRGcm9tLG9sZFRvKXtnb2FsQ29s
			dW1uPW51bGw7aWYob2xkRnJvbT09bnVsbCl7b2xkRnJvbT1zZWwuZnJvbS5saW5lO29sZFRvPXNl
			bC50by5saW5lfWlmKHBvc0VxKHNlbC5mcm9tLCBmcm9tKSYmcG9zRXEoc2VsLnRvLHRvKSlyZXR1
			cm47aWYocG9zTGVzcyh0byxmcm9tKSl7dmFyIHRtcD10bzt0bz1mcm9tO2Zyb209dG1wfWlmKGZy
			b20ubGluZSE9b2xkRnJvbSlmcm9tPXNraXBIaWRkZW4oZnJvbSxvbGRGcm9tLHNlbC5mcm9tLmNo
			KTtpZih0by5saW5lIT1vbGRUbyl0bz1za2lwSGlkZGVuKHRvLG9sZFRvLHNlbC50by5jaCk7aWYo
			cG9zRXEoZnJvbSx0bykpc2VsLmludmVydGVkPWZhbHNlO2Vsc2UgaWYocG9zRXEoZnJvbSxzZWwu
			dG8pKXNlbC5pbnZlcnRlZD1mYWxzZTtlbHNlIGlmKHBvc0VxKHRvLHNlbC5mcm9tKSlzZWwuaW52
			ZXJ0ZWQ9dHJ1ZTtpZihvcHRpb25zLmF1dG9DbGVhckVtcHR5TGluZXMmJnBvc0VxKHNlbC5mcm9t
			LHNlbC50bykpe3ZhciBoZWFkPXNlbC5pbnZlcnRlZD9mcm9tOnRvO2lmKGhlYWQubGluZSE9c2Vs
			LmZyb20ubGluZSl7dmFyIG9sZExpbmU9Z2V0TGluZShzZWwuZnJvbS5saW5lKTtpZigvXlxzKyQv
			LnRlc3Qob2xkTGluZS50ZXh0KSlzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpe2lmKG9s
			ZExpbmUucGFyZW50JiYgL15ccyskLy50ZXN0KG9sZExpbmUudGV4dCkpe3ZhciBubz1saW5lTm8o
			b2xkTGluZSk7cmVwbGFjZVJhbmdlKCIiLHtsaW5lOm5vLGNoOjB9LHtsaW5lOm5vLGNoOm9sZExp
			bmUudGV4dC5sZW5ndGh9KX19LDEwKSl9fXNlbC5mcm9tPWZyb207c2VsLnRvPXRvO3NlbGVjdGlv
			bkNoYW5nZWQ9dHJ1ZX1mdW5jdGlvbiBza2lwSGlkZGVuKHBvcyxvbGRMaW5lLG9sZENoKXtmdW5j
			dGlvbiBnZXROb25IaWRkZW4oZGlyKXt2YXIgbE5vPXBvcy5saW5lK2RpcixlbmQ9ZGlyPT0xP2Rv
			Yy5zaXplOi0xO3doaWxlKGxObyE9ZW5kKXt2YXIgbGluZT1nZXRMaW5lKGxObyk7aWYoIWxpbmUu
			aGlkZGVuKXt2YXIgY2g9cG9zLmNoO2lmKGNoPm9sZENofHxjaD5saW5lLnRleHQubGVuZ3RoKWNo
			PWxpbmUudGV4dC5sZW5ndGg7cmV0dXJue2xpbmU6bE5vLGNoOmNofX1sTm8rPWRpcn19dmFyIGxp
			bmU9Z2V0TGluZShwb3MubGluZSk7aWYoIWxpbmUuaGlkZGVuKXJldHVybiBwb3M7aWYocG9zLmxp
			bmU+PSBvbGRMaW5lKXJldHVybiBnZXROb25IaWRkZW4oMSl8fGdldE5vbkhpZGRlbigtMSk7ZWxz
			ZSByZXR1cm4gZ2V0Tm9uSGlkZGVuKC0xKXx8Z2V0Tm9uSGlkZGVuKDEpfWZ1bmN0aW9uIHNldEN1
			cnNvcihsaW5lLGNoLHVzZXIpe3ZhciBwb3M9Y2xpcFBvcyh7bGluZTpsaW5lLGNoOmNofHwwfSk7
			KHVzZXI/c2V0U2VsZWN0aW9uVXNlcjpzZXRTZWxlY3Rpb24pKHBvcyxwb3MpfWZ1bmN0aW9uIGNs
			aXBMaW5lKG4pe3JldHVybiBNYXRoLm1heCgwLE1hdGgubWluKG4sZG9jLnNpemUtMSkpfWZ1bmN0
			aW9uIGNsaXBQb3MocG9zKXtpZihwb3MubGluZTwwKXJldHVybntsaW5lOjAsY2g6MH07aWYocG9z
			LmxpbmU+PWRvYy5zaXplKXJldHVybntsaW5lOmRvYy5zaXplLTEsY2g6Z2V0TGluZShkb2Muc2l6
			ZS0xKS50ZXh0Lmxlbmd0aH07dmFyIGNoPXBvcy5jaCxsaW5lbGVuPWdldExpbmUocG9zLmxpbmUp
			LnRleHQubGVuZ3RoO2lmKGNoPT1udWxsfHxjaD5saW5lbGVuKXJldHVybntsaW5lOnBvcy5saW5l
			LCBjaDpsaW5lbGVufTtlbHNlIGlmKGNoPDApcmV0dXJue2xpbmU6cG9zLmxpbmUsY2g6MH07ZWxz
			ZSByZXR1cm4gcG9zfWZ1bmN0aW9uIGZpbmRQb3NIKGRpcix1bml0KXt2YXIgZW5kPXNlbC5pbnZl
			cnRlZD9zZWwuZnJvbTpzZWwudG8sbGluZT1lbmQubGluZSxjaD1lbmQuY2g7dmFyIGxpbmVPYmo9
			Z2V0TGluZShsaW5lKTtmdW5jdGlvbiBmaW5kTmV4dExpbmUoKXtmb3IodmFyIGw9bGluZStkaXIs
			ZT1kaXI8MD8tMTpkb2Muc2l6ZTtsIT1lO2wrPWRpcil7dmFyIGxvPWdldExpbmUobCk7aWYoIWxv
			LmhpZGRlbil7bGluZT1sO2xpbmVPYmo9bG87cmV0dXJuIHRydWV9fX1mdW5jdGlvbiBtb3ZlT25j
			ZShib3VuZFRvTGluZSl7aWYoY2g9PShkaXI8MD8wOmxpbmVPYmoudGV4dC5sZW5ndGgpKWlmKCFi
			b3VuZFRvTGluZSYmZmluZE5leHRMaW5lKCkpY2g9ZGlyPDA/bGluZU9iai50ZXh0Lmxlbmd0aDow
			O2Vsc2UgcmV0dXJuIGZhbHNlO2Vsc2UgY2grPWRpcjtyZXR1cm4gdHJ1ZX1pZih1bml0PT0gImNo
			YXIiKW1vdmVPbmNlKCk7ZWxzZSBpZih1bml0PT0iY29sdW1uIiltb3ZlT25jZSh0cnVlKTtlbHNl
			IGlmKHVuaXQ9PSJ3b3JkIil7dmFyIHNhd1dvcmQ9ZmFsc2U7Zm9yKDs7KXtpZihkaXI8MClpZigh
			bW92ZU9uY2UoKSlicmVhaztpZihpc1dvcmRDaGFyKGxpbmVPYmoudGV4dC5jaGFyQXQoY2gpKSlz
			YXdXb3JkPXRydWU7ZWxzZSBpZihzYXdXb3JkKXtpZihkaXI8MCl7ZGlyPTE7bW92ZU9uY2UoKX1i
			cmVha31pZihkaXI+MClpZighbW92ZU9uY2UoKSlicmVha319cmV0dXJue2xpbmU6bGluZSxjaDpj
			aH19ZnVuY3Rpb24gbW92ZUgoZGlyLHVuaXQpe3ZhciBwb3M9ZGlyPDA/c2VsLmZyb206c2VsLnRv
			O2lmKHNoaWZ0U2VsZWN0aW5nfHxwb3NFcShzZWwuZnJvbSxzZWwudG8pKXBvcz1maW5kUG9zSChk
			aXIsdW5pdCk7c2V0Q3Vyc29yKHBvcy5saW5lLHBvcy5jaCx0cnVlKX1mdW5jdGlvbiBkZWxldGVI
			KGRpcix1bml0KXtpZighcG9zRXEoc2VsLmZyb20sc2VsLnRvKSlyZXBsYWNlUmFuZ2UoIiIsIHNl
			bC5mcm9tLHNlbC50byk7ZWxzZSBpZihkaXI8MClyZXBsYWNlUmFuZ2UoIiIsZmluZFBvc0goZGly
			LHVuaXQpLHNlbC50byk7ZWxzZSByZXBsYWNlUmFuZ2UoIiIsc2VsLmZyb20sZmluZFBvc0goZGly
			LHVuaXQpKTt1c2VyU2VsQ2hhbmdlPXRydWV9dmFyIGdvYWxDb2x1bW49bnVsbDtmdW5jdGlvbiBt
			b3ZlVihkaXIsdW5pdCl7dmFyIGRpc3Q9MCxwb3M9bG9jYWxDb29yZHMoc2VsLmludmVydGVkP3Nl
			bC5mcm9tOnNlbC50byx0cnVlKTtpZihnb2FsQ29sdW1uIT1udWxsKXBvcy54PWdvYWxDb2x1bW47
			aWYodW5pdD09InBhZ2UiKWRpc3Q9TWF0aC5taW4oc2Nyb2xsZXIuY2xpZW50SGVpZ2h0LHdpbmRv
			dy5pbm5lckhlaWdodHx8ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCk7ZWxz
			ZSBpZih1bml0PT0ibGluZSIpZGlzdD10ZXh0SGVpZ2h0KCk7dmFyIHRhcmdldD1jb29yZHNDaGFy
			KHBvcy54LHBvcy55K2Rpc3QqZGlyKzIpO3NldEN1cnNvcih0YXJnZXQubGluZSwgdGFyZ2V0LmNo
			LHRydWUpO2dvYWxDb2x1bW49cG9zLnh9ZnVuY3Rpb24gc2VsZWN0V29yZEF0KHBvcyl7dmFyIGxp
			bmU9Z2V0TGluZShwb3MubGluZSkudGV4dDt2YXIgc3RhcnQ9cG9zLmNoLGVuZD1wb3MuY2g7d2hp
			bGUoc3RhcnQ+MCYmaXNXb3JkQ2hhcihsaW5lLmNoYXJBdChzdGFydC0xKSkpLS1zdGFydDt3aGls
			ZShlbmQ8bGluZS5sZW5ndGgmJmlzV29yZENoYXIobGluZS5jaGFyQXQoZW5kKSkpKytlbmQ7c2V0
			U2VsZWN0aW9uVXNlcih7bGluZTpwb3MubGluZSxjaDpzdGFydH0se2xpbmU6cG9zLmxpbmUsY2g6
			ZW5kfSl9ZnVuY3Rpb24gc2VsZWN0TGluZShsaW5lKXtzZXRTZWxlY3Rpb25Vc2VyKHtsaW5lOmxp
			bmUsY2g6MH0sY2xpcFBvcyh7bGluZTpsaW5lKzEsY2g6MH0pKX1mdW5jdGlvbiBpbmRlbnRTZWxl
			Y3RlZChtb2RlKXtpZihwb3NFcShzZWwuZnJvbSxzZWwudG8pKXJldHVybiBpbmRlbnRMaW5lKHNl
			bC5mcm9tLmxpbmUsbW9kZSk7dmFyIGU9c2VsLnRvLmxpbmUtIChzZWwudG8uY2g/MDoxKTtmb3Io
			dmFyIGk9c2VsLmZyb20ubGluZTtpPD1lOysraSlpbmRlbnRMaW5lKGksbW9kZSl9ZnVuY3Rpb24g
			aW5kZW50TGluZShuLGhvdyl7aWYoIWhvdylob3c9ImFkZCI7aWYoaG93PT0ic21hcnQiKWlmKCFt
			b2RlLmluZGVudClob3c9InByZXYiO2Vsc2UgdmFyIHN0YXRlPWdldFN0YXRlQmVmb3JlKG4pO3Zh
			ciBsaW5lPWdldExpbmUobiksY3VyU3BhY2U9bGluZS5pbmRlbnRhdGlvbihvcHRpb25zLnRhYlNp
			emUpLGN1clNwYWNlU3RyaW5nPWxpbmUudGV4dC5tYXRjaCgvXlxzKi8pWzBdLGluZGVudGF0aW9u
			O2lmKGhvdz09InByZXYiKWlmKG4paW5kZW50YXRpb249Z2V0TGluZShuLTEpLmluZGVudGF0aW9u
			KG9wdGlvbnMudGFiU2l6ZSk7ZWxzZSBpbmRlbnRhdGlvbj0wO2Vsc2UgaWYoaG93PT0ic21hcnQi
			KWluZGVudGF0aW9uPW1vZGUuaW5kZW50KHN0YXRlLGxpbmUudGV4dC5zbGljZShjdXJTcGFjZVN0
			cmluZy5sZW5ndGgpLGxpbmUudGV4dCk7ZWxzZSBpZihob3c9PSAiYWRkIilpbmRlbnRhdGlvbj1j
			dXJTcGFjZStvcHRpb25zLmluZGVudFVuaXQ7ZWxzZSBpZihob3c9PSJzdWJ0cmFjdCIpaW5kZW50
			YXRpb249Y3VyU3BhY2Utb3B0aW9ucy5pbmRlbnRVbml0O2luZGVudGF0aW9uPU1hdGgubWF4KDAs
			aW5kZW50YXRpb24pO3ZhciBkaWZmPWluZGVudGF0aW9uLWN1clNwYWNlO2lmKCFkaWZmKXtpZihz
			ZWwuZnJvbS5saW5lIT1uJiZzZWwudG8ubGluZSE9bilyZXR1cm47dmFyIGluZGVudFN0cmluZz1j
			dXJTcGFjZVN0cmluZ31lbHNle3ZhciBpbmRlbnRTdHJpbmc9IiIscG9zPTA7aWYob3B0aW9ucy5p
			bmRlbnRXaXRoVGFicylmb3IodmFyIGk9TWF0aC5mbG9vcihpbmRlbnRhdGlvbi9vcHRpb25zLnRh
			YlNpemUpO2k7LS1pKXtwb3MrPW9wdGlvbnMudGFiU2l6ZTtpbmRlbnRTdHJpbmcrPSJcdCJ9d2hp
			bGUocG9zPGluZGVudGF0aW9uKXsrK3BvcztpbmRlbnRTdHJpbmcrPSIgIn19cmVwbGFjZVJhbmdl
			KGluZGVudFN0cmluZyx7bGluZTpuLGNoOjB9LCB7bGluZTpuLGNoOmN1clNwYWNlU3RyaW5nLmxl
			bmd0aH0pfWZ1bmN0aW9uIGxvYWRNb2RlKCl7bW9kZT1Db2RlTWlycm9yLmdldE1vZGUob3B0aW9u
			cyxvcHRpb25zLm1vZGUpO2RvYy5pdGVyKDAsZG9jLnNpemUsZnVuY3Rpb24obGluZSl7bGluZS5z
			dGF0ZUFmdGVyPW51bGx9KTt3b3JrPVswXTtzdGFydFdvcmtlcigpfWZ1bmN0aW9uIGd1dHRlckNo
			YW5nZWQoKXt2YXIgdmlzaWJsZT1vcHRpb25zLmd1dHRlcnx8b3B0aW9ucy5saW5lTnVtYmVycztn
			dXR0ZXIuc3R5bGUuZGlzcGxheT12aXNpYmxlPyIiOiJub25lIjtpZih2aXNpYmxlKWd1dHRlckRp
			cnR5PXRydWU7ZWxzZSBsaW5lRGl2LnBhcmVudE5vZGUuc3R5bGUubWFyZ2luTGVmdD0wfWZ1bmN0
			aW9uIHdyYXBwaW5nQ2hhbmdlZChmcm9tLHRvKXtpZihvcHRpb25zLmxpbmVXcmFwcGluZyl7d3Jh
			cHBlci5jbGFzc05hbWUrPSIgQ29kZU1pcnJvci13cmFwIjt2YXIgcGVyTGluZT1zY3JvbGxlci5j
			bGllbnRXaWR0aC9jaGFyV2lkdGgoKS0gMztkb2MuaXRlcigwLGRvYy5zaXplLGZ1bmN0aW9uKGxp
			bmUpe2lmKGxpbmUuaGlkZGVuKXJldHVybjt2YXIgZ3Vlc3M9TWF0aC5jZWlsKGxpbmUudGV4dC5s
			ZW5ndGgvcGVyTGluZSl8fDE7aWYoZ3Vlc3MhPTEpdXBkYXRlTGluZUhlaWdodChsaW5lLGd1ZXNz
			KX0pO2xpbmVTcGFjZS5zdHlsZS53aWR0aD1jb2RlLnN0eWxlLndpZHRoPSIifWVsc2V7d3JhcHBl
			ci5jbGFzc05hbWU9d3JhcHBlci5jbGFzc05hbWUucmVwbGFjZSgiIENvZGVNaXJyb3Itd3JhcCIs
			IiIpO21heFdpZHRoPW51bGw7bWF4TGluZT0iIjtkb2MuaXRlcigwLGRvYy5zaXplLGZ1bmN0aW9u
			KGxpbmUpe2lmKGxpbmUuaGVpZ2h0IT0xJiYhbGluZS5oaWRkZW4pdXBkYXRlTGluZUhlaWdodChs
			aW5lLDEpO2lmKGxpbmUudGV4dC5sZW5ndGg+bWF4TGluZS5sZW5ndGgpbWF4TGluZT1saW5lLnRl
			eHR9KX1jaGFuZ2VzLnB1c2goe2Zyb206MCx0bzpkb2Muc2l6ZX0pfWZ1bmN0aW9uIG1ha2VUYWIo
			Y29sKXt2YXIgdz1vcHRpb25zLnRhYlNpemUtIGNvbCVvcHRpb25zLnRhYlNpemU7Zm9yKHZhciBz
			dHI9JzxzcGFuIGNsYXNzPSJjbS10YWIiPicsaT0wO2k8dzsrK2kpc3RyKz0iICI7cmV0dXJue2h0
			bWw6c3RyKyI8L3NwYW4+Iix3aWR0aDp3fX1mdW5jdGlvbiB0aGVtZUNoYW5nZWQoKXtzY3JvbGxl
			ci5jbGFzc05hbWU9c2Nyb2xsZXIuY2xhc3NOYW1lLnJlcGxhY2UoL1xzKmNtLXMtXHcrL2csIiIp
			K29wdGlvbnMudGhlbWUucmVwbGFjZSgvKF58XHMpXHMqL2csIiBjbS1zLSIpfWZ1bmN0aW9uIFRl
			eHRNYXJrZXIoKXt0aGlzLnNldD1bXX1UZXh0TWFya2VyLnByb3RvdHlwZS5jbGVhcj1vcGVyYXRp
			b24oZnVuY3Rpb24oKXt2YXIgbWluPUluZmluaXR5LG1heD0tSW5maW5pdHk7Zm9yKHZhciBpPTAs
			ZT10aGlzLnNldC5sZW5ndGg7aTxlOysraSl7dmFyIGxpbmU9dGhpcy5zZXRbaV0sbWs9bGluZS5t
			YXJrZWQ7aWYoIW1rfHwhbGluZS5wYXJlbnQpY29udGludWU7dmFyIGxpbmVOPWxpbmVObyhsaW5l
			KTttaW49TWF0aC5taW4obWluLCBsaW5lTik7bWF4PU1hdGgubWF4KG1heCxsaW5lTik7Zm9yKHZh
			ciBqPTA7ajxtay5sZW5ndGg7KytqKWlmKG1rW2pdLnNldD09dGhpcy5zZXQpbWsuc3BsaWNlKGot
			LSwxKX1pZihtaW4hPUluZmluaXR5KWNoYW5nZXMucHVzaCh7ZnJvbTptaW4sdG86bWF4KzF9KX0p
			O1RleHRNYXJrZXIucHJvdG90eXBlLmZpbmQ9ZnVuY3Rpb24oKXt2YXIgZnJvbSx0bztmb3IodmFy
			IGk9MCxlPXRoaXMuc2V0Lmxlbmd0aDtpPGU7KytpKXt2YXIgbGluZT10aGlzLnNldFtpXSxtaz1s
			aW5lLm1hcmtlZDtmb3IodmFyIGo9MDtqPG1rLmxlbmd0aDsrK2ope3ZhciBtYXJrPW1rW2pdO2lm
			KG1hcmsuc2V0PT10aGlzLnNldClpZihtYXJrLmZyb20hPW51bGx8fG1hcmsudG8hPW51bGwpe3Zh
			ciBmb3VuZD1saW5lTm8obGluZSk7aWYoZm91bmQhPW51bGwpe2lmKG1hcmsuZnJvbSE9bnVsbClm
			cm9tPXtsaW5lOmZvdW5kLGNoOm1hcmsuZnJvbX07aWYobWFyay50byE9bnVsbCl0bz17bGluZTpm
			b3VuZCxjaDptYXJrLnRvfX19fX1yZXR1cm57ZnJvbTpmcm9tLCB0bzp0b319O2Z1bmN0aW9uIG1h
			cmtUZXh0KGZyb20sdG8sY2xhc3NOYW1lKXtmcm9tPWNsaXBQb3MoZnJvbSk7dG89Y2xpcFBvcyh0
			byk7dmFyIHRtPW5ldyBUZXh0TWFya2VyO2Z1bmN0aW9uIGFkZChsaW5lLGZyb20sdG8sY2xhc3NO
			YW1lKXtnZXRMaW5lKGxpbmUpLmFkZE1hcmsobmV3IE1hcmtlZFRleHQoZnJvbSx0byxjbGFzc05h
			bWUsdG0uc2V0KSl9aWYoZnJvbS5saW5lPT10by5saW5lKWFkZChmcm9tLmxpbmUsZnJvbS5jaCx0
			by5jaCxjbGFzc05hbWUpO2Vsc2V7YWRkKGZyb20ubGluZSxmcm9tLmNoLG51bGwsY2xhc3NOYW1l
			KTtmb3IodmFyIGk9ZnJvbS5saW5lKzEsZT10by5saW5lO2k8ZTsrK2kpYWRkKGksbnVsbCxudWxs
			LGNsYXNzTmFtZSk7YWRkKHRvLmxpbmUsbnVsbCx0by5jaCxjbGFzc05hbWUpfWNoYW5nZXMucHVz
			aCh7ZnJvbTpmcm9tLmxpbmUsdG86dG8ubGluZSsxfSk7cmV0dXJuIHRtfWZ1bmN0aW9uIHNldEJv
			b2ttYXJrKHBvcyl7cG9zPWNsaXBQb3MocG9zKTsgdmFyIGJtPW5ldyBCb29rbWFyayhwb3MuY2gp
			O2dldExpbmUocG9zLmxpbmUpLmFkZE1hcmsoYm0pO3JldHVybiBibX1mdW5jdGlvbiBhZGRHdXR0
			ZXJNYXJrZXIobGluZSx0ZXh0LGNsYXNzTmFtZSl7aWYodHlwZW9mIGxpbmU9PSJudW1iZXIiKWxp
			bmU9Z2V0TGluZShjbGlwTGluZShsaW5lKSk7bGluZS5ndXR0ZXJNYXJrZXI9e3RleHQ6dGV4dCxz
			dHlsZTpjbGFzc05hbWV9O2d1dHRlckRpcnR5PXRydWU7cmV0dXJuIGxpbmV9ZnVuY3Rpb24gcmVt
			b3ZlR3V0dGVyTWFya2VyKGxpbmUpe2lmKHR5cGVvZiBsaW5lPT0ibnVtYmVyIilsaW5lPWdldExp
			bmUoY2xpcExpbmUobGluZSkpO2xpbmUuZ3V0dGVyTWFya2VyPW51bGw7Z3V0dGVyRGlydHk9dHJ1
			ZX1mdW5jdGlvbiBjaGFuZ2VMaW5lKGhhbmRsZSxvcCl7dmFyIG5vPWhhbmRsZSxsaW5lPWhhbmRs
			ZTtpZih0eXBlb2YgaGFuZGxlPT0ibnVtYmVyIilsaW5lPWdldExpbmUoY2xpcExpbmUoaGFuZGxl
			KSk7ZWxzZSBubz1saW5lTm8oaGFuZGxlKTsgaWYobm89PW51bGwpcmV0dXJuIG51bGw7aWYob3Ao
			bGluZSxubykpY2hhbmdlcy5wdXNoKHtmcm9tOm5vLHRvOm5vKzF9KTtlbHNlIHJldHVybiBudWxs
			O3JldHVybiBsaW5lfWZ1bmN0aW9uIHNldExpbmVDbGFzcyhoYW5kbGUsY2xhc3NOYW1lKXtyZXR1
			cm4gY2hhbmdlTGluZShoYW5kbGUsZnVuY3Rpb24obGluZSl7aWYobGluZS5jbGFzc05hbWUhPWNs
			YXNzTmFtZSl7bGluZS5jbGFzc05hbWU9Y2xhc3NOYW1lO3JldHVybiB0cnVlfX0pfWZ1bmN0aW9u
			IHNldExpbmVIaWRkZW4oaGFuZGxlLGhpZGRlbil7cmV0dXJuIGNoYW5nZUxpbmUoaGFuZGxlLGZ1
			bmN0aW9uKGxpbmUsbm8pe2lmKGxpbmUuaGlkZGVuIT1oaWRkZW4pe2xpbmUuaGlkZGVuPWhpZGRl
			bjt1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsaGlkZGVuPzA6MSk7dmFyIGZsaW5lPXNlbC5mcm9tLmxp
			bmUsdGxpbmU9c2VsLnRvLmxpbmU7aWYoaGlkZGVuJiYoZmxpbmU9PW5vfHx0bGluZT09bm8pKXt2
			YXIgZnJvbT1mbGluZT09IG5vP3NraXBIaWRkZW4oe2xpbmU6ZmxpbmUsY2g6MH0sZmxpbmUsMCk6
			c2VsLmZyb207dmFyIHRvPXRsaW5lPT1ubz9za2lwSGlkZGVuKHtsaW5lOnRsaW5lLGNoOjB9LHRs
			aW5lLDApOnNlbC50bztzZXRTZWxlY3Rpb24oZnJvbSx0byl9cmV0dXJuIGd1dHRlckRpcnR5PXRy
			dWV9fSl9ZnVuY3Rpb24gbGluZUluZm8obGluZSl7aWYodHlwZW9mIGxpbmU9PSJudW1iZXIiKXtp
			ZighaXNMaW5lKGxpbmUpKXJldHVybiBudWxsO3ZhciBuPWxpbmU7bGluZT1nZXRMaW5lKGxpbmUp
			O2lmKCFsaW5lKXJldHVybiBudWxsfWVsc2V7dmFyIG49bGluZU5vKGxpbmUpO2lmKG49PW51bGwp
			cmV0dXJuIG51bGx9dmFyIG1hcmtlcj1saW5lLmd1dHRlck1hcmtlcjtyZXR1cm57bGluZTpuLGhh
			bmRsZTpsaW5lLHRleHQ6bGluZS50ZXh0LG1hcmtlclRleHQ6bWFya2VyJiZtYXJrZXIudGV4dCxt
			YXJrZXJDbGFzczptYXJrZXImJm1hcmtlci5zdHlsZSxsaW5lQ2xhc3M6bGluZS5jbGFzc05hbWV9
			fWZ1bmN0aW9uIHN0cmluZ1dpZHRoKHN0cil7bWVhc3VyZS5pbm5lckhUTUw9ICI8cHJlPjxzcGFu
			Png8L3NwYW4+PC9wcmU+IjttZWFzdXJlLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5maXJzdENoaWxk
			Lm5vZGVWYWx1ZT1zdHI7cmV0dXJuIG1lYXN1cmUuZmlyc3RDaGlsZC5maXJzdENoaWxkLm9mZnNl
			dFdpZHRofHwxMH1mdW5jdGlvbiBjaGFyRnJvbVgobGluZSx4KXtpZih4PD0wKXJldHVybiAwO3Zh
			ciBsaW5lT2JqPWdldExpbmUobGluZSksdGV4dD1saW5lT2JqLnRleHQ7ZnVuY3Rpb24gZ2V0WChs
			ZW4pe21lYXN1cmUuaW5uZXJIVE1MPSI8cHJlPjxzcGFuPiIrbGluZU9iai5nZXRIVE1MKG1ha2VU
			YWIsbGVuKSsiPC9zcGFuPjwvcHJlPiI7cmV0dXJuIG1lYXN1cmUuZmlyc3RDaGlsZC5maXJzdENo
			aWxkLm9mZnNldFdpZHRofXZhciBmcm9tPTAsZnJvbVg9MCx0bz10ZXh0Lmxlbmd0aCx0b1g7dmFy
			IGVzdGltYXRlZD1NYXRoLm1pbih0byxNYXRoLmNlaWwoeC9jaGFyV2lkdGgoKSkpO2Zvcig7Oyl7
			dmFyIGVzdFg9Z2V0WChlc3RpbWF0ZWQpO2lmKGVzdFg8PSB4JiZlc3RpbWF0ZWQ8dG8pZXN0aW1h
			dGVkPU1hdGgubWluKHRvLE1hdGguY2VpbChlc3RpbWF0ZWQqMS4yKSk7ZWxzZXt0b1g9ZXN0WDt0
			bz1lc3RpbWF0ZWQ7YnJlYWt9fWlmKHg+dG9YKXJldHVybiB0bztlc3RpbWF0ZWQ9TWF0aC5mbG9v
			cih0byowLjgpO2VzdFg9Z2V0WChlc3RpbWF0ZWQpO2lmKGVzdFg8eCl7ZnJvbT1lc3RpbWF0ZWQ7
			ZnJvbVg9ZXN0WH1mb3IoOzspe2lmKHRvLWZyb208PTEpcmV0dXJuIHRvWC14PngtZnJvbVg/ZnJv
			bTp0bzt2YXIgbWlkZGxlPU1hdGguY2VpbCgoZnJvbSt0bykvMiksbWlkZGxlWD1nZXRYKG1pZGRs
			ZSk7aWYobWlkZGxlWD54KXt0bz1taWRkbGU7dG9YPW1pZGRsZVh9ZWxzZXtmcm9tPW1pZGRsZTtm
			cm9tWD1taWRkbGVYfX19dmFyIHRlbXBJZD1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTY3Nzcy
			MTUpLnRvU3RyaW5nKDE2KTtmdW5jdGlvbiBtZWFzdXJlTGluZShsaW5lLGNoKXtpZihjaD09MCly
			ZXR1cm57dG9wOjAsbGVmdDowfTt2YXIgZXh0cmE9ICIiO2lmKG9wdGlvbnMubGluZVdyYXBwaW5n
			KXt2YXIgZW5kPWxpbmUudGV4dC5pbmRleE9mKCIgIixjaCsyKTtleHRyYT1odG1sRXNjYXBlKGxp
			bmUudGV4dC5zbGljZShjaCsxLGVuZDwwP2xpbmUudGV4dC5sZW5ndGg6ZW5kKyhpZT81OjApKSl9
			bWVhc3VyZS5pbm5lckhUTUw9IjxwcmU+IitsaW5lLmdldEhUTUwobWFrZVRhYixjaCkrJzxzcGFu
			IGlkPSJDb2RlTWlycm9yLXRlbXAtJyt0ZW1wSWQrJyI+JytodG1sRXNjYXBlKGxpbmUudGV4dC5j
			aGFyQXQoY2gpfHwiICIpKyI8L3NwYW4+IitleHRyYSsiPC9wcmU+Ijt2YXIgZWx0PWRvY3VtZW50
			LmdldEVsZW1lbnRCeUlkKCJDb2RlTWlycm9yLXRlbXAtIit0ZW1wSWQpO3ZhciB0b3A9ZWx0Lm9m
			ZnNldFRvcCxsZWZ0PWVsdC5vZmZzZXRMZWZ0O2lmKGllJiZ0b3A9PTAmJmxlZnQ9PTApe3ZhciBi
			YWNrdXA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpO2JhY2t1cC5pbm5lckhUTUw9Ingi
			O2VsdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiYWNrdXAsIGVsdC5uZXh0U2libGluZyk7dG9w
			PWJhY2t1cC5vZmZzZXRUb3B9cmV0dXJue3RvcDp0b3AsbGVmdDpsZWZ0fX1mdW5jdGlvbiBsb2Nh
			bENvb3Jkcyhwb3MsaW5MaW5lV3JhcCl7dmFyIHgsbGg9dGV4dEhlaWdodCgpLHk9bGgqKGhlaWdo
			dEF0TGluZShkb2MscG9zLmxpbmUpLShpbkxpbmVXcmFwP2Rpc3BsYXlPZmZzZXQ6MCkpO2lmKHBv
			cy5jaD09MCl4PTA7ZWxzZXt2YXIgc3A9bWVhc3VyZUxpbmUoZ2V0TGluZShwb3MubGluZSkscG9z
			LmNoKTt4PXNwLmxlZnQ7aWYob3B0aW9ucy5saW5lV3JhcHBpbmcpeSs9TWF0aC5tYXgoMCxzcC50
			b3ApfXJldHVybnt4OngseTp5LHlCb3Q6eStsaH19ZnVuY3Rpb24gY29vcmRzQ2hhcih4LHkpe2lm
			KHk8MCl5PTA7dmFyIHRoPXRleHRIZWlnaHQoKSxjdz1jaGFyV2lkdGgoKSxoZWlnaHRQb3M9ZGlz
			cGxheU9mZnNldCtNYXRoLmZsb29yKHkvdGgpO3ZhciBsaW5lTm89bGluZUF0SGVpZ2h0KGRvYyxo
			ZWlnaHRQb3MpO2lmKGxpbmVObz49ZG9jLnNpemUpcmV0dXJue2xpbmU6ZG9jLnNpemUtIDEsY2g6
			Z2V0TGluZShkb2Muc2l6ZS0xKS50ZXh0Lmxlbmd0aH07dmFyIGxpbmVPYmo9Z2V0TGluZShsaW5l
			Tm8pLHRleHQ9bGluZU9iai50ZXh0O3ZhciB0dz1vcHRpb25zLmxpbmVXcmFwcGluZyxpbm5lck9m
			Zj10dz9oZWlnaHRQb3MtaGVpZ2h0QXRMaW5lKGRvYyxsaW5lTm8pOjA7aWYoeDw9MCYmaW5uZXJP
			ZmY9PTApcmV0dXJue2xpbmU6bGluZU5vLGNoOjB9O2Z1bmN0aW9uIGdldFgobGVuKXt2YXIgc3A9
			bWVhc3VyZUxpbmUobGluZU9iaixsZW4pO2lmKHR3KXt2YXIgb2ZmPU1hdGgucm91bmQoc3AudG9w
			L3RoKTtyZXR1cm4gTWF0aC5tYXgoMCxzcC5sZWZ0KyhvZmYtaW5uZXJPZmYpKnNjcm9sbGVyLmNs
			aWVudFdpZHRoKX1yZXR1cm4gc3AubGVmdH12YXIgZnJvbT0wLGZyb21YPTAsdG89dGV4dC5sZW5n
			dGgsdG9YO3ZhciBlc3RpbWF0ZWQ9TWF0aC5taW4odG8sTWF0aC5jZWlsKCh4K2lubmVyT2ZmKnNj
			cm9sbGVyLmNsaWVudFdpZHRoKjAuOSkvY3cpKTtmb3IoOzspe3ZhciBlc3RYPSBnZXRYKGVzdGlt
			YXRlZCk7aWYoZXN0WDw9eCYmZXN0aW1hdGVkPHRvKWVzdGltYXRlZD1NYXRoLm1pbih0byxNYXRo
			LmNlaWwoZXN0aW1hdGVkKjEuMikpO2Vsc2V7dG9YPWVzdFg7dG89ZXN0aW1hdGVkO2JyZWFrfX1p
			Zih4PnRvWClyZXR1cm57bGluZTpsaW5lTm8sY2g6dG99O2VzdGltYXRlZD1NYXRoLmZsb29yKHRv
			KjAuOCk7ZXN0WD1nZXRYKGVzdGltYXRlZCk7aWYoZXN0WDx4KXtmcm9tPWVzdGltYXRlZDtmcm9t
			WD1lc3RYfWZvcig7Oyl7aWYodG8tZnJvbTw9MSlyZXR1cm57bGluZTpsaW5lTm8sY2g6dG9YLXg+
			eC1mcm9tWD9mcm9tOnRvfTt2YXIgbWlkZGxlPU1hdGguY2VpbCgoZnJvbSt0bykvMiksbWlkZGxl
			WD1nZXRYKG1pZGRsZSk7aWYobWlkZGxlWD54KXt0bz1taWRkbGU7dG9YPW1pZGRsZVh9ZWxzZXtm
			cm9tPW1pZGRsZTtmcm9tWD1taWRkbGVYfX19ZnVuY3Rpb24gcGFnZUNvb3Jkcyhwb3Mpe3ZhciBs
			b2NhbD1sb2NhbENvb3Jkcyhwb3MsdHJ1ZSksb2ZmPWVsdE9mZnNldChsaW5lU3BhY2UpOyByZXR1
			cm57eDpvZmYubGVmdCtsb2NhbC54LHk6b2ZmLnRvcCtsb2NhbC55LHlCb3Q6b2ZmLnRvcCtsb2Nh
			bC55Qm90fX12YXIgY2FjaGVkSGVpZ2h0LGNhY2hlZEhlaWdodEZvcixtZWFzdXJlVGV4dDtmdW5j
			dGlvbiB0ZXh0SGVpZ2h0KCl7aWYobWVhc3VyZVRleHQ9PW51bGwpe21lYXN1cmVUZXh0PSI8cHJl
			PiI7Zm9yKHZhciBpPTA7aTw0OTsrK2kpbWVhc3VyZVRleHQrPSJ4PGJyLz4iO21lYXN1cmVUZXh0
			Kz0ieDwvcHJlPiJ9dmFyIG9mZnNldEhlaWdodD1saW5lRGl2LmNsaWVudEhlaWdodDtpZihvZmZz
			ZXRIZWlnaHQ9PWNhY2hlZEhlaWdodEZvcilyZXR1cm4gY2FjaGVkSGVpZ2h0O2NhY2hlZEhlaWdo
			dEZvcj1vZmZzZXRIZWlnaHQ7bWVhc3VyZS5pbm5lckhUTUw9bWVhc3VyZVRleHQ7Y2FjaGVkSGVp
			Z2h0PW1lYXN1cmUuZmlyc3RDaGlsZC5vZmZzZXRIZWlnaHQvNTB8fDE7bWVhc3VyZS5pbm5lckhU
			TUw9IiI7cmV0dXJuIGNhY2hlZEhlaWdodH12YXIgY2FjaGVkV2lkdGgsIGNhY2hlZFdpZHRoRm9y
			PTA7ZnVuY3Rpb24gY2hhcldpZHRoKCl7aWYoc2Nyb2xsZXIuY2xpZW50V2lkdGg9PWNhY2hlZFdp
			ZHRoRm9yKXJldHVybiBjYWNoZWRXaWR0aDtjYWNoZWRXaWR0aEZvcj1zY3JvbGxlci5jbGllbnRX
			aWR0aDtyZXR1cm4gY2FjaGVkV2lkdGg9c3RyaW5nV2lkdGgoIngiKX1mdW5jdGlvbiBwYWRkaW5n
			VG9wKCl7cmV0dXJuIGxpbmVTcGFjZS5vZmZzZXRUb3B9ZnVuY3Rpb24gcGFkZGluZ0xlZnQoKXty
			ZXR1cm4gbGluZVNwYWNlLm9mZnNldExlZnR9ZnVuY3Rpb24gcG9zRnJvbU1vdXNlKGUsbGliZXJh
			bCl7dmFyIG9mZlc9ZWx0T2Zmc2V0KHNjcm9sbGVyLHRydWUpLHgseTt0cnl7eD1lLmNsaWVudFg7
			eT1lLmNsaWVudFl9Y2F0Y2goZSl7cmV0dXJuIG51bGx9aWYoIWxpYmVyYWwmJih4LW9mZlcubGVm
			dD5zY3JvbGxlci5jbGllbnRXaWR0aHx8eS1vZmZXLnRvcD5zY3JvbGxlci5jbGllbnRIZWlnaHQp
			KXJldHVybiBudWxsO3ZhciBvZmZMPWVsdE9mZnNldChsaW5lU3BhY2UsIHRydWUpO3JldHVybiBj
			b29yZHNDaGFyKHgtb2ZmTC5sZWZ0LHktb2ZmTC50b3ApfWZ1bmN0aW9uIG9uQ29udGV4dE1lbnUo
			ZSl7dmFyIHBvcz1wb3NGcm9tTW91c2UoZSksc2Nyb2xsUG9zPXNjcm9sbGVyLnNjcm9sbFRvcDtp
			ZighcG9zfHx3aW5kb3cub3BlcmEpcmV0dXJuO2lmKHBvc0VxKHNlbC5mcm9tLHNlbC50byl8fHBv
			c0xlc3MocG9zLHNlbC5mcm9tKXx8IXBvc0xlc3MocG9zLHNlbC50bykpb3BlcmF0aW9uKHNldEN1
			cnNvcikocG9zLmxpbmUscG9zLmNoKTt2YXIgb2xkQ1NTPWlucHV0LnN0eWxlLmNzc1RleHQ7aW5w
			dXREaXYuc3R5bGUucG9zaXRpb249ImFic29sdXRlIjtpbnB1dC5zdHlsZS5jc3NUZXh0PSJwb3Np
			dGlvbjogZml4ZWQ7IHdpZHRoOiAzMHB4OyBoZWlnaHQ6IDMwcHg7IHRvcDogIisoZS5jbGllbnRZ
			LTUpKyJweDsgbGVmdDogIisoZS5jbGllbnRYLTUpKyJweDsgei1pbmRleDogMTAwMDsgYmFja2dy
			b3VuZDogd2hpdGU7ICIrImJvcmRlci13aWR0aDogMDsgb3V0bGluZTogbm9uZTsgb3ZlcmZsb3c6
			IGhpZGRlbjsgb3BhY2l0eTogLjA1OyBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9NSk7IjsgbGVhdmVJ
			bnB1dEFsb25lPXRydWU7dmFyIHZhbD1pbnB1dC52YWx1ZT1nZXRTZWxlY3Rpb24oKTtmb2N1c0lu
			cHV0KCk7c2VsZWN0SW5wdXQoaW5wdXQpO2Z1bmN0aW9uIHJlaGlkZSgpe3ZhciBuZXdWYWw9c3Bs
			aXRMaW5lcyhpbnB1dC52YWx1ZSkuam9pbigiXG4iKTtpZihuZXdWYWwhPXZhbClvcGVyYXRpb24o
			cmVwbGFjZVNlbGVjdGlvbikobmV3VmFsLCJlbmQiKTtpbnB1dERpdi5zdHlsZS5wb3NpdGlvbj0i
			cmVsYXRpdmUiO2lucHV0LnN0eWxlLmNzc1RleHQ9b2xkQ1NTO2lmKGllX2x0OSlzY3JvbGxlci5z
			Y3JvbGxUb3A9c2Nyb2xsUG9zO2xlYXZlSW5wdXRBbG9uZT1mYWxzZTtyZXNldElucHV0KHRydWUp
			O3Nsb3dQb2xsKCl9aWYoZ2Vja28pe2Vfc3RvcChlKTt2YXIgbW91c2V1cD1jb25uZWN0KHdpbmRv
			dywibW91c2V1cCIsZnVuY3Rpb24oKXttb3VzZXVwKCk7c2V0VGltZW91dChyZWhpZGUsMjApfSx0
			cnVlKX1lbHNlIHNldFRpbWVvdXQocmVoaWRlLDUwKX1mdW5jdGlvbiByZXN0YXJ0QmxpbmsoKXtj
			bGVhckludGVydmFsKGJsaW5rZXIpOyB2YXIgb249dHJ1ZTtjdXJzb3Iuc3R5bGUudmlzaWJpbGl0
			eT0iIjtibGlua2VyPXNldEludGVydmFsKGZ1bmN0aW9uKCl7Y3Vyc29yLnN0eWxlLnZpc2liaWxp
			dHk9KG9uPSFvbik/IiI6ImhpZGRlbiJ9LDY1MCl9dmFyIG1hdGNoaW5nPXsiKCI6Iik+IiwiKSI6
			Iig8IiwiWyI6Il0+IiwiXSI6Ils8IiwieyI6In0+IiwifSI6Ins8In07ZnVuY3Rpb24gbWF0Y2hC
			cmFja2V0cyhhdXRvY2xlYXIpe3ZhciBoZWFkPXNlbC5pbnZlcnRlZD9zZWwuZnJvbTpzZWwudG8s
			bGluZT1nZXRMaW5lKGhlYWQubGluZSkscG9zPWhlYWQuY2gtMTt2YXIgbWF0Y2g9cG9zPj0wJiZt
			YXRjaGluZ1tsaW5lLnRleHQuY2hhckF0KHBvcyldfHxtYXRjaGluZ1tsaW5lLnRleHQuY2hhckF0
			KCsrcG9zKV07aWYoIW1hdGNoKXJldHVybjt2YXIgY2g9bWF0Y2guY2hhckF0KDApLGZvcndhcmQ9
			bWF0Y2guY2hhckF0KDEpPT0iPiIsZD1mb3J3YXJkPzE6LTEsc3Q9bGluZS5zdHlsZXM7Zm9yKHZh
			ciBvZmY9cG9zKzEsIGk9MCxlPXN0Lmxlbmd0aDtpPGU7aSs9MilpZigob2ZmLT1zdFtpXS5sZW5n
			dGgpPD0wKXt2YXIgc3R5bGU9c3RbaSsxXTticmVha312YXIgc3RhY2s9W2xpbmUudGV4dC5jaGFy
			QXQocG9zKV0scmU9L1soKXt9W1xdXS87ZnVuY3Rpb24gc2NhbihsaW5lLGZyb20sdG8pe2lmKCFs
			aW5lLnRleHQpcmV0dXJuO3ZhciBzdD1saW5lLnN0eWxlcyxwb3M9Zm9yd2FyZD8wOmxpbmUudGV4
			dC5sZW5ndGgtMSxjdXI7Zm9yKHZhciBpPWZvcndhcmQ/MDpzdC5sZW5ndGgtMixlPWZvcndhcmQ/
			c3QubGVuZ3RoOi0yO2khPWU7aSs9MipkKXt2YXIgdGV4dD1zdFtpXTtpZihzdFtpKzFdIT1udWxs
			JiZzdFtpKzFdIT1zdHlsZSl7cG9zKz1kKnRleHQubGVuZ3RoO2NvbnRpbnVlfWZvcih2YXIgaj1m
			b3J3YXJkPzA6dGV4dC5sZW5ndGgtMSx0ZT1mb3J3YXJkP3RleHQubGVuZ3RoOi0xO2ohPXRlO2or
			PWQscG9zKz1kKWlmKHBvcz49ZnJvbSYmcG9zPHRvJiZyZS50ZXN0KGN1cj10ZXh0LmNoYXJBdChq
			KSkpe3ZhciBtYXRjaD0gbWF0Y2hpbmdbY3VyXTtpZihtYXRjaC5jaGFyQXQoMSk9PSI+Ij09Zm9y
			d2FyZClzdGFjay5wdXNoKGN1cik7ZWxzZSBpZihzdGFjay5wb3AoKSE9bWF0Y2guY2hhckF0KDAp
			KXJldHVybntwb3M6cG9zLG1hdGNoOmZhbHNlfTtlbHNlIGlmKCFzdGFjay5sZW5ndGgpcmV0dXJu
			e3Bvczpwb3MsbWF0Y2g6dHJ1ZX19fX1mb3IodmFyIGk9aGVhZC5saW5lLGU9Zm9yd2FyZD9NYXRo
			Lm1pbihpKzEwMCxkb2Muc2l6ZSk6TWF0aC5tYXgoLTEsaS0xMDApO2khPWU7aSs9ZCl7dmFyIGxp
			bmU9Z2V0TGluZShpKSxmaXJzdD1pPT1oZWFkLmxpbmU7dmFyIGZvdW5kPXNjYW4obGluZSxmaXJz
			dCYmZm9yd2FyZD9wb3MrMTowLGZpcnN0JiYhZm9yd2FyZD9wb3M6bGluZS50ZXh0Lmxlbmd0aCk7
			aWYoZm91bmQpYnJlYWt9aWYoIWZvdW5kKWZvdW5kPXtwb3M6bnVsbCxtYXRjaDpmYWxzZX07dmFy
			IHN0eWxlPWZvdW5kLm1hdGNoPyJDb2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCI6IkNvZGVNaXJy
			b3Itbm9ubWF0Y2hpbmdicmFja2V0IjsgdmFyIG9uZT1tYXJrVGV4dCh7bGluZTpoZWFkLmxpbmUs
			Y2g6cG9zfSx7bGluZTpoZWFkLmxpbmUsY2g6cG9zKzF9LHN0eWxlKSx0d289Zm91bmQucG9zIT1u
			dWxsJiZtYXJrVGV4dCh7bGluZTppLGNoOmZvdW5kLnBvc30se2xpbmU6aSxjaDpmb3VuZC5wb3Mr
			MX0sc3R5bGUpO3ZhciBjbGVhcj1vcGVyYXRpb24oZnVuY3Rpb24oKXtvbmUuY2xlYXIoKTt0d28m
			JnR3by5jbGVhcigpfSk7aWYoYXV0b2NsZWFyKXNldFRpbWVvdXQoY2xlYXIsODAwKTtlbHNlIGJy
			YWNrZXRIaWdobGlnaHRlZD1jbGVhcn1mdW5jdGlvbiBmaW5kU3RhcnRMaW5lKG4pe3ZhciBtaW5p
			bmRlbnQsbWlubGluZTtmb3IodmFyIHNlYXJjaD1uLGxpbT1uLTQwO3NlYXJjaD5saW07LS1zZWFy
			Y2gpe2lmKHNlYXJjaD09MClyZXR1cm4gMDt2YXIgbGluZT1nZXRMaW5lKHNlYXJjaC0xKTtpZihs
			aW5lLnN0YXRlQWZ0ZXIpcmV0dXJuIHNlYXJjaDt2YXIgaW5kZW50ZWQ9bGluZS5pbmRlbnRhdGlv
			bihvcHRpb25zLnRhYlNpemUpOyBpZihtaW5saW5lPT1udWxsfHxtaW5pbmRlbnQ+aW5kZW50ZWQp
			e21pbmxpbmU9c2VhcmNoLTE7bWluaW5kZW50PWluZGVudGVkfX1yZXR1cm4gbWlubGluZX1mdW5j
			dGlvbiBnZXRTdGF0ZUJlZm9yZShuKXt2YXIgc3RhcnQ9ZmluZFN0YXJ0TGluZShuKSxzdGF0ZT1z
			dGFydCYmZ2V0TGluZShzdGFydC0xKS5zdGF0ZUFmdGVyO2lmKCFzdGF0ZSlzdGF0ZT1zdGFydFN0
			YXRlKG1vZGUpO2Vsc2Ugc3RhdGU9Y29weVN0YXRlKG1vZGUsc3RhdGUpO2RvYy5pdGVyKHN0YXJ0
			LG4sZnVuY3Rpb24obGluZSl7bGluZS5oaWdobGlnaHQobW9kZSxzdGF0ZSxvcHRpb25zLnRhYlNp
			emUpO2xpbmUuc3RhdGVBZnRlcj1jb3B5U3RhdGUobW9kZSxzdGF0ZSl9KTtpZihzdGFydDxuKWNo
			YW5nZXMucHVzaCh7ZnJvbTpzdGFydCx0bzpufSk7aWYobjxkb2Muc2l6ZSYmIWdldExpbmUobiku
			c3RhdGVBZnRlcil3b3JrLnB1c2gobik7cmV0dXJuIHN0YXRlfWZ1bmN0aW9uIGhpZ2hsaWdodExp
			bmVzKHN0YXJ0LCBlbmQpe3ZhciBzdGF0ZT1nZXRTdGF0ZUJlZm9yZShzdGFydCk7ZG9jLml0ZXIo
			c3RhcnQsZW5kLGZ1bmN0aW9uKGxpbmUpe2xpbmUuaGlnaGxpZ2h0KG1vZGUsc3RhdGUsb3B0aW9u
			cy50YWJTaXplKTtsaW5lLnN0YXRlQWZ0ZXI9Y29weVN0YXRlKG1vZGUsc3RhdGUpfSl9ZnVuY3Rp
			b24gaGlnaGxpZ2h0V29ya2VyKCl7dmFyIGVuZD0rbmV3IERhdGUrb3B0aW9ucy53b3JrVGltZTt2
			YXIgZm91bmRXb3JrPXdvcmsubGVuZ3RoO3doaWxlKHdvcmsubGVuZ3RoKXtpZighZ2V0TGluZShz
			aG93aW5nRnJvbSkuc3RhdGVBZnRlcil2YXIgdGFzaz1zaG93aW5nRnJvbTtlbHNlIHZhciB0YXNr
			PXdvcmsucG9wKCk7aWYodGFzaz49ZG9jLnNpemUpY29udGludWU7dmFyIHN0YXJ0PWZpbmRTdGFy
			dExpbmUodGFzayksc3RhdGU9c3RhcnQmJmdldExpbmUoc3RhcnQtMSkuc3RhdGVBZnRlcjtpZihz
			dGF0ZSlzdGF0ZT1jb3B5U3RhdGUobW9kZSxzdGF0ZSk7ZWxzZSBzdGF0ZT1zdGFydFN0YXRlKG1v
			ZGUpOyB2YXIgdW5jaGFuZ2VkPTAsY29tcGFyZT1tb2RlLmNvbXBhcmVTdGF0ZXMscmVhbENoYW5n
			ZT1mYWxzZSxpPXN0YXJ0LGJhaWw9ZmFsc2U7ZG9jLml0ZXIoaSxkb2Muc2l6ZSxmdW5jdGlvbihs
			aW5lKXt2YXIgaGFkU3RhdGU9bGluZS5zdGF0ZUFmdGVyO2lmKCtuZXcgRGF0ZT5lbmQpe3dvcmsu
			cHVzaChpKTtzdGFydFdvcmtlcihvcHRpb25zLndvcmtEZWxheSk7aWYocmVhbENoYW5nZSljaGFu
			Z2VzLnB1c2goe2Zyb206dGFzayx0bzppKzF9KTtyZXR1cm4gYmFpbD10cnVlfXZhciBjaGFuZ2Vk
			PWxpbmUuaGlnaGxpZ2h0KG1vZGUsc3RhdGUsb3B0aW9ucy50YWJTaXplKTtpZihjaGFuZ2VkKXJl
			YWxDaGFuZ2U9dHJ1ZTtsaW5lLnN0YXRlQWZ0ZXI9Y29weVN0YXRlKG1vZGUsc3RhdGUpO2lmKGNv
			bXBhcmUpe2lmKGhhZFN0YXRlJiZjb21wYXJlKGhhZFN0YXRlLHN0YXRlKSlyZXR1cm4gdHJ1ZX1l
			bHNlIGlmKGNoYW5nZWQhPT1mYWxzZXx8IWhhZFN0YXRlKXVuY2hhbmdlZD0wO2Vsc2UgaWYoKyt1
			bmNoYW5nZWQ+IDMmJighbW9kZS5pbmRlbnR8fG1vZGUuaW5kZW50KGhhZFN0YXRlLCIiKT09bW9k
			ZS5pbmRlbnQoc3RhdGUsIiIpKSlyZXR1cm4gdHJ1ZTsrK2l9KTtpZihiYWlsKXJldHVybjtpZihy
			ZWFsQ2hhbmdlKWNoYW5nZXMucHVzaCh7ZnJvbTp0YXNrLHRvOmkrMX0pfWlmKGZvdW5kV29yayYm
			b3B0aW9ucy5vbkhpZ2hsaWdodENvbXBsZXRlKW9wdGlvbnMub25IaWdobGlnaHRDb21wbGV0ZShp
			bnN0YW5jZSl9ZnVuY3Rpb24gc3RhcnRXb3JrZXIodGltZSl7aWYoIXdvcmsubGVuZ3RoKXJldHVy
			bjtoaWdobGlnaHQuc2V0KHRpbWUsb3BlcmF0aW9uKGhpZ2hsaWdodFdvcmtlcikpfWZ1bmN0aW9u
			IHN0YXJ0T3BlcmF0aW9uKCl7dXBkYXRlSW5wdXQ9dXNlclNlbENoYW5nZT10ZXh0Q2hhbmdlZD1u
			dWxsO2NoYW5nZXM9W107c2VsZWN0aW9uQ2hhbmdlZD1mYWxzZTtjYWxsYmFja3M9W119ZnVuY3Rp
			b24gZW5kT3BlcmF0aW9uKCl7dmFyIHJlU2Nyb2xsPWZhbHNlLHVwZGF0ZWQ7aWYoc2VsZWN0aW9u
			Q2hhbmdlZClyZVNjcm9sbD0gIXNjcm9sbEN1cnNvckludG9WaWV3KCk7aWYoY2hhbmdlcy5sZW5n
			dGgpdXBkYXRlZD11cGRhdGVEaXNwbGF5KGNoYW5nZXMsdHJ1ZSk7ZWxzZXtpZihzZWxlY3Rpb25D
			aGFuZ2VkKXVwZGF0ZVNlbGVjdGlvbigpO2lmKGd1dHRlckRpcnR5KXVwZGF0ZUd1dHRlcigpfWlm
			KHJlU2Nyb2xsKXNjcm9sbEN1cnNvckludG9WaWV3KCk7aWYoc2VsZWN0aW9uQ2hhbmdlZCl7c2Ny
			b2xsRWRpdG9ySW50b1ZpZXcoKTtyZXN0YXJ0QmxpbmsoKX1pZihmb2N1c2VkJiYhbGVhdmVJbnB1
			dEFsb25lJiYodXBkYXRlSW5wdXQ9PT10cnVlfHx1cGRhdGVJbnB1dCE9PWZhbHNlJiZzZWxlY3Rp
			b25DaGFuZ2VkKSlyZXNldElucHV0KHVzZXJTZWxDaGFuZ2UpO2lmKHNlbGVjdGlvbkNoYW5nZWQm
			Jm9wdGlvbnMubWF0Y2hCcmFja2V0cylzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpe2lm
			KGJyYWNrZXRIaWdobGlnaHRlZCl7YnJhY2tldEhpZ2hsaWdodGVkKCk7YnJhY2tldEhpZ2hsaWdo
			dGVkPW51bGx9aWYocG9zRXEoc2VsLmZyb20sIHNlbC50bykpbWF0Y2hCcmFja2V0cyhmYWxzZSl9
			KSwyMCk7dmFyIHRjPXRleHRDaGFuZ2VkLGNicz1jYWxsYmFja3M7aWYoc2VsZWN0aW9uQ2hhbmdl
			ZCYmb3B0aW9ucy5vbkN1cnNvckFjdGl2aXR5KW9wdGlvbnMub25DdXJzb3JBY3Rpdml0eShpbnN0
			YW5jZSk7aWYodGMmJm9wdGlvbnMub25DaGFuZ2UmJmluc3RhbmNlKW9wdGlvbnMub25DaGFuZ2Uo
			aW5zdGFuY2UsdGMpO2Zvcih2YXIgaT0wO2k8Y2JzLmxlbmd0aDsrK2kpY2JzW2ldKGluc3RhbmNl
			KTtpZih1cGRhdGVkJiZvcHRpb25zLm9uVXBkYXRlKW9wdGlvbnMub25VcGRhdGUoaW5zdGFuY2Up
			fXZhciBuZXN0ZWRPcGVyYXRpb249MDtmdW5jdGlvbiBvcGVyYXRpb24oZil7cmV0dXJuIGZ1bmN0
			aW9uKCl7aWYoIW5lc3RlZE9wZXJhdGlvbisrKXN0YXJ0T3BlcmF0aW9uKCk7dHJ5e3ZhciByZXN1
			bHQ9Zi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtpZighLS1uZXN0ZWRPcGVyYXRpb24p
			ZW5kT3BlcmF0aW9uKCl9cmV0dXJuIHJlc3VsdH19IGZvcih2YXIgZXh0IGluIGV4dGVuc2lvbnMp
			aWYoZXh0ZW5zaW9ucy5wcm9wZXJ0eUlzRW51bWVyYWJsZShleHQpJiYhaW5zdGFuY2UucHJvcGVy
			dHlJc0VudW1lcmFibGUoZXh0KSlpbnN0YW5jZVtleHRdPWV4dGVuc2lvbnNbZXh0XTtyZXR1cm4g
			aW5zdGFuY2V9Q29kZU1pcnJvci5kZWZhdWx0cz17dmFsdWU6IiIsbW9kZTpudWxsLHRoZW1lOiJk
			ZWZhdWx0IixpbmRlbnRVbml0OjIsaW5kZW50V2l0aFRhYnM6ZmFsc2Usc21hcnRJbmRlbnQ6dHJ1
			ZSx0YWJTaXplOjQsa2V5TWFwOiJkZWZhdWx0IixleHRyYUtleXM6bnVsbCxlbGVjdHJpY0NoYXJz
			OnRydWUsYXV0b0NsZWFyRW1wdHlMaW5lczpmYWxzZSxvbktleUV2ZW50Om51bGwsbGluZVdyYXBw
			aW5nOmZhbHNlLGxpbmVOdW1iZXJzOmZhbHNlLGd1dHRlcjpmYWxzZSxmaXhlZEd1dHRlcjpmYWxz
			ZSxmaXJzdExpbmVOdW1iZXI6MSxyZWFkT25seTpmYWxzZSxvbkNoYW5nZTpudWxsLG9uQ3Vyc29y
			QWN0aXZpdHk6bnVsbCxvbkd1dHRlckNsaWNrOm51bGwsIG9uSGlnaGxpZ2h0Q29tcGxldGU6bnVs
			bCxvblVwZGF0ZTpudWxsLG9uRm9jdXM6bnVsbCxvbkJsdXI6bnVsbCxvblNjcm9sbDpudWxsLG1h
			dGNoQnJhY2tldHM6ZmFsc2Usd29ya1RpbWU6MTAwLHdvcmtEZWxheToyMDAscG9sbEludGVydmFs
			OjEwMCx1bmRvRGVwdGg6NDAsdGFiaW5kZXg6bnVsbCxkb2N1bWVudDp3aW5kb3cuZG9jdW1lbnR9
			O3ZhciBpb3M9L0FwcGxlV2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYvTW9iaWxl
			XC9cdysvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7dmFyIG1hYz1pb3N8fC9NYWMvLnRlc3Qo
			bmF2aWdhdG9yLnBsYXRmb3JtKTt2YXIgd2luPS9XaW4vLnRlc3QobmF2aWdhdG9yLnBsYXRmb3Jt
			KTt2YXIgbW9kZXM9e30sbWltZU1vZGVzPXt9O0NvZGVNaXJyb3IuZGVmaW5lTW9kZT1mdW5jdGlv
			bihuYW1lLG1vZGUpe2lmKCFDb2RlTWlycm9yLmRlZmF1bHRzLm1vZGUmJm5hbWUhPSJudWxsIilD
			b2RlTWlycm9yLmRlZmF1bHRzLm1vZGU9IG5hbWU7bW9kZXNbbmFtZV09bW9kZX07Q29kZU1pcnJv
			ci5kZWZpbmVNSU1FPWZ1bmN0aW9uKG1pbWUsc3BlYyl7bWltZU1vZGVzW21pbWVdPXNwZWN9O0Nv
			ZGVNaXJyb3IucmVzb2x2ZU1vZGU9ZnVuY3Rpb24oc3BlYyl7aWYodHlwZW9mIHNwZWM9PSJzdHJp
			bmciJiZtaW1lTW9kZXMuaGFzT3duUHJvcGVydHkoc3BlYykpc3BlYz1taW1lTW9kZXNbc3BlY107
			aWYodHlwZW9mIHNwZWM9PSJzdHJpbmciKXJldHVybntuYW1lOnNwZWN9O2Vsc2UgcmV0dXJuIHNw
			ZWN8fHtuYW1lOiJudWxsIn19O0NvZGVNaXJyb3IuZ2V0TW9kZT1mdW5jdGlvbihvcHRpb25zLHNw
			ZWMpe3ZhciBzcGVjPUNvZGVNaXJyb3IucmVzb2x2ZU1vZGUoc3BlYyk7dmFyIG1mYWN0b3J5PW1v
			ZGVzW3NwZWMubmFtZV07aWYoIW1mYWN0b3J5KXtpZih3aW5kb3cuY29uc29sZSljb25zb2xlLndh
			cm4oIk5vIG1vZGUgIitzcGVjLm5hbWUrIiBmb3VuZCwgZmFsbGluZyBiYWNrIHRvIHBsYWluIHRl
			eHQuIik7cmV0dXJuIENvZGVNaXJyb3IuZ2V0TW9kZShvcHRpb25zLCAidGV4dC9wbGFpbiIpfXJl
			dHVybiBtZmFjdG9yeShvcHRpb25zLHNwZWMpfTtDb2RlTWlycm9yLmxpc3RNb2Rlcz1mdW5jdGlv
			bigpe3ZhciBsaXN0PVtdO2Zvcih2YXIgbSBpbiBtb2RlcylpZihtb2Rlcy5wcm9wZXJ0eUlzRW51
			bWVyYWJsZShtKSlsaXN0LnB1c2gobSk7cmV0dXJuIGxpc3R9O0NvZGVNaXJyb3IubGlzdE1JTUVz
			PWZ1bmN0aW9uKCl7dmFyIGxpc3Q9W107Zm9yKHZhciBtIGluIG1pbWVNb2RlcylpZihtaW1lTW9k
			ZXMucHJvcGVydHlJc0VudW1lcmFibGUobSkpbGlzdC5wdXNoKHttaW1lOm0sbW9kZTptaW1lTW9k
			ZXNbbV19KTtyZXR1cm4gbGlzdH07dmFyIGV4dGVuc2lvbnM9Q29kZU1pcnJvci5leHRlbnNpb25z
			PXt9O0NvZGVNaXJyb3IuZGVmaW5lRXh0ZW5zaW9uPWZ1bmN0aW9uKG5hbWUsZnVuYyl7ZXh0ZW5z
			aW9uc1tuYW1lXT1mdW5jfTt2YXIgY29tbWFuZHM9Q29kZU1pcnJvci5jb21tYW5kcz17c2VsZWN0
			QWxsOmZ1bmN0aW9uKGNtKXtjbS5zZXRTZWxlY3Rpb24oe2xpbmU6MCwgY2g6MH0se2xpbmU6Y20u
			bGluZUNvdW50KCktMX0pfSxraWxsTGluZTpmdW5jdGlvbihjbSl7dmFyIGZyb209Y20uZ2V0Q3Vy
			c29yKHRydWUpLHRvPWNtLmdldEN1cnNvcihmYWxzZSksc2VsPSFwb3NFcShmcm9tLHRvKTtpZigh
			c2VsJiZjbS5nZXRMaW5lKGZyb20ubGluZSkubGVuZ3RoPT1mcm9tLmNoKWNtLnJlcGxhY2VSYW5n
			ZSgiIixmcm9tLHtsaW5lOmZyb20ubGluZSsxLGNoOjB9KTtlbHNlIGNtLnJlcGxhY2VSYW5nZSgi
			Iixmcm9tLHNlbD90bzp7bGluZTpmcm9tLmxpbmV9KX0sZGVsZXRlTGluZTpmdW5jdGlvbihjbSl7
			dmFyIGw9Y20uZ2V0Q3Vyc29yKCkubGluZTtjbS5yZXBsYWNlUmFuZ2UoIiIse2xpbmU6bCxjaDow
			fSx7bGluZTpsfSl9LHVuZG86ZnVuY3Rpb24oY20pe2NtLnVuZG8oKX0scmVkbzpmdW5jdGlvbihj
			bSl7Y20ucmVkbygpfSxnb0RvY1N0YXJ0OmZ1bmN0aW9uKGNtKXtjbS5zZXRDdXJzb3IoMCwwLHRy
			dWUpfSxnb0RvY0VuZDpmdW5jdGlvbihjbSl7Y20uc2V0U2VsZWN0aW9uKHtsaW5lOmNtLmxpbmVD
			b3VudCgpLSAxfSxudWxsLHRydWUpfSxnb0xpbmVTdGFydDpmdW5jdGlvbihjbSl7Y20uc2V0Q3Vy
			c29yKGNtLmdldEN1cnNvcigpLmxpbmUsMCx0cnVlKX0sZ29MaW5lU3RhcnRTbWFydDpmdW5jdGlv
			bihjbSl7dmFyIGN1cj1jbS5nZXRDdXJzb3IoKTt2YXIgdGV4dD1jbS5nZXRMaW5lKGN1ci5saW5l
			KSxmaXJzdE5vbldTPU1hdGgubWF4KDAsdGV4dC5zZWFyY2goL1xTLykpO2NtLnNldEN1cnNvcihj
			dXIubGluZSxjdXIuY2g8PWZpcnN0Tm9uV1MmJmN1ci5jaD8wOmZpcnN0Tm9uV1MsdHJ1ZSl9LGdv
			TGluZUVuZDpmdW5jdGlvbihjbSl7Y20uc2V0U2VsZWN0aW9uKHtsaW5lOmNtLmdldEN1cnNvcigp
			LmxpbmV9LG51bGwsdHJ1ZSl9LGdvTGluZVVwOmZ1bmN0aW9uKGNtKXtjbS5tb3ZlVigtMSwibGlu
			ZSIpfSxnb0xpbmVEb3duOmZ1bmN0aW9uKGNtKXtjbS5tb3ZlVigxLCJsaW5lIil9LGdvUGFnZVVw
			OmZ1bmN0aW9uKGNtKXtjbS5tb3ZlVigtMSwicGFnZSIpfSxnb1BhZ2VEb3duOmZ1bmN0aW9uKGNt
			KXtjbS5tb3ZlVigxLCAicGFnZSIpfSxnb0NoYXJMZWZ0OmZ1bmN0aW9uKGNtKXtjbS5tb3ZlSCgt
			MSwiY2hhciIpfSxnb0NoYXJSaWdodDpmdW5jdGlvbihjbSl7Y20ubW92ZUgoMSwiY2hhciIpfSxn
			b0NvbHVtbkxlZnQ6ZnVuY3Rpb24oY20pe2NtLm1vdmVIKC0xLCJjb2x1bW4iKX0sZ29Db2x1bW5S
			aWdodDpmdW5jdGlvbihjbSl7Y20ubW92ZUgoMSwiY29sdW1uIil9LGdvV29yZExlZnQ6ZnVuY3Rp
			b24oY20pe2NtLm1vdmVIKC0xLCJ3b3JkIil9LGdvV29yZFJpZ2h0OmZ1bmN0aW9uKGNtKXtjbS5t
			b3ZlSCgxLCJ3b3JkIil9LGRlbENoYXJMZWZ0OmZ1bmN0aW9uKGNtKXtjbS5kZWxldGVIKC0xLCJj
			aGFyIil9LGRlbENoYXJSaWdodDpmdW5jdGlvbihjbSl7Y20uZGVsZXRlSCgxLCJjaGFyIil9LGRl
			bFdvcmRMZWZ0OmZ1bmN0aW9uKGNtKXtjbS5kZWxldGVIKC0xLCJ3b3JkIil9LGRlbFdvcmRSaWdo
			dDpmdW5jdGlvbihjbSl7Y20uZGVsZXRlSCgxLCJ3b3JkIil9LGluZGVudEF1dG86ZnVuY3Rpb24o
			Y20pe2NtLmluZGVudFNlbGVjdGlvbigic21hcnQiKX0sIGluZGVudE1vcmU6ZnVuY3Rpb24oY20p
			e2NtLmluZGVudFNlbGVjdGlvbigiYWRkIil9LGluZGVudExlc3M6ZnVuY3Rpb24oY20pe2NtLmlu
			ZGVudFNlbGVjdGlvbigic3VidHJhY3QiKX0saW5zZXJ0VGFiOmZ1bmN0aW9uKGNtKXtjbS5yZXBs
			YWNlU2VsZWN0aW9uKCJcdCIsImVuZCIpfSx0cmFuc3Bvc2VDaGFyczpmdW5jdGlvbihjbSl7dmFy
			IGN1cj1jbS5nZXRDdXJzb3IoKSxsaW5lPWNtLmdldExpbmUoY3VyLmxpbmUpO2lmKGN1ci5jaD4w
			JiZjdXIuY2g8bGluZS5sZW5ndGgtMSljbS5yZXBsYWNlUmFuZ2UobGluZS5jaGFyQXQoY3VyLmNo
			KStsaW5lLmNoYXJBdChjdXIuY2gtMSkse2xpbmU6Y3VyLmxpbmUsY2g6Y3VyLmNoLTF9LHtsaW5l
			OmN1ci5saW5lLGNoOmN1ci5jaCsxfSl9LG5ld2xpbmVBbmRJbmRlbnQ6ZnVuY3Rpb24oY20pe2Nt
			LnJlcGxhY2VTZWxlY3Rpb24oIlxuIiwiZW5kIik7Y20uaW5kZW50TGluZShjbS5nZXRDdXJzb3Io
			KS5saW5lKX0sdG9nZ2xlT3ZlcndyaXRlOmZ1bmN0aW9uKGNtKXtjbS50b2dnbGVPdmVyd3JpdGUo
			KX19OyB2YXIga2V5TWFwPUNvZGVNaXJyb3Iua2V5TWFwPXt9O2tleU1hcC5iYXNpYz17IkxlZnQi
			OiJnb0NoYXJMZWZ0IiwiUmlnaHQiOiJnb0NoYXJSaWdodCIsIlVwIjoiZ29MaW5lVXAiLCJEb3du
			IjoiZ29MaW5lRG93biIsIkVuZCI6ImdvTGluZUVuZCIsIkhvbWUiOiJnb0xpbmVTdGFydFNtYXJ0
			IiwiUGFnZVVwIjoiZ29QYWdlVXAiLCJQYWdlRG93biI6ImdvUGFnZURvd24iLCJEZWxldGUiOiJk
			ZWxDaGFyUmlnaHQiLCJCYWNrc3BhY2UiOiJkZWxDaGFyTGVmdCIsIlRhYiI6ImluZGVudE1vcmUi
			LCJTaGlmdC1UYWIiOiJpbmRlbnRMZXNzIiwiRW50ZXIiOiJuZXdsaW5lQW5kSW5kZW50IiwiSW5z
			ZXJ0IjoidG9nZ2xlT3ZlcndyaXRlIn07a2V5TWFwLnBjRGVmYXVsdD17IkN0cmwtQSI6InNlbGVj
			dEFsbCIsIkN0cmwtRCI6ImRlbGV0ZUxpbmUiLCJDdHJsLVoiOiJ1bmRvIiwiU2hpZnQtQ3RybC1a
			IjoicmVkbyIsIkN0cmwtWSI6InJlZG8iLCJDdHJsLUhvbWUiOiJnb0RvY1N0YXJ0IiwgIkFsdC1V
			cCI6ImdvRG9jU3RhcnQiLCJDdHJsLUVuZCI6ImdvRG9jRW5kIiwiQ3RybC1Eb3duIjoiZ29Eb2NF
			bmQiLCJDdHJsLUxlZnQiOiJnb1dvcmRMZWZ0IiwiQ3RybC1SaWdodCI6ImdvV29yZFJpZ2h0Iiwi
			QWx0LUxlZnQiOiJnb0xpbmVTdGFydCIsIkFsdC1SaWdodCI6ImdvTGluZUVuZCIsIkN0cmwtQmFj
			a3NwYWNlIjoiZGVsV29yZExlZnQiLCJDdHJsLURlbGV0ZSI6ImRlbFdvcmRSaWdodCIsIkN0cmwt
			UyI6InNhdmUiLCJDdHJsLUYiOiJmaW5kIiwiQ3RybC1HIjoiZmluZE5leHQiLCJTaGlmdC1DdHJs
			LUciOiJmaW5kUHJldiIsIlNoaWZ0LUN0cmwtRiI6InJlcGxhY2UiLCJTaGlmdC1DdHJsLVIiOiJy
			ZXBsYWNlQWxsIixmYWxsdGhyb3VnaDoiYmFzaWMifTtrZXlNYXAubWFjRGVmYXVsdD17IkNtZC1B
			Ijoic2VsZWN0QWxsIiwiQ21kLUQiOiJkZWxldGVMaW5lIiwiQ21kLVoiOiJ1bmRvIiwiU2hpZnQt
			Q21kLVoiOiJyZWRvIiwiQ21kLVkiOiJyZWRvIiwiQ21kLVVwIjoiZ29Eb2NTdGFydCIsICJDbWQt
			RW5kIjoiZ29Eb2NFbmQiLCJDbWQtRG93biI6ImdvRG9jRW5kIiwiQWx0LUxlZnQiOiJnb1dvcmRM
			ZWZ0IiwiQWx0LVJpZ2h0IjoiZ29Xb3JkUmlnaHQiLCJDbWQtTGVmdCI6ImdvTGluZVN0YXJ0Iiwi
			Q21kLVJpZ2h0IjoiZ29MaW5lRW5kIiwiQWx0LUJhY2tzcGFjZSI6ImRlbFdvcmRMZWZ0IiwiQ3Ry
			bC1BbHQtQmFja3NwYWNlIjoiZGVsV29yZFJpZ2h0IiwiQWx0LURlbGV0ZSI6ImRlbFdvcmRSaWdo
			dCIsIkNtZC1TIjoic2F2ZSIsIkNtZC1GIjoiZmluZCIsIkNtZC1HIjoiZmluZE5leHQiLCJTaGlm
			dC1DbWQtRyI6ImZpbmRQcmV2IiwiQ21kLUFsdC1GIjoicmVwbGFjZSIsIlNoaWZ0LUNtZC1BbHQt
			RiI6InJlcGxhY2VBbGwiLGZhbGx0aHJvdWdoOlsiYmFzaWMiLCJlbWFjc3kiXX07a2V5TWFwWyJk
			ZWZhdWx0Il09bWFjP2tleU1hcC5tYWNEZWZhdWx0OmtleU1hcC5wY0RlZmF1bHQ7a2V5TWFwLmVt
			YWNzeT17IkN0cmwtRiI6ImdvQ2hhclJpZ2h0IiwiQ3RybC1CIjoiZ29DaGFyTGVmdCIsICJDdHJs
			LVAiOiJnb0xpbmVVcCIsIkN0cmwtTiI6ImdvTGluZURvd24iLCJBbHQtRiI6ImdvV29yZFJpZ2h0
			IiwiQWx0LUIiOiJnb1dvcmRMZWZ0IiwiQ3RybC1BIjoiZ29MaW5lU3RhcnQiLCJDdHJsLUUiOiJn
			b0xpbmVFbmQiLCJDdHJsLVYiOiJnb1BhZ2VVcCIsIlNoaWZ0LUN0cmwtViI6ImdvUGFnZURvd24i
			LCJDdHJsLUQiOiJkZWxDaGFyUmlnaHQiLCJDdHJsLUgiOiJkZWxDaGFyTGVmdCIsIkFsdC1EIjoi
			ZGVsV29yZFJpZ2h0IiwiQWx0LUJhY2tzcGFjZSI6ImRlbFdvcmRMZWZ0IiwiQ3RybC1LIjoia2ls
			bExpbmUiLCJDdHJsLVQiOiJ0cmFuc3Bvc2VDaGFycyJ9O2Z1bmN0aW9uIGdldEtleU1hcCh2YWwp
			e2lmKHR5cGVvZiB2YWw9PSJzdHJpbmciKXJldHVybiBrZXlNYXBbdmFsXTtlbHNlIHJldHVybiB2
			YWx9ZnVuY3Rpb24gbG9va3VwS2V5KG5hbWUsZXh0cmFNYXAsbWFwLGhhbmRsZSl7ZnVuY3Rpb24g
			bG9va3VwKG1hcCl7bWFwPWdldEtleU1hcChtYXApO3ZhciBmb3VuZD0gbWFwW25hbWVdO2lmKGZv
			dW5kIT1udWxsJiZoYW5kbGUoZm91bmQpKXJldHVybiB0cnVlO2lmKG1hcC5jYXRjaGFsbClyZXR1
			cm4gaGFuZGxlKG1hcC5jYXRjaGFsbCk7dmFyIGZhbGx0aHJvdWdoPW1hcC5mYWxsdGhyb3VnaDtp
			ZihmYWxsdGhyb3VnaD09bnVsbClyZXR1cm4gZmFsc2U7aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0
			cmluZy5jYWxsKGZhbGx0aHJvdWdoKSE9IltvYmplY3QgQXJyYXldIilyZXR1cm4gbG9va3VwKGZh
			bGx0aHJvdWdoKTtmb3IodmFyIGk9MCxlPWZhbGx0aHJvdWdoLmxlbmd0aDtpPGU7KytpKWlmKGxv
			b2t1cChmYWxsdGhyb3VnaFtpXSkpcmV0dXJuIHRydWU7cmV0dXJuIGZhbHNlfWlmKGV4dHJhTWFw
			JiZsb29rdXAoZXh0cmFNYXApKXJldHVybiB0cnVlO3JldHVybiBsb29rdXAobWFwKX1mdW5jdGlv
			biBpc01vZGlmaWVyS2V5KGV2ZW50KXt2YXIgbmFtZT1rZXlOYW1lc1tlX3Byb3AoZXZlbnQsImtl
			eUNvZGUiKV07cmV0dXJuIG5hbWU9PSJDdHJsInx8IG5hbWU9PSJBbHQifHxuYW1lPT0iU2hpZnQi
			fHxuYW1lPT0iTW9kIn1Db2RlTWlycm9yLmZyb21UZXh0QXJlYT1mdW5jdGlvbih0ZXh0YXJlYSxv
			cHRpb25zKXtpZighb3B0aW9ucylvcHRpb25zPXt9O29wdGlvbnMudmFsdWU9dGV4dGFyZWEudmFs
			dWU7aWYoIW9wdGlvbnMudGFiaW5kZXgmJnRleHRhcmVhLnRhYmluZGV4KW9wdGlvbnMudGFiaW5k
			ZXg9dGV4dGFyZWEudGFiaW5kZXg7ZnVuY3Rpb24gc2F2ZSgpe3RleHRhcmVhLnZhbHVlPWluc3Rh
			bmNlLmdldFZhbHVlKCl9aWYodGV4dGFyZWEuZm9ybSl7dmFyIHJtU3VibWl0PWNvbm5lY3QodGV4
			dGFyZWEuZm9ybSwic3VibWl0IixzYXZlLHRydWUpO2lmKHR5cGVvZiB0ZXh0YXJlYS5mb3JtLnN1
			Ym1pdD09ImZ1bmN0aW9uIil7dmFyIHJlYWxTdWJtaXQ9dGV4dGFyZWEuZm9ybS5zdWJtaXQ7ZnVu
			Y3Rpb24gd3JhcHBlZFN1Ym1pdCgpe3NhdmUoKTt0ZXh0YXJlYS5mb3JtLnN1Ym1pdD1yZWFsU3Vi
			bWl0O3RleHRhcmVhLmZvcm0uc3VibWl0KCk7IHRleHRhcmVhLmZvcm0uc3VibWl0PXdyYXBwZWRT
			dWJtaXR9dGV4dGFyZWEuZm9ybS5zdWJtaXQ9d3JhcHBlZFN1Ym1pdH19dGV4dGFyZWEuc3R5bGUu
			ZGlzcGxheT0ibm9uZSI7dmFyIGluc3RhbmNlPUNvZGVNaXJyb3IoZnVuY3Rpb24obm9kZSl7dGV4
			dGFyZWEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSx0ZXh0YXJlYS5uZXh0U2libGluZyl9
			LG9wdGlvbnMpO2luc3RhbmNlLnNhdmU9c2F2ZTtpbnN0YW5jZS5nZXRUZXh0QXJlYT1mdW5jdGlv
			bigpe3JldHVybiB0ZXh0YXJlYX07aW5zdGFuY2UudG9UZXh0QXJlYT1mdW5jdGlvbigpe3NhdmUo
			KTt0ZXh0YXJlYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGluc3RhbmNlLmdldFdyYXBwZXJFbGVt
			ZW50KCkpO3RleHRhcmVhLnN0eWxlLmRpc3BsYXk9IiI7aWYodGV4dGFyZWEuZm9ybSl7cm1TdWJt
			aXQoKTtpZih0eXBlb2YgdGV4dGFyZWEuZm9ybS5zdWJtaXQ9PSJmdW5jdGlvbiIpdGV4dGFyZWEu
			Zm9ybS5zdWJtaXQ9cmVhbFN1Ym1pdH19OyByZXR1cm4gaW5zdGFuY2V9O2Z1bmN0aW9uIGNvcHlT
			dGF0ZShtb2RlLHN0YXRlKXtpZihzdGF0ZT09PXRydWUpcmV0dXJuIHN0YXRlO2lmKG1vZGUuY29w
			eVN0YXRlKXJldHVybiBtb2RlLmNvcHlTdGF0ZShzdGF0ZSk7dmFyIG5zdGF0ZT17fTtmb3IodmFy
			IG4gaW4gc3RhdGUpe3ZhciB2YWw9c3RhdGVbbl07aWYodmFsIGluc3RhbmNlb2YgQXJyYXkpdmFs
			PXZhbC5jb25jYXQoW10pO25zdGF0ZVtuXT12YWx9cmV0dXJuIG5zdGF0ZX1Db2RlTWlycm9yLmNv
			cHlTdGF0ZT1jb3B5U3RhdGU7ZnVuY3Rpb24gc3RhcnRTdGF0ZShtb2RlLGExLGEyKXtyZXR1cm4g
			bW9kZS5zdGFydFN0YXRlP21vZGUuc3RhcnRTdGF0ZShhMSxhMik6dHJ1ZX1Db2RlTWlycm9yLnN0
			YXJ0U3RhdGU9c3RhcnRTdGF0ZTtmdW5jdGlvbiBTdHJpbmdTdHJlYW0oc3RyaW5nLHRhYlNpemUp
			e3RoaXMucG9zPXRoaXMuc3RhcnQ9MDt0aGlzLnN0cmluZz1zdHJpbmc7dGhpcy50YWJTaXplPXRh
			YlNpemV8fDh9U3RyaW5nU3RyZWFtLnByb3RvdHlwZT0ge2VvbDpmdW5jdGlvbigpe3JldHVybiB0
			aGlzLnBvcz49dGhpcy5zdHJpbmcubGVuZ3RofSxzb2w6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5w
			b3M9PTB9LHBlZWs6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9z
			KX0sbmV4dDpmdW5jdGlvbigpe2lmKHRoaXMucG9zPHRoaXMuc3RyaW5nLmxlbmd0aClyZXR1cm4g
			dGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKyspfSxlYXQ6ZnVuY3Rpb24obWF0Y2gpe3ZhciBj
			aD10aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MpO2lmKHR5cGVvZiBtYXRjaD09InN0cmluZyIp
			dmFyIG9rPWNoPT1tYXRjaDtlbHNlIHZhciBvaz1jaCYmKG1hdGNoLnRlc3Q/bWF0Y2gudGVzdChj
			aCk6bWF0Y2goY2gpKTtpZihvayl7Kyt0aGlzLnBvcztyZXR1cm4gY2h9fSxlYXRXaGlsZTpmdW5j
			dGlvbihtYXRjaCl7dmFyIHN0YXJ0PXRoaXMucG9zO3doaWxlKHRoaXMuZWF0KG1hdGNoKSk7cmV0
			dXJuIHRoaXMucG9zPnN0YXJ0fSxlYXRTcGFjZTpmdW5jdGlvbigpe3ZhciBzdGFydD0gdGhpcy5w
			b3M7d2hpbGUoL1tcc1x1MDBhMF0vLnRlc3QodGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKSkp
			Kyt0aGlzLnBvcztyZXR1cm4gdGhpcy5wb3M+c3RhcnR9LHNraXBUb0VuZDpmdW5jdGlvbigpe3Ro
			aXMucG9zPXRoaXMuc3RyaW5nLmxlbmd0aH0sc2tpcFRvOmZ1bmN0aW9uKGNoKXt2YXIgZm91bmQ9
			dGhpcy5zdHJpbmcuaW5kZXhPZihjaCx0aGlzLnBvcyk7aWYoZm91bmQ+LTEpe3RoaXMucG9zPWZv
			dW5kO3JldHVybiB0cnVlfX0sYmFja1VwOmZ1bmN0aW9uKG4pe3RoaXMucG9zLT1ufSxjb2x1bW46
			ZnVuY3Rpb24oKXtyZXR1cm4gY291bnRDb2x1bW4odGhpcy5zdHJpbmcsdGhpcy5zdGFydCx0aGlz
			LnRhYlNpemUpfSxpbmRlbnRhdGlvbjpmdW5jdGlvbigpe3JldHVybiBjb3VudENvbHVtbih0aGlz
			LnN0cmluZyxudWxsLHRoaXMudGFiU2l6ZSl9LG1hdGNoOmZ1bmN0aW9uKHBhdHRlcm4sY29uc3Vt
			ZSxjYXNlSW5zZW5zaXRpdmUpe2lmKHR5cGVvZiBwYXR0ZXJuPT0ic3RyaW5nIil7ZnVuY3Rpb24g
			Y2FzZWQoc3RyKXtyZXR1cm4gY2FzZUluc2Vuc2l0aXZlPyBzdHIudG9Mb3dlckNhc2UoKTpzdHJ9
			aWYoY2FzZWQodGhpcy5zdHJpbmcpLmluZGV4T2YoY2FzZWQocGF0dGVybiksdGhpcy5wb3MpPT10
			aGlzLnBvcyl7aWYoY29uc3VtZSE9PWZhbHNlKXRoaXMucG9zKz1wYXR0ZXJuLmxlbmd0aDtyZXR1
			cm4gdHJ1ZX19ZWxzZXt2YXIgbWF0Y2g9dGhpcy5zdHJpbmcuc2xpY2UodGhpcy5wb3MpLm1hdGNo
			KHBhdHRlcm4pO2lmKG1hdGNoJiZjb25zdW1lIT09ZmFsc2UpdGhpcy5wb3MrPW1hdGNoWzBdLmxl
			bmd0aDtyZXR1cm4gbWF0Y2h9fSxjdXJyZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RyaW5n
			LnNsaWNlKHRoaXMuc3RhcnQsdGhpcy5wb3MpfX07Q29kZU1pcnJvci5TdHJpbmdTdHJlYW09U3Ry
			aW5nU3RyZWFtO2Z1bmN0aW9uIE1hcmtlZFRleHQoZnJvbSx0byxjbGFzc05hbWUsc2V0KXt0aGlz
			LmZyb209ZnJvbTt0aGlzLnRvPXRvO3RoaXMuc3R5bGU9Y2xhc3NOYW1lO3RoaXMuc2V0PXNldH1N
			YXJrZWRUZXh0LnByb3RvdHlwZT17YXR0YWNoOmZ1bmN0aW9uKGxpbmUpe3RoaXMuc2V0LnB1c2go
			bGluZSl9LCBkZXRhY2g6ZnVuY3Rpb24obGluZSl7dmFyIGl4PWluZGV4T2YodGhpcy5zZXQsbGlu
			ZSk7aWYoaXg+LTEpdGhpcy5zZXQuc3BsaWNlKGl4LDEpfSxzcGxpdDpmdW5jdGlvbihwb3MsbGVu
			QmVmb3JlKXtpZih0aGlzLnRvPD1wb3MmJnRoaXMudG8hPW51bGwpcmV0dXJuIG51bGw7dmFyIGZy
			b209dGhpcy5mcm9tPHBvc3x8dGhpcy5mcm9tPT1udWxsP251bGw6dGhpcy5mcm9tLXBvcytsZW5C
			ZWZvcmU7dmFyIHRvPXRoaXMudG89PW51bGw/bnVsbDp0aGlzLnRvLXBvcytsZW5CZWZvcmU7cmV0
			dXJuIG5ldyBNYXJrZWRUZXh0KGZyb20sdG8sdGhpcy5zdHlsZSx0aGlzLnNldCl9LGR1cDpmdW5j
			dGlvbigpe3JldHVybiBuZXcgTWFya2VkVGV4dChudWxsLG51bGwsdGhpcy5zdHlsZSx0aGlzLnNl
			dCl9LGNsaXBUbzpmdW5jdGlvbihmcm9tT3Blbixmcm9tLHRvT3Blbix0byxkaWZmKXtpZih0aGlz
			LmZyb20hPW51bGwmJnRoaXMuZnJvbT49ZnJvbSl0aGlzLmZyb209TWF0aC5tYXgodG8sdGhpcy5m
			cm9tKSsgZGlmZjtpZih0aGlzLnRvIT1udWxsJiZ0aGlzLnRvPmZyb20pdGhpcy50bz10bzx0aGlz
			LnRvP3RoaXMudG8rZGlmZjpmcm9tO2lmKGZyb21PcGVuJiZ0bz50aGlzLmZyb20mJih0bzx0aGlz
			LnRvfHx0aGlzLnRvPT1udWxsKSl0aGlzLmZyb209bnVsbDtpZih0b09wZW4mJihmcm9tPHRoaXMu
			dG98fHRoaXMudG89PW51bGwpJiYoZnJvbT50aGlzLmZyb218fHRoaXMuZnJvbT09bnVsbCkpdGhp
			cy50bz1udWxsfSxpc0RlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mcm9tIT1udWxsJiZ0aGlz
			LnRvIT1udWxsJiZ0aGlzLmZyb20+PXRoaXMudG99LHNhbWVTZXQ6ZnVuY3Rpb24oeCl7cmV0dXJu
			IHRoaXMuc2V0PT14LnNldH19O2Z1bmN0aW9uIEJvb2ttYXJrKHBvcyl7dGhpcy5mcm9tPXBvczt0
			aGlzLnRvPXBvczt0aGlzLmxpbmU9bnVsbH1Cb29rbWFyay5wcm90b3R5cGU9e2F0dGFjaDpmdW5j
			dGlvbihsaW5lKXt0aGlzLmxpbmU9bGluZX0sZGV0YWNoOmZ1bmN0aW9uKGxpbmUpe2lmKHRoaXMu
			bGluZT09IGxpbmUpdGhpcy5saW5lPW51bGx9LHNwbGl0OmZ1bmN0aW9uKHBvcyxsZW5CZWZvcmUp
			e2lmKHBvczx0aGlzLmZyb20pe3RoaXMuZnJvbT10aGlzLnRvPXRoaXMuZnJvbS1wb3MrbGVuQmVm
			b3JlO3JldHVybiB0aGlzfX0saXNEZWFkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZnJvbT50aGlz
			LnRvfSxjbGlwVG86ZnVuY3Rpb24oZnJvbU9wZW4sZnJvbSx0b09wZW4sdG8sZGlmZil7aWYoKGZy
			b21PcGVufHxmcm9tPHRoaXMuZnJvbSkmJih0b09wZW58fHRvPnRoaXMudG8pKXt0aGlzLmZyb209
			MDt0aGlzLnRvPS0xfWVsc2UgaWYodGhpcy5mcm9tPmZyb20pdGhpcy5mcm9tPXRoaXMudG89TWF0
			aC5tYXgodG8sdGhpcy5mcm9tKStkaWZmfSxzYW1lU2V0OmZ1bmN0aW9uKHgpe3JldHVybiBmYWxz
			ZX0sZmluZDpmdW5jdGlvbigpe2lmKCF0aGlzLmxpbmV8fCF0aGlzLmxpbmUucGFyZW50KXJldHVy
			biBudWxsO3JldHVybntsaW5lOmxpbmVObyh0aGlzLmxpbmUpLGNoOnRoaXMuZnJvbX19LCBjbGVh
			cjpmdW5jdGlvbigpe2lmKHRoaXMubGluZSl7dmFyIGZvdW5kPWluZGV4T2YodGhpcy5saW5lLm1h
			cmtlZCx0aGlzKTtpZihmb3VuZCE9LTEpdGhpcy5saW5lLm1hcmtlZC5zcGxpY2UoZm91bmQsMSk7
			dGhpcy5saW5lPW51bGx9fX07ZnVuY3Rpb24gTGluZSh0ZXh0LHN0eWxlcyl7dGhpcy5zdHlsZXM9
			c3R5bGVzfHxbdGV4dCxudWxsXTt0aGlzLnRleHQ9dGV4dDt0aGlzLmhlaWdodD0xO3RoaXMubWFy
			a2VkPXRoaXMuZ3V0dGVyTWFya2VyPXRoaXMuY2xhc3NOYW1lPXRoaXMuaGFuZGxlcnM9bnVsbDt0
			aGlzLnN0YXRlQWZ0ZXI9dGhpcy5wYXJlbnQ9dGhpcy5oaWRkZW49bnVsbH1MaW5lLmluaGVyaXRN
			YXJrcz1mdW5jdGlvbih0ZXh0LG9yaWcpe3ZhciBsbj1uZXcgTGluZSh0ZXh0KSxtaz1vcmlnJiZv
			cmlnLm1hcmtlZDtpZihtaylmb3IodmFyIGk9MDtpPG1rLmxlbmd0aDsrK2kpaWYobWtbaV0udG89
			PW51bGwmJm1rW2ldLnN0eWxlKXt2YXIgbmV3bWs9bG4ubWFya2VkfHwgKGxuLm1hcmtlZD1bXSks
			bWFyaz1ta1tpXTt2YXIgbm1hcms9bWFyay5kdXAoKTtuZXdtay5wdXNoKG5tYXJrKTtubWFyay5h
			dHRhY2gobG4pfXJldHVybiBsbn07TGluZS5wcm90b3R5cGU9e3JlcGxhY2U6ZnVuY3Rpb24oZnJv
			bSx0b18sdGV4dCl7dmFyIHN0PVtdLG1rPXRoaXMubWFya2VkLHRvPXRvXz09bnVsbD90aGlzLnRl
			eHQubGVuZ3RoOnRvXztjb3B5U3R5bGVzKDAsZnJvbSx0aGlzLnN0eWxlcyxzdCk7aWYodGV4dClz
			dC5wdXNoKHRleHQsbnVsbCk7Y29weVN0eWxlcyh0byx0aGlzLnRleHQubGVuZ3RoLHRoaXMuc3R5
			bGVzLHN0KTt0aGlzLnN0eWxlcz1zdDt0aGlzLnRleHQ9dGhpcy50ZXh0LnNsaWNlKDAsZnJvbSkr
			dGV4dCt0aGlzLnRleHQuc2xpY2UodG8pO3RoaXMuc3RhdGVBZnRlcj1udWxsO2lmKG1rKXt2YXIg
			ZGlmZj10ZXh0Lmxlbmd0aC0odG8tZnJvbSk7Zm9yKHZhciBpPTA7aTxtay5sZW5ndGg7KytpKXt2
			YXIgbWFyaz1ta1tpXTttYXJrLmNsaXBUbyhmcm9tPT0gbnVsbCxmcm9tfHwwLHRvXz09bnVsbCx0
			byxkaWZmKTtpZihtYXJrLmlzRGVhZCgpKXttYXJrLmRldGFjaCh0aGlzKTttay5zcGxpY2UoaS0t
			LDEpfX19fSxzcGxpdDpmdW5jdGlvbihwb3MsdGV4dEJlZm9yZSl7dmFyIHN0PVt0ZXh0QmVmb3Jl
			LG51bGxdLG1rPXRoaXMubWFya2VkO2NvcHlTdHlsZXMocG9zLHRoaXMudGV4dC5sZW5ndGgsdGhp
			cy5zdHlsZXMsc3QpO3ZhciB0YWtlbj1uZXcgTGluZSh0ZXh0QmVmb3JlK3RoaXMudGV4dC5zbGlj
			ZShwb3MpLHN0KTtpZihtaylmb3IodmFyIGk9MDtpPG1rLmxlbmd0aDsrK2kpe3ZhciBtYXJrPW1r
			W2ldO3ZhciBuZXdtYXJrPW1hcmsuc3BsaXQocG9zLHRleHRCZWZvcmUubGVuZ3RoKTtpZihuZXdt
			YXJrKXtpZighdGFrZW4ubWFya2VkKXRha2VuLm1hcmtlZD1bXTt0YWtlbi5tYXJrZWQucHVzaChu
			ZXdtYXJrKTtuZXdtYXJrLmF0dGFjaCh0YWtlbil9fXJldHVybiB0YWtlbn0sYXBwZW5kOmZ1bmN0
			aW9uKGxpbmUpe3ZhciBteWxlbj10aGlzLnRleHQubGVuZ3RoLCBtaz1saW5lLm1hcmtlZCxteW1r
			PXRoaXMubWFya2VkO3RoaXMudGV4dCs9bGluZS50ZXh0O2NvcHlTdHlsZXMoMCxsaW5lLnRleHQu
			bGVuZ3RoLGxpbmUuc3R5bGVzLHRoaXMuc3R5bGVzKTtpZihteW1rKWZvcih2YXIgaT0wO2k8bXlt
			ay5sZW5ndGg7KytpKWlmKG15bWtbaV0udG89PW51bGwpbXlta1tpXS50bz1teWxlbjtpZihtayYm
			bWsubGVuZ3RoKXtpZighbXltayl0aGlzLm1hcmtlZD1teW1rPVtdO291dGVyOmZvcih2YXIgaT0w
			O2k8bWsubGVuZ3RoOysraSl7dmFyIG1hcms9bWtbaV07aWYoIW1hcmsuZnJvbSlmb3IodmFyIGo9
			MDtqPG15bWsubGVuZ3RoOysrail7dmFyIG15bWFyaz1teW1rW2pdO2lmKG15bWFyay50bz09bXls
			ZW4mJm15bWFyay5zYW1lU2V0KG1hcmspKXtteW1hcmsudG89bWFyay50bz09bnVsbD9udWxsOm1h
			cmsudG8rbXlsZW47aWYobXltYXJrLmlzRGVhZCgpKXtteW1hcmsuZGV0YWNoKHRoaXMpO21rLnNw
			bGljZShpLS0sMSl9Y29udGludWUgb3V0ZXJ9fW15bWsucHVzaChtYXJrKTsgbWFyay5hdHRhY2go
			dGhpcyk7bWFyay5mcm9tKz1teWxlbjtpZihtYXJrLnRvIT1udWxsKW1hcmsudG8rPW15bGVufX19
			LGZpeE1hcmtFbmRzOmZ1bmN0aW9uKG90aGVyKXt2YXIgbWs9dGhpcy5tYXJrZWQsb21rPW90aGVy
			Lm1hcmtlZDtpZighbWspcmV0dXJuO2Zvcih2YXIgaT0wO2k8bWsubGVuZ3RoOysraSl7dmFyIG1h
			cms9bWtbaV0sY2xvc2U9bWFyay50bz09bnVsbDtpZihjbG9zZSYmb21rKWZvcih2YXIgaj0wO2o8
			b21rLmxlbmd0aDsrK2opaWYob21rW2pdLnNhbWVTZXQobWFyaykpe2Nsb3NlPWZhbHNlO2JyZWFr
			fWlmKGNsb3NlKW1hcmsudG89dGhpcy50ZXh0Lmxlbmd0aH19LGZpeE1hcmtTdGFydHM6ZnVuY3Rp
			b24oKXt2YXIgbWs9dGhpcy5tYXJrZWQ7aWYoIW1rKXJldHVybjtmb3IodmFyIGk9MDtpPG1rLmxl
			bmd0aDsrK2kpaWYobWtbaV0uZnJvbT09bnVsbClta1tpXS5mcm9tPTB9LGFkZE1hcms6ZnVuY3Rp
			b24obWFyayl7bWFyay5hdHRhY2godGhpcyk7aWYodGhpcy5tYXJrZWQ9PSBudWxsKXRoaXMubWFy
			a2VkPVtdO3RoaXMubWFya2VkLnB1c2gobWFyayk7dGhpcy5tYXJrZWQuc29ydChmdW5jdGlvbihh
			LGIpe3JldHVybihhLmZyb218fDApLShiLmZyb218fDApfSl9LGhpZ2hsaWdodDpmdW5jdGlvbiht
			b2RlLHN0YXRlLHRhYlNpemUpe3ZhciBzdHJlYW09bmV3IFN0cmluZ1N0cmVhbSh0aGlzLnRleHQs
			dGFiU2l6ZSksc3Q9dGhpcy5zdHlsZXMscG9zPTA7dmFyIGNoYW5nZWQ9ZmFsc2UsY3VyV29yZD1z
			dFswXSxwcmV2V29yZDtpZih0aGlzLnRleHQ9PSIiJiZtb2RlLmJsYW5rTGluZSltb2RlLmJsYW5r
			TGluZShzdGF0ZSk7d2hpbGUoIXN0cmVhbS5lb2woKSl7dmFyIHN0eWxlPW1vZGUudG9rZW4oc3Ry
			ZWFtLHN0YXRlKTt2YXIgc3Vic3RyPXRoaXMudGV4dC5zbGljZShzdHJlYW0uc3RhcnQsc3RyZWFt
			LnBvcyk7c3RyZWFtLnN0YXJ0PXN0cmVhbS5wb3M7aWYocG9zJiZzdFtwb3MtMV09PXN0eWxlKXN0
			W3Bvcy0yXSs9c3Vic3RyO2Vsc2UgaWYoc3Vic3RyKXtpZighY2hhbmdlZCYmIChzdFtwb3MrMV0h
			PXN0eWxlfHxwb3MmJnN0W3Bvcy0yXSE9cHJldldvcmQpKWNoYW5nZWQ9dHJ1ZTtzdFtwb3MrK109
			c3Vic3RyO3N0W3BvcysrXT1zdHlsZTtwcmV2V29yZD1jdXJXb3JkO2N1cldvcmQ9c3RbcG9zXX1p
			ZihzdHJlYW0ucG9zPjVFMyl7c3RbcG9zKytdPXRoaXMudGV4dC5zbGljZShzdHJlYW0ucG9zKTtz
			dFtwb3MrK109bnVsbDticmVha319aWYoc3QubGVuZ3RoIT1wb3Mpe3N0Lmxlbmd0aD1wb3M7Y2hh
			bmdlZD10cnVlfWlmKHBvcyYmc3RbcG9zLTJdIT1wcmV2V29yZCljaGFuZ2VkPXRydWU7cmV0dXJu
			IGNoYW5nZWR8fChzdC5sZW5ndGg8NSYmdGhpcy50ZXh0Lmxlbmd0aDwxMD9udWxsOmZhbHNlKX0s
			Z2V0VG9rZW5BdDpmdW5jdGlvbihtb2RlLHN0YXRlLGNoKXt2YXIgdHh0PXRoaXMudGV4dCxzdHJl
			YW09bmV3IFN0cmluZ1N0cmVhbSh0eHQpO3doaWxlKHN0cmVhbS5wb3M8Y2gmJiFzdHJlYW0uZW9s
			KCkpe3N0cmVhbS5zdGFydD1zdHJlYW0ucG9zO3ZhciBzdHlsZT0gbW9kZS50b2tlbihzdHJlYW0s
			c3RhdGUpfXJldHVybntzdGFydDpzdHJlYW0uc3RhcnQsZW5kOnN0cmVhbS5wb3Msc3RyaW5nOnN0
			cmVhbS5jdXJyZW50KCksY2xhc3NOYW1lOnN0eWxlfHxudWxsLHN0YXRlOnN0YXRlfX0saW5kZW50
			YXRpb246ZnVuY3Rpb24odGFiU2l6ZSl7cmV0dXJuIGNvdW50Q29sdW1uKHRoaXMudGV4dCxudWxs
			LHRhYlNpemUpfSxnZXRIVE1MOmZ1bmN0aW9uKG1ha2VUYWIsZW5kQXQpe3ZhciBodG1sPVtdLGZp
			cnN0PXRydWUsY29sPTA7ZnVuY3Rpb24gc3Bhbih0ZXh0LHN0eWxlKXtpZighdGV4dClyZXR1cm47
			aWYoZmlyc3QmJmllJiZ0ZXh0LmNoYXJBdCgwKT09IiAiKXRleHQ9Ilx1MDBhMCIrdGV4dC5zbGlj
			ZSgxKTtmaXJzdD1mYWxzZTtpZih0ZXh0LmluZGV4T2YoIlx0Iik9PS0xKXtjb2wrPXRleHQubGVu
			Z3RoO3ZhciBlc2NhcGVkPWh0bWxFc2NhcGUodGV4dCl9ZWxzZXt2YXIgZXNjYXBlZD0iIjtmb3Io
			dmFyIHBvcz0wOzspe3ZhciBpZHg9dGV4dC5pbmRleE9mKCJcdCIsIHBvcyk7aWYoaWR4PT0tMSl7
			ZXNjYXBlZCs9aHRtbEVzY2FwZSh0ZXh0LnNsaWNlKHBvcykpO2NvbCs9dGV4dC5sZW5ndGgtcG9z
			O2JyZWFrfWVsc2V7Y29sKz1pZHgtcG9zO3ZhciB0YWI9bWFrZVRhYihjb2wpO2VzY2FwZWQrPWh0
			bWxFc2NhcGUodGV4dC5zbGljZShwb3MsaWR4KSkrdGFiLmh0bWw7Y29sKz10YWIud2lkdGg7cG9z
			PWlkeCsxfX19aWYoc3R5bGUpaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz0iJyxzdHlsZSwnIj4nLGVz
			Y2FwZWQsIjwvc3Bhbj4iKTtlbHNlIGh0bWwucHVzaChlc2NhcGVkKX12YXIgc3Q9dGhpcy5zdHls
			ZXMsYWxsVGV4dD10aGlzLnRleHQsbWFya2VkPXRoaXMubWFya2VkO3ZhciBsZW49YWxsVGV4dC5s
			ZW5ndGg7aWYoZW5kQXQhPW51bGwpbGVuPU1hdGgubWluKGVuZEF0LGxlbik7ZnVuY3Rpb24gc3R5
			bGVUb0NsYXNzKHN0eWxlKXtpZighc3R5bGUpcmV0dXJuIG51bGw7cmV0dXJuImNtLSIrc3R5bGUu
			cmVwbGFjZSgvICsvZywiIGNtLSIpfWlmKCFhbGxUZXh0JiYgZW5kQXQ9PW51bGwpc3BhbigiICIp
			O2Vsc2UgaWYoIW1hcmtlZHx8IW1hcmtlZC5sZW5ndGgpZm9yKHZhciBpPTAsY2g9MDtjaDxsZW47
			aSs9Mil7dmFyIHN0cj1zdFtpXSxzdHlsZT1zdFtpKzFdLGw9c3RyLmxlbmd0aDtpZihjaCtsPmxl
			bilzdHI9c3RyLnNsaWNlKDAsbGVuLWNoKTtjaCs9bDtzcGFuKHN0cixzdHlsZVRvQ2xhc3Moc3R5
			bGUpKX1lbHNle3ZhciBwb3M9MCxpPTAsdGV4dD0iIixzdHlsZSxzZz0wO3ZhciBuZXh0Q2hhbmdl
			PW1hcmtlZFswXS5mcm9tfHwwLG1hcmtzPVtdLG1hcmtwb3M9MDtmdW5jdGlvbiBhZHZhbmNlTWFy
			a3MoKXt2YXIgbTt3aGlsZShtYXJrcG9zPG1hcmtlZC5sZW5ndGgmJigobT1tYXJrZWRbbWFya3Bv
			c10pLmZyb209PXBvc3x8bS5mcm9tPT1udWxsKSl7aWYobS5zdHlsZSE9bnVsbCltYXJrcy5wdXNo
			KG0pOysrbWFya3Bvc31uZXh0Q2hhbmdlPW1hcmtwb3M8bWFya2VkLmxlbmd0aD9tYXJrZWRbbWFy
			a3Bvc10uZnJvbTpJbmZpbml0eTtmb3IodmFyIGk9IDA7aTxtYXJrcy5sZW5ndGg7KytpKXt2YXIg
			dG89bWFya3NbaV0udG98fEluZmluaXR5O2lmKHRvPT1wb3MpbWFya3Muc3BsaWNlKGktLSwxKTtl
			bHNlIG5leHRDaGFuZ2U9TWF0aC5taW4odG8sbmV4dENoYW5nZSl9fXZhciBtPTA7d2hpbGUocG9z
			PGxlbil7aWYobmV4dENoYW5nZT09cG9zKWFkdmFuY2VNYXJrcygpO3ZhciB1cHRvPU1hdGgubWlu
			KGxlbixuZXh0Q2hhbmdlKTt3aGlsZSh0cnVlKXtpZih0ZXh0KXt2YXIgZW5kPXBvcyt0ZXh0Lmxl
			bmd0aDt2YXIgYXBwbGllZFN0eWxlPXN0eWxlO2Zvcih2YXIgaj0wO2o8bWFya3MubGVuZ3RoOysr
			ailhcHBsaWVkU3R5bGU9KGFwcGxpZWRTdHlsZT9hcHBsaWVkU3R5bGUrIiAiOiIiKSttYXJrc1tq
			XS5zdHlsZTtzcGFuKGVuZD51cHRvP3RleHQuc2xpY2UoMCx1cHRvLXBvcyk6dGV4dCxhcHBsaWVk
			U3R5bGUpO2lmKGVuZD49dXB0byl7dGV4dD10ZXh0LnNsaWNlKHVwdG8tcG9zKTtwb3M9dXB0bzti
			cmVha31wb3M9ZW5kfXRleHQ9c3RbaSsrXTsgc3R5bGU9c3R5bGVUb0NsYXNzKHN0W2krK10pfX19
			cmV0dXJuIGh0bWwuam9pbigiIil9LGNsZWFuVXA6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudD1udWxs
			O2lmKHRoaXMubWFya2VkKWZvcih2YXIgaT0wLGU9dGhpcy5tYXJrZWQubGVuZ3RoO2k8ZTsrK2kp
			dGhpcy5tYXJrZWRbaV0uZGV0YWNoKHRoaXMpfX07ZnVuY3Rpb24gY29weVN0eWxlcyhmcm9tLHRv
			LHNvdXJjZSxkZXN0KXtmb3IodmFyIGk9MCxwb3M9MCxzdGF0ZT0wO3Bvczx0bztpKz0yKXt2YXIg
			cGFydD1zb3VyY2VbaV0sZW5kPXBvcytwYXJ0Lmxlbmd0aDtpZihzdGF0ZT09MCl7aWYoZW5kPmZy
			b20pZGVzdC5wdXNoKHBhcnQuc2xpY2UoZnJvbS1wb3MsTWF0aC5taW4ocGFydC5sZW5ndGgsdG8t
			cG9zKSksc291cmNlW2krMV0pO2lmKGVuZD49ZnJvbSlzdGF0ZT0xfWVsc2UgaWYoc3RhdGU9PTEp
			aWYoZW5kPnRvKWRlc3QucHVzaChwYXJ0LnNsaWNlKDAsdG8tcG9zKSxzb3VyY2VbaSsxXSk7ZWxz
			ZSBkZXN0LnB1c2gocGFydCwgc291cmNlW2krMV0pO3Bvcz1lbmR9fWZ1bmN0aW9uIExlYWZDaHVu
			ayhsaW5lcyl7dGhpcy5saW5lcz1saW5lczt0aGlzLnBhcmVudD1udWxsO2Zvcih2YXIgaT0wLGU9
			bGluZXMubGVuZ3RoLGhlaWdodD0wO2k8ZTsrK2kpe2xpbmVzW2ldLnBhcmVudD10aGlzO2hlaWdo
			dCs9bGluZXNbaV0uaGVpZ2h0fXRoaXMuaGVpZ2h0PWhlaWdodH1MZWFmQ2h1bmsucHJvdG90eXBl
			PXtjaHVua1NpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saW5lcy5sZW5ndGh9LHJlbW92ZTpm
			dW5jdGlvbihhdCxuLGNhbGxiYWNrcyl7Zm9yKHZhciBpPWF0LGU9YXQrbjtpPGU7KytpKXt2YXIg
			bGluZT10aGlzLmxpbmVzW2ldO3RoaXMuaGVpZ2h0LT1saW5lLmhlaWdodDtsaW5lLmNsZWFuVXAo
			KTtpZihsaW5lLmhhbmRsZXJzKWZvcih2YXIgaj0wO2o8bGluZS5oYW5kbGVycy5sZW5ndGg7Kytq
			KWNhbGxiYWNrcy5wdXNoKGxpbmUuaGFuZGxlcnNbal0pfXRoaXMubGluZXMuc3BsaWNlKGF0LG4p
			fSxjb2xsYXBzZTpmdW5jdGlvbihsaW5lcyl7bGluZXMuc3BsaWNlLmFwcGx5KGxpbmVzLCBbbGlu
			ZXMubGVuZ3RoLDBdLmNvbmNhdCh0aGlzLmxpbmVzKSl9LGluc2VydEhlaWdodDpmdW5jdGlvbihh
			dCxsaW5lcyxoZWlnaHQpe3RoaXMuaGVpZ2h0Kz1oZWlnaHQ7dGhpcy5saW5lcy5zcGxpY2UuYXBw
			bHkodGhpcy5saW5lcyxbYXQsMF0uY29uY2F0KGxpbmVzKSk7Zm9yKHZhciBpPTAsZT1saW5lcy5s
			ZW5ndGg7aTxlOysraSlsaW5lc1tpXS5wYXJlbnQ9dGhpc30saXRlck46ZnVuY3Rpb24oYXQsbixv
			cCl7Zm9yKHZhciBlPWF0K247YXQ8ZTsrK2F0KWlmKG9wKHRoaXMubGluZXNbYXRdKSlyZXR1cm4g
			dHJ1ZX19O2Z1bmN0aW9uIEJyYW5jaENodW5rKGNoaWxkcmVuKXt0aGlzLmNoaWxkcmVuPWNoaWxk
			cmVuO3ZhciBzaXplPTAsaGVpZ2h0PTA7Zm9yKHZhciBpPTAsZT1jaGlsZHJlbi5sZW5ndGg7aTxl
			OysraSl7dmFyIGNoPWNoaWxkcmVuW2ldO3NpemUrPWNoLmNodW5rU2l6ZSgpO2hlaWdodCs9Y2gu
			aGVpZ2h0O2NoLnBhcmVudD10aGlzfXRoaXMuc2l6ZT1zaXplO3RoaXMuaGVpZ2h0PSBoZWlnaHQ7
			dGhpcy5wYXJlbnQ9bnVsbH1CcmFuY2hDaHVuay5wcm90b3R5cGU9e2NodW5rU2l6ZTpmdW5jdGlv
			bigpe3JldHVybiB0aGlzLnNpemV9LHJlbW92ZTpmdW5jdGlvbihhdCxuLGNhbGxiYWNrcyl7dGhp
			cy5zaXplLT1uO2Zvcih2YXIgaT0wO2k8dGhpcy5jaGlsZHJlbi5sZW5ndGg7KytpKXt2YXIgY2hp
			bGQ9dGhpcy5jaGlsZHJlbltpXSxzej1jaGlsZC5jaHVua1NpemUoKTtpZihhdDxzeil7dmFyIHJt
			PU1hdGgubWluKG4sc3otYXQpLG9sZEhlaWdodD1jaGlsZC5oZWlnaHQ7Y2hpbGQucmVtb3ZlKGF0
			LHJtLGNhbGxiYWNrcyk7dGhpcy5oZWlnaHQtPW9sZEhlaWdodC1jaGlsZC5oZWlnaHQ7aWYoc3o9
			PXJtKXt0aGlzLmNoaWxkcmVuLnNwbGljZShpLS0sMSk7Y2hpbGQucGFyZW50PW51bGx9aWYoKG4t
			PXJtKT09MClicmVhazthdD0wfWVsc2UgYXQtPXN6fWlmKHRoaXMuc2l6ZS1uPDI1KXt2YXIgbGlu
			ZXM9W107dGhpcy5jb2xsYXBzZShsaW5lcyk7dGhpcy5jaGlsZHJlbj0gW25ldyBMZWFmQ2h1bmso
			bGluZXMpXTt0aGlzLmNoaWxkcmVuWzBdLnBhcmVudD10aGlzfX0sY29sbGFwc2U6ZnVuY3Rpb24o
			bGluZXMpe2Zvcih2YXIgaT0wLGU9dGhpcy5jaGlsZHJlbi5sZW5ndGg7aTxlOysraSl0aGlzLmNo
			aWxkcmVuW2ldLmNvbGxhcHNlKGxpbmVzKX0saW5zZXJ0OmZ1bmN0aW9uKGF0LGxpbmVzKXt2YXIg
			aGVpZ2h0PTA7Zm9yKHZhciBpPTAsZT1saW5lcy5sZW5ndGg7aTxlOysraSloZWlnaHQrPWxpbmVz
			W2ldLmhlaWdodDt0aGlzLmluc2VydEhlaWdodChhdCxsaW5lcyxoZWlnaHQpfSxpbnNlcnRIZWln
			aHQ6ZnVuY3Rpb24oYXQsbGluZXMsaGVpZ2h0KXt0aGlzLnNpemUrPWxpbmVzLmxlbmd0aDt0aGlz
			LmhlaWdodCs9aGVpZ2h0O2Zvcih2YXIgaT0wLGU9dGhpcy5jaGlsZHJlbi5sZW5ndGg7aTxlOysr
			aSl7dmFyIGNoaWxkPXRoaXMuY2hpbGRyZW5baV0sc3o9Y2hpbGQuY2h1bmtTaXplKCk7aWYoYXQ8
			PXN6KXtjaGlsZC5pbnNlcnRIZWlnaHQoYXQsbGluZXMsIGhlaWdodCk7aWYoY2hpbGQubGluZXMm
			JmNoaWxkLmxpbmVzLmxlbmd0aD41MCl7d2hpbGUoY2hpbGQubGluZXMubGVuZ3RoPjUwKXt2YXIg
			c3BpbGxlZD1jaGlsZC5saW5lcy5zcGxpY2UoY2hpbGQubGluZXMubGVuZ3RoLTI1LDI1KTt2YXIg
			bmV3bGVhZj1uZXcgTGVhZkNodW5rKHNwaWxsZWQpO2NoaWxkLmhlaWdodC09bmV3bGVhZi5oZWln
			aHQ7dGhpcy5jaGlsZHJlbi5zcGxpY2UoaSsxLDAsbmV3bGVhZik7bmV3bGVhZi5wYXJlbnQ9dGhp
			c310aGlzLm1heWJlU3BpbGwoKX1icmVha31hdC09c3p9fSxtYXliZVNwaWxsOmZ1bmN0aW9uKCl7
			aWYodGhpcy5jaGlsZHJlbi5sZW5ndGg8PTEwKXJldHVybjt2YXIgbWU9dGhpcztkb3t2YXIgc3Bp
			bGxlZD1tZS5jaGlsZHJlbi5zcGxpY2UobWUuY2hpbGRyZW4ubGVuZ3RoLTUsNSk7dmFyIHNpYmxp
			bmc9bmV3IEJyYW5jaENodW5rKHNwaWxsZWQpO2lmKCFtZS5wYXJlbnQpe3ZhciBjb3B5PW5ldyBC
			cmFuY2hDaHVuayhtZS5jaGlsZHJlbik7IGNvcHkucGFyZW50PW1lO21lLmNoaWxkcmVuPVtjb3B5
			LHNpYmxpbmddO21lPWNvcHl9ZWxzZXttZS5zaXplLT1zaWJsaW5nLnNpemU7bWUuaGVpZ2h0LT1z
			aWJsaW5nLmhlaWdodDt2YXIgbXlJbmRleD1pbmRleE9mKG1lLnBhcmVudC5jaGlsZHJlbixtZSk7
			bWUucGFyZW50LmNoaWxkcmVuLnNwbGljZShteUluZGV4KzEsMCxzaWJsaW5nKX1zaWJsaW5nLnBh
			cmVudD1tZS5wYXJlbnR9d2hpbGUobWUuY2hpbGRyZW4ubGVuZ3RoPjEwKTttZS5wYXJlbnQubWF5
			YmVTcGlsbCgpfSxpdGVyOmZ1bmN0aW9uKGZyb20sdG8sb3Ape3RoaXMuaXRlck4oZnJvbSx0by1m
			cm9tLG9wKX0saXRlck46ZnVuY3Rpb24oYXQsbixvcCl7Zm9yKHZhciBpPTAsZT10aGlzLmNoaWxk
			cmVuLmxlbmd0aDtpPGU7KytpKXt2YXIgY2hpbGQ9dGhpcy5jaGlsZHJlbltpXSxzej1jaGlsZC5j
			aHVua1NpemUoKTtpZihhdDxzeil7dmFyIHVzZWQ9TWF0aC5taW4obixzei1hdCk7aWYoY2hpbGQu
			aXRlck4oYXQsdXNlZCwgb3ApKXJldHVybiB0cnVlO2lmKChuLT11c2VkKT09MClicmVhazthdD0w
			fWVsc2UgYXQtPXN6fX19O2Z1bmN0aW9uIGdldExpbmVBdChjaHVuayxuKXt3aGlsZSghY2h1bmsu
			bGluZXMpZm9yKHZhciBpPTA7OysraSl7dmFyIGNoaWxkPWNodW5rLmNoaWxkcmVuW2ldLHN6PWNo
			aWxkLmNodW5rU2l6ZSgpO2lmKG48c3ope2NodW5rPWNoaWxkO2JyZWFrfW4tPXN6fXJldHVybiBj
			aHVuay5saW5lc1tuXX1mdW5jdGlvbiBsaW5lTm8obGluZSl7aWYobGluZS5wYXJlbnQ9PW51bGwp
			cmV0dXJuIG51bGw7dmFyIGN1cj1saW5lLnBhcmVudCxubz1pbmRleE9mKGN1ci5saW5lcyxsaW5l
			KTtmb3IodmFyIGNodW5rPWN1ci5wYXJlbnQ7Y2h1bms7Y3VyPWNodW5rLGNodW5rPWNodW5rLnBh
			cmVudClmb3IodmFyIGk9MCxlPWNodW5rLmNoaWxkcmVuLmxlbmd0aDs7KytpKXtpZihjaHVuay5j
			aGlsZHJlbltpXT09Y3VyKWJyZWFrO25vKz1jaHVuay5jaGlsZHJlbltpXS5jaHVua1NpemUoKX1y
			ZXR1cm4gbm99IGZ1bmN0aW9uIGxpbmVBdEhlaWdodChjaHVuayxoKXt2YXIgbj0wO291dGVyOmRv
			e2Zvcih2YXIgaT0wLGU9Y2h1bmsuY2hpbGRyZW4ubGVuZ3RoO2k8ZTsrK2kpe3ZhciBjaGlsZD1j
			aHVuay5jaGlsZHJlbltpXSxjaD1jaGlsZC5oZWlnaHQ7aWYoaDxjaCl7Y2h1bms9Y2hpbGQ7Y29u
			dGludWUgb3V0ZXJ9aC09Y2g7bis9Y2hpbGQuY2h1bmtTaXplKCl9cmV0dXJuIG59d2hpbGUoIWNo
			dW5rLmxpbmVzKTtmb3IodmFyIGk9MCxlPWNodW5rLmxpbmVzLmxlbmd0aDtpPGU7KytpKXt2YXIg
			bGluZT1jaHVuay5saW5lc1tpXSxsaD1saW5lLmhlaWdodDtpZihoPGxoKWJyZWFrO2gtPWxofXJl
			dHVybiBuK2l9ZnVuY3Rpb24gaGVpZ2h0QXRMaW5lKGNodW5rLG4pe3ZhciBoPTA7b3V0ZXI6ZG97
			Zm9yKHZhciBpPTAsZT1jaHVuay5jaGlsZHJlbi5sZW5ndGg7aTxlOysraSl7dmFyIGNoaWxkPWNo
			dW5rLmNoaWxkcmVuW2ldLHN6PWNoaWxkLmNodW5rU2l6ZSgpO2lmKG48c3ope2NodW5rPWNoaWxk
			OyBjb250aW51ZSBvdXRlcn1uLT1zejtoKz1jaGlsZC5oZWlnaHR9cmV0dXJuIGh9d2hpbGUoIWNo
			dW5rLmxpbmVzKTtmb3IodmFyIGk9MDtpPG47KytpKWgrPWNodW5rLmxpbmVzW2ldLmhlaWdodDty
			ZXR1cm4gaH1mdW5jdGlvbiBIaXN0b3J5KCl7dGhpcy50aW1lPTA7dGhpcy5kb25lPVtdO3RoaXMu
			dW5kb25lPVtdfUhpc3RvcnkucHJvdG90eXBlPXthZGRDaGFuZ2U6ZnVuY3Rpb24oc3RhcnQsYWRk
			ZWQsb2xkKXt0aGlzLnVuZG9uZS5sZW5ndGg9MDt2YXIgdGltZT0rbmV3IERhdGUsY3VyPXRoaXMu
			ZG9uZVt0aGlzLmRvbmUubGVuZ3RoLTFdLGxhc3Q9Y3VyJiZjdXJbY3VyLmxlbmd0aC0xXTt2YXIg
			ZHRpbWU9dGltZS10aGlzLnRpbWU7aWYoZHRpbWU+NDAwfHwhbGFzdCl0aGlzLmRvbmUucHVzaChb
			e3N0YXJ0OnN0YXJ0LGFkZGVkOmFkZGVkLG9sZDpvbGR9XSk7ZWxzZSBpZihsYXN0LnN0YXJ0PnN0
			YXJ0K29sZC5sZW5ndGh8fGxhc3Quc3RhcnQrbGFzdC5hZGRlZDxzdGFydC1sYXN0LmFkZGVkKyBs
			YXN0Lm9sZC5sZW5ndGgpY3VyLnB1c2goe3N0YXJ0OnN0YXJ0LGFkZGVkOmFkZGVkLG9sZDpvbGR9
			KTtlbHNle3ZhciBvbGRvZmY9MDtpZihzdGFydDxsYXN0LnN0YXJ0KXtmb3IodmFyIGk9bGFzdC5z
			dGFydC1zdGFydC0xO2k+PTA7LS1pKWxhc3Qub2xkLnVuc2hpZnQob2xkW2ldKTtsYXN0LmFkZGVk
			Kz1sYXN0LnN0YXJ0LXN0YXJ0O2xhc3Quc3RhcnQ9c3RhcnR9ZWxzZSBpZihsYXN0LnN0YXJ0PHN0
			YXJ0KXtvbGRvZmY9c3RhcnQtbGFzdC5zdGFydDthZGRlZCs9b2xkb2ZmfWZvcih2YXIgaT1sYXN0
			LmFkZGVkLW9sZG9mZixlPW9sZC5sZW5ndGg7aTxlOysraSlsYXN0Lm9sZC5wdXNoKG9sZFtpXSk7
			aWYobGFzdC5hZGRlZDxhZGRlZClsYXN0LmFkZGVkPWFkZGVkfXRoaXMudGltZT10aW1lfX07ZnVu
			Y3Rpb24gc3RvcE1ldGhvZCgpe2Vfc3RvcCh0aGlzKX1mdW5jdGlvbiBhZGRTdG9wKGV2ZW50KXtp
			ZighZXZlbnQuc3RvcClldmVudC5zdG9wPXN0b3BNZXRob2Q7cmV0dXJuIGV2ZW50fSBmdW5jdGlv
			biBlX3ByZXZlbnREZWZhdWx0KGUpe2lmKGUucHJldmVudERlZmF1bHQpZS5wcmV2ZW50RGVmYXVs
			dCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZT1mYWxzZX1mdW5jdGlvbiBlX3N0b3BQcm9wYWdhdGlvbihl
			KXtpZihlLnN0b3BQcm9wYWdhdGlvbillLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgZS5jYW5jZWxC
			dWJibGU9dHJ1ZX1mdW5jdGlvbiBlX3N0b3AoZSl7ZV9wcmV2ZW50RGVmYXVsdChlKTtlX3N0b3BQ
			cm9wYWdhdGlvbihlKX1Db2RlTWlycm9yLmVfc3RvcD1lX3N0b3A7Q29kZU1pcnJvci5lX3ByZXZl
			bnREZWZhdWx0PWVfcHJldmVudERlZmF1bHQ7Q29kZU1pcnJvci5lX3N0b3BQcm9wYWdhdGlvbj1l
			X3N0b3BQcm9wYWdhdGlvbjtmdW5jdGlvbiBlX3RhcmdldChlKXtyZXR1cm4gZS50YXJnZXR8fGUu
			c3JjRWxlbWVudH1mdW5jdGlvbiBlX2J1dHRvbihlKXtpZihlLndoaWNoKXJldHVybiBlLndoaWNo
			O2Vsc2UgaWYoZS5idXR0b24mMSlyZXR1cm4gMTtlbHNlIGlmKGUuYnV0dG9uJiAyKXJldHVybiAz
			O2Vsc2UgaWYoZS5idXR0b24mNClyZXR1cm4gMn1mdW5jdGlvbiBlX3Byb3AoZSxwcm9wKXt2YXIg
			b3ZlcnJpZGRlbj1lLm92ZXJyaWRlJiZlLm92ZXJyaWRlLmhhc093blByb3BlcnR5KHByb3ApO3Jl
			dHVybiBvdmVycmlkZGVuP2Uub3ZlcnJpZGVbcHJvcF06ZVtwcm9wXX1mdW5jdGlvbiBjb25uZWN0
			KG5vZGUsdHlwZSxoYW5kbGVyLGRpc2Nvbm5lY3Qpe2lmKHR5cGVvZiBub2RlLmFkZEV2ZW50TGlz
			dGVuZXI9PSJmdW5jdGlvbiIpe25vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLGhhbmRsZXIsZmFs
			c2UpO2lmKGRpc2Nvbm5lY3QpcmV0dXJuIGZ1bmN0aW9uKCl7bm9kZS5yZW1vdmVFdmVudExpc3Rl
			bmVyKHR5cGUsaGFuZGxlcixmYWxzZSl9fWVsc2V7dmFyIHdyYXBIYW5kbGVyPWZ1bmN0aW9uKGV2
			ZW50KXtoYW5kbGVyKGV2ZW50fHx3aW5kb3cuZXZlbnQpfTtub2RlLmF0dGFjaEV2ZW50KCJvbiIr
			dHlwZSx3cmFwSGFuZGxlcik7aWYoZGlzY29ubmVjdClyZXR1cm4gZnVuY3Rpb24oKXtub2RlLmRl
			dGFjaEV2ZW50KCJvbiIrIHR5cGUsd3JhcEhhbmRsZXIpfX19Q29kZU1pcnJvci5jb25uZWN0PWNv
			bm5lY3Q7ZnVuY3Rpb24gRGVsYXllZCgpe3RoaXMuaWQ9bnVsbH1EZWxheWVkLnByb3RvdHlwZT17
			c2V0OmZ1bmN0aW9uKG1zLGYpe2NsZWFyVGltZW91dCh0aGlzLmlkKTt0aGlzLmlkPXNldFRpbWVv
			dXQoZixtcyl9fTt2YXIgUGFzcz1Db2RlTWlycm9yLlBhc3M9e3RvU3RyaW5nOmZ1bmN0aW9uKCl7
			cmV0dXJuIkNvZGVNaXJyb3IuUGFzcyJ9fTt2YXIgZHJhZ0FuZERyb3A9ZnVuY3Rpb24oKXtpZigv
			TVNJRSBbMS04XVxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXJldHVybiBmYWxzZTt2YXIg
			ZGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3JldHVybiJkcmFnZ2FibGUiaW4gZGl2
			fSgpO3ZhciBnZWNrbz0vZ2Vja29cL1xkezd9L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTt2
			YXIgaWU9L01TSUUgXGQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7dmFyIGllX2x0OT0vTVNJ
			RSBbMS04XVxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyB2YXIgd2Via2l0PS9XZWJLaXRc
			Ly8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTt2YXIgbGluZVNlcD0iXG4iOyhmdW5jdGlvbigp
			e3ZhciB0ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZXh0YXJlYSIpO3RlLnZhbHVlPSJmb29c
			bmJhciI7aWYodGUudmFsdWUuaW5kZXhPZigiXHIiKT4tMSlsaW5lU2VwPSJcclxuIn0pKCk7ZnVu
			Y3Rpb24gY291bnRDb2x1bW4oc3RyaW5nLGVuZCx0YWJTaXplKXtpZihlbmQ9PW51bGwpe2VuZD1z
			dHJpbmcuc2VhcmNoKC9bXlxzXHUwMGEwXS8pO2lmKGVuZD09LTEpZW5kPXN0cmluZy5sZW5ndGh9
			Zm9yKHZhciBpPTAsbj0wO2k8ZW5kOysraSlpZihzdHJpbmcuY2hhckF0KGkpPT0iXHQiKW4rPXRh
			YlNpemUtbiV0YWJTaXplO2Vsc2UrK247cmV0dXJuIG59ZnVuY3Rpb24gY29tcHV0ZWRTdHlsZShl
			bHQpe2lmKGVsdC5jdXJyZW50U3R5bGUpcmV0dXJuIGVsdC5jdXJyZW50U3R5bGU7cmV0dXJuIHdp
			bmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsdCwgbnVsbCl9ZnVuY3Rpb24gZWx0T2Zmc2V0KG5vZGUs
			c2NyZWVuKXt2YXIgYm9kPW5vZGUub3duZXJEb2N1bWVudC5ib2R5O3ZhciB4PTAseT0wLHNraXBC
			b2R5PWZhbHNlO2Zvcih2YXIgbj1ub2RlO247bj1uLm9mZnNldFBhcmVudCl7dmFyIG9sPW4ub2Zm
			c2V0TGVmdCxvdD1uLm9mZnNldFRvcDtpZihuPT1ib2Qpe3grPU1hdGguYWJzKG9sKTt5Kz1NYXRo
			LmFicyhvdCl9ZWxzZSB4Kz1vbCx5Kz1vdDtpZihzY3JlZW4mJmNvbXB1dGVkU3R5bGUobikucG9z
			aXRpb249PSJmaXhlZCIpc2tpcEJvZHk9dHJ1ZX12YXIgZT1zY3JlZW4mJiFza2lwQm9keT9udWxs
			OmJvZDtmb3IodmFyIG49bm9kZS5wYXJlbnROb2RlO24hPWU7bj1uLnBhcmVudE5vZGUpaWYobi5z
			Y3JvbGxMZWZ0IT1udWxsKXt4LT1uLnNjcm9sbExlZnQ7eS09bi5zY3JvbGxUb3B9cmV0dXJue2xl
			ZnQ6eCx0b3A6eX19aWYoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50
			UmVjdCE9bnVsbCllbHRPZmZzZXQ9IGZ1bmN0aW9uKG5vZGUsc2NyZWVuKXt0cnl7dmFyIGJveD1u
			b2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2JveD17dG9wOmJveC50b3AsbGVmdDpib3gubGVm
			dH19Y2F0Y2goZSl7Ym94PXt0b3A6MCxsZWZ0OjB9fWlmKCFzY3JlZW4paWYod2luZG93LnBhZ2VZ
			T2Zmc2V0PT1udWxsKXt2YXIgdD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnR8fGRvY3VtZW50LmJv
			ZHkucGFyZW50Tm9kZTtpZih0LnNjcm9sbFRvcD09bnVsbCl0PWRvY3VtZW50LmJvZHk7Ym94LnRv
			cCs9dC5zY3JvbGxUb3A7Ym94LmxlZnQrPXQuc2Nyb2xsTGVmdH1lbHNle2JveC50b3ArPXdpbmRv
			dy5wYWdlWU9mZnNldDtib3gubGVmdCs9d2luZG93LnBhZ2VYT2Zmc2V0fXJldHVybiBib3h9O2Z1
			bmN0aW9uIGVsdFRleHQobm9kZSl7cmV0dXJuIG5vZGUudGV4dENvbnRlbnR8fG5vZGUuaW5uZXJU
			ZXh0fHxub2RlLm5vZGVWYWx1ZXx8IiJ9ZnVuY3Rpb24gc2VsZWN0SW5wdXQobm9kZSl7aWYoaW9z
			KXtub2RlLnNlbGVjdGlvblN0YXJ0PSAwO25vZGUuc2VsZWN0aW9uRW5kPW5vZGUudmFsdWUubGVu
			Z3RofWVsc2Ugbm9kZS5zZWxlY3QoKX1mdW5jdGlvbiBwb3NFcShhLGIpe3JldHVybiBhLmxpbmU9
			PWIubGluZSYmYS5jaD09Yi5jaH1mdW5jdGlvbiBwb3NMZXNzKGEsYil7cmV0dXJuIGEubGluZTxi
			LmxpbmV8fGEubGluZT09Yi5saW5lJiZhLmNoPGIuY2h9ZnVuY3Rpb24gY29weVBvcyh4KXtyZXR1
			cm57bGluZTp4LmxpbmUsY2g6eC5jaH19dmFyIGVzY2FwZUVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRl
			RWxlbWVudCgicHJlIik7ZnVuY3Rpb24gaHRtbEVzY2FwZShzdHIpe2VzY2FwZUVsZW1lbnQudGV4
			dENvbnRlbnQ9c3RyO3JldHVybiBlc2NhcGVFbGVtZW50LmlubmVySFRNTH1pZihodG1sRXNjYXBl
			KCJhIik9PSJcbmEiKWh0bWxFc2NhcGU9ZnVuY3Rpb24oc3RyKXtlc2NhcGVFbGVtZW50LnRleHRD
			b250ZW50PXN0cjtyZXR1cm4gZXNjYXBlRWxlbWVudC5pbm5lckhUTUwuc2xpY2UoMSl9O2Vsc2Ug
			aWYoaHRtbEVzY2FwZSgiXHQiKSE9ICJcdCIpaHRtbEVzY2FwZT1mdW5jdGlvbihzdHIpe2VzY2Fw
			ZUVsZW1lbnQuaW5uZXJIVE1MPSIiO2VzY2FwZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQu
			Y3JlYXRlVGV4dE5vZGUoc3RyKSk7cmV0dXJuIGVzY2FwZUVsZW1lbnQuaW5uZXJIVE1MfTtDb2Rl
			TWlycm9yLmh0bWxFc2NhcGU9aHRtbEVzY2FwZTtmdW5jdGlvbiBlZGl0RW5kKGZyb20sdG8pe2lm
			KCF0bylyZXR1cm4gMDtpZighZnJvbSlyZXR1cm4gdG8ubGVuZ3RoO2Zvcih2YXIgaT1mcm9tLmxl
			bmd0aCxqPXRvLmxlbmd0aDtpPj0wJiZqPj0wOy0taSwtLWopaWYoZnJvbS5jaGFyQXQoaSkhPXRv
			LmNoYXJBdChqKSlicmVhaztyZXR1cm4gaisxfWZ1bmN0aW9uIGluZGV4T2YoY29sbGVjdGlvbixl
			bHQpe2lmKGNvbGxlY3Rpb24uaW5kZXhPZilyZXR1cm4gY29sbGVjdGlvbi5pbmRleE9mKGVsdCk7
			Zm9yKHZhciBpPTAsZT1jb2xsZWN0aW9uLmxlbmd0aDtpPGU7KytpKWlmKGNvbGxlY3Rpb25baV09
			PWVsdClyZXR1cm4gaTsgcmV0dXJuLTF9ZnVuY3Rpb24gaXNXb3JkQ2hhcihjaCl7cmV0dXJuL1x3
			Ly50ZXN0KGNoKXx8Y2gudG9VcHBlckNhc2UoKSE9Y2gudG9Mb3dlckNhc2UoKX12YXIgc3BsaXRM
			aW5lcz0iXG5cbmIiLnNwbGl0KC9cbi8pLmxlbmd0aCE9Mz9mdW5jdGlvbihzdHJpbmcpe3ZhciBw
			b3M9MCxubCxyZXN1bHQ9W107d2hpbGUoKG5sPXN0cmluZy5pbmRleE9mKCJcbiIscG9zKSk+LTEp
			e3Jlc3VsdC5wdXNoKHN0cmluZy5zbGljZShwb3Msc3RyaW5nLmNoYXJBdChubC0xKT09IlxyIj9u
			bC0xOm5sKSk7cG9zPW5sKzF9cmVzdWx0LnB1c2goc3RyaW5nLnNsaWNlKHBvcykpO3JldHVybiBy
			ZXN1bHR9OmZ1bmN0aW9uKHN0cmluZyl7cmV0dXJuIHN0cmluZy5zcGxpdCgvXHI/XG4vKX07Q29k
			ZU1pcnJvci5zcGxpdExpbmVzPXNwbGl0TGluZXM7dmFyIGhhc1NlbGVjdGlvbj13aW5kb3cuZ2V0
			U2VsZWN0aW9uP2Z1bmN0aW9uKHRlKXt0cnl7cmV0dXJuIHRlLnNlbGVjdGlvblN0YXJ0IT10ZS5z
			ZWxlY3Rpb25FbmR9Y2F0Y2goZSl7cmV0dXJuIGZhbHNlfX06IGZ1bmN0aW9uKHRlKXt0cnl7dmFy
			IHJhbmdlPXRlLm93bmVyRG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCl9Y2F0Y2goZSl7
			fWlmKCFyYW5nZXx8cmFuZ2UucGFyZW50RWxlbWVudCgpIT10ZSlyZXR1cm4gZmFsc2U7cmV0dXJu
			IHJhbmdlLmNvbXBhcmVFbmRQb2ludHMoIlN0YXJ0VG9FbmQiLHJhbmdlKSE9MH07Q29kZU1pcnJv
			ci5kZWZpbmVNb2RlKCJudWxsIixmdW5jdGlvbigpe3JldHVybnt0b2tlbjpmdW5jdGlvbihzdHJl
			YW0pe3N0cmVhbS5za2lwVG9FbmQoKX19fSk7Q29kZU1pcnJvci5kZWZpbmVNSU1FKCJ0ZXh0L3Bs
			YWluIiwibnVsbCIpO3ZhciBrZXlOYW1lcz17MzoiRW50ZXIiLDg6IkJhY2tzcGFjZSIsOToiVGFi
			IiwxMzoiRW50ZXIiLDE2OiJTaGlmdCIsMTc6IkN0cmwiLDE4OiJBbHQiLDE5OiJQYXVzZSIsMjA6
			IkNhcHNMb2NrIiwyNzoiRXNjIiwzMjoiU3BhY2UiLDMzOiJQYWdlVXAiLDM0OiJQYWdlRG93biIs
			MzU6IkVuZCIsMzY6IkhvbWUiLDM3OiJMZWZ0IiwgMzg6IlVwIiwzOToiUmlnaHQiLDQwOiJEb3du
			Iiw0NDoiUHJpbnRTY3JuIiw0NToiSW5zZXJ0Iiw0NjoiRGVsZXRlIiw1OToiOyIsOTE6Ik1vZCIs
			OTI6Ik1vZCIsOTM6Ik1vZCIsMTg2OiI7IiwxODc6Ij0iLDE4ODoiLCIsMTg5OiItIiwxOTA6Ii4i
			LDE5MToiLyIsMTkyOiJgIiwyMTk6IlsiLDIyMDoiXFwiLDIyMToiXSIsMjIyOiInIiw2MzI3Njoi
			UGFnZVVwIiw2MzI3NzoiUGFnZURvd24iLDYzMjc1OiJFbmQiLDYzMjczOiJIb21lIiw2MzIzNDoi
			TGVmdCIsNjMyMzI6IlVwIiw2MzIzNToiUmlnaHQiLDYzMjMzOiJEb3duIiw2MzMwMjoiSW5zZXJ0
			Iiw2MzI3MjoiRGVsZXRlIn07Q29kZU1pcnJvci5rZXlOYW1lcz1rZXlOYW1lczsoZnVuY3Rpb24o
			KXtmb3IodmFyIGk9MDtpPDEwO2krKylrZXlOYW1lc1tpKzQ4XT1TdHJpbmcoaSk7Zm9yKHZhciBp
			PTY1O2k8PTkwO2krKylrZXlOYW1lc1tpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGkpO2Zvcih2YXIg
			aT0xO2k8PTEyO2krKylrZXlOYW1lc1tpKyAxMTFdPWtleU5hbWVzW2krNjMyMzVdPSJGIitpfSko
			KTtyZXR1cm4gQ29kZU1pcnJvcn0oKTsK]]></Resource>
    <Resource ID="a7280e78-723d-4c0e-07b3-fb4b16697f8a" Name="Codeeditor_16x16_.png" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
			bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
			bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
			eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
			NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
			dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
			dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
			IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
			ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
			cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
			SUQ9InhtcC5paWQ6ODhCMTE2RkQ3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciIHhtcE1NOkRvY3Vt
			ZW50SUQ9InhtcC5kaWQ6ODhCMTE2RkU3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciPiA8eG1wTU06
			RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEIxMTZGQjdCRUExMUUyQUQ1
			RkRCODBBMDk4Q0I2NyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEIxMTZGQzdCRUExMUUy
			QUQ1RkRCODBBMDk4Q0I2NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
			bWV0YT4gPD94cGFja2V0IGVuZD0iciI/Ptr5jzAAAADRSURBVHjaYpw0aZInAwPDXCCWZCANPAfi
			ZCYyNTNA9cxlgWmePHkySbpzc3PBhjAxUAhYcMr4BDP8V1AGMxkf3GVg2LIWqzLsLrB3ZfjvH8bA
			+O0rGIPYIDHiXCAsyvA/t4yB4cBuBoZ5UyEuIMsLyABqEPFeIAEQZ4CKOthrxBnw9jUDw5WLDAyy
			ChCNQPw/NZ+BwdKO+DBgnNwJDMhyhv95FRCBd28ZGI4fIiEQga5gbCihYhgQiEZQrpKEpm1SwQuQ
			C1JADDI0PwVlZ4AAAwCgjTPF4WOwaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="c43c7089-459d-acc2-f636-fb4b23f22d5b" Name="Codeeditor_16x16_.png" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
			bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
			bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
			eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
			NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
			dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
			dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
			IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
			ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
			cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
			SUQ9InhtcC5paWQ6ODhCMTE2RkQ3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciIHhtcE1NOkRvY3Vt
			ZW50SUQ9InhtcC5kaWQ6ODhCMTE2RkU3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciPiA8eG1wTU06
			RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEIxMTZGQjdCRUExMUUyQUQ1
			RkRCODBBMDk4Q0I2NyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEIxMTZGQzdCRUExMUUy
			QUQ1RkRCODBBMDk4Q0I2NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
			bWV0YT4gPD94cGFja2V0IGVuZD0iciI/Ptr5jzAAAADRSURBVHjaYpw0aZInAwPDXCCWZCANPAfi
			ZCYyNTNA9cxlgWmePHkySbpzc3PBhjAxUAhYcMr4BDP8V1AGMxkf3GVg2LIWqzLsLrB3ZfjvH8bA
			+O0rGIPYIDHiXCAsyvA/t4yB4cBuBoZ5UyEuIMsLyABqEPFeIAEQZ4CKOthrxBnw9jUDw5WLDAyy
			ChCNQPw/NZ+BwdKO+DBgnNwJDMhyhv95FRCBd28ZGI4fIiEQga5gbCihYhgQiEZQrpKEpm1SwQuQ
			C1JADDI0PwVlZ4AAAwCgjTPF4WOwaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="dd4fb80b-53fc-8629-90b4-3d580864e094" Name="cleditor" Type="css"><![CDATA[LmNsZWRpdG9yTWFpbiB7Ym9yZGVyOjFweCBzb2xpZCAjOTk5OyBwYWRkaW5nOjAgMXB4IDFweDsg
			YmFja2dyb3VuZC1jb2xvcjp3aGl0ZX0NCi5jbGVkaXRvck1haW4gaWZyYW1lIHtib3JkZXI6bm9u
			ZTsgbWFyZ2luOjA7IHBhZGRpbmc6MH0NCi5jbGVkaXRvck1haW4gdGV4dGFyZWEge2JvcmRlcjpu
			b25lOyBtYXJnaW46MDsgcGFkZGluZzowOyBvdmVyZmxvdy15OnNjcm9sbDsgZm9udDoxMHB0IEFy
			aWFsLFZlcmRhbmE7IHJlc2l6ZTpub25lOyBvdXRsaW5lOm5vbmV9DQouY2xlZGl0b3JUb29sYmFy
			IHtiYWNrZ3JvdW5kOiB1cmwoJy85NGVkMWVkMy0xMThmLTljZTEtOGFkMi05OTRhYjVhMDM1MTgu
			cmVzJykgcmVwZWF0fQ0KLmNsZWRpdG9yR3JvdXAge2Zsb2F0OmxlZnQ7IGhlaWdodDoyNnB4fQ0K
			LmNsZWRpdG9yQnV0dG9uIHtmbG9hdDpsZWZ0OyB3aWR0aDoyNHB4OyBoZWlnaHQ6MjRweDsgbWFy
			Z2luOjFweCAwIDFweCAwOyBiYWNrZ3JvdW5kOiB1cmwoJy82MzdlNTRmZC0xNDMxLTBkZWUtMmU4
			Mi1mMjIzZGI5NjA1MDkucmVzJyl9DQouY2xlZGl0b3JEaXNhYmxlZCB7b3BhY2l0eTowLjM7IGZp
			bHRlcjphbHBoYShvcGFjaXR5PTMwKX0NCi5jbGVkaXRvckRpdmlkZXIge2Zsb2F0OmxlZnQ7IHdp
			ZHRoOjFweDsgaGVpZ2h0OjIzcHg7IG1hcmdpbjoxcHggMCAxcHggMDsgYmFja2dyb3VuZDojQ0ND
			fQ0KLmNsZWRpdG9yUG9wdXAge2JvcmRlcjpzb2xpZCAxcHggIzk5OTsgYmFja2dyb3VuZC1jb2xv
			cjp3aGl0ZTsgcG9zaXRpb246YWJzb2x1dGU7IGZvbnQ6MTBwdCBBcmlhbCxWZXJkYW5hOyBjdXJz
			b3I6ZGVmYXVsdDsgei1pbmRleDoxMDAwMH0NCi5jbGVkaXRvckxpc3QgZGl2IHtwYWRkaW5nOjJw
			eCA0cHggMnB4IDRweH0NCi5jbGVkaXRvckxpc3QgcCwNCi5jbGVkaXRvckxpc3QgaDEsDQouY2xl
			ZGl0b3JMaXN0IGgyLA0KLmNsZWRpdG9yTGlzdCBoMywNCi5jbGVkaXRvckxpc3QgaDQsDQouY2xl
			ZGl0b3JMaXN0IGg1LA0KLmNsZWRpdG9yTGlzdCBoNiwNCi5jbGVkaXRvckxpc3QgZm9udCB7cGFk
			ZGluZzowOyBtYXJnaW46MDsgYmFja2dyb3VuZC1jb2xvcjpUcmFuc3BhcmVudH0NCi5jbGVkaXRv
			ckNvbG9yIHt3aWR0aDoxNTBweDsgcGFkZGluZzoxcHggMCAwIDFweH0NCi5jbGVkaXRvckNvbG9y
			IGRpdiB7ZmxvYXQ6bGVmdDsgd2lkdGg6MTRweDsgaGVpZ2h0OjE0cHg7IG1hcmdpbjowIDFweCAx
			cHggMH0NCi5jbGVkaXRvclByb21wdCB7YmFja2dyb3VuZC1jb2xvcjojRjZGN0Y5OyBwYWRkaW5n
			OjRweDsgZm9udC1zaXplOjguNXB0fQ0KLmNsZWRpdG9yUHJvbXB0IGlucHV0LA0KLmNsZWRpdG9y
			UHJvbXB0IHRleHRhcmVhIHtmb250OjguNXB0IEFyaWFsLFZlcmRhbmE7fQ0KLmNsZWRpdG9yTXNn
			IHtiYWNrZ3JvdW5kLWNvbG9yOiNGREZDRUU7IHdpZHRoOjE1MHB4OyBwYWRkaW5nOjRweDsgZm9u
			dC1zaXplOjguNXB0fQ0K]]></Resource>
    <Resource ID="e205cbe1-7179-fe66-4f81-ab6d605b20b2" Name="table" Type="gif"><![CDATA[R0lGODlhGAAYAKIEANbT1v///6WmpUpNpf///wAAAAAAAAAAACH5BAEAAAQALAAAAAAYABgAAANQ
			SLrc/jDKSau9TOjNu4DCII4k+T1hqYqnIwBwLMttIwQBgOv5jtcZX2/IAy5esyTMqLgRhUUQdBpg
			EpDKmdXJ6wq3VG8V5ClrMOi0es1uXxIAOw==]]></Resource>
  </Resources>
  <SourceCode><![CDATA[class VDOM_codeeditor(VDOM_object):

	def render(self, contents=""):
		id = u"o_" + (self.id).replace('-', '_')

		display = u"display:none;" if self.visible == "0" else u"display:block;"

		style = u"""z-index: {zind}; top: {top}px; left: {left}px; overflow: visible; position: absolute;
			width: {width}px; height: {height}px; padding: 2px 5px 2px 5px; {display} font: 14px tahoma
			""".format(zind = self.zindex, top = self.top, left = self.left,
					width = self.width, height = self.height, display = display)

		style_area = u"""width:{width}px; height:{height}px""".format(width = self.width, height = self.height)

		if VDOM_CONFIG_1["DEBUG"] == "1":
			debug_info = u"objtype='codeeditor' objname='%s' ver='%s'" % (self.name, self.type.version)
		else:
			debug_info = u""
			
		is_readonly = "true" if self.is_readonly == "1" else "false"

		result = u"""
<style type="text/css">
#%(id)s .CodeMirror-scroll { height: %(height)spx; }
</style>
<div id="%(id)s" style="%(style)s" %(debug_info)s>
	<textarea name="%(name)s" style='%(style_area)s'>%(value)s</textarea>
</div>
<script type="text/javascript">$q(function(){
	if (typeof window.%(id)s_codeeditor !== 'undefined') {
		window.%(id)s_codeeditor.toTextArea();
		delete(window.%(id)s_codeeditor);
	}
	window.%(id)s_codeeditor = CodeMirror.fromTextArea($q('#%(id)s>textarea').get(0), {
		mode: '%(mode)s',
		lineNumbers: true,
		styleActiveLine: true,
		readOnly: %(is_readonly)s,
		onCursorActivity: function() { window.%(id)s_codeeditor.matchHighlight("CodeMirror-matchhighlight"); }
	});
	$q('#%(id)s').parents('form:first').submit(function(){
		window.%(id)s_codeeditor.save();
	});
	window.%(id)s_codeeditor.refresh();

	var el = $('#%(id)s');

	var intervalId = setInterval(function() {
		if (el.is(':visible')) {
			window.%(id)s_codeeditor.refresh();
			clearInterval(intervalId);
		}
	}, 200);
});</script>
			""" % {
				"mode":       self.syntax,
				"id":         id,
				"name":       self.customname or self.name,
				"style":      style,
				"style_area": style_area,
				"value":      unicode(self.value).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;'),
				"width":      self.width,
				"height":     self.height,
				"debug_info": debug_info,
				"is_readonly": is_readonly
			}

		return VDOM_object.render(self, contents=result)

	def get_lines_amount (self, value) : 			
		count = value.count("\n")
		
		return int(count)+1
	
	def get_lines_text (self, value, text_height) :
		
		amount = self.get_lines_amount(value)
		
		lines = \
			u""" <text x="0" y="2" width="28" height="{text_height}" 
					font-family="tahoma" font-size="14" fill="#aaaaaa" align="right"> 
			""".format(text_height=text_height)
		
		i = 1
		while (i <= amount):
			text_y = (i-1)*17
			
			if text_y >= text_height :
				i = i + 1
				break
				
			text_h = 20 if text_y + 20 <= text_height else text_height-text_y
			lines += u""" <tspan y="{y}" height="{height}">{line_number}</tspan> """.format(y=text_y, line_number=i, height=text_h)
			i = i + 1
		
		lines += u" </text> "
		
		return lines
		
	def wysiwyg(self, contents=""):
		
		text_width = int(self.width) - 38
		text_height = int(self.height) - 2

		result = \
			u"""<container name="{name}" id="{id}" visible="{vis}" zindex="{zind}" hierarchy="{hierarchy}" order="{order}"
					top="{top}" left="{left}" width="{width}" height="{height}" 
					backgroundcolor="#ffffff" bordercolor="#cccccc">
					<svg>
						<rect x="1" y="1" width="28" height="{text_height}" fill="#F7F7F7"/>
						<line x1="30" y1="1" x2="30" y2="{line_y_end}" style="stroke:#eeeeee"/>
						<text x="40" y="17" width="{text_width}" height="{text_height}" font-family="Courier New" font-size="14">{value}</text>
						{lines}
					</svg>
				</container>
			""".format(
					id = self.id, vis = self.visible, zind = self.zindex,
					hierarchy = self.hierarchy, order = self.order,
					top = self.top, left = self.left, 
					width = self.width, height = self.height,
					text_width = text_width, text_height = text_height,
					line_y_end = 1+int(self.height)-2,
					value = self.value, name = self.name,
					lines = self.get_lines_text(self.value, text_height))

		return VDOM_object.wysiwyg(self, contents=result)]]></SourceCode>
  <Libraries>
    <Library Target="html"><![CDATA[<script type="text/javascript" src="/064add91-8595-0f40-10ea-09d38022edee.res?"></script>
<script type="text/javascript" src="/5cd10fee-6e10-5253-24ea-3edb0a87f9ec.res?match"></script>
<script type="text/javascript" src="/95be4415-7ccb-b87b-f50f-77c8485f6bd9.res?syntaxes"></script>

<style type="text/css">
./* BASICS */

.CodeMirror {
  /* Set height, width, borders, and global font properties here */
  font-family: monospace;
  height: 300px;
  color: black;
  direction: ltr;
}

/* PADDING */

.CodeMirror-lines {
  padding: 4px 0; /* Vertical padding around content */
}
.CodeMirror pre.CodeMirror-line,
.CodeMirror pre.CodeMirror-line-like {
  padding: 0 4px; /* Horizontal padding of content */
}

.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
  background-color: white; /* The little square between H and V scrollbars */
}

/* GUTTER */

.CodeMirror-gutters {
  border-right: 1px solid #ddd;
  background-color: #f7f7f7;
  white-space: nowrap;
}
.CodeMirror-linenumbers {}
.CodeMirror-linenumber {
  padding: 0 3px 0 5px;
  min-width: 20px;
  text-align: right;
  color: #999;
  white-space: nowrap;
}

.CodeMirror-guttermarker { color: black; }
.CodeMirror-guttermarker-subtle { color: #999; }

/* CURSOR */

.CodeMirror-cursor {
  border-left: 1px solid black;
  border-right: none;
  width: 0;
}
/* Shown when moving in bi-directional text */
.CodeMirror div.CodeMirror-secondarycursor {
  border-left: 1px solid silver;
}
.cm-fat-cursor .CodeMirror-cursor {
  width: auto;
  border: 0 !important;
  background: #7e7;
}
.cm-fat-cursor div.CodeMirror-cursors {
  z-index: 1;
}
.cm-fat-cursor-mark {
  background-color: rgba(20, 255, 20, 0.5);
  -webkit-animation: blink 1.06s steps(1) infinite;
  -moz-animation: blink 1.06s steps(1) infinite;
  animation: blink 1.06s steps(1) infinite;
}
.cm-animate-fat-cursor {
  width: auto;
  border: 0;
  -webkit-animation: blink 1.06s steps(1) infinite;
  -moz-animation: blink 1.06s steps(1) infinite;
  animation: blink 1.06s steps(1) infinite;
  background-color: #7e7;
}
@-moz-keyframes blink {
  0% {}
  50% { background-color: transparent; }
  100% {}
}
@-webkit-keyframes blink {
  0% {}
  50% { background-color: transparent; }
  100% {}
}
@keyframes blink {
  0% {}
  50% { background-color: transparent; }
  100% {}
}

/* Can style cursor different in overwrite (non-insert) mode */
.CodeMirror-overwrite .CodeMirror-cursor {}

.cm-tab { display: inline-block; text-decoration: inherit; }

.CodeMirror-rulers {
  position: absolute;
  left: 0; right: 0; top: -50px; bottom: 0;
  overflow: hidden;
}
.CodeMirror-ruler {
  border-left: 1px solid #ccc;
  top: 0; bottom: 0;
  position: absolute;
}

/* DEFAULT THEME */

.cm-s-default .cm-header {color: blue;}
.cm-s-default .cm-quote {color: #090;}
.cm-negative {color: #d44;}
.cm-positive {color: #292;}
.cm-header, .cm-strong {font-weight: bold;}
.cm-em {font-style: italic;}
.cm-link {text-decoration: underline;}
.cm-strikethrough {text-decoration: line-through;}

.cm-s-default .cm-keyword {color: #708;}
.cm-s-default .cm-atom {color: #219;}
.cm-s-default .cm-number {color: #164;}
.cm-s-default .cm-def {color: #00f;}
.cm-s-default .cm-variable,
.cm-s-default .cm-punctuation,
.cm-s-default .cm-property,
.cm-s-default .cm-operator {}
.cm-s-default .cm-variable-2 {color: #05a;}
.cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}
.cm-s-default .cm-comment {color: #a50;}
.cm-s-default .cm-string {color: #a11;}
.cm-s-default .cm-string-2 {color: #f50;}
.cm-s-default .cm-meta {color: #555;}
.cm-s-default .cm-qualifier {color: #555;}
.cm-s-default .cm-builtin {color: #30a;}
.cm-s-default .cm-bracket {color: #997;}
.cm-s-default .cm-tag {color: #170;}
.cm-s-default .cm-attribute {color: #00c;}
.cm-s-default .cm-hr {color: #999;}
.cm-s-default .cm-link {color: #00c;}

.cm-s-default .cm-error {color: #f00;}
.cm-invalidchar {color: #f00;}

.CodeMirror-composing { border-bottom: 2px solid; }

/* Default styles for common addons */

div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}
div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}
.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }
.CodeMirror-activeline-background {background: #e8f2ff;}

/* STOP */

/* The rest of this file contains styles related to the mechanics of
   the editor. You probably shouldn't touch them. */

.CodeMirror {
  position: relative;
  overflow: hidden;
  background: white;
}

.CodeMirror-scroll {
  overflow: scroll !important; /* Things will break if this is overridden */
  /* 30px is the magic margin used to hide the element's real scrollbars */
  /* See overflow: hidden in .CodeMirror */
  margin-bottom: -30px; margin-right: -30px;
  padding-bottom: 30px;
  height: 100%;
  outline: none; /* Prevent dragging from highlighting the element */
  position: relative;
}
.CodeMirror-sizer {
  position: relative;
  border-right: 30px solid transparent;
}

/* The fake, visible scrollbars. Used to force redraw during scrolling
   before actual scrolling happens, thus preventing shaking and
   flickering artifacts. */
.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
  position: absolute;
  z-index: 6;
  display: none;
}
.CodeMirror-vscrollbar {
  right: 0; top: 0;
  overflow-x: hidden;
  overflow-y: scroll;
}
.CodeMirror-hscrollbar {
  bottom: 0; left: 0;
  overflow-y: hidden;
  overflow-x: scroll;
}
.CodeMirror-scrollbar-filler {
  right: 0; bottom: 0;
}
.CodeMirror-gutter-filler {
  left: 0; bottom: 0;
}

.CodeMirror-gutters {
  position: absolute; left: 0; top: 0;
  min-height: 100%;
  z-index: 3;
}
.CodeMirror-gutter {
  white-space: normal;
  height: 100%;
  display: inline-block;
  vertical-align: top;
  margin-bottom: -30px;
}
.CodeMirror-gutter-wrapper {
  position: absolute;
  z-index: 4;
  background: none !important;
  border: none !important;
}
.CodeMirror-gutter-background {
  position: absolute;
  top: 0; bottom: 0;
  z-index: 4;
}
.CodeMirror-gutter-elt {
  position: absolute;
  cursor: default;
  z-index: 4;
}
.CodeMirror-gutter-wrapper ::selection { background-color: transparent }
.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }

.CodeMirror-lines {
  cursor: text;
  min-height: 1px; /* prevents collapsing before first draw */
}
.CodeMirror pre.CodeMirror-line,
.CodeMirror pre.CodeMirror-line-like {
  /* Reset some styles that the rest of the page might have set */
  -moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0;
  border-width: 0;
  background: transparent;
  font-family: inherit;
  font-size: inherit;
  margin: 0;
  white-space: pre;
  word-wrap: normal;
  line-height: inherit;
  color: inherit;
  z-index: 2;
  position: relative;
  overflow: visible;
  -webkit-tap-highlight-color: transparent;
  -webkit-font-variant-ligatures: contextual;
  font-variant-ligatures: contextual;
}
.CodeMirror-wrap pre.CodeMirror-line,
.CodeMirror-wrap pre.CodeMirror-line-like {
  word-wrap: break-word;
  white-space: pre-wrap;
  word-break: normal;
}

.CodeMirror-linebackground {
  position: absolute;
  left: 0; right: 0; top: 0; bottom: 0;
  z-index: 0;
}

.CodeMirror-linewidget {
  position: relative;
  z-index: 2;
  padding: 0.1px; /* Force widget margins to stay inside of the container */
}

.CodeMirror-widget {}

.CodeMirror-rtl pre { direction: rtl; }

.CodeMirror-code {
  outline: none;
}

/* Force content-box sizing for the elements where we expect it */
.CodeMirror-scroll,
.CodeMirror-sizer,
.CodeMirror-gutter,
.CodeMirror-gutters,
.CodeMirror-linenumber {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}

.CodeMirror-measure {
  position: absolute;
  width: 100%;
  height: 0;
  overflow: hidden;
  visibility: hidden;
}

.CodeMirror-cursor {
  position: absolute;
  pointer-events: none;
}
.CodeMirror-measure pre { position: static; }

div.CodeMirror-cursors {
  visibility: hidden;
  position: relative;
  z-index: 3;
}
div.CodeMirror-dragcursors {
  visibility: visible;
}

.CodeMirror-focused div.CodeMirror-cursors {
  visibility: visible;
}

.CodeMirror-selected { background: #d9d9d9; }
.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }
.CodeMirror-crosshair { cursor: crosshair; }
.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }
.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }

.cm-searching {
  background-color: #ffa;
  background-color: rgba(255, 255, 0, .4);
}

/* Used to force a border model for a node */
.cm-force-border { padding-right: .1px; }

@media print {
  /* Hide the cursor when printing */
  .CodeMirror div.CodeMirror-cursors {
    visibility: hidden;
  }
}

/* See issue #2901 */
.cm-tab-wrap-hack:after { content: ''; }

/* Help users use markselection to safely style text background */
span.CodeMirror-selectedtext { background: none; }

.CodeMirror-scroll div {
    box-sizing: border-box;
    padding: 0px 7px 0px 1px;
}
.CodeMirror pre.CodeMirror-line, .CodeMirror pre.CodeMirror-line-like {
    padding: 0px 33px;
}



</style>]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="click" Help="#Lang(513)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(901)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(902)"/>
          </Parameters>
        </Event>
        <Event Name="getvalue" Help="#Lang(514)">
          <Parameters>
            <Parameter Name="value" Order="0" VbType="" Help="#Lang(903)"/>
          </Parameters>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="getValue">
          <Parameters/>
          <SourceCode><![CDATA[eval('var x='+this.domCont.id+"_codeeditor.getValue(value);");
execEventBinded(id.substring(2, id.length), "getvalue", {value:x});]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(701)" ScriptName="fade" Help="#Lang(801)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_hide(this.domCont, fade);]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="moveTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(702)" ScriptName="newX" Help="#Lang(802)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(703)" ScriptName="newY" Help="#Lang(803)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(704)" ScriptName="Effect" Help="#Lang(804)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_moveTo(this.domCont, newX, newY, Effect);]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="refresh">
          <Parameters/>
          <SourceCode><![CDATA[eval(this.domCont.id+"_codeeditor.refresh();");]]></SourceCode>
        </Action>
        <Action Help="#Lang(505)" InterfaceName="#Lang(605)" MethodName="resizeTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="width" Help="#Lang(805)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(706)" ScriptName="height" Help="#Lang(806)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[var w = parseInt(width,10), h = parseInt(height,10), o = $q(this.domCont);
o.width(w).height(h);
$q('.CodeMirror-scroll', o).width(w).height(h);
eval(this.domCont.id+"_codeeditor.refresh();");]]></SourceCode>
        </Action>
        <Action Help="#Lang(506)" InterfaceName="#Lang(606)" MethodName="setCursor">
          <Parameters>
            <Parameter DefaultValue="1" Interface="" InterfaceName="#Lang(707)" ScriptName="line" Help="#Lang(807)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[eval('window.'+this.domCont.id+'_codeeditor.focus(); window.'+this.domCont.id+'_codeeditor.setCursor('+parseInt(line,10)+');');]]></SourceCode>
        </Action>
        <Action Help="#Lang(507)" InterfaceName="#Lang(607)" MethodName="setFocus">
          <Parameters/>
          <SourceCode><![CDATA[eval('window.'+this.domCont.id+'_codeeditor.focus();');]]></SourceCode>
        </Action>
        <Action Help="#Lang(508)" InterfaceName="#Lang(608)" MethodName="setSyntax">
          <Parameters>
            <Parameter DefaultValue="'xml'" Interface="" InterfaceName="#Lang(708)" ScriptName="syntax" Help="#Lang(808)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[]]></SourceCode>
        </Action>
        <Action Help="#Lang(509)" InterfaceName="#Lang(609)" MethodName="setTheme">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(709)" ScriptName="theme" Help="#Lang(809)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[]]></SourceCode>
        </Action>
        <Action Help="#Lang(511)" InterfaceName="#Lang(611)" MethodName="setValue">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(711)" ScriptName="value" Help="#Lang(811)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[eval(this.domCont.id+"_codeeditor.setValue(value);");]]></SourceCode>
        </Action>
        <Action Help="#Lang(512)" InterfaceName="#Lang(612)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(712)" ScriptName="fade" Help="#Lang(812)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_show(this.domCont, fade);]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>