<?xml version="1.0" encoding="utf-8"?>
<Application>
	<Information>
		<ID>7f459762-e1ba-42d3-a0e1-e74beda2eb85</ID>
		<Name>ProMail</Name>
		<Description>
		</Description>
		<Version>1.10</Version>
		<Owner>-</Owner>
		<Active>1</Active>
		<Index>8e512270-2cd4-48f6-a0e7-e2b4ccf2e75f</Index>
		<Icon>cbe09105-1e0a-4b3a-bd4b-fefe1ac5e21c</Icon>
		<ServerVersion>1.3.9034</ServerVersion>
		<ScriptingLanguage>python</ScriptingLanguage>
		<DefaultLanguage>en-US</DefaultLanguage>
		<CurrentLanguage>en-US</CurrentLanguage>
	</Information>
	<Objects>
		<Object ID="fc627703-9cf7-4dd9-ab0a-d56bd664381d" Name="design" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="e151ef64-48e1-4717-bb74-7c63f5c68e6b" Name="width_maker" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">5</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">1000</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="06991c87-5bc1-4a2f-968a-471c41f65124" Name="bar" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="color">FF0000</Attribute>
								<Attribute Name="width">1000</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="height">5</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="f27b1859-05e0-483e-9483-c65e1fec8ba5" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="c73ef71e-d494-4a0e-bde4-00571800c838" Name="header" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">70</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">965</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="140e896f-6c59-48b7-8c49-c3bce0c04e36" Name="menu_logs" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="designcolor">eeeeee</Attribute>
								<Attribute Name="height">69</Attribute>
								<Attribute Name="classname">top-menu-item</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">405</Attribute>
							</Attributes>
							<Objects>
								<Object ID="9dea5aa9-4c31-48a8-8b4a-340ccfc5b191" Name="sens" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
									<Attributes>
										<Attribute Name="containerlink">60f0ccd8-ab04-4fd6-a1d1-9af51f23da25</Attribute>
										<Attribute Name="target">_self</Attribute>
										<Attribute Name="height">69</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">85</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="8ecc91c2-dfb0-44be-be17-984b68a66246" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="containerlink">60f0ccd8-ab04-4fd6-a1d1-9af51f23da25</Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">fd001b70-e066-44d9-8436-e841b42b32e3</Attribute>
										<Attribute Name="height">41</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="width">63</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
								<Object ID="4d46b4b0-5de9-4238-9fcf-c0a4f751b29f" Name="title" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
									<Attributes>
										<Attribute Name="color"><![CDATA[
										]]></Attribute>
										<Attribute Name="align"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[<p>Settings</p>]]></Attribute>
										<Attribute Name="height">0</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">95</Attribute>
										<Attribute Name="font"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">52</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="644eb1af-2abf-42c3-bafb-96e88340c749" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="1af5e7c0-0d03-4313-a8e3-3793523a0e7e" Name="button_start" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">65d58d5b-f87c-4d5d-acab-332e39a6a0ca</Attribute>
								<Attribute Name="height">35</Attribute>
								<Attribute Name="zindex">50</Attribute>
								<Attribute Name="width">151</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover">6096b141-6be5-418a-9a46-e73213ad8ebe</Attribute>
								<Attribute Name="top">15</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
						</Object>
						<Object ID="98acfb47-3db7-4837-a51a-ab1808530b8e" Name="menu_plugins" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="designcolor">eeeeee</Attribute>
								<Attribute Name="height">69</Attribute>
								<Attribute Name="classname">top-menu-item</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="left">426</Attribute>
							</Attributes>
							<Objects>
								<Object ID="ccd9ac5b-8b77-4821-a38e-c54d2a94a9cc" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="containerlink">042dcd5f-fd75-4ece-be93-69d8c2233d12</Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">7b0ec0a9-c45f-4aef-9454-96c178f8fe7d</Attribute>
										<Attribute Name="height">47</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="width">64</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="5084a193-6346-480e-adba-3ea2e091f29b" Name="sens" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
									<Attributes>
										<Attribute Name="containerlink">39a33860-2520-4900-bb6e-7c58fa4643d8</Attribute>
										<Attribute Name="target">_self</Attribute>
										<Attribute Name="height">69</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">80</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="667b25da-37a5-453a-8668-e43d1688f98b" Name="title" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
									<Attributes>
										<Attribute Name="color"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">52</Attribute>
										<Attribute Name="value"><![CDATA[<p>Settings</p>]]></Attribute>
										<Attribute Name="height">0</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">95</Attribute>
										<Attribute Name="font"><![CDATA[
										]]></Attribute>
										<Attribute Name="align"><![CDATA[
										]]></Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="c54f1713-d0b5-44b2-adeb-289a961b7b67" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="3791ccc7-793a-4f2e-b615-24ad9adeb508" Name="container_start" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="zindex">99</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">275</Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="height">96</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
							<Objects>
								<Object ID="da844193-280f-4543-9891-58f4c2323fc7" Name="hpt_start" Type="7085bd26-e653-490b-908f-61208c260a86">
									<Attributes>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">273</Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="htmlcode"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">0</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="daeb9980-6a1e-4cb2-9590-1e9c6f2b5c0e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="ff6a7c32-06d5-4730-b07b-5a13da737fe6" Name="container_click" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="zindex">99</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">160</Attribute>
								<Attribute Name="top">15</Attribute>
								<Attribute Name="height">35</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
							<Actions>
								<Action ID="21973f4d-47c8-43a5-a0a1-e143c5838593" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="60d9fb8a-8b48-43e2-9ca7-27294f0e2b9e" Name="main_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
							<Attributes>
								<Attribute Name="datatype">2</Attribute>
								<Attribute Name="zindex">99</Attribute>
								<Attribute Name="data"><![CDATA[body
{
	background: url("/3f8f2000-c4ba-46c5-8db6-2aad7f9d8324.res");
	background-repeat:repeat-x;
	background-position:top;
	font-family: Arial, Myriad Pro;

}
a, a:active, a:hover, a:focus, div {
	outline:none !important;
}
body.no-subhead
{
	background: url("/9c30d469-3562-4c65-bd17-3f8cb0849cf2.png") !important;
	background-repeat:repeat-x !important;
	background-position:top !important;
}
.page-caption {
font-size:24px !important;
}

/* start of top_menu */
.top-menu-item {
 	font-size:12px!important;
	color:#3d3d3d;
	text-align:center;
}
.m-active {
	border:1px solid #d9d9d9;
	border-bottom:none;
	border-top:1px solid #f6f6f6;
	background:#f6f6f6;
}
.top-menu-item div {
	overflow:hidden !important;
}
.top-menu-item p {
	padding:0px;
	margin:0px;
}
/* end of top_menu */
/* start of start_menu */
.top_start_container {
	height:7px;
	background: #262626;
}
.first_block {
	background:#333333 !important;
}
.block_start_container {
	height:35px;
	background:url("/1000b57a-6d90-42ae-a330-14383a48f797.res") repeat-x;
	color:#888;
}
.app_start_container {
	height:30px;
	background:url("/8ea72905-faea-4e2a-82f3-e5320386dca2.res") repeat-x !important;
}
.app_start_container:hover, .app-like:hover {
	background:#484848 !important;
}
.switch-to {
	background:url("/4b271a23-c139-45ad-8916-19645a80017b.res") no-repeat left 5px !important;
	padding-left:30px;
}
.current-user {
	background:url("/0f73e9c5-3d39-4cc5-9128-43dc341eb2b0.res") no-repeat left 5px !important;
	padding-left:30px;
}
.center_align_block, .center_align_app {
	margin-left:22px;
}
.block_start_container a, .app_start_container a, .block_start_container a:visited, .app_start_container a:visited{
	font-size:12px;
	color:#fff;
	text-decoration:none;
}
.center_align_ap p{
	padding-top:4px;
	clear:both;
}
.center_align_app a, .center_align_app img {
	display:block;
	float:left;
	line-height: 24px;
}
.center_align_app a {
	padding-left: 6px;
	width: 215px;
}
.center_align_app img {
	width:24px;
	height:24px;
}
.center_align_block {
	padding-top:10px;
	clear:both;
}
.center_align_block a, .center_align_block img {
	display:block;
	float:left;
	line-height: 24px;
	margin-top: -4px;
}
.center_align_block a {
	padding-left: 6px;
	width: 215px;
}
.bottom_start_container{
	height:13px;
	background: #262626;
}
/* end of start_menu */]]></Attribute>
								<Attribute Name="left">898</Attribute>
							</Attributes>
						</Object>
						<Object ID="9980c048-bd4d-4ad2-9cab-83baa6b47993" Name="menu_home" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">1</Attribute>
								<Attribute Name="height">69</Attribute>
								<Attribute Name="classname">top-menu-item</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">215</Attribute>
							</Attributes>
							<Objects>
								<Object ID="bb613327-2d35-41d2-be9a-239a89445c25" Name="sens" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
									<Attributes>
										<Attribute Name="containerlink">8e512270-2cd4-48f6-a0e7-e2b4ccf2e75f</Attribute>
										<Attribute Name="target">_self</Attribute>
										<Attribute Name="top">-5</Attribute>
										<Attribute Name="height">69</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">80</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="9a208310-3d49-4800-a4eb-752d03171d39" Name="title" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
									<Attributes>
										<Attribute Name="color"><![CDATA[
										]]></Attribute>
										<Attribute Name="align"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[<p><span style="color: #444444;">Shares</span></p>]]></Attribute>
										<Attribute Name="height">0</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">95</Attribute>
										<Attribute Name="font"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">52</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="d4d55191-48fa-4e0b-83e6-66d2a8d022bf" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="containerlink">8e512270-2cd4-48f6-a0e7-e2b4ccf2e75f</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">a2d0d1cf-a18a-40a3-a9b6-9779bd7e69de</Attribute>
										<Attribute Name="height">42</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="width">63</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">9</Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="0659eb7c-7191-434f-9014-ad05d3874264" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="6806f982-25d3-4dc9-abf2-a96777191e14" Name="menu_settings" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="designcolor">eeeeee</Attribute>
								<Attribute Name="height">69</Attribute>
								<Attribute Name="classname">top-menu-item</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">310</Attribute>
							</Attributes>
							<Objects>
								<Object ID="eaac0ea4-d146-4d62-be54-0135beeba1d5" Name="sens" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
									<Attributes>
										<Attribute Name="containerlink">042dcd5f-fd75-4ece-be93-69d8c2233d12</Attribute>
										<Attribute Name="target">_self</Attribute>
										<Attribute Name="height">69</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">80</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="05eca344-57be-4fde-aa10-6af267de5bd3" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="containerlink">042dcd5f-fd75-4ece-be93-69d8c2233d12</Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">2f14249e-70f7-41c9-a277-1511b7705c4e</Attribute>
										<Attribute Name="height">47</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="width">64</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="641e8d67-f419-4f19-b170-00c66537e77e" Name="title" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
									<Attributes>
										<Attribute Name="color"><![CDATA[
										]]></Attribute>
										<Attribute Name="align"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[<p>Settings</p>]]></Attribute>
										<Attribute Name="height">0</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">95</Attribute>
										<Attribute Name="font"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">52</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="3f7ea970-97f2-4223-afec-6a4a2e74bf44" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="28892523-2d58-45d5-abf2-b115fa9a3b67" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteHeaderPage import ProSuiteHeaderPage


page = ProSuiteHeaderPage(self)

page.vdom_objects = {
    "start_html": self.container_start.hpt_start,
    "start_button": self.button_start,
}

page.menu_items = {
    self.menu_home: {
        "title_obj": self.menu_home.title,
        "localization": "prosuite.header.home_page",
        "admin_only": False,
        "pages": [
            page.app_settings.pages["home"],
        ],
    },
    self.menu_settings: {
        "title_obj": self.menu_settings.title,
        "localization": "prosuite.header.settings_page",
        "admin_only": True,
        "pages": [
            page.app_settings.pages["cleaner"],
            page.app_settings.pages["rules"],
            page.app_settings.pages["settings"],
            page.app_settings.pages["remote_scheme"],
            page.app_settings.pages["remote_ug"],
            page.app_settings.pages["local_ug"],
            page.app_settings.pages["plugins"],
            page.app_settings.pages["plugin_details"],
            page.app_settings.pages["plugin_source"],
        ],
    },
    self.menu_logs: {
        "title_obj": self.menu_logs.title,
        "localization": "prosuite.header.logs_page",
        "admin_only": True,
        "pages": [
            page.app_settings.pages["logs"]
        ],
    },
#    self.menu_plugins: {
#        "title_obj": self.menu_plugins.title,
#        "localization": "header.plugins_page",
#        "admin_only": True,
#        "pages": [
#            page.app_settings.pages["plugins"],
#            page.app_settings.pages["plugin_details"],
#            page.app_settings.pages["plugin_source"],
#        ]
#    }
}

page.run("onload")

						]]>
						</Action>
					</Actions>
				</Object>
			</Objects>
			<Actions>
				<Action ID="9bf8f838-9fab-44d0-baa6-b026ad04f5fd" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
response.redirect('/')
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="3ddabe95-1428-45ce-ae75-1a3af6d74d31" Name="vdompackagevdom" Type="e0e386d8-bcb7-f608-95c0-a5776343ea8c">
			<Attributes>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="e7f8b258-5699-4794-98f1-f06c51e4e6c3" Name="vdomclass1" Type="0bb24c16-14fe-08ef-858f-ba24aafc8049">
					<Attributes>
						<Attribute Name="dataid"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="classauto"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">202</Attribute>
						<Attribute Name="height">69</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">486</Attribute>
					</Attributes>
					<Objects>
						<Object ID="56281903-b750-4be2-b7d9-cd3c6ddf86fe" Name="timerico" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">10</Attribute>
								<Attribute Name="value">2b1b03fb-a2ac-4d2a-b78f-1663e341b510</Attribute>
								<Attribute Name="height">50</Attribute>
								<Attribute Name="width">50</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
						</Object>
						<Object ID="650bdf5e-b356-4a9b-ada4-4e455e1d43e9" Name="timerinterval" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">38</Attribute>
								<Attribute Name="value">00:00:00:00</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">108</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">82</Attribute>
							</Attributes>
						</Object>
						<Object ID="01998bbd-fbcf-4ce8-acf0-6cf2cf89335e" Name="timername" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">18</Attribute>
								<Attribute Name="value">Timer name</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">108</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">82</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="0e9ddbe3-e8e9-493c-9b89-6682d396d0b5" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="f9967dd1-2aaf-4447-b3f9-12972de4a0ea" Name="mailclass" Type="0bb24c16-14fe-08ef-858f-ba24aafc8049">
					<Attributes>
						<Attribute Name="dataid"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="classauto"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">128</Attribute>
						<Attribute Name="classname">maillist-item</Attribute>
						<Attribute Name="width">260</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="d82a38fd-bbfd-454c-8aba-907cf4b2f556" Name="subject" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">64</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname">subject</Attribute>
								<Attribute Name="width">239</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">12</Attribute>
							</Attributes>
						</Object>
						<Object ID="f1046560-ca51-4fa6-babe-a7f1f4f6b8ce" Name="labels" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="top">88</Attribute>
								<Attribute Name="height">17</Attribute>
								<Attribute Name="classname">labels</Attribute>
								<Attribute Name="width">239</Attribute>
								<Attribute Name="htmlcode"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">12</Attribute>
							</Attributes>
						</Object>
						<Object ID="ae07422d-3baf-44d8-944c-207c040756a5" Name="fromaddr" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">43</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname">from-addr</Attribute>
								<Attribute Name="width">239</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">12</Attribute>
							</Attributes>
						</Object>
						<Object ID="3d244460-17d7-4b6f-b2d6-8983d99435bf" Name="selectbar" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="classname">select-bar</Attribute>
								<Attribute Name="width">260</Attribute>
								<Attribute Name="top">118</Attribute>
								<Attribute Name="color">DB5C5C</Attribute>
								<Attribute Name="height">10</Attribute>
							</Attributes>
						</Object>
						<Object ID="4eb989b4-d477-4991-9101-014083bedf65" Name="fromname" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">24</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname">from-name</Attribute>
								<Attribute Name="width">239</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">12</Attribute>
							</Attributes>
						</Object>
						<Object ID="dccdc72e-9763-40ce-a54c-521db4c55ac6" Name="date" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="color">B6B6B6</Attribute>
								<Attribute Name="align">right</Attribute>
								<Attribute Name="value">14:35</Attribute>
								<Attribute Name="classname">time</Attribute>
								<Attribute Name="width">160</Attribute>
								<Attribute Name="fontsize">14</Attribute>
								<Attribute Name="top">14</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">162</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="f831f342-fc0e-43ad-b96f-e03b4e56badb" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="07460cb5-772f-48e1-95ab-be6c07b63f69" Name="vdomclass_macros" Type="0bb24c16-14fe-08ef-858f-ba24aafc8049">
					<Attributes>
						<Attribute Name="dataid">p_95533a74-bbe3-4962-9405-9aa96a4092cd</Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="data"><![CDATA[{"picture": "<img src='/get_image?id=f8960e4c-4bab-4c8f-8b6b-e208ee391dd4'/>", "name": "Automation"}]]></Attribute>
						<Attribute Name="height">56</Attribute>
						<Attribute Name="classname">top-macros-buttons</Attribute>
						<Attribute Name="visible">1</Attribute>
						<Attribute Name="classauto">ov-item ov-item-3  ov-item-last  </Attribute>
						<Attribute Name="width">90</Attribute>
						<Attribute Name="left">14</Attribute>
					</Attributes>
					<Objects>
						<Object ID="25a973aa-3c58-42f2-85c9-70e41a0dc748" Name="image_macros" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">90</Attribute>
								<Attribute Name="htmlcode"><![CDATA[
								]]></Attribute>
								<Attribute Name="nostyle">2</Attribute>
							</Attributes>
						</Object>
						<Object ID="07f516b3-e8bd-4787-86ba-ab1a18d75e38" Name="text_macros_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">38</Attribute>
								<Attribute Name="value">Macros</Attribute>
								<Attribute Name="classname">macr-label-but</Attribute>
								<Attribute Name="width">90</Attribute>
								<Attribute Name="fontsize">10</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="2fe0fed2-41b1-4a46-b129-dd217db16a3b" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
import cgi
import json

parameters = json.loads(self.data)

self.text_macros_name.value = cgi.escape(parameters[ "name" ]) if parameters[ "name" ] else ""
self.image_macros.htmlcode = parameters[ "picture" ] if parameters[ "picture" ] else ""

						]]>
						</Action>
					</Actions>
				</Object>
			</Objects>
			<Actions>
				<Action ID="7dcbe515-cd03-4bb0-99ae-1a3029767650" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

				
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="408ecd01-64c9-4e73-bdae-b19202fb7c85" Name="cleaner" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">clear</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="cdf650e0-5148-473d-b050-ffa59ec1c99c" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[form.clear-form {
  border: 1px solid #D9D9D9;
}]]></Attribute>
						<Attribute Name="left">718</Attribute>
					</Attributes>
				</Object>
				<Object ID="e0af7c4b-34f8-4c9c-8de9-ae947861e499" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">693</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="a042cf5c-25fa-4be8-975f-aa45bb778eea" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="96800911-4a74-42eb-b4d1-d09c2a449631" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">162</Attribute>
						<Attribute Name="height">360</Attribute>
						<Attribute Name="classname">clear-form</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">301</Attribute>
					</Attributes>
					<Objects>
						<Object ID="13596935-e63e-4e53-89ec-aad62dc6a25f" Name="options_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">19</Attribute>
								<Attribute Name="value">Select options</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">375</Attribute>
								<Attribute Name="fontsize">16</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="7966f29b-6525-4890-aa0a-ec359befc04f" Name="passwd" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">223</Attribute>
								<Attribute Name="top">261</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">89</Attribute>
							</Attributes>
						</Object>
						<Object ID="1c2ca776-e9b1-4742-90c0-b9d973f6cd98" Name="clear_vee_engine" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">368</Attribute>
								<Attribute Name="top">172</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
						</Object>
						<Object ID="30930ca5-ae31-4240-b563-525bc09d71dd" Name="clear_config" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">368</Attribute>
								<Attribute Name="top">142</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
						</Object>
						<Object ID="cf3fa9e1-17d6-4b4b-b3d8-016f257d9291" Name="clear_main_db" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">368</Attribute>
								<Attribute Name="top">52</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
						</Object>
						<Object ID="6ca83b8c-6cbc-4ee0-b6ab-eac630d89fa2" Name="passwd_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">Enter password to submit changes:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">375</Attribute>
								<Attribute Name="fontsize">16</Attribute>
								<Attribute Name="top">227</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="45d5756d-7941-4bc4-9e3c-b2170344cc65" Name="clear_storage" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">368</Attribute>
								<Attribute Name="top">112</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
						</Object>
						<Object ID="8f980bcd-5229-41fe-b9c2-d5ea37d7c7b2" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">310</Attribute>
								<Attribute Name="height">36</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">174</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">114</Attribute>
							</Attributes>
						</Object>
						<Object ID="a7109663-7061-4193-a9aa-1eabf2367f22" Name="clear_plugins_db" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">368</Attribute>
								<Attribute Name="top">82</Attribute>
								<Attribute Name="left">20</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="c93a7885-aef4-4aa4-a001-6732ca46263e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="a54c16f3-1b9b-408e-af54-9b1fae0e5866" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="1ae2c50c-4884-434c-a6aa-273249e7b6ba" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteClearPage import ProSuiteClearPage


page = ProSuiteClearPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "clear.options_title": self.form.options_text,
    "clear.password_title": self.form.passwd_text,
    "clear.form.submit": self.form.submit,
    "clear.form.storage":  self.form.clear_storage,
    "clear.form.app_db": self.form.clear_main_db,
    "clear.form.plugin_db": self.form.clear_plugins_db,
    "clear.form.vee_engine": self.form.clear_vee_engine,
    "clear.form.reset_config": self.form.clear_config,
}

page.live()
				]]>
				</Action>
				<Action ID="5a637791-acad-456b-ba17-1b6e7293b88a" Name="submit_changes" Top="0" Left="240" State="False">
<![CDATA[
"""
"""

from ProSuiteClearPage import ProSuiteClearPage


page = ProSuiteClearPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "clear.form.passwd": self.form.passwd,
}

page.live("submit_changes")
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="e9cb967e-63b0-4c6f-9824-a69ab9b56ebd" Name="get_image" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Actions>
				<Action ID="8bda45b8-ed60-44e3-b317-0e189b3876af" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
import localization


lang = localization.get_lang()
try:
	attachment_name = request.arguments["id"]

	if attachment_name:
		response.send_file(attachment_name, application.storage.getsize(attachment_name), application.storage.open(attachment_name), "image/jpeg")
except Exception, ex:
	self.growl.title = lang["error"]
	self.growl.text = lang["unknown_error"]
	self.growl.active = "1"

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="75e7c2b5-646c-4601-9d56-88eedcfba9d0" Name="login" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">ProSuiteTemplate</Attribute>
				<Attribute Name="image">ed048b51-ed74-46bb-bf9a-eefaf8822634</Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="79fe4803-80a1-431d-b547-22dc57fd4686" Name="localization_cont" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">10</Attribute>
						<Attribute Name="height">58</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">114</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">891</Attribute>
					</Attributes>
					<Objects>
						<Object ID="5feb1a34-3b2d-48da-b6e7-2d10487c27e4" Name="ru_btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">97ccfaf3-c58c-4bb5-9f25-12277be218d0</Attribute>
								<Attribute Name="height">11</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="link"><![CDATA[?_ln_=ru]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="left">56</Attribute>
							</Attributes>
						</Object>
						<Object ID="2635b315-1558-4430-9036-1dcc962c3355" Name="fr_btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">5bdfab98-2d10-42a9-8ddf-444c833b6ba3</Attribute>
								<Attribute Name="height">11</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="link"><![CDATA[?_ln_=fr]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="left">3</Attribute>
							</Attributes>
						</Object>
						<Object ID="0af5a412-6f14-498c-b3b8-bd65ab5b588f" Name="bg_btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">effb9aac-77ea-48b6-8ab4-01b56004628e</Attribute>
								<Attribute Name="height">11</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="link"><![CDATA[?_ln_=bg]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="left">84</Attribute>
							</Attributes>
						</Object>
						<Object ID="d7532ea0-eba2-4aca-8ecf-52ba9cef2c6d" Name="en_btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">ea0e37fe-c53f-4db2-8904-abad6e6ba4c9</Attribute>
								<Attribute Name="height">11</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="link"><![CDATA[?_ln_=en]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="left">29</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="42a2ab26-45a5-415f-98e9-31aeecd8db9c" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="0d821fe7-1224-4d84-a38a-ef24585dd682" Name="hpt_css_login" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">113</Attribute>
						<Attribute Name="htmlcode"><![CDATA[<style>
body {
background-image: url('/e93af2b7-81a0-4a9c-907c-ae98a014e5ef.jpg') ;
background-repeat: no-repeat;
background-position: center middle;
font-size:14px;
color:#000;
font-family: Arial;
overflow:hidden !important;
}

.login_input {
font-size:20px !important;
color:#000;
}

.login_submit {
background-image: url('/ec4c5674-1137-4fbf-b026-4c2ac78f2fd0.png') ;
background-repeat: no-repeat;
width:112px;
height:34px;
border:0px;
cursor:pointer;
}
.login_submit:hover {
background-image: url('/73d1b11e-8a39-4518-86b9-d30756c7fe85.png') ;
background-repeat: no-repeat;
}
.version {
	color:#999 !important;
	}

</style>]]></Attribute>
						<Attribute Name="height">44</Attribute>
					</Attributes>
				</Object>
				<Object ID="f91c9d40-24b0-433c-8773-74640d0bb6c1" Name="dialog_login" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }


.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
position: absolute;
background: url("/95ceacbe-9f50-4088-9a67-4f1dc0bd7d38.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
box-shadow: 0 0 40px #ccc;
    box-shadow: 0 0 40px #ccc;
    -moz-box-shadow: 0 0 40px #ccc;
    -webkit-box-shadow: 0 0 40px #ccc;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="show">1</Attribute>
						<Attribute Name="height">412</Attribute>
						<Attribute Name="draggable">1</Attribute>
						<Attribute Name="width">440</Attribute>
						<Attribute Name="modal">1</Attribute>
						<Attribute Name="skin">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="50017f4c-81af-4a1d-9d44-d1834b525a31" Name="image_logo_word" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="tabindex">12</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">13</Attribute>
								<Attribute Name="value">a11e1662-a3a1-4098-9087-e7c7511b662b</Attribute>
								<Attribute Name="height">79</Attribute>
								<Attribute Name="width">325</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">100</Attribute>
							</Attributes>
						</Object>
						<Object ID="15fa8f05-7208-4aa3-95fd-5f3ca998dd7b" Name="form_login" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="submitonce">1</Attribute>
								<Attribute Name="top">90</Attribute>
								<Attribute Name="height">230</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">14</Attribute>
							</Attributes>
							<Objects>
								<Object ID="271731ca-df83-4dd3-b38f-e2839120fb1b" Name="text_password" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">286</Attribute>
										<Attribute Name="top">87</Attribute>
										<Attribute Name="value">Password:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">86</Attribute>
									</Attributes>
								</Object>
								<Object ID="cf8398ed-4d51-4886-a50e-c7dec86381c9" Name="password" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
									<Attributes>
										<Attribute Name="top">112</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">32</Attribute>
										<Attribute Name="classname">login_input</Attribute>
										<Attribute Name="width">286</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="left">86</Attribute>
									</Attributes>
								</Object>
								<Object ID="ef6afa7c-1837-4492-9551-8d939395acb5" Name="text_login" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">286</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="value">Login:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">86</Attribute>
									</Attributes>
								</Object>
								<Object ID="baee611a-3909-4f10-8d70-653391499848" Name="signin_button" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">180</Attribute>
										<Attribute Name="label"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname">login_submit</Attribute>
										<Attribute Name="width">112</Attribute>
										<Attribute Name="height">34</Attribute>
										<Attribute Name="left">147</Attribute>
									</Attributes>
								</Object>
								<Object ID="80659d95-3639-4a87-9b77-734d7980730c" Name="login" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">38</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">32</Attribute>
										<Attribute Name="classname">login_input</Attribute>
										<Attribute Name="width">286</Attribute>
										<Attribute Name="focused">1</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">86</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="846e892d-de63-4442-85c9-3068be0d83c5" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="45436b00-ca86-4f88-b4a1-3b1a17df5f0a" Name="text_version" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">209</Attribute>
								<Attribute Name="color">575757</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">Text</Attribute>
								<Attribute Name="height">398</Attribute>
								<Attribute Name="classname">version</Attribute>
								<Attribute Name="fontfamily">arial</Attribute>
								<Attribute Name="fontsize">10</Attribute>
								<Attribute Name="top">375</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">107</Attribute>
							</Attributes>
						</Object>
						<Object ID="e2da4301-9d0f-4d8e-bbd8-3b1983d460ff" Name="button_vdom" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">ae10a574-929b-4bcc-9f09-cc356a65e12c</Attribute>
								<Attribute Name="height">31</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">116</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">158</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">341</Attribute>
								<Attribute Name="tabindex">3</Attribute>
							</Attributes>
						</Object>
						<Object ID="dfb24ad8-b934-41b0-aa60-795c8dedd995" Name="image_logo" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="tabindex">12</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">17</Attribute>
								<Attribute Name="value">a9e0c250-0deb-46e0-925d-655b513ed119</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="width">80</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="81cebc42-529d-4a7c-b807-28edae0f2b8e" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="45aef298-cd45-4b78-8f66-ccf6f8246a45" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="1d45bbcb-6bd9-4a95-bfc1-d8099304d40f" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="6492983a-f78e-417c-ba70-c0a94d10093e" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteLoginPage import ProSuiteLoginPage


page = ProSuiteLoginPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "login.label": self.dialog_login.form_login.text_login,
    "password.label": self.dialog_login.form_login.text_password,
    "version.label": self.dialog_login.text_version
}
page.run("onload")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="2ec2bcca-fde3-40c7-bce9-39b42fcad4a0" Name="logoff" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image">ed048b51-ed74-46bb-bf9a-eefaf8822634</Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="bgrepeat">no-repeat</Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="350372e0-186e-4e9c-bcae-c96d9d8e12f1" Name="dialog_information" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }


.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
box-shadow: 0 0 40px #ccc;
    box-shadow: 0 0 40px #ccc;
    -moz-box-shadow: 0 0 40px #ccc;
    -webkit-box-shadow: 0 0 40px #ccc; 
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="show">1</Attribute>
						<Attribute Name="height">171</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">303</Attribute>
						<Attribute Name="skin">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="2db52a3f-a283-40a3-861d-0fc9cd346647" Name="image_logoff" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">28</Attribute>
								<Attribute Name="value">0cf03b40-cb5d-4cba-9f63-37110836f398</Attribute>
								<Attribute Name="height">21</Attribute>
								<Attribute Name="width">24</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">269</Attribute>
							</Attributes>
						</Object>
						<Object ID="aae48c9c-baf5-4888-8444-e77d1377fbac" Name="text_message" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">258</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">You will be redirected to the login page in few seconds</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">69</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">23</Attribute>
							</Attributes>
						</Object>
						<Object ID="e572bf56-01b4-4a42-bc99-536e4fe122e7" Name="text_caption" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">258</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">You have been logged off</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">arial</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="top">28</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">23</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="bff09674-a330-4bfe-b109-6a676377dc8a" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="5ff3917e-9bdf-4727-86ba-f0c19a833619" Name="timer" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="interval">1</Attribute>
						<Attribute Name="left">598</Attribute>
						<Attribute Name="once">1</Attribute>
					</Attributes>
				</Object>
				<Object ID="6252296f-9b04-41af-85b2-b3d3029759fd" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">648</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="7f77cbb6-9bc0-4379-a22a-289e56a3482d" Name="go_to_login" Top="10" Left="223" State="True">
<![CDATA[
"""
"""

from ProSuiteLogoffPage import ProSuiteLogoffPage


page = ProSuiteLogoffPage(self)
page.run("redirectToLogin")

				]]>
				</Action>
				<Action ID="14ecbb30-38d0-46bd-83ed-4bb6fa0b7d48" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteLogoffPage import ProSuiteLogoffPage


page = ProSuiteLogoffPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "logoff.caption": self.dialog_information.text_caption,
    "logoff.message": self.dialog_information.text_message,
}
page.run("onload")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="8d1f7f5d-d297-4dd0-bf13-c0de1beeab32" Name="test" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="938edc76-69e9-4364-b18c-4d13de02e0fb" Name="dynamicvdom" Type="9e338259-29be-41d6-ac84-b44e2b294ffe">
					<Attributes>
						<Attribute Name="vdomxml"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">122</Attribute>
						<Attribute Name="height">550</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">624</Attribute>
						<Attribute Name="debugmode">1</Attribute>
						<Attribute Name="rendererrormsg">Error during render</Attribute>
						<Attribute Name="vdomactions"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">678</Attribute>
					</Attributes>
				</Object>
				<Object ID="33af0d08-1555-4594-9e4c-40ec3fd7f247" Name="bar_33af0d08_1555_4594_9e4c_40ec3fd7f247" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="color">1258E3</Attribute>
						<Attribute Name="width">624</Attribute>
						<Attribute Name="top">113</Attribute>
						<Attribute Name="left">678</Attribute>
						<Attribute Name="height">2</Attribute>
					</Attributes>
				</Object>
				<Object ID="17c506b3-fbf8-4061-b3bc-cc35fc4a1e34" Name="progressbar1" Type="2c38d90f-2692-4caf-b902-a5c036c217a4">
					<Attributes>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="top">696</Attribute>
						<Attribute Name="left">678</Attribute>
						<Attribute Name="image1"><![CDATA[
						]]></Attribute>
						<Attribute Name="image2"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="a11daf70-4953-45cc-8358-a25b50d01f86" Name="dynobjectview1" Type="45ec0aa6-d28b-407a-8c61-ffb64adce738">
					<Attributes>
						<Attribute Name="top">749</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="template"><![CDATA[
						]]></Attribute>
						<Attribute Name="bindings"><![CDATA[
						]]></Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="clickclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">205</Attribute>
					</Attributes>
				</Object>
				<Object ID="0bfb34d4-ba03-4c7a-a722-af0bda788aa5" Name="container1" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">54</Attribute>
						<Attribute Name="height">55</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">624</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">678</Attribute>
					</Attributes>
					<Objects>
						<Object ID="3a764eb4-6c42-4cb5-b187-35c1724e2d8f" Name="formtextarea1" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
							<Attributes>
								<Attribute Name="width">612</Attribute>
								<Attribute Name="top">1</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">44</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="ffa77dec-eae6-4feb-b089-d3f4e9cef862" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7418588f-cf9f-4f4c-98b0-acaeb7431396" Name="form1" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">696</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">667</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
					</Attributes>
					<Objects>
						<Object ID="3010ba5a-51a6-4dc9-8def-cc5901342150" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">638</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">657</Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
						<Object ID="c2e25900-6706-45c9-89dc-f1566c354027" Name="vdomxml" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
							<Attributes>
								<Attribute Name="width">638</Attribute>
								<Attribute Name="top">20</Attribute>
								<Attribute Name="left">6</Attribute>
								<Attribute Name="value"><![CDATA[<CONTAINER name="container1" height="214" width="370" left="0">
    <BUTTON name="button1" zindex="0" text="Button1"/>
    <CONTAINER name="container1" top="50" height="147" width="260" left="89">
      <BUTTON name="button1" zindex="0" text="Button2"/>
      <FORM name="form" top="25" height="106" width="170" meth="event" left="75">
        <FORMPASSWORD name="passwd" width="130"/>
        <FORMTEXT name="inputtext" top="51"/>
        <FORMBUTTON name="formbutton1" top="75"/>
      </FORM>
    </CONTAINER>
<FULLCALENDAR name="fullcalendar1" top="102" zindex="0" left="25"/>
  </CONTAINER>]]></Attribute>
								<Attribute Name="height">332</Attribute>
							</Attributes>
						</Object>
						<Object ID="91538f7f-02d9-466e-abd7-37c24ea49afe" Name="text1" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">367</Attribute>
								<Attribute Name="value">Actions and Events binding:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
						<Object ID="afe18eb0-2127-4015-ad08-be2ee3ee542a" Name="vdomactions" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
							<Attributes>
								<Attribute Name="width">638</Attribute>
								<Attribute Name="top">390</Attribute>
								<Attribute Name="left">6</Attribute>
								<Attribute Name="value"><![CDATA[{
  "container1.button1:click": [["container1:hide", "1000"]],
  "container1.container1.button1:click": [
  		"button1Click", [
  		"container1.container1.form.inputtext:setValue", "'\"asdasda\"sd'"]
  ],
  "container1.container1.form:submit": ["formSubmit"]
}]]></Attribute>
								<Attribute Name="height">255</Attribute>
							</Attributes>
						</Object>
						<Object ID="a368c5c4-fbf3-40b9-9fc0-dda2ff44ac5c" Name="text2" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">4</Attribute>
								<Attribute Name="value">VDOM XML:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="a7a8d59c-a0ec-4174-ac2d-b87b15171189" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="6db3f363-cafa-4f0a-a589-6513cf576c9d" Name="timer1" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="top">323</Attribute>
						<Attribute Name="left">628</Attribute>
					</Attributes>
				</Object>
				<Object ID="39f0cd96-8b61-4753-bbb3-12b82a32c3fb" Name="text1" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="fontstyle">italic</Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="value">OUTPUT</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontweight">bold</Attribute>
						<Attribute Name="fontsize">18</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">678</Attribute>
					</Attributes>
				</Object>
				<Object ID="b430fab6-5edf-4d07-8659-4bcc76ab80bf" Name="text2" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">30</Attribute>
						<Attribute Name="value">Event caught:</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">93</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">678</Attribute>
					</Attributes>
				</Object>
				<Object ID="71ba23d4-8e44-41d8-ac5c-cb9a8aaacc88" Name="evtname" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">30</Attribute>
						<Attribute Name="value"><![CDATA[
						]]></Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">758</Attribute>
					</Attributes>
				</Object>
				<Object ID="69451fed-144f-4289-ac24-b09c8568528c" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="color">1258E3</Attribute>
						<Attribute Name="width">624</Attribute>
						<Attribute Name="top">681</Attribute>
						<Attribute Name="left">678</Attribute>
						<Attribute Name="height">2</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="76392ae0-d300-472f-9f62-e10721873e5a" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
import ProMail


labels = ProMail.ACLLabel.get_available()

raise Exception(len(labels))

				]]>
				</Action>
				<Action ID="e5cab376-9ae1-4dab-abe5-6f6cda63c866" Name="loaddata" Top="338" Left="611" State="False">
<![CDATA[
#import managers
#raise Exception(managers.request_manager.current.container_id)
#raise Exception(dir(managers.request_manager.current))
self.dynamicvdom.vdomxml = request.arguments.get("vdomxml", "")
self.dynamicvdom.vdomactions = request.arguments.get("vdomactions", "")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="8e8cbf22-8d6d-46f3-b43e-60a9b8089089" Name="get_plugin_resource" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="0d819775-8693-450c-a312-c455c871ab47" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="3adf5c8d-9457-4501-b4ef-28d997b09705" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
from VEE_resources import ResourceFolderManager, TemporaryFolderManager
import localization

lang = localization.get_lang()
try:
	plugin_guid = request.arguments[ "guid" ]
	name = request.arguments[ "name" ]
	type = request.arguments[ "type" ]

	res_manager = ResourceFolderManager if type == "res" else TemporaryFolderManager
	res_manager = res_manager( plugin_guid )
	if res_manager.exists( name ):
		response.send_file( name, res_manager.size( name ), res_manager.open( name ) )
	else:
		response.terminate()
except Exception, ex:
	self.growl.title = lang["error"]
	self.growl.text = lang["unknown_error"]
	self.growl.active = "1"

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="ac45430c-18b1-43e6-8201-30d738b9ff45" Name="plugin_ide_new" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="d98156a9-88c7-4b9e-9b51-49e13f7c3ee4" Name="libraryinfodialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Create Library</Attribute>
						<Attribute Name="top">567</Attribute>
						<Attribute Name="height">340</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">457</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">484</Attribute>
					</Attributes>
					<Objects>
						<Object ID="34f15cc5-ed08-439b-846e-6f28fb1e3965" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="height">336</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">444</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="7f1b6e3b-ff18-4181-b5d3-12dbf95e462d" Name="name_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">264</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="c90fd7ff-faf2-4049-a348-f7a34f17a062" Name="libguid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">78</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">293</Attribute>
									</Attributes>
								</Object>
								<Object ID="144ea539-ae0c-45f9-8000-07054f55c8ee" Name="description_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">83</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Description:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">238</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="46e59c2d-4985-4c2e-bc78-f1a7dfdd26e4" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">302</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">333</Attribute>
									</Attributes>
								</Object>
								<Object ID="0c461dac-5c42-43b3-bfa5-a4df0002e593" Name="libname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">37</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">418</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder">Library name</Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="16f4c70e-abc5-492d-8ad4-3c1b2b686159" Name="description" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
									<Attributes>
										<Attribute Name="top">104</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">160</Attribute>
										<Attribute Name="width">418</Attribute>
										<Attribute Name="left">5</Attribute>
										<Attribute Name="tabindex">2</Attribute>
									</Attributes>
								</Object>
								<Object ID="fe3d60a8-aa39-4de1-b7a3-fc3eaae265d3" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">302</Attribute>
										<Attribute Name="label">Save</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="left">203</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="93ca7f91-4836-4211-b73e-f973fdb1cf9e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="61527282-2a17-42c7-9997-f408971c627e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="93c06e2c-8560-45c6-ab72-b8ae82762deb" Name="dialog_create_macro" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Create Macro</Attribute>
						<Attribute Name="top">567</Attribute>
						<Attribute Name="height">457</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">457</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="18adcb55-170b-454f-8bee-13995b2049b9" Name="form_macro" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="height">453</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">444</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="dee90e67-0fb9-453a-b3af-afa24f71ce03" Name="formtextarea_description" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
									<Attributes>
										<Attribute Name="width">418</Attribute>
										<Attribute Name="top">104</Attribute>
										<Attribute Name="left">5</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">160</Attribute>
									</Attributes>
								</Object>
								<Object ID="e8fcee89-0ca6-4f3b-95e0-4f9b4bc055cf" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">31</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">425</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="71cb0740-81a7-460f-8bfe-6f28b5a722ea" Name="formbutton_save" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">419</Attribute>
										<Attribute Name="label">Save</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">339</Attribute>
									</Attributes>
								</Object>
								<Object ID="12acb3ae-beba-4748-be8f-20aa12da3fb5" Name="text_macro_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Macro name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">264</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="c8cc00fc-05bf-4c3c-80f5-d6f3af576b30" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">83</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Description:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">238</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="99d90f52-33d7-4cf0-8a00-51475a673a8f" Name="container_back" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">285</Attribute>
										<Attribute Name="height">101</Attribute>
										<Attribute Name="classname">gray_back</Attribute>
										<Attribute Name="width">430</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
									<Objects>
										<Object ID="618eb6a2-cc98-48f1-b721-332fa42ebf85" Name="formlist_event" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="size"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">38</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">176</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">226</Attribute>
											</Attributes>
										</Object>
										<Object ID="e272aecd-3dbf-4170-a280-ccb69d03fa72" Name="text_location" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="visible">0</Attribute>
												<Attribute Name="top">15</Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="value">Location:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="width">102</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">226</Attribute>
											</Attributes>
										</Object>
										<Object ID="c3646e54-69c0-4651-8497-b606b88be0f5" Name="text_timer" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="top">60</Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="value">Page:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="width">183</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="cbf922f7-1b7e-4e07-b764-6401b020ed03" Name="formlist_page" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="size"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">79</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">184</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="77000a42-a586-4e6c-b16e-a7883ca7401b" Name="text_event" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="top">15</Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="value">Event:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="width">128</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">226</Attribute>
											</Attributes>
										</Object>
										<Object ID="feeb74b8-1d0e-45e3-b539-242de19547f1" Name="text_type" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="top">15</Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="value">Type:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="width">90</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="f061cfd6-117b-4b12-a1ea-8ac027d93938" Name="formlist_location" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="size"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">176</Attribute>
												<Attribute Name="top">38</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="visible">0</Attribute>
												<Attribute Name="left">226</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
										<Object ID="bbf76164-9fe8-4a69-b1ee-e2fb94af3fca" Name="formlist_type" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="size"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">38</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">184</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="c6fcde0b-bfa0-470d-828f-51dd383b9b46" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="efe223c3-c12c-4c9a-83f4-2c9f7b800e73" Name="formtext_id" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">68</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="ba70b3ab-c4db-4426-8f5b-245accf60c0c" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">419</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">220</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="80a56fd4-17dc-440e-a516-31596011177a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="63327011-7bbf-44c7-88ab-5ace726b16fd" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="09819a04-0d19-463f-941b-1553c6ad1bc4" Name="eventinfodialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Edit timer</Attribute>
						<Attribute Name="top">1044</Attribute>
						<Attribute Name="height">124</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">241</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">270</Attribute>
					</Attributes>
					<Objects>
						<Object ID="acd8b0b1-6f8c-4054-8279-81adba9c22f9" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="height">109</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">212</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="8287ee31-5e8f-43fe-ba45-e6f21648fbb0" Name="eventguid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">1</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">80</Attribute>
									</Attributes>
								</Object>
								<Object ID="2d946945-a86e-4253-a9a5-0e5c9900b894" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">77</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="889c7e02-9673-4fe8-9cee-ea4df0c974ff" Name="name_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="6ec841c5-850c-481a-a362-b23eee947a2e" Name="eventname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="1990ef77-ba53-4b7f-bc2a-69a0ecf2f5ba" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">77</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">91</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">118</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="4603a209-b34e-4b42-bb12-454c58ecb9d4" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="dcbd4a31-bec4-43f6-88bb-bb1ce0e5c663" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="de0d7bc5-08fe-4a70-9efd-89a31c0a5be5" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="27b514f9-05f2-4e29-a0ad-ae159f443970" Name="deleteobjdialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Delete selected objects?</Attribute>
						<Attribute Name="top">1044</Attribute>
						<Attribute Name="height">128</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">305</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">560</Attribute>
					</Attributes>
					<Objects>
						<Object ID="44506729-5b3c-4787-ba34-54457c4668e1" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Delete</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">25</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">84</Attribute>
								<Attribute Name="left">201</Attribute>
							</Attributes>
						</Object>
						<Object ID="1cc12113-2b36-430d-a621-c2fa03fd6129" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">25</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">84</Attribute>
								<Attribute Name="left">59</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="08d7ebc6-6032-4158-81d8-a69175bfa5f2" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="ec8d4961-ed39-47e8-8e9d-4503847bc46c" Name="bar" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="color">8C8C8C</Attribute>
						<Attribute Name="top">132</Attribute>
						<Attribute Name="height">400</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">2</Attribute>
						<Attribute Name="left">190</Attribute>
					</Attributes>
				</Object>
				<Object ID="75b667ff-746e-4b08-8e1e-b94ac6e8114b" Name="timerinfodialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Edit timer</Attribute>
						<Attribute Name="top">1044</Attribute>
						<Attribute Name="height">187</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">241</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="155e17cb-4a84-480b-813c-61522afe7f25" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="height">174</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">212</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="a1e883bf-3c9e-467e-9bb7-70e2a0065886" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">144</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">91</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">119</Attribute>
									</Attributes>
								</Object>
								<Object ID="32dac91a-2578-40c7-874f-e476c4d6b175" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">144</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="5cf7a521-d59d-4975-a93f-d2f8412757a5" Name="timerinterval" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">84</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="0f2187c7-5739-4c37-9213-9afce4484126" Name="timername" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="00d27b2e-19a8-4cb7-8053-75da51c479c2" Name="timerguid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">1</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">80</Attribute>
									</Attributes>
								</Object>
								<Object ID="4c615a8d-2df9-4e26-97f2-e3523ea5ecb0" Name="name_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="fa6816c3-4fdd-49a7-9852-9c375b161b5c" Name="interval_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="top">61</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Interval:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="b97f91e0-e174-489a-8999-7794fb48023d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="72848a85-be46-4843-88ac-f43ecebc5018" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="34caf383-12d9-488f-be84-6e50fdb7d028" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">749</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="10ac4203-ed9e-4419-942a-6e095bdbe0fb" Name="page_js" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[function proMailResize(){

    var $window = jQuery(window);
    var height = $window.height();
    var width  = $window.width();

    var height = height > 600 ? height : 600;
    var width = width > 1000 ? width : 1400;

    var ids = {

        // bar 1
        "#o_ec8d4961_ed39_47e8_8e9d_4503847bc46c": {height: true},

        // sidebar
        "#o_2526b6fb_c75d_4e28_bbdf_59f59e6b00db": {height: true},

        // object view
        "#o_ddba9fec_db70_4e97_a9bc_443f7bf9986e": {height: true, width: true},

    };

    for (var id in ids){
        var $obj = jQuery(id);
        var p = ids[id];
        var offset = $obj.offset();

        if (p.height){
            var minus = p.margin ? p.margin[0] : 0;
            $obj.height(height - offset.top - minus)
        }

        if (p.width){
            var cwidth = width;
            // if (p.maxWidth && p.maxWidth < width)
            //     cwidth = p.maxWidth;

            var minus = p.margin ? p.margin[1] : 0;
            $obj.width(cwidth - offset.left - minus);
        }

        if (p.positionFunc){
            p.positionFunc($obj, width, height, p);
        }
    }


    e2vdomSV["resobjview.height"] = jQuery("#o_ddba9fec_db70_4e97_a9bc_443f7bf9986e").height();
    e2vdomSV["resobjview.width"] = jQuery("#o_ddba9fec_db70_4e97_a9bc_443f7bf9986e").width();
}


jQuery(document).ready(function(){

  // resize logic
  jQuery(window).resize(proMailResize);
  proMailResize();

  jQuery("#o_53550089_5b4b_4f5e_8da7_172217a628f5 > div").click(function(){
    $this = jQuery(this);
    if (!$this.hasClass("custom-active")){
        jQuery("#o_53550089_5b4b_4f5e_8da7_172217a628f5 > div.custom-active").removeClass("custom-active");
        $this.addClass("custom-active");
        execEventBinded("53550089_5b4b_4f5e_8da7_172217a628f5", "itemshow", {"name": "", "id": $this.attr("id").substring(2)});
    }
  });

});]]></Attribute>
						<Attribute Name="left">799</Attribute>
					</Attributes>
				</Object>
				<Object ID="4c936819-5841-423f-82e8-a169c1a4b960" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[.sidebar-accordeon div.title {
    padding: 15px;
    border-bottom: 1px solid #DCDCDC;
    background: #F1F1F1;
    font-size: 1.200em;
    color: #000;
}
.sidebar-accordeon > div.active div.title {
    background: #F5FDFF;
}
.sidebar-accordeon div.no-data div.content {
    height: 0px !important;
}
.sidebar-accordeon div.content {
    overflow: visible !important;
}
.ov-plugin-event, .ov-plugin-timer {
    border: 1px solid #E2D6D6;
    border: 1px solid #E2D6D6;
    margin-left: 10px;
    margin-top: 10px;
}
.ov-plugin-event.selected, .ov-plugin-timer.selected {
    border: 1px solid #DA7474;
    background-color: rgba(210, 30, 30, 0.12);
}]]></Attribute>
						<Attribute Name="left">849</Attribute>
					</Attributes>
				</Object>
				<Object ID="2526b6fb-c75d-4e28-bbdf-59f59e6b00db" Name="sidebar" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">132</Attribute>
						<Attribute Name="height">400</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">190</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="53550089-5b4b-4f5e-8da7-172217a628f5" Name="accordion" Type="da0bc8b1-7a9f-6b97-932a-94b0266d8fe7">
							<Attributes>
								<Attribute Name="classname">sidebar-accordeon</Attribute>
								<Attribute Name="width">190</Attribute>
								<Attribute Name="left">0</Attribute>
								<Attribute Name="height">382</Attribute>
							</Attributes>
							<Objects>
								<Object ID="04cd2485-10be-4e66-b224-70cd591945ea" Name="databasescnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title">Databases</Attribute>
										<Attribute Name="top">120</Attribute>
										<Attribute Name="height">40</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">190</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="titlewrap">7</Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Objects>
										<Object ID="cc9b5c05-905c-4ef0-b689-2673e2c7bfe5" Name="createnew" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Create new</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
										<Object ID="7b65a262-03d0-420c-9bfd-5c77b0c359aa" Name="deleteselected" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Delete selected</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">31</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="67ba0fad-7e03-417c-9e67-afefbbc7f847" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="d1730b20-8a52-4ef6-b3ac-247167c8f26c" Name="sourcescnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title">Sources</Attribute>
										<Attribute Name="height">40</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">190</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="titlewrap">7</Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Objects>
										<Object ID="efccbe6c-4597-4f12-98d8-5eda33b92286" Name="sources" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
											<Attributes>
												<Attribute Name="activeitem"><![CDATA[
												]]></Attribute>
												<Attribute Name="layout">0</Attribute>
												<Attribute Name="height">40</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="droppablerows"><![CDATA[
												]]></Attribute>
												<Attribute Name="selectedrows"><![CDATA[
												]]></Attribute>
												<Attribute Name="selectablerows"><![CDATA[
												]]></Attribute>
												<Attribute Name="clickclass"><![CDATA[
												]]></Attribute>
												<Attribute Name="data"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="1e7ff646-13ba-4565-b6f7-ca7ad4561e86" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="f5b40701-a8b0-4022-b31a-4e41240516bb" Name="librariescnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title">Libraries</Attribute>
										<Attribute Name="top">40</Attribute>
										<Attribute Name="height">40</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">190</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="titlewrap">7</Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Objects>
										<Object ID="d9be0a68-9c98-4ecf-a51e-905131741c35" Name="libraries" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
											<Attributes>
												<Attribute Name="activeitem"><![CDATA[
												]]></Attribute>
												<Attribute Name="layout">0</Attribute>
												<Attribute Name="droppable">0</Attribute>
												<Attribute Name="selectonclick">4</Attribute>
												<Attribute Name="height">40</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="droppablerows"><![CDATA[
												]]></Attribute>
												<Attribute Name="selectedrows"><![CDATA[
												]]></Attribute>
												<Attribute Name="selectablerows"><![CDATA[
												]]></Attribute>
												<Attribute Name="clickclass"><![CDATA[
												]]></Attribute>
												<Attribute Name="data"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="3e59c6ac-0b0b-453b-887d-9d1ff1672b42" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="ebb04805-3ead-459b-92d5-c1a6986b2397" Name="timerscnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title">Timers</Attribute>
										<Attribute Name="top">200</Attribute>
										<Attribute Name="height">40</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">190</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="titlewrap">7</Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Objects>
										<Object ID="4c340bc0-8c42-4047-bb9c-02e48f70c74d" Name="deleteselected" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Delete selected</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">31</Attribute>
											</Attributes>
										</Object>
										<Object ID="f6b40d82-15d6-4499-8b1d-504fd68e0897" Name="createnew" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Create new</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="5676d033-a431-4446-bc5b-bfa63db581a6" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="9c5c3cd0-067b-4352-a872-8fa191d23c1f" Name="eventscnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title">Events</Attribute>
										<Attribute Name="top">160</Attribute>
										<Attribute Name="height">40</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">190</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="titlewrap">7</Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Objects>
										<Object ID="0b0dca57-a683-4d89-af9a-2c7ec77a0d6b" Name="createnew" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Create new</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
										<Object ID="0e55fdb0-634b-4725-bb15-167db76d5dd8" Name="deleteselected" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Delete selected</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">31</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="43f64bd5-8f9b-4073-93e5-4fca9bbb64f5" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="aeebf7dc-1f1d-46a5-a616-7fc2fdeda26e" Name="resourcescnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title">Resources</Attribute>
										<Attribute Name="top">80</Attribute>
										<Attribute Name="height">40</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">190</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="titlewrap">7</Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Objects>
										<Object ID="3ac18282-1d70-4a0c-a3c9-be63213aa153" Name="deleteselected" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Delete selected</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">31</Attribute>
											</Attributes>
										</Object>
										<Object ID="9ab5a886-0592-46ae-8e0f-dbf47a80c550" Name="createnew" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="style"><![CDATA[
												]]></Attribute>
												<Attribute Name="containerlink"><![CDATA[
												]]></Attribute>
												<Attribute Name="disabledimg"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="text">Create new</Attribute>
												<Attribute Name="image"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">190</Attribute>
												<Attribute Name="link"><![CDATA[
												]]></Attribute>
												<Attribute Name="rollover"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="edcf6252-4866-4ef6-85a0-74434cac465c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
							</Objects>
							<Actions>
								<Action ID="6830d15d-eed3-4a5a-9aba-0d053561ee58" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6079b381-5f30-4503-99cd-55daaf585cb2" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="ddba9fec-db70-4e97-a9bc-443f7bf9986e" Name="resobjectslist" Type="45ec0aa6-d28b-407a-8c61-ffb64adce738">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="selectonclick">4</Attribute>
						<Attribute Name="top">144</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="template"><![CDATA[
						]]></Attribute>
						<Attribute Name="selectionmode">1</Attribute>
						<Attribute Name="bindings"><![CDATA[
						]]></Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="clickclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">207</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="1e2d0224-ad42-4631-a35b-c3111aa4c3f6" Name="source_list_click" Top="53" Left="241" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.sources.list": self.sidebar.accordion.sourcescnt.sources,
    "sidebar.libraries.list": self.sidebar.accordion.librariescnt.libraries,
}

page.live("source_list_click")

				]]>
				</Action>
				<Action ID="17caf1d3-92f3-4d2a-a30b-0c538ae35611" Name="res_object_view_double_click" Top="570" Left="781" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.libraries": self.sidebar.accordion.librariescnt,
    "sidebar.sources": self.sidebar.accordion.sourcescnt,
    "sidebar.timers": self.sidebar.accordion.timerscnt,
    "sidebar.events": self.sidebar.accordion.eventscnt,
    "sidebar.resources": self.sidebar.accordion.resourcescnt,
    "sidebar.databases": self.sidebar.accordion.databasescnt,
    "resobjectview": self.resobjectslist,
    "dialog.event.edit": self.eventinfodialog,
    "dialog.event.edit.name": self.eventinfodialog.form.eventname,
    "dialog.event.edit.guid": self.eventinfodialog.form.eventguid,
    "dialog.timer.edit": self.timerinfodialog,
    "dialog.timer.edit.name": self.timerinfodialog.form.timername,
    "dialog.timer.edit.interval": self.timerinfodialog.form.timerinterval,
    "dialog.timer.edit.guid": self.timerinfodialog.form.timerguid,
}

page.live("res_object_view_double_click")

				]]>
				</Action>
				<Action ID="d1d36902-9a06-4849-8dda-64942de9aec5" Name="show_delete_selected_res_objects" Top="352" Left="815" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.libraries": self.sidebar.accordion.librariescnt,
    "sidebar.sources": self.sidebar.accordion.sourcescnt,
    "sidebar.timers": self.sidebar.accordion.timerscnt,
    "sidebar.events": self.sidebar.accordion.eventscnt,
    "sidebar.resources": self.sidebar.accordion.resourcescnt,
    "sidebar.databases": self.sidebar.accordion.databasescnt,
    "resobjectview": self.resobjectslist,
    "dialog.event.edit": self.eventinfodialog,
    "dialog.deletesel": self.deleteobjdialog,
}

page.live("show_delete_selected_res_objects")

				]]>
				</Action>
				<Action ID="f73e1989-9517-482c-b769-c31811a9e392" Name="submit_delete_selected_res_objects" Top="420" Left="774" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.libraries": self.sidebar.accordion.librariescnt,
    "sidebar.sources": self.sidebar.accordion.sourcescnt,
    "sidebar.timers": self.sidebar.accordion.timerscnt,
    "sidebar.events": self.sidebar.accordion.eventscnt,
    "sidebar.resources": self.sidebar.accordion.resourcescnt,
    "sidebar.databases": self.sidebar.accordion.databasescnt,
    "resobjectview": self.resobjectslist,
    "dialog.event.edit": self.eventinfodialog,
    "dialog.deletesel": self.deleteobjdialog,
}

page.live("submit_delete_selected_res_objects")

				]]>
				</Action>
				<Action ID="268dcee1-e634-4860-8114-928cf357937c" Name="timer_dialog_submit" Top="673" Left="241" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.libraries": self.sidebar.accordion.librariescnt,
    "sidebar.sources": self.sidebar.accordion.sourcescnt,
    "sidebar.timers": self.sidebar.accordion.timerscnt,
    "sidebar.events": self.sidebar.accordion.eventscnt,
    "sidebar.resources": self.sidebar.accordion.resourcescnt,
    "sidebar.databases": self.sidebar.accordion.databasescnt,
    "resobjectview": self.resobjectslist,
    "dialog.timer.edit": self.timerinfodialog,
}

page.live("timer_dialog_submit")

				]]>
				</Action>
				<Action ID="69253709-41f8-462e-b033-0bcb37777bb7" Name="event_dialog_submit" Top="762" Left="234" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.libraries": self.sidebar.accordion.librariescnt,
    "sidebar.sources": self.sidebar.accordion.sourcescnt,
    "sidebar.timers": self.sidebar.accordion.timerscnt,
    "sidebar.events": self.sidebar.accordion.eventscnt,
    "sidebar.resources": self.sidebar.accordion.resourcescnt,
    "sidebar.databases": self.sidebar.accordion.databasescnt,
    "resobjectview": self.resobjectslist,
    "dialog.event.edit": self.eventinfodialog,
}

page.live("event_dialog_submit")

				]]>
				</Action>
				<Action ID="38e378fa-bc36-4e4e-93ab-a24dcc795a14" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.sources.list": self.sidebar.accordion.sourcescnt.sources,
    "sidebar.libraries.list": self.sidebar.accordion.librariescnt.libraries,
    "sidebar.libraries.cnt": self.sidebar.accordion.librariescnt,
}

page.live()

				]]>
				</Action>
				<Action ID="8299aab7-fc38-41ba-8bef-8eb735fbb331" Name="library_dialog_submit" Top="292" Left="235" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.sources.list": self.sidebar.accordion.sourcescnt.sources,
    "sidebar.libraries.cnt": self.sidebar.accordion.librariescnt,
    "sidebar.libraries.list": self.sidebar.accordion.librariescnt.libraries,
    "dialog.library.edit": self.libraryinfodialog,
}

page.live("library_dialog_submit")

				]]>
				</Action>
				<Action ID="aa2d6823-884b-4c70-acf6-2424d838f3ac" Name="library_list_click" Top="6" Left="243" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.sources.list": self.sidebar.accordion.sourcescnt.sources,
    "sidebar.libraries.list": self.sidebar.accordion.librariescnt.libraries,
    "dialog.library.edit": self.libraryinfodialog,
    "dialog.library.edit.guid": self.libraryinfodialog.form.libguid,
    "dialog.library.edit.name": self.libraryinfodialog.form.libname,
    "dialog.library.edit.desc": self.libraryinfodialog.form.description,
    "dialog.library.edit.submit": self.libraryinfodialog.form.submit,
}

page.live("library_list_click")

				]]>
				</Action>
				<Action ID="42af9377-768d-4851-9318-a8db5c596480" Name="sidebar_item_click" Top="393" Left="237" State="False">
<![CDATA[
"""
"""

from ProSuitePluginIdePage import ProSuitePluginIdePage

page = ProSuitePluginIdePage(self)
page.vdom_objects = {
    "growl": self.growl,
    "sidebar.libraries": self.sidebar.accordion.librariescnt,
    "sidebar.sources": self.sidebar.accordion.sourcescnt,
    "sidebar.timers": self.sidebar.accordion.timerscnt,
    "sidebar.events": self.sidebar.accordion.eventscnt,
    "sidebar.resources": self.sidebar.accordion.resourcescnt,
    "sidebar.databases": self.sidebar.accordion.databasescnt,
    "resobjectview": self.resobjectslist,
}

page.live("sidebar_item_click")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="39a33860-2520-4900-bb6e-7c58fa4643d8" Name="plugins" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass">no-subhead</Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="a2a5455e-63bc-4c16-a5fa-181c027171f9" Name="throbber_load" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="height">22</Attribute>
						<Attribute Name="classname">throb-test</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">1</Attribute>
						<Attribute Name="width">22</Attribute>
						<Attribute Name="left">940</Attribute>
					</Attributes>
					<Objects>
						<Object ID="fb223bb8-cd2f-4a00-88f5-9a2c3d4204f9" Name="image_ca97c81b_de46_4d0f_bd2f_838a601471f9" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">9527aeef-a345-40ff-a652-166bca8ed5da</Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="width">22</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="48edf8c3-a02e-460e-a80b-f417d79dbfe7" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="1710fb47-bdcf-4982-a74b-c119f7776d04" Name="dialog_create" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Create Plug-In</Attribute>
						<Attribute Name="top">514</Attribute>
						<Attribute Name="height">457</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">457</Attribute>
						<Attribute Name="left">15</Attribute>
					</Attributes>
					<Objects>
						<Object ID="3c04d6ff-b34b-4262-ba6b-234db34318ac" Name="form_fda3a737_f2e5_438a_932d_1b016c496714" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">457</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">457</Attribute>
								<Attribute Name="overflow">1</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
							</Attributes>
							<Objects>
								<Object ID="b545ab74-1cb5-48f7-a09a-6e51c2fc1d95" Name="text_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">91</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="value">Plugin name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="aacb7dac-ac59-40c8-a6cc-c6fe0b829629" Name="text_007f09bf_fb5d_4d91_a92b_f6133e0a59fa" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">315</Attribute>
										<Attribute Name="value">Icon:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">186</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">210</Attribute>
									</Attributes>
								</Object>
								<Object ID="c746faf5-08fd-46d7-bdac-0fc478291c61" Name="formtext_author" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">205</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">235</Attribute>
									</Attributes>
								</Object>
								<Object ID="5501c236-c6e2-41c8-b819-769eabfed9e3" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="top">415</Attribute>
										<Attribute Name="left">208</Attribute>
									</Attributes>
								</Object>
								<Object ID="e465d622-31ff-4be2-9ff9-a5b26ade8bdd" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="top">338</Attribute>
										<Attribute Name="left">210</Attribute>
										<Attribute Name="width">212</Attribute>
									</Attributes>
								</Object>
								<Object ID="33e6b029-03c7-47e3-85e1-c067baac6e79" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="top">89</Attribute>
										<Attribute Name="value">Description:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="71c47610-8f53-42c1-9014-5b56ecd43673" Name="bar_71c47610_8f53_42c1_9014_5b56ecd43673" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="color">F6F6F6</Attribute>
										<Attribute Name="width">427</Attribute>
										<Attribute Name="top">301</Attribute>
										<Attribute Name="left">15</Attribute>
										<Attribute Name="height">90</Attribute>
									</Attributes>
								</Object>
								<Object ID="9529d1de-7180-4697-a1f2-9553015b91d3" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">205</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="0084ef77-3b47-49b9-92f0-c79a1541be59" Name="formtextarea_description" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
									<Attributes>
										<Attribute Name="width">417</Attribute>
										<Attribute Name="top">115</Attribute>
										<Attribute Name="left">15</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">165</Attribute>
									</Attributes>
								</Object>
								<Object ID="a9b8cb3e-232a-417f-8d49-6c2265a657c9" Name="text_author" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">98</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="value">Author:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">230</Attribute>
									</Attributes>
								</Object>
								<Object ID="3678ec40-a9da-4ea1-8181-ba123f7c87da" Name="formbutton_save_plugin" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="label">Save</Attribute>
										<Attribute Name="top">415</Attribute>
										<Attribute Name="left">353</Attribute>
									</Attributes>
								</Object>
								<Object ID="8f7f8a5c-a888-45d3-9748-620691b942fc" Name="text_9dceef1e_e68f_4dfb_b940_650848275ea8" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">315</Attribute>
										<Attribute Name="value">Version:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">96</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">35</Attribute>
									</Attributes>
								</Object>
								<Object ID="aeefef93-dd0e-4ec1-827b-12064ee72586" Name="formtext_version" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">338</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">160</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">35</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="943e0862-a7dc-4d91-ac3b-fbdd2f7838a0" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="2e5838b4-a188-4842-8611-a5203b2691dd" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="4cb2560b-638f-4a05-a25c-1e951608cd9c" Name="dialog_error" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">459</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">1171</Attribute>
					</Attributes>
					<Objects>
						<Object ID="1648c30d-08f4-4c80-a25f-4f8739674ae5" Name="button_back" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Back</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">29</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">78</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">269</Attribute>
								<Attribute Name="left">123</Attribute>
							</Attributes>
						</Object>
						<Object ID="409c8e4b-293d-48a8-bf27-0300a2527198" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">266</Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="value">Error description</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="1d22e940-7918-445a-856b-158de1e31198" Name="text_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">266</Attribute>
								<Attribute Name="top">14</Attribute>
								<Attribute Name="value">Error</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="fontsize">16</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="9ceb0a40-999f-4998-ad7f-3baf00c6d70f" Name="button_stop_install" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Stop installation</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">29</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">140</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">269</Attribute>
								<Attribute Name="left">243</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="cfb3c5c8-3200-4c99-a910-8e44c30463e7" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="5828e09c-bafc-417f-9e36-1841efd941e9" Name="button_add_plugin" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">plugin-add</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add new Plugin</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">33</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">118</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">128</Attribute>
						<Attribute Name="left">500</Attribute>
					</Attributes>
				</Object>
				<Object ID="26845610-5487-4108-ab7a-32b663dbed5a" Name="dialog_add_plugin" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Add New Plug-In</Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="left">756</Attribute>
					</Attributes>
					<Objects>
						<Object ID="6b728e43-afb6-43ee-a579-7fc57ea0b2cd" Name="richtext_new" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[<p><strong>Create new:</strong></p>]]></Attribute>
								<Attribute Name="height">44</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">267</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">136</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="8924c926-89c1-444c-90bf-edfac052a393" Name="button_close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">63</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">271</Attribute>
								<Attribute Name="left">320</Attribute>
							</Attributes>
						</Object>
						<Object ID="4af318d6-084c-4f54-a282-e26a598c5bd1" Name="form_new" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">175</Attribute>
								<Attribute Name="height">75</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="eeefb7e7-ee08-4120-a2f2-c8b98d7d063d" Name="formbutton_new" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="label">Create new Plugin</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">202</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">80</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="e36fd4e9-d6a4-4655-bfa0-efc3fb8c9169" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="75968fb6-6ff2-4931-bac3-6d3177971f1d" Name="richtext_import" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[<p><strong>Import from file:</strong></p>]]></Attribute>
								<Attribute Name="height">42</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">167</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">7</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="f0672a12-8012-45c2-b0bb-205d413eb2e2" Name="form_import" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">47</Attribute>
								<Attribute Name="height">75</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="2224baad-6bf5-46ab-847c-2de91e2442ec" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">215</Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="left">22</Attribute>
									</Attributes>
								</Object>
								<Object ID="45145861-42c9-483c-b8e8-7990893ca338" Name="formbutton_upload_plugin" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="label">Install</Attribute>
										<Attribute Name="top">24</Attribute>
										<Attribute Name="left">255</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="68285710-4c60-4adc-bdbe-499b969a9aa8" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="2278f99c-5971-4734-b089-6fbd1dffab5b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="14a71877-e191-4915-b28a-464f8e150894" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="71554cc5-8ea6-464e-b3f0-7c1259ca0169" Name="datatable_plugin" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="top">141</Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">359</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[[ "id", "Picture", "Plugin_info", "Update", "Export", "Open", "Delete", "MD5", "Config"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">684</Attribute>
						<Attribute Name="left">16</Attribute>
					</Attributes>
				</Object>
				<Object ID="b78e42fb-ed70-43ed-8fc6-46f2eb9cf93a" Name="copy_efa9967d_6d2e_48e2_a874_9210099286b3" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">ae8071db-a493-4a45-b20a-ab74c941fe63</Attribute>
						<Attribute Name="source_object_cache">ae8071db-a493-4a45-b20a-ab74c941fe63</Attribute>
					</Attributes>
				</Object>
				<Object ID="9dc80e9d-71db-45cc-a390-8120354ac77f" Name="page_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="width">258</Attribute>
						<Attribute Name="top">119</Attribute>
						<Attribute Name="value">Plugins</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">16</Attribute>
					</Attributes>
				</Object>
				<Object ID="29567428-cac8-4b62-aaad-dd424f90f28c" Name="dialog_uninstall" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Uninstall plugin</Attribute>
						<Attribute Name="top">459</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">756</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8b75eb6f-466a-448d-be81-ed7999183e0e" Name="text_uninstall" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="top">20</Attribute>
								<Attribute Name="value">You are trying to uninstall this plugin. Are you sure?</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="9338c74e-5589-4462-aea2-5e07633c0627" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">34</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">70</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">275</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="40bd45b6-1ea3-4e3a-ac02-64a08e7689ae" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Uninstall plug-in</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">127</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">275</Attribute>
								<Attribute Name="left">263</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="5b5c149c-57e5-40cb-9b53-735ab034bfcb" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="4d0d4adc-4777-48f7-9f90-ee0d2b53cb7c" Name="dialog_md5" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">618</Attribute>
						<Attribute Name="height">138</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">548</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b387f1d4-fd72-465f-9c6c-0ce906886e07" Name="text_md5" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="zindex">9</Attribute>
								<Attribute Name="width">284</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">Text</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="top">35</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">7</Attribute>
							</Attributes>
						</Object>
						<Object ID="269e9647-7cdc-4f65-954e-e7fc9ef423d1" Name="bar_269e9647_7cdc_4f65_954e_e7fc9ef423d1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="color">F6F6F6</Attribute>
								<Attribute Name="width">273</Attribute>
								<Attribute Name="top">21</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="cc7905a8-855c-4311-9f0d-4fad62541d0e" Name="button_close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">34</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">99</Attribute>
								<Attribute Name="left">240</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="00a08c91-06da-4893-b68e-32dac6dd3dd4" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7f9159a5-6a76-4cbd-ba5f-04dcd008c9df" Name="xmldialog" Type="887e2a68-4cb0-e28a-6d7b-4dd41c35ca6a">
					<Attributes>
						<Attribute Name="top">1387</Attribute>
						<Attribute Name="xmldata"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="66ee8881-0448-43f3-b985-043888684c02" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[.plugin-dt {margin-top:25px !important;}
	.plugin-dt table {border:none; height:0px; border-collapse:collapse; position:relative;}
	.plugin-dt table tr {position:relative;}
	.plugin-dt table td {overflow:hidden;}
	.plugin-dt table td {/*border-color:#dedede;*/ border:none;}
	.plugin-dt table td.cell-1 img {width: 48px; /*height: 48px;*/}
	.plugin-dt table, .plugin-dt table tbody, .plugin-dt table tbody tr {position:relative; display:block; width:602px; }
	.plugin-dt table tbody tr {height:240px;}
	.macrolike-cont table, .macrolike-cont table tbody, .macrolike-cont table tbody tr {width: 602px; position:relative;}
	.macrolike-cont table tbody tr {height: 177px; }
	.macrolike-cont table {display:block; overflow:auto; overflow-x:hidden;height:354px; }
	.plugin-dt table .cell-3, .plugin-dt table .cell-4, .plugin-dt table .cell-5, .plugin-dt table .cell-6, .plugin-dt table .cell-7, .plugin-dt table .cell-8 {position:absolute; bottom:10px;}
	.plugin-dt tr {background:url("/1eaa5df0-fca4-4b55-8968-28cc9abd4735.res") repeat-y; padding:0px;}
	.plugin-cont tr {background:url("/b7c8e353-635d-4f0d-ba4d-a76d7fe1c261.res") repeat-y; padding:0px;}
	.macrolike-cont tr {background:url("/e9c97927-a0da-4ead-bb10-e4c2c9b3b459.res") repeat-y; padding:0px;}

	.plugin-dt table .cell-3 {right:238px;}
	.plugin-dt table .cell-4 {right:128px;}
	.macrolike-cont .cell-4 {right:18px !important;}
	.plugin-dt table .cell-5 {right:18px;}
	.macrolike-cont .cell-3 {right:156px !important;}
	.timer-cont .cell-3 {right:18px !important;}
	.plugin-dt table .cell-6, .macrolike-cont table .cell-5, .timer-cont table .cell-4 {left:13px; bottom:13px;}
	.plugin-dt table .cell-7 {left:95px; bottom:13px;}
	.plugin-dt table .cell-8 {left:170px; bottom:13px;}

	.db-cont table .cell-5 {left:340px; bottom:10px; width:128px;}


	.plugin-cont table .cell-3 {right:255px;}
	.plugin-cont table .cell-4 {right:152px;}

	.plugin-dt table .cell-1, .plugin-dt table .cell-2 {display:block; float:left;}
	.plugin-dt table .cell-1 {width:48px; margin:30px; margin-right:20px;}
	.plugin-dt table .cell-2 {width:450px; margin-top:30px;}


	.plugin-dt h1, .plugin-dt h2, .plugin-dt p, .plugin-details h1, .plugin-details h2 {margin:0px; padding:0px; font-weight:normal; }
	.plugin-dt h1, .plugin-dt h2, .plugin-details h1, .plugin-details h2 {float:left;}
	.plugin-dt h1, .plugin-details h1 {font-size:24px; margin-bottom:24px;}
	.plugin-dt h2, .plugin-details h2 {font-size:13px; color:#757575; margin-top:10px;margin-left:8px;}
	.plugin-dt p {font-size:13px;}
	.plugin-dt p:last-child {color:#757575;margin-top:13px;}
	.plugin-dt table td a {padding:0px 14px 0px 14px; }
	.plugin-dt table td a img {margin-bottom:-3px; margin-right:5px; border:0px;}

	.plugin-dt table td a, .plugin-add, .db-cont table .cell-5 a {
	display:block;
	height: 24px !important;
	line-height:24px !important;
	text-align:center !important;
	 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
	 background-repeat:repeat-x;
	 background-position:bottom center;
	 text-decoration:none;
	 border:1px solid #c5c5c5;
	 border-radius: 6px;	 -moz-border-radius:6px;	 -webkit-border-radius: 6px;	 -o-border-radius:6px;	 -ms-border-radius: 6px;
	 cursor:pointer;
	 outline:none !important;
	 box-shadow:inset 0px 0px 3px #fff;		-moz-box-shadow:inset 0px 0px 3px #fff;		-webkit-box-shadow:inset 0px 0px 3px #fff;	 -o-box-shadow:inset 0px 0px 3px #fff;	 -ms-box-shadow:inset 0px 0px 3px #fff;
	 -webkit-transition: all 0.4s ease;		-moz-transition: all 0.4s ease;	 -o-transition: all 0.4s ease;
	 font-size:14px;
	 color:#000;
	font-family:Arial,sans-serif;
	}
.plugin-dt table td a:hover {
	 box-shadow:inset 0px 0px 6px #fff;		-moz-box-shadow:inset 0px 0px 6px #fff;		-webkit-box-shadow:inset 0px 0px 6px #fff;	 -o-box-shadow:inset 0px 0px 6px #fff;	 -ms-box-shadow:inset 0px 0px 6px #fff;
	 border:1px solid #a8a8a8;
	}
	.plugin-dt table .cell-7 a, .plugin-dt table .cell-8 a {border:0px; padding:0px;  text-decoration:none; border-bottom: 1px dashed #bce4ff; border-radius:0px; font-size:12px; line-height:1.5 !important; height:auto !important; color:#0099ff;background:url("/9d8e743a-bed4-4a78-9a5c-844d26e6b30f.res") no-repeat left 50% !important; padding-left:14px;}
	.plugin-dt table .cell-7 a:hover, .plugin-dt table .cell-8 a:hover {border:0px; padding:0px;border-bottom: 1px dashed #fff; padding-left:14px;}
	.plugin-dt table .cell-8 a {background:url("/e1e1a7f6-a559-4915-b814-c54f4d481f62.res") no-repeat left 50% !important;}
 .plugin-add {background:none !important; background:url("/e630c6f1-d33e-40a1-a42f-66fd95a8bec0.res") no-repeat 4px 5px !important; padding-left:22px; box-shadow:1px 1px 2px rgba(0,0,0,0.2);}
 .plugin-add span {line-height:21px !important; display:block; width:100%; text-align:center; }
		.cell-five table .cell-5 a, .plugin-dt table .cell-6 a, .timer-cont table .cell-4 a {border:0px; padding:0px;  text-decoration:none; border-bottom: 1px dashed #bce4ff; border-radius:0px; font-size:12px; line-height:1.5 !important; height:auto !important; color:#0099ff;background:url("/0b3994be-cb96-446b-9a20-cab3330ba172.res") no-repeat !important; padding-left:18px;}
		.cell-five table .cell-5 a:hover, .plugin-dt table .cell-6 a:hover, .timer-cont table .cell-4 a:hover {border:0px; padding:0px;border-bottom: 1px dashed #fff; color:#ff0000; padding-left:18px;}
		.timer-cont table .cell-4  {width:60px;}
		.plugin-dt {margin-top:25px !important;}
.clearfix {clear:both; width:100%; position:relative;}

.cell-five table .cell-5 a, .cell-five table .cell-5 {width:60px;}

.plugin-details h1 {margin-left:18px;}
.plugin-details h1, .plugin-details h2, .plugin-details img {float:left;}
.breadcrumbs a, .blue span {border:0px; padding:0px;  text-decoration:none !important; border-bottom: 1px solid #bce4ff; border-radius:0px; font-size:12px; line-height:1.5 !important; height:auto !important; color:#0099ff !important;}
.blue {text-decoration:none !important; font-size:16px !important; }
.blue span {font-size:14px !important; text-align:left; padding-left:18px;}

.blue.uninstall {background:url("/0b3994be-cb96-446b-9a20-cab3330ba172.res") no-repeat left 50% !important;}
.blue.update {background:url("/690302ab-f3e2-476e-ac6d-a69dc2f0734e.res") no-repeat left 50% !important;}
.blue.export {background:url("/9238c80d-f1ca-4b81-bf4a-59d54bd5c6eb.res") no-repeat left 50% !important;}
.blue.edit {background:url("/910e3e46-f9cf-4aa7-9147-04ec354078c8.res") no-repeat left 50% !important;}
.blue.config {background:url("/19a4bd25-b567-4c32-b8c8-919ad382f99b.res") no-repeat left 50% !important;}

.breadcrumbs {margin-left: 69px; margin-top: -18px;}

.dashed-border-top {border-top:1px dotted #ccc;}


/* PLUG-INS STYLE*/

.gray_back {background-color: #f6f6f6;}

/* END OF PLUG-INS STYLE*/

/* SMART FOLDER CONTENTS*/
.list_path_back {height: 25px; background:url("/bcac0362-ec31-43c9-841a-0cd8d42eb707.res") repeat-x;}
/* END OF SMART FOLDER CONTENTS*/

	/* HACK FOR IE
	------------------------------------------------------------------------*/
	.lt-ie10 .plugin-dt table .cell-3, .lt-ie10 .plugin-dt table .cell-4, .lt-ie10 .plugin-dt table .cell-5, .lt-ie10 .plugin-dt table .cell-6, .lt-ie10 .plugin-dt table .cell-7 {position:relative; bottom:0; left:0; right:0; float:right; margin-right:8px; margin-top:8px;}
	.lt-ie10 .plugin-dt table .cell-6, .lt-ie10 .plugin-dt table .cell-7 {float:left; margin-right:0px; margin-left:8px;}
	.lt-ie10 .plugin-dt table .cell-6 a, .lt-ie10 .plugin-dt table .cell-7 a {text-align:left !important; width:100%;}
	.lt-ie10 .plugin-dt table td a {padding:0px 14px 0px 14px; display:block; width:70px;}
	.lt-ie10 .plugin-dt table .cell-2 {width:450; height:150px; margin-top:30px;}
	.lt-ie10 .plugin-dt table .cell-1, .lt-ie10 .plugin-dt table .cell-2 {display:block; float:left;}

	.lt-ie10 .macrolike-cont {overflow:auto;}
	.lt-ie10 .macrolike-cont table, .lt-ie10 .plugin-dt table {display:block; overflow:auto; overflow-x:hidden; height:0px; }
	.lt-ie10 .macrolike-cont table .cell-2 {width:450; height:90px; margin-top:30px;}
	.lt-ie10 .macrolike-cont table .row {height:0px !important; overflow:hidden !important;}
	.lt-ie10 .macrolike-cont, .lt-ie10 .macrolike-cont table, .lt-ie10 .macrolike-cont tbody {background:none !important; clear:both; }
	.lt-ie10 .macrolike-cont table .cell-3 a, .lt-ie10 .macrolike-cont table .cell-4 a {width:100px;}
	.lt-ie10 .macrolike-cont table .cell-5, .lt-ie10 .timer-cont table .cell-4 {float:left; margin-left:8px; }
	.lt-ie10 .macrolike-cont table .cell-5 a, .lt-ie10 .timer-cont table .cell-4 a {width:50px !important;}]]></Attribute>
						<Attribute Name="left">801</Attribute>
					</Attributes>
				</Object>
				<Object ID="9b7526da-56ba-4685-aa13-b64feed36b1a" Name="dialog_update_plugin" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Update Plug-In</Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">1171</Attribute>
					</Attributes>
					<Objects>
						<Object ID="6cd891a9-438a-4c41-9614-3260b6e9cf99" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">352</Attribute>
								<Attribute Name="top">25</Attribute>
								<Attribute Name="value">Plugin to update - %s</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="f292e01f-e003-4f9a-b5e0-90f4ccf959d5" Name="formbutton_update" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">277</Attribute>
								<Attribute Name="label">Update</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">296</Attribute>
							</Attributes>
						</Object>
						<Object ID="e77eebfd-0529-4603-bc09-9e05eb8b4d69" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">277</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">96</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="left">186</Attribute>
							</Attributes>
						</Object>
						<Object ID="b095dc55-8403-4be4-8eb9-3724c5fb341e" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">52</Attribute>
								<Attribute Name="height">75</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="074e9ff1-6600-4755-8053-d5f6d0b01dd5" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">326</Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="left">22</Attribute>
									</Attributes>
								</Object>
								<Object ID="982e53cd-5050-4e6d-aa53-698dd2833c86" Name="formtext_pluginid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">37</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="d73d2d61-a02d-4793-8461-65cff147f093" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="a6ae4b6c-5be8-42d5-87d0-a9773a59fa2b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7c3cb82b-4122-41b7-bb95-5c5e54a90d07" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">851</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="c63f20d3-9a8a-4e5e-ab8a-9640f6c1796d" Name="plugin_operation" Top="220" Left="221" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
@error_handler
def main():

	from class_plugins import Plugins
	from class_macro import Macros
	from VEE_resources import create_plugin_dir


	def invoke_dispather( macros ):

		from VEE_vmacro_dispatcher import InvokeDispatcher
		from VEE_std_lib import v_currentpage

		invoke_disp = InvokeDispatcher()
		invoke_disp.page 		= self
		invoke_disp.growl 		= self.growl
		invoke_disp.xmldialog 	= self.xmldialog
		invoke_disp.macros 		= macros

		current_page = v_currentpage()
		current_page.page_name = self.name

		invoke_disp.current_page = current_page
		invoke_disp.run()


	plugin_id = session["plugin_id"] = request.arguments.get("keyField", "")
	cell_name = request.arguments.get("headerData", "")

	if plugin_id:
		plugin = Plugins.get_by_id(plugin_id)

		if cell_name and plugin:

			if cell_name == "Update":
				self.dialog_update_plugin.text_description.action( "setText", [ "Plugin to update - %s" % ( plugin.name )] )
				self.dialog_update_plugin.form.formtext_pluginid.action( "setValue", [ plugin.id ])
				self.dialog_update_plugin.action( "show", [ "" ] )

			elif cell_name == "Export":
				self.action("goTo", ["/plugins?op=export"])

			elif cell_name == "Open":
				create_plugin_dir(plugin.guid)
				self.action("goTo", ["/plugin_details?id=%s"%plugin_id])

			elif cell_name == "Delete":
				session["plugin_id"] = plugin_id
				self.dialog_uninstall.action("show", [])

			elif cell_name == "MD5":
				self.dialog_md5.text_md5.action("setText", [plugin.get_md5()])
				self.dialog_md5.action("show", [])

			elif cell_name == "Config":
				from class_macro import Macros
				macros = Macros.get_config_macro( plugin.guid )
				if macros:
					invoke_dispather( macros )


main()

				]]>
				</Action>
				<Action ID="d1f66283-accf-415e-8e08-69673d569a3d" Name="uninstall_plugin" Top="358" Left="939" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
@error_handler
def main():

	from class_plugins import Plugins
	from widget_plugins import WidgetPlugins
	from VEE_resources import delete_plugin_dir

	if "plugin_id" in session and session["plugin_id"]:
		plugin = Plugins.get_by_id(session.get("plugin_id"))
		delete_plugin_dir(plugin.guid)
		plugin.delete()

		widget_plugins = WidgetPlugins()
		plugins_obj = Plugins.get_all()
		widget_plugins.set_data(plugins_obj)
		widget_plugins.render(self.datatable_plugin)

		self.dialog_uninstall.action("hide", [])


main()

				]]>
				</Action>
				<Action ID="b1287169-af1c-4e10-863a-dc622fa3a9f9" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator, license_confirmed

@license_confirmed
@authenticated
@administrator
@error_handler
def main():

	import json, localization, base64
	from xml.dom.minidom import parseString
	from class_macro import Macros
	from class_plugins import Plugins
	from class_timer import Timer
	from class_custom_event import CustomEvent
	from class_xml_macro import XMLMacros
	from class_xml_timer import XMLTimer
	from class_xml_custom_event import XMLCustomEvent
	from class_xml_plugin import XMLPlugin
	from class_xml_plugin_db import XMLPluginDB
	from class_xml_resource import XMLResource
	from utils.uuid import uuid4
	from widget_localization import LocalizationWidget
	from widget_plugins import WidgetPlugins
	from VEE_resources import create_plugin_dir, ResourceFolderManager
	from VEE_sqlite3 import DatabaseManager

	lang = localization.get_lang()

	if "formbutton_save_plugin" in request.arguments:
		plugin = Plugins()
		plugin.guid = str(uuid4())
		plugin.name = request.arguments.get("formtext_name", "")
		plugin.author = request.arguments.get("formtext_author", "")
		plugin.description = request.arguments.get("formtextarea_description", "")
		plugin.version = request.arguments.get("formtext_version", "")
		plugin.zindex = "1"

		if "uploader" in request.arguments:
			file = request.arguments.get("uploader", "", castto=Attachment)
			if file:
				plugin.picture = str(uuid4())
				application.storage.write(plugin.picture, file.handler.read())

		plugin.save()
		create_plugin_dir(plugin.guid)

	if "formbutton_upload_plugin" in request.arguments:
		if request.arguments.get("uploader", "", castto=Attachment):
			try:
				file = request.arguments.get("uploader", "", castto=Attachment)
				xml_data = file.handler.read()

				dom = parseString( xml_data)
				node = XMLPlugin( dom )

				if not Plugins.get_by_guid(node.guid):
					plugin = Plugins()
					plugin.name = node.name
					plugin.description = node.description
					plugin.guid = node.guid
					plugin.version = node.version
					plugin.author = node.author
					plugin.protected = node.protected

					plugin_picture_name = ""
					plugin.picture = ""
					if node.picture:
						plugin.picture = plugin_picture_name = str(uuid4())
						application.storage.write(plugin_picture_name, base64.b64decode(node.picture))
					plugin.save()
					create_plugin_dir(plugin.guid)

					macro_list = []
					for child in node.childs:

						if child.tag == "timer":
							child = XMLTimer( child )

							if child.name:
								timer = Timer()
								timer.fill_from_xml(child, node.guid)
						elif child.tag == "custom_event":
							child = XMLCustomEvent( child )

							if child.name:
								custom_event = CustomEvent()
								custom_event.fill_from_xml(child, node.guid)
						elif child.tag == "macro":
							child = XMLMacros( child )
							if child.name and child.source:
								if child.type == "library":
									macros = Macros()
									macros.fill_from_xml(child, node.guid)
								else:
									macro_list.append((child, node.guid))

						elif child.tag == "database":
							child = XMLPluginDB( child )
							if child.name:
								DatabaseManager(plugin.guid).import_db(child.name, base64.b64decode(child.db_source))
						elif child.tag == "resource":
							child = XMLResource( child )
							if child.name:
								ResourceFolderManager(plugin.guid).import_res(child.name, base64.b64decode(child.res_source))
						else:
							raise Exception(lang.get("xml_not_correctr_error","xml_not_correctr_error"))
					for macro, node_guid in macro_list:
						macros = Macros()
						macros.fill_from_xml(macro, node_guid)
				else:
					raise Exception(lang.get("plugin_exist","plugin_exist"))

			except Exception, ex:
				self.growl.title = lang["error"]
				self.growl.text = ex
				self.growl.show = "1"


	if "formbutton_import" in request.arguments:
		if request.arguments.get("uploader", "", castto=Attachment):
			file = request.arguments.get("uploader", "", castto=Attachment)
			xml_data = file.handler.read()
			dom = parseString( xml_data)
			node = XMLMacros( dom )

			for child in node.childs:
				child = XMLMacros( child )
				if child.name and child.source:
					macros = Macros()
					macros.name 			= child.name
					macros.code 			= child.source
					macros.class_name		= child.class_name
					macros.is_button_macros = child.is_button
					macros.on_board 		= child.on_board

					picture_name = ""
					macros.macros_picture = ""
					if child.macros_picture:
						macros.macros_picture = picture_name = str(uuid4())
						application.storage.write(picture_name, base64.b64decode(child.macros_picture))

					macros.save()
				else:
					self.growl.title = lang["error"]
					self.growl.text	= lang["xml_not_correctr_error"]
					self.growl.visible = "1"

	if "op" in request.arguments and request.arguments.get("op") == "export":
		plugin = Plugins.get_by_id(session.get("plugin_id", ""))
		output = plugin.export()
		output_len = output.tell()
		output.seek(0)
		response.send_file( plugin.name.encode( 'utf8' ) + ".xml", output_len, output )

	if "formtext_pluginid" in request.arguments:
		args = request.arguments
		plugin = Plugins.get_by_id( args.get( "formtext_pluginid", "" ) )
		file = request.arguments.get("uploader", "", castto=Attachment)

		if plugin and file:

			xml_data = file.handler.read()
			dom = parseString( xml_data)
			node = XMLPlugin( dom )

			new_plugin 				= Plugins()
			new_plugin.name 		= node.name
			new_plugin.description 	= node.description
			new_plugin.guid 		= node.guid
			new_plugin.version 		= node.version
			new_plugin.author 		= node.author
			new_plugin.protected	= node.protected

			err_msg = None
			if plugin.guid != new_plugin.guid:
				err_msg = "Wrong guid"

			elif plugin.version > new_plugin.version:
				err_msg = "The update that you are trying to install has older version than installed plugin"

			if err_msg:
				self.dialog_error.text_description.value = err_msg
				self.dialog_error.show = "1"
				self.dialog_update_plugin.text_description.value = self.dialog_update_plugin.text_description.value % ( plugin.name )
				self.dialog_update_plugin.form.formtext_pluginid.value = plugin.id
				self.dialog_update_plugin.show = "1"


			else:

				if plugin.picture:
					application.storage.delete( plugin.picture )
				plugin.delete(True)

				new_plugin.picture = ""
				if node.picture:
					new_plugin.picture = str(uuid4())
					application.storage.write( new_plugin.picture, base64.b64decode(node.picture))

				new_plugin.save()

				for child in node.childs:
					if child.tag == "macro":
						child = XMLMacros( child )

						if child.name and child.source:
							macros = Macros()
							macros.fill_from_xml(child, node.guid)
					elif child.tag == "timer":
						child = XMLTimer( child )

						if child.name:
							timer = Timer()
							timer.fill_from_xml(child, node.guid)
					elif child.tag == "custom_event":
						child = XMLCustomEvent( child )

						if child.name:
							custom_event = CustomEvent()
							custom_event.fill_from_xml(child, node.guid)
					elif child.tag == "database":
						child = XMLPluginDB( child )
						if child.name:
							DatabaseManager(new_plugin.guid).import_db(child.name, base64.b64decode(child.db_source))
					elif child.tag == "resource":
						child = XMLResource( child )

						if child.name:
							ResourceFolderManager(new_plugin.guid).import_res(child.name, base64.b64decode(child.res_source))
					else:
						self.growl.title = lang["error"]
						self.growl.text	= lang["xml_not_correctr_error"]
						self.growl.visible = "1"


	widget_plugins = WidgetPlugins()
	plugins_obj = Plugins.get_all()
	widget_plugins.set_data(plugins_obj)
	widget_plugins.render(self.datatable_plugin)
	#localization_wdgt = LocalizationWidget()

	#localization_wdgt.add_controls( "dialog_uninstall_plugin_title", self.dialog_uninstall )
	#localization_wdgt.add_controls( "btn_upload_files", self.dialog_uninstall.button_apply )
	#localization_wdgt.add_controls( "btn_new_folder", self.dialog_uninstall.button_cancel )
	#localization_wdgt.add_controls( "dialog_uninstall_plugin_text", self.dialog_uninstall.text_uninstall )

	#localization_wdgt.render()




main()

				]]>
				</Action>
				<Action ID="e2c55107-8f30-4a5d-9198-6f1ce16af530" Name="execute_macros" Top="0" Left="0" State="True">
<![CDATA[
#30.01.2013 - last modification. Delete session
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


def invoke_dispather( macros ):

	from VEE_vmacro_dispatcher import InvokeDispatcher
	from VEE_std_lib import v_currentpage

	invoke_disp = InvokeDispatcher()
	invoke_disp.page 		= self
	invoke_disp.growl 		= self.growl
	invoke_disp.xmldialog 	= self.xmldialog
	invoke_disp.macros 		= macros

	current_page = v_currentpage()
	current_page.page_name = self.name

	invoke_disp.current_page = current_page
	invoke_disp.run()


@authenticated
@administrator
@error_handler
def main():

	#macros invoked from macros
	object_guid = request.arguments.get( "macros_id" )
	if object_guid:
		from class_macro import Macros
		macros = Macros.get_by_guid( object_guid )
		if macros:
			invoke_dispather( macros )

main()

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="a2faf518-8fac-4309-b105-1eadd13fe4ed" Name="remote_users_and_groups" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="1fff6688-c154-4f4e-ab6d-6f00a76c6ba1" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="91c10aa2-33f5-4c6b-8062-98edc2325cde" Name="proadmin_logo" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">198</Attribute>
						<Attribute Name="value">00056c03-8d21-48df-b6ce-af5ff57aea69</Attribute>
						<Attribute Name="height">180</Attribute>
						<Attribute Name="width">200</Attribute>
						<Attribute Name="externalurl"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">372</Attribute>
					</Attributes>
				</Object>
				<Object ID="8c73e967-5faa-4a8d-9400-7e518c03fdc4" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">739</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="4f8c0c35-7d12-48b5-8c5a-e124691cf41b" Name="attention" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="width">944</Attribute>
						<Attribute Name="color">A3A3A3</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="value">Application works in remote scheme. Use ProAdmin application to configure Users and Groups.</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="fontsize">16</Attribute>
						<Attribute Name="top">408</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="c256c28a-d18e-47df-bf51-d76b088d63c0" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="bf684f57-6412-4b7c-b2c0-554678b7e73d" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteUsersAndGroupsPage import ProSuiteRemoteUsersAndGroupsPage


page = ProSuiteRemoteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "usgrremote.attention": self.attention
}
page.live()
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="042dcd5f-fd75-4ece-be93-69d8c2233d12" Name="settings" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description">No description</Attribute>
				<Attribute Name="title">Settings</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="e0297a3b-62ce-4758-9027-9b8765dfec1b" Name="remote_control" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">552</Attribute>
						<Attribute Name="height">80</Attribute>
						<Attribute Name="classname">proadmin-big-button remote-scm</Attribute>
						<Attribute Name="width">170</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">484</Attribute>
					</Attributes>
					<Objects>
						<Object ID="f3139c23-5a5d-44c7-b154-78c419811a41" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink">43d4df04-7c20-472b-b867-0ab125af8e76</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Remote Control</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">18</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="32045beb-fb85-4c2e-8c0b-10be8ce3d513" Name="sens_redirect" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink">acb3894d-8aaf-405d-bd0e-2e62aa4cd68c</Attribute>
								<Attribute Name="target">_self</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">170</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="92f26aaf-ce5a-48de-9ef7-6c06fe321d87" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="51c2c8d2-16a4-4bd3-8f5f-36931706f148" Name="plugins" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">378</Attribute>
						<Attribute Name="height">80</Attribute>
						<Attribute Name="classname">proadmin-big-button plugins</Attribute>
						<Attribute Name="width">170</Attribute>
						<Attribute Name="backgroundimage">89057ac9-124c-43de-8938-d92b6686bc53</Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
					<Objects>
						<Object ID="105d20a3-f6f0-4056-ad55-9f5b95dcc4d4" Name="sens_redirect" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink">39a33860-2520-4900-bb6e-7c58fa4643d8</Attribute>
								<Attribute Name="target">_self</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">170</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="e404c6dc-19ac-4773-834b-ed2160134b6a" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink">39a33860-2520-4900-bb6e-7c58fa4643d8</Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Plugins</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">16</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="acb9a433-89e7-484b-b06f-8b1f49cb7499" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="d4982c31-2f21-4c6c-ba06-b487635adce5" Name="users_and_groups" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">554</Attribute>
						<Attribute Name="height">80</Attribute>
						<Attribute Name="classname">proadmin-big-button users-management</Attribute>
						<Attribute Name="width">170</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
					<Objects>
						<Object ID="54eeb8e2-ff12-4964-99cc-aaff359473bf" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink">43bc6b5a-a436-4865-96a8-96ef49ec40a3</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Users &amp; Groups Management</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">54</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">16</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="a3c2ad18-a3ed-43d3-8d04-562349cdfefa" Name="sens_remote" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink">6814366b-48fe-4b51-9b54-0d8c4c830dbd</Attribute>
								<Attribute Name="target">_self</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">170</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6e9a9a6b-f64a-4f57-933e-2b92b63ad60f" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="b79c2aec-0a5b-4a3e-a32b-2fd299defe80" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="021d7fec-579c-4c6f-8cdb-891a70c103ce" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[.proadmin-big-button
{
    border:1px solid #d4d4d4;
    border-radius:8px;
    -moz-border-radius:8px;
    -webkit-border-radius:8px;

}
.proadmin-big-button:hover
{
    border-color:#FF0042;
}
.proadmin-big-button a span,.proadmin-big-button a
{
    color:#000!important;
    font-size:14px!important;
    text-decoration:none!important;
}
.remote-scm
{
    background:#fff url(/930ce7b6-8706-4ce1-a5c9-7ee6a606999c.png);
    background-repeat:repeat-x;
    background-position:bottom right;
}
.rules-management
{
    background:#fff url(/8037310d-b527-4072-af20-28295e7d678c.png);
    background-repeat:repeat-x;
    background-position:bottom right;
}
.users-management
{
    background:#fff url(/55aed72c-64ed-4e3c-a084-0d1550f650cc.png);
    background-repeat:repeat-x;
    background-position:bottom right;
}
.plugins
{
    background:#fff url(/5a20b04b-dec8-448d-9c94-bf9414417f69.res);
    background-repeat:repeat-x;
    background-position:bottom right;
}]]></Attribute>
						<Attribute Name="left">732</Attribute>
					</Attributes>
				</Object>
				<Object ID="362a49ef-ee60-48ac-8b68-2cc41e8813be" Name="pluginsheader" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">334</Attribute>
						<Attribute Name="value">Plugins</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">398</Attribute>
						<Attribute Name="fontsize">18</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="c9c68912-6a59-4dde-badf-265ca3ab9b28" Name="proadminline" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">182</Attribute>
						<Attribute Name="height">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">718</Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="f6220018-09b3-486f-820a-a5a32cf38dda" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="8edb9806-fda3-4680-987f-469fe9d94952" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="b6cf6d19-e68f-47d7-ac7b-525503065b90" Name="pluginsline" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">358</Attribute>
						<Attribute Name="height">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">718</Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="71e0c45f-ca9e-43b4-8115-0c16e99a6877" Name="mailservers" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">202</Attribute>
						<Attribute Name="height">80</Attribute>
						<Attribute Name="classname">proadmin-big-button remote-scm</Attribute>
						<Attribute Name="width">170</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
					<Objects>
						<Object ID="07fbf868-be57-48d9-979f-bac9dabbe7c6" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink">7f6ed206-a6a2-4e99-846d-3a1ef0e2b568</Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Servers</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">18</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="4619354c-39df-416a-99fb-84754704bf21" Name="sens_redirect" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink">7f6ed206-a6a2-4e99-846d-3a1ef0e2b568</Attribute>
								<Attribute Name="target">_self</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">170</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="28b3f6d6-9515-4402-b5fa-7f94b8e36ae7" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="b227ab60-9c6e-4bbf-90ac-385316fff583" Name="generalheader" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">158</Attribute>
						<Attribute Name="value">General</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">398</Attribute>
						<Attribute Name="fontsize">18</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="df0f96c8-c053-47bb-b12e-cccd1b11b09c" Name="pagetitle" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">83</Attribute>
						<Attribute Name="value">Application Settings</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">697</Attribute>
						<Attribute Name="fontsize">32</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="6c5fb5c2-bfe9-4d92-88d1-cfb53cd12098" Name="proadminheader" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">510</Attribute>
						<Attribute Name="value">ProAdmin</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">398</Attribute>
						<Attribute Name="fontsize">18</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="baf992db-7168-431c-8412-dba70da8d1cc" Name="generalline" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">534</Attribute>
						<Attribute Name="height">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">718</Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
				</Object>
				<Object ID="306e560c-7602-4793-aee7-e833c8877d2f" Name="cleaner" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">202</Attribute>
						<Attribute Name="height">80</Attribute>
						<Attribute Name="classname">proadmin-big-button remote-scm</Attribute>
						<Attribute Name="width">170</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">248</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b1fa3518-8d9a-463b-8e5e-db5eb86ccdb7" Name="sens_redirect" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink">408ecd01-64c9-4e73-bdae-b19202fb7c85</Attribute>
								<Attribute Name="target">_self</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">170</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="bab116e8-ab1d-44fb-95bf-9297731f3896" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink">408ecd01-64c9-4e73-bdae-b19202fb7c85</Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cleaner</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">18</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="ebc1db9d-a854-4db8-818b-8e67b42f5619" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="75d877db-2378-4f3d-a94d-5816f02f349d" Name="rules" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="designcolor">9FFA5B</Attribute>
						<Attribute Name="top">552</Attribute>
						<Attribute Name="height">80</Attribute>
						<Attribute Name="classname">proadmin-big-button rules-management</Attribute>
						<Attribute Name="width">170</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">248</Attribute>
					</Attributes>
					<Objects>
						<Object ID="c4196b59-c746-4330-975c-978e9aca00dd" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink">c6021746-cbf1-4f56-bc90-4c1df4dfbaef</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Rules Management</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">91</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">15</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="df333d40-5226-44aa-bf5f-52df8ff33e3d" Name="sens_redirect" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink">c6021746-cbf1-4f56-bc90-4c1df4dfbaef</Attribute>
								<Attribute Name="target">_self</Attribute>
								<Attribute Name="height">80</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">170</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="0a2a2b52-3ecd-4fbc-ae0b-49e117903229" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
			</Objects>
			<Actions>
				<Action ID="38ede96d-0628-4666-9e1e-16d87d10df92" Name="onload" Top="428" Left="526" State="False">
<![CDATA[
"""
"""

from ProSuiteSettingsPage import ProSuiteSettingsPage


page = ProSuiteSettingsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "settings.plugins": self.plugins.btn,
    "settings.remote_control": self.remote_control.btn,
    "settings.users_and_groups": self.users_and_groups.btn,
    "settings.rules": self.rules.btn,
    "settings.cleaner": self.cleaner.btn,
    "settings.servers": self.mailservers.btn,
    "settings.title": self.pagetitle,
    "settings.header.proadmin": self.proadminheader,
    "settings.header.plugins": self.pluginsheader,
    "settings.header.general": self.generalheader,
}
page.run('onload')

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="5b0a11f2-7350-43c8-b2da-9bb7c292317c" Name="macros_source" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass">no-subhead</Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[.CodeMirror {
background:#fff;
}]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="a21d5677-b16e-4761-a043-97a9b19ea044" Name="page_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="width">595</Attribute>
						<Attribute Name="top">105</Attribute>
						<Attribute Name="value">Edit macros source</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
				<Object ID="6054e20c-e095-4c53-b929-675ecde7f008" Name="hypertext_ctrl_s" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="top">72</Attribute>
						<Attribute Name="htmlcode"><![CDATA[<script type='text/javascript'>

if (!(window.mozInnerScreenX == null)) { /* is firefox */
 window.onkeypress = function(event) {
  if (event.charCode === 115 && event.ctrlKey) {
   event.preventDefault();
   execEventBinded( "ef7a1cca_859f_4a9c_a17e_7ddc3bb54a47", "click" )
  // alert("'Save As' dialog suppressed!");
  }
 };
} else {
 jQuery(document).keydown(function(event) {
  var currKey=0,e=e||event;
  currKey=e.keyCode||e.which||e.charCode;  //do this handle FF and IE
  if (!( String.fromCharCode(event.which).toLowerCase() == 's' && event.ctrlKey) && !(event.which == 19)) return true;
  event.preventDefault();

  execEventBinded( "ef7a1cca_859f_4a9c_a17e_7ddc3bb54a47", "click" )
 // alert("put your code here")
  return false;
 });
}

</script>]]></Attribute>
						<Attribute Name="left">722</Attribute>
					</Attributes>
				</Object>
				<Object ID="7e11c9f8-74dd-4c3f-99b6-f791c8082be1" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">852</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="deab61e9-3470-4e3a-bdde-9d8b8ded2ce8" Name="form_macros" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="zindex">2</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">147</Attribute>
						<Attribute Name="height">727</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">1081</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype">multipart/form-data</Attribute>
						<Attribute Name="left">19</Attribute>
					</Attributes>
					<Objects>
						<Object ID="cabd1bc7-b8b3-459e-bac3-0f47bfe9ca0b" Name="formbutton_check" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">682</Attribute>
								<Attribute Name="label">Check</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">469</Attribute>
							</Attributes>
						</Object>
						<Object ID="7c66807b-077f-4104-bc34-ef7c33ee38c4" Name="text_body" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">73</Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="value">Source:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">73</Attribute>
							</Attributes>
						</Object>
						<Object ID="b1ecd33b-0a82-4a88-a5ed-be074a553ab9" Name="codeeditor_macros_body" Type="9a8f8e07-cb43-ff0f-7179-4a437911af23">
							<Attributes>
								<Attribute Name="width">941</Attribute>
								<Attribute Name="top">30</Attribute>
								<Attribute Name="left">73</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">627</Attribute>
							</Attributes>
						</Object>
						<Object ID="a155bc3e-aa6b-4b01-bb97-c5250a362687" Name="formbutton_back" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">678</Attribute>
								<Attribute Name="label">Back</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">814</Attribute>
							</Attributes>
						</Object>
						<Object ID="068f4e57-3abb-4208-bd9e-e7862bf75a9b" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">682</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">331</Attribute>
							</Attributes>
						</Object>
						<Object ID="ef7a1cca-859f-4a9c-a17e-7ddc3bb54a47" Name="formbutton_save" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">678</Attribute>
								<Attribute Name="label">Save</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">925</Attribute>
							</Attributes>
						</Object>
						<Object ID="4911185e-77c4-4449-9b89-f6a89baacf78" Name="formbutton_apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">682</Attribute>
								<Attribute Name="label">Apply</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">607</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="a6cc45ca-f187-4dc0-a9fb-3bb5ddd689cc" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="777f15b6-a7d7-4f4d-a8c9-357cd2c9b0f5" Name="bar_background" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="color">F7F7F7</Attribute>
						<Attribute Name="top">147</Attribute>
						<Attribute Name="height">718</Attribute>
						<Attribute Name="zindex">1</Attribute>
						<Attribute Name="width">1081</Attribute>
						<Attribute Name="left">19</Attribute>
					</Attributes>
				</Object>
				<Object ID="b4ab08c7-8797-458a-88de-8dc0c6ba058b" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="a8d534ad-5a6f-4bf8-9b06-549af98ac8b7" Name="throbber_load" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">83</Attribute>
						<Attribute Name="height">22</Attribute>
						<Attribute Name="classname">throb-test</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">1</Attribute>
						<Attribute Name="width">22</Attribute>
						<Attribute Name="left">874</Attribute>
					</Attributes>
					<Objects>
						<Object ID="64152dbd-f685-495f-8a94-8b22ad474084" Name="image_ca97c81b_de46_4d0f_bd2f_838a601471f9" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">9527aeef-a345-40ff-a652-166bca8ed5da</Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="width">22</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="3f983a2e-1fc8-4bd3-988b-73744fb2e2bc" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="a67513ff-8fe7-4cc6-ab24-2613d9559366" Name="autosave" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="top">72</Attribute>
						<Attribute Name="interval">300000</Attribute>
						<Attribute Name="left">802</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="838d80e9-6427-422c-835d-806c5c17d6a6" Name="save_and_apply" Top="586" Left="196" State="True">
<![CDATA[
from class_macro import Macros
from class_plugins import Plugins


def check():
	from VEE_tools import compile, VScriptComlipationError, PythonCompilationError
	try:
		compile( source )
		return "Passed well."
		self.growl.action( 'show', ["Message", u"No errors in code."] )
	except VScriptComlipationError as error:
		return u"VScript Compilation Error (Line {line}): {msg}".format(
						line = error.line,
						msg	 = error.message )
	except PythonCompilationError as error:
		return u"Python Compilation Error: {msg}".format( msg = error.message )

macro_id = request.shared_variables["macro_id"]
macro = Macros.get_by_id(macro_id)
plugin = Plugins.get_by_guid(macro.plugin_guid)
if plugin and macro:
	source = self.form_macros.codeeditor_macros_body.value = request.arguments.get("codeeditor_macros_body", "")
	macro.code = source
	macro.save()
	result = check()
	self.growl.action( 'show', ["Message", u"Your work is saved! Compilnig: {0}".format( result )] )


else:
	self.growl.action( 'show', ["Error =(", u"Can't save code macro. Please, try to reload the page."] )

				]]>
				</Action>
				<Action ID="68cd139e-efc9-4714-a92c-eec396be94af" Name="autosave" Top="88" Left="262" State="True">
<![CDATA[

				
				]]>
				</Action>
				<Action ID="f7dbd19e-0ad3-449b-ba3d-cd9944c53a74" Name="back" Top="255" Left="575" State="True">
<![CDATA[
from class_macro import Macros
from class_plugins import Plugins

macro_id = request.shared_variables["macro_id"]
macro = Macros.get_by_id(macro_id)
plugin = Plugins.get_by_guid(macro.plugin_guid)
self.action( "goTo", "/plugin_details?id={0}".format(plugin.id) if plugin else "/plugins" )

				]]>
				</Action>
				<Action ID="7dfe7f4c-443d-45da-93c7-e3b4b627e7bb" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator, license_confirmed

@license_confirmed
@authenticated
@administrator
@error_handler
def main():

	from class_macro import Macros
	from class_plugins import Plugins
	import cgi, localization


	lang = localization.get_lang()

	macros_id = request.arguments.get("id")
	response.shared_variables["macro_id"] = macros_id
	plugin = ""
	if macros_id:
		macros = Macros.get_by_id(macros_id)
		plugin = Plugins.get_by_guid(macros.plugin_guid)
		if plugin.protected:
				response.redirect("/plugins.vdom")
		self.form_macros.codeeditor_macros_body.value = macros.code if macros.code else ""


	if "formbutton_apply" in request.arguments:
		if plugin:
			source = self.form_macros.codeeditor_macros_body.value = request.arguments.get("codeeditor_macros_body", "")
			macros = Macros.get_by_id(macros_id) if macros_id else Macros()
			macros.code 		= source
			macros.save()
			response.redirect("/plugin_details?id=" + str(plugin.id))
		else:
			self.growl.title = lang["error"]
			self.growl.text = "Unknown macro"
			self.growl.visible = "1"

	elif "formbutton_check" in request.arguments:
		if macros_id:
			source = self.form_macros.codeeditor_macros_body.value = request.arguments.get("codeeditor_macros_body", "")
			if source:

				from VEE_tools import compile, VScriptComlipationError, PythonCompilationError
				try:
					compile( source )
				except VScriptComlipationError as error:
					self.growl.title = lang["error"]
					self.growl.text = u"VScript Compilation Error (Line {line}): {msg}".format(
									line = error.line,
									msg	 = error.message )
					self.growl.visible = "1"

				except PythonCompilationError as error:
					self.growl.title = lang["error"]
					self.growl.text = u"Python Compilation Error: {msg}".format(
									msg	 = error.message )
					self.growl.visible = "1"

			else:
				self.growl.title = lang["error"]
				self.growl.text = lang["type_macros_code_error"]
				self.growl.visible = "1"

		else:
			self.growl.title = lang["error"]
			self.growl.text = lang["fill_macros_fields_error"]
			self.growl.visible = "1"

	elif "formbutton_cancel" in request.arguments:
		response.redirect("/plugin_details?id=" + str(plugin.id)) if plugin else response.redirect("/plugins")


main()

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="043b8f80-f98e-4b17-b59d-03ccf57ec9a3" Name="plugin_details" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass">no-subhead</Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="1ee20d5b-f0f2-485d-aff4-567dcb7b6b3e" Name="datatable_timer" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="top">724</Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">354</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[["id", "Picture", "Name", "Edit", "Delete"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt macrolike-cont timer-cont</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">685</Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="f49bbc08-098e-416b-9f0b-8b03954bf5ed" Name="button_export" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">blue export</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Export</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">21</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">64</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">190</Attribute>
						<Attribute Name="left">561</Attribute>
					</Attributes>
				</Object>
				<Object ID="3e09f0ef-ebf6-4a6a-ba2c-8532dd0b860c" Name="dialog_add_resource" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}
.boxy-wrapper .title-bar h2{
font-size:24px !important;
text-align:left;
font-weight:normal;
margin:0 !important;
padding:0;
}]]></Attribute>
						<Attribute Name="title">Add resource</Attribute>
						<Attribute Name="top">1879</Attribute>
						<Attribute Name="height">125</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">425</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="left">788</Attribute>
					</Attributes>
					<Objects>
						<Object ID="82210a90-e864-4a7d-87e0-0702e3006504" Name="form_db" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">27</Attribute>
								<Attribute Name="height">94</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">424</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
							</Attributes>
							<Objects>
								<Object ID="dd2348b8-7b41-4a56-8f07-35f73bfc484d" Name="formbutton_cancel_resource" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">58</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">98</Attribute>
									</Attributes>
								</Object>
								<Object ID="04840f71-912f-4697-9f41-8e18e19eb850" Name="uploader_resource" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">405</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="a6d839f2-9bfb-426b-9206-89f6641c890f" Name="formbutton_apply_resource" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">58</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">239</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="3da58d67-819e-4d18-bbfa-45b45e378c42" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="68863e97-ab42-4aab-a447-68c37007ce55" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="dec9f5f1-2cd5-4bb0-b1cd-5a594dde0d73" Name="text_db" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="top">1141</Attribute>
						<Attribute Name="value">Databases</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="width">259</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="d27b0f7a-1baf-4a73-8390-6478b438b970" Name="container_d27b0f7a_1baf_4a73_8390_6478b438b970" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">178</Attribute>
						<Attribute Name="height">13</Attribute>
						<Attribute Name="classname">dashed-border-top</Attribute>
						<Attribute Name="width">602</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">82</Attribute>
					</Attributes>
					<Actions>
						<Action ID="ade2e6b0-9262-4452-8272-b79f9a845d85" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="8905b9d1-05bc-4ecb-aba4-bda089548d1b" Name="dialog_create_macro" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Create Macro</Attribute>
						<Attribute Name="top">151</Attribute>
						<Attribute Name="height">457</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">457</Attribute>
						<Attribute Name="left">1024</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b237ccb6-1e3b-4157-b2e2-6b3082d34f36" Name="form_macro" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="height">453</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">444</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="084c5a5e-0f20-41b5-a54e-059b37c3f488" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">238</Attribute>
										<Attribute Name="top">83</Attribute>
										<Attribute Name="value">Description:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="101d6efd-f5c6-4c80-b891-5f5f8e0e6ff4" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">31</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">425</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="d113a975-4fdb-44d2-a3e4-a127104a9d90" Name="formtextarea_description" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
									<Attributes>
										<Attribute Name="width">418</Attribute>
										<Attribute Name="top">104</Attribute>
										<Attribute Name="left">5</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">160</Attribute>
									</Attributes>
								</Object>
								<Object ID="46b75e6b-a6a4-4639-904b-10e9b567a5c9" Name="text_macro_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">264</Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="value">Macro name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="ae088031-2b74-4a5d-a0af-3f032cb5826f" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">419</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">220</Attribute>
									</Attributes>
								</Object>
								<Object ID="e7511a94-481a-4f47-8fca-02a50f4330f8" Name="formbutton_save" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">419</Attribute>
										<Attribute Name="label">Save</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">339</Attribute>
									</Attributes>
								</Object>
								<Object ID="60e56a61-d9e7-4764-b8e6-adf5cd4cfc6f" Name="container_back" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">285</Attribute>
										<Attribute Name="height">101</Attribute>
										<Attribute Name="classname">gray_back</Attribute>
										<Attribute Name="width">430</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
									<Objects>
										<Object ID="53c81745-79b3-4339-97e5-f1ee991db1ec" Name="formlist_page" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="top">79</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">184</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="71ee5cc7-98db-4ecb-86c0-fd38d52d910b" Name="text_location" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="top">15</Attribute>
												<Attribute Name="visible">0</Attribute>
												<Attribute Name="value">Location:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="width">102</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">226</Attribute>
											</Attributes>
										</Object>
										<Object ID="7ad23341-375e-4f8a-8d82-2849dd5c9673" Name="text_event" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="width">128</Attribute>
												<Attribute Name="top">15</Attribute>
												<Attribute Name="value">Event:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">226</Attribute>
											</Attributes>
										</Object>
										<Object ID="9353a052-ca59-4e4c-ab1a-80f55b4c87f9" Name="formlist_event" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="top">38</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">176</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">226</Attribute>
											</Attributes>
										</Object>
										<Object ID="ed2f3a45-ad59-43cd-afb2-1cd0b4498ffd" Name="formlist_location" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="width">176</Attribute>
												<Attribute Name="top">38</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="visible">0</Attribute>
												<Attribute Name="left">226</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
										<Object ID="62e25934-75c4-4e22-ae40-a22a039360a5" Name="text_timer" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="width">183</Attribute>
												<Attribute Name="top">60</Attribute>
												<Attribute Name="value">Page:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="11adfb76-45fc-4e1a-bead-5def54e37b19" Name="text_type" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="width">90</Attribute>
												<Attribute Name="top">15</Attribute>
												<Attribute Name="value">Type:</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="fontweight">bold</Attribute>
												<Attribute Name="fontfamily">tahoma</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="a78ea4b8-d090-46e4-ab24-7445a36a7c44" Name="formlist_type" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
											<Attributes>
												<Attribute Name="top">38</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="width">184</Attribute>
												<Attribute Name="selectedvalue"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="2f2cca9d-41a8-4a02-9318-2b45924d551b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="0eda8f7b-b0bc-459f-939b-a3a11e2241dc" Name="formtext_id" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">68</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="cd364b18-7ed4-4db8-8029-4ac9b388a9ea" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="978956f0-ad08-4b05-92ad-c5d55337215a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="17741f16-2041-4747-a280-ad8dd64d5265" Name="dialog_delete_timer" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Delete this timer?</Attribute>
						<Attribute Name="top">1076</Attribute>
						<Attribute Name="height">127</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">303</Attribute>
						<Attribute Name="left">824</Attribute>
					</Attributes>
					<Objects>
						<Object ID="6e504913-3f2d-4565-a2b5-89b9db0b04cb" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Delete</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">85</Attribute>
								<Attribute Name="left">231</Attribute>
							</Attributes>
						</Object>
						<Object ID="9a74d0bc-effa-4c0d-9ecf-3e4159f95550" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">85</Attribute>
								<Attribute Name="left">146</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="c8034707-869d-474c-b96a-0ebbe26bc906" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="e31ad40f-a8d4-4d6e-aec4-e97bbe8e0b8f" Name="button_edit" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">blue edit</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Edit</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">21</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">48</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">190</Attribute>
						<Attribute Name="left">636</Attribute>
					</Attributes>
				</Object>
				<Object ID="869ca9e6-f5c9-4ae4-ae9e-d73c6c09f66b" Name="dialog_error" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Error</Attribute>
						<Attribute Name="top">1270</Attribute>
						<Attribute Name="height">231</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">309</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">1204</Attribute>
					</Attributes>
					<Objects>
						<Object ID="fa06a118-5c11-417b-bfbd-8b4c447bbe58" Name="button_stop_install" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Stop installation</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">29</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">140</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">181</Attribute>
								<Attribute Name="left">146</Attribute>
							</Attributes>
						</Object>
						<Object ID="69ca486a-88c6-4366-b9b6-2c342e2aca72" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">266</Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="value">Error description</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="0179b92b-834a-4751-a140-e30f80957c90" Name="button_back" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Back</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">29</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">78</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">181</Attribute>
								<Attribute Name="left">26</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="4fc38707-2e9b-4ba2-8f75-267d080b3324" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7f5d217c-a64d-4f93-8cee-c3b2f522d7a7" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="8ef0c3bc-498c-4d75-a5ee-71c78b28a079" Name="button_add_macro" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">plugin-add</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add new macro</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">33</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">124</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">268</Attribute>
						<Attribute Name="left">554</Attribute>
					</Attributes>
				</Object>
				<Object ID="8ba0ed36-d9d0-446b-b9b9-e6fff34bb067" Name="button_config" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">blue config</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Configure Plugin</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">21</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="width">128</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">190</Attribute>
						<Attribute Name="left">340</Attribute>
					</Attributes>
				</Object>
				<Object ID="f1d9197f-b17d-4789-8cf7-37634d52cbc6" Name="dialog_update_db" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}
.boxy-wrapper .title-bar h2{
font-size:24px !important;
text-align:left;
font-weight:normal;
margin:0 !important;
padding:0;
}]]></Attribute>
						<Attribute Name="title">Update DB</Attribute>
						<Attribute Name="top">1879</Attribute>
						<Attribute Name="height">125</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">425</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="left">788</Attribute>
					</Attributes>
					<Objects>
						<Object ID="a157eff6-6273-4a20-82f3-3d2a1e46c798" Name="form_db" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">27</Attribute>
								<Attribute Name="height">94</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">424</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
							</Attributes>
							<Objects>
								<Object ID="5cf62f50-603d-4064-a5ae-99061e60c7a0" Name="uploader_db" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">405</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="3a2d3d4e-fc55-4b84-b3cf-4c132e2e0e56" Name="formbutton_update_db" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">58</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">239</Attribute>
									</Attributes>
								</Object>
								<Object ID="59e83be5-b0cd-4ba0-a439-e5f48187551b" Name="formtext_old_db_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">49</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">70</Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="24d0364c-0cbd-410a-b7d8-0f8196896314" Name="formbutton_cancel_db" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">58</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">98</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="9911be19-101f-4b71-8509-fd4335dff3e2" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="9711f8f0-e686-409c-9141-4be5afdf7fe6" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="47ffc90e-60d4-4731-98e1-fcb197c31a92" Name="dialog_delete_custom_event" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Delete this custom event?</Attribute>
						<Attribute Name="top">2249</Attribute>
						<Attribute Name="height">128</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">305</Attribute>
						<Attribute Name="left">844</Attribute>
					</Attributes>
					<Objects>
						<Object ID="77d5fafd-4d01-4589-9973-074b79abd6fd" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">85</Attribute>
								<Attribute Name="left">146</Attribute>
							</Attributes>
						</Object>
						<Object ID="ddbf3adc-f98d-4eb0-b27d-fc0b9601fa04" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Delete</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">85</Attribute>
								<Attribute Name="left">231</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="0e2764d1-4a44-4513-b6b0-e57be7752019" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="a2877a1f-d395-4f59-b2a7-8d766797277f" Name="button_db" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">plugin-add</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add new DB</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">28</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">134</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">1138</Attribute>
						<Attribute Name="left">544</Attribute>
					</Attributes>
				</Object>
				<Object ID="b00f6eff-41c2-4c29-bf4d-60686693dced" Name="dialog_uploader" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">1082</Attribute>
						<Attribute Name="height">170</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="left">453</Attribute>
					</Attributes>
					<Objects>
						<Object ID="110773fe-0839-472c-9110-b2f340d87b82" Name="form_uploader" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">300</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">170</Attribute>
							</Attributes>
							<Objects>
								<Object ID="9e606bfe-45a4-444f-88b2-217041159ad7" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">133</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">91</Attribute>
									</Attributes>
								</Object>
								<Object ID="354dddee-8b79-4351-9a74-27d9af479615" Name="formbutton_apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">133</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">196</Attribute>
									</Attributes>
								</Object>
								<Object ID="c289dde2-3799-444a-9129-fdc63d810cf8" Name="text_c289dde2_3799_444a_9129_fdc63d810cf8" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">248</Attribute>
										<Attribute Name="top">13</Attribute>
										<Attribute Name="value">Choose Image</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="0320945c-4357-409b-90ed-d0ac694e6c9a" Name="formtext_macro_id" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">91</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">34</Attribute>
									</Attributes>
								</Object>
								<Object ID="85f444bc-3248-4204-abcf-170e927b581a" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="top">59</Attribute>
										<Attribute Name="left">34</Attribute>
										<Attribute Name="width">230</Attribute>
									</Attributes>
								</Object>
								<Object ID="505f35b4-5c32-4a48-9c9a-128e03e27905" Name="bar_505f35b4_5c32_4a48_9c9a_128e03e27905" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="color">F6F6F6</Attribute>
										<Attribute Name="width">270</Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="left">15</Attribute>
										<Attribute Name="height">63</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="c193a6b6-a39f-4f2d-b790-2de98084413e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6cf9b3aa-ffce-4361-839e-aa05ef4b1be3" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="cbbd45b8-5f53-4df0-a3bb-6fc444b0e8bf" Name="dialog_create" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Create Plugin</Attribute>
						<Attribute Name="top">911</Attribute>
						<Attribute Name="height">457</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">460</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">295</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b6e06802-09d6-48ae-82ae-ce526f50758c" Name="form_update" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">457</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">457</Attribute>
								<Attribute Name="overflow">1</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
							</Attributes>
							<Objects>
								<Object ID="2ea0745b-fd43-428d-9dc4-9ff4c12a2678" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="top">89</Attribute>
										<Attribute Name="value">Description:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="c29ad32e-9290-44c2-a6ea-8dd43d373b57" Name="formtext_id" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">61</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="bec67273-e72b-4a98-9743-82d60ad8f3e3" Name="hpt" Type="7085bd26-e653-490b-908f-61208c260a86">
									<Attributes>
										<Attribute Name="top">353</Attribute>
										<Attribute Name="height">30</Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="htmlcode"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="76360be3-e747-4f2e-9e26-a309d2c389d4" Name="formtextarea_description" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
									<Attributes>
										<Attribute Name="width">420</Attribute>
										<Attribute Name="top">115</Attribute>
										<Attribute Name="left">13</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">155</Attribute>
									</Attributes>
								</Object>
								<Object ID="c5881573-fbe2-4042-b546-d9c0bf614c4b" Name="text_9dceef1e_e68f_4dfb_b940_650848275ea8" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">307</Attribute>
										<Attribute Name="value">Version:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">96</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">32</Attribute>
									</Attributes>
								</Object>
								<Object ID="514579e7-ef67-4f08-b2ce-80575451a620" Name="container_514579e7_ef67_4f08_b2ce_80575451a620" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">292</Attribute>
										<Attribute Name="classname">gray_back</Attribute>
										<Attribute Name="width">431</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
									<Actions>
										<Action ID="65d8c02c-bd4a-4b64-b8e0-e071f3dc5bc8" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="41562d60-4950-4b83-a4ed-e4a1c851ed55" Name="text_007f09bf_fb5d_4d91_a92b_f6133e0a59fa" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">307</Attribute>
										<Attribute Name="value">Icon:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">186</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">226</Attribute>
									</Attributes>
								</Object>
								<Object ID="166d77e9-48ad-46bd-80bf-4e963d1de694" Name="formtext_author" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">215</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">225</Attribute>
									</Attributes>
								</Object>
								<Object ID="39f7fd9a-9b05-4fe0-beec-48aca7a97298" Name="formtext_version" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">329</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">180</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">32</Attribute>
									</Attributes>
								</Object>
								<Object ID="a0be7374-a173-4516-a33c-a90333ad603c" Name="text_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">91</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="value">Plugin name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="e85f095d-b3e4-4cfa-a046-1cb691be4261" Name="formbutton_save_plugin" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">420</Attribute>
										<Attribute Name="label">Save</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">360</Attribute>
									</Attributes>
								</Object>
								<Object ID="ef79df1a-3689-44da-9f73-88e5978a91a3" Name="text_author" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">98</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="value">Author:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">240</Attribute>
									</Attributes>
								</Object>
								<Object ID="cbd9bf8c-ad8b-42fc-8072-05bce806106a" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">420</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">261</Attribute>
									</Attributes>
								</Object>
								<Object ID="cfe9abb2-6b11-437f-b221-dd9c6fe762d9" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">200</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="570584d9-c793-4f32-8afb-0b5bfa346c2d" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="top">329</Attribute>
										<Attribute Name="left">226</Attribute>
										<Attribute Name="width">200</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="987c6c8c-1c38-4e76-959f-589740f8375a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="97cf87ff-e46e-4400-9bc5-b46d4475a573" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="243b689d-0bec-4168-99ca-106a99ad234c" Name="datatable_macros" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="top">284</Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">354</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[[ "id", "Picture", "Macros_info", "Edit_info", "Edit_source", "Delete"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt macrolike-cont cell-five</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">684</Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="beb930f0-a5ca-411e-a579-b682af7e20c2" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[.plugin-dt {margin-top:25px !important;}
	.plugin-dt table {border:none; height:0px; border-collapse:collapse; position:relative;}
	.plugin-dt table tr {position:relative;}
	.plugin-dt table td {overflow:hidden;}
	.plugin-dt table td {/*border-color:#dedede;*/ border:none;}
	.plugin-dt table td.cell-1 img {width: 48px; /*height: 48px;*/}
	.plugin-dt table, .plugin-dt table tbody, .plugin-dt table tbody tr {position:relative; display:block; width:602px; }
	.plugin-dt table tbody tr {height:240px;}
	.macrolike-cont table, .macrolike-cont table tbody, .macrolike-cont table tbody tr {width: 602px; position:relative;}
	.macrolike-cont table tbody tr {height: 177px; }
	.macrolike-cont table {display:block; overflow:auto; overflow-x:hidden;height:354px; }
	.plugin-dt table .cell-3, .plugin-dt table .cell-4, .plugin-dt table .cell-5, .plugin-dt table .cell-6, .plugin-dt table .cell-7, .plugin-dt table .cell-8 {position:absolute; bottom:10px;}
	.plugin-dt tr {background:url("/1eaa5df0-fca4-4b55-8968-28cc9abd4735.res") repeat-y; padding:0px;}
	.plugin-cont tr {background:url("/b7c8e353-635d-4f0d-ba4d-a76d7fe1c261.res") repeat-y; padding:0px;}
	.macrolike-cont tr {background:url("/e9c97927-a0da-4ead-bb10-e4c2c9b3b459.res") repeat-y; padding:0px;}

	.plugin-dt table .cell-3 {right:238px;}
	.plugin-dt table .cell-4 {right:128px;}
	.macrolike-cont .cell-4 {right:18px !important;}
	.plugin-dt table .cell-5 {right:18px;}
	.macrolike-cont .cell-3 {right:156px !important;}
	.timer-cont .cell-3 {right:18px !important;}
	.plugin-dt table .cell-6, .macrolike-cont table .cell-5, .timer-cont table .cell-4 {left:13px; bottom:13px;}
	.plugin-dt table .cell-7 {left:95px; bottom:13px;}
	.plugin-dt table .cell-8 {left:170px; bottom:13px;}

	.db-cont table .cell-5 {left:340px; bottom:10px; width:128px;}


	.plugin-cont table .cell-3 {right:255px;}
	.plugin-cont table .cell-4 {right:152px;}

	.plugin-dt table .cell-1, .plugin-dt table .cell-2 {display:block; float:left;}
	.plugin-dt table .cell-1 {width:48px; margin:30px; margin-right:20px;}
	.plugin-dt table .cell-2 {width:450px; margin-top:30px;}


	.plugin-dt h1, .plugin-dt h2, .plugin-dt p, .plugin-details h1, .plugin-details h2 {margin:0px; padding:0px; font-weight:normal; }
	.plugin-dt h1, .plugin-dt h2, .plugin-details h1, .plugin-details h2 {float:left;}
	.plugin-dt h1, .plugin-details h1 {font-size:24px; margin-bottom:24px;}
	.plugin-dt h2, .plugin-details h2 {font-size:13px; color:#757575; margin-top:10px;margin-left:8px;}
	.plugin-dt p {font-size:13px;}
	.plugin-dt p:last-child {color:#757575;margin-top:13px;}
	.plugin-dt table td a {padding:0px 14px 0px 14px; }
	.plugin-dt table td a img {margin-bottom:-3px; margin-right:5px; border:0px;}

	.plugin-dt table td a, .plugin-add, .db-cont table .cell-5 a {
	display:block;
	height: 24px !important;
	line-height:24px !important;
	text-align:center !important;
	 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
	 background-repeat:repeat-x;
	 background-position:bottom center;
	 text-decoration:none;
	 border:1px solid #c5c5c5;
	 border-radius: 6px;	 -moz-border-radius:6px;	 -webkit-border-radius: 6px;	 -o-border-radius:6px;	 -ms-border-radius: 6px;
	 cursor:pointer;
	 outline:none !important;
	 box-shadow:inset 0px 0px 3px #fff;		-moz-box-shadow:inset 0px 0px 3px #fff;		-webkit-box-shadow:inset 0px 0px 3px #fff;	 -o-box-shadow:inset 0px 0px 3px #fff;	 -ms-box-shadow:inset 0px 0px 3px #fff;
	 -webkit-transition: all 0.4s ease;		-moz-transition: all 0.4s ease;	 -o-transition: all 0.4s ease;
	 font-size:14px;
	 color:#000;
	font-family:Arial,sans-serif;
	}
.plugin-dt table td a:hover {
	 box-shadow:inset 0px 0px 6px #fff;		-moz-box-shadow:inset 0px 0px 6px #fff;		-webkit-box-shadow:inset 0px 0px 6px #fff;	 -o-box-shadow:inset 0px 0px 6px #fff;	 -ms-box-shadow:inset 0px 0px 6px #fff;
	 border:1px solid #a8a8a8;
	}
	.plugin-dt table .cell-7 a, .plugin-dt table .cell-8 a {border:0px; padding:0px;  text-decoration:none; border-bottom: 1px dashed #bce4ff; border-radius:0px; font-size:12px; line-height:1.5 !important; height:auto !important; color:#0099ff;background:url("/9d8e743a-bed4-4a78-9a5c-844d26e6b30f.res") no-repeat left 50% !important; padding-left:14px;}
	.plugin-dt table .cell-7 a:hover, .plugin-dt table .cell-8 a:hover {border:0px; padding:0px;border-bottom: 1px dashed #fff; padding-left:14px;}
	.plugin-dt table .cell-8 a {background:url("/e1e1a7f6-a559-4915-b814-c54f4d481f62.res") no-repeat left 50% !important;}
 .plugin-add {background:none !important; background:url("/e630c6f1-d33e-40a1-a42f-66fd95a8bec0.res") no-repeat 4px 5px !important; padding-left:22px; box-shadow:1px 1px 2px rgba(0,0,0,0.2);}
 .plugin-add span {line-height:21px !important; display:block; width:100%; text-align:center; }
		.cell-five table .cell-5 a, .plugin-dt table .cell-6 a, .timer-cont table .cell-4 a {border:0px; padding:0px;  text-decoration:none; border-bottom: 1px dashed #bce4ff; border-radius:0px; font-size:12px; line-height:1.5 !important; height:auto !important; color:#0099ff;background:url("/0b3994be-cb96-446b-9a20-cab3330ba172.res") no-repeat !important; padding-left:18px;}
		.cell-five table .cell-5 a:hover, .plugin-dt table .cell-6 a:hover, .timer-cont table .cell-4 a:hover {border:0px; padding:0px;border-bottom: 1px dashed #fff; color:#ff0000; padding-left:18px;}
		.timer-cont table .cell-4  {width:60px;}
		.plugin-dt {margin-top:25px !important;}
.clearfix {clear:both; width:100%; position:relative;}

.cell-five table .cell-5 a, .cell-five table .cell-5 {width:60px;}

.plugin-details h1 {margin-left:18px;}
.plugin-details h1, .plugin-details h2, .plugin-details img {float:left;}
.breadcrumbs a, .blue span {border:0px; padding:0px;  text-decoration:none !important; border-bottom: 1px solid #bce4ff; border-radius:0px; font-size:12px; line-height:1.5 !important; height:auto !important; color:#0099ff !important;}
.blue {text-decoration:none !important; font-size:16px !important; }
.blue span {font-size:14px !important; text-align:left; padding-left:18px;}

.blue.uninstall {background:url("/0b3994be-cb96-446b-9a20-cab3330ba172.res") no-repeat left 50% !important;}
.blue.update {background:url("/690302ab-f3e2-476e-ac6d-a69dc2f0734e.res") no-repeat left 50% !important;}
.blue.export {background:url("/9238c80d-f1ca-4b81-bf4a-59d54bd5c6eb.res") no-repeat left 50% !important;}
.blue.edit {background:url("/910e3e46-f9cf-4aa7-9147-04ec354078c8.res") no-repeat left 50% !important;}
.blue.config {background:url("/19a4bd25-b567-4c32-b8c8-919ad382f99b.res") no-repeat left 50% !important;}

.breadcrumbs {margin-left: 69px; margin-top: -18px;}

.dashed-border-top {border-top:1px dotted #ccc;}


/* PLUG-INS STYLE*/

.gray_back {background-color: #f6f6f6;}

/* END OF PLUG-INS STYLE*/

/* SMART FOLDER CONTENTS*/
.list_path_back {height: 25px; background:url("/bcac0362-ec31-43c9-841a-0cd8d42eb707.res") repeat-x;}
/* END OF SMART FOLDER CONTENTS*/

	/* HACK FOR IE
	------------------------------------------------------------------------*/
	.lt-ie10 .plugin-dt table .cell-3, .lt-ie10 .plugin-dt table .cell-4, .lt-ie10 .plugin-dt table .cell-5, .lt-ie10 .plugin-dt table .cell-6, .lt-ie10 .plugin-dt table .cell-7 {position:relative; bottom:0; left:0; right:0; float:right; margin-right:8px; margin-top:8px;}
	.lt-ie10 .plugin-dt table .cell-6, .lt-ie10 .plugin-dt table .cell-7 {float:left; margin-right:0px; margin-left:8px;}
	.lt-ie10 .plugin-dt table .cell-6 a, .lt-ie10 .plugin-dt table .cell-7 a {text-align:left !important; width:100%;}
	.lt-ie10 .plugin-dt table td a {padding:0px 14px 0px 14px; display:block; width:70px;}
	.lt-ie10 .plugin-dt table .cell-2 {width:450; height:150px; margin-top:30px;}
	.lt-ie10 .plugin-dt table .cell-1, .lt-ie10 .plugin-dt table .cell-2 {display:block; float:left;}

	.lt-ie10 .macrolike-cont {overflow:auto;}
	.lt-ie10 .macrolike-cont table, .lt-ie10 .plugin-dt table {display:block; overflow:auto; overflow-x:hidden; height:0px; }
	.lt-ie10 .macrolike-cont table .cell-2 {width:450; height:90px; margin-top:30px;}
	.lt-ie10 .macrolike-cont table .row {height:0px !important; overflow:hidden !important;}
	.lt-ie10 .macrolike-cont, .lt-ie10 .macrolike-cont table, .lt-ie10 .macrolike-cont tbody {background:none !important; clear:both; }
	.lt-ie10 .macrolike-cont table .cell-3 a, .lt-ie10 .macrolike-cont table .cell-4 a {width:100px;}
	.lt-ie10 .macrolike-cont table .cell-5, .lt-ie10 .timer-cont table .cell-4 {float:left; margin-left:8px; }
	.lt-ie10 .macrolike-cont table .cell-5 a, .lt-ie10 .timer-cont table .cell-4 a {width:50px !important;}]]></Attribute>
						<Attribute Name="left">801</Attribute>
					</Attributes>
				</Object>
				<Object ID="8fcea866-438d-41bf-8faf-3d5fd15886ed" Name="dialog_delete_db" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}
.boxy-wrapper .title-bar h2{
font-size:24px !important;
text-align:left;
font-weight:normal;
margin:0 !important;
padding:0;
}]]></Attribute>
						<Attribute Name="title">Delete this DB?</Attribute>
						<Attribute Name="top">1018</Attribute>
						<Attribute Name="height">124</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="left">1169</Attribute>
					</Attributes>
					<Objects>
						<Object ID="92b0966e-0055-4b63-8673-3794a8ac8ad5" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Delete</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">65</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">86</Attribute>
								<Attribute Name="left">221</Attribute>
							</Attributes>
						</Object>
						<Object ID="25a2ceb1-e6c8-405d-bfb5-49dfe72316a9" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">86</Attribute>
								<Attribute Name="left">138</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="cc5f0d29-b2eb-4515-98e0-277f01cda742" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="1fdd303c-59cf-4fe3-b409-640d231ce5ec" Name="button_update" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">blue update</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Update</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">21</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">74</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">190</Attribute>
						<Attribute Name="left">477</Attribute>
					</Attributes>
				</Object>
				<Object ID="4fa291d0-ae63-44f0-ba23-4bfde1beb873" Name="dialog_update_plugin" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Update Plug-In</Attribute>
						<Attribute Name="top">1496</Attribute>
						<Attribute Name="height">228</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">421</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">806</Attribute>
					</Attributes>
					<Objects>
						<Object ID="a1c4ea60-84aa-4563-9f61-f3f077a9413d" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">190</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">96</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="left">199</Attribute>
							</Attributes>
						</Object>
						<Object ID="b4d99029-2609-4ee9-a492-46bf370732f3" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">10</Attribute>
								<Attribute Name="value">Plugin to update - %s</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
						</Object>
						<Object ID="1a1410fe-447c-432d-877a-a4a67c7e44f5" Name="formbutton_update_plugin" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">190</Attribute>
								<Attribute Name="label">Update</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">314</Attribute>
							</Attributes>
						</Object>
						<Object ID="8e548be8-2fe8-4776-a1bc-7ce60974a794" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">43</Attribute>
								<Attribute Name="height">68</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">387</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
							<Objects>
								<Object ID="7be288b2-a68a-4cf2-a891-6ed217551078" Name="formtext_pluginid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">41</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
								<Object ID="48ceeb51-112f-4edc-bc2d-c473e8cc68fb" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">348</Attribute>
										<Attribute Name="top">19</Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="90e615e0-c6c7-41af-8496-338a18cb6eb9" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="1a72ce65-01d0-45b5-870b-a10e7ff6781d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="989886bc-d4f9-4a4b-9bac-66133a218123" Name="text_macros" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="top">266</Attribute>
						<Attribute Name="value">Macros</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="width">258</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="efc4bf05-6f3a-4fcf-afcd-033d6786dd63" Name="datatable_db" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="top">1166</Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">354</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[["id", "Picture","Name", "Import", "Delete", "Export"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt macrolike-cont timer-cont db-cont</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">685</Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="d4709eea-860a-49ed-a07a-a8f1d6e7904d" Name="dialog_add_custom_event" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Edit custom event</Attribute>
						<Attribute Name="top">2072</Attribute>
						<Attribute Name="height">132</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">367</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">817</Attribute>
					</Attributes>
					<Objects>
						<Object ID="50fffe41-49c5-4a23-912a-e695732acb79" Name="form_add_custom_event" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="height">116</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">347</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="e697b2fa-26e9-4c01-9bb7-e21a4abaed2a" Name="formtext_id" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">5</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">204</Attribute>
									</Attributes>
								</Object>
								<Object ID="93da6677-086b-42fd-86f9-93cff4aec94d" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">76</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">101</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">142</Attribute>
									</Attributes>
								</Object>
								<Object ID="930a8bf9-4291-4b86-a845-7ac85a6d3f68" Name="formbutton_apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">76</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">256</Attribute>
									</Attributes>
								</Object>
								<Object ID="68c63e4d-6316-483b-8361-58fa6cf1cddd" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="31923a8d-e62e-466e-beda-aa26341002ce" Name="text_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">310</Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="value">Name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="ab63e568-f482-454c-90e4-5f816345cc9d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="419b0a83-f1ba-4ee6-902e-70328371755a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="4bc75331-84e6-4e83-a28f-3cb7cffc9369" Name="text_timer" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="top">704</Attribute>
						<Attribute Name="value">Timers</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="width">214</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="89340e1a-f6eb-4434-9284-9efaa82fd847" Name="dialog_uninstall" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Uninstall plugin</Attribute>
						<Attribute Name="top">948</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">65</Attribute>
					</Attributes>
					<Objects>
						<Object ID="9eb72a41-8d45-4355-9977-4ed5f9c003b5" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Uninstall plug-in</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">127</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">275</Attribute>
								<Attribute Name="left">263</Attribute>
							</Attributes>
						</Object>
						<Object ID="2698d327-3b16-4100-ac84-f2d349325ad8" Name="text_uninstall" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="top">20</Attribute>
								<Attribute Name="value">You are trying to uninstall this plugin. Are you sure?</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="e9bc99cc-d22a-40f3-9b94-101b8fb5c760" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">34</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">70</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">275</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e09cf6a8-18cc-47b7-a3a2-b992dcd20690" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="64ef8aba-645d-40cf-92a0-d04c2326f08f" Name="richtext_plugin" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="color"><![CDATA[
						]]></Attribute>
						<Attribute Name="align"><![CDATA[
						]]></Attribute>
						<Attribute Name="value"><![CDATA[<p><span style="color: #444444;">[empty]</span></p>]]></Attribute>
						<Attribute Name="height">67</Attribute>
						<Attribute Name="classname">plugin-details</Attribute>
						<Attribute Name="width">684</Attribute>
						<Attribute Name="font"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">111</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">14</Attribute>
					</Attributes>
				</Object>
				<Object ID="732551de-c12d-41c6-865f-51b96c00e13a" Name="button_unistall" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">blue uninstall</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Unistall Plugin</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">21</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">118</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">191</Attribute>
						<Attribute Name="left">81</Attribute>
					</Attributes>
				</Object>
				<Object ID="16d0f1f4-d22d-42bd-98aa-b3e59c945d2c" Name="text_resources" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="top">1586</Attribute>
						<Attribute Name="value">Resources</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="width">214</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">79</Attribute>
					</Attributes>
				</Object>
				<Object ID="a84552b0-3630-45c7-98a9-53cbe104c07a" Name="button_add_timer" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">plugin-add</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add new Timer</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">28</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">134</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">702</Attribute>
						<Attribute Name="left">544</Attribute>
					</Attributes>
				</Object>
				<Object ID="143ec014-566b-463d-b6ed-1c34165f82e1" Name="datatable_custom_event" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">2072</Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">354</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[["id", "Picture", "Name", "Edit", "Delete"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt macrolike-cont timer-cont</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">685</Attribute>
						<Attribute Name="left">79</Attribute>
					</Attributes>
				</Object>
				<Object ID="f07b1e52-c4c0-4f59-9ccb-caeaf0986e99" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">75</Attribute>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">887</Attribute>
					</Attributes>
				</Object>
				<Object ID="ad46a552-5f6e-400b-9703-26dc831aeb61" Name="page_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="width">258</Attribute>
						<Attribute Name="top">111</Attribute>
						<Attribute Name="value">Description</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">79</Attribute>
					</Attributes>
				</Object>
				<Object ID="0666ee5a-6792-44be-a669-7f017d19aff9" Name="dialog_add_plugin" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Add New Plug-In</Attribute>
						<Attribute Name="top">648</Attribute>
						<Attribute Name="height">357</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">418</Attribute>
						<Attribute Name="left">795</Attribute>
					</Attributes>
					<Objects>
						<Object ID="d871137a-0fdb-4e4b-989f-96240db1937d" Name="form_new" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">229</Attribute>
								<Attribute Name="height">77</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">364</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
							<Objects>
								<Object ID="42d584a9-9036-4f6a-bfa5-af28325d1dd4" Name="formbutton_new" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">20</Attribute>
										<Attribute Name="label">Create new Plugin</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">202</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">82</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="ef03db12-5b29-41a4-bbfa-9369f017efd3" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="0fc9ff72-0b4d-42ae-8670-429e640bfb0e" Name="button_close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">63</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">321</Attribute>
								<Attribute Name="left">334</Attribute>
							</Attributes>
						</Object>
						<Object ID="c4b7ac7b-ea95-41c6-a541-0941fa3f18ae" Name="richtext_new" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[<p>Create new:</p>]]></Attribute>
								<Attribute Name="height">44</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">267</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">197</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">18</Attribute>
							</Attributes>
						</Object>
						<Object ID="ec8357d9-3854-4868-a12b-84f89b11333c" Name="richtext_import" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[<p><span style="color: #444444;">Import from file:</span></p>]]></Attribute>
								<Attribute Name="height">42</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">167</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">87</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
						</Object>
						<Object ID="f40c0c2c-4209-4577-b150-199fc66ab039" Name="form_import" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">129</Attribute>
								<Attribute Name="height">68</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">380</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
							<Actions>
								<Action ID="8ce94765-36e7-428d-b688-44aac58e2583" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="efb90f6d-33fd-40e2-b9bd-fb1fcf2f3bb0" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7010c84c-65f4-4328-8608-dc9f248465d9" Name="xmldialog" Type="887e2a68-4cb0-e28a-6d7b-4dd41c35ca6a">
					<Attributes>
						<Attribute Name="top">1387</Attribute>
						<Attribute Name="xmldata"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="523a4b39-aacf-44ce-b72b-d74f6bef6c4a" Name="button_resource" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">plugin-add</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add new resource</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">28</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">134</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">1584</Attribute>
						<Attribute Name="left">544</Attribute>
					</Attributes>
				</Object>
				<Object ID="dcaeafc5-a631-4cab-8115-b6ff4a252887" Name="dialog_delete_macro" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Delete this macro?</Attribute>
						<Attribute Name="top">1018</Attribute>
						<Attribute Name="height">124</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="left">1169</Attribute>
					</Attributes>
					<Objects>
						<Object ID="6494bbc6-115a-4f30-b93b-a459150d0053" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Delete</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">65</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">86</Attribute>
								<Attribute Name="left">221</Attribute>
							</Attributes>
						</Object>
						<Object ID="6fc95ca3-b5b8-4066-9065-91a2375ab18a" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">86</Attribute>
								<Attribute Name="left">138</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="48e6a0e0-65eb-40fd-88e4-55a228603c87" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="01144c68-f110-47dc-aa83-a5d4425c6656" Name="text_custom_events" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="top">2032</Attribute>
						<Attribute Name="value">Custom events</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="width">214</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">79</Attribute>
					</Attributes>
				</Object>
				<Object ID="03314946-c812-483a-8890-182fa93d739d" Name="dialog_add_timer" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Edit timer</Attribute>
						<Attribute Name="top">1270</Attribute>
						<Attribute Name="height">187</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">367</Attribute>
						<Attribute Name="left">782</Attribute>
					</Attributes>
					<Objects>
						<Object ID="a62e3921-e0a4-4450-b541-ef37ccc8b022" Name="form_add_timer" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="height">174</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">347</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">9</Attribute>
							</Attributes>
							<Objects>
								<Object ID="80163290-353e-4ad0-bbfb-66b72ca4fc6e" Name="text_period" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="top">60</Attribute>
										<Attribute Name="value">Interval:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="2b531ca0-974b-4fe1-86cb-5f3cfdc5d53c" Name="formtext_id" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">5</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">204</Attribute>
									</Attributes>
								</Object>
								<Object ID="caa92944-4f5e-4db5-9901-3c3b6a69183e" Name="text_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">310</Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="value">Name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="7bff09a5-bb09-42b6-acd0-188fa799abac" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">144</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">101</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">145</Attribute>
									</Attributes>
								</Object>
								<Object ID="c1945aca-fd0f-42ae-b3b6-af90cb8d54cc" Name="formbutton_apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">144</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">257</Attribute>
									</Attributes>
								</Object>
								<Object ID="c2300c2d-128f-4a9c-a0b4-b427cd0933a9" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
								<Object ID="bf0a8718-001c-4a3e-afb7-2dd0d925a7bb" Name="formtext_period" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">84</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">5</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="94d6da6d-6a5d-4bf1-9091-9194fb0ad90a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="43ac2fc6-be77-41af-86df-4e6494795ac9" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="1903bee5-0b6c-482d-939c-a33730fb1a45" Name="button_create_config" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">blue config</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Create config</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">21</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">128</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">190</Attribute>
						<Attribute Name="left">340</Attribute>
					</Attributes>
				</Object>
				<Object ID="cbef28c3-8026-41cf-b9b8-6720dd352178" Name="button_add_custom_event" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">plugin-add</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add new custom event</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">28</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">164</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">2044</Attribute>
						<Attribute Name="left">514</Attribute>
					</Attributes>
				</Object>
				<Object ID="b1f80320-18af-4f4a-acc7-85f17164b6d3" Name="dialog_delete_resource" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}
.boxy-wrapper .title-bar h2{
font-size:24px !important;
text-align:left;
font-weight:normal;
margin:0 !important;
padding:0;
}]]></Attribute>
						<Attribute Name="title">Delete this resource?</Attribute>
						<Attribute Name="top">1076</Attribute>
						<Attribute Name="height">127</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">303</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="left">824</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b16e5553-8a7e-4c9e-86ee-10ca5d18dd53" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">85</Attribute>
								<Attribute Name="left">146</Attribute>
							</Attributes>
						</Object>
						<Object ID="95c0e58a-3910-421c-80a5-8c666706f081" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Delete</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">85</Attribute>
								<Attribute Name="left">231</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="cb2a32bf-483a-4e6b-9b38-8235e8db8739" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="a67e755b-fb72-4b47-9494-5df0bfc72a11" Name="datatable_resource" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="top">1612</Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">354</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[["id", "Picture", "Name", "Export", "Delete"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt macrolike-cont timer-cont</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">685</Attribute>
						<Attribute Name="left">79</Attribute>
					</Attributes>
				</Object>
				<Object ID="5c2cec8a-38b2-4933-b5c0-9c5758b7a34b" Name="dialog_add_db" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}
.boxy-wrapper .title-bar h2{
font-size:24px !important;
text-align:left;
font-weight:normal;
margin:0 !important;
padding:0;
}]]></Attribute>
						<Attribute Name="title">Add database</Attribute>
						<Attribute Name="top">1789</Attribute>
						<Attribute Name="height">177</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">425</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="left">841</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8f5c6371-9a12-4705-80e1-14e36720f9d4" Name="form_db" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">27</Attribute>
								<Attribute Name="height">150</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">424</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
							</Attributes>
							<Objects>
								<Object ID="90452a98-5f56-4eac-a20f-1853da062e13" Name="formbutton_cancel_db" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">103</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">99</Attribute>
									</Attributes>
								</Object>
								<Object ID="f8c3cb14-9505-48d3-875c-763023b8361a" Name="formtext_db_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">2</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">312</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">100</Attribute>
									</Attributes>
								</Object>
								<Object ID="15c0bd76-8272-4cf0-a77e-7fe4b5c29320" Name="uploader_db" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">405</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">49</Attribute>
										<Attribute Name="left">7</Attribute>
									</Attributes>
								</Object>
								<Object ID="7bd0fc71-cf7d-4d74-ab39-5b978a06c9cc" Name="formbutton_apply_db" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">103</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">236</Attribute>
									</Attributes>
								</Object>
								<Object ID="a2cd0bd6-8976-4a0f-8df3-0050ad8d3c6b" Name="text_name_db" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">92</Attribute>
										<Attribute Name="top">7</Attribute>
										<Attribute Name="value">DB name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">7</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="95295e97-2daa-42f2-8124-45fc8cc44a2c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="221872d5-91ee-45c8-b66b-345ad3765e37" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="368950d0-c674-4d30-ab61-932c7aae6d5d" Name="throbber_load" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">64</Attribute>
						<Attribute Name="height">22</Attribute>
						<Attribute Name="classname">throb-test</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">1</Attribute>
						<Attribute Name="width">22</Attribute>
						<Attribute Name="left">969</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b8cb6f5d-27ec-42a0-8d88-c83041b73fb1" Name="image_ca97c81b_de46_4d0f_bd2f_838a601471f9" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">9527aeef-a345-40ff-a652-166bca8ed5da</Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="width">22</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="447897fb-864d-45ed-987a-808b221c328e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
			</Objects>
			<Actions>
				<Action ID="6eb58859-ee66-4980-8901-8d44b9f3c606" Name="delete_resource" Top="3293" Left="239" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from widget_resource import WidgetResource
	from class_plugins import Plugins
	from VEE_resources import ResourceFolderManager

	plugin_id = request.shared_variables["plugin_id"]
	res_name = request.shared_variables["res_name"]
	if plugin_id and res_name:
		plugin = Plugins.get_by_id(int(plugin_id))
		ResourceFolderManager(plugin.guid).delete_res(res_name)

		widget_resource = WidgetResource()
		widget_resource.set_data(ResourceFolderManager(plugin.guid).resourcelist, plugin.guid)
		widget_resource.render(self.datatable_resource)


	self.dialog_delete_resource.action("hide", [])
	response.shared_variables["res_name"] = ""


main()

				]]>
				</Action>
				<Action ID="6c83648b-a216-48a9-923d-575d1c574e96" Name="delete_macro" Top="1373" Left="761" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_macro import Macros
	from widget_macro import WidgetMacros
	from class_plugins import Plugins

	macros_id = request.shared_variables["macro_id"]
	plugin_id = request.shared_variables["plugin_id"]
	if macros_id:
		macros = Macros.get_by_id(macros_id)
		macros.delete()

	plugin = Plugins.get_by_id(plugin_id)
	macros = plugin.get_macros()
	config_is_exist = False
	for m in macros:
		if m.name == "config":
			config_is_exist = True

	if config_is_exist == True:
		self.button_config.visible = "1"
		self.button_create_config.visible = "0"
	else:
		self.button_config.visible = "0"
		self.button_create_config.visible = "1"

	plugin = Plugins.get_by_id(plugin_id)
	macros = plugin.get_macros()

	widget_macros = WidgetMacros()
	widget_macros.set_data(macros)
	widget_macros.render(self.datatable_macros)

	self.dialog_delete_macro.action("hide", [])
	response.shared_variables["macro_id"] = ""


main()

				]]>
				</Action>
				<Action ID="dc4f1306-d908-47cc-947e-98df8c79e821" Name="delete_db" Top="3047" Left="302" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from widget_plugin_db import WidgetPluginDB
	from class_plugins import Plugins
	from VEE_sqlite3 import DatabaseManager

	plugin_id = request.shared_variables["plugin_id"]
	db_name = request.shared_variables["db_name"]

	if plugin_id and db_name:
		plugin = Plugins.get_by_id(int(plugin_id))
		DatabaseManager(plugin.guid).delete_db(db_name)

		widget_db = WidgetPluginDB()
		widget_db.set_data(DatabaseManager(plugin.guid).databaselist)
		widget_db.render(self.datatable_db)

	self.dialog_delete_db.action("hide", [])
	response.shared_variables["db_name"] = ""


main()

				]]>
				</Action>
				<Action ID="9b8b3332-dfc2-49c2-8237-755bc921624c" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator, license_confirmed

@license_confirmed
@authenticated
@administrator
#@error_handler
def main():

	import json, localization, base64
	from xml.dom.minidom import parseString
	from class_plugins import Plugins
	from class_xml_macro import XMLMacros
	from class_xml_timer import XMLTimer
	from class_xml_custom_event import XMLCustomEvent
	from class_xml_plugin import XMLPlugin
	from class_xml_plugin_db import XMLPluginDB
	from class_xml_resource import XMLResource
	from utils.uuid import uuid4
	from widget_localization import LocalizationWidget
	from widget_plugins import WidgetPlugins
	from widget_macro import WidgetMacros
	from widget_timer import WidgetTimer
	from widget_custom_event import WidgetCustomEvent
	from widget_plugin_db import WidgetPluginDB
	from widget_resource import WidgetResource
	from class_macro import Macros
	from class_timer import Timer
	from class_custom_event import CustomEvent
	from VEE_sqlite3 import DatabaseManager
	from VEE_resources import ResourceFolderManager

	lang = localization.get_lang()

	if "id" in request.arguments:
		try:
			plugin = Plugins.get_by_id(int(request.arguments.get("id", 0)))
			if plugin.protected:
				response.redirect("/plugins.vdom")
			macros = plugin.get_macros()
			timer_list = plugin.get_timer()
			custom_event_list = plugin.get_custom_event()

			config_is_exist = False
			for m in macros:
				if m.name == "config":
					config_is_exist = True

			if config_is_exist == True:
				self.button_config.visible = "1"
				self.button_create_config.visible = "0"
			else:
				self.button_config.visible = "0"
				self.button_create_config.visible = "1"

			response.shared_variables["plugin_id"] = plugin.id
			widget_plugins = WidgetPlugins()
			widget_plugins.set_single_data(plugin)
			widget_plugins.render(richtext = self.richtext_plugin)

			widget_macros = WidgetMacros()
			widget_macros.set_data(macros)
			widget_macros.render(self.datatable_macros)

			widget_timer = WidgetTimer()
			widget_timer.set_data(timer_list)
			widget_timer.render(self.datatable_timer)

			widget_custom_event = WidgetCustomEvent()
			widget_custom_event.set_data(custom_event_list)
			widget_custom_event.render(self.datatable_custom_event)

			widget_db = WidgetPluginDB()
			widget_db.set_data(DatabaseManager(plugin.guid).databaselist)
			widget_db.render(self.datatable_db)

			widget_resource = WidgetResource()
			widget_resource.set_data(ResourceFolderManager(plugin.guid).resourcelist, plugin.guid)
			widget_resource.render(self.datatable_resource)

			self.dialog_add_timer.action("hide", [])
		except Exception, ex:
			self.growl.title = lang["error"]
			self.growl.text	= str(ex)
			self.growl.visible = "1"



	if "formbutton_save_plugin" in request.arguments:
		plugin = Plugins.get_by_id(request.arguments.get("formtext_id", ""))
		if plugin:
			plugin.name = request.arguments.get("formtext_name", "")
			plugin.author = request.arguments.get("formtext_author", "")
			plugin.description = request.arguments.get("formtextarea_description", "")
			plugin.version = request.arguments.get("formtext_version", "")
			#raise Exception(file.name)
			if "uploader" in request.arguments:
				file = request.arguments.get("uploader", "", castto=Attachment)
				if file:
					plugin.picture = str(uuid4())
					application.storage.write(plugin.picture, file.handler.read())

			plugin.save()
		plugin = Plugins.get_by_id(int(request.arguments.get("formtext_id", "")))
		widget_plugins = WidgetPlugins()
		widget_plugins.set_single_data(plugin)
		widget_plugins.render(richtext = self.richtext_plugin)

		macros = plugin.get_macros()
		config_is_exist = False
		for m in macros:
			if m.name == "config":
				config_is_exist = True

		if config_is_exist == True:
			self.button_config.visible = "1"



	if "formbutton_update_plugin" in request.arguments:
		args = request.arguments
		plugin = Plugins.get_by_id( args.get( "formtext_pluginid", "" ) )
		file = request.arguments.get("uploader", "", castto=Attachment)

		if plugin and file:

			xml_data = file.handler.read()
			dom = parseString( xml_data)
			node = XMLPlugin( dom )

			new_plugin 				= Plugins()
			new_plugin.name 		= node.name
			new_plugin.description 	= node.description
			new_plugin.guid 		= node.guid
			new_plugin.version 		= node.version
			new_plugin.author 		= node.author

			err_msg = None
			if plugin.guid != new_plugin.guid:
				err_msg = "Wrong guid"

			elif plugin.version > new_plugin.version:
				err_msg = "The update that you are trying to install has older version than installed plugin"

			if err_msg:
				self.dialog_error.text_description.value = err_msg
				self.dialog_error.show = "1"
				self.dialog_update_plugin.text_description.value = self.dialog_update_plugin.text_description.value % ( plugin.name )
				self.dialog_update_plugin.form.formtext_pluginid.value = plugin.id
				self.dialog_update_plugin.show = "1"


			else:

				if plugin.picture:
					application.storage.delete( plugin.picture )
				plugin.delete()

				new_plugin.picture = ""
				if node.picture:
					new_plugin.picture = str(uuid4())
					application.storage.write( new_plugin.picture, base64.b64decode(node.picture))

				new_plugin.save()

				for child in node.childs:
					if child.tag == "macro":
						child = XMLMacros( child )

						if child.name and child.source:
							macros = Macros()
							macros.fill_from_xml(child, node.guid)
					elif child.tag == "timer":
						child = XMLTimer( child )

						if child.name:
							timer = Timer()
							timer.fill_from_xml(child, node.guid)
					elif child.tag == "custom_event":
						child = XMLCustomEvent( child )

						if child.name:
							custom_event = CustomEvent()
							custom_event.fill_from_xml(child, node.guid)
					elif child.tag == "database":
						child = XMLPluginDB( child )

						if child.name:
							DatabaseManager(new_plugin.guid).import_db(child.name, base64.b64decode(child.db_source))
					elif child.tag == "resource":
						child = XMLResource( child )

						if child.name:
							ResourceFolderManager(new_plugin.guid).import_res(child.name, base64.b64decode(child.res_source))
					else:
						self.growl.title = lang["error"]
						self.growl.text	= lang["xml_not_correctr_error"]
						self.growl.visible = "1"

	if "op" in request.arguments and request.arguments.get("op") == "export":
		plugin_id = request.arguments.get("plugin_id", "")
		plugin = Plugins.get_by_id(int(plugin_id))
		output = plugin.export()
		output_len = output.tell()
		output.seek(0)
		response.send_file(plugin.name.encode("utf8") + ".xml", output_len, output)

	if "op" in request.arguments and request.arguments.get("op") == "export_db":
		db_name = request.arguments.get("db", "")
		plugin = Plugins.get_by_id(int(request.arguments.get("plugin_id", 0)))
		if plugin:
			output = DatabaseManager(plugin.guid).export_db(db_name)
			from StringIO import StringIO
			outp = StringIO()
			outp.write( output.read() )
			outp_len = outp.tell()
			outp.seek(0)
			response.send_file(db_name, outp_len, outp)


	if "formbutton_apply" in request.arguments:
		#raise Exception("1")
		macros_id = request.arguments.get("formtext_macro_id", "")
		macros = Macros.get_by_id(macros_id)
		if "uploader" in request.arguments:
			picture = request.arguments.get("uploader", "", castto=Attachment)
			picture_name = ""
			if picture:
				macros.macros_picture = picture_name = str(uuid4())
				application.storage.write(picture_name, picture.handler.read())
		macros.save()

		plugin_id = request.arguments.get("id", "")
		plugin = Plugins.get_by_id(int(plugin_id))
		macros = plugin.get_macros()

		widget_macros = WidgetMacros()
		widget_macros.set_data(macros)
		widget_macros.render(self.datatable_macros)


	if "formbutton_apply_db" in request.arguments:
		db_file = request.arguments.get("uploader_db", "", castto=Attachment)
		if db_file:
			db_name = request.arguments.get("formtext_db_name") if request.arguments.get("formtext_db_name") else db_file.name
			if db_name in DatabaseManager(plugin.guid).databaselist:
				#db_name = "new_" + db_name
				self.growl.title = lang["error"]
				self.growl.text	= "DB '"+db_name+"' exist"
				self.growl.visible = "1"
			else:
				if plugin:
					DatabaseManager(plugin.guid).import_db(db_name, db_file.handler)
			widget_db = WidgetPluginDB()
			widget_db.set_data(DatabaseManager(plugin.guid).databaselist)
			widget_db.render(self.datatable_db)

	if "formbutton_update_db" in request.arguments:
		db_file = request.arguments.get("uploader_db", "", castto=Attachment)
		if db_file:
			db_name = request.arguments.get("formtext_db_name") if request.arguments.get("formtext_db_name") else db_file.name
			if plugin:
				old_db_name = request.arguments.get("formtext_old_db_name", "")
				try:
					DatabaseManager(plugin.guid).delete_db(old_db_name)
				except:
					pass
			DatabaseManager(plugin.guid).import_db(db_name, db_file.handler)
			widget_db = WidgetPluginDB()
			widget_db.set_data(DatabaseManager(plugin.guid).databaselist)
			widget_db.render(self.datatable_db)

	if "formbutton_apply_resource" in request.arguments:
		resource_file = request.arguments.get("uploader_resource", "", castto=Attachment)
		resource_name = resource_file.name
		if resource_file:
			if resource_name in ResourceFolderManager(plugin.guid).resourcelist:
				#resource_name = "new_" + resource_name
				self.growl.title = lang["error"]
				self.growl.text	= "Resource '"+resource_name+"' exist"
				self.growl.visible = "1"
			else:
				if plugin:
					ResourceFolderManager(plugin.guid).import_res(resource_name, resource_file.handler)

		widget_resource = WidgetResource()
		widget_resource.set_data(ResourceFolderManager(plugin.guid).resourcelist, plugin.guid)
		widget_resource.render(self.datatable_resource)


main()

				]]>
				</Action>
				<Action ID="22a9317c-1219-4bea-a766-25333198d598" Name="fill_dialog_timer" Top="1682" Left="220" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_timer import Timer
	timer_id = request.shared_variables["timer_id"]
	if timer_id:
		self.dialog_add_timer.form_add_timer.formtext_id.value = timer_id
		timer = Timer.get_by_id(timer_id)
		self.dialog_add_timer.form_add_timer.formtext_name.value = timer.name
		self.dialog_add_timer.form_add_timer.formtext_period.value = timer.period
	else:
		self.dialog_add_timer.form_add_timer.formtext_id.value = ""
		self.dialog_add_timer.form_add_timer.formtext_name.value = ""
		self.dialog_add_timer.form_add_timer.formtext_period.value = "00:00:00:00"


main()

				]]>
				</Action>
				<Action ID="4ffe16df-c5ab-4dd8-ac3b-d4271978241b" Name="clear_macros_form" Top="1106" Left="649" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
@error_handler
def main():
	self.dialog_create_macro.form_macro.formtext_name.value = ""
	self.dialog_create_macro.form_macro.formtextarea_description.value = ""
	self.dialog_create_macro.form_macro.formtext_id.value = ""


main()

				]]>
				</Action>
				<Action ID="c2f0d44a-2d8f-4619-a009-4bd9f2ebd306" Name="save_custom_event" Top="3448" Left="1142" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_custom_event import CustomEvent
	from widget_custom_event import WidgetCustomEvent
	from class_plugins import Plugins

	name = request.arguments.get("formtext_name", "")
	id = request.arguments.get("formtext_id", "")
	plugin_id = request.shared_variables["plugin_id"]
	plugin = Plugins.get_by_id(plugin_id)
	if name:
		custom_event = CustomEvent.get_by_id(id) if id else CustomEvent()
		custom_event.name = name
		custom_event.plugin_guid = plugin.guid
		custom_event.save()
	else:
		self.growl.action("show", ["Error", "Fill custom event name"])



	custom_event_list = plugin.get_custom_event()
	widget_custom_event = WidgetCustomEvent()
	widget_custom_event.set_data(custom_event_list)
	widget_custom_event.render(self.datatable_custom_event)
	self.dialog_add_custom_event.action("hide", [])


main()

				]]>
				</Action>
				<Action ID="145a5ec3-ae9b-416e-92f0-1926c41af7db" Name="fill_update_dialog" Top="2161" Left="1398" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_plugins import Plugins
	plugin_id = request.shared_variables["plugin_id"]
	if plugin_id:
		plugin = Plugins.get_by_id(plugin_id)

		self.dialog_update_plugin.text_description.action( "setText", [ "Plugin to update - %s" % ( plugin.name ) ] )
		self.dialog_update_plugin.form.formtext_pluginid.action( "setValue", [ plugin.id ])


main()

				]]>
				</Action>
				<Action ID="8bbed525-e3bc-4297-aff8-ca38f4963901" Name="custom_event_operation" Top="3099" Left="1147" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	custom_event_id = request.arguments.get("keyField", "")
	cell_name = request.arguments.get("headerData", "")

	if custom_event_id:
		if cell_name == "Edit":
			response.shared_variables["custom_event_id"] = custom_event_id
			self.dialog_add_custom_event.action("show", [])
		elif cell_name == "Delete":
			response.shared_variables["custom_event_id"] = custom_event_id
			self.dialog_delete_custom_event.action("show", [])


main()

				]]>
				</Action>
				<Action ID="f7a165b6-0d3e-4aed-b708-980bc2dfa44b" Name="delete_timer" Top="1900" Left="737" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_timer import Timer
	from widget_plugins import WidgetPlugins
	from widget_timer import WidgetTimer
	from class_plugins import Plugins
	plugin_id = request.shared_variables["plugin_id"]
	timer_id = request.shared_variables["timer_id"]
	if timer_id:
		timer = Timer.get_by_id(timer_id)
		timer.delete()

	plugin = Plugins.get_by_id(plugin_id)
	timer = plugin.get_timer()

	widget_timer = WidgetTimer()
	widget_timer.set_data(timer)
	widget_timer.render(self.datatable_timer)

	self.dialog_delete_timer.action("hide", [])
	response.shared_variables["timer_id"]


main()

				]]>
				</Action>
				<Action ID="416d2e88-8c66-405d-b903-ca8b10c22b91" Name="delete_custom_event" Top="3218" Left="1136" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_custom_event import CustomEvent
	from widget_plugins import WidgetPlugins
	from widget_custom_event import WidgetCustomEvent
	from class_plugins import Plugins
	plugin_id = request.shared_variables["plugin_id"]
	custom_event_id = request.shared_variables["custom_event_id"]
	if custom_event_id:
		custom_event = CustomEvent.get_by_id(custom_event_id)
		custom_event.delete()

	plugin = Plugins.get_by_id(plugin_id)
	custom_event_list = plugin.get_custom_event()

	widget_custom_event = WidgetCustomEvent()
	widget_custom_event.set_data(custom_event_list)
	widget_custom_event.render(self.datatable_custom_event)

	self.dialog_delete_custom_event.action("hide", [])
	response.shared_variables["custom_event_id"] = ""


main()

				]]>
				</Action>
				<Action ID="2bbc6dbc-184e-4c2f-b3e3-50cf45076407" Name="macros_operation" Top="1115" Left="253" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	macros_id = request.arguments.get("keyField", "")
	cell_name = request.arguments.get("headerData", "")

	if macros_id:
		if cell_name == "Picture":
			self.dialog_uploader.form_uploader.formtext_macro_id.action("setValue", [macros_id] )
			self.dialog_uploader.action("show", [])
		elif cell_name == "Edit_info":
			response.shared_variables["macro_id"] = macros_id
			self.dialog_create_macro.form_macro.formtext_id.action("setValue", [macros_id] )
			self.dialog_create_macro.action("show", [])
		elif cell_name == "Edit_source":
			self.action("goTo",["/macros_source?id="+macros_id])
		elif cell_name == "Delete":
			response.shared_variables["macro_id"] = macros_id
			self.dialog_delete_macro.action("show", [])


main()

				]]>
				</Action>
				<Action ID="69c8d49b-52c8-4d62-a5b5-19ac85949f0b" Name="execute_macros" Top="2496" Left="265" State="True">
<![CDATA[
#30.01.2013 - last modification. Delete session
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


def invoke_dispather( macros ):

	from VEE_vmacro_dispatcher import InvokeDispatcher
	from VEE_std_lib import v_currentpage

	invoke_disp = InvokeDispatcher()
	invoke_disp.page 		= self
	invoke_disp.growl 		= self.growl
	invoke_disp.xmldialog 	= self.xmldialog
	invoke_disp.macros 		= macros

	current_page = v_currentpage()
	current_page.page_name = self.name

	invoke_disp.current_page = current_page
	invoke_disp.run()


@authenticated
@administrator
#@error_handler
def main():

	from class_plugins import Plugins

	plugin_id = request.shared_variables[ "plugin_id" ]
	plugin = Plugins.get_by_id( plugin_id )
	if plugin:
		from class_macro import Macros
		macros = Macros.get_config_macro( plugin.guid )
		if macros:
			invoke_dispather( macros )

main()

				]]>
				</Action>
				<Action ID="76333007-dcfa-4363-85bd-8752cb1b638b" Name="fill_dialog_custom_event" Top="3340" Left="1140" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_custom_event import CustomEvent

	custom_event_id = request.shared_variables["custom_event_id"]

	if custom_event_id:
		self.dialog_add_custom_event.form_add_custom_event.formtext_id.value = custom_event_id
		custom_event = CustomEvent.get_by_id(custom_event_id)
		self.dialog_add_custom_event.form_add_custom_event.formtext_name.value = custom_event.name
	else:
		self.dialog_add_custom_event.form_add_custom_event.formtext_id.value = ""
		self.dialog_add_custom_event.form_add_custom_event.formtext_name.value = ""


main()

				]]>
				</Action>
				<Action ID="e073a74d-2c29-4948-aa31-b126667978df" Name="res_operation" Top="3487" Left="268" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	res_name = request.arguments.get("keyField", "")
	cell_name = request.arguments.get("headerData", "")
	plugin_id = request.shared_variables["plugin_id"]

	if res_name:
		if cell_name == "Delete":
			response.shared_variables["res_name"] = res_name
			self.dialog_delete_resource.action("show", [])


main()

				]]>
				</Action>
				<Action ID="e5eaee4e-a4ff-4672-9bca-95b29ab4f324" Name="save_timer" Top="1499" Left="1201" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_timer import Timer
	from widget_timer import WidgetTimer
	from class_plugins import Plugins

	name = request.arguments.get("formtext_name", "")
	period = request.arguments.get("formtext_period", "")
	id = request.arguments.get("formtext_id", "")
	period_list = period.split(":")

	plugin_id = request.shared_variables["plugin_id"]
	plugin = Plugins.get_by_id(plugin_id)

	timer = Timer.get_by_id(id) if id else Timer()
	timer.name = name
	timer.period = period
	timer.plugin_guid = plugin.guid
	timer.save()

	timer_list = plugin.get_timer()
	widget_timer = WidgetTimer()
	widget_timer.set_data(timer_list)
	widget_timer.render(self.datatable_timer)
	self.dialog_add_timer.action("hide", [])


main()

				]]>
				</Action>
				<Action ID="005cc083-251c-4174-861d-8ab5875b5c82" Name="timer_operation" Top="1773" Left="218" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	timer_id = request.arguments.get("keyField", "")
	cell_name = request.arguments.get("headerData", "")

	if timer_id:
		if cell_name == "Edit":
			response.shared_variables["timer_id"] = timer_id
			self.dialog_add_timer.action("show", [])
		elif cell_name == "Delete":
			response.shared_variables["timer_id"] = timer_id
			self.dialog_delete_timer.action("show", [])


main()

				]]>
				</Action>
				<Action ID="b1bf341e-d5df-4352-b8f1-8fe6e32d5a70" Name="export_plugin" Top="2151" Left="881" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	plugin_id = request.shared_variables["plugin_id"]
	self.action("goTo", ["/plugin_details?plugin_id=" + str(plugin_id) + "&op=export"])


main()

				]]>
				</Action>
				<Action ID="d95a61f8-c4a9-4ab0-ac8d-88604185ff3e" Name="uninstall_plugin" Top="2146" Left="243" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_plugins import Plugins
	from VEE_resources import delete_plugin_dir

	plugin_id = request.shared_variables["plugin_id"]

	if plugin_id:
		plugin = Plugins.get_by_id(plugin_id)
		delete_plugin_dir(plugin.guid)
		plugin.delete()

		self.dialog_uninstall.action("hide", [])
		self.action("goTo", ["/plugins.vdom"])

	response.shared_variables["plugin_id"]


main()

				]]>
				</Action>
				<Action ID="9bf2bac5-0f63-46df-9f94-391021aacce2" Name="fill_dialog_macro" Top="24" Left="670" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

    from class_timer import Timer
    from class_custom_event import CustomEvent
    from class_macro import Macros
    import json, localization
    from class_plugins import Plugins
    from config import config
    from VEE_events import event_map


    lang = localization.get_lang()

    macros_id = request.shared_variables["macro_id"]
    plugin_id = request.shared_variables["plugin_id"]
    plugin = Plugins.get_by_id(plugin_id)


    macro_type = request.arguments.get( "itemValue", Macros.MacrosType.UNKNOWN )


    def setup_event_type_controls():
        self.dialog_create_macro.form_macro.container_back.formlist_location.visible = "0"
        self.dialog_create_macro.form_macro.container_back.text_location.visible = "0"
        self.dialog_create_macro.form_macro.container_back.formlist_event.visible = "1"
        self.dialog_create_macro.form_macro.container_back.text_event.visible = "1"
        self.dialog_create_macro.form_macro.container_back.formlist_page.visible = "0"
        self.dialog_create_macro.form_macro.container_back.text_timer.visible = "0"

        event_dict = {}
        for event in event_map:
            event_dict[event] = lang[event_map[event].__name__]

        for timer in Timer.get_timer_by_plugin_guid(plugin.guid):
            event_dict[timer.guid] = timer.name

        for cevent in CustomEvent.get_custom_event_by_plugin_guid(plugin.guid):
            event_dict[cevent.guid] = cevent.name

        self.dialog_create_macro.form_macro.container_back.formlist_event.value = json.dumps(event_dict)


    def setup_button_type_controls():
        self.dialog_create_macro.form_macro.container_back.formlist_page.selectedvalue = config["plugin_page_dict"].keys()[0]
        self.dialog_create_macro.form_macro.container_back.formlist_page.value = json.dumps(config["plugin_page_dict"])
        self.dialog_create_macro.form_macro.container_back.formlist_location.visible = "1"
        self.dialog_create_macro.form_macro.container_back.text_location.visible = "1"
        self.dialog_create_macro.form_macro.container_back.formlist_event.visible = "0"
        self.dialog_create_macro.form_macro.container_back.text_event.visible = "0"
        self.dialog_create_macro.form_macro.container_back.formlist_location.value = json.dumps({
            "1" : "On panel",
            "2" : "In plugin menu",
            "3" : "Mail composer"
        })


    def setup_library_type_controls():
        self.dialog_create_macro.form_macro.container_back.formlist_page.visible = "0"
        self.dialog_create_macro.form_macro.container_back.formlist_location.visible = "0"
        self.dialog_create_macro.form_macro.container_back.text_location.visible = "0"
        self.dialog_create_macro.form_macro.container_back.formlist_event.visible = "0"
        self.dialog_create_macro.form_macro.container_back.text_event.visible = "0"
        self.dialog_create_macro.form_macro.container_back.text_timer.visible = "0"


    if macros_id and macro_type == Macros.MacrosType.UNKNOWN:

        macros = Macros.get_by_id(macros_id)

        self.dialog_create_macro.form_macro.formtext_id.value = macros_id
        self.dialog_create_macro.form_macro.formtext_name.value = macros.name
        self.dialog_create_macro.form_macro.formtextarea_description.value = macros.description
        macro_type = macros.type

        if macros.type == Macros.MacrosType.EVENT:
            setup_event_type_controls()

            if macros.timer_guid:
                self.dialog_create_macro.form_macro.container_back.formlist_event.selectedvalue = macros.timer_guid
            elif macros.custom_event_guid:
                self.dialog_create_macro.form_macro.container_back.formlist_event.selectedvalue = macros.custom_event_guid
            elif macros.class_name:
                for event in event_map:
                    if event_map[event].__name__ == macros.class_name:
                        self.dialog_create_macro.form_macro.container_back.formlist_event.selectedvalue = event
                        break

        elif macros.type == Macros.MacrosType.BUTTON:
            setup_button_type_controls()
            self.dialog_create_macro.form_macro.container_back.formlist_location.selectedvalue = macros.on_board
            self.dialog_create_macro.form_macro.container_back.formlist_page.selectedvalue = macros.page

        else:
            setup_library_type_controls()



    self.dialog_create_macro.form_macro.container_back.formlist_type.value = json.dumps({
        Macros.MacrosType.EVENT: "Event macro",
        Macros.MacrosType.BUTTON: "Button macro",
        Macros.MacrosType.LIBRARY: "Library"
    })

    if macro_type == Macros.MacrosType.UNKNOWN:
        macro_type = Macros.MacrosType.EVENT

    self.dialog_create_macro.form_macro.container_back.formlist_type.selectedvalue = macro_type

    if macro_type == Macros.MacrosType.BUTTON:
        setup_button_type_controls()

    elif macro_type in Macros.MacrosType.EVENT:
        setup_event_type_controls()

    else:
        setup_library_type_controls()



main()

				]]>
				</Action>
				<Action ID="df5b288f-d2ce-4dac-81a8-940df74812ef" Name="create_plugin_config" Top="2615" Left="274" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_macro import Macros
	from widget_plugins import WidgetPlugins
	from widget_macro import WidgetMacros
	from class_plugins import Plugins

	plugin_id = request.shared_variables["plugin_id"]
	plugin = Plugins.get_by_id(plugin_id)

	macros = Macros()
	macros.name 		= "config"
	macros.class_name	= ""
	macros.timer_guid 	= ""
	macros.is_button_macros = "1"
	macros.on_board 	= "1"
	macros.description 	= "config macro"
	macros.plugin_guid = plugin.guid
	macros.type = macros.MacrosType.BUTTON
	macros.save()

	plugin = Plugins.get_by_id(plugin_id)
	macros = plugin.get_macros()

	widget_macros = WidgetMacros()
	widget_macros.set_data(macros)
	widget_macros.render(self.datatable_macros)

	self.button_create_config.visible = "0"
	self.button_config.visible = "1"


main()

				]]>
				</Action>
				<Action ID="6f683fdd-69b1-4c8e-8183-61a9d63ccbe3" Name="fill_dialog_plugin" Top="2034" Left="229" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	from class_plugins import Plugins

	plugin_id = request.shared_variables["plugin_id"]
	if plugin_id:

		plugin = Plugins.get_by_id(plugin_id)

		#self.dialog_create.action("setTitle", ["Edit plugin"])
		self.dialog_create.form_update.formtext_id.value = plugin_id
		self.dialog_create.form_update.formtext_name.value = plugin.name
		self.dialog_create.form_update.formtext_author.value = plugin.author
		self.dialog_create.form_update.formtextarea_description.value = plugin.description
		self.dialog_create.form_update.formtext_version.value = plugin.version
		self.dialog_create.form_update.hpt.htmlcode = "<img src='/get_image?id=%s'/>"%plugin.picture if plugin.picture else ""


main()

				]]>
				</Action>
				<Action ID="995030e4-e228-4454-9ad0-26181134b0d1" Name="db_operation" Top="2880" Left="304" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

	db_name = request.arguments.get("keyField", "")
	cell_name = request.arguments.get("headerData", "")
	plugin_id = request.shared_variables["plugin_id"]

	if db_name:
		if cell_name == "Export":
			self.action("goTo", ["/plugin_details?plugin_id=" + str(plugin_id) + "&db=" + str(db_name) + "&op=export_db"])
		elif cell_name == "Import":
			self.dialog_update_db.form_db.formtext_old_db_name.action("setValue", [db_name] )
			self.dialog_update_db.action("show", [])
		elif cell_name == "Delete":
			response.shared_variables["db_name"] = db_name
			self.dialog_delete_db.action("show", [])


main()

				]]>
				</Action>
				<Action ID="796aa599-0331-497e-bcca-8dfb121035f7" Name="save_macro" Top="888" Left="719" State="True">
<![CDATA[
from widget_user_group_dialog import authenticated, error_handler, administrator
import widget_user_group_dialog
widget_user_group_dialog.vdom_container = self


@authenticated
@administrator
#@error_handler
def main():

    from class_macro import Macros
    from class_timer import Timer
    from class_custom_event import CustomEvent
    from widget_plugins import WidgetPlugins
    from widget_macro import WidgetMacros
    from class_plugins import Plugins
    import localization

    lang = localization.get_lang()

    from VEE_events import event_map


    name = self.dialog_create_macro.form_macro.formtext_name.value = request.arguments.get("formtext_name", "")
    macros_type = self.dialog_create_macro.form_macro.container_back.formlist_type.selectedvalue = request.arguments.get("formlist_type", Macros.MacrosType.LIBRARY)
    event = self.dialog_create_macro.form_macro.container_back.formlist_event.selectedvalue = request.arguments.get("formlist_event", "")
    location = self.dialog_create_macro.form_macro.container_back.formlist_location.selectedvalue = request.arguments.get("formlist_location", "")
    description = self.dialog_create_macro.form_macro.formtextarea_description.value = request.arguments.get("formtextarea_description", "")
    macros_id = self.dialog_create_macro.form_macro.formtext_id.value = request.arguments.get("formtext_id", "")
    page = self.dialog_create_macro.form_macro.container_back.formlist_page.selectedvalue = request.arguments.get("formlist_page", "")

    import re
    guid_regex = re.compile("^[a-zA-Z0-9]{8}\-[a-zA-Z0-9]{4}\-[a-zA-Z0-9]{4}\-[a-zA-Z0-9]{4}\-[a-zA-Z0-9]{12}$")

    class_name = ""
    timer_guid = ""
    custom_event_guid = ""
    is_button = "0"
    on_board = "0"

    if macros_type == Macros.MacrosType.EVENT:
        is_button = "0"
        if guid_regex.match(event):
            if Timer.get_timer_by_guid(event):
                timer_guid = event
                class_name = "VEE_TimerEvent"
            elif CustomEvent.get_custom_event_by_guid(event):
                custom_event_guid = event
                class_name = "VEE_CustomEvent"
        else:
            for e in event_map:
                if e == int(event):
                    class_name = event_map[e].__name__

    elif macros_type == Macros.MacrosType.BUTTON:
        is_button = "1"
        on_board = location if location in ["1", "2", "3"] else "0"

    elif macros_type != Macros.MacrosType.LIBRARY:
        macros_type = Macros.MacrosType.LIBRARY


    plugin_id = request.shared_variables["plugin_id"]
    plugin = Plugins.get_by_id(plugin_id)
    macros = Macros.get_by_id(macros_id) if macros_id else Macros()
    macros.name         = name
    macros.class_name   = class_name
    macros.timer_guid = timer_guid
    macros.custom_event_guid = custom_event_guid
    macros.is_button_macros = is_button
    macros.on_board = on_board
    macros.description = description
    macros.plugin_guid = plugin.guid
    macros.page = page
    macros.type = macros_type
    macros.save()

    plugin = Plugins.get_by_id(plugin_id)
    macros = plugin.get_macros()

    widget_macros = WidgetMacros()
    widget_macros.set_data(macros)
    widget_macros.render(self.datatable_macros)
    self.dialog_create_macro.action("hide", [])


main()

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="98387cdd-f400-4410-a8b7-b3da32483b46" Name="prosuite_db_plugins" Type="753ea72c-475d-4a29-96be-71c522ca2097">
			<Attributes>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="fe65d83b-58f3-46da-962f-4e981caec1e3" Name="custom_event" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="height">162</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">245</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">295</Attribute>
					</Attributes>
				</Object>
				<Object ID="d8f0379c-57e2-4083-8cdc-c537bb7c487d" Name="plugin" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="top">403</Attribute>
						<Attribute Name="height">369</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">557</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">351</Attribute>
					</Attributes>
				</Object>
				<Object ID="b117c5f8-1a12-4c50-8d21-e9b7e35953ce" Name="library" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="5e4ab766-58c9-4071-a8cc-590d8bc27731" Name="macros" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">270</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">285</Attribute>
					</Attributes>
				</Object>
				<Object ID="f7a3af0b-831a-4518-a86e-6c897571a56b" Name="timer" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">257</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">558</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="38c62332-5a0c-48d4-b746-50995830ccc4" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

				
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="9a33fdcd-a85f-40d3-872d-7b22c35646b8" Name="dbschema" Type="753ea72c-475d-4a29-96be-71c522ca2097">
			<Attributes>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="9f8dea84-82d5-40ca-ad7b-f2a0ec07c633" Name="remote_settings" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="top">137</Attribute>
						<Attribute Name="height">147</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">467</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="38467264-d100-4111-ada7-d2dc625c2d06" Name="config" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">467</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">120</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="e24b3429-6b3e-4698-9833-a87174f1f797" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

				
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="60f0ccd8-ab04-4fd6-a1d1-9af51f23da25" Name="logs" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="bc1a7a89-2d6d-4e7c-a07a-c359e4ef77ad" Name="dwnloadlogs_btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">download logs</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">176</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="skin">1</Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="left">21</Attribute>
					</Attributes>
				</Object>
				<Object ID="b9252464-0b85-4050-a0e0-2a651ee731f9" Name="page_js" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[function appendLogsToTable(data){
  $("#logs-table tbody").prepend(data);
}

function setLogsToTable(data){
  $("#logs-table tbody").empty().append(data);
}

function resizeTable(wWidth, wHeight){
  if (wWidth < 600){
    wWidth = 600;
  }
  if (wHeight < 400){
    wHeight = 400;
  }

  var $table = jQuery("div#o_5c491fcf_aefa_4596_bb0b_b62e60734e9c");
  $table.width(wWidth - 40);
  $table.height(wHeight - 180);
  $("#logs-table").colResizable({disable: true});
  $("#logs-table").colResizable();
}

jQuery(document).ready(function(){
  jQuery("body").delegate("div.popupsensitive", "click", function(){
    jQuery("form#o_2efb47c5_a624_45f3_a0e0_d097f2610858").hide();
    jQuery("form#o_ccf9c7e1_b8c6_481b_aca2_f1c21dcfdfa8").hide();
    jQuery(this).hide();
  }); 
  jQuery("div#o_5c491fcf_aefa_4596_bb0b_b62e60734e9c").delegate("th.level_filter", "click", function(e){
    jQuery("form#o_2efb47c5_a624_45f3_a0e0_d097f2610858").css({top: e.pageY + 10, left: e.pageX}).show();
    jQuery("div.popupsensitive").show();
  });
  jQuery("div#o_5c491fcf_aefa_4596_bb0b_b62e60734e9c").delegate("th.logger_filter", "click", function(e){
    jQuery("form#o_ccf9c7e1_b8c6_481b_aca2_f1c21dcfdfa8").css({top: e.pageY + 10, left: e.pageX}).show();
    jQuery("div.popupsensitive").show();
  });

});]]></Attribute>
						<Attribute Name="left">592</Attribute>
					</Attributes>
				</Object>
				<Object ID="0433b7a6-5bd8-427b-8f4d-55513a1d8840" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="9aa76de3-edf4-4895-ab50-44ab55de0aac" Name="popuplayer" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="htmlcode"><![CDATA[
						]]></Attribute>
						<Attribute Name="classname">popupsensitive</Attribute>
					</Attributes>
				</Object>
				<Object ID="26b6a644-e2f5-473d-bea9-81bd6c2ebf96" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">642</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="0978d9dd-1f17-40bd-a02a-9cf501c130bf" Name="autoupdate" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="height">50</Attribute>
						<Attribute Name="zindex">90</Attribute>
						<Attribute Name="width">321</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">221</Attribute>
					</Attributes>
					<Objects>
						<Object ID="28eff54a-0ab9-481b-96a6-4e14bd05878a" Name="checkbtn" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">269</Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="state">1</Attribute>
								<Attribute Name="left">28</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="b8d4f87c-a9a0-4a3e-a637-a39ac399a3c3" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="2efb47c5-a624-45f3-a0e0-d097f2610858" Name="loglevelsform" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="classname">th_form_popup</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">200</Attribute>
						<Attribute Name="top">464</Attribute>
						<Attribute Name="height">230</Attribute>
						<Attribute Name="zindex">90</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">342</Attribute>
					</Attributes>
					<Objects>
						<Object ID="1b2a3be9-a85b-4424-a2f3-c7b0507e26df" Name="hidebtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="top">168</Attribute>
								<Attribute Name="left">5</Attribute>
							</Attributes>
						</Object>
						<Object ID="34d1fe08-8294-42c5-80dd-7cde2bed535c" Name="lv" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
							<Attributes>
								<Attribute Name="size"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">5</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">150</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">190</Attribute>
								<Attribute Name="multiselect">1</Attribute>
								<Attribute Name="disabledvalue"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">5</Attribute>
								<Attribute Name="selectedvalue"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="c4806f2b-d6da-4f08-b96a-6c3e293816f8" Name="formid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
							<Attributes>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">5</Attribute>
								<Attribute Name="value">loglevel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="mode">1</Attribute>
								<Attribute Name="placeholder"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">5</Attribute>
							</Attributes>
						</Object>
						<Object ID="f80e2ad1-1fca-4673-a09d-1c977204a5a3" Name="resetbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="top">199</Attribute>
								<Attribute Name="left">5</Attribute>
							</Attributes>
						</Object>
						<Object ID="ce460196-1b63-4acf-a377-48c2f915b62a" Name="submitbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="label">Submit</Attribute>
								<Attribute Name="top">168</Attribute>
								<Attribute Name="left">105</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="17334116-7f13-45c1-a467-d84938d81b6f" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="ccf9c7e1-b8c6-481b-aca2-f1c21dcfdfa8" Name="loggersform" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="classname">th_form_popup</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">350</Attribute>
						<Attribute Name="top">464</Attribute>
						<Attribute Name="zindex">90</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">567</Attribute>
					</Attributes>
					<Objects>
						<Object ID="4a0df076-5384-423c-919a-ce189101f37e" Name="lg" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
							<Attributes>
								<Attribute Name="size"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">5</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">150</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">340</Attribute>
								<Attribute Name="multiselect">1</Attribute>
								<Attribute Name="disabledvalue"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">5</Attribute>
								<Attribute Name="selectedvalue"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="a2534f93-0a39-4057-8f35-c4611a919ad0" Name="formid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
							<Attributes>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">5</Attribute>
								<Attribute Name="value">logger</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="mode">1</Attribute>
								<Attribute Name="placeholder"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">5</Attribute>
							</Attributes>
						</Object>
						<Object ID="0f6ec147-7efa-4481-8565-c7a89ac158f5" Name="submitbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="label">Submit</Attribute>
								<Attribute Name="top">168</Attribute>
								<Attribute Name="left">255</Attribute>
							</Attributes>
						</Object>
						<Object ID="ff57803d-9b82-4f5d-a93f-14f264b52128" Name="hidebtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="top">168</Attribute>
								<Attribute Name="left">156</Attribute>
							</Attributes>
						</Object>
						<Object ID="a0e54693-83ff-479d-acb9-1f60cbdca064" Name="resetbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="top">168</Attribute>
								<Attribute Name="left">56</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="12393b31-87fd-470e-b237-946a34071a4b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="b4ac81d6-fcf5-414f-9b3c-98fb727000a8" Name="dwnload_logs_dialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="top">464</Attribute>
						<Attribute Name="height">343</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">285</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">21</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8d60bc2e-ed46-4fe6-a82e-3f29f2dcbef2" Name="close_btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">35</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">110</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">304</Attribute>
								<Attribute Name="left">168</Attribute>
							</Attributes>
						</Object>
						<Object ID="f5931a14-9880-4319-bb41-5836e6fd27fe" Name="files_cnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">285</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">278</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="e29cd30a-83da-4733-a6c8-17da4cadfa1d" Name="files_hpt" Type="7085bd26-e653-490b-908f-61208c260a86">
									<Attributes>
										<Attribute Name="top">18</Attribute>
										<Attribute Name="height">241</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">203</Attribute>
										<Attribute Name="htmlcode"><![CDATA[<ul></ul>]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="left">31</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="115381c2-a900-4727-bc06-d2c5c13a65b1" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="60f08d76-3c40-47af-9001-1e6d997ec003" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="ff2e70d7-7868-4258-b753-724f8005dfc0" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="805f88b8-6e22-46f2-b658-91abc0a50c20" Name="js_colresize" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[// colResizable 1.5 - a jQuery plugin by Alvaro Prieto Lauroba http://www.bacubacu.com/colresizable/
(function($){var d=$(document),h=$("head"),drag=null,tables=[],count=0,ID="id",PX="px",SIGNATURE="JColResizer",FLEX="JCLRFlex",I=parseInt,M=Math,ie=navigator.userAgent.indexOf('Trident/4.0')>0,S;try{S=sessionStorage}catch(e){};h.append("<style type='text/css'>  .JColResizer{table-layout:fixed;} .JColResizer td, .JColResizer th{overflow:hidden;padding-left:0!important; padding-right:0!important;}  .JCLRgrips{ height:0px; position:relative;} .JCLRgrip{margin-left:-5px; position:absolute; z-index:5; } .JCLRgrip .JColResizer{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: e-resize;top:0px} .JCLRLastGrip{position:absolute; width:1px; } .JCLRgripDrag{ border-left:1px dotted black;	} .JCLRFlex{width:auto!important;}</style>");var init=function(tb,options){var t=$(tb);t.opt=options;if(t.opt.disable)return destroy(t);var id=t.id=t.attr(ID)||SIGNATURE+ count++;t.p=t.opt.postbackSafe;if(!t.is("table")||tables[id]&&!t.opt.partialRefresh)return;t.addClass(SIGNATURE).attr(ID,id).before('<div class="JCLRgrips"/>');t.g=[];t.c=[];t.w=t.width();t.gc=t.prev();t.f=t.opt.fixed;if(options.marginLeft)t.gc.css("marginLeft",options.marginLeft);if(options.marginRight)t.gc.css("marginRight",options.marginRight);t.cs=I(ie?tb.cellSpacing||tb.currentStyle.borderSpacing:t.css('border-spacing'))||2;t.b=I(ie?tb.border||tb.currentStyle.borderLeftWidth:t.css('border-left-width'))||1;tables[id]=t;createGrips(t)},destroy=function(t){var id=t.attr(ID),t=tables[id];if(!t||!t.is("table"))return;t.removeClass(SIGNATURE+" "+FLEX).gc.remove();delete tables[id]},createGrips=function(t){var th=t.find(">thead>tr>th,>thead>tr>td");if(!th.length)th=t.find(">tbody>tr:first>th,>tr:first>th,>tbody>tr:first>td, >tr:first>td");th=th.filter(":visible");t.cg=t.find("col");t.ln=th.length;if(t.p&&S&&S[t.id])memento(t,th);th.each(function(i){var c=$(this),g=$(t.gc.append('<div class="JCLRgrip"></div>')[0].lastChild);g.append(t.opt.gripInnerHtml).append('<div class="'+SIGNATURE+'"></div>');if(i==t.ln-1){g.addClass("JCLRLastGrip");if(t.f)g.html("")};g.bind('touchstart mousedown',onGripMouseDown);g.t=t;g.i=i;g.c=c;c.w=c.width();t.g.push(g);t.c.push(c);c.width(c.w).removeAttr("width");g.data(SIGNATURE,{i:i,t:t.attr(ID),last:i==t.ln-1})});t.cg.removeAttr("width");syncGrips(t);t.find('td, th').not(th).not('table th, table td').each(function(){$(this).removeAttr('width')});if(!t.f)t.removeAttr('width').addClass(FLEX)},memento=function(t,th){var w,m=0,i=0,aux=[],tw;if(th){t.cg.removeAttr("width");if(t.opt.flush){S[t.id]="";return};w=S[t.id].split(";");tw=w[t.ln+1];if(!t.f&&tw)t.width(tw);for(;i<t.ln;i++){aux.push(100*w[i]/w[t.ln]+"%");th.eq(i).css("width",aux[i])};for(i=0;i<t.ln;i++)t.cg.eq(i).css("width",aux[i])}else{S[t.id]="";for(;i<t.c.length;i++){w=t.c[i].width();S[t.id]+=w+";";m+=w};S[t.id]+=m;if(!t.f)S[t.id]+=";"+t.width()}},syncGrips=function(t){t.gc.width(t.w);for(var i=0;i<t.ln;i++){var c=t.c[i];t.g[i].css({left:c.offset().left-t.offset().left+c.outerWidth(false)+t.cs/2+PX,height:t.opt.headerOnly?t.c[0].outerHeight(false):t.outerHeight(false)})}},syncCols=function(t,i,isOver){var inc=drag.x-drag.l,c=t.c[i],c2=t.c[i+1],w=c.w+inc,w2=c2.w-inc;c.width(w+PX);t.cg.eq(i).width(w+PX);if(t.f){c2.width(w2+PX);t.cg.eq(i+1).width(w2+PX)};if(isOver){c.w=w;c2.w=t.f?w2:c2.w}},applyBounds=function(t){var w=$.map(t.c,function(c){return c.width()});t.width(t.width()).removeClass(FLEX);$.each(t.c,function(i,c){c.width(w[i]).w=w[i]});t.addClass(FLEX)},onGripDrag=function(e){if(!drag)return;var t=drag.t,oe=e.originalEvent.touches,ox=oe?oe[0].pageX:e.pageX,x=ox-drag.ox+drag.l,mw=t.opt.minWidth,i=drag.i,l=t.cs*1.5+mw+t.b,last=i==t.ln-1,min=i?t.g[i-1].position().left+t.cs+mw:l,max=t.f?i==t.ln-1?t.w-l:t.g[i+1].position().left-t.cs-mw:Infinity;x=M.max(min,M.min(max,x));drag.x=x;drag.css("left",x+PX);if(last){var c=t.c[drag.i];drag.w=c.w+x-drag.l};if(t.opt.liveDrag){if(last){c.width(drag.w);t.w=t.width()}else syncCols(t,i);syncGrips(t);var cb=t.opt.onDrag;if(cb){e.currentTarget=t[0];cb(e)}};return false},onGripDragOver=function(e){d.unbind('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE).unbind('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE);$("head :last-child").remove();if(!drag)return;drag.removeClass(drag.t.opt.draggingClass);var t=drag.t,cb=t.opt.onResize,i=drag.i,last=i==t.ln-1,c=t.g[i].c;if(last){c.width(drag.w);c.w=drag.w}else syncCols(t,i,true);if(!t.f)applyBounds(t);syncGrips(t);if(cb){e.currentTarget=t[0];cb(e)};if(t.p&&S)memento(t);drag=null},onGripMouseDown=function(e){var o=$(this).data(SIGNATURE),t=tables[o.t],g=t.g[o.i],oe=e.originalEvent.touches;g.ox=oe?oe[0].pageX:e.pageX;g.l=g.position().left;d.bind('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE,onGripDrag).bind('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE,onGripDragOver);h.append("<style type='text/css'>*{cursor:"+t.opt.dragCursor+"!important}</style>");g.addClass(t.opt.draggingClass);drag=g;if(t.c[o.i].l)for(var i=0,c;i<t.ln;i++){c=t.c[i];c.l=false;c.w=c.width()};return false},onResize=function(){for(t in tables){var t=tables[t],i,mw=0;t.removeClass(SIGNATURE);if(t.f&&t.w!=t.width()){t.w=t.width();for(i=0;i<t.ln;i++)mw+=t.c[i].w;for(i=0;i<t.ln;i++)t.c[i].css("width",M.round(1e3*t.c[i].w/mw)/10+"%").l=true};syncGrips(t.addClass(SIGNATURE))}};$(window).bind('resize.'+SIGNATURE,onResize);$.fn.extend({colResizable:function(options){var defaults={draggingClass:'JCLRgripDrag',gripInnerHtml:'',liveDrag:false,fixed:true,minWidth:15,headerOnly:false,hoverCursor:"e-resize",dragCursor:"e-resize",postbackSafe:false,flush:false,marginLeft:null,marginRight:null,disable:false,partialRefresh:false,onDrag:null,onResize:null},options=$.extend(defaults,options);return this.each(function(){init(this,options)})}})})(jQuery)]]></Attribute>
						<Attribute Name="left">742</Attribute>
					</Attributes>
				</Object>
				<Object ID="5c491fcf-aefa-4596-bb0b-b62e60734e9c" Name="logs_cnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">159</Attribute>
						<Attribute Name="height">263</Attribute>
						<Attribute Name="classname">cnt-logs</Attribute>
						<Attribute Name="width">981</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">2</Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
					<Objects>
						<Object ID="43fe1134-ec5a-4ee3-8773-db46bfc00ed4" Name="hpt" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="height">0</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">980</Attribute>
								<Attribute Name="htmlcode"><![CDATA[<table class="tbl-resize" id="logs-table" width="100%" border="0" cellpadding="0" cellspacing="0">
    <thead>
        <tr>
            <th width="140px">{th_date}</th>
            <th width="80px" class="clickable level_filter">{th_lvl}</th>
            <th width="170px" class="clickable logger_filter">{th_name}</th>
            <th>{th_msg}</th>
        </tr>
    </thead>
    <tbody>
        {table_body}
    </tbody>
</table>]]></Attribute>
								<Attribute Name="nostyle">2</Attribute>
								<Attribute Name="overflow">3</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="632d37f2-2c33-4100-936b-92ef6f91ea98" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="c5e23e1e-16dd-4c42-b360-8fa66ede2ef6" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[.popupsensitive {
  width: 100% !important;
  height: 100% !important;
  z-index: 89 !important;
}
.cnt-logs {
  border: 2px solid black;
}
table.tbl-resize {
  margin-left: -1px;
}
table.tbl-resize th{
  background-image:url('/87b918b7-0b35-472a-a525-7c65bc41fc47.res');
  background-repeat:repeat-x;
  height:27px;
  text-align: center;
  border-bottom:1px solid #bbb;
  border-left:1px solid #bbb;
}
table.tbl-resize td.text-center {
  text-align: center;
}
table.tbl-resize td{
  text-indent:5px;
  color:#444;
  border-bottom:1px solid #F5F5F5;
  border-left:1px solid #FFF;
  /*word-break: break-all;*/
}
table.tbl-resize tr:nth-child(even) {
  background: #D8F0F0;
}
table.tbl-resize tr:nth-child(odd) {
  background: #FFF;
}
table.tbl-resize td div {
  overflow: auto;
  padding: 0 5px 0 5px;
}
table.tbl-resize td.left{
  border-left:1px solid #2e638e;
}
table.tbl-resize td.right{
  border-right:1px solid #2e638e;
}
table.tbl-resize td.bottom{
  border-bottom:1px solid #2e638e;
}
table.tbl-resize tr {
}
.cut-out-text {
  overflow: hidden !important;;
  white-space: nowrap !important;;
  text-overflow: ellipsis !important;;
}
table.tbl-resize th.clickable {
  text-decoration: underline;
  cursor: pointer;
}
table.tbl-resize th.clickable:active {
  color: red;
}
form.th_form_popup {
  -webkit-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  -moz-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
  background-color: #FFF;
  border: 1px solid #D8D3D3;
}]]></Attribute>
						<Attribute Name="left">792</Attribute>
					</Attributes>
				</Object>
				<Object ID="3d5e4971-0989-4c80-bb57-82a1a822c6ab" Name="update_timer" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="interval">5000</Attribute>
						<Attribute Name="left">692</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="135a5ffc-6feb-4dc6-8368-e622b2be7d57" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuiteLogsPage import ProSuiteLogsPage


page = ProSuiteLogsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "logs.data": self.logs_cnt.hpt,

    "topbar.download.btn": self.dwnloadlogs_btn,
    "topbar.autoupdate.btn": self.autoupdate.checkbtn,

    "dialogs.download": self.dwnload_logs_dialog,
    "dialogs.download.close": self.dwnload_logs_dialog.close_btn,

    "popup.loglevel": self.loglevelsform,
    "popup.loglevel.form": self.loglevelsform,
    "popup.loglevel.form.list": self.loglevelsform.lv,
    "popup.loglevel.form.hide": self.loglevelsform.hidebtn,
    "popup.loglevel.form.reset": self.loglevelsform.resetbtn,
    "popup.loglevel.form.submit": self.loglevelsform.submitbtn,

    "popup.loggers": self.loggersform,
    "popup.loggers.form": self.loggersform,
    "popup.loggers.form.list": self.loggersform.lg,
    "popup.loggers.form.reset": self.loggersform.resetbtn,
    "popup.loggers.form.hide": self.loggersform.hidebtn,
    "popup.loggers.form.submit": self.loggersform.submitbtn,
}

page.run('onload')

				]]>
				</Action>
				<Action ID="f3ea750e-6d79-4f78-a916-d5f07d067218" Name="show_logs_files" Top="563" Left="233" State="False">
<![CDATA[
"""
"""

from ProSuiteLogsPage import ProSuiteLogsPage


page = ProSuiteLogsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "dialogs.download": self.dwnload_logs_dialog,
    "dialogs.download.files": self.dwnload_logs_dialog.files_cnt.files_hpt,
}
page.run('files')

				]]>
				</Action>
				<Action ID="df2c11f1-fc61-49a5-b433-5f6ca49dd729" Name="update_logs" Top="49" Left="233" State="False">
<![CDATA[
"""
"""

from ProSuiteLogsPage import ProSuiteLogsPage


page = ProSuiteLogsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "logs.data": self.logs_cnt.hpt,
    "logs.timer": self.update_timer,

}
page.run('update')

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="c6021746-cbf1-4f56-bc90-4c1df4dfbaef" Name="rules" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">Rules Management</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass">no-subhead</Attribute>
				<Attribute Name="bgrepeat">repeat-x</Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="6aff0d72-ae04-4030-b2c2-8c846f579a51" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">827</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="d9cc7108-2e9a-43af-81f9-9b81a63e321f" Name="page_js" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">771</Attribute>
					</Attributes>
				</Object>
				<Object ID="36bce0fb-50d4-4de4-bfb7-59482b5dca14" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="a7e4daa8-ea76-4591-8e39-eadef0fed90b" Name="cnt_acls" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">1</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title">Objects</Attribute>
						<Attribute Name="top">89</Attribute>
						<Attribute Name="height">647</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">965</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8bfe8ac5-182c-4215-9abc-276eea8fab7c" Name="cnt_tree" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="zindex">1</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[<div class="acl_container_title" style="padding-left: 52px !important;">Objects</div>]]></Attribute>
								<Attribute Name="designcolor">EE0000</Attribute>
								<Attribute Name="heightauto">1</Attribute>
								<Attribute Name="height">596</Attribute>
								<Attribute Name="classname">acl_container</Attribute>
								<Attribute Name="width">267</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="titlewrap">7</Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="0a7b487f-7955-40e9-83ec-3e94ffa62ddd" Name="app_structure" Type="0075c5c4-3e29-511a-7a0e-c9a138eabea0">
									<Attributes>
										<Attribute Name="width">235</Attribute>
										<Attribute Name="fx"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">4</Attribute>
										<Attribute Name="height">559</Attribute>
										<Attribute Name="initAjax"><![CDATA[
										]]></Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">20</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="864d31ac-5446-4a00-9f04-2d01b61f9ee1" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="d3bdfb7e-24ca-4bfc-a044-9aa0a8922c04" Name="cnt_rules" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[<div style="padding-left: 15px;" class="acl_container_title">Rights Management</div>]]></Attribute>
								<Attribute Name="designcolor">58C641</Attribute>
								<Attribute Name="heightauto">1</Attribute>
								<Attribute Name="height">601</Attribute>
								<Attribute Name="classname">container_white</Attribute>
								<Attribute Name="width">352</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="titlewrap">7</Attribute>
								<Attribute Name="left">588</Attribute>
							</Attributes>
							<Objects>
								<Object ID="2b25e375-2c51-41ff-8b32-40f1f9a1cfe9" Name="dt_rules" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s caption
{

}

#%(id)s table.table
{
	border-collapse:collapse;
	border: none;
	height: 0;

}

#%(id)s .thead
{
	font-size:12px;
	text-align:left;
	padding:0 8px;
	line-height: 16px;
}

#%(id)s .thead:hover
{
	color: #BD202F;
	background: #fafafa !important;
}

#%(id)s .th-cell
{
	border: none;
	padding-left:6px;
	font-size:12px;
}

#%(id)s th.th-cell-0, #%(id)s td.cell-0 input
{
	width: 18px;
	margin: 2px;
}

#%(id)s table.table td.cell
{
	border: none;
	padding-left:6px;
	text-align:left;

}


#%(id)s table.table td.cell:hover
{
	color: #BD202F;
}

#%(id)s tr.even
{

}

#%(id)s .row
{

}

#%(id)s .row:hover
{
	background: #fafafa !important;
}

#%(id)s .row_selected
{
	background:#f2f2f2!important;
	color: #BD202F;
}]]></Attribute>
										<Attribute Name="hiddenfields"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">19</Attribute>
										<Attribute Name="rowactive"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">557</Attribute>
										<Attribute Name="header"><![CDATA[
										]]></Attribute>
										<Attribute Name="key"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">0</Attribute>
										<Attribute Name="selectedrows"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="selectionmode">1</Attribute>
										<Attribute Name="cssclass"><![CDATA[
										]]></Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">344</Attribute>
										<Attribute Name="left">6</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="25e3106a-9aa5-48a6-98f8-0ae4346ea2c2" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="e2cfe8af-ad7e-4055-907e-437f095bb2fc" Name="cnt_subjects" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[<div style="padding-left: 30px;" class="acl_container_title">Users and Groups</div>]]></Attribute>
								<Attribute Name="designcolor">EEEF07</Attribute>
								<Attribute Name="heightauto">1</Attribute>
								<Attribute Name="height">602</Attribute>
								<Attribute Name="classname">acl_container</Attribute>
								<Attribute Name="width">337</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="titlewrap">7</Attribute>
								<Attribute Name="left">257</Attribute>
							</Attributes>
							<Objects>
								<Object ID="bda56635-ff6d-408c-ab2d-44878f0cd13e" Name="inherited" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
									<Attributes>
										<Attribute Name="width">237</Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="13fcd121-8974-4b9e-9cb3-d8f6680eedd9" Name="dt_subjects" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s caption
{

}

#%(id)s table.table
{
	border-collapse:collapse;
	border: none;
	height: 0;

}

#%(id)s .thead
{
	font-size:12px;
	text-align:left;
}

#%(id)s .th-cell
{
	border: none;

	font-size:12px;
}

#%(id)s table.table td.cell-1
{
	padding-left: 10px !important;
}

#%(id)s table.table td.cell
{
	border: none;
}


#%(id)s table.table td.cell:hover
{
	color: #BD202F;
}

#%(id)s tr.even
{

}

#%(id)s .row
{

}

#%(id)s .row:hover
{
	background: #fafafa !important;

}

#%(id)s .row_selected
{
	background:#f2f2f2!important;
	color: #BD202F;
}]]></Attribute>
										<Attribute Name="hiddenfields"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">33</Attribute>
										<Attribute Name="rowactive"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">524</Attribute>
										<Attribute Name="header"><![CDATA[
										]]></Attribute>
										<Attribute Name="key"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">0</Attribute>
										<Attribute Name="selectedrows"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="cssclass">subjects-table</Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">312</Attribute>
										<Attribute Name="left">3</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="e01a0d84-72d6-4ff1-be7f-a2c251310233" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="26c58018-2906-4050-9dab-04675f8aec98" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="75b065ef-dec8-4ae4-b761-5e972450fe61" Name="cnt_toolbar" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">1</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">55</Attribute>
						<Attribute Name="height">33</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">263</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">614</Attribute>
					</Attributes>
					<Objects>
						<Object ID="e9aed224-fa46-4562-96b2-0404e81b1adb" Name="btn_reset" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[<div class='acl_cancel'>Cancel</div>]]></Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">27</Attribute>
								<Attribute Name="classname">acl_small_button</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="width">84</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="left">150</Attribute>
							</Attributes>
						</Object>
						<Object ID="3020da81-ad59-41d7-a181-04166b472707" Name="btn_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[<div class='acl_apply'>Apply</div>]]></Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">27</Attribute>
								<Attribute Name="classname">acl_small_button</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="width">84</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="left">51</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="aa9a9e16-7b96-4052-abd2-fa1813231d41" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="900f4e93-33ac-4ba0-a8c4-18a4ba5f9433" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="de1e8dc4-ee36-493b-b68c-8275845ada74" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[div.strike {
    display: block;
    text-align: center;
    overflow: hidden;
    white-space: nowrap; 
}

div.strike > span {
    position: relative;
    display: inline-block;
    color: #CFCFCF;
}

div.strike > span:before,
div.strike > span:after {
    content: "";
    position: absolute;
    top: 50%;
    width: 9999px;
    height: 1px;
    background: #CFCFCF;
}

div.strike > span:before {
    right: 100%;
    margin-right: 15px;
}

div.strike > span:after {
    left: 100%;
    margin-left: 15px;
}
.container_white {
  background-color: #f6f6f6;
}
.acl_container {
  background: url(/7783bb35-5916-4359-ac16-75bcb157821b.png) right top repeat-y;
}
.acl_container_title {
  margin-top: -16px;
  font-size: 8pt;
  color: #666666;
}
.acl_apply {
  background: url("/0a7c80b4-e26a-4200-a42d-442df1edb2e8.png") left 75% no-repeat;
  margin-left: 4px;
  line-height: 16px !important;
}
.acl_cancel {
  background: url("/2dd2e369-4aed-440c-afd6-4b455bdbdb1a.png") left 75% no-repeat;
  margin-left: 4px;
  line-height: 16px !important;
}
.acl_app_object_icon {
  background: url(/b3916fc3-7dbf-4f7c-add3-a1e578047bd6.png) left center no-repeat;
  margin-left: -20px;
  padding-left: 20px;
  cursor: pointer;
}
.acl_container_group {
  background: url(/bdd14bc5-8c5d-4fe0-a1bd-090bb5fa8100.png) left top no-repeat;
  padding-left: 20px;
  cursor: pointer;
}
.acl_small_button {
  background: #D9D9D9 url("/15c9fffc-4c20-4bb2-aaa7-3be814bfca49.res") left top repeat-x;
  border: 1px #d7d7d7 solid;
  border-radius: 8px;
  -moz-border-radius:8px;
  -webkit-border-radius: 8px;
  height: 18px !important;
  padding-right: 15px;
  font-style: none !important;
  text-decoration: none !important;
}
.acl_small_button:hover {
  background: #eCeCeC;
}
.acl_small_button span {
  font-size: 9px !important;
  color: #000 !important;
  text-align: right !important;
}]]></Attribute>
						<Attribute Name="left">721</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="bff13c39-8f4d-4dd4-9cfc-1ca63a9c0822" Name="clicked_subjects" Top="582" Left="231" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "rules.list": self.cnt_acls.cnt_rules.dt_rules,
    "subjects.list": self.cnt_acls.cnt_subjects.dt_subjects,
}
page.run("subject_clicked")

				]]>
				</Action>
				<Action ID="d140f342-e4a5-43f5-a813-bddb9d0e31d1" Name="lazy_load" Top="0" Left="252" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "objects.tree": self.cnt_acls.cnt_tree.app_structure,
}
page.run("show_child_objects")

				]]>
				</Action>
				<Action ID="6676bf9d-4786-4e84-9496-b413b51a1c4e" Name="clicked_objects" Top="587" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "subjects.list": self.cnt_acls.cnt_subjects.dt_subjects,
    "rules.list": self.cnt_acls.cnt_rules.dt_rules,
}
page.run("object_clicked")

				]]>
				</Action>
				<Action ID="0a61a1ed-27f8-4cc4-a044-45701eab9e48" Name="show_hide_inherited" Top="395" Left="765" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "subjects.list": self.cnt_acls.cnt_subjects.dt_subjects,
    "rules.list": self.cnt_acls.cnt_rules.dt_rules,
}
page.run("show_hide_inherited")

				]]>
				</Action>
				<Action ID="9439746e-9e1d-4e48-947a-508b6d616e47" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "objects.title": self.cnt_acls.cnt_tree,
    "objects.tree": self.cnt_acls.cnt_tree.app_structure,

    "rules.title": self.cnt_acls.cnt_rules,
    "rules.apply": self.cnt_toolbar.btn_apply,
    "rules.cancel": self.cnt_toolbar.btn_reset,
    "rules.list": self.cnt_acls.cnt_rules.dt_rules,

    "subjects.title": self.cnt_acls.cnt_subjects,
    "subjects.list": self.cnt_acls.cnt_subjects.dt_subjects,
    "subjects.inherited.checkbox": self.cnt_acls.cnt_subjects.inherited,
}
page.run('onload')

				]]>
				</Action>
				<Action ID="24c9aad6-2abf-4180-ad19-4318edf55a39" Name="apply_rules" Top="582" Left="467" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "subjects.list": self.cnt_acls.cnt_subjects.dt_subjects,
}
page.run("apply_rights")

				]]>
				</Action>
				<Action ID="9946cf64-c440-4b2e-8ced-8abdd230b41b" Name="reset_rules" Top="251" Left="477" State="False">
<![CDATA[
"""
"""

from ProSuiteRulesPage import ProSuiteRulesPage


page = ProSuiteRulesPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "rules.list": self.cnt_acls.cnt_rules.dt_rules,
}
page.run("reset_rights")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="8e512270-2cd4-48f6-a0e7-e2b4ccf2e75f" Name="home" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">Home page</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="54ce9fc2-0c4d-4800-96e0-b1676edb5927" Name="checktasktimer" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="top">1596</Attribute>
						<Attribute Name="interval">5000</Attribute>
						<Attribute Name="left">682</Attribute>
					</Attributes>
				</Object>
				<Object ID="727e3d7a-d1ff-45d1-b035-4c650f84f621" Name="labelinfo" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">50</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">New label</Attribute>
						<Attribute Name="top">2164</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">550</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="5cd33a38-356d-40ab-846e-4a95e72526c0" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">550</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="9775cb65-599a-4ce2-b88d-bcc6839d782f" Name="sharedlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">80</Attribute>
										<Attribute Name="value">{}</Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="width">520</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="a79c9fcd-ad56-4742-8dbd-d90414b83419" Name="color" Type="a57e9f82-f352-d967-ae56-648008c048be">
									<Attributes>
										<Attribute Name="width">74</Attribute>
										<Attribute Name="top">34</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="left">433</Attribute>
									</Attributes>
								</Object>
								<Object ID="edebbc61-53f1-4783-ae4a-80a4fdea39cc" Name="shortcutlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">13</Attribute>
										<Attribute Name="value">Label:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">244</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="347b554d-a3d9-42ba-ba78-ab110000af22" Name="rights" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">108</Attribute>
										<Attribute Name="label">Rights management</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">263</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="b21db9cd-84b2-4e93-9a80-ad41e2ca5b98" Name="colorlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">13</Attribute>
										<Attribute Name="value">Color:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">100</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">433</Attribute>
									</Attributes>
								</Object>
								<Object ID="5db838c3-37c6-47a0-9908-d3184cbb9bed" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">162</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">121</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="b8d1da87-cb41-4e5d-bdd5-612e1b070fa7" Name="addanother" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">162</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">186</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">210</Attribute>
									</Attributes>
								</Object>
								<Object ID="a3dafa77-0ad1-4680-84db-1fc814a202ea" Name="shortcut" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">34</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">383</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="ef298286-ab88-4e66-ae7f-6b54dc9f94bf" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">162</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">121</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">412</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="fa4b9f22-dcdf-4363-a42c-bdee6ee0177d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="3bb2d1ac-1fe1-459b-acd0-3e5dd439d607" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="e07541fd-130d-45a4-b389-70b2825f6055" Name="button1" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">refresh-btn topbar-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Refresh</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">44</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="width">60</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">86</Attribute>
						<Attribute Name="left">243</Attribute>
					</Attributes>
				</Object>
				<Object ID="7441a7a1-7c5d-4cbe-8e81-c5c2f643f938" Name="macros_container" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="designcolor">EEBBBA</Attribute>
						<Attribute Name="backgroundrepeat">2</Attribute>
						<Attribute Name="top">72</Attribute>
						<Attribute Name="height">59</Attribute>
						<Attribute Name="classname">macro-cont</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">1</Attribute>
						<Attribute Name="width">924</Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="55f3f27b-44f9-41a4-9928-f32b3a8bfa70" Name="objectview_macros" Type="b0f0d522-8b4b-cbda-814a-40263e489354">
							<Attributes>
								<Attribute Name="sortable">1</Attribute>
								<Attribute Name="tmpobj"><![CDATA[
								]]></Attribute>
								<Attribute Name="vdomclassid">07460cb5-772f-48e1-95ab-be6c07b63f69</Attribute>
								<Attribute Name="height">60</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">680</Attribute>
								<Attribute Name="itemstorender"><![CDATA[
								]]></Attribute>
								<Attribute Name="data"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
						</Object>
						<Object ID="3b743b4e-9f68-4ec2-8d18-2242d7a5c6dd" Name="macro_cont_close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">893cc0d1-ae4a-4751-9fc4-fa9483f794c4</Attribute>
								<Attribute Name="height">17</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">28</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">6</Attribute>
								<Attribute Name="left">680</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="01b5bcc8-e1f9-43b6-b194-cb5ad27f90ce" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="8e460481-479b-464a-9b75-affb80de39c4" Name="deletearchivedialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">50</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="top">1403</Attribute>
						<Attribute Name="height">150</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="7ed7c969-cbcf-4207-a498-fbaa93e86960" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">150</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">300</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="bbcf545b-7a6d-441b-9a84-0aecc99f47c0" Name="delarchive" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
									<Attributes>
										<Attribute Name="width">269</Attribute>
										<Attribute Name="top">51</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="ba25e979-d11b-4acf-bb72-ff14a69518ed" Name="delmails" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
									<Attributes>
										<Attribute Name="width">269</Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="a3325e97-ca41-4438-8424-f844b060f040" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">111</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">121</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="a84ca3fa-9514-433a-8211-755daad3ad7a" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">111</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">121</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">163</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="2ed32448-1e42-40f7-bc4a-9d568a5c4b83" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="cacdb4cc-a754-4102-9298-945cc4f5e797" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="b92da4e9-5d5e-4768-aaa5-612ccb24af50" Name="vdomdynobj" Type="9e338259-29be-41d6-ac84-b44e2b294ffe">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="vdomactions"><![CDATA[
						]]></Attribute>
						<Attribute Name="vdomxml"><![CDATA[
						]]></Attribute>
						<Attribute Name="rendererrormsg"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="a8bf4de9-81a2-4374-a58b-0bcc39b0a3fb" Name="sidebar" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">453</Attribute>
						<Attribute Name="classname">sidebar</Attribute>
						<Attribute Name="width">224</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor">F6F6F6</Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8ef78615-4f19-415f-880a-b799e5e28b9d" Name="current" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">151</Attribute>
								<Attribute Name="height">78</Attribute>
								<Attribute Name="classname">current-mailbox</Attribute>
								<Attribute Name="width">224</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="896c0586-02a7-41c7-ad1e-04fba84bf332" Name="boxaddr" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="color">949494</Attribute>
										<Attribute Name="top">52</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="fontfamily"><![CDATA["Times New Roman", "Times CY", times, "Nimbus Roman No9 L", serif]]></Attribute>
										<Attribute Name="fontsize">14</Attribute>
										<Attribute Name="width">170</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">12</Attribute>
									</Attributes>
								</Object>
								<Object ID="139dfa0a-8f05-46f2-b294-113ddf20e867" Name="boxselect" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="height">30</Attribute>
										<Attribute Name="classname">current-mailbox-select</Attribute>
										<Attribute Name="width">208</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
									<Objects>
										<Object ID="cad61140-ee5c-43e4-861a-ff90d82ccf0e" Name="boxname" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">3</Attribute>
												<Attribute Name="value">Select mailbox</Attribute>
												<Attribute Name="classname">cut-out-text</Attribute>
												<Attribute Name="width">162</Attribute>
												<Attribute Name="fontsize">18</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">22</Attribute>
											</Attributes>
										</Object>
										<Object ID="e24e0ed7-7573-486b-82a9-637bcf042788" Name="arrow" Type="7085bd26-e653-490b-908f-61208c260a86">
											<Attributes>
												<Attribute Name="zindex">0</Attribute>
												<Attribute Name="top">8</Attribute>
												<Attribute Name="height">21</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">20</Attribute>
												<Attribute Name="htmlcode">&amp;#9660;</Attribute>
												<Attribute Name="left">188</Attribute>
											</Attributes>
										</Object>
										<Object ID="e006ddc5-0914-4d85-99b0-3c50117552c2" Name="boxcolor" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
											<Attributes>
												<Attribute Name="zindex">10</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">15</Attribute>
												<Attribute Name="height">30</Attribute>
											</Attributes>
										</Object>
										<Object ID="a6686d94-bbb1-4f57-baf7-69548a9aa5db" Name="topclick" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
											<Attributes>
												<Attribute Name="classname">mailbox-select-bar</Attribute>
												<Attribute Name="width">208</Attribute>
												<Attribute Name="zindex">10</Attribute>
												<Attribute Name="color"><![CDATA[
												]]></Attribute>
												<Attribute Name="height">30</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="0818c582-c6f5-4d56-b686-2bd0bc2d75ac" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="97ccec8a-a026-4487-b07e-a94a2418ff16" Name="mailboxopts" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[#%(id)s {
 font-size: 9px;
 padding: 3px;
 border: 1px solid rgb(249, 249, 249) !important;
 -webkit-border-radius: 2px;
 -moz-border-radius: 2px;
 border-radius: 2px;
 background: rgb(244, 244, 244);
 background: -moz-linear-gradient(90deg, rgb(244, 244, 244) 100%%);
 background: -webkit-linear-gradient(90deg, rgb(244, 244, 244) 100%%);
 background: -o-linear-gradient(90deg, rgb(244, 244, 244) 100%%);
 background: -ms-linear-gradient(90deg, rgb(244, 244, 244) 100%%);
 background: linear-gradient(0deg, rgb(244, 244, 244) 100%%);
 -webkit-box-shadow: 0px 2px 1px rgba(124, 124, 124, 0.38);
 -moz-box-shadow:    0px 2px 1px rgba(124, 124, 124, 0.38);
 box-shadow:         0px 2px 1px rgba(124, 124, 124, 0.38);
}
#%(id)s a {
 text-decoration:none;
 cursor:pointer;
 outline:none !important;
}]]></Attribute>
										<Attribute Name="containerlink"><![CDATA[
										]]></Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">4b65916e-eba7-4d1f-b158-dbb76968968f</Attribute>
										<Attribute Name="height">16</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="width">16</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">49</Attribute>
										<Attribute Name="left">191</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="fe317285-1813-499c-8664-a78c5a28cfa8" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="290a64f7-addc-4b49-905a-e3f0166bde3e" Name="unread" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">42</Attribute>
								<Attribute Name="height">101</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">224</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="edfce85f-ac08-425c-9a7b-5e993ea4f681" Name="message" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="align">center</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">214</Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">3</Attribute>
									</Attributes>
								</Object>
								<Object ID="1dff44dc-7dff-4c2f-96d0-84a5f52505fe" Name="dlist" Type="45ec0aa6-d28b-407a-8c61-ffb64adce738">
									<Attributes>
										<Attribute Name="selectonclick">0</Attribute>
										<Attribute Name="height">101</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">191</Attribute>
										<Attribute Name="template"><![CDATA[{"default": "<VDOMCLASS name=\"unread\" classname=\"unread-mailbox\" top=\"1\" height=\"20\" width=\"50\" left=\"0\" visible=\"1\"><CONTAINER name=\"cnt\" height=\"20\" width=\"50\" backgroundcolor=\"D47272\" left=\"0\"><TEXT name=\"msgcount\" top=\"3\" classname=\"text-cls cut-out-text\" width=\"50\" align=\"center\" color=\"C7C7C7\"/></CONTAINER></VDOMCLASS>"
}]]></Attribute>
										<Attribute Name="bindings"><![CDATA[{
  "default": {
    "msgcount": "cnt.msgcount.value",
    "bgcolor": "cnt.backgroundcolor",
    "txtcolor": "cnt.msgcount.color",
    "hint": "cnt.msgcount.hint"
  }
}]]></Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="left">12</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="500386cf-5639-44e7-a7dd-f6d4793701c1" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="c3eeb5ad-ca28-462c-bb4b-3bc5d4994b09" Name="attention" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="color">949494</Attribute>
								<Attribute Name="top">292</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname">cut-out-text</Attribute>
								<Attribute Name="width">224</Attribute>
								<Attribute Name="fontsize">14</Attribute>
								<Attribute Name="fontfamily"><![CDATA["Times New Roman", "Times CY", times, "Nimbus Roman No9 L", serif]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="3f523688-301f-4076-bc44-811ac7dee449" Name="unreadheader" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">Unread mailboxes</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">214</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="top">13</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">3</Attribute>
							</Attributes>
						</Object>
						<Object ID="1db633f0-5846-45ad-a51b-7c2c691fd279" Name="archives" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
							<Attributes>
								<Attribute Name="activeitem"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="layout">0</Attribute>
								<Attribute Name="top">234</Attribute>
								<Attribute Name="selectonclick">0</Attribute>
								<Attribute Name="classname">archive-list</Attribute>
								<Attribute Name="width">224</Attribute>
								<Attribute Name="droppablerows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectedrows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectablerows"><![CDATA[
								]]></Attribute>
								<Attribute Name="clickclass">.control-icon</Attribute>
								<Attribute Name="data"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="9fff5fe2-8221-4d02-976a-100de5ad7637" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="3562b93b-0906-4fb8-b59c-9cbc544b1d2c" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">665</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="1e0ca967-bc36-457f-ae78-5748c2b16f71" Name="maillist" Type="45ec0aa6-d28b-407a-8c61-ffb64adce738">
					<Attributes>
						<Attribute Name="draggable">1</Attribute>
						<Attribute Name="layout">0</Attribute>
						<Attribute Name="draghelper"><![CDATA[<div class='dov-drag-helper' style='width:50px;height:20px;background:#555;color:white;'><span></span>{selectedItems} mail(s)</div>]]></Attribute>
						<Attribute Name="top">248</Attribute>
						<Attribute Name="dynamicloading">1</Attribute>
						<Attribute Name="classname">maillist</Attribute>
						<Attribute Name="width">312</Attribute>
						<Attribute Name="template"><![CDATA[{"default": "<VDOMCLASS name=\"mailclass\" height=\"128\" width=\"275\" classname=\"maillist-item\" left=\"0\" visible=\"1\"><TEXT name=\"date\" top=\"8\" value=\"14:35\" classname=\"time timestamp\" width=\"75\" align=\"right\" left=\"185\" color=\"515151\" fontsize=\"12\"/><TEXT name=\"fromname\" top=\"26\" classname=\"from-name cut-out-text\" width=\"255\" left=\"12\" fontsize=\"16\" color=\"303030\"/><TEXT name=\"fromaddr\" top=\"47\" classname=\"from-addr cut-out-text\" width=\"270\" left=\"12\" color=\"9B9B9B\" fontsize=\"14\"/><TEXT name=\"subject\" top=\"75\" classname=\"subject cut-out-text\" width=\"255\" left=\"12\" fontsize=\"16\" color=\"000000\"/><BAR name=\"selectbar\" top=\"118\" height=\"10\" classname=\"select-bar\" width=\"275\" color=\"DB5C5C\" visible=\"0\"/><HYPERTEXT name=\"labels\" zindex=\"0\" top=\"88\" height=\"17\" classname=\"labels\" width=\"255\" left=\"12\"/></VDOMCLASS>"
}]]></Attribute>
						<Attribute Name="selectionmode">1</Attribute>
						<Attribute Name="bindings"><![CDATA[{
  "default": {
    "date": "date.value",
    "dateHint": "date.hint",
    "fromName": "fromname.value",
    "fromNameHint": "fromname.hint",
    "fromAddr": "fromaddr.value",
    "fromAddrHint": "fromaddr.hint",
    "subject": "subject.value",
    "subjectHint": "subject.hint"
  }
}]]></Attribute>
						<Attribute Name="height">338</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="clickclass">.select-bar</Attribute>
						<Attribute Name="left">226</Attribute>
					</Attributes>
				</Object>
				<Object ID="4cdd6455-f36c-4f81-977e-f53f5c24937d" Name="mailcomposerlist" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">116</Attribute>
						<Attribute Name="height">150</Attribute>
						<Attribute Name="classname">mailcomposer-cnt</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor">FFFFFF</Attribute>
						<Attribute Name="width">208</Attribute>
						<Attribute Name="left">12</Attribute>
					</Attributes>
					<Objects>
						<Object ID="5b992327-7523-4874-a2fd-83a42318f9dc" Name="list" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
							<Attributes>
								<Attribute Name="activeitem"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="layout">0</Attribute>
								<Attribute Name="droppable">0</Attribute>
								<Attribute Name="selectonclick">0</Attribute>
								<Attribute Name="height">150</Attribute>
								<Attribute Name="classname">mailcomposer-list</Attribute>
								<Attribute Name="width">208</Attribute>
								<Attribute Name="droppablerows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectedrows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectablerows">[1]</Attribute>
								<Attribute Name="clickclass"><![CDATA[
								]]></Attribute>
								<Attribute Name="data"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6d4a9fe3-45fc-439b-a6d4-ac69ecb9b432" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="24950cd0-6443-40b8-861e-67b7e462cd52" Name="loading" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">349</Attribute>
						<Attribute Name="height">70</Attribute>
						<Attribute Name="classname">loading-cnt</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor">FFFFFF</Attribute>
						<Attribute Name="width">320</Attribute>
						<Attribute Name="left">682</Attribute>
					</Attributes>
					<Objects>
						<Object ID="149345bd-da54-40e8-8b59-e4ee1f2f311c" Name="image1" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">17</Attribute>
								<Attribute Name="value">92e097db-dad9-412f-936e-229731d0bf78</Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="width">22</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">153</Attribute>
							</Attributes>
						</Object>
						<Object ID="7273afdf-3f9f-405c-acc6-98f842d48935" Name="text1" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">Loading...</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">320</Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="cd623ba7-d9ab-4fa0-a157-f8cf12e62d73" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="0d0ded3e-2cce-4e97-8f05-162e757deca8" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="f0373e47-1b66-4cc7-b28e-f7d96eb26493" Name="replycnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">84</Attribute>
						<Attribute Name="height">50</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">208</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">740</Attribute>
					</Attributes>
					<Objects>
						<Object ID="9e1fb788-f8b9-4517-88f1-9bceacb807d0" Name="button1" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname">reply-btn topbar-button</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Reply</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">44</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">60</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">3</Attribute>
								<Attribute Name="left">7</Attribute>
							</Attributes>
						</Object>
						<Object ID="2f2a9a70-4058-4457-8539-4fd38afed6cb" Name="button2" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname">replyall-btn topbar-button</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Reply all</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">44</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">60</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">3</Attribute>
								<Attribute Name="left">67</Attribute>
							</Attributes>
						</Object>
						<Object ID="d2fbc3c2-da29-4770-bbbf-9a8868797fab" Name="button3" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname">forward-btn topbar-button</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Forward</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">44</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">60</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">3</Attribute>
								<Attribute Name="left">127</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e0411088-867f-4f1e-af8b-74cc5bdf25c1" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="33c2ade4-901d-43b4-8e17-64cc428ffd7b" Name="popuplayer" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="classname">popupsensitive</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="htmlcode"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="fed164c0-50b4-4fbb-8990-513898acd38e" Name="delselectedbtn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">delete-selected-btn topbar-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Delete selected</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">44</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">84</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">86</Attribute>
						<Attribute Name="left">448</Attribute>
					</Attributes>
				</Object>
				<Object ID="68d2aa1e-39c7-4a1e-9368-d532e83e67b3" Name="newmailbox" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">New mailbox</Attribute>
						<Attribute Name="top">837</Attribute>
						<Attribute Name="height">410</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">450</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="ba0a6e06-2d31-4137-81c7-0b172e015e0e" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">410</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">450</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="b1ac622b-b262-4698-a767-318247a80648" Name="loginlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">84</Attribute>
										<Attribute Name="value">Login</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">130</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="1d6d9c38-bafc-41ac-a459-43d651262a00" Name="boxname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">42</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">173</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="68406b8b-b199-4a7d-b024-54d9fdf8d650" Name="login" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">112</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">173</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="e721d4cc-7e0d-472c-acc1-44388cb885dd" Name="rights" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">317</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">263</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="f28c9957-61b0-409a-8182-a41d0d366d92" Name="shared" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">283</Attribute>
										<Attribute Name="value">{}</Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="d97a31ef-b2c6-43da-9d6f-9ae457dd99d1" Name="color" Type="a57e9f82-f352-d967-ae56-648008c048be">
									<Attributes>
										<Attribute Name="width">74</Attribute>
										<Attribute Name="top">42</Attribute>
										<Attribute Name="left">232</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="tabindex">2</Attribute>
									</Attributes>
								</Object>
								<Object ID="81755fbe-d53c-49e1-9bea-397ab332424d" Name="serverlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">157</Attribute>
										<Attribute Name="value">Server settings</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">173</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="d857d969-a6d7-416d-972c-2e7fff24341a" Name="creator" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">256</Attribute>
										<Attribute Name="value">{}: {} ({})</Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="c492f6ce-122d-43c9-83f8-2eb4c8062cfb" Name="checkconn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">373</Attribute>
										<Attribute Name="label">Check connection</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">150</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="76ef90c1-9fed-4857-9dc7-7004d7291171" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">373</Attribute>
										<Attribute Name="label">Submit</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">105</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">6</Attribute>
										<Attribute Name="left">326</Attribute>
									</Attributes>
								</Object>
								<Object ID="4404f855-91b2-4c5c-8f42-427f6481c40c" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">373</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">105</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">7</Attribute>
										<Attribute Name="type">1</Attribute>
										<Attribute Name="left">207</Attribute>
									</Attributes>
								</Object>
								<Object ID="79e2593d-b967-4b69-b881-4a4dec59f304" Name="additionalifno_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="align">center</Attribute>
										<Attribute Name="value"><![CDATA[<span class="line"></span><span class="text">{}<span>]]></Attribute>
										<Attribute Name="classname">centered-line</Attribute>
										<Attribute Name="width">406</Attribute>
										<Attribute Name="top">228</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="e8060146-478e-4dda-a01c-845dabbf724b" Name="boxtypelabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">16</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">105</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">313</Attribute>
									</Attributes>
								</Object>
								<Object ID="d63061aa-9afe-4695-89f7-23c0035ce6d0" Name="passwd" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
									<Attributes>
										<Attribute Name="top">112</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">22</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">199</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="left">232</Attribute>
									</Attributes>
								</Object>
								<Object ID="3d5c7cc9-9099-4546-ba80-128e6c0ea3bc" Name="namelabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">16</Attribute>
										<Attribute Name="value">Name</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">130</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="49ba011a-0523-4d80-b44e-a42868155d2e" Name="server" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="tabindex">5</Attribute>
										<Attribute Name="top">180</Attribute>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">406</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">25</Attribute>
									</Attributes>
								</Object>
								<Object ID="98ae99dd-fb07-4544-aacb-e5e2a6002c26" Name="passwdlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">84</Attribute>
										<Attribute Name="value">Password</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">172</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">232</Attribute>
									</Attributes>
								</Object>
								<Object ID="6c2ba3b5-9524-41e3-a5bc-7054672d8185" Name="boxtype" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
									<Attributes>
										<Attribute Name="width">105</Attribute>
										<Attribute Name="top">42</Attribute>
										<Attribute Name="left">313</Attribute>
										<Attribute Name="height">22</Attribute>
									</Attributes>
								</Object>
								<Object ID="1f35c9bf-7ecb-4cb9-a028-e03687ada720" Name="colorlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">16</Attribute>
										<Attribute Name="value">Color</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">71</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">232</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="bd4e9a82-5286-42aa-8b82-36dcc47c58ca" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="4a4b9aaf-0a8b-4fb2-a092-a747d6746deb" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="35fc38f7-53e3-4ad5-9076-7534b11f5109" Name="mailboxpopup" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">349</Attribute>
						<Attribute Name="classname">mailbox-popup popup-box</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">140</Attribute>
						<Attribute Name="left">206</Attribute>
					</Attributes>
					<Objects>
						<Object ID="4381a2f0-dd97-4d13-98ab-ded5bae9c840" Name="options" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
							<Attributes>
								<Attribute Name="activeitem"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="layout">0</Attribute>
								<Attribute Name="height">100</Attribute>
								<Attribute Name="classname">mailbox-options</Attribute>
								<Attribute Name="width">140</Attribute>
								<Attribute Name="droppablerows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectedrows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectablerows"><![CDATA[
								]]></Attribute>
								<Attribute Name="clickclass"><![CDATA[
								]]></Attribute>
								<Attribute Name="data"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="c498ef2e-f944-451b-abd5-05f9c37590e0" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="4d679c8c-158a-4723-a4d1-15b396267b61" Name="dialog_plugin_macros" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="top">1646</Attribute>
						<Attribute Name="height">312</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">337</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">747</Attribute>
					</Attributes>
					<Objects>
						<Object ID="fa2ac656-f4dc-45cc-9a4e-ac90c74e6fee" Name="btn_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">33</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">275</Attribute>
								<Attribute Name="left">255</Attribute>
							</Attributes>
						</Object>
						<Object ID="f4e46405-51b8-4527-a901-3778a30e0c1d" Name="datatable" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
							<Attributes>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="rowactive"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">11</Attribute>
								<Attribute Name="hiddenfields"><![CDATA[["guid"]]]></Attribute>
								<Attribute Name="nocellclick"><![CDATA[
								]]></Attribute>
								<Attribute Name="showheader">0</Attribute>
								<Attribute Name="height">250</Attribute>
								<Attribute Name="header"><![CDATA[["guid", "ico", "name"]]]></Attribute>
								<Attribute Name="key"><![CDATA["guid"]]></Attribute>
								<Attribute Name="skin">0</Attribute>
								<Attribute Name="selectedrows"><![CDATA[
								]]></Attribute>
								<Attribute Name="cssclass">macro-popup</Attribute>
								<Attribute Name="data"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">314</Attribute>
								<Attribute Name="left">12</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6142849b-7623-4708-8d86-c23b82c05011" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="89705bd5-174d-4568-a3c4-b3c2c0e85224" Name="labelsmgmtinfo" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">50</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Labels management</Attribute>
						<Attribute Name="top">2164</Attribute>
						<Attribute Name="height">350</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">740</Attribute>
					</Attributes>
					<Objects>
						<Object ID="ba618b66-867d-4613-8bcf-77b91ab7cd85" Name="labels" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">290</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">400</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="805ad176-89ad-4236-a5f4-a3e6754ce387" Name="message" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="align">center</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">139</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="592ec110-b1b3-404b-bf85-8927caf9a66d" Name="list" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
									<Attributes>
										<Attribute Name="activeitem"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="layout">0</Attribute>
										<Attribute Name="droppable">0</Attribute>
										<Attribute Name="selectonclick">4</Attribute>
										<Attribute Name="height">290</Attribute>
										<Attribute Name="classname">labels-mgmt-list</Attribute>
										<Attribute Name="width">400</Attribute>
										<Attribute Name="droppablerows"><![CDATA[["nodropable"]]]></Attribute>
										<Attribute Name="selectedrows"><![CDATA[["noselected"]]]></Attribute>
										<Attribute Name="selectablerows"><![CDATA[["noselectable"]]]></Attribute>
										<Attribute Name="clickclass">.control-icon</Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="a3c6885f-1059-4588-897f-84f1dfedcfbd" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="810e128d-246b-473c-b261-2c3ecdf9bb1a" Name="close" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">311</Attribute>
								<Attribute Name="label">Close</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">116</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">17</Attribute>
							</Attributes>
						</Object>
						<Object ID="91001303-df0f-4b1a-97b9-1ef876d97f87" Name="create" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">311</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">116</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">269</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="448b9246-6868-4c63-b59b-7cd73078a15b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7b7e5692-9f0b-45cf-9d01-37b7e1eff65e" Name="jqueryuiautocomplite" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[/*!
 * jQuery UI Autocomplete 1.8.20
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Autocomplete
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.position.js
 */
(function( $, undefined ) {

// used to prevent race conditions with remote data sources
var requestIndex = 0;

$.widget( "ui.autocomplete", {
	options: {
		appendTo: "body",
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,
		response: null,
	},

	pending: 0,

	_create: function() {
		var self = this,
			doc = this.element[ 0 ].ownerDocument,
			suppressKeyPress;
		this.isMultiLine = this.element.is( "textarea" );

		this.element
			.addClass( "ui-autocomplete-input" )
			.attr( "autocomplete", "off" )
			// TODO verify these actually work as intended
			.attr({
				role: "textbox",
				"aria-autocomplete": "list",
				"aria-haspopup": "true"
			})
			.bind( "keydown.autocomplete", function( event ) {
				if ( self.options.disabled || self.element.propAttr( "readOnly" ) ) {
					return;
				}

				suppressKeyPress = false;
				var keyCode = $.ui.keyCode;
				switch( event.keyCode ) {
				case keyCode.PAGE_UP:
					self._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					self._move( "nextPage", event );
					break;
				case keyCode.UP:
					self._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					self._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
				case keyCode.NUMPAD_ENTER:
					// when menu is open and has focus
					if ( self.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
					}
					//passthrough - ENTER and TAB both select the current element
				case keyCode.TAB:
					if ( !self.menu.active ) {
						return;
					}
					self.menu.select( event );
					break;
				case keyCode.ESCAPE:
					self.element.val( self.term );
					self.close( event );
					break;
				default:
					// keypress is triggered before the input value is changed
					clearTimeout( self.searching );
					self.searching = setTimeout(function() {
						// only search if the value has changed
						if ( self.term != self.element.val() ) {
							self.selectedItem = null;
							self.search( null, event );
						}
					}, self.options.delay );
					break;
				}
			})
			.bind( "keypress.autocomplete", function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					event.preventDefault();
				}
			})
			.bind( "focus.autocomplete", function() {
				if ( self.options.disabled ) {
					return;
				}

				self.selectedItem = null;
				self.previous = self.element.val();
			})
			.bind( "blur.autocomplete", function( event ) {
				if ( self.options.disabled ) {
					return;
				}

				clearTimeout( self.searching );
				// clicks on the menu (or a button to trigger a search) will cause a blur event
				self.closing = setTimeout(function() {
					self.close( event );
					self._change( event );
				}, 150 );
			});
		this._initSource();
		this.menu = $( "<ul></ul>" )
			.addClass( "ui-autocomplete" )
			.appendTo( $( this.options.appendTo || "body", doc )[0] )
			// prevent the close-on-blur in case of a "slow" click on the menu (long mousedown)
			.mousedown(function( event ) {
				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = self.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
					setTimeout(function() {
						$( document ).one( 'mousedown', function( event ) {
							if ( event.target !== self.element[ 0 ] &&
								event.target !== menuElement &&
								!$.ui.contains( menuElement, event.target ) ) {
								self.close();
							}
						});
					}, 1 );
				}

				// use another timeout to make sure the blur-event-handler on the input was already triggered
				setTimeout(function() {
					clearTimeout( self.closing );
				}, 13);
			})
			.menu({
				focus: function( event, ui ) {
					var item = ui.item.data( "item.autocomplete" );
					if ( false !== self._trigger( "focus", event, { item: item } ) ) {
						// use value to match what will end up in the input, if it was a key event
						if ( /^key/.test(event.originalEvent.type) ) {
							self.element.val( item.value );
						}
					}
				},
				selected: function( event, ui ) {
					var item = ui.item.data( "item.autocomplete" ),
						previous = self.previous;

					// only trigger when focus was lost (click on menu)
					if ( self.element[0] !== doc.activeElement ) {
						self.element.focus();
						self.previous = previous;
						// #6109 - IE triggers two focus events and the second
						// is asynchronous, so we need to reset the previous
						// term synchronously and asynchronously :-(
						setTimeout(function() {
							self.previous = previous;
							self.selectedItem = item;
						}, 1);
					}

					if ( false !== self._trigger( "select", event, { item: item } ) ) {
						self.element.val( item.value );
					}
					// reset the term after the select event
					// this allows custom select handling to work properly
					self.term = self.element.val();

					self.close( event );
					self.selectedItem = item;
				},
				blur: function( event, ui ) {
					// don't set the value of the text field if it's already correct
					// this prevents moving the cursor unnecessarily
					if ( self.menu.element.is(":visible") &&
						( self.element.val() !== self.term ) ) {
						self.element.val( self.term );
					}
				}
			})
			.zIndex( this.element.zIndex() + 1 )
			// workaround for jQuery bug #5781 http://dev.jquery.com/ticket/5781
			.css({ top: 0, left: 0 })
			.hide()
			.data( "menu" );
		if ( $.fn.bgiframe ) {
			 this.menu.element.bgiframe();
		}
		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		self.beforeunloadHandler = function() {
			self.element.removeAttr( "autocomplete" );
		};
		$( window ).bind( "beforeunload", self.beforeunloadHandler );
	},

	destroy: function() {
		this.element
			.removeClass( "ui-autocomplete-input" )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-autocomplete" )
			.removeAttr( "aria-haspopup" );
		this.menu.element.remove();
		$( window ).unbind( "beforeunload", this.beforeunloadHandler );
		$.Widget.prototype.destroy.call( this );
	},

	_setOption: function( key, value ) {
		$.Widget.prototype._setOption.apply( this, arguments );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( $( value || "body", this.element[0].ownerDocument )[0] )
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_initSource: function() {
		var self = this,
			array,
			url;
		if ( $.isArray(this.options.source) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter(array, request.term) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( self.xhr ) {
					self.xhr.abort();
				}
				self.xhr = $.ajax({
					url: url,
					data: request,
					dataType: "json",
					success: function( data, status ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	search: function( value, event ) {
		value = value != null ? value : this.element.val();

		// always save the actual value, not the one passed as an argument
		this.term = this.element.val();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		clearTimeout( this.closing );
		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this.element.addClass( "ui-autocomplete-loading" );

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var that = this,
			index = ++requestIndex;

		return function( content ) {
			if ( index === requestIndex ) {
				that.__response( content );
			}

			that.pending--;
			if ( !that.pending ) {
				that.element.removeClass( "ui-autocomplete-loading" );
			}
		};
	},

	__response: function( content ) {
             if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length ) {
			content = this._normalize( content );
			this._suggest( content );
			this._trigger( "open" );
		} else {
			this.close();
		}
	},

	close: function( event ) {
		clearTimeout( this.closing );
		if ( this.menu.element.is(":visible") ) {
			this.menu.element.hide();
			this.menu.deactivate();
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this.element.val() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {
		// assume all items have the right format when the first item is complete
		if ( items.length && items[0].label && items[0].value ) {
			return items;
		}
		return $.map( items, function(item) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend({
				label: item.label || item.value,
				value: item.value || item.label
			}, item );
		});
	},

	_suggest: function( items ) {
		var ul = this.menu.element
			.empty()
			.zIndex( this.element.zIndex() + 1 );
		this._renderMenu( ul, items );
		// TODO refresh should check if the active item is still in the dom, removing the need for a manual deactivate
		this.menu.deactivate();
		this.menu.refresh();

		// size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend({
			of: this.element
		}, this.options.position ));

		if ( this.options.autoFocus ) {
			this.menu.next( new $.Event("mouseover") );
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var self = this;
		$.each( items, function( index, item ) {
			self._renderItem( ul, item );
		});
	},

	_renderItem: function( ul, item) {
		return $( "<li></li>" )
			.data( "item.autocomplete", item )
			.append( $( "<a></a>" ).append( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is(":visible") ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.first() && /^previous/.test(direction) ||
				this.menu.last() && /^next/.test(direction) ) {
			this.element.val( this.term );
			this.menu.deactivate();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},
	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	}
});

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	},
	filter: function(array, term) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
		return $.grep( array, function(value) {
			return matcher.test( value.label || value.value || value );
		});
	}
});

}( jQuery ));

/*
 * jQuery UI Menu (not officially released)
 *
 * This widget isn't yet finished and the API is subject to change. We plan to finish
 * it for the next release. You're welcome to give it a try anyway and give us feedback,
 * as long as you're okay with migrating your code later on. We can help with that, too.
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Menu
 *
 * Depends:
 *	jquery.ui.core.js
 *  jquery.ui.widget.js
 */
(function($) {

$.widget("ui.menu", {
	_create: function() {
		var self = this;
		this.element
			.addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
			.attr({
				role: "listbox",
				"aria-activedescendant": "ui-active-menuitem"
			})
			.click(function( event ) {
				if ( !$( event.target ).closest( ".ui-menu-item a" ).length ) {
					return;
				}
				// temporary
				event.preventDefault();
				self.select( event );
			});
		this.refresh();
	},

	refresh: function() {
		var self = this;

		// don't refresh list items that are already adapted
		var items = this.element.children("li:not(.ui-menu-item):has(a)")
			.addClass("ui-menu-item")
			.attr("role", "menuitem");

		items.children("a")
			.addClass("ui-corner-all")
			.attr("tabindex", -1)
			// mouseenter doesn't work with event delegation
			.mouseenter(function( event ) {
				self.activate( event, $(this).parent() );
			})
			.mouseleave(function() {
				self.deactivate();
			});
	},

	activate: function( event, item ) {
		this.deactivate();
		if (this.hasScroll()) {
			var offset = item.offset().top - this.element.offset().top,
				scroll = this.element.scrollTop(),
				elementHeight = this.element.height();
			if (offset < 0) {
				this.element.scrollTop( scroll + offset);
			} else if (offset >= elementHeight) {
				this.element.scrollTop( scroll + offset - elementHeight + item.height());
			}
		}
		this.active = item.eq(0)
			.children("a")
				.addClass("ui-state-hover")
				.attr("id", "ui-active-menuitem")
			.end();
		this._trigger("focus", event, { item: item });
	},

	deactivate: function() {
		if (!this.active) { return; }

		this.active.children("a")
			.removeClass("ui-state-hover")
			.removeAttr("id");
		this._trigger("blur");
		this.active = null;
	},

	next: function(event) {
		this.move("next", ".ui-menu-item:first", event);
	},

	previous: function(event) {
		this.move("prev", ".ui-menu-item:last", event);
	},

	first: function() {
		return this.active && !this.active.prevAll(".ui-menu-item").length;
	},

	last: function() {
		return this.active && !this.active.nextAll(".ui-menu-item").length;
	},

	move: function(direction, edge, event) {
		if (!this.active) {
			this.activate(event, this.element.children(edge));
			return;
		}
		var next = this.active[direction + "All"](".ui-menu-item").eq(0);
		if (next.length) {
			this.activate(event, next);
		} else {
			this.activate(event, this.element.children(edge));
		}
	},

	// TODO merge with previousPage
	nextPage: function(event) {
		if (this.hasScroll()) {
			// TODO merge with no-scroll-else
			if (!this.active || this.last()) {
				this.activate(event, this.element.children(".ui-menu-item:first"));
				return;
			}
			var base = this.active.offset().top,
				height = this.element.height(),
				result = this.element.children(".ui-menu-item").filter(function() {
					var close = $(this).offset().top - base - height + $(this).height();
					// TODO improve approximation
					return close < 10 && close > -10;
				});

			// TODO try to catch this earlier when scrollTop indicates the last page anyway
			if (!result.length) {
				result = this.element.children(".ui-menu-item:last");
			}
			this.activate(event, result);
		} else {
			this.activate(event, this.element.children(".ui-menu-item")
				.filter(!this.active || this.last() ? ":first" : ":last"));
		}
	},

	// TODO merge with nextPage
	previousPage: function(event) {
		if (this.hasScroll()) {
			// TODO merge with no-scroll-else
			if (!this.active || this.first()) {
				this.activate(event, this.element.children(".ui-menu-item:last"));
				return;
			}

			var base = this.active.offset().top,
				height = this.element.height(),
				result = this.element.children(".ui-menu-item").filter(function() {
					var close = $(this).offset().top - base + height - $(this).height();
					// TODO improve approximation
					return close < 10 && close > -10;
				});

			// TODO try to catch this earlier when scrollTop indicates the last page anyway
			if (!result.length) {
				result = this.element.children(".ui-menu-item:first");
			}
			this.activate(event, result);
		} else {
			this.activate(event, this.element.children(".ui-menu-item")
				.filter(!this.active || this.first() ? ":last" : ":first"));
		}
	},

	hasScroll: function() {
		return this.element.height() < this.element[ $.fn.prop ? "prop" : "attr" ]("scrollHeight");
	},

	select: function( event ) {
		this._trigger("selected", event, { item: this.active });
	}
});

}(jQuery));]]></Attribute>
						<Attribute Name="left">815</Attribute>
					</Attributes>
				</Object>
				<Object ID="a3236539-1115-424a-8c12-8718ee8e6188" Name="container1div" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">82</Attribute>
						<Attribute Name="height">39</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">2</Attribute>
						<Attribute Name="backgroundimage">5a60e33a-0270-45b3-b6d6-0b8127a42152</Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">224</Attribute>
					</Attributes>
					<Actions>
						<Action ID="841529ea-4dcc-46fb-a4f6-fa88bd4f7a88" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="14a8a7b6-1916-4609-b613-d774994397d7" Name="mailsearch" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="classname">mailsearch</Attribute>
						<Attribute Name="width">312</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">226</Attribute>
					</Attributes>
					<Objects>
						<Object ID="c9fb2841-29e6-4cd8-a4be-e8a45cedd17c" Name="mailsearch" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">312</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">46</Attribute>
							</Attributes>
							<Objects>
								<Object ID="f6f2fbc4-79f5-4232-b777-276b7b283dbe" Name="query" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">16</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">274</Attribute>
										<Attribute Name="placeholder">Search mails and peoples</Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="ded65981-2532-4ffb-86b5-28209b674223" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="2c499978-1227-47ba-b09d-2027e9295aa0" Name="mailsortingtitle" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">right</Attribute>
								<Attribute Name="value">Sorting by &amp;#9660;</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">272</Attribute>
								<Attribute Name="top">61</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">18</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e0c853cd-8baf-4df2-b96b-c19d61ad501b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="0a5aa1bc-f45b-4c6c-9261-b6af6de67a8e" Name="bar2" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="color">8C8C8C</Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">453</Attribute>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="width">2</Attribute>
						<Attribute Name="left">538</Attribute>
					</Attributes>
				</Object>
				<Object ID="0a4dc2ca-9f9e-4b0c-99a1-cfa88e3e6ffa" Name="checktaskdialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Test connection to server</Attribute>
						<Attribute Name="top">1646</Attribute>
						<Attribute Name="height">480</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">730</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="61083fe8-7c31-4028-85c3-1cb5799f26e7" Name="closebtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">441</Attribute>
								<Attribute Name="label">Close</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">149</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">567</Attribute>
							</Attributes>
						</Object>
						<Object ID="6334d6d1-1be2-4540-bee8-2f5038c026be" Name="output" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">410</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">730</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="06cb3bf0-8fdc-4020-9bae-3a7b6c89d663" Name="logs" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">390</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">710</Attribute>
										<Attribute Name="multiline">1</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">10</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="3ca5b84d-6eca-4ce3-8eb7-ecd86e0dec12" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="daecda40-2e2e-4935-b2df-f3976122e66e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="16f04424-e6fd-4af4-9cc6-fa3ad4f69c1a" Name="cntbg" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">453</Attribute>
						<Attribute Name="classname">page-background</Attribute>
						<Attribute Name="width">741</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">226</Attribute>
					</Attributes>
					<Actions>
						<Action ID="1111e115-766a-4057-b814-9d2ce10d42ea" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="01582309-fc98-482e-be89-927948c93065" Name="eactimer" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="top">34</Attribute>
						<Attribute Name="interval">1000</Attribute>
						<Attribute Name="left">1158</Attribute>
						<Attribute Name="once">1</Attribute>
					</Attributes>
				</Object>
				<Object ID="8eb9bd47-5e13-4c62-9af4-9f69ec7624bb" Name="macros_ico_holder" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="designcolor">EEDA91</Attribute>
						<Attribute Name="top">1</Attribute>
						<Attribute Name="height">70</Attribute>
						<Attribute Name="classname">top-menu-item</Attribute>
						<Attribute Name="width">95</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">1</Attribute>
						<Attribute Name="left">498</Attribute>
					</Attributes>
					<Objects>
						<Object ID="606b1b59-2ca8-4951-b572-7fd9d4ce4787" Name="macro_label" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">52</Attribute>
								<Attribute Name="value"><![CDATA[<p>Plug-in</p>]]></Attribute>
								<Attribute Name="height">19</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="aaee533d-91f3-47c1-9d85-bdc86d3a417d" Name="macro_img_butt" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text"><![CDATA[
								]]></Attribute>
								<Attribute Name="image">927e8618-b118-4cb0-a512-a22c9cfcae33</Attribute>
								<Attribute Name="height">47</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">64</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">5</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="80f58544-00d0-48ba-aca1-1889326cb693" Name="hpt_macro" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">9</Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">41</Attribute>
								<Attribute Name="htmlcode"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">33</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6784ec96-3899-4556-a7c7-cd94a090106d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="dd0b7ad5-c947-4703-bf79-0027341d0dce" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="398a8412-1479-4f2e-b678-7e5f6654327b" Name="mailboxeslist" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">50</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">208</Attribute>
						<Attribute Name="top">327</Attribute>
						<Attribute Name="height">250</Attribute>
						<Attribute Name="classname">mailbox-select popup-box</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor">FFFFFF</Attribute>
						<Attribute Name="left">8</Attribute>
					</Attributes>
					<Objects>
						<Object ID="fbb6c34b-9762-40ce-b652-826fc971865c" Name="list" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
							<Attributes>
								<Attribute Name="activeitem"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="layout">0</Attribute>
								<Attribute Name="droppable">0</Attribute>
								<Attribute Name="selectonclick">0</Attribute>
								<Attribute Name="height">250</Attribute>
								<Attribute Name="classname">mailbox-select-list</Attribute>
								<Attribute Name="width">208</Attribute>
								<Attribute Name="droppablerows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectedrows"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectablerows">[1]</Attribute>
								<Attribute Name="clickclass"><![CDATA[
								]]></Attribute>
								<Attribute Name="data"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="42b3bbee-a102-4475-b93e-9c0f824c7e86" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="db22820e-7a48-489a-ad40-ac82a5557662" Name="mailcomposercnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">153</Attribute>
						<Attribute Name="top">86</Attribute>
						<Attribute Name="height">30</Attribute>
						<Attribute Name="classname">mail-composer</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">12</Attribute>
					</Attributes>
					<Objects>
						<Object ID="7bd0f565-5066-487c-bda2-34e77220d7f0" Name="sens2" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">30</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">122</Attribute>
							</Attributes>
						</Object>
						<Object ID="661c3afb-2393-4ca6-aa82-aed32ab1febf" Name="sens1" Type="7b39c919-de7f-4b77-b048-aae8bcf8edf5">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">121</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
							</Attributes>
						</Object>
						<Object ID="c3f58891-58ee-468d-9a1e-d3d943c14dcd" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">1</Attribute>
								<Attribute Name="left">121</Attribute>
								<Attribute Name="color">c5c5c5</Attribute>
								<Attribute Name="height">30</Attribute>
							</Attributes>
						</Object>
						<Object ID="de77d59b-0769-4f76-856c-4f2726022c81" Name="icon" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="classname">mailcomposer-icon</Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">30</Attribute>
								<Attribute Name="htmlcode"><![CDATA[<img src=""></img>]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
							</Attributes>
						</Object>
						<Object ID="0d8f415c-4564-474d-920d-118df681eba7" Name="composer_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">8</Attribute>
								<Attribute Name="value">New mail</Attribute>
								<Attribute Name="classname">cut-out-text</Attribute>
								<Attribute Name="width">81</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">33</Attribute>
							</Attributes>
						</Object>
						<Object ID="2c990403-bd93-4744-ac8e-0e08fffd44c5" Name="arrow" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">8</Attribute>
								<Attribute Name="value">10acd88f-dafd-4a00-b5a4-58549c32e7aa</Attribute>
								<Attribute Name="height">15</Attribute>
								<Attribute Name="width">11</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">133</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="ed512d6b-64c3-4f4c-84dc-f47be24b4762" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="98f3a985-7e30-4e2a-b7c9-9fb6bd15feaa" Name="deletelabeldialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Delete dialog</Attribute>
						<Attribute Name="top">2374</Attribute>
						<Attribute Name="height">140</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="7a6b8fb3-ea1e-4ffd-937d-d302798b518e" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">101</Attribute>
								<Attribute Name="label">Delete</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">121</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">163</Attribute>
							</Attributes>
						</Object>
						<Object ID="e09e28de-1f4b-470d-a903-f4a63fa98649" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">101</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">121</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="f1673a56-1493-4601-8144-7cee19840b59" Name="message" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">26</Attribute>
								<Attribute Name="value">Are you sure want delete this label?</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">269</Attribute>
								<Attribute Name="fontsize">14</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="c42a09ec-c636-48e7-838b-a332e9d37d50" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="443569b5-a514-476c-a0bb-7be8564ab28e" Name="deletemailboxdialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Delete dialog</Attribute>
						<Attribute Name="top">1253</Attribute>
						<Attribute Name="height">140</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="85afae03-7110-4988-ab97-c81b17dd8600" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">101</Attribute>
								<Attribute Name="label">Delete</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">121</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">163</Attribute>
							</Attributes>
						</Object>
						<Object ID="5f797e65-3e1f-4ade-9060-5605404ea044" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">101</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">121</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="0b5d39a7-a1eb-4282-a3b6-1d70ec2153a1" Name="message" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">26</Attribute>
								<Attribute Name="value">Are you sure want delete this mailbox?</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">269</Attribute>
								<Attribute Name="fontsize">14</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="6864cd2c-19c9-4ed9-b3ba-a69eadf5f314" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="9782a1be-b1a4-48a8-879b-c29046b1d649" Name="labelsbtn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">lable-selected-btn topbar-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Labels</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">44</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">84</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">86</Attribute>
						<Attribute Name="left">346</Attribute>
					</Attributes>
				</Object>
				<Object ID="5cbc0d61-6de1-4a02-81fe-39a0f177ca54" Name="newarchive" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">New archive</Attribute>
						<Attribute Name="top">1403</Attribute>
						<Attribute Name="height">215</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">550</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">332</Attribute>
					</Attributes>
					<Objects>
						<Object ID="5b2ea4cf-d844-416a-8bb5-9e0080b98119" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">215</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">550</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="7287713f-9482-4e61-bd15-3bb5f9abdec4" Name="rights" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">119</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">269</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="c27fb97d-0b4f-4020-8d5a-64d889209303" Name="addanother" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">177</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">186</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">210</Attribute>
									</Attributes>
								</Object>
								<Object ID="a64e014e-6039-4321-ad5e-9daea9a7184d" Name="sources" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">123</Attribute>
										<Attribute Name="disabledvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">186</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">347</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="d19ce521-9abb-44df-88d2-97f859003b64" Name="sharedlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">91</Attribute>
										<Attribute Name="value">{}</Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="width">520</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="fb483226-e24e-44e1-8fc4-a0eb6e5d7be5" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">177</Attribute>
										<Attribute Name="label">Submit</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">121</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="left">412</Attribute>
									</Attributes>
								</Object>
								<Object ID="2d78bed7-5399-4d01-bf98-f49436789604" Name="orlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">124</Attribute>
										<Attribute Name="value">or</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">65</Attribute>
										<Attribute Name="align">center</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">282</Attribute>
									</Attributes>
								</Object>
								<Object ID="3478c6d5-6690-4d22-9d98-d872a48c724d" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">177</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">121</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="type">1</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="961c40d6-dd4a-4f8a-b48d-689ac1b79021" Name="archnamelabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">16</Attribute>
										<Attribute Name="value">Archive name</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">269</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="1d4ed666-d913-4617-a0a3-941748271ef5" Name="archname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">42</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">269</Attribute>
										<Attribute Name="focused">1</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="d5b4dcc6-c183-45db-80c4-4f1e34e35320" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="72f5091d-98d0-41de-a73a-2031d404891b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="d52a88a4-eec2-4b1d-8d07-f96d362ffea1" Name="labelspopup" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="classname">labels-popup popup-box</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">230</Attribute>
						<Attribute Name="designcolor">FFFFFF</Attribute>
						<Attribute Name="top">121</Attribute>
						<Attribute Name="height">298</Attribute>
						<Attribute Name="zindex">50</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor">FFFFFF</Attribute>
						<Attribute Name="left">273</Attribute>
					</Attributes>
					<Objects>
						<Object ID="73bb065f-9aa0-454d-ad75-39792c00056f" Name="labels" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">65</Attribute>
								<Attribute Name="height">130</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">219</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="9d3483cc-e82c-4d1d-906f-d5b0a44b078d" Name="list" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
									<Attributes>
										<Attribute Name="activeitem"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="layout">0</Attribute>
										<Attribute Name="droppable">0</Attribute>
										<Attribute Name="selectonclick">4</Attribute>
										<Attribute Name="height">130</Attribute>
										<Attribute Name="classname">labels-list</Attribute>
										<Attribute Name="width">210</Attribute>
										<Attribute Name="droppablerows"><![CDATA[["nodropable"]]]></Attribute>
										<Attribute Name="selectedrows"><![CDATA[["noselected"]]]></Attribute>
										<Attribute Name="selectablerows"><![CDATA[["noselectable"]]]></Attribute>
										<Attribute Name="clickclass">.clickblock</Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="dbafa4e5-d797-492e-bafa-9cfcf59e21d3" Name="message" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">53</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">210</Attribute>
										<Attribute Name="align">center</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="d1c630fc-05a4-41a9-a5ec-422b1209e03d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="b2adaa11-c2dd-4ec4-bbb0-260e10243f7d" Name="buttons" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">204</Attribute>
								<Attribute Name="height">94</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">230</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="b9d80433-e37f-4512-aec0-4b529f22f482" Name="createbtn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
										<Attribute Name="containerlink"><![CDATA[
										]]></Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text">Create new</Attribute>
										<Attribute Name="image"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">39</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">210</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="57aae573-1e6c-4ded-86cf-b6f760e34491" Name="hrline" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">230</Attribute>
										<Attribute Name="color">8C8C8C</Attribute>
										<Attribute Name="height">2</Attribute>
									</Attributes>
								</Object>
								<Object ID="fcd26da3-8275-48bf-b816-857732ce4391" Name="managebtn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
										<Attribute Name="containerlink"><![CDATA[
										]]></Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text">Manage</Attribute>
										<Attribute Name="image"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">39</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">210</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">54</Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="e0d38140-5a97-480a-b103-e38d5479cb18" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="6baaa8d8-4075-4706-9a1c-8b8ef7fc52d7" Name="search" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">56</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">230</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="516ef33f-e06f-406d-ba62-c991014770cc" Name="querylabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">8</Attribute>
										<Attribute Name="value">Assign a label</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">210</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="c15d602b-5b64-4358-91cd-afd1624eabde" Name="query" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">29</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">210</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="b2d3d1ae-c657-409b-8d08-47b444118b5c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="d8a18119-cb87-4606-a128-de865a1e8db9" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="64a136c7-868a-471e-9480-3bf5e4538ddb" Name="container2div" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">82</Attribute>
						<Attribute Name="height">39</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">2</Attribute>
						<Attribute Name="backgroundimage">5a60e33a-0270-45b3-b6d6-0b8127a42152</Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">536</Attribute>
					</Attributes>
					<Actions>
						<Action ID="61d20b7c-78f0-4109-9dd7-6baea35edb72" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="82de43d0-eab5-4dbb-9d68-a22a219c94de" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[/*

  Common classes

*/
.popup-box {
  background-color: #FFF;
  border: 1px solid rgb(187, 187, 187);
  -webkit-box-shadow: 10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  -moz-box-shadow:    10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  box-shadow:         10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  overflow-x: hidden !important;
}
.hidden-elem {
  display: none !important;
}

.checkbox-selected {
  background-image: url(/ef917842-c29d-4405-8fa2-503164ff1a3c.res);
}

.checkbox-halfselected {
  background-image: url(/bd6db48e-3dba-4588-a1b6-4d54db9ae0ed.res);
}

.checkbox-unselected {
  background-image: url(/97af72e7-0479-4672-8e73-4f080b6fa7f3.res);
}

/*

  Topbar classess

*/

/* Labels list */
.labels-list .label-item {
  background-repeat: no-repeat;
  background-position: left center;
  cursor: pointer;
  white-space: nowrap;
  margin: 0;
  padding: 4px 8px 4px 30px;
  background-position-x: 3px;
}
.labels-list li.list-item-last.hidden {
  display: none !important;
}
.labels-list .label-item:hover {
  background-color: #F3F3F3;
}
.labels-list .label-item .body .clickblock {
  background-repeat: no-repeat;
  height: 21px;
  left: 0px;
  position: absolute;
  right: auto;
  vertical-align: middle;
  width: 21px;
  display: inline-block;
}

/* Labels management list */
.labels-mgmt-list li {
  margin: 10px;
  padding: 5px;
  border-bottom: 1px solid rgb(237, 222, 222);
  padding-left: 25px;
}
.labels-mgmt-list li div .control-icon {
  display: block;
  float: right;
  margin-left: 5px;
}
.labels-mgmt-list li div .control-icon.hidden {
  display: none !important;
}
.labels-mgmt-list li .color {
  width: 20px;
  height: 20px;
  left: 10px;
  position: absolute;
  right: auto;
  display: inline-block;
}
/*

  Sidebar classess

*/
.sidebar {
  background-color: #F5F5F5;
}
.current-mailbox {
  border-color: #E2E2E2;
  border-style: solid;
  border-width: 1px 0px 1px 0px;
}
.cut-out-text {
  overflow: hidden !important;
  white-space: nowrap !important;
  text-overflow: ellipsis !important;
}
.current-mailbox-select {
  border: 1px solid rgb(187, 187, 187);
  cursor: pointer;
  background-color: #FFF;
}
.mailbox-select-list li{
  cursor: pointer;
  border-bottom: 1px solid rgb(231, 223, 223);
}
.mailbox-select-list li.selected {
  background: #fbdf75;
}
.mailbox-select-list .mailbox {
  padding: 4px;
}
.mailbox-select-list .mailbox .boxname {
  font-size: 16px;
}
.mailbox-select-list .mailbox .boxaddr {
  font-size: 12px;
}
.mailbox-select-list .mailbox .boxcolor{
  float: left;
  width: 10px;
  height: 35px;
  margin-right: 10px;
}
.mailbox-select-list .mailbox .boxinfo{
  float: left;
  width: 150px;
}
.mailbox-select-list .mailbox .boxnew{
  float: left;
  width: 150px;
  font-size: 16px;
}
.mailbox-select-list .mailbox .boxnewicon{
  float: left;
  background-image: url('/67549176-ab7e-423f-ab49-8315a0b86c9d.res');
  width: 16px;
  height: 16px;
  background-repeat: no-repeat;
  padding-right: 5px;
  margin: 2px 0px 0px 5px;
}
.archive-list {
}
.archive-list li{
  border-bottom: 2px solid transparent;
  cursor: pointer;
}
.archive-list li.selected {
  background-color: #FAFFFE !important;
  border-bottom: 2px solid rgb(232, 232, 232);
}
.archive-list .archive {
  padding: 6px 15px 6px 6px;
}
.archive-list .archive .archiveicon{
  float: left;
  height: 20px;
  width: 20px;
}
.archive-list .archive .archivename{
  float: left;
  font-size: 13px;
  text-shadow: 1px 1px 1px #fff;
  width: 67%;
}
.archive-list .archive .archivemsg{
  float: right;
  border-radius: 25px;
  background-color: #7CC1DA;
  padding: 2px 5px 2px 5px;
  max-width: 15%;
}
.archive-list li:hover {
  background-color: #FFE6E6;
  border-bottom: 2px solid rgb(255, 187, 187);
}
.archive-list li:hover .archive.with-controls .archivename {
  width: 59%;
}
.archive-list li:hover .archive.with-controls .control-icon {
  display: block;
}
.archive-list li:hover .archive.with-controls .archivemsg {
  display: none;
}
.archive-inbox {
  background-image: url('/b3bad439-ffee-4253-9939-a14ec36ef8bc.res');
  width: 12px;
  height: 14px;
  background-repeat: no-repeat;
}
.archive-outbox {
  background-image: url('/d12698fa-888b-4890-88a5-42863f2bafca.res');
  width: 12px;
  height: 14px;
  background-repeat: no-repeat;
}
.archive-new {
  float: left;
  background-image: url('/67549176-ab7e-423f-ab49-8315a0b86c9d.res');
  width: 16px;
  height: 16px;
  background-repeat: no-repeat;
}
.archive-draft {
  float: left;
  background-image: url('/bab96962-287a-4289-8959-5dba05400565.res');
  width: 16px;
  height: 16px;
  background-repeat: no-repeat;
}
.archive-trash {
  float: left;
  background-image: url('/39b62c94-a3bc-4932-a7dd-1857bf3ff872.res');
  width: 16px;
  height: 16px;
  background-repeat: no-repeat;
}
.control-icon {
  width: 16px !important;
  height: 16px ! important;
  background-repeat: no-repeat;
  padding-right: 5px;
  float: right;
  display: none;
  cursor: pointer;
}
.edit-icon {
  background-image: url('/54fea75b-527b-44e5-85d2-2b50dd4ff611.res');
}
.delete-icon {
  background-image: url('/39b62c94-a3bc-4932-a7dd-1857bf3ff872.res');
}
.unread-mailbox {
  cursor: pointer;
  margin: 2px;
}
.page-background {
  background: url("/67e469c0-4cbd-4f26-85ad-1aea8aee69ab.res");
}
.mailsearch {
  background-color: #ECECEC;
  border-bottom: 3px solid rgb(249, 249, 249);
}
.loading-cnt {
  border: 2px solid rgb(215, 215, 215);
}
div#o_d97a31ef_b2c6_43da_9d6f_9ae457dd99d1 >  button, div#o_a79c9fcd_ad56_4742_8dbd_d90414b83419 > button {
  width: 60px !important;
}
.popupsensitive {
  width: 100% !important;
  height: 100% !important;
}
.mailbox-options {
  overflow-x: hidden !important;
}
.mailbox-options li {
  border-bottom: 1px solid rgb(250, 250, 250);
  padding: 5px;
  margin: 2px;
}
.mailbox-options li:hover {
    background: rgba(205, 199, 199, 0.33);
}
.centered-line span.line {
  background: #E5E5E5;
  border-top: solid 1px rgb(229, 229, 229);
  position: absolute;
  height: 1px;
  display: block;
  top: 5px;
  width: 100%;
}
.centered-line span.text {
  background-color: #FFFFFF;
  z-index: 20;
  color: #C7C7C7;
  position: relative;
  text-align: center;
  padding: 0 34px;
}
.rights-list li {
  margin: 10px;
  padding: 6px;
  border-bottom: 1px solid rgb(237, 222, 222);

}
.rights-container {
  border-bottom: 1px solid black;
}
.rights-container div.rights .control-icon {
  display: block;
  float: right;
  margin-left: 5px;
}
span.autocomplete-result {
  font-weight: bold;
  text-decoration: underline;
}
div.subjects-custom-list {
  border: 1px solid rgb(208, 207, 207);
}
div.subjects-custom-list div {
  float: left;
  margin: 4px;
  background-color: rgb(242, 242, 242);
  padding: 6px;
  border-radius: 3px;
}
div.subjects-custom-list div span.remove-icon {
  background-image: url(/95ceacbe-9f50-4088-9a67-4f1dc0bd7d38.res);
  width: 13px;
  height: 13px;
  float: right;
  margin: 1px;
  background-position: -99px -130px;
  cursor: pointer;
}
div.subjects-custom-list div span.subj-name {
  padding-right: 5px;
}


/* DEFUALT MAIL LIST RENDER STYLE */

.maillist-item {
  margin: 2px 0 8px 9px;
  background-color: white;
  border: 1px solid rgb(187, 187, 187);
  -webkit-box-shadow: 10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  -moz-box-shadow:    10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  box-shadow:         10px 10px 16px 1px rgba(50, 50, 50, 0.75);
}
.maillist-item:hover .select-bar {
  display: block !important;
  background-color: #F7B8B8 !important;
}
.maillist-item.selected .select-bar, .maillist-item.selected:hover .select-bar {
  display: block !important;
  background-color: #DB5C5C !important;
}
.maillist-item .time {
  overflow: visible !important;
}
.maillist-item.dov-item-active {
}

div.dov-drag-helper {
  background: #555 url('/cbe09105-1e0a-4b3a-bd4b-fefe1ac5e21c.res') no-repeat !important;
  background-size: 15px 15px !important;
  background-position-x: 20px !important;
  background-position-y: 1px !important;
  padding-left: 40px;
  font-size: 14px;
  width: 80px !important;
  border-radius: 5px;
}
.shadowbox {
 -webkit-box-shadow: 6px 6px 4px 1px rgba(50, 50, 50, 0.75);
  -moz-box-shadow:    6px 6px 4px 1px rgba(50, 50, 50, 0.75);
  box-shadow:         6px 6px 4px 1px rgba(50, 50, 50, 0.75);
}
.show-more-recepients {
  text-decoration: underline;
  cursor: pointer;
}
.mail-data-wrapper {
  visibility: hidden;
}
.mail-from-value > div {
  display: inline-block;
  border: 1px solid rgb(195, 195, 195);
  background-color: rgb(250, 250, 250);
  padding: 0px 2px 2px 2px;
  border-spacing: 2px;
  width: 7px;
  *zoom: 1;
  *display: inline;
}
.mail-from-value > div > span {
  cursor: pointer;
  background: url('/95ceacbe-9f50-4088-9a67-4f1dc0bd7d38.res') no-repeat -69px -22px;
  height: 4px;
  width: 7px;
  display: inline-block;
}
div.mailinfo-popup {
  -webkit-box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  -webkit-box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  border: 1px solid #ccc;
  border: 1px solid rgba(0,0,0,0.2);
  padding: 5px;
  background-color: #fff;
  cursor: auto;
  max-height: 360px;
  overflow: auto;
  position: absolute;
  z-index: 10;

}
div.mailinfo-popup > div {
  outline: none;
  padding: 8px 16px 12px 16px;
}

/* Topbar buttons */
.topbar-button {
  padding-top: 16px;
  text-align: center;
  text-decoration: none;
  outline: none !important;
}
.topbar-button span {
  font: 10px Arial !important;
  color: #000 !important;
}
.delete-selected-btn {
  background: url("/3522e59d-ee17-42a7-8ac6-422fabc7644d.png") no-repeat top center;
}
.reply-btn {
  background: url("/dda2055a-a74a-4f6f-b944-0791bd3b8efb.res") no-repeat top center;
}
.replyall-btn {
  background: url("/281eb169-1e7f-4f8f-9e8d-63f46a441fb9.res") no-repeat top center;
}
.forward-btn {
  background: url("/481f8fe9-bef1-491a-96da-36340b0b2346.res") no-repeat top center;
}
.refresh-btn {
  background: url("/42f8971c-eaa8-466f-8920-ef66fc66be43.res") no-repeat top center;
}
.lable-selected-btn {
  background: url("/e6c2e4b8-9823-4a41-ae6a-b6d82efb0896.res") no-repeat top center;
}
/* Top plugins panel
--------------------------------------------------- */

.macro-popup .table {
    height:0px; border:0px !important;
    border-collapse:collapse;
}
.macro-popup .table td {
    border:0px;
}
.macro-popup td.cell-1 {
    width:16px;
}
.macro-cont {
  /*background: url("/3503a723-1a1d-49c2-90bf-edd315f866d8.png");*/
  background-color: #F5F5F5;
  background-repeat:repeat-x;
  background-position:bottom !important;

}
.macro-popup .table {height:0px !important; border:0px !important; border-collapse:collapse !important;}
.macro-popup .table td {border:0px !important; border-bottom:1px dotted #cecece !important; padding-top:12px; padding-bottom:12px; font-size:14px; color:#0d89f1; cursor:pointer;}
.macro-popup .cell-1 img {width:16px;}
.macro-popup .table {height:0px; border:0px !important; border-collapse:collapse;}
.macro-popup .table td {border:0px;}
.top-macros-buttons {
  overflow:hidden !important;
  margin-top:5px !important;
  cursor:pointer;
  text-align:center;
}
.top-macros-buttons img {
  height:32px !important;
}
.macr-label-but{
  width:90px!important;
  overflow:hidden !important;
  height:14px;
  display:block;
}

.top-menu-item div {
  overflow:hidden !important;
}
.img-grid {
  width:32px;
  height:32px;
  overflow:hidden !important;
  cursor:pointer;
}
.img-grid img {
  width:13px;
  height:13px;
  display:block;
  float:left;
  padding:1px;
  position:relative;
}
.top-menu-item p {
  padding:0px;
  margin:0px;
 }
.lt-ie10 .ov-item {position:relative; display:block; float:left !important;}
.lt-ie10 .img-grid img {float:left !important;}
/*--------------------------------------------------*/
.mail-composer {
 background: #F1F1F1 !important;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
.mailcomposer-cnt {
  background-color: #FFF;
  border: 1px solid rgb(187, 187, 187);
  -webkit-box-shadow: 10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  -moz-box-shadow:    10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  box-shadow:         10px 10px 16px 1px rgba(50, 50, 50, 0.75);
  overflow-x: hidden !important;
}
.mailcomposer-list li{
  cursor: pointer;
  border-bottom: 1px solid rgb(231, 223, 223);
}
.mailcomposer-list li.selected {
  background: #fbdf75;
}
.mailcomposer-list .mailcomposer {
  padding: 4px;
  height: 20px;
}
.mailcomposer-list li{
  cursor: pointer;
  border-bottom: 1px solid rgb(231, 223, 223);
}
.mailcomposer-list li.selected {
  background: #fbdf75;
}
.mailcomposer-list .mailcomposer .image {
  position: relative;
  width: 30px;
  height: 20px;
  float: left;
}
.mailcomposer-list .mailcomposer .image img {
  position: absolute;
  margin: auto;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  max-width: 20px;
  max-height: 20px;
}
.mailcomposer-list .mailcomposer .title {
  font-size: 13px;
  padding-top: 3px;
}
div.mailcomposer-icon img {
  position: absolute;
  margin: auto;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  //height: 20px;
  //width: 20px;
  max-width: 20px;
  max-height: 20px;
}]]></Attribute>
						<Attribute Name="left">715</Attribute>
					</Attributes>
				</Object>
				<Object ID="2104e80a-00d7-48c8-add8-ac85c4ddf231" Name="xmldialog" Type="887e2a68-4cb0-e28a-6d7b-4dd41c35ca6a">
					<Attributes>
						<Attribute Name="top">624</Attribute>
						<Attribute Name="left">1068</Attribute>
						<Attribute Name="xmldata"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="ff5b35c4-7569-46b1-9462-331b64b514eb" Name="rightsdialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Mailbox rights</Attribute>
						<Attribute Name="top">837</Attribute>
						<Attribute Name="height">469</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">560</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">484</Attribute>
					</Attributes>
					<Objects>
						<Object ID="d8662000-da77-4150-9475-f9d6edcc9b72" Name="adduserform" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">240</Attribute>
								<Attribute Name="height">178</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">560</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="871b9b42-48f7-4004-aad2-22e96099ba48" Name="clearbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">139</Attribute>
										<Attribute Name="label">Clear</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">231</Attribute>
									</Attributes>
								</Object>
								<Object ID="2e49410a-e832-4a36-8926-38529beeca22" Name="subjectslabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">9</Attribute>
										<Attribute Name="value">Search user or group:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">265</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="7c99b786-f916-407f-bddd-ac24a1104bbe" Name="rights" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">90</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">193</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">353</Attribute>
									</Attributes>
								</Object>
								<Object ID="0ae97b20-e424-4658-92de-3e699b65b5d6" Name="subjects" Type="7085bd26-e653-490b-908f-61208c260a86">
									<Attributes>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="top">65</Attribute>
										<Attribute Name="classname">subjects-custom-list</Attribute>
										<Attribute Name="width">308</Attribute>
										<Attribute Name="htmlcode"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="949e8b94-e12b-46b1-89c6-37064ea67bac" Name="rightslabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">71</Attribute>
										<Attribute Name="value">Rights:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">193</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">353</Attribute>
									</Attributes>
								</Object>
								<Object ID="5720c7f6-043f-4f96-8062-6b53582acf38" Name="inherited" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
									<Attributes>
										<Attribute Name="width">193</Attribute>
										<Attribute Name="top">9</Attribute>
										<Attribute Name="left">353</Attribute>
									</Attributes>
								</Object>
								<Object ID="69a81295-9da1-4595-8bff-e20d503f006d" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">139</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
								<Object ID="d86227ae-84f0-43ca-af95-34c4910b22d5" Name="query" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">33</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">308</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder">Enter search query</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="175de41a-ec4d-4036-820e-131588fb065c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="1d06583a-0878-40f8-ab71-931f507d0a73" Name="cnt" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">240</Attribute>
								<Attribute Name="classname">rights-container</Attribute>
								<Attribute Name="width">560</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="207ce92a-5b42-48a0-88a3-d0d56b72b3a0" Name="rights" Type="31b5a7e8-5f91-44f1-be35-645856fa59ad">
									<Attributes>
										<Attribute Name="activeitem"><![CDATA[["none"]]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="layout">0</Attribute>
										<Attribute Name="droppable">0</Attribute>
										<Attribute Name="selectonclick">4</Attribute>
										<Attribute Name="height">240</Attribute>
										<Attribute Name="classname">rights-list</Attribute>
										<Attribute Name="width">560</Attribute>
										<Attribute Name="droppablerows"><![CDATA[["none"]]]></Attribute>
										<Attribute Name="selectedrows"><![CDATA[["none"]]]></Attribute>
										<Attribute Name="selectablerows"><![CDATA[["none"]]]></Attribute>
										<Attribute Name="clickclass">.control-icon</Attribute>
										<Attribute Name="data"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="6f1cab66-6511-430c-8db9-b3175d7981ca" Name="message" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">108</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">560</Attribute>
										<Attribute Name="align">center</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="31560593-564f-4b7e-9dce-f804e707a13b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="ba79620a-d55a-4f29-a293-ef6f65f47f6b" Name="donebtnt" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">433</Attribute>
								<Attribute Name="label">Close</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">123</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="left">424</Attribute>
							</Attributes>
						</Object>
						<Object ID="bf307a0c-5e0d-448e-a728-25332ce14f72" Name="cancelbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">433</Attribute>
								<Attribute Name="label">Close</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">123</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="caf04e59-edbc-4e80-8be4-004a2c34c079" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="6e21e579-d24d-4101-9220-11c9d2dc82dd" Name="maildata" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">145</Attribute>
						<Attribute Name="height">453</Attribute>
						<Attribute Name="classname">mail-data-wrapper</Attribute>
						<Attribute Name="width">662</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">555</Attribute>
					</Attributes>
					<Objects>
						<Object ID="796940f6-9f33-45b5-8366-678a2e54d5de" Name="mailcontent" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">114</Attribute>
								<Attribute Name="height">217</Attribute>
								<Attribute Name="classname">shadowbox</Attribute>
								<Attribute Name="width">660</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor">FFFFFF</Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="7a9a2053-6744-4e78-a926-f27002d99a57" Name="htmlcontent" Type="7085bd26-e653-490b-908f-61208c260a86">
									<Attributes>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">324</Attribute>
										<Attribute Name="htmlcode"><![CDATA[
										]]></Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="left">10</Attribute>
									</Attributes>
								</Object>
								<Object ID="6728a84d-1cda-4591-8e84-1a0d2bf95393" Name="eacviewer" Type="9e338259-29be-41d6-ac84-b44e2b294ffe">
									<Attributes>
										<Attribute Name="vdomxml"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="height">178</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="debugmode">1</Attribute>
										<Attribute Name="overflow">3</Attribute>
										<Attribute Name="rendererrormsg"><![CDATA[
										]]></Attribute>
										<Attribute Name="vdomactions"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">10</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="a72478a0-756d-4d1c-8f97-86bb74ec102b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="0462f07f-51b6-41b3-aecb-98a834700389" Name="mailattach" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">347</Attribute>
								<Attribute Name="classname">shadowbox</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor">FFFFFF</Attribute>
								<Attribute Name="width">660</Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Actions>
								<Action ID="40ca4400-8bf2-4ea1-b52a-6bccf50d2e19" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="3f65f62e-d003-45b2-9b06-e02ddfc97ac2" Name="mailinfopopup" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">200</Attribute>
								<Attribute Name="top">40</Attribute>
								<Attribute Name="classname">mailinfo-popup-wrapper</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="htmlcode"><![CDATA[<div class="mailinfo-popup">
  <div>
    <table>
      <tbody>{}</tbody>
    </table>
  </div>
</div>]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="left">100</Attribute>
							</Attributes>
						</Object>
						<Object ID="b0fa4257-d104-40fb-8375-e70886445f61" Name="mailheader" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname">shadowbox</Attribute>
								<Attribute Name="width">660</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor">FFFFFF</Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="102bf9d4-4270-46d8-8f46-4b8a20833599" Name="fromlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="align">right</Attribute>
										<Attribute Name="value">To:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">45</Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="84092009-2a8f-4c31-a720-3c82b50cbc68" Name="recdate" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="align">right</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname">mail-rec-date</Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">156</Attribute>
										<Attribute Name="top">14</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">465</Attribute>
									</Attributes>
								</Object>
								<Object ID="92a6e2c1-77f2-40c7-8c75-d5f41ee14c50" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">415</Attribute>
										<Attribute Name="color">F2F2F2</Attribute>
										<Attribute Name="height">43</Attribute>
									</Attributes>
								</Object>
								<Object ID="d767ab3b-f551-41b8-b0d9-52141a44c2c8" Name="tolabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="align">right</Attribute>
										<Attribute Name="value">From:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">45</Attribute>
										<Attribute Name="top">5</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="2e2593d8-3a9d-44c2-8c91-082ef16a4bba" Name="mailfrom" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">5</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="width">378</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">57</Attribute>
									</Attributes>
								</Object>
								<Object ID="69ab3808-048f-4221-b4ba-35346fc909b5" Name="mailto" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname">cut-out-text mail-from-value</Attribute>
										<Attribute Name="width">378</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">57</Attribute>
									</Attributes>
								</Object>
								<Object ID="cbc54e11-6f43-4217-bfdb-150f2fd25449" Name="mailsubject" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="color">444444</Attribute>
										<Attribute Name="top">48</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname">cut-out-text</Attribute>
										<Attribute Name="width">485</Attribute>
										<Attribute Name="fontsize">20</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">23</Attribute>
									</Attributes>
								</Object>
								<Object ID="d339e89e-4620-4338-98ae-d0553eddfdad" Name="mailoptions" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
										<Attribute Name="containerlink"><![CDATA[
										]]></Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text">&amp;#9662;</Attribute>
										<Attribute Name="image"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">20</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="rollover"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">7</Attribute>
										<Attribute Name="left">635</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="7e68359b-1ec0-4a86-a212-c6c2450e5480" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="adba206c-96d4-4d89-88ae-08c19d7c91cf" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="87902cc8-6024-43b8-8e5e-c48045341c4e" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="color">8C8C8C</Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">453</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">2</Attribute>
						<Attribute Name="left">224</Attribute>
					</Attributes>
				</Object>
				<Object ID="cf389d03-acbe-4803-9431-c6cf028e8d12" Name="page_js" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[function proMailResize(){

    var $window = jQuery(window);
    var height = $window.height();
    var width  = $window.width();

    var height = height > 600 ? height : 600;
    var width = width > 1000 ? width : 1400;

    var ids = {
        "body > div#container": {width: true, height: true},
        "div.popupsensitive": {width: true, height: true},

        // bar 1
        "#o_0a5aa1bc_f45b_4c6c_9261_b6af6de67a8e": {height: true},

        // background image container
        "#o_16f04424_e6fd_4af4_9cc6_fa3ad4f69c1a": {width: true, height: true},

        // sidebar container
        "#o_a8bf4de9_81a2_4374_a58b_0bcc39b0a3fb": {width: false, height: true},

        // bar 2
        "#o_87902cc8_6024_43b8_8e5e_c48045341c4e": {height: true},

        // mail list dynamic object view
        "#o_1e0ca967_bc36_457f_ae78_5748c2b16f71": {height: true},

        // mail data container (parent mail container)
        "#o_6e21e579_d24d_4101_9220_11c9d2dc82dd": {width: true, height: true, margin: [10, 10], maxWidth: 1800},

        // mail header container
        "#o_b0fa4257_d104_40fb_8375_e70886445f61": {width: true, margin: [10, 10], maxWidth: 1800},

        // mail data container
        "#o_796940f6_9f33_45b5_8366_678a2e54d5de": {width: true, height: true, margin: [10, 10], maxWidth: 1800},

        // mail header bar
        "#o_92a6e2c1_77f2_40c7_8c75_d5f41ee14c50": {width: true, margin: [0, 10], maxWidth: 1800},

        // mail recieve date text
        "#o_84092009_2a8f_4c31_a720_3c82b50cbc68": {
            positionFunc: function($me, wWidth, wHeight, p){
                var initOffset = $me.offset();
                // if (wWidth > p.maxWidth){
                //     wWidth = p.maxWidth;
                // }
                initOffset.left = wWidth - 60 - $me.width();
                $me.offset(initOffset);
            },
            maxWidth: 1800
        },

        // mail options buttton
        "#o_d339e89e_4620_4338_98ae_d0553eddfdad": {
            positionFunc: function($me, wWidth, wHeight, p){
                var initOffset = $me.offset();
                // if (wWidth > p.maxWidth){
                //     wWidth = p.maxWidth;
                // }
                initOffset.left = wWidth - 40;
                $me.offset(initOffset);
            },
            maxWidth: 1800
        },

        // mail to text
        "#o_2e2593d8_3a9d_44c2_8c91_082ef16a4bba": {width: true, margin: [0, 240], maxWidth: 1800},

        // mail from text
        "#o_69ab3808_048f_4221_b4ba_35346fc909b5": {width: true, margin: [0, 240], maxWidth: 1800},

        // mail subject text
        "#o_cbc54e11_6f43_4217_bfdb_150f2fd25449": {width: true, margin: [0, 240], maxWidth: 1800},

        // mail content html
        "#o_7a9a2053_6744_4e78_a926_f27002d99a57": {width: true, margin: [0, 40], maxWidth: 1800},

        // reply container
        "#o_f0373e47_1b66_4cc7_b28e_f7d96eb26493": {
            positionFunc: function($me, wWidth, wHeight, p){
                var initOffset = $me.offset();
                // if (wWidth > p.maxWidth){
                //     wWidth = p.maxWidth;
                // }
                initOffset.left = wWidth - 10 - $me.width();
                $me.offset(initOffset);
            },
            maxWidth: 1800
        },


    };

    for (var id in ids){
        var $obj = jQuery(id);
        var p = ids[id];
        var offset = $obj.offset();

        if (p.height){
            var minus = p.margin ? p.margin[0] : 0;
            $obj.height(height - offset.top - minus)
        }

        if (p.width){
            var cwidth = width;
            // if (p.maxWidth && p.maxWidth < width)
            //     cwidth = p.maxWidth;

            var minus = p.margin ? p.margin[1] : 0;
            $obj.width(cwidth - offset.left - minus);
        }

        if (p.positionFunc){
            p.positionFunc($obj, width, height, p);
        }
    }

    e2vdomSV["maillist.height"] = jQuery("#o_1e0ca967_bc36_457f_ae78_5748c2b16f71").height();
}

function showMailDataWrapper() {
  jQuery("#o_6e21e579_d24d_4101_9220_11c9d2dc82dd").css('visibility', 'visible');
}

function getFormatedTime(date) {
  var h = date.getHours();
  var h = (h < 10 ? '0': '') + h;
  var m = date.getMinutes();
  var m = (m < 10 ? '0': '') + m;
  return h + ":" + m;
}

function updateMaillistTimestamps() {

  var vdomDOV = jQuery("div#o_1e0ca967_bc36_457f_ae78_5748c2b16f71");
  var base_selector = ">div.dov-content>div.maillist-item>.time.timestamp";

  var todaysDate = new Date();
  todaysDate.setHours(0,0,0);
  var todaysTimestamp = todaysDate.getTime();

  var oneWeekAgoDate = new Date(todaysDate);
  oneWeekAgoDate.setDate(todaysDate.getDate() - 7);
  var oneWeekAgoTimestamp = oneWeekAgoDate.getTime();

  jQuery(base_selector, vdomDOV).each(function(){
    var mailTimestamp = parseFloat(this.innerHTML) * 1000;
    var mailDate = new Date(mailTimestamp);

    if (mailTimestamp >= todaysTimestamp) {
      jQuery(this).text(getFormatedTime(mailDate)).removeClass("timestamp");
    } else if (mailTimestamp >= oneWeekAgoTimestamp) {
      jQuery(this).text(mailDate.toLocaleString(window.navigator.language, {weekday: 'short'}) + " " + getFormatedTime(mailDate)).removeClass("timestamp");
    } else {
      jQuery(this).text(mailDate.toLocaleDateString()).removeClass("timestamp");
    }
  });
}

function updateMailContentData(){
    var $text = jQuery(".mail-rec-date");
    var date = new Date(parseFloat($text.text()) * 1000);
    $text.text(date.toLocaleTimeString() + ", " + date.toLocaleDateString());

    jQuery("div#expandmailinfo").click(function(){
      jQuery("div.mailinfo-popup-wrapper").toggle();
      jQuery('div.popupsensitive').css('zIndex', '49').toggle();
      e2vdomSV["active.popup.element"] = "mailinfo-popup-wrapper";
    });
}

jQuery(document).ready(function(){

  // resize logic
  jQuery(window).resize(proMailResize);
  proMailResize();

  // popup menus magic
  jQuery("div.popupsensitive").click(function(){
    jQuery(this).hide();
    if (e2vdomSV['active.popup.element']){
      jQuery("." + e2vdomSV['active.popup.element']).hide();
      e2vdomSV['active.popup.element'] = undefined;
    }
  });


  // autocomplete magic
  jQuery("#o_d86227ae_84f0_43ca_af95_34c4910b22d5").autocomplete({
    appendTo: "#o_d8662000_da77_4150_9475_f9d6edcc9b72",
    source: "/proadminlivesearch?subjects=1",

    select: function(ev, ui){

      var subj_list = jQuery("div#o_0ae97b20_e424_4658_92de_3e699b65b5d6");

      // check is item in list or not
      if (!jQuery(">div>input[name=\"subj_" + ui.item.guid + "\"]", subj_list).length){
        var template = jQuery("<div><span class=\"subj-name\"></span><span class=\"remove-icon\"></span><input type=\"hidden\">");
        jQuery("span.subj-name", template).text(ui.item.value);
        jQuery("input", template).attr("name", "subj_" + ui.item.guid);
        jQuery("input", template).attr("value", ui.item.guid);
        subj_list.append(template);
      }
      jQuery(this).val("");
      return false;
    },

    change: function(ev, ui){
      if (this.selectedItem)
        jQuery(this).val("");
    }
  });

  jQuery(".subjects-custom-list div span.remove-icon").live('click', function(){
    jQuery(this).parent().remove();
  });


  // Sidebar update logic

  var sidebarUpdateInterval = 10000;
  window.sidebarTimers = {
    "sidebar.timers.unread": 0,
    "sidebar.timers.mailbox": 0,
    "sidebar.timers.mailboxes": 0,
    "sidebar.timers.archives": 0,
    "sidebar.timers.maillist": 0
  };

  function checkSidebarTimestamp(){
     var currentTimestamp = new Date().getTime();
     var requestedUpdate = new Array();

     for (key in window.sidebarTimers){
        var lastUpdate = currentTimestamp - window.sidebarTimers[key];
        if (lastUpdate >= sidebarUpdateInterval){
           requestedUpdate.push(key);
        }
     }
     if (requestedUpdate.length > 0) {
        execEventBinded("6cd3cf92_dc13_4414_9583_a0c7220233db", "timechange", {items: requestedUpdate});
     }
  }
  setInterval(checkSidebarTimestamp, sidebarUpdateInterval + 5000);

  window.updateSidebarTimestamp = function(key) {
     window.sidebarTimers[key] = new Date().getTime();
  };

});

// jQuery('div.mailbox-select').toggle(),jQuery('div.popupsensitive').css('zIndex', '49').toggle()


/////////////////////////////////////
//////////////// NEW ///////////////
///////////////////////////////////

function isElemDisplayed(el){
  return el.style.display != 'none';
}

function getChar(event) {
  if (event.which == null) {
    if (event.keyCode < 32) return null;
    return String.fromCharCode(event.keyCode)
  }
  if (event.which != 0 && event.charCode != 0) {
    if (event.which < 32) return null;
    return String.fromCharCode(event.which);
  }
  return null;
}


(function( ProMail, $, undefined ) {

  ProMail.Sidebar = {

    // mailboxes manipulation
    Mailboxes: {

      // list of available mailboxes
      Available: {

        toggle: function(){

          if (isElemDisplayed($('div.popupsensitive')[0]) || isElemDisplayed($('div.mailbox-select')[0])){
            $('div.mailbox-select').css('zIndex', 3).hide();
            $('div.popupsensitive').css('zIndex', 2).hide();
          } else {
            $('div.mailbox-select').css('zIndex', 56).show();
            $('div.popupsensitive').css('zIndex', 55).show();
          }
          e2vdomSV['popup-toggle'] = ProMail.Sidebar.Mailboxes.Available.toggle;

        }
      },

      Options: {

        toggle: function(){

          if (isElemDisplayed($('div.popupsensitive')[0]) || isElemDisplayed($('div.mailbox-popup')[0])){
            $('div.mailbox-popup').css('zIndex', 3).hide();
            $('div.popupsensitive').css('zIndex', 2).hide();
          } else {
            $('div.mailbox-popup').css('zIndex', 56).show();
            $('div.popupsensitive').css('zIndex', 55).show();
          }
          e2vdomSV['popup-toggle'] = ProMail.Sidebar.Mailboxes.Options.toggle;

        }

      }
    }
  };

  ProMail.Topbar = {

    // mailboxes manipulation
    Labels: {

      toggle: function(){

          if (isElemDisplayed($('div.popupsensitive')[0]) || isElemDisplayed($('div.labels-popup')[0])){
            $('div.labels-popup').css('zIndex', 3).hide();
            $('div.popupsensitive').css('zIndex', 2).hide();
          } else {
            $('div.labels-popup').css('zIndex', 56).show();
            $('div.popupsensitive').css('zIndex', 55).show();
          }
          e2vdomSV['popup-toggle'] = ProMail.Topbar.Labels.toggle;
      },

      liveSearch: function(query){

        query = $.trim(query);
        if (!query){
          ProMail.Topbar.Labels.resetAll();
          return;
        }

        var fullMatch = false;

        $('#o_9d3483cc_e82c_4d1d_906f_d5b0a44b078d li').each(function(){

          var $this = $(this);
          if ($this.attr('itemid') == 'new'){
            return;
          }

          var parent = $(this).find('.body');
          var name = parent.find('.name');
          var text = name.text();

          var pos = text.search(new RegExp(query, 'i'));
          if (pos >= 0){

            if (pos == 0 && query.length == text.length){
              fullMatch = true;
            }

            var clone = parent.find('.replace');
            if (!clone.length){
              clone = name.clone().removeClass('name').addClass('replace').show();
              parent.append(clone);
            }

            query = text.substring(pos, pos + query.length);
            clone.html(text.replace(query, "<b>" + query + "</b>"));
            name.hide();
            $this.show();

          } else {
            $this.hide();
          }
        });

        if (fullMatch){
          $('#o_9d3483cc_e82c_4d1d_906f_d5b0a44b078d li[itemid=new]').addClass('hidden');

        } else {
          var newItem = $('#o_9d3483cc_e82c_4d1d_906f_d5b0a44b078d li[itemid=new]');
          newItem.find(".name").html("<b>" + query + "</b>" + " (" + e2vdomSV["localization"]["topbar.labels.new"] + ")");
          newItem.removeClass('hidden');
        }
      },

      resetAll: function(){
        $("input#o_c15d602b_5b64_4358_91cd_afd1624eabde").val('');
        $('#o_9d3483cc_e82c_4d1d_906f_d5b0a44b078d li[itemid=new]').addClass('hidden');
        $('#o_9d3483cc_e82c_4d1d_906f_d5b0a44b078d li').each(function(){
          $this = $(this);
          $this.find('.replace').remove();
          $this.find('.name').show();
          $this.show();
        });
      },

      hasHalfState: function(itemid){
        return true;
      },

      toggleLableState: function(itemid){
        
        $item = $('#o_9d3483cc_e82c_4d1d_906f_d5b0a44b078d li[itemid=' + itemid + '] .label-item');
        if (!$item.length){
          return;
        }

        if ($item.hasClass('checkbox-selected')){
          $item.removeClass('checkbox-selected').addClass('checkbox-unselected');

        } else if ($item.hasClass('checkbox-halfselected')){
          $item.removeClass('checkbox-halfselected').addClass('checkbox-selected');

        } else if ($item.hasClass('checkbox-unselected')){
          $item.removeClass('checkbox-unselected');
          if (ProMail.Topbar.Labels.hasHalfState(itemid)) {
            $item.addClass('checkbox-halfselected');
          } else {
            $item.addClass('checkbox-selected');
          } 
        }

      }

    }
  };

  ProMail.Forms = {

    // mailbox form
    Mailbox: {

        boxTypeDependentObjects_disabled: [
          "#o_68406b8b_b199_4a7d_b024_54d9fdf8d650", // login input
          "#o_d63061aa_9afe_4695_89f7_23c0035ce6d0", // password input
          "#o_49ba011a_0523_4d80_b44e_a42868155d2e", // servers drop down list
        ].join(","),

        boxTypeDependentObjects_hide: [
          "#o_c492f6ce_122d_43c9_83f8_2eb4c8062cfb",
        ].join(","),

        toVirtual: function(){
          $(ProMail.Forms.Mailbox.boxTypeDependentObjects_disabled).each(function(){
            this.disabled = true;
          });
          $(ProMail.Forms.Mailbox.boxTypeDependentObjects_hide).hide();
        },

        toReal: function(){
          $(ProMail.Forms.Mailbox.boxTypeDependentObjects_disabled).each(function(){
            this.disabled = false;
          });
          $(ProMail.Forms.Mailbox.boxTypeDependentObjects_hide).show();
        }
    }
  }


}( window.ProMail = window.ProMail || {}, jQuery ));


jQuery(document).ready(function(){
  
  // hide 'new' item in labels list
  ProMail.Topbar.Labels.resetAll();

  // labels search 'query' input
  jQuery("input#o_c15d602b_5b64_4358_91cd_afd1624eabde").keydown(function(evt){
    var input = $(this);
    setTimeout(function(){
      ProMail.Topbar.Labels.liveSearch(input.val());
    }, 200);
  });

});]]></Attribute>
						<Attribute Name="left">765</Attribute>
					</Attributes>
				</Object>
				<Object ID="6cd3cf92-dc13-4414-9583-a0c7220233db" Name="updatetimer" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="top">34</Attribute>
						<Attribute Name="interval">5000</Attribute>
						<Attribute Name="left">1108</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="435b9ce9-637e-4dbb-89d5-87759ad7f23f" Name="actions_async_tasks" Top="17" Left="1598" State="False">
<![CDATA[
"""
"""
from ProMailHomePage import ProMailHomePage

page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.checktask": self.checktaskdialog,
    "dialog.checktask.timer": self.checktasktimer,
    "dialog.checktask.close": self.checktaskdialog.closebtn,
    "dialog.checktask.output": self.checktaskdialog.output.logs,
}

page.run("area.async_task_dialog.actions")

				]]>
				</Action>
				<Action ID="51cd1d6e-cf46-4aa2-ad8e-fc8120dde5f6" Name="actions_rights" Top="805" Left="1066" State="False">
<![CDATA[
"""
"""
from ProMailHomePage import ProMailHomePage

page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.archiveinfo.shared": self.newarchive.form.sharedlabel,
    "dialog.labelinfo.shared": self.labelinfo.form.sharedlabel,
    "dialog.mailboxinfo.shared": self.newmailbox.form.shared,

    "dialog.aclrights": self.rightsdialog,
    "dialog.aclrights.cancel": self.rightsdialog.cancelbtn,
    "dialog.aclrights.continue": self.rightsdialog.donebtnt,
    "dialog.aclrights.inherited": self.rightsdialog.adduserform.inherited,
    "dialog.aclrights.rights.list": self.rightsdialog.cnt.rights,
    "dialog.aclrights.rights.message": self.rightsdialog.cnt.message,
    "dialog.aclrights.adduser.form": self.rightsdialog.adduserform,
    "dialog.aclrights.adduser.query": self.rightsdialog.adduserform.query,
    "dialog.aclrights.adduser.subjects": self.rightsdialog.adduserform.subjects,
    "dialog.aclrights.adduser.rights": self.rightsdialog.adduserform.rights,
}

page.run("area.rights.actions")

				]]>
				</Action>
				<Action ID="da25a7ed-d749-4809-8a51-c47d5ff3eb51" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
"""
"""
from ProMailHomePage import ProMailHomePage


page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.archiveinfo": self.newarchive,
    "dialog.archiveinfo.archname.label": self.newarchive.form.archnamelabel,
    "dialog.archiveinfo.orlabel": self.newarchive.form.orlabel,
    "dialog.archiveinfo.rights": self.newarchive.form.rights,
    "dialog.archiveinfo.cancel": self.newarchive.form.cancel,
    "dialog.archiveinfo.submit": self.newarchive.form.submit,
    "dialog.archiveinfo.continue": self.newarchive.form.addanother,

    "dialog.archivedelete": self.deletearchivedialog,
    "dialog.archivedelete.checkbox.delarchive": self.deletearchivedialog.form.delarchive,
    "dialog.archivedelete.checkbox.delmails": self.deletearchivedialog.form.delmails,
    "dialog.archivedelete.cancel": self.deletearchivedialog.form.cancel,
    "dialog.archivedelete.submit": self.deletearchivedialog.form.submit,

    "dialog.checktask": self.checktaskdialog,
    "dialog.checktask.close": self.checktaskdialog.closebtn,

    "dialog.mailboxinfo.boxname.label": self.newmailbox.form.boxname,
    "dialog.mailboxinfo.color.label": self.newmailbox.form.colorlabel,
    "dialog.mailboxinfo.login.label": self.newmailbox.form.loginlabel,
    "dialog.mailboxinfo.passwd.label": self.newmailbox.form.passwdlabel,
    "dialog.mailboxinfo.server.label": self.newmailbox.form.serverlabel,
    "dialog.mailboxinfo.submit": self.newmailbox.form.submit,
    "dialog.mailboxinfo.cancel": self.newmailbox.form.cancel,
    "dialog.mailboxinfo.rights": self.newmailbox.form.rights,
    "dialog.mailboxinfo.checkconn": self.newmailbox.form.checkconn,
    "dialog.mailboxinfo.addinfo.label": self.newmailbox.form.additionalifno_text,
    "dialog.mailboxinfo.boxtype.label": self.newmailbox.form.boxtypelabel,
    "dialog.mailboxinfo.boxtype": self.newmailbox.form.boxtype,

    "dialog.mailboxdelete.submit": self.deletemailboxdialog.submit,
    "dialog.mailboxdelete.cancel": self.deletemailboxdialog.cancel,

    "dialog.labeldelete.submit": self.deletelabeldialog.submit,
    "dialog.labeldelete.cancel": self.deletelabeldialog.cancel,

    "dialog.aclrights.inherited": self.rightsdialog.adduserform.inherited,
    "dialog.aclrights.query": self.rightsdialog.adduserform.query,
    "dialog.aclrights.clear": self.rightsdialog.adduserform.clearbtn,
    "dialog.aclrights.submit": self.rightsdialog.adduserform.submit,
    "dialog.aclrights.cancel": self.rightsdialog.cancelbtn,
    "dialog.aclrights.continue": self.rightsdialog.donebtnt,
    "dialog.aclrights.rights.message": self.rightsdialog.cnt.message,
    "dialog.aclrights.rights.label": self.rightsdialog.adduserform.rightslabel,
    "dialog.aclrights.subjects.label": self.rightsdialog.adduserform.subjectslabel,

    "dialog.labelinfo.cancel": self.labelinfo.form.cancel,
    "dialog.labelinfo.submit": self.labelinfo.form.submit,
    "dialog.labelinfo.continue": self.labelinfo.form.addanother,
    "dialog.labelinfo.rights": self.labelinfo.form.rights,
    "dialog.labelinfo.color.label": self.labelinfo.form.colorlabel,
    "dialog.labelinfo.shortcut.label": self.labelinfo.form.shortcutlabel,
    "dialog.labelinfo.shared.label": self.labelinfo.form.sharedlabel,

    "dialog.labelsmgmt": self.labelsmgmtinfo,
    "dialog.labelsmgmt.close": self.labelsmgmtinfo.close,
    "dialog.labelsmgmt.create": self.labelsmgmtinfo.create,
    "dialog.labelsmgmt.labels.message": self.labelsmgmtinfo.labels.message,

    "sidebar.mailboxes.unread.title": self.sidebar.unreadheader,
    "sidebar.mailboxes.unread.message": self.sidebar.unread.message,
    "sidebar.mailboxes.unread.list": self.sidebar.unread.dlist,

    "sidebar.mailboxes.select": self.mailboxeslist,
    "sidebar.mailboxes.select.list": self.mailboxeslist.list,

    "sidebar.mailboxes.current.name": self.sidebar.current.boxselect.boxname,
    "sidebar.mailboxes.current.color": self.sidebar.current.boxselect.boxcolor,
    "sidebar.mailboxes.current.addr": self.sidebar.current.boxaddr,
    "sidebar.mailboxes.current.options.button": self.sidebar.current.mailboxopts,
    "sidebar.mailboxes.current.options": self.mailboxpopup,
    "sidebar.mailboxes.current.options.list": self.mailboxpopup.options,

    "sidebar.archives.list": self.sidebar.archives,
    "sidebar.archives.attention": self.sidebar.attention,

    "topbar.labels.popup.list": self.labelspopup.labels.list,
    "topbar.labels.popup.message": self.labelspopup.labels.message,
    "topbar.labels.popup.query.label": self.labelspopup.search.querylabel,
    "topbar.labels.popup.buttons.create": self.labelspopup.buttons.createbtn,
    "topbar.labels.popup.buttons.manage": self.labelspopup.buttons.managebtn,


#    "sidebar.unread.dlist": self.sidebar.unread.dlist,
#    "sidebar.unread.message": self.sidebar.unread.message,
#    "maillist.dov": self.maillist,
#
#    "widget.macros.objectview": self.macros_container.objectview_macros,
#    "widget.macros.img_holder": self.macros_ico_holder.hpt_macro,
#    "widget.macros.header.button": self.macros_ico_holder,
#    "widget.composer.list": self.mailcomposerlist.list,
#    "topbar.mailcomposer.cnt": self.mailcomposercnt,
#    "topbar.delselectedbtn": self.delselectedbtn,
#    "xmldialog": self.xmldialog,
#    "vdomdynobj": self.vdomdynobj,
#
#    "topbar.mailcomposer.image": self.mailcomposercnt.icon,
#    "topbar.mailcomposer.title": self.mailcomposercnt.composer_label,
}

page.run("onload")

				]]>
				</Action>
				<Action ID="3f06ac22-a185-40e3-9b56-4acb0ff769a7" Name="actions_archives" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProMailHomePage import ProMailHomePage


page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "sidebar.archives.list": self.sidebar.archives,
    "sidebar.archives.attention": self.sidebar.attention,

    "sidebar.mailboxes.select": self.mailboxeslist,
    "sidebar.mailboxes.select.list": self.mailboxeslist.list,
    "sidebar.mailboxes.current.color": self.sidebar.current.boxselect.boxcolor,
    "sidebar.mailboxes.current.name": self.sidebar.current.boxselect.boxname,
    "sidebar.mailboxes.current.addr": self.sidebar.current.boxaddr,
    "sidebar.mailboxes.current.options.button": self.sidebar.current.mailboxopts,
    "sidebar.mailboxes.current.options": self.mailboxpopup,
    "sidebar.mailboxes.current.options.list": self.mailboxpopup.options,

    "sidebar.mailboxes.unread.title": self.sidebar.unreadheader,
    "sidebar.mailboxes.unread.message": self.sidebar.unread.message,
    "sidebar.mailboxes.unread.list": self.sidebar.unread.dlist,

    "dialog.aclrights": self.rightsdialog,
    "dialog.aclrights.inherited": self.rightsdialog.adduserform.inherited,
    "dialog.aclrights.rights.list": self.rightsdialog.cnt.rights,
    "dialog.aclrights.rights.message": self.rightsdialog.cnt.message,
    "dialog.aclrights.adduser.query": self.rightsdialog.adduserform.query,
    "dialog.aclrights.adduser.subjects": self.rightsdialog.adduserform.subjects,
    "dialog.aclrights.adduser.rights": self.rightsdialog.adduserform.rights,

    "dialog.archiveinfo": self.newarchive,
    "dialog.archiveinfo.form": self.newarchive.form,
    "dialog.archiveinfo.archname": self.newarchive.form.archname,
    "dialog.archiveinfo.shared": self.newarchive.form.sharedlabel,
    "dialog.archiveinfo.sources": self.newarchive.form.sources,
    "dialog.archiveinfo.cancel": self.newarchive.form.cancel,

    "dialog.archivedelete": self.deletearchivedialog,
    "dialog.archivedelete.form": self.deletearchivedialog.form,
    "dialog.archivedelete.checkbox.delarchive": self.deletearchivedialog.form.delarchive,
    "dialog.archivedelete.checkbox.delmails": self.deletearchivedialog.form.delmails,
    "dialog.archivedelete.cancel": self.deletearchivedialog.form.cancel,
    "dialog.archivedelete.submit": self.deletearchivedialog.form.submit,

}

page.run("area.archives.actions")

				]]>
				</Action>
				<Action ID="5ac39034-ad5f-4128-9a04-4e3fb823e09e" Name="actions_sidebar" Top="486" Left="0" State="False">
<![CDATA[
"""
"""

from ProMailHomePage import ProMailHomePage


page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "sidebar.archives.list": self.sidebar.archives,
    "sidebar.archives.attention": self.sidebar.attention,

    "sidebar.mailboxes.select": self.mailboxeslist,
    "sidebar.mailboxes.select.list": self.mailboxeslist.list,
    "sidebar.mailboxes.current.color": self.sidebar.current.boxselect.boxcolor,
    "sidebar.mailboxes.current.name": self.sidebar.current.boxselect.boxname,
    "sidebar.mailboxes.current.addr": self.sidebar.current.boxaddr,
    "sidebar.mailboxes.current.options.button": self.sidebar.current.mailboxopts,
    "sidebar.mailboxes.current.options": self.mailboxpopup,
    "sidebar.mailboxes.current.options.list": self.mailboxpopup.options,

    "sidebar.mailboxes.unread.title": self.sidebar.unreadheader,
    "sidebar.mailboxes.unread.message": self.sidebar.unread.message,
    "sidebar.mailboxes.unread.list": self.sidebar.unread.dlist,

    "dialog.archiveinfo": self.newarchive,
    "dialog.archiveinfo.archname": self.newarchive.form.archname,
    "dialog.archiveinfo.shared": self.newarchive.form.sharedlabel,
    "dialog.archiveinfo.sources": self.newarchive.form.sources,

    "dialog.archivedelete": self.deletearchivedialog,
    "dialog.archivedelete.checkbox.delarchive": self.deletearchivedialog.form.delarchive,
    "dialog.archivedelete.checkbox.delmails": self.deletearchivedialog.form.delmails,
    "dialog.archivedelete.cancel": self.deletearchivedialog.form.cancel,
    "dialog.archivedelete.submit": self.deletearchivedialog.form.submit,

    "dialog.mailboxinfo": self.newmailbox,
    "dialog.mailboxinfo.form": self.newmailbox.form,
    "dialog.mailboxinfo.server": self.newmailbox.form.server,
    "dialog.mailboxinfo.creator": self.newmailbox.form.creator,
    "dialog.mailboxinfo.shared": self.newmailbox.form.shared,
    "dialog.mailboxinfo.boxname": self.newmailbox.form.boxname,
    "dialog.mailboxinfo.color": self.newmailbox.form.color,
    "dialog.mailboxinfo.login": self.newmailbox.form.login,
    "dialog.mailboxinfo.passwd": self.newmailbox.form.passwd,
    "dialog.mailboxinfo.boxtype": self.newmailbox.form.boxtype,
    "dialog.mailboxinfo.cancel": self.newmailbox.form.cancel,


    "dialog.mailboxdelete": self.deletemailboxdialog,
    "dialog.mailboxdelete.message": self.deletemailboxdialog.message,
    "dialog.mailboxdelete.cancel": self.deletemailboxdialog.cancel,
    "dialog.mailboxdelete.submit": self.deletemailboxdialog.submit,

    "dialog.aclrights": self.rightsdialog,
    "dialog.aclrights.inherited": self.rightsdialog.adduserform.inherited,
    "dialog.aclrights.rights.list": self.rightsdialog.cnt.rights,
    "dialog.aclrights.rights.message": self.rightsdialog.cnt.message,
    "dialog.aclrights.adduser.query": self.rightsdialog.adduserform.query,
    "dialog.aclrights.adduser.subjects": self.rightsdialog.adduserform.subjects,
    "dialog.aclrights.adduser.rights": self.rightsdialog.adduserform.rights,

}

page.run("area.sidebar.actions")

				]]>
				</Action>
				<Action ID="28023679-ea85-4052-988c-676f5e6d2fc5" Name="actions_labels" Top="1500" Left="271" State="False">
<![CDATA[
"""
"""
from ProMailHomePage import ProMailHomePage

page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.labelsmgmt": self.labelsmgmtinfo,
    "dialog.labelsmgmt.close": self.labelsmgmtinfo.close,
    "dialog.labelsmgmt.create": self.labelsmgmtinfo.create,
    "dialog.labelsmgmt.labels.message": self.labelsmgmtinfo.labels.message,
    "dialog.labelsmgmt.labels.list": self.labelsmgmtinfo.labels.list,

    "dialog.labelinfo": self.labelinfo,
    "dialog.labelinfo.form": self.labelinfo.form,
    "dialog.labelinfo.color": self.labelinfo.form.color,
    "dialog.labelinfo.name": self.labelinfo.form.shortcut,
    "dialog.labelinfo.shared": self.labelinfo.form.sharedlabel,
    "dialog.labelinfo.cancel": self.labelinfo.form.cancel,

    "dialog.labeldelete": self.deletelabeldialog,
    "dialog.labeldelete.message": self.deletelabeldialog.message,
    "dialog.labeldelete.cancel": self.deletelabeldialog.cancel,
    "dialog.labeldelete.submit": self.deletelabeldialog.submit,

    "dialog.aclrights": self.rightsdialog,
    "dialog.aclrights.inherited": self.rightsdialog.adduserform.inherited,
    "dialog.aclrights.rights.list": self.rightsdialog.cnt.rights,
    "dialog.aclrights.rights.message": self.rightsdialog.cnt.message,
    "dialog.aclrights.adduser.query": self.rightsdialog.adduserform.query,
    "dialog.aclrights.adduser.subjects": self.rightsdialog.adduserform.subjects,
    "dialog.aclrights.adduser.rights": self.rightsdialog.adduserform.rights,

    "topbar.labels.popup.list": self.labelspopup.labels.list,
    "topbar.labels.popup.message": self.labelspopup.labels.message,
    "topbar.labels.popup.buttons.create": self.labelspopup.buttons.createbtn,
    "topbar.labels.popup.buttons.manage": self.labelspopup.buttons.managebtn,
}

page.run("area.labels.actions")

				]]>
				</Action>
				<Action ID="123ca880-f2d1-434d-b5cc-693f1eff031c" Name="actions_mailboxes" Top="454" Left="829" State="False">
<![CDATA[
"""
"""

from ProMailHomePage import ProMailHomePage


page = ProMailHomePage(self)
page.vdom_objects = {
    "growl": self.growl,

    "sidebar.archives.list": self.sidebar.archives,
    "sidebar.archives.attention": self.sidebar.attention,

    "sidebar.mailboxes.select": self.mailboxeslist,
    "sidebar.mailboxes.select.list": self.mailboxeslist.list,
    "sidebar.mailboxes.current.color": self.sidebar.current.boxselect.boxcolor,
    "sidebar.mailboxes.current.name": self.sidebar.current.boxselect.boxname,
    "sidebar.mailboxes.current.addr": self.sidebar.current.boxaddr,
    "sidebar.mailboxes.current.options.button": self.sidebar.current.mailboxopts,
    "sidebar.mailboxes.current.options": self.mailboxpopup,
    "sidebar.mailboxes.current.options.list": self.mailboxpopup.options,

    "sidebar.mailboxes.unread.title": self.sidebar.unreadheader,
    "sidebar.mailboxes.unread.message": self.sidebar.unread.message,
    "sidebar.mailboxes.unread.list": self.sidebar.unread.dlist,

    "dialog.mailboxinfo": self.newmailbox,
    "dialog.mailboxinfo.form": self.newmailbox.form,
    "dialog.mailboxinfo.server": self.newmailbox.form.server,
    "dialog.mailboxinfo.creator": self.newmailbox.form.creator,
    "dialog.mailboxinfo.shared": self.newmailbox.form.shared,
    "dialog.mailboxinfo.boxname": self.newmailbox.form.boxname,
    "dialog.mailboxinfo.color": self.newmailbox.form.color,
    "dialog.mailboxinfo.login": self.newmailbox.form.login,
    "dialog.mailboxinfo.passwd": self.newmailbox.form.passwd,
    "dialog.mailboxinfo.boxtype": self.newmailbox.form.boxtype,
    "dialog.mailboxinfo.cancel": self.newmailbox.form.cancel,


    "dialog.mailboxdelete": self.deletemailboxdialog,
    "dialog.mailboxdelete.message": self.deletemailboxdialog.message,
    "dialog.mailboxdelete.cancel": self.deletemailboxdialog.cancel,
    "dialog.mailboxdelete.submit": self.deletemailboxdialog.submit,

    "dialog.aclrights": self.rightsdialog,
    "dialog.aclrights.inherited": self.rightsdialog.adduserform.inherited,
    "dialog.aclrights.rights.list": self.rightsdialog.cnt.rights,
    "dialog.aclrights.rights.message": self.rightsdialog.cnt.message,
    "dialog.aclrights.adduser.query": self.rightsdialog.adduserform.query,
    "dialog.aclrights.adduser.subjects": self.rightsdialog.adduserform.subjects,
    "dialog.aclrights.adduser.rights": self.rightsdialog.adduserform.rights,

    "dialog.checktask": self.checktaskdialog,
    "dialog.checktask.timer": self.checktasktimer,
    "dialog.checktask.close": self.checktaskdialog.closebtn,
    "dialog.checktask.output": self.checktaskdialog.output.logs,
}

page.run("area.mailboxes.actions")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="5cad69bb-0ede-4b19-b185-b165471bdb8a" Name="plugins_new" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">ProSuite - Plugins</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="5957333c-932e-4761-92c5-a918b26224a2" Name="xmldialog" Type="887e2a68-4cb0-e28a-6d7b-4dd41c35ca6a">
					<Attributes>
						<Attribute Name="top">802</Attribute>
						<Attribute Name="left">464</Attribute>
						<Attribute Name="xmldata"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="c3105120-141a-4d54-a328-abd3dcbb2d73" Name="dialog_md5" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">618</Attribute>
						<Attribute Name="height">138</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">548</Attribute>
					</Attributes>
					<Objects>
						<Object ID="7b9e9cc8-31c5-4c05-a2fa-bc5a7e42a6c6" Name="button_close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">34</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">99</Attribute>
								<Attribute Name="left">240</Attribute>
							</Attributes>
						</Object>
						<Object ID="76cdb9c8-c81b-4623-bcfd-bd248d9c394c" Name="text_md5" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="zindex">9</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="value">Text</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="width">284</Attribute>
								<Attribute Name="top">35</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">7</Attribute>
							</Attributes>
						</Object>
						<Object ID="60972492-ca54-48dc-8977-1e3ffa3c1f1c" Name="bar_269e9647_7cdc_4f65_954e_e7fc9ef423d1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">273</Attribute>
								<Attribute Name="top">21</Attribute>
								<Attribute Name="color">F6F6F6</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="536f08d8-be2a-44ef-a611-81149f9e592c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="711bf611-5ec9-45cf-ac22-cd5ff19b660f" Name="dialog_add_plugin" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Add New Plug-In</Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="left">756</Attribute>
					</Attributes>
					<Objects>
						<Object ID="98dc2b82-0727-4d89-aa49-0ddc9277ad4b" Name="form_new" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">175</Attribute>
								<Attribute Name="height">75</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="c4ff7e68-2de9-4be3-88d2-6586b5cc2799" Name="formbutton_new" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="label">Create new Plugin</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">202</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">80</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="b03aec3f-b5aa-47ca-9245-f024152c8925" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="4ad7be4f-3f45-40cf-99a6-de960e2e6e7f" Name="form_import" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">47</Attribute>
								<Attribute Name="height">75</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="510edaac-ffd3-46a9-9c17-b05ad4cfd695" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">215</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="left">22</Attribute>
									</Attributes>
								</Object>
								<Object ID="be188150-5e09-4cfe-b011-b4e42dafc5ed" Name="formbutton_upload_plugin" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="label">Install</Attribute>
										<Attribute Name="top">24</Attribute>
										<Attribute Name="left">255</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="15091e1e-5d89-41c5-ba65-32a3ae9cf140" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="0385f553-c4b6-4d8c-b73b-a953c47f2005" Name="button_close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">63</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">271</Attribute>
								<Attribute Name="left">320</Attribute>
							</Attributes>
						</Object>
						<Object ID="7cad73e8-0104-4a53-b171-7eaa0b08c4b5" Name="richtext_import" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[<p><strong>Import from file:</strong></p>]]></Attribute>
								<Attribute Name="height">42</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">167</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">7</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="c792f8c5-416b-4bf5-a5b5-8619be30c0b9" Name="richtext_new" Type="82a69b02-9fba-47d0-b206-6fd1769b0ebd">
							<Attributes>
								<Attribute Name="color"><![CDATA[
								]]></Attribute>
								<Attribute Name="align"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[<p><strong>Create new:</strong></p>]]></Attribute>
								<Attribute Name="height">44</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">267</Attribute>
								<Attribute Name="font"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">136</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="1a65f5f6-78eb-471b-8438-2baadb03ba5b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="c939b0ff-fc6a-4c8d-b719-1e37cc9aff09" Name="dialog_update_plugin" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Update Plug-In</Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">1171</Attribute>
					</Attributes>
					<Objects>
						<Object ID="54fddf8b-cb24-4b8d-9191-fcd5529ea2f8" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">25</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">Plugin to update - %s</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="width">352</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="8743939f-75be-41ec-bb8f-04fd26bc3d43" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">52</Attribute>
								<Attribute Name="height">75</Attribute>
								<Attribute Name="classname">gray_back</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="dffbe009-d256-4b4b-8501-5907bb51ed29" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">326</Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">25</Attribute>
										<Attribute Name="left">22</Attribute>
									</Attributes>
								</Object>
								<Object ID="ca059bc7-ea24-433b-b2f5-9cf3c0a51e0d" Name="formtext_pluginid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">37</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="f6a344de-2394-4847-9969-a17a864f6938" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="8ee2b03d-45b5-4829-9adf-fff90ec3c20b" Name="formbutton_update" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">277</Attribute>
								<Attribute Name="label">Update</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">296</Attribute>
							</Attributes>
						</Object>
						<Object ID="89fd5921-8c8f-451e-8700-74fa737fd5e1" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">277</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">96</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">1</Attribute>
								<Attribute Name="left">186</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="acdff81e-2157-4ed9-9142-c319180c4d94" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="116cc01d-6b8a-4929-9a51-2de81ff62460" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">839</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="e6b2b8a4-609a-4caf-be0b-0d2ef8c129d4" Name="pluginstable" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">133</Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["id"]]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="showheader">0</Attribute>
						<Attribute Name="height">359</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="header"><![CDATA[[ "id", "picture", "info", "update", "export", "open", "delete", "md5hash", "config"]]]></Attribute>
						<Attribute Name="key">id</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="cssclass">plugin-dt</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">684</Attribute>
						<Attribute Name="left">62</Attribute>
					</Attributes>
				</Object>
				<Object ID="182b157f-64f8-40f7-9123-99bcabbd8ae7" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[.plugin-dt {
    margin-top: 25px !important;
}
.plugin-dt table {
    border: none;
    height: 0px;
    border-collapse: collapse;
    position: relative;
}
.plugin-dt table tr {
    position: relative;
}
.plugin-dt table td {
    overflow: hidden;
}
.plugin-dt table td {
    /*border-color:#dedede;*/

    border: none;
}
.plugin-dt table td.cell-1 img {
    width: 48px;
    /*height: 48px;*/
}
.plugin-dt table,
.plugin-dt table tbody,
.plugin-dt table tbody tr {
    position: relative;
    display: block;
    width: 602px;
}
.plugin-dt table tbody tr {
    height: 240px;
}
.plugin-dt table .cell-3,
.plugin-dt table .cell-4,
.plugin-dt table .cell-5,
.plugin-dt table .cell-6,
.plugin-dt table .cell-7,
.plugin-dt table .cell-8 {
    position: absolute;
    bottom: 10px;
}
.plugin-dt tr {
    background: url("/539df93d-5840-476c-9b65-ddf5e8dfd362.res") repeat-y;
    padding: 0px;
}
.plugin-dt table .cell-3 {
    right: 238px;
}
.plugin-dt table .cell-4 {
    right: 128px;
}
.plugin-dt table .cell-5 {
    right: 18px;
}
.plugin-dt table .cell-6 {
    left: 13px;
    bottom: 13px;
}
.plugin-dt table .cell-7 {
    left: 95px;
    bottom: 13px;
}
.plugin-dt table .cell-8 {
    left: 170px;
    bottom: 13px;
}
.plugin-dt table .cell-1,
.plugin-dt table .cell-2 {
    display: block;
    float: left;
}
.plugin-dt table .cell-1 {
    width: 48px;
    margin: 30px;
    margin-right: 20px;
}
.plugin-dt table .cell-2 {
    width: 450px;
    margin-top: 30px;
}
.plugin-dt h1,
.plugin-dt h2,
.plugin-dt p {
    margin: 0px;
    padding: 0px;
    font-weight: normal;
}
.plugin-dt h1,
.plugin-dt h2 {
    float: left;
}
.plugin-dt h1 {
    font-size: 24px;
    margin-bottom: 24px;
}
.plugin-dt h2 {
    font-size: 13px;
    color: #757575;
    margin-top: 10px;
    margin-left: 8px;
}
.plugin-dt p {
    font-size: 13px;
}
.plugin-dt p:last-child {
    color: #757575;
    margin-top: 13px;
}
.plugin-dt table td a {
    padding: 0px 14px 0px 14px;
}
.plugin-dt table td a img {
    margin-bottom: -3px;
    margin-right: 5px;
    border: 0px;
}
.plugin-cont tr {
    background: url("/2648ee0f-4c11-414e-a5f8-f0357a718f10.res") repeat-y;
    padding: 0px;
}
.plugin-dt h1 span, .plugin-dt h2 span {
    width: 450px;
    float: left;
}
.plugin-dt h1 {
    margin: 0 !important;
}
.plugin-dt p.description {
    margin-top: 10px;
}
.plugin-dt table td a {
    display: block;
    height: 24px !important;
    line-height: 24px !important;
    text-align: center !important;
    background: #fff url("/ecd1a950-8086-42f1-aa3d-e426acfdf68b.res") !important;
    background-repeat: repeat-x;
    background-position: bottom center;
    text-decoration: none;
    border: 1px solid #c5c5c5;
    border-radius: 6px;
    -moz-border-radius: 6px;
    -webkit-border-radius: 6px;
    -o-border-radius: 6px;
    -ms-border-radius: 6px;
    cursor: pointer;
    outline: none !important;
    box-shadow: inset 0px 0px 3px #fff;
    -moz-box-shadow: inset 0px 0px 3px #fff;
    -webkit-box-shadow: inset 0px 0px 3px #fff;
    -o-box-shadow: inset 0px 0px 3px #fff;
    -ms-box-shadow: inset 0px 0px 3px #fff;
    -webkit-transition: all 0.4s ease;
    -moz-transition: all 0.4s ease;
    -o-transition: all 0.4s ease;
    font-size: 14px;
    color: #000;
    font-family: Arial, sans-serif;
}
.plugin-dt table td a:hover {
    box-shadow: inset 0px 0px 6px #fff;
    -moz-box-shadow: inset 0px 0px 6px #fff;
    -webkit-box-shadow: inset 0px 0px 6px #fff;
    -o-box-shadow: inset 0px 0px 6px #fff;
    -ms-box-shadow: inset 0px 0px 6px #fff;
    border: 1px solid #a8a8a8;
}
.plugin-dt table .cell-7 a,
.plugin-dt table .cell-8 a {
    border: 0px;
    padding: 0px;
    text-decoration: none;
    border-bottom: 1px dashed #bce4ff;
    border-radius: 0px;
    font-size: 12px;
    line-height: 1.5 !important;
    height: auto !important;
    color: #0099ff;
    background: url("/9d8e743a-bed4-4a78-9a5c-844d26e6b30f.res") no-repeat left 50% !important;
    padding-left: 14px;
}
.plugin-dt table .cell-7 a:hover,
.plugin-dt table .cell-8 a:hover {
    border: 0px;
    padding: 0px;
    border-bottom: 1px dashed #fff;
    padding-left: 14px;
}
.plugin-dt table .cell-8 a {
    background: url("/b2fb47b0-4c31-4b43-9148-6a1ba8c8c1a3.res") no-repeat left 50% !important;
}
.plugin-dt table .cell-6 a {
    border: 0px;
    padding: 0px;
    text-decoration: none;
    border-bottom: 1px dashed #bce4ff;
    border-radius: 0px;
    font-size: 12px;
    line-height: 1.5 !important;
    height: auto !important;
    color: #0099ff;
    background: url("/04d353e8-51b6-4832-8ec5-d317e14a3eee.res") no-repeat !important;
    padding-left: 18px;
}
.plugin-dt table .cell-6 a:hover {
    border: 0px;
    padding: 0px;
    border-bottom: 1px dashed #fff;
    color: #ff0000;
    padding-left: 18px;
}
.plugin-dt {
    margin-top: 25px !important;
}
.clearfix {
    clear: both;
    width: 100%;
    position: relative;
}
.lt-ie10 .plugin-dt table .cell-3,
.lt-ie10 .plugin-dt table .cell-4,
.lt-ie10 .plugin-dt table .cell-5,
.lt-ie10 .plugin-dt table .cell-6,
.lt-ie10 .plugin-dt table .cell-7 {
    position: relative;
    bottom: 0;
    left: 0;
    right: 0;
    float: right;
    margin-right: 8px;
    margin-top: 8px;
}
.lt-ie10 .plugin-dt table .cell-6,
.lt-ie10 .plugin-dt table .cell-7 {
    float: left;
    margin-right: 0px;
    margin-left: 8px;
}
.lt-ie10 .plugin-dt table .cell-6 a,
.lt-ie10 .plugin-dt table .cell-7 a {
    text-align: left !important;
    width: 100%;
}
.lt-ie10 .plugin-dt table td a {
    padding: 0px 14px 0px 14px;
    display: block;
    width: 70px;
}
.lt-ie10 .plugin-dt table .cell-2 {
    width: 450;
    height: 150px;
    margin-top: 30px;
}
.lt-ie10 .plugin-dt table .cell-1,
.lt-ie10 .plugin-dt table .cell-2 {
    display: block;
    float: left;
}
.lt-ie10 .plugin-dt table {
    display: block;
    overflow: auto;
    overflow-x: hidden;
    height: 0px;
}
.add-plugin-btn {
    background: url("/94b78792-463f-4dbc-b5b0-377f42700dbd.png") no-repeat top center;
    background-repeat:no-repeat;
    background-position:top center;
    padding-top: 20px;
    text-align: center;
    font-size: 10px !important;
    text-decoration:none;
}
.cut-out-text {
  overflow: hidden !important;
  white-space: nowrap !important;
  text-overflow: ellipsis !important;
}]]></Attribute>
						<Attribute Name="left">944</Attribute>
					</Attributes>
				</Object>
				<Object ID="68225e38-1d32-4ecc-bf58-4d135a59b0f7" Name="dialog_error" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">459</Attribute>
						<Attribute Name="height">315</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">1171</Attribute>
					</Attributes>
					<Objects>
						<Object ID="652414ad-a682-4267-aa16-bbdc5e3b2d04" Name="button_stop_install" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Stop installation</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">29</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">140</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">269</Attribute>
								<Attribute Name="left">243</Attribute>
							</Attributes>
						</Object>
						<Object ID="a014411f-0e15-459a-8d9a-e402c18e9206" Name="button_back" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Back</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">29</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">78</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">269</Attribute>
								<Attribute Name="left">123</Attribute>
							</Attributes>
						</Object>
						<Object ID="b1795715-8d28-42ae-9f9f-569749c927bb" Name="text_description" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">266</Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">Error description</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="75e78ec2-3ce5-4f06-97d7-9e0e097b94ac" Name="text_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">14</Attribute>
								<Attribute Name="value">Error</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="fontsize">16</Attribute>
								<Attribute Name="width">266</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="a5a74cdb-8284-499d-a5dc-4669470ee2a1" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="c0caaf50-8bcd-4cff-8f06-c4172b53b95c" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="18766fb5-a912-4388-9504-3caed60fac44" Name="deleteplugindialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Uninstall plug-in</Attribute>
						<Attribute Name="top">1049</Attribute>
						<Attribute Name="height">114</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">62</Attribute>
					</Attributes>
					<Objects>
						<Object ID="0bcb865b-a093-4414-b9ff-1b216ecb2be0" Name="cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">70</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">78</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="e70475a3-7407-4dc7-94c3-2b58baab6a78" Name="uninstall_label" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">20</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">You are trying to uninstall this plugin. Are you sure?</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="7c23c660-deca-4616-b6df-1cf5e5224185" Name="submit" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Uninstall plug-in</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">30</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="width">127</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">78</Attribute>
								<Attribute Name="left">258</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="c26bb439-68ee-412a-9a33-8a8e91ce9267" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="e0a2ccc3-90b5-487c-b864-a799d42a03fc" Name="createplugindialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
border:3px solid #ccc;
}]]></Attribute>
						<Attribute Name="title">Create Plug-In</Attribute>
						<Attribute Name="top">561</Attribute>
						<Attribute Name="height">457</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">457</Attribute>
					</Attributes>
					<Objects>
						<Object ID="2dbab193-b4ba-4796-a190-886b30907bf8" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">457</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">457</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="overflow">1</Attribute>
								<Attribute Name="enctype">multipart/form-data</Attribute>
							</Attributes>
							<Objects>
								<Object ID="f79f3aa0-1373-47a0-a631-f9a31dfcd16f" Name="bar" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="color">F6F6F6</Attribute>
										<Attribute Name="top">301</Attribute>
										<Attribute Name="height">90</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">427</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="48f5a0c5-d847-4a83-9077-2675fd17d12e" Name="author" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">205</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="placeholder">Plugin author</Attribute>
										<Attribute Name="left">235</Attribute>
									</Attributes>
								</Object>
								<Object ID="503bbcf4-5bc7-453b-b39f-a1521c5bebc6" Name="authorlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Author:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">98</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">230</Attribute>
									</Attributes>
								</Object>
								<Object ID="397727e1-5282-4378-9a77-33a6b91a4fd8" Name="versionlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">315</Attribute>
										<Attribute Name="value">Version:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="width">96</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">35</Attribute>
									</Attributes>
								</Object>
								<Object ID="edc32396-be9e-4645-88c6-e905caa1e5f4" Name="pluginname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">39</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">205</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder">Plugin name</Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="0196bfcb-2a50-4e36-8dff-48e6e5241891" Name="version" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">338</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">160</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="placeholder">Plugin version</Attribute>
										<Attribute Name="left">35</Attribute>
									</Attributes>
								</Object>
								<Object ID="90fedf4c-a460-4dd9-b4a1-439d104340fa" Name="descriptionlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">89</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Description:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
								<Object ID="9315a51b-2956-4b84-b704-d09d35f02da1" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">420</Attribute>
										<Attribute Name="label">Save</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">6</Attribute>
										<Attribute Name="left">234</Attribute>
									</Attributes>
								</Object>
								<Object ID="95fb179f-b1c0-4a60-90e3-9d5f41d0897a" Name="description" Type="070b91d0-7e2d-4290-ba5e-1693a4d7181f">
									<Attributes>
										<Attribute Name="top">115</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">165</Attribute>
										<Attribute Name="width">417</Attribute>
										<Attribute Name="left">15</Attribute>
										<Attribute Name="tabindex">3</Attribute>
									</Attributes>
								</Object>
								<Object ID="41730270-512e-430c-8e37-373f498b861b" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">420</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">5</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">350</Attribute>
									</Attributes>
								</Object>
								<Object ID="3ccfc80c-f7c6-4e96-ac96-83c2427a6df0" Name="pluginnamelabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Plugin name:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">91</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">15</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="1d630c45-88b9-4c2f-bc6f-4555faaa6e3d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="a1f9e3d5-db1f-4281-9ef8-ce88b1d92884" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="c07bc184-8aa7-48d6-adef-69dad5ebf153" Name="createplugin" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">add-plugin-btn</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Create</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">35</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="width">88</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="734dbd45-aca9-4b06-a494-5b6d7cdf4a49" Name="submit_plugin_dialog" Top="264" Left="227" State="False">
<![CDATA[
"""
"""

from ProSuitePluginsPage import ProSuitePluginsPage

page = ProSuitePluginsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "dialog.plugin": self.createplugindialog,
    "plugins.datatable": self.pluginstable,
}

page.live("submit_plugin_dialog")

				]]>
				</Action>
				<Action ID="b9f78192-55c5-4c0a-9d5a-b32b492f8e7e" Name="submit_plugin_uninstall" Top="76" Left="738" State="False">
<![CDATA[
"""
"""

from ProSuitePluginsPage import ProSuitePluginsPage

page = ProSuitePluginsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "dialog.plugin": self.createplugindialog,
    "dialog.delete": self.deleteplugindialog,
    "plugins.datatable": self.pluginstable,

}

page.live("submit_plugin_uninstall")

				]]>
				</Action>
				<Action ID="66fad005-424a-491c-b52c-b6933f137b12" Name="plugins_table_cell_click" Top="306" Left="227" State="False">
<![CDATA[
"""
"""

from ProSuitePluginsPage import ProSuitePluginsPage

page = ProSuitePluginsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "dialog.plugin": self.createplugindialog,
    "dialog.delete": self.deleteplugindialog,
    "plugins.datatable": self.pluginstable,

}

page.live("plugins_table_cell_click")

				]]>
				</Action>
				<Action ID="fb7df63e-6692-4e95-a186-176e6d06ca49" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuitePluginsPage import ProSuitePluginsPage

page = ProSuitePluginsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "plugins.datatable": self.pluginstable,
}

page.live()

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="b29e0ecd-f28f-44fb-88e1-5da7fb6e09ce" Name="cleanapp" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Actions>
				<Action ID="5618bd7f-dfcd-4c78-9e2f-4d13cf8178e3" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
application.storage.rmtree(application.storage.abs_path("./logs"))
application.storage.rmtree(application.storage.abs_path("./attachments"))


from promail_db_connection import ProMailDatabases

db = ProMailDatabases.promail()
db.execute("DELETE FROM account")
db.execute("DELETE FROM archive")
db.execute("DELETE FROM attachment")
db.execute("DELETE FROM server")
db.execute("VACUUM")

from prosuite_db_connection import ProSuiteDatabases
db = ProSuiteDatabases.plugins()
db.execute("DELETE FROM custom_event")
db.execute("DELETE FROM macros")
db.execute("DELETE FROM plugin")
db.execute("DELETE FROM timer")
db.execute("VACUUM")


import ProAdmin

app = ProAdmin.application()
for obj in app.child_objects():
    obj.delete()

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="6814366b-48fe-4b51-9b54-0d8c4c830dbd" Name="users_and_groups" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description">No description</Attribute>
				<Attribute Name="title">Users &amp;amp; Groups Management</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="4610629e-ba07-416f-88f4-278255145525" Name="dialog_delete_selected" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">1471</Attribute>
						<Attribute Name="height">270</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">391</Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="left">561</Attribute>
					</Attributes>
					<Objects>
						<Object ID="c1aaf701-9a6e-4f3d-be41-6b1dea287ff2" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">270</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">391</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="83f63181-ac9a-4b78-8be1-11b64ed963c0" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">233</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">117</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">259</Attribute>
									</Attributes>
								</Object>
								<Object ID="1d330e69-1183-45f2-b24f-8933543e7774" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">233</Attribute>
										<Attribute Name="height">24</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">117</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">122</Attribute>
									</Attributes>
								</Object>
								<Object ID="6baa2e5b-4ccc-4151-afdc-601ed08d46b0" Name="objlist" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="size">12</Attribute>
										<Attribute Name="top">15</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">185</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">362</Attribute>
										<Attribute Name="multiselect">1</Attribute>
										<Attribute Name="left">14</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="5509da01-313b-4cbb-9d68-8e268e1bb00c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="c92bf41a-f1ef-44ff-b200-edac33e1920e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="46b393ad-d78e-4b82-9d10-851cb5b61378" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="e671297b-fc30-4aff-b383-4abff83230c7" Name="group_filter" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">203</Attribute>
						<Attribute Name="height">23</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">234</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">131</Attribute>
					</Attributes>
					<Objects>
						<Object ID="1ccf8465-6cd2-48cf-9d14-991fa5d9b259" Name="group" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">219</Attribute>
								<Attribute Name="size"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectedvalue"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="cbe26be7-9dc4-42b1-81aa-5919654d8b4b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="cacf21f1-f607-448b-bf17-0d98776ece8c" Name="dialog_add_to_group" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Add to Group</Attribute>
						<Attribute Name="top">1471</Attribute>
						<Attribute Name="height">239</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">464</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="916d1e60-0c82-434e-a7b9-d31aa0ff560b" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">240</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">460</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="3cb72368-4e86-4879-80fd-9932fd3839a0" Name="users" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="top">19</Attribute>
										<Attribute Name="size">10</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">114</Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">429</Attribute>
										<Attribute Name="multiselect">1</Attribute>
										<Attribute Name="left">17</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
									</Attributes>
								</Object>
								<Object ID="38ee2d9e-52db-4d3c-8bf7-c218f1cccb34" Name="groupguid" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="top">151</Attribute>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">183</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">49</Attribute>
									</Attributes>
								</Object>
								<Object ID="5f5b8594-fd1a-4399-a66d-07a8810c40d4" Name="submit" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">199</Attribute>
										<Attribute Name="label">Add</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="left">356</Attribute>
									</Attributes>
								</Object>
								<Object ID="8fca726d-bffb-4c3c-a835-d90fcb38ba16" Name="to_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="fontfamily">tahoma</Attribute>
										<Attribute Name="top">155</Attribute>
										<Attribute Name="value">to:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="fontweight">bold</Attribute>
										<Attribute Name="width">32</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">17</Attribute>
									</Attributes>
								</Object>
								<Object ID="b0e7650d-a6cf-4bcd-ac7d-532530f35f64" Name="cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">199</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">5</Attribute>
										<Attribute Name="type">1</Attribute>
										<Attribute Name="left">251</Attribute>
									</Attributes>
								</Object>
								<Object ID="6dc0ab08-58fd-41fc-b36d-30044124c90a" Name="groupname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">151</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">20</Attribute>
										<Attribute Name="zindex">9</Attribute>
										<Attribute Name="width">185</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">248</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="811d9669-4d62-4db3-969f-f1a6adad4849" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="3acd8e52-91a8-4b8a-8b27-4ff27b2bfe7a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="9ae7fb33-f6ba-46ec-b3ea-ead7e61a9632" Name="add_to_group" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">add-to-group-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add selected to group</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">35</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="width">109</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="left">208</Attribute>
					</Attributes>
				</Object>
				<Object ID="ad85dcfb-c899-4e45-988b-36bb2759770b" Name="attention" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="color">A3A3A3</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="value"><![CDATA[
						]]></Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="width">881</Attribute>
						<Attribute Name="fontsize">16</Attribute>
						<Attribute Name="top">350</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">34</Attribute>
					</Attributes>
				</Object>
				<Object ID="c2df4d1e-daa6-4ca9-a259-d850a288e20a" Name="table" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[#%(id)s table
{
	height:0!important;
	border-collapse:collapse;
	border:0;
	margin-top:10px;

}

#%(id)s caption
{
	text-align:left;
	font-size:18px;
	margin-bottom:15px;
}

#%(id)s table .thead
{
	background:#fff url(/168eab1b-d9e1-9d79-01ce-0211fc938fbf.png);
	background-repeat:repeat-x;
	background-position:bottom right;
	border:0;
	border-top:1px solid #ececec;
	border-bottom:1px solid #ececec;
	border-radius:4px;
	-moz-border-radius:4px;
	-webkit-border-radius:4px;
}

#%(id)s table .thead .th-cell
{
	border:0;
	text-align:left;

}

#%(id)s table .thead .th-cell-0
{
	border:0;
	border-left:1px solid #ececec;
	border-radius:4px;
	-moz-border-radius:4px;
	-webkit-border-radius:4px;
	width:32px;
}


#%(id)s table th.th-cell-1 {
	width: 16px;
	opacity: 0;
	padding: 0;
	margin: 1px;
}

#%(id)s table .thead .th-cell-3
{
	border:0;
	border-right:1px solid #ececec;
	border-radius:4px;
	-moz-border-radius:4px;
	-webkit-border-radius:4px;
}

#%(id)s table tr td
{
	border:0;
	text-align:left;
	border-bottom:1px dotted #bfbfbf;
	line-height:27px;
	cursor: default;
}

#%(id)s .row:hover {
	border-bottom: 	1px solid #5CB1DD;
	border-top: 	1px solid #5CB1DD !important;
}

#%(id)s .row {
	border-bottom:	1px dotted #bfbfbf;
	border-top: 	1px dotted #bfbfbf;
}

#%(id)s .row_selected
{
	border-bottom: 	1px solid #7Cd1fD;
	border-top: 	1px solid #7Ce1fD !important;
}

#%(id)s .row_selected:hover
{
	border-bottom: 	1px solid #5CB1DD;
	border-top: 	1px solid #5CB1DD !important;

}]]></Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">206</Attribute>
						<Attribute Name="hiddenfields"><![CDATA[
						]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">530</Attribute>
						<Attribute Name="header"><![CDATA[
						]]></Attribute>
						<Attribute Name="key"><![CDATA[
						]]></Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="selectionmode">1</Attribute>
						<Attribute Name="cssclass">subjects-datatable</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">882</Attribute>
						<Attribute Name="left">33</Attribute>
					</Attributes>
				</Object>
				<Object ID="977ea03f-af4b-4b11-a07d-033c70fcfe93" Name="delete_selected" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">delete-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Delete selected</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">35</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">98</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="left">109</Attribute>
					</Attributes>
				</Object>
				<Object ID="ed5a731d-4f16-49cb-a103-6a57dd3117cd" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">1653</Attribute>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">47</Attribute>
					</Attributes>
				</Object>
				<Object ID="2d9b8268-794c-4c3a-82b3-e75a1e45143c" Name="dialog_user" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">825</Attribute>
						<Attribute Name="height">621</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">6</Attribute>
					</Attributes>
					<Objects>
						<Object ID="e344c965-bb94-4f00-94cb-dbd6f0c7a608" Name="to_groups" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname">ug-switch</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Groups</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">24</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">84</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">11</Attribute>
								<Attribute Name="left">306</Attribute>
							</Attributes>
						</Object>
						<Object ID="88953d91-fc2a-4b2a-99da-52b857980b24" Name="cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">78</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">582</Attribute>
								<Attribute Name="left">21</Attribute>
							</Attributes>
						</Object>
						<Object ID="e34eee2c-d2c4-49f2-957b-d527089a1c6d" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">62</Attribute>
								<Attribute Name="height">473</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">380</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">10</Attribute>
							</Attributes>
							<Objects>
								<Object ID="b9410e3d-61af-4837-837d-c5cd9415f7c4" Name="vispassword" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">87</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">138</Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="b4128559-a164-485d-a90d-147d15d0fc3e" Name="guid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">240</Attribute>
									</Attributes>
								</Object>
								<Object ID="a782d252-b239-4e39-9ec6-bf093b50fcd6" Name="login" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">338</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="9e1ed421-4d1b-4267-833f-3bf74c6d749b" Name="password" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
									<Attributes>
										<Attribute Name="top">87</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">22</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">138</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="ac14c2c0-0451-488e-8153-d81d5803f4e3" Name="generate_passwd" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">85</Attribute>
										<Attribute Name="label">Generate password</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">169</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">188</Attribute>
									</Attributes>
								</Object>
								<Object ID="240f60c8-0b6a-42c1-9e6d-4116ddc7ec5d" Name="password_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">65</Attribute>
										<Attribute Name="value">Password</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">138</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="f7d0bf45-8750-4c53-a55a-42b6319b9922" Name="tag_image" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">414</Attribute>
										<Attribute Name="value">cfacba0a-6c7c-4b8c-8a9c-7c18991d53cd</Attribute>
										<Attribute Name="height">18</Attribute>
										<Attribute Name="width">18</Attribute>
										<Attribute Name="externalurl"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">18</Attribute>
									</Attributes>
								</Object>
								<Object ID="2aa0176b-0b99-48a4-923d-44a92558fb04" Name="keywords_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">416</Attribute>
										<Attribute Name="value">Keywords</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">307</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">41</Attribute>
									</Attributes>
								</Object>
								<Object ID="ecbe95a3-db27-4f9b-ac02-29b97ff904e2" Name="keywords" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">438</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">338</Attribute>
										<Attribute Name="tabindex">8</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="71f349a7-fd0d-40f0-9c66-8ebb647e1992" Name="cont" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">136</Attribute>
										<Attribute Name="height">265</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">363</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor">F2F2F2</Attribute>
										<Attribute Name="left">7</Attribute>
									</Attributes>
									<Objects>
										<Object ID="504800f3-28dd-4de5-b603-ed9b2231f3b9" Name="lastname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
											<Attributes>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">94</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">160</Attribute>
												<Attribute Name="tabindex">5</Attribute>
												<Attribute Name="placeholder"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">190</Attribute>
											</Attributes>
										</Object>
										<Object ID="001a472e-d5d1-4fb8-8621-cc3f23e78f51" Name="firstname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
											<Attributes>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">94</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">160</Attribute>
												<Attribute Name="tabindex">4</Attribute>
												<Attribute Name="placeholder"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">11</Attribute>
											</Attributes>
										</Object>
										<Object ID="f7239e4c-0a11-4659-a9f4-e5e2785ab299" Name="firstname_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="top">72</Attribute>
												<Attribute Name="value">First name</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">150</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">11</Attribute>
											</Attributes>
										</Object>
										<Object ID="cf20f88f-e158-421e-a3f1-2291ae587554" Name="lastname_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="top">72</Attribute>
												<Attribute Name="value">Last name</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">150</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">198</Attribute>
											</Attributes>
										</Object>
										<Object ID="2202eaaf-abed-4d3f-934b-81edca603540" Name="phone_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="top">137</Attribute>
												<Attribute Name="value">Phone</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">320</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">12</Attribute>
											</Attributes>
										</Object>
										<Object ID="560cff46-50ad-4a17-b546-053fb45acd29" Name="phone" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
											<Attributes>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">159</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">338</Attribute>
												<Attribute Name="tabindex">6</Attribute>
												<Attribute Name="placeholder"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">12</Attribute>
											</Attributes>
										</Object>
										<Object ID="11bd24ac-c723-47da-aad1-df14861ab47a" Name="email" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
											<Attributes>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">29</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">338</Attribute>
												<Attribute Name="tabindex">3</Attribute>
												<Attribute Name="placeholder"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">12</Attribute>
											</Attributes>
										</Object>
										<Object ID="14771f20-d9f4-4cfa-b5a0-be214a369ca2" Name="email_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="top">7</Attribute>
												<Attribute Name="value">E-mail</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">257</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">12</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="d2d0a8c4-b8e9-4aa5-a6b9-e0a49bc354e8" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="6031f462-bf41-4e98-a608-735a36d91fef" Name="login_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">204</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Login</Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="5f09af2a-ced3-466f-8673-0e372d36dc96" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="0f53171e-3052-47eb-a166-06f37f68c9c4" Name="to_info" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname">ug-switch</Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Info</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">24</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="width">94</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">11</Attribute>
								<Attribute Name="left">294</Attribute>
							</Attributes>
						</Object>
						<Object ID="401ea229-b1e7-4d48-a958-3abe390ffa09" Name="edit_user_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">269</Attribute>
								<Attribute Name="top">13</Attribute>
								<Attribute Name="value">Edit user</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">11</Attribute>
							</Attributes>
						</Object>
						<Object ID="f0c5061e-4731-4175-97e0-7dc9bb6c1c7e" Name="save" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Save</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="width">83</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">582</Attribute>
								<Attribute Name="left">308</Attribute>
							</Attributes>
						</Object>
						<Object ID="c30a9b03-6ec1-4879-9599-86fc54566b2d" Name="new_user_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="top">13</Attribute>
								<Attribute Name="value">New user</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">283</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">11</Attribute>
							</Attributes>
						</Object>
						<Object ID="25158d20-fc8a-4bbc-8378-2a0bbdf2e5ac" Name="create" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Create</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">83</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">582</Attribute>
								<Attribute Name="left">308</Attribute>
							</Attributes>
						</Object>
						<Object ID="51092c09-fe86-4903-b7e5-9aa12334019b" Name="groups" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">380</Attribute>
								<Attribute Name="top">62</Attribute>
								<Attribute Name="height">473</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">10</Attribute>
							</Attributes>
							<Objects>
								<Object ID="76dad617-4a92-4ce4-ab87-981acbc11b57" Name="select_group_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">12</Attribute>
										<Attribute Name="value">Select groups</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">348</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
								</Object>
								<Object ID="1e9c10a6-6395-4087-926c-e337f78c3edf" Name="cont" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">36</Attribute>
										<Attribute Name="height">422</Attribute>
										<Attribute Name="classname">solid-border</Attribute>
										<Attribute Name="width">357</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">8</Attribute>
									</Attributes>
									<Objects>
										<Object ID="6c0b5e39-62a9-4284-b833-80ed8c885538" Name="datatable" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
											<Attributes>
												<Attribute Name="style"><![CDATA[#%(id)s table{
	height: 0 !important;
	border-collapse: collapse;
	border: none;
	margin-top: 10px;
}
#%(id)s caption{
	text-align: left;
	font-size: 18px;
	margin-bottom: 15px;
}
#%(id)s table .thead {
	background: #fff url("/168eab1b-d9e1-9d79-01ce-0211fc938fbf.png") bottom right repeat-x;
	border: none;
	border-top: 1px solid #ececec;
	border-bottom: 1px solid #ececec;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
}
#%(id)s table .thead .th-cell {
	border: none;
	text-align:left;
}
#%(id)s table .thead .th-cell-0 {
	border: none;
	border-left:1px solid #ececec;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
	width:32px;
}
#%(id)s table .thead .th-cell-2 {
	border: none;
	border-right:1px solid #ececec;
	border-radius: 4px;
	-moz-border-radius:4px;
	-webkit-border-radius: 4px;
}
#%(id)s table tr td{
	border: none;
	text-align: left;
	border-bottom: 1px dotted #bfbfbf;
	line-height: 27px;
}]]></Attribute>
												<Attribute Name="hiddenfields"><![CDATA[
												]]></Attribute>
												<Attribute Name="rowactive"><![CDATA[
												]]></Attribute>
												<Attribute Name="nocellclick"><![CDATA[
												]]></Attribute>
												<Attribute Name="showheader">0</Attribute>
												<Attribute Name="height">411</Attribute>
												<Attribute Name="header"><![CDATA[
												]]></Attribute>
												<Attribute Name="key"><![CDATA[
												]]></Attribute>
												<Attribute Name="skin">3</Attribute>
												<Attribute Name="selectedrows"><![CDATA[
												]]></Attribute>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="selectionmode">1</Attribute>
												<Attribute Name="cssclass">ug-dt</Attribute>
												<Attribute Name="data"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">357</Attribute>
											</Attributes>
										</Object>
										<Object ID="d3155529-4108-429f-a25e-941dd0109374" Name="throbber" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
											<Attributes>
												<Attribute Name="resource_cache"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">187</Attribute>
												<Attribute Name="value">92e097db-dad9-412f-936e-229731d0bf78</Attribute>
												<Attribute Name="height">22</Attribute>
												<Attribute Name="width">22</Attribute>
												<Attribute Name="externalurl"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">168</Attribute>
											</Attributes>
										</Object>
										<Object ID="dbd896d8-ce12-47fc-ac2a-5702f3f4bee9" Name="attention" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="align">center</Attribute>
												<Attribute Name="value">No groups</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">357</Attribute>
												<Attribute Name="top">171</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="3ba62a99-4aca-41af-90c8-c7d26ef60382" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
							</Objects>
							<Actions>
								<Action ID="7b132773-f85f-4eba-9fc2-f79cffee857e" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="549d1e04-80ae-43a4-9182-170e21641a44" Name="bar" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="color">CFCBD1</Attribute>
								<Attribute Name="width">380</Attribute>
								<Attribute Name="top">42</Attribute>
								<Attribute Name="left">11</Attribute>
								<Attribute Name="height">1</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="d6ebad97-ef40-44a3-9e83-dcbad40d9fd6" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="b2707aea-b947-4a84-a254-69709dc5c414" Name="per_page" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">203</Attribute>
						<Attribute Name="height">23</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">74</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">32</Attribute>
					</Attributes>
					<Objects>
						<Object ID="71bd1863-bc79-4d31-bbfb-17329c4a88cd" Name="perpage" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
							<Attributes>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">70</Attribute>
								<Attribute Name="size"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="selectedvalue"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="fca7ab98-7b40-43b5-a950-68b937be4f9d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="78c3fa6e-8ec1-48f7-8094-f25f06be4bb6" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="data"><![CDATA[.datasearch {
  padding: 2px 16px 2px 5px !important;
}
.add-button {
  background: url("/94b78792-463f-4dbc-b5b0-377f42700dbd.png");
  background-repeat:no-repeat;
  background-position:top center;
  padding-top:20px;
  text-align:center;
  font-size:10px !important;
  text-decoration:none;
}
.delete-button {
  background:url("/69b8d848-09b3-4b80-a1eb-a28054feed31.png");
  background-repeat:no-repeat;
  background-position:top center;
  padding-top:20px;
  text-align:center;
  font-size:10px!important;
  text-decoration:none;
}
.tabNavigation li {
  font-size:14px;
}
.tabNavigation li a {
  font-size:14px;
  text-decoration:none;
  background-repeat:repeat-x ;
  background-position:bottom left ;
  border-radius:4px;
  -moz-border-radius:4px;
  -webkit-border-radius:4px;
  padding:5px;
}
.tabNavigation li a.active {
  font-size:14px;
  text-decoration:none;
  background:#ffef95;
  border-radius:4px;
  -moz-border-radius:4px;
  -webkit-border-radius:4px;
  padding:5px;
  box-shadow:inset 2px 2px 5px #dcc751;
  -moz-box-shadow:inset 2px 2px 5px #dcc751;
  -webkit-box-shadow:inset 2px 2px 5px #dcc751;
}
.datatable-find-users table {
  height:0px;
  border:0px;
  border-collapse:collapse;
  line-height:28px;
}
.datatable-find-users table td {
  border:0px;
  border-bottom:1px dotted #bfbfbf;
}
.datatable-find-users table .cell-0 {
  width:32px !important;
}
.subjects-datatable table {
  height:0px !important;
  border-collapse:collapse;
  border:0px;
  margin-top:10px;
}
.subjects-datatable table .thead {
  background:#fff url("/47120d64-b991-40a3-85ef-caf3e6dc07e2.png");
  background-repeat:repeat-x;
  background-position:bottom right;
  border:0px;
  border-top:1px solid #ececec;
  border-bottom:1px solid #ececec;
  border-radius: 4px;
  -moz-border-radius:4px;
  webkit-border-radius: 4px;
}
.subjects-datatable table .thead .th-cell {
  border:0px;
  text-align:left;
}
.subjects-datatable table .thead .th-cell-0 {
  border:0px;
  border-left:1px solid #ececec;
  border-radius: 4px;
  -moz-border-radius:4px;
  -webkit-border-radius: 4px;
  width:32px;
}
.subjects-datatable table .thead .th-cell-2 {
  border:0px;
  border-right:1px solid #ececec;
  border-radius: 4px;
  -moz-border-radius:4px;
  -webkit-border-radius: 4px;
}
.subjects-datatable table tr td {
  border:0px;
  text-align:left;
  border-bottom:1px dotted #bfbfbf;
  line-height:27px;
  cursor:pointer;
}
.datatable-find-users table {
  height:0px;
  border:0px;
  border-collapse:collapse;
  line-height:28px;
}
.datatable-find-users table td {
  border:0px;
  border-bottom:1px dotted #bfbfbf;
}
.datatable-find-users table .cell-0 {
 width:32px !important;
}]]></Attribute>
						<Attribute Name="left">792</Attribute>
					</Attributes>
				</Object>
				<Object ID="95f3a057-b020-4913-9b0a-da91f62b38b0" Name="create_group" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">add-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Create group</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">35</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="width">88</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
				<Object ID="725ba681-7f43-41b4-9412-ba044cbeaa5c" Name="css_ug" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="top">320</Attribute>
						<Attribute Name="htmlcode"><![CDATA[<style type="text/css">
.solid-border{
border: 1px solid #dcdcdc !important;
overflow-x:hidden !important;
overflow-y:auto !important;
}

.add-to-group-button {
background: url("/bd5929c9-2fcb-4244-a0b2-a15980f01e1a.png");
background-repeat:no-repeat;
background-position:top center;
padding-top:20px;
text-align:center;
font-size:10px !important;
text-decoration:none;
}

.ug-dt caption {
display:none !important;
}

.ug-dt table {
margin: 0px !important;
padding: 0px !important;
}

.ug-dt table tr td {
border-bottom: 0px !important;
line-height: 1 !important;
}

.ug-dt .cell-0 {
width:22px;
}

.ug-switch {
background:#f9c501 url("/03fc3a90-cd95-4699-b639-e5761723d52e.png") no-repeat top right !important;
line-height:22px;
text-indent: -10px;
}

.ug_subject_edit {
background:url("/8a418abc-270a-4be3-bd68-b3a25dd60e37.png") left 75% no-repeat;
width:16px;
height:16px;
cursor:pointer;
}
.ug_header_sorted_down {
background:url("/4a1d1fb6-72ed-4da3-8879-aaa3eb83e954.png") right 75% no-repeat;
padding-right:10px;
cursor:pointer
}
.ug_header_sorted_up {
background:url("/91311c15-a842-4698-bf43-d078ce90e556.png") right 75% no-repeat;
padding-right:10px;
cursor:pointer !important;
}
.ug_datatable_title {
border-bottom:1px dashed #3da3d8;
color:#3da3d8;
cursor:pointer !important;
}
</style>]]></Attribute>
						<Attribute Name="left">927</Attribute>
					</Attributes>
				</Object>
				<Object ID="405bf0b4-b94b-4e46-827f-5a5170642595" Name="switch_data" Type="691b8bc3-0eee-830a-f0e0-e907d2b2489e">
					<Attributes>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">163</Attribute>
						<Attribute Name="height">24</Attribute>
						<Attribute Name="zindex">1</Attribute>
						<Attribute Name="width">248</Attribute>
						<Attribute Name="skin">1</Attribute>
						<Attribute Name="showtabs">1</Attribute>
						<Attribute Name="left">33</Attribute>
					</Attributes>
					<Objects>
						<Object ID="2f051800-8ad5-494c-a44b-4b9e9acf859d" Name="user" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="lockposition">1</Attribute>
								<Attribute Name="zindex">1</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title">Users</Attribute>
								<Attribute Name="top">20</Attribute>
								<Attribute Name="height">4</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">248</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">1</Attribute>
							</Attributes>
							<Actions>
								<Action ID="685e76f5-b094-4f17-bc3d-8c0ce927276f" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="5544bf8a-3b9a-4d27-aa21-3f92741c1c19" Name="group" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="lockposition">1</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title">Groups</Attribute>
								<Attribute Name="hierarchy">1</Attribute>
								<Attribute Name="top">20</Attribute>
								<Attribute Name="height">4</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">248</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">1</Attribute>
							</Attributes>
							<Actions>
								<Action ID="bf05dcec-d9c4-4f8c-a982-36501d48e11b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="3f4e6d6d-b971-4099-a888-e19b9db459ed" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="15e39399-fe30-4013-bfac-211edfba9ae8" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="f4621e1c-8da6-4db6-83d2-9b24c7911270" Name="search" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">150</Attribute>
						<Attribute Name="height">26</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">242</Attribute>
						<Attribute Name="meth">event</Attribute>
						<Attribute Name="enctype"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">663</Attribute>
					</Attributes>
					<Objects>
						<Object ID="6a119456-346f-466f-9faa-57d5877f6bb1" Name="query" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
							<Attributes>
								<Attribute Name="classname">datasearch</Attribute>
								<Attribute Name="width">235</Attribute>
								<Attribute Name="placeholder"><![CDATA[
								]]></Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="ed03866e-455d-4aaa-8320-e03a8e31e39c" Name="submit" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">5</Attribute>
								<Attribute Name="height">16</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="overflow">3</Attribute>
								<Attribute Name="left">229</Attribute>
							</Attributes>
							<Objects>
								<Object ID="78088a30-9c19-4bdb-8211-08cad82a5e29" Name="btn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="containerlink"><![CDATA[
										]]></Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">24ea8730-c6e1-4ecf-bc1e-97ebfd448468</Attribute>
										<Attribute Name="height">16</Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">16</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover">2982ac5b-058e-40f6-a343-daeac6ec91f4</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="c4f4406a-66eb-4f98-ad76-38641b721dbf" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="9a76dd17-bf5b-49e4-89da-b88d061a9556" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="5ba6082b-bb18-4cd8-b7d6-a1cdef9a6885" Name="create_user" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">add-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">New user</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">35</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="width">88</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">85</Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
				<Object ID="2028144c-90fe-4cbc-b5b4-c7c057be556d" Name="page_js" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="data"><![CDATA[function generatePassword(){
	var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	var string_length = 6;
	var randomstring = '';
	for (var i=0; i<string_length; i++) {
		var rnum = Math.floor(Math.random() * chars.length);
		randomstring += chars.substring(rnum,rnum+1);
	}
	Obj_9e1ed421_4d1b_4267_833f_3bf74c6d749b.setValue( randomstring );
	Obj_b9410e3d_61af_4837_837d_c5cd9415f7c4.setValue( randomstring );
}]]></Attribute>
						<Attribute Name="left">742</Attribute>
					</Attributes>
				</Object>
				<Object ID="94d9f57e-e684-45ee-8e74-7d0515d47b87" Name="dialog_group" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">844</Attribute>
						<Attribute Name="height">582</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">540</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8efc0930-6c43-4157-bfab-1965b84eb75b" Name="userssearch" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">122</Attribute>
								<Attribute Name="height">385</Attribute>
								<Attribute Name="classname">solid-border</Attribute>
								<Attribute Name="width">376</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">10</Attribute>
							</Attributes>
							<Objects>
								<Object ID="8aefb2c8-568d-498f-b338-43225d37e50f" Name="select_users_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="zindex">20</Attribute>
										<Attribute Name="top">71</Attribute>
										<Attribute Name="value">Select users</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">247</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="dfeb1cb0-62a1-49c3-9e31-e3ae2905ddbb" Name="search" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
									<Attributes>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="style"><![CDATA[
										]]></Attribute>
										<Attribute Name="containerlink"><![CDATA[
										]]></Attribute>
										<Attribute Name="disabledimg"><![CDATA[
										]]></Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="text"><![CDATA[
										]]></Attribute>
										<Attribute Name="image">24ea8730-c6e1-4ecf-bc1e-97ebfd448468</Attribute>
										<Attribute Name="height">16</Attribute>
										<Attribute Name="zindex">20</Attribute>
										<Attribute Name="width">16</Attribute>
										<Attribute Name="link"><![CDATA[
										]]></Attribute>
										<Attribute Name="rollover">2982ac5b-058e-40f6-a343-daeac6ec91f4</Attribute>
										<Attribute Name="top">31</Attribute>
										<Attribute Name="left">341</Attribute>
									</Attributes>
								</Object>
								<Object ID="2fbc7830-3bc0-42eb-9da3-42ebc6110a0d" Name="cont" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="zindex">20</Attribute>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">94</Attribute>
										<Attribute Name="height">275</Attribute>
										<Attribute Name="classname">solid-border</Attribute>
										<Attribute Name="width">338</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
									<Objects>
										<Object ID="8241d65c-3c55-4731-a92f-1cb55fcebf6c" Name="attention" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="align">center</Attribute>
												<Attribute Name="value">No users</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">338</Attribute>
												<Attribute Name="top">123</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
											</Attributes>
										</Object>
										<Object ID="0b38d14e-e61a-46c3-9fed-928a049598f6" Name="throbber" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
											<Attributes>
												<Attribute Name="resource_cache"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">117</Attribute>
												<Attribute Name="value">92e097db-dad9-412f-936e-229731d0bf78</Attribute>
												<Attribute Name="height">22</Attribute>
												<Attribute Name="width">22</Attribute>
												<Attribute Name="externalurl"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">158</Attribute>
											</Attributes>
										</Object>
										<Object ID="6c41a7c9-2f32-4b63-820e-6d03ab2551dc" Name="datatable" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
											<Attributes>
												<Attribute Name="style"><![CDATA[#%(id)s table{
	height: 0 !important;
	border-collapse: collapse;
	border: none;
	margin-top: 10px;
}
#%(id)s caption{
	text-align: left;
	font-size: 18px;
	margin-bottom: 15px;
}
#%(id)s table .thead {
	background: #fff url("/168eab1b-d9e1-9d79-01ce-0211fc938fbf.png") bottom right repeat-x;
	border: none;
	border-top: 1px solid #ececec;
	border-bottom: 1px solid #ececec;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
}
#%(id)s table .thead .th-cell {
	border: none;
	text-align:left;
}
#%(id)s table .thead .th-cell-0 {
	border: none;
	border-left:1px solid #ececec;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
	width:32px;
}
#%(id)s table .thead .th-cell-2 {
	border: none;
	border-right:1px solid #ececec;
	border-radius: 4px;
	-moz-border-radius:4px;
	-webkit-border-radius: 4px;
}
#%(id)s table tr td{
	border: none;
	text-align: left;
	border-bottom: 1px dotted #bfbfbf;
	line-height: 27px;
}]]></Attribute>
												<Attribute Name="hiddenfields"><![CDATA[
												]]></Attribute>
												<Attribute Name="rowactive"><![CDATA[
												]]></Attribute>
												<Attribute Name="nocellclick"><![CDATA[
												]]></Attribute>
												<Attribute Name="showheader">0</Attribute>
												<Attribute Name="height">269</Attribute>
												<Attribute Name="header"><![CDATA[
												]]></Attribute>
												<Attribute Name="key"><![CDATA[
												]]></Attribute>
												<Attribute Name="skin">3</Attribute>
												<Attribute Name="selectedrows"><![CDATA[
												]]></Attribute>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="selectionmode">1</Attribute>
												<Attribute Name="cssclass">ug-dt</Attribute>
												<Attribute Name="data"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">338</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="7cef928b-33bd-4a69-9776-f4ff9a718032" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="c631ae0b-c1f8-451d-8ec4-a814db3b254e" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
									<Attributes>
										<Attribute Name="target"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">6</Attribute>
										<Attribute Name="height">50</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">368</Attribute>
										<Attribute Name="meth">event</Attribute>
										<Attribute Name="enctype"><![CDATA[
										]]></Attribute>
									</Attributes>
									<Objects>
										<Object ID="dbdc791e-92a1-4de5-8375-fa13f121dd8b" Name="searchquery" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
											<Attributes>
												<Attribute Name="title"><![CDATA[
												]]></Attribute>
												<Attribute Name="top">22</Attribute>
												<Attribute Name="value"><![CDATA[
												]]></Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">308</Attribute>
												<Attribute Name="tabindex">2</Attribute>
												<Attribute Name="placeholder"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">19</Attribute>
											</Attributes>
										</Object>
										<Object ID="73fc37a0-cbc3-4dbe-9101-7f494b1f9ad2" Name="ico" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
											<Attributes>
												<Attribute Name="resource_cache"><![CDATA[
												]]></Attribute>
												<Attribute Name="hint"><![CDATA[
												]]></Attribute>
												<Attribute Name="value">bd5929c9-2fcb-4244-a0b2-a15980f01e1a</Attribute>
												<Attribute Name="height">19</Attribute>
												<Attribute Name="width">24</Attribute>
												<Attribute Name="externalurl"><![CDATA[
												]]></Attribute>
												<Attribute Name="left">19</Attribute>
											</Attributes>
										</Object>
										<Object ID="eae2f3ca-29ec-4d75-afb6-3841708d5da3" Name="users_search_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">229</Attribute>
												<Attribute Name="css"><![CDATA[
												]]></Attribute>
												<Attribute Name="value">User search</Attribute>
												<Attribute Name="left">43</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="75255122-dd03-4638-8ae0-36c1245a8822" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
							</Objects>
							<Actions>
								<Action ID="d562e8b9-4722-40a2-8cb4-623123cb49cc" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="8bff7a12-17c1-4c1d-bd77-cd0806be0f18" Name="cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">88</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">543</Attribute>
								<Attribute Name="left">185</Attribute>
							</Attributes>
						</Object>
						<Object ID="d924d783-d843-4548-a62b-180cb08b1cc1" Name="create" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Create</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">91</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">543</Attribute>
								<Attribute Name="left">290</Attribute>
							</Attributes>
						</Object>
						<Object ID="c8d032bb-34b8-4d2a-9c70-031e01e965e0" Name="edit_group_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="top">13</Attribute>
								<Attribute Name="value">Edit group</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">11</Attribute>
							</Attributes>
						</Object>
						<Object ID="0a876f41-e530-4ac8-bb39-5ad463adf774" Name="bar" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="color">CFCBD1</Attribute>
								<Attribute Name="width">384</Attribute>
								<Attribute Name="top">42</Attribute>
								<Attribute Name="left">11</Attribute>
								<Attribute Name="height">1</Attribute>
							</Attributes>
						</Object>
						<Object ID="8ad83e50-ea6f-4972-a0ff-41e39f7fb699" Name="new_group_text" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="top">13</Attribute>
								<Attribute Name="value">New group</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">374</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">11</Attribute>
							</Attributes>
						</Object>
						<Object ID="5c5c85b5-0acf-48ad-97fb-384b669fa65a" Name="save" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Save</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">22</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="align">center</Attribute>
								<Attribute Name="width">91</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">543</Attribute>
								<Attribute Name="left">290</Attribute>
							</Attributes>
						</Object>
						<Object ID="7d0942ba-19f6-4b04-86d7-fd2866a954cc" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">55</Attribute>
								<Attribute Name="height">50</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">386</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">10</Attribute>
							</Attributes>
							<Objects>
								<Object ID="b48abe52-f6a7-4a5f-92fc-b7e450ec09e9" Name="groupname_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">1</Attribute>
										<Attribute Name="value">Groupname</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">361</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="b6d71b57-1dd6-4918-92d2-61dacddbe930" Name="groupname" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">22</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">338</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">19</Attribute>
									</Attributes>
								</Object>
								<Object ID="3fae03b3-225b-4e25-bbc0-93fdecc1a650" Name="groupguid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">250</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="11c01ae4-2054-417e-b333-5490525d5842" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="dda10538-0644-44c1-8097-6e32be489b7c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="a9ed23ab-9176-4bcd-86dc-6e6346043215" Name="paginator" Type="f2870944-8c3b-5c3f-5278-07826629b2aa">
					<Attributes>
						<Attribute Name="style"><![CDATA[%(css_class)s
{
font-size: 12pt;

}

%(css_class)s TABLE
{
border: none;
text-align: center;

}

%(css_class)s TABLE TD
{

}

%(css_class)s A:hover
{
background-color: #E8E8E8;

}

%(css_class)s A
{
cursor: pointer;
display: block;

}

%(css_class)s SPAN
{
background-color: #CFCFCF;
display: block;

}]]></Attribute>
						<Attribute Name="pagescount">100</Attribute>
						<Attribute Name="top">195</Attribute>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="width">295</Attribute>
						<Attribute Name="left">619</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="9ee96a89-be87-4687-a896-f5ad9429a838" Name="add_to_group_show" Top="925" Left="228" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.add_to_group_dialog.group": self.dialog_add_to_group.form.groupguid,
    "ug.add_to_group_dialog.users": self.dialog_add_to_group.form.users,
    "ug.add_to_group_dialog": self.dialog_add_to_group
}

page.run("show_add_selected_to_group_dialog")

				]]>
				</Action>
				<Action ID="58237d9d-6d95-4856-86c2-df883f81a9fc" Name="search_groups" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "form.user.search.table": self.dialog_user.groups.cont.datatable,
    "form.user.search.throbber": self.dialog_user.groups.cont.throbber,
    "form.user.search.attention": self.dialog_user.groups.cont.attention,
}

page.run("search_groups")

				]]>
				</Action>
				<Action ID="84df63b2-3f88-46f3-bc2f-a11f39489664" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.table.attention": self.attention,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,

    "ug.delete_dialog.attention": self.dialog_delete_selected,
    "ug.delete_dialog.cancel": self.dialog_delete_selected.form.cancel,
    "ug.delete_dialog.submit": self.dialog_delete_selected.form.submit,

    "ug.add_to_group_dialog.groupname": self.dialog_add_to_group.form.groupname,
    "ug.add_to_group_dialog": self.dialog_add_to_group,
    "ug.add_to_group_dialog.submit": self.dialog_add_to_group.form.submit,
    "ug.add_to_group_dialog.cancel": self.dialog_add_to_group.form.cancel,
    "ug.add_to_group_dialog.to": self.dialog_add_to_group.form.to_text,

    "ug.toolbar.delete_selected": self.delete_selected,
    "ug.toolbar.create_user": self.create_user,
    "ug.toolbar.create_group": self.create_group,
    "ug.toolbar.add_to_group": self.add_to_group,

    "ug.groups": self.group_filter,
    "ug.groups.list": self.group_filter.group,

    "ug.group_dialog.create": self.dialog_group.create,
    "ug.group_dialog.cancel": self.dialog_group.cancel  ,
    "ug.group_dialog.save": self.dialog_group.save,
    "ug.group_dialog.title.edit": self.dialog_group.edit_group_text,
    "ug.group_dialog.title.new": self.dialog_group.new_group_text,
    "ug.group_dialog.form.groupname.title": self.dialog_group.form.groupname_title,
    "ug.group_dialog.form.groupname.input": self.dialog_group.form.groupname,
    "ug.group_dialog.form.search.input": self.dialog_group.userssearch.form.searchquery,
    "ug.group_dialog.form.search.input.title": self.dialog_group.userssearch.form.users_search_text,
    "ug.group_dialog.form.search.title": self.dialog_group.userssearch.select_users_text,

    "ug.user_dialog.create": self.dialog_user.create,
    "ug.user_dialog.cancel": self.dialog_user.cancel,
    "ug.user_dialog.save": self.dialog_user.save,
    "ug.user_dialog.title.edit": self.dialog_user.edit_user_text,
    "ug.user_dialog.title.new": self.dialog_user.new_user_text,
    "ug.user_dialog.to_groups": self.dialog_user.to_groups,
    "ug.user_dialog.to_info": self.dialog_user.to_info,
    "ug.user_dialog.groups.select.title": self.dialog_user.groups.select_group_text,
    "ug.user_dialog.form.generate_passwd": self.dialog_user.form.generate_passwd,
    "ug.user_dialog.form.keywords.input": self.dialog_user.form.keywords,
    "ug.user_dialog.form.keywords.title": self.dialog_user.form.keywords_text,
    "ug.user_dialog.form.login.input": self.dialog_user.form.login,
    "ug.user_dialog.form.login.title": self.dialog_user.form.login_text,
    "ug.user_dialog.form.password.input": self.dialog_user.form.password,
    "ug.user_dialog.form.password.title": self.dialog_user.form.password_text,
    "ug.user_dialog.form.email.input": self.dialog_user.form.cont.email,
    "ug.user_dialog.form.email.title": self.dialog_user.form.cont.email_text,
    "ug.user_dialog.form.firstname.input": self.dialog_user.form.cont.firstname,
    "ug.user_dialog.form.firstname.title": self.dialog_user.form.cont.firstname_text,
    "ug.user_dialog.form.lastname.input": self.dialog_user.form.cont.lastname,
    "ug.user_dialog.form.lastname.title": self.dialog_user.form.cont.lastname_text,
    "ug.user_dialog.form.phone.input": self.dialog_user.form.cont.phone,
    "ug.user_dialog.form.phone.title": self.dialog_user.form.cont.phone_text,
}

page.run('onload')

				]]>
				</Action>
				<Action ID="c201f9e3-2a5f-48c5-83ef-920ef7b18fea" Name="change_datasource" Top="1172" Left="455" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,
    "ug.table.attention": self.attention,
    "ug.toolbar.create_user": self.create_user,
    "ug.toolbar.create_group": self.create_group,
    "ug.toolbar.add_to_group": self.add_to_group,
    "ug.groups": self.group_filter,
    "ug.groups.list": self.group_filter.group,

}

page.run("change_datasource")

				]]>
				</Action>
				<Action ID="63f8fa8d-9b70-4f82-a464-75955e70222d" Name="add_to_group_submit" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,
    "ug.add_to_group_dialog": self.dialog_add_to_group,
    "ug.table.attention": self.attention,
    "ug.groups.list": self.group_filter.group,
}

page.run("submit_add_selected_to_group_dialog")

				]]>
				</Action>
				<Action ID="4f0e626f-6065-4065-b459-4d5caece0915" Name="submit_user_form" Top="1197" Left="1045" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,
    "ug.table.attention": self.attention,
    "ug.groups.list": self.group_filter.group,
    "ug.user_dialog": self.dialog_user,
}

page.run("submit_user_form")

				]]>
				</Action>
				<Action ID="0084a347-dab2-4d44-afc2-94da9921a74a" Name="delete_selected_show" Top="1011" Left="226" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.delete_dialog.objects": self.dialog_delete_selected.form.objlist,
    "ug.delete_dialog": self.dialog_delete_selected
}

page.run("show_delete_selected_dialog")

				]]>
				</Action>
				<Action ID="7ef3407a-0b03-407b-b7cd-8a6637b91491" Name="search_users" Top="0" Left="0" State="True">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "form.group.search.table": self.dialog_group.userssearch.cont.datatable,
    "form.group.search.throbber": self.dialog_group.userssearch.cont.throbber,
    "form.group.search.attention": self.dialog_group.userssearch.cont.attention,
}

page.run("search_users")

				]]>
				</Action>
				<Action ID="d1bdd80a-96f0-457e-b085-9b0cb7434164" Name="edit_subject" Top="1376" Left="835" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "ug.group_dialog": self.dialog_group,
    "ug.group_dialog.create": self.dialog_group.create,
    "ug.group_dialog.cancel": self.dialog_group.cancel,
    "ug.group_dialog.save": self.dialog_group.save,
    "ug.group_dialog.title.edit": self.dialog_group.edit_group_text,
    "ug.group_dialog.title.new": self.dialog_group.new_group_text,
    "ug.group_dialog.form.groupname.input": self.dialog_group.form.groupname,
    "ug.group_dialog.form.groupguid.input": self.dialog_group.form.groupguid,
    "ug.group_dialog.form.search.table": self.dialog_group.userssearch.cont.datatable,
    "ug.group_dialog.form.search.throbber": self.dialog_group.userssearch.cont.throbber,
    "ug.group_dialog.form.search.attention": self.dialog_group.userssearch.cont.attention,

    "ug.user_dialog": self.dialog_user,
    "ug.user_dialog.create": self.dialog_user.create,
    "ug.user_dialog.cancel": self.dialog_user.cancel,
    "ug.user_dialog.save": self.dialog_user.save,
    "ug.user_dialog.title.edit": self.dialog_user.edit_user_text,
    "ug.user_dialog.title.new": self.dialog_user.new_user_text,
    "ug.user_dialog.form.login": self.dialog_user.form.login,
    "ug.user_dialog.form.guid": self.dialog_user.form.guid,
    "ug.user_dialog.form.password": self.dialog_user.form.password,
    "ug.user_dialog.form.vispassword": self.dialog_user.form.vispassword,
    "ug.user_dialog.form.keywords": self.dialog_user.form.keywords,
    "ug.user_dialog.form.email": self.dialog_user.form.cont.email,
    "ug.user_dialog.form.firstname": self.dialog_user.form.cont.firstname,
    "ug.user_dialog.form.lastname": self.dialog_user.form.cont.lastname,
    "ug.user_dialog.form.phone": self.dialog_user.form.cont.phone,
    "ug.user_dialog.form.search.table": self.dialog_user.groups.cont.datatable,
    "ug.user_dialog.form.search.throbber": self.dialog_user.groups.cont.throbber,
    "ug.user_dialog.form.search.attention": self.dialog_user.groups.cont.attention,
}

page.run("table_cell_click")

				]]>
				</Action>
				<Action ID="e5c011a9-5d48-4461-8d0b-b1c665f472f4" Name="delete_selected_submit" Top="969" Left="228" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,
    "ug.delete_dialog": self.dialog_delete_selected,
    "ug.table.attention": self.attention,
    "ug.groups.list": self.group_filter.group,
}

page.run("submit_delete_selected_dialog")

				]]>
				</Action>
				<Action ID="1685e592-d333-4f22-8bd8-59065c374f44" Name="submit_group_form" Top="1161" Left="1037" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,
    "ug.table.attention": self.attention,
    "ug.groups.list": self.group_filter.group,
    "ug.group_dialog": self.dialog_group,
}

page.run("submit_group_form")

				]]>
				</Action>
				<Action ID="d1c12c3a-80cf-483b-8713-0d8193265b3e" Name="update_datatable" Top="1117" Left="280" State="False">
<![CDATA[
"""
"""

from ProSuiteUsersAndGroupsPage import ProSuiteUsersAndGroupsPage

page = ProSuiteUsersAndGroupsPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "ug.table": self.table,
    "ug.pager": self.paginator,
    "ug.per_page_list": self.per_page.perpage,
    "ug.search": self.search.query,
    "ug.table.attention": self.attention,
    "ug.groups.list": self.group_filter.group,
}

page.run("render_datatable")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="6a498a16-c438-43ef-983f-304ea441d053" Name="proadminlivesearch" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Actions>
				<Action ID="2d0f6ceb-9f67-4870-b00e-37b884d39acf" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
from prosuite_user import ProSuiteUser

if not ProSuiteUser.current_user():
    response.write("")


#######################################################
import cgi
import json
import ProAdmin


def escape_w_quote(data):
    """
    """
    return cgi.escape(data, True)


query = request.arguments.get("term", "").strip()
lquery = query.lower()

bold_template = u"""<span class="autocomplete-result">{0}</span>"""


def replace_match(value):
    """
    Replace match in string with @bold_template
    """
    start = value.lower().find(lquery)
    if start < 0:
        return value

    substr = value[start:start+len(lquery)]
    return value.replace(substr, bold_template.format(substr))


def users_filter(user):
    """
    Filter users by query
    """
    return lquery in user.name.lower() or \
       lquery in user.notification_email.lower() or \
       lquery in user.email.lower() or \
       lquery in user.phone.lower() or \
       lquery in user.cell_phone.lower()


def dump_user(user):
    """
    Dump user data
    """
    label = user.name
    if user.notification_email:
        label += u" ({})".format(user.notification_email)

    return {
        "label": replace_match(escape_w_quote(label)),
        "value": escape_w_quote(label),
        "guid":  user.guid,
    }


def groups_filter(group):
    """
    Filter groups by query
    """
    return lquery in group.name.lower()


def dump_group(group):
    """
    Dump user data
    """
    return {
        "label": replace_match(escape_w_quote(group.name)),
        "value": escape_w_quote(group.name),
        "guid":  group.guid,
    }


# filtered users
users = filter(users_filter, ProAdmin.application().get_users())
users = sorted(users, key=lambda user: user.name.lower())
users = map(dump_user, users)

# filtered groups
groups = filter(groups_filter, ProAdmin.application().get_groups())
groups = sorted(groups, key=lambda group: group.name.lower())
groups = map(dump_group, groups)

response.write(json.dumps(groups + users))

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="7f6ed206-a6a2-4e99-846d-3a1ef0e2b568" Name="servers" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="a5d8f478-5ecf-40af-9067-789aa431ffe5" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[.add-button {
  background: url("/94b78792-463f-4dbc-b5b0-377f42700dbd.png");
  background-repeat:no-repeat;
  background-position:top center;
  padding-top:20px;
  text-align:center;
  font-size:10px !important;
  text-decoration:none;
}
.delete-button {
  background:url("/69b8d848-09b3-4b80-a1eb-a28054feed31.png");
  background-repeat:no-repeat;
  background-position:top center;
  padding-top:20px;
  text-align:center;
  font-size:10px!important;
  text-decoration:none;
}
.servers-datatable table {
  height:0px !important;
  border-collapse:collapse;
  border:0px;
  margin-top:10px;
}
.servers-datatable table .thead {
  background:#fff url("/47120d64-b991-40a3-85ef-caf3e6dc07e2.png");
  background-repeat:repeat-x;
  background-position:bottom right;
  border:0px;
  border-top:1px solid #ececec;
  border-bottom:1px solid #ececec;
  border-radius: 4px;
  -moz-border-radius:4px;
  webkit-border-radius: 4px;
}
.servers-datatable table .thead .th-cell {
  border:0px;
  text-align:left;
}
.servers-datatable table .thead .th-cell-0 {
  border:0px;
  border-left:1px solid #ececec;
  border-radius: 4px;
  -moz-border-radius:4px;
  -webkit-border-radius: 4px;
  width: 18px;
}
.servers-datatable table .thead .th-cell-2,
.servers-datatable table .thead .th-cell-1 {
  width: 18px;
}
.servers-datatable table tr td {
  border:0px;
  text-align:left;
  border-bottom:1px dotted #bfbfbf;
  line-height:27px;
  cursor:pointer;
}
.servers-datatable table tbody tr.row td.cell-2 img {
  padding-top: 8px;
}
.server-edit-cell {
background:url("/8a418abc-270a-4be3-bd68-b3a25dd60e37.png") left 75% no-repeat;
width:16px;
height:16px;
cursor:pointer;
}
]]></Attribute>
						<Attribute Name="left">746</Attribute>
					</Attributes>
				</Object>
				<Object ID="86192eea-41c5-4a18-b670-bd83da2cdbfd" Name="attention" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="color">A3A3A3</Attribute>
						<Attribute Name="top">350</Attribute>
						<Attribute Name="value"><![CDATA[
						]]></Attribute>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="fontsize">16</Attribute>
						<Attribute Name="width">881</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">34</Attribute>
					</Attributes>
				</Object>
				<Object ID="292ec771-37b6-4670-a159-7d71a5061b48" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="32943431-7618-4f0c-9a06-69cc0a188a87" Name="table" Type="a2240af9-66d1-8841-0c58-ff687f3d2b3c">
					<Attributes>
						<Attribute Name="style"><![CDATA[
#%(id)s table{
	height: 0 !important;
	border-collapse: collapse;
	border: none;
	margin-top: 10px;
}
#%(id)s caption{
	text-align: left;
	font-size: 18px;
	margin-bottom: 15px;
}
#%(id)s table .thead {
	background: #fff url("/168eab1b-d9e1-9d79-01ce-0211fc938fbf.png") bottom right repeat-x;
	border: none;
	border-top: 1px solid #ececec;
	border-bottom: 1px solid #ececec;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
}
#%(id)s table .thead .th-cell {
	border: none;
	text-align:left;
}
#%(id)s table .thead .th-cell-0 {
	border: none;
	border-left:1px solid #ececec;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
	width: 18px;
}
#%(id)s table tr td{
	border: none;
	text-align: left;
	border-bottom: 1px dotted #bfbfbf;
	line-height: 27px;
}]]></Attribute>
						<Attribute Name="rowactive"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">189</Attribute>
						<Attribute Name="hiddenfields"><![CDATA[["uuid"]]]></Attribute>
						<Attribute Name="nocellclick"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">530</Attribute>
						<Attribute Name="header"><![CDATA[
						]]></Attribute>
						<Attribute Name="key"><![CDATA["uuid"]]></Attribute>
						<Attribute Name="skin">0</Attribute>
						<Attribute Name="selectedrows"><![CDATA[
						]]></Attribute>
						<Attribute Name="selectionmode">1</Attribute>
						<Attribute Name="cssclass">servers-datatable</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">882</Attribute>
						<Attribute Name="left">33</Attribute>
					</Attributes>
				</Object>
				<Object ID="aeb0516b-4e43-4bc5-9fbd-448175637d10" Name="addserverbtn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">add-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Add server</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">34</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="width">88</Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">86</Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
				<Object ID="501904cb-addb-45a9-a401-8d1a4b604a0a" Name="serverdialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Create server</Attribute>
						<Attribute Name="top">806</Attribute>
						<Attribute Name="height">420</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">800</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="3d864a52-9596-4fb4-a81c-be2902b9f888" Name="form" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">2</Attribute>
								<Attribute Name="height">420</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">800</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">2</Attribute>
							</Attributes>
							<Objects>
								<Object ID="feb1ccbb-1052-42fb-ad3e-e939f0da5809" Name="uuid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">417</Attribute>
									</Attributes>
								</Object>
								<Object ID="db34aabe-e046-4110-8716-03d90d1e4d39" Name="inssl" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="tabindex">5</Attribute>
										<Attribute Name="top">226</Attribute>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">28</Attribute>
									</Attributes>
								</Object>
								<Object ID="725044a7-3efe-4451-ac1f-2c6d425949f3" Name="resetbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">381</Attribute>
										<Attribute Name="label">Reset</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">120</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">16</Attribute>
										<Attribute Name="type">1</Attribute>
										<Attribute Name="left">340</Attribute>
									</Attributes>
								</Object>
								<Object ID="18b2142e-f5b1-444c-81d8-88736b100456" Name="outssllabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">200</Attribute>
										<Attribute Name="value">SSL</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">347</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">428</Attribute>
									</Attributes>
								</Object>
								<Object ID="1f8eb469-f0e4-4646-8244-373217fa453b" Name="inpasswd" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
									<Attributes>
										<Attribute Name="width">160</Attribute>
										<Attribute Name="top">298</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">22</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="tabindex">7</Attribute>
										<Attribute Name="left">209</Attribute>
									</Attributes>
								</Object>
								<Object ID="1af48612-8854-41bd-ac11-bd2921e7dc90" Name="inserver" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">152</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="tabindex">3</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">28</Attribute>
									</Attributes>
								</Object>
								<Object ID="9fbab840-0c41-4eb0-b6a6-3ba0b0c3f721" Name="outlogin" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="width">160</Attribute>
										<Attribute Name="top">298</Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="tabindex">11</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">428</Attribute>
									</Attributes>
								</Object>
								<Object ID="c69ed4cc-de7a-42c9-83c6-85ef2f8e2c05" Name="cancelbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">381</Attribute>
										<Attribute Name="label">Cancel</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">120</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">15</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">490</Attribute>
									</Attributes>
								</Object>
								<Object ID="b482e2c3-7863-4388-8f7e-9330bca66826" Name="inlogin" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="width">160</Attribute>
										<Attribute Name="top">298</Attribute>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="tabindex">6</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">28</Attribute>
									</Attributes>
								</Object>
								<Object ID="e0edf6d2-2486-42da-a0b2-a70062325c05" Name="outportlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">129</Attribute>
										<Attribute Name="value">Port</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">136</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">639</Attribute>
									</Attributes>
								</Object>
								<Object ID="a0c1e215-0aef-46c8-881f-162cc2ed03f5" Name="outssl" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="tabindex">10</Attribute>
										<Attribute Name="top">226</Attribute>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">428</Attribute>
									</Attributes>
								</Object>
								<Object ID="48a80100-e61a-45ce-9fe1-4a2ea2d5234b" Name="submitbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">381</Attribute>
										<Attribute Name="label">Submit</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">120</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="tabindex">14</Attribute>
										<Attribute Name="left">640</Attribute>
									</Attributes>
								</Object>
								<Object ID="24ec53d9-509b-414e-a63c-3d19ed1f0050" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="color">DCD6D6</Attribute>
										<Attribute Name="top">90</Attribute>
										<Attribute Name="height">245</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">1</Attribute>
										<Attribute Name="left">400</Attribute>
									</Attributes>
								</Object>
								<Object ID="20395f9f-61ba-4a79-ac5e-fa2d1c91dd65" Name="servernamelabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">13</Attribute>
										<Attribute Name="value">Name</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">330</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">17</Attribute>
									</Attributes>
								</Object>
								<Object ID="cad2b7cd-9e4a-4f07-964a-08b8da07dd0b" Name="outserver" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">152</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">181</Attribute>
										<Attribute Name="tabindex">8</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">428</Attribute>
									</Attributes>
								</Object>
								<Object ID="de7e8e39-b617-4052-8c16-d7c6551e8d67" Name="outloginlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">154</Attribute>
										<Attribute Name="top">273</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Login</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">428</Attribute>
									</Attributes>
								</Object>
								<Object ID="8ec6d7f4-9497-4144-9e18-c306f94e9c48" Name="outserverlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">129</Attribute>
										<Attribute Name="value">Server</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">154</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">428</Attribute>
									</Attributes>
								</Object>
								<Object ID="01a37ca5-e789-47f0-b00e-44fde9222e5b" Name="checkconn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">381</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">178</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="left">17</Attribute>
									</Attributes>
								</Object>
								<Object ID="2b6c65da-6f00-4036-acba-70a8e845ef4a" Name="inportlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">129</Attribute>
										<Attribute Name="value">Port</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">136</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">239</Attribute>
									</Attributes>
								</Object>
								<Object ID="dd14b5c9-4c64-4677-bfa3-63cd9d5624b1" Name="outport" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">152</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">64</Attribute>
										<Attribute Name="tabindex">9</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">639</Attribute>
									</Attributes>
								</Object>
								<Object ID="5d349649-d117-4b3e-b422-36dd98901dcf" Name="disablesettings" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
									<Attributes>
										<Attribute Name="tabindex">13</Attribute>
										<Attribute Name="width">205</Attribute>
										<Attribute Name="top">7</Attribute>
										<Attribute Name="label">Disabled</Attribute>
										<Attribute Name="left">570</Attribute>
									</Attributes>
								</Object>
								<Object ID="444c3d12-1fdf-4348-9be8-bd208006d9f8" Name="servername" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">36</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">330</Attribute>
										<Attribute Name="focused">1</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">17</Attribute>
									</Attributes>
								</Object>
								<Object ID="16151cfe-e6e8-4078-808e-41e26a103e0e" Name="inport" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">152</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">64</Attribute>
										<Attribute Name="tabindex">4</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">239</Attribute>
									</Attributes>
								</Object>
								<Object ID="6a0ada1e-7a68-4d3d-8f7e-d45e33d5db6f" Name="inloginlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">154</Attribute>
										<Attribute Name="top">273</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Login</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">28</Attribute>
									</Attributes>
								</Object>
								<Object ID="f3554f92-319e-4cfe-887d-bcd6a38d058a" Name="outpasswdlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">154</Attribute>
										<Attribute Name="top">273</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Password</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">609</Attribute>
									</Attributes>
								</Object>
								<Object ID="c3170866-a445-4e92-b846-ba930dc4d1ff" Name="inserverlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">129</Attribute>
										<Attribute Name="value">Server</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">154</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">28</Attribute>
									</Attributes>
								</Object>
								<Object ID="1c996296-957e-468e-97ba-4d4c6f821778" Name="outpasswd" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
									<Attributes>
										<Attribute Name="width">160</Attribute>
										<Attribute Name="top">298</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">22</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="tabindex">12</Attribute>
										<Attribute Name="left">609</Attribute>
									</Attributes>
								</Object>
								<Object ID="c13dc287-3501-4b41-96fd-7095bb63e389" Name="bar2" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="color">DCD6D6</Attribute>
										<Attribute Name="top">80</Attribute>
										<Attribute Name="height">1</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">766</Attribute>
										<Attribute Name="left">17</Attribute>
									</Attributes>
								</Object>
								<Object ID="e420280f-6fc7-4b69-abc2-a204177d43f5" Name="predefined" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
									<Attributes>
										<Attribute Name="size"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">36</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="zindex">0</Attribute>
										<Attribute Name="width">205</Attribute>
										<Attribute Name="selectedvalue"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">570</Attribute>
									</Attributes>
								</Object>
								<Object ID="b3176370-60d0-4cfa-b6bf-79906aeb8f7a" Name="incomingtext" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="color">757575</Attribute>
										<Attribute Name="top">98</Attribute>
										<Attribute Name="value">Incoming</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">384</Attribute>
										<Attribute Name="fontsize">14</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">17</Attribute>
									</Attributes>
								</Object>
								<Object ID="71b3b503-30ce-4f49-8b42-1d3a44f45746" Name="inpasswdlabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="width">154</Attribute>
										<Attribute Name="top">273</Attribute>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="value">Password</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">209</Attribute>
									</Attributes>
								</Object>
								<Object ID="046a933a-1a8c-4438-90a9-f9c0c9d2b555" Name="outgoingtext" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="color">757575</Attribute>
										<Attribute Name="top">98</Attribute>
										<Attribute Name="value">Outgoing</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">359</Attribute>
										<Attribute Name="fontsize">14</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">417</Attribute>
									</Attributes>
								</Object>
								<Object ID="68c5eea9-17e7-407b-ab91-559fb670368d" Name="inssllabel" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="hint"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">200</Attribute>
										<Attribute Name="value">SSL</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">347</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">28</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="6a04a85f-3494-48d5-8180-77849ed83e02" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e8588628-a329-409c-90fe-15a9ad9c85b6" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="b4b4ba0d-4afb-4036-9363-4c7cc4f75fba" Name="serversdelete" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Delete selected settings</Attribute>
						<Attribute Name="top">1275</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">382</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="33b88537-4880-427c-957a-40423e3c0520" Name="cancelbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">163</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">120</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">90</Attribute>
							</Attributes>
						</Object>
						<Object ID="fd5cd1d5-092a-4c0d-960b-ff451f05ccda" Name="submitbtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">163</Attribute>
								<Attribute Name="label">Delete</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">120</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">240</Attribute>
							</Attributes>
						</Object>
						<Object ID="d37c730d-43f7-4e71-9af7-69f8d7f7b714" Name="hpt" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">144</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">350</Attribute>
								<Attribute Name="htmlcode"><![CDATA[<ul>{}</ul>]]></Attribute>
								<Attribute Name="left">10</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="20575bb2-0690-4296-ba7c-97868bbfc600" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="979cf8e6-6641-47ed-a422-5ddac4bda38b" Name="checkconndialog" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="zindex">10</Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title">Test connection to server</Attribute>
						<Attribute Name="top">1495</Attribute>
						<Attribute Name="height">480</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">730</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="192f8098-ca45-41b5-b5b0-c003cde68765" Name="closebtn" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">441</Attribute>
								<Attribute Name="label">Close</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">149</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">567</Attribute>
							</Attributes>
						</Object>
						<Object ID="a4426153-ecbc-4abf-8009-c250a506ef36" Name="output" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">410</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">730</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">0</Attribute>
							</Attributes>
							<Objects>
								<Object ID="e805817e-987c-41a9-94d3-78565cfd420a" Name="logs" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">10</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="height">390</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">710</Attribute>
										<Attribute Name="multiline">1</Attribute>
										<Attribute Name="mode">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">10</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="71cb31b8-1ffb-489c-8b7b-c800e651f1a4" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="1e97aabb-9f2f-4d86-b6d9-06bedd7eb549" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="2af41a9b-de96-4875-a3ca-2e0521cfccde" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">846</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="dc5ae461-e9f6-4ebd-b20d-4d5280e99c7b" Name="pagetitle" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">157</Attribute>
						<Attribute Name="value">Application Settings</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">697</Attribute>
						<Attribute Name="fontsize">32</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">33</Attribute>
					</Attributes>
				</Object>
				<Object ID="3fd2eae1-941f-42e7-98c4-24ba2233d386" Name="checktesttimer" Type="d07ae2ab-62fe-ff98-682a-abc15eb17f9c">
					<Attributes>
						<Attribute Name="top">1445</Attribute>
						<Attribute Name="left">680</Attribute>
					</Attributes>
				</Object>
				<Object ID="e4c4f008-e74e-4bfa-97fc-a8682aa0a8fd" Name="page_js" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">796</Attribute>
					</Attributes>
				</Object>
				<Object ID="9e8d24fb-aadf-4446-ae38-c6618c4e4475" Name="delselectedbtn" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname">delete-button</Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text">Delete selected</Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">34</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="align">center</Attribute>
						<Attribute Name="width">87</Attribute>
						<Attribute Name="fontsize">10</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">86</Attribute>
						<Attribute Name="left">109</Attribute>
					</Attributes>
				</Object>
				<Object ID="4d593afb-3e70-4e0b-8667-31fd0b6ec502" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="d31a0177-e94d-467d-8133-f6bc1122e030" Name="delete_selected_start" Top="65" Left="781" State="False">
<![CDATA[
"""
"""

from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "servers.table.attention": self.attention,
    "servers.table": self.table,

    "dialog.delete": self.serversdelete,
    "dialog.delete.hpt": self.serversdelete.hpt,
}

page.run('delete_selected_start')

				]]>
				</Action>
				<Action ID="369ea050-089d-4b2a-a891-77983f9bee87" Name="checktest_update" Top="448" Left="793" State="False">
<![CDATA[
"""
"""

from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.checktask": self.checkconndialog,
    "dialog.checktask.output": self.checkconndialog.output.logs,
    "dialog.checktask.timer": self.checktesttimer,

}

page.run('update_checktest_output')

				]]>
				</Action>
				<Action ID="8f7663d0-36cd-4016-8cbe-01e5572732c4" Name="cell_click" Top="353" Left="229" State="False">
<![CDATA[
"""
"""

from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.new": self.serverdialog,
    "dialog.new.disabled": self.serverdialog.form.disablesettings,
    "dialog.new.inserver": self.serverdialog.form.inserver,
    "dialog.new.inport": self.serverdialog.form.inport,
    "dialog.new.inlogin": self.serverdialog.form.inlogin,
    "dialog.new.inpasswd": self.serverdialog.form.inpasswd,
    "dialog.new.inssl": self.serverdialog.form.inssl,
    "dialog.new.outserver": self.serverdialog.form.outserver,
    "dialog.new.outport": self.serverdialog.form.outport,
    "dialog.new.outlogin": self.serverdialog.form.outlogin,
    "dialog.new.outpasswd": self.serverdialog.form.outpasswd,
    "dialog.new.outssl": self.serverdialog.form.outssl,
    "dialog.new.servername": self.serverdialog.form.servername,
    "dialog.new.uuid": self.serverdialog.form.uuid,
}

page.run('table_cell_click')

				]]>
				</Action>
				<Action ID="f24b0f32-8af3-43d1-9c35-944999649487" Name="delete_selected_submit" Top="154" Left="781" State="False">
<![CDATA[
"""
"""

from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "servers.table.attention": self.attention,
    "servers.table": self.table,

    "dialog.delete": self.serversdelete,
}

page.run('delete_selected_submit')

				]]>
				</Action>
				<Action ID="5d8367fa-9370-4ee3-bc83-2c58482b337a" Name="load_predefined" Top="0" Left="778" State="False">
<![CDATA[
"""
"""

from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.new.inserver": self.serverdialog.form.inserver,
    "dialog.new.inport": self.serverdialog.form.inport,
    "dialog.new.inlogin": self.serverdialog.form.inlogin,
    "dialog.new.inpasswd": self.serverdialog.form.inpasswd,
    "dialog.new.inssl": self.serverdialog.form.inssl,
    "dialog.new.outserver": self.serverdialog.form.outserver,
    "dialog.new.outport": self.serverdialog.form.outport,
    "dialog.new.outlogin": self.serverdialog.form.outlogin,
    "dialog.new.outpasswd": self.serverdialog.form.outpasswd,
    "dialog.new.outssl": self.serverdialog.form.outssl,
}

page.run('load_predefined')

				]]>
				</Action>
				<Action ID="72b1862e-5040-4eff-aa56-8ccb18ebe555" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
import managers

tids = [
#    "34f6ee59-9c50-4503-97c1-86c4e86bd1b7",
    "0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf",
]
for tid in tids:
    self.object.types[tid] = managers.xml_manager.get_type(tid)


from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.new.cancel": self.serverdialog.form.cancelbtn,
    "dialog.new.disabled": self.serverdialog.form.disablesettings,
    "dialog.new.incoming.text": self.serverdialog.form.incomingtext,
    "dialog.new.inlogin": self.serverdialog.form.inlogin,
    "dialog.new.inlogin.label": self.serverdialog.form.inloginlabel,
    "dialog.new.inpasswd": self.serverdialog.form.inpasswd,
    "dialog.new.inpasswd.label": self.serverdialog.form.inpasswdlabel,
    "dialog.new.inport": self.serverdialog.form.inport,
    "dialog.new.inport.label": self.serverdialog.form.inportlabel,
    "dialog.new.inserver": self.serverdialog.form.inserver,
    "dialog.new.inserver.label": self.serverdialog.form.inserverlabel,
    "dialog.new.inssl": self.serverdialog.form.inssl,
    "dialog.new.inssl.label": self.serverdialog.form.inssllabel,
    "dialog.new.outgoing.text": self.serverdialog.form.outgoingtext,
    "dialog.new.outlogin": self.serverdialog.form.outlogin,
    "dialog.new.outlogin.label": self.serverdialog.form.outloginlabel,
    "dialog.new.outpasswd": self.serverdialog.form.outpasswd,
    "dialog.new.outpasswd.label": self.serverdialog.form.outpasswdlabel,
    "dialog.new.outport": self.serverdialog.form.outport,
    "dialog.new.outport.label": self.serverdialog.form.outportlabel,
    "dialog.new.outserver": self.serverdialog.form.outserver,
    "dialog.new.outserver.label": self.serverdialog.form.outserverlabel,
    "dialog.new.outssl": self.serverdialog.form.outssl,
    "dialog.new.outssl.label": self.serverdialog.form.outssllabel,
    "dialog.new.predefined": self.serverdialog.form.predefined,
    "dialog.new.reset": self.serverdialog.form.resetbtn,
    "dialog.new.servername": self.serverdialog.form.servername,
    "dialog.new.servername.label": self.serverdialog.form.servernamelabel,
    "dialog.new.submit": self.serverdialog.form.submitbtn,
    "dialog.new.checkconn": self.serverdialog.form.checkconn,

    "dialog.checktask": self.checkconndialog,
    "dialog.checktask.close": self.checkconndialog.closebtn,

    "dialog.delete": self.serversdelete,
    "dialog.delete.submit": self.serversdelete.submitbtn,
    "dialog.delete.cancel": self.serversdelete.cancelbtn,

    "servers.title": self.pagetitle,
    "servers.table.attention": self.attention,
    "servers.table": self.table,

    "toolbar.buttons.add": self.addserverbtn,
    "toolbar.buttons.delete": self.delselectedbtn,


}

page.run('onload')

				]]>
				</Action>
				<Action ID="df531a75-bdfd-40df-abd7-44ffc3a3fa7e" Name="submit_server" Top="230" Left="229" State="False">
<![CDATA[
"""
"""

from ProMailServersPage import ProMailServersPage


page = ProMailServersPage(self)
page.vdom_objects = {
    "growl": self.growl,

    "dialog.new": self.serverdialog,

    "dialog.checktask": self.checkconndialog,
    "dialog.checktask.output": self.checkconndialog.output.logs,
    "dialog.checktask.timer": self.checktesttimer,


    "servers.table.attention": self.attention,
    "servers.table": self.table,

}

page.run('submit_server')

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="0c43c57e-2efc-4765-99fe-1608a7ee2206" Name="test2" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="68c9496d-4a79-4d54-be64-59a1d17da136" Name="button1" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">7</Attribute>
					</Attributes>
				</Object>
				<Object ID="73ff94e3-b8c2-4742-b13f-8326e0f421c7" Name="hpt" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">2</Attribute>
						<Attribute Name="height">297</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">474</Attribute>
						<Attribute Name="htmlcode"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">191</Attribute>
					</Attributes>
				</Object>
				<Object ID="413a91bf-73d2-49ba-b841-6d8872bdf3b3" Name="button2" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[
						]]></Attribute>
						<Attribute Name="containerlink"><![CDATA[
						]]></Attribute>
						<Attribute Name="disabledimg"><![CDATA[
						]]></Attribute>
						<Attribute Name="hint"><![CDATA[
						]]></Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="image"><![CDATA[
						]]></Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="link"><![CDATA[
						]]></Attribute>
						<Attribute Name="rollover"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">91</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="4c5457f7-9c70-4c2f-9c01-4e4e4d466cc2" Name="submit" Top="0" Left="0" State="False">
<![CDATA[
raise Exception(session.id)

				]]>
				</Action>
				<Action ID="b348d995-49b6-453d-a120-c0cb338b39a1" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
import xapian
raise Exception(xapian.sortable_unserialise(''))

dbpath = application.storage.abs_path('xapian/test')
try:
    application.storage.mkdir(dbpath)
except:
    raise
db = xapian.WritableDatabase(dbpath, xapian.DB_CREATE_OR_OPEN).close()
db = xapian.Database(dbpath)

queryparser = xapian.QueryParser()
queryparser.set_database(db)
#queryparser.set_stemmer(xapian.Stem("en"))
#queryparser.set_stemming_strategy(queryparser.STEM_SOME)
queryparser.add_prefix(u"заголовок", "S")
queryparser.add_prefix(u"описание", "XD")
# and add in value range processors
queryparser.add_valuerangeprocessor(
    xapian.DateValueRangeProcessor(0, "title:", True)
)
#queryparser.add_valuerangeprocessor(
#    xapian.NumberValueRangeProcessor(1, '')
#)

flags = xapian.QueryParser.FLAG_PHRASE\
                        | xapian.QueryParser.FLAG_BOOLEAN\
                        | xapian.QueryParser.FLAG_LOVEHATE\
                        | xapian.QueryParser.FLAG_WILDCARD

query = queryparser.parse_query("""описание:01/01/2000""")

#query2 = queryparser.parse_query("""asdasds""", flags)

#query = xapian.Query(xapian.Query.OP_AND_NOT, query1, query2)
#query = queryparser.parse_query(""" title:"test phrase?" """ )
#query = xapian.Query(xapian.Query.OP_VALUE_RANGE, 1, 10, 20)
#query = xapian.Query(xapian.Query.OP_PHRASE,)
#query = xapian.Query(xapian.Query.OP_PHRASE, [xapian.Query("Sserr!!!gey", 1,1), xapian.Query("Svlad",1,2), xapian.Query("Svlad3",1,3)])
raise Exception(query)

				]]>
				</Action>
				<Action ID="efeb9f9a-1bff-468c-831a-614d30ba2f88" Name="test" Top="424" Left="665" State="False">
<![CDATA[
import time

time.sleep(10)
raise Exception("test")

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="acb3894d-8aaf-405d-bd0e-2e62aa4cd68c" Name="remote_scheme" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description">No description</Attribute>
				<Attribute Name="title">Remote Scheme</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="fc69a4d6-8c9f-4beb-b0d7-38caf3378e3a" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">744</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="7ea2ea9b-c3c6-4567-89ef-89b2938118d6" Name="copy_width_maker" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
						<Attribute Name="source_object_cache">e151ef64-48e1-4717-bb74-7c63f5c68e6b</Attribute>
					</Attributes>
				</Object>
				<Object ID="8561e4f3-3cf9-4a7d-b632-b3e448d6f191" Name="container_remote" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">276</Attribute>
						<Attribute Name="height">285</Attribute>
						<Attribute Name="classname">form_connection</Attribute>
						<Attribute Name="width">445</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">521</Attribute>
					</Attributes>
					<Objects>
						<Object ID="b0d81f69-10ba-4f97-ac78-147fffb5c3b9" Name="form_remote" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="zindex">9</Attribute>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">285</Attribute>
								<Attribute Name="classname">rdb_scheme</Attribute>
								<Attribute Name="width">445</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="6fb34b2e-4694-42c8-af7f-82d91d4990c4" Name="passwd" Type="6555559f-3092-49bd-8b91-ca15ba10a373">
									<Attributes>
										<Attribute Name="top">171</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">279</Attribute>
										<Attribute Name="left">146</Attribute>
										<Attribute Name="tabindex">3</Attribute>
									</Attributes>
								</Object>
								<Object ID="4f652211-b5be-44aa-97b7-0bcfae82ef3a" Name="text_login" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">128</Attribute>
										<Attribute Name="value">Login:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">100</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
								<Object ID="3c05d0d5-a459-4bb2-9a4d-a87703ecc947" Name="login" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">123</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">279</Attribute>
										<Attribute Name="tabindex">2</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">146</Attribute>
									</Attributes>
								</Object>
								<Object ID="3dad7b14-25c6-4bf5-8a48-8703f3110551" Name="formradiogroup_remote" Type="5ec776c5-23f6-4098-a69d-600b08b220b0">
									<Attributes>
										<Attribute Name="width">443</Attribute>
									</Attributes>
									<Objects>
										<Object ID="ad3f1604-63cb-46a0-9106-61d9514afab2" Name="hidden_radio" Type="213f1e8c-8a3e-452b-af33-4ca3139fe960">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="visible">0</Attribute>
												<Attribute Name="top">36</Attribute>
												<Attribute Name="height">9</Attribute>
												<Attribute Name="left">8</Attribute>
											</Attributes>
										</Object>
										<Object ID="e73dc0dc-0d8a-4bb3-8d58-1b65e3f9aa78" Name="formradiobutton_remote" Type="213f1e8c-8a3e-452b-af33-4ca3139fe960">
											<Attributes>
												<Attribute Name="top">16</Attribute>
												<Attribute Name="height">20</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">220</Attribute>
												<Attribute Name="label">ProAdmin connection</Attribute>
												<Attribute Name="left">8</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="8ab56a9e-76e6-4632-8e60-edf21ff9c48f" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="3d24eb97-5497-4c5b-aa1d-55e657f03b6e" Name="text_password" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">178</Attribute>
										<Attribute Name="value">Password:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">100</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
								<Object ID="910db327-a337-48e7-8c05-5ad6c122345f" Name="apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">228</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">81</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">349</Attribute>
									</Attributes>
								</Object>
								<Object ID="7584d9a4-350e-402e-95fb-c79e8b529909" Name="container_disable" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
									<Attributes>
										<Attribute Name="zindex">10</Attribute>
										<Attribute Name="resource_cache"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">52</Attribute>
										<Attribute Name="height">233</Attribute>
										<Attribute Name="classname">container_disable</Attribute>
										<Attribute Name="width">445</Attribute>
										<Attribute Name="backgroundimage"><![CDATA[
										]]></Attribute>
										<Attribute Name="securitycode"><![CDATA[
										]]></Attribute>
										<Attribute Name="backgroundcolor"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">0</Attribute>
									</Attributes>
									<Actions>
										<Action ID="8edd9491-4e1b-4daf-bb8d-1869e2fcba00" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
								<Object ID="45aed345-8bc8-4d30-9ba7-bdf95ebe904c" Name="host" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
									<Attributes>
										<Attribute Name="title"><![CDATA[
										]]></Attribute>
										<Attribute Name="top">73</Attribute>
										<Attribute Name="value"><![CDATA[
										]]></Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">279</Attribute>
										<Attribute Name="tabindex">1</Attribute>
										<Attribute Name="placeholder"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">146</Attribute>
									</Attributes>
								</Object>
								<Object ID="ef2ddaa5-e34f-48a9-8d6f-9f1d6e054fbb" Name="text_host" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">78</Attribute>
										<Attribute Name="value">Host:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">100</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">16</Attribute>
									</Attributes>
								</Object>
								<Object ID="b4b687c2-96cc-4e33-988e-a29e522d65be" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="color">DCDCDC</Attribute>
										<Attribute Name="top">50</Attribute>
										<Attribute Name="height">2</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">416</Attribute>
										<Attribute Name="left">14</Attribute>
									</Attributes>
								</Object>
								<Object ID="f6eff9ed-7819-4f72-ab9b-2aff60941764" Name="reset" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">228</Attribute>
										<Attribute Name="label">Reset</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">81</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">255</Attribute>
									</Attributes>
								</Object>
								<Object ID="2b1b2128-1435-4c1e-956e-94d4c04b88a9" Name="testsso" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">228</Attribute>
										<Attribute Name="label">Test SSO</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">158</Attribute>
									</Attributes>
								</Object>
								<Object ID="ec8fab44-a901-4c9a-ad1b-2001b7a710d0" Name="bar_test_res" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
									<Attributes>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="color">DCDCDC</Attribute>
										<Attribute Name="top">215</Attribute>
										<Attribute Name="height">2</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">416</Attribute>
										<Attribute Name="left">14</Attribute>
									</Attributes>
								</Object>
								<Object ID="71ddbb39-3830-4ae3-a50d-ed767cd3f542" Name="testconnection" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">228</Attribute>
										<Attribute Name="label">Test connection</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">133</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">13</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="b5d0e4a7-f9f0-49d8-973e-53885ff53324" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e32e98b1-e4f4-4203-8ad7-a14ddbdd6efa" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="68364914-c8ee-4787-9cef-6d244945ad3c" Name="dialog_sso_success" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">835</Attribute>
						<Attribute Name="height">99</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">441</Attribute>
					</Attributes>
					<Objects>
						<Object ID="c415b946-a4c2-4a04-8d26-6e425ce5b622" Name="success" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="top">14</Attribute>
								<Attribute Name="value">SSO works.</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">278</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">12</Attribute>
							</Attributes>
						</Object>
						<Object ID="1a44d779-9a07-4f23-9d19-7e0e8d4e8e37" Name="close" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Close</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">24</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">128</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">64</Attribute>
								<Attribute Name="left">162</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e0a47016-b607-4431-929d-b56200f13268" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="cd418d30-4ce8-4bd1-8e60-527db7c709d8" Name="container_local" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">201</Attribute>
						<Attribute Name="height">50</Attribute>
						<Attribute Name="classname">form_connection</Attribute>
						<Attribute Name="width">445</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">521</Attribute>
					</Attributes>
					<Objects>
						<Object ID="fb9cf43d-6301-4e52-8169-1cd9d4681697" Name="form_local" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
							<Attributes>
								<Attribute Name="zindex">9</Attribute>
								<Attribute Name="target"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">50</Attribute>
								<Attribute Name="classname">rdb_scheme</Attribute>
								<Attribute Name="width">445</Attribute>
								<Attribute Name="meth">event</Attribute>
								<Attribute Name="enctype"><![CDATA[
								]]></Attribute>
							</Attributes>
							<Objects>
								<Object ID="6046ca52-f45e-456e-8a2b-5e082a7926c8" Name="formbutton_apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
									<Attributes>
										<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
										<Attribute Name="top">12</Attribute>
										<Attribute Name="label">Apply</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="visible">0</Attribute>
										<Attribute Name="skin">1</Attribute>
										<Attribute Name="type">2</Attribute>
										<Attribute Name="left">330</Attribute>
									</Attributes>
								</Object>
								<Object ID="902f7f7f-35ff-4910-be63-05be79565d8a" Name="formradiogroup_local" Type="5ec776c5-23f6-4098-a69d-600b08b220b0">
									<Attributes>
										<Attribute Name="width">291</Attribute>
									</Attributes>
									<Objects>
										<Object ID="1b149761-fd59-4319-a4fc-30437df5dcd6" Name="hidden_radio" Type="213f1e8c-8a3e-452b-af33-4ca3139fe960">
											<Attributes>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="visible">0</Attribute>
												<Attribute Name="top">36</Attribute>
												<Attribute Name="height">9</Attribute>
												<Attribute Name="left">8</Attribute>
											</Attributes>
										</Object>
										<Object ID="6a89d62b-7306-41e6-bd18-855ef9c8c557" Name="formradiobutton_local" Type="213f1e8c-8a3e-452b-af33-4ca3139fe960">
											<Attributes>
												<Attribute Name="top">14</Attribute>
												<Attribute Name="height">22</Attribute>
												<Attribute Name="classname"><![CDATA[
												]]></Attribute>
												<Attribute Name="width">220</Attribute>
												<Attribute Name="state">1</Attribute>
												<Attribute Name="label">Standalone</Attribute>
												<Attribute Name="left">8</Attribute>
											</Attributes>
										</Object>
									</Objects>
									<Actions>
										<Action ID="1c78b7e7-91c1-48c3-8b5a-a846ea473ff8" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

										
										]]>
										</Action>
									</Actions>
								</Object>
							</Objects>
							<Actions>
								<Action ID="5d7afe29-afe5-4a67-aa04-473efe455898" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
					</Objects>
					<Actions>
						<Action ID="8e95fc14-e326-4e70-b2a3-e3658b516f40" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="f8203e05-57d8-4fbc-8046-b6517e4a1343" Name="dialog_test_sso" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">799</Attribute>
						<Attribute Name="height">121</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="skin">3</Attribute>
					</Attributes>
					<Objects>
						<Object ID="096f7770-715a-4633-8684-af5e7d65484d" Name="apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Apply</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">24</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">117</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">82</Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="73a0c923-f3aa-4dc9-9092-aa9b607cbc20" Name="warning" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="top">14</Attribute>
								<Attribute Name="value">You&apos;ll be redirected to ProAdmin. If something wrong press back button in your browser.</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">278</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">13</Attribute>
							</Attributes>
						</Object>
						<Object ID="2b986775-171e-4bb3-93af-81fec034f276" Name="cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">24</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">117</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">82</Attribute>
								<Attribute Name="left">174</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="83646371-8c36-41c4-9e8e-d3eb89631507" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="77182e0a-f202-47b3-860c-6226f2659a25" Name="text_current_scheme" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">2</Attribute>
						<Attribute Name="top">151</Attribute>
						<Attribute Name="value">Current scheme</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
				<Object ID="cf38ae13-15ba-45f9-b38c-28eb3afb68c3" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="data"><![CDATA[div#proadmin_test_out {
  padding: 0 21px 21px 21px;
  border: 2px solid gainsboro;
  background-color: rgb(238, 238, 238);
}
div#proadmin_test_out div {
  margin-top: 10px;
}
.form_connection{
  border:2px solid #dcdcdc;
  background:#eee;
}
.form_connection_state{
  border:2px solid #dcdcdc;
  background:#fff;
}
.container_disable{
  opacity:0.8;
  background:#eee;
}
.failed{
  color:#d0302d;
  background: url("/a3946d3b-bef6-443d-a48d-ad4adb8ab502.res") no-repeat;
}
.success{
  color:#3b7820;
  background: url("/255375a9-4979-4785-a942-de2d233f03df.res") no-repeat;
}
.failed span, .success span{
  margin-left:20px;
}
.rdb_scheme div div label{
  font-size:16px;
  font-weight:bold;
  margin-left:8px;
}]]></Attribute>
						<Attribute Name="left">696</Attribute>
					</Attributes>
				</Object>
				<Object ID="672221cb-eadb-4579-a91d-2996b1f8dde5" Name="test_out" Type="7085bd26-e653-490b-908f-61208c260a86">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="width">449</Attribute>
						<Attribute Name="top">588</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="htmlcode"><![CDATA[<div id="proadmin_test_out"><h2>{} :</h2>{}</div>]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">521</Attribute>
					</Attributes>
				</Object>
				<Object ID="4d81632e-d101-4a0e-ba41-18ba738975e8" Name="text_set_scheme" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="zindex">2</Attribute>
						<Attribute Name="top">151</Attribute>
						<Attribute Name="value">Set scheme</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">521</Attribute>
					</Attributes>
				</Object>
				<Object ID="e0e73445-005e-4c70-bb5a-dea8607516bf" Name="container_remote_state" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">402</Attribute>
						<Attribute Name="top">201</Attribute>
						<Attribute Name="height">468</Attribute>
						<Attribute Name="classname">form_connection_state</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8de9233a-54d3-4beb-b82b-7c66790832e0" Name="hpt_host" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="top">67</Attribute>
								<Attribute Name="height">45</Attribute>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="width">366</Attribute>
								<Attribute Name="htmlcode"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">14</Attribute>
							</Attributes>
						</Object>
						<Object ID="11fc34ca-ed23-440c-ba78-1dcbee3f2283" Name="hpt_conn" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="top">112</Attribute>
								<Attribute Name="height">145</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">371</Attribute>
								<Attribute Name="htmlcode"><![CDATA[<div id="proadmin_test_out"><h2>{} :</h2>{}</div>]]></Attribute>
								<Attribute Name="left">14</Attribute>
							</Attributes>
						</Object>
						<Object ID="c719cd2a-b197-428b-9478-6b5a2016a0d0" Name="refresh" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink">acb3894d-8aaf-405d-bd0e-2e62aa4cd68c</Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Refresh</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">23</Attribute>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="width">75</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">428</Attribute>
								<Attribute Name="left">310</Attribute>
							</Attributes>
						</Object>
						<Object ID="22d3c8a9-7468-4c74-a980-c4ae5dd1e641" Name="testsso" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Test SSO</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">23</Attribute>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="width">75</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">428</Attribute>
								<Attribute Name="left">222</Attribute>
							</Attributes>
						</Object>
						<Object ID="b9d4c44c-d6b4-4911-901b-09c291a02b7b" Name="bar1" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
							<Attributes>
								<Attribute Name="color">DCDCDC</Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="height">2</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="left">14</Attribute>
							</Attributes>
						</Object>
						<Object ID="7dd63513-dc6a-4078-9fd5-12671d48ae99" Name="restart" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s a.disabled span {
color: #999 !important;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Restart connection</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">23</Attribute>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="width">163</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">428</Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
						</Object>
						<Object ID="dba6aac2-cbf2-4f87-a09d-98a50b344047" Name="image_current" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">15</Attribute>
								<Attribute Name="value">9720cab2-23dd-42d3-b648-15a4d1d3098b</Attribute>
								<Attribute Name="height">16</Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">364</Attribute>
							</Attributes>
						</Object>
						<Object ID="38887dbb-2e54-4562-9e5c-c3230b4a75a9" Name="container_proadmin" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
							<Attributes>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="designcolor">ACEEEE</Attribute>
								<Attribute Name="top">278</Attribute>
								<Attribute Name="height">121</Attribute>
								<Attribute Name="classname">form_connection</Attribute>
								<Attribute Name="width">370</Attribute>
								<Attribute Name="backgroundimage"><![CDATA[
								]]></Attribute>
								<Attribute Name="securitycode"><![CDATA[
								]]></Attribute>
								<Attribute Name="backgroundcolor"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">15</Attribute>
							</Attributes>
							<Objects>
								<Object ID="3c60014f-fff3-4dc2-9715-1d322243c3e2" Name="text_users" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">84</Attribute>
										<Attribute Name="value">Users:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">350</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">7</Attribute>
									</Attributes>
								</Object>
								<Object ID="2eb618d6-ac7b-49a6-a41b-8ea3e76bf3c0" Name="text_sync_status" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">37</Attribute>
										<Attribute Name="value">Sync thread status:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">350</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">7</Attribute>
									</Attributes>
								</Object>
								<Object ID="c472935b-3c63-4561-ac06-d98de5aafe01" Name="text_last_sync" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">13</Attribute>
										<Attribute Name="value">Last sync:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">351</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">6</Attribute>
									</Attributes>
								</Object>
								<Object ID="66d169ac-6d43-4d82-87d1-0118d82aac0c" Name="text_objects" Type="73a54f2e-4001-4676-93a0-804048a57081">
									<Attributes>
										<Attribute Name="top">60</Attribute>
										<Attribute Name="value">Objects:</Attribute>
										<Attribute Name="classname"><![CDATA[
										]]></Attribute>
										<Attribute Name="width">350</Attribute>
										<Attribute Name="css"><![CDATA[
										]]></Attribute>
										<Attribute Name="left">7</Attribute>
									</Attributes>
								</Object>
							</Objects>
							<Actions>
								<Action ID="1b5d58c7-5df1-4a2b-b148-efe79b5f614d" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

								
								]]>
								</Action>
							</Actions>
						</Object>
						<Object ID="316e0514-9633-4e62-97c9-9aec4570cf19" Name="text_current_scheme" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">12</Attribute>
								<Attribute Name="value">ProAdmin connection</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="fontsize">16</Attribute>
								<Attribute Name="width">329</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">30</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="557bb176-4349-4db0-85f7-62f711157a81" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="cf35b5fc-2af7-4b6f-ad48-57859addfff8" Name="container_local_state" Type="81d947af-1548-4a96-a1e0-d8a4c67c6ec2">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="resource_cache"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">400</Attribute>
						<Attribute Name="top">201</Attribute>
						<Attribute Name="height">47</Attribute>
						<Attribute Name="classname">form_connection_state</Attribute>
						<Attribute Name="visible">0</Attribute>
						<Attribute Name="backgroundimage"><![CDATA[
						]]></Attribute>
						<Attribute Name="securitycode"><![CDATA[
						]]></Attribute>
						<Attribute Name="backgroundcolor"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">20</Attribute>
					</Attributes>
					<Objects>
						<Object ID="8b70fa64-07bb-4f93-8cd2-c71346489b2e" Name="text_current_scheme" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="zindex">2</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">12</Attribute>
								<Attribute Name="value">Standalone</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontweight">bold</Attribute>
								<Attribute Name="fontsize">16</Attribute>
								<Attribute Name="width">309</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">30</Attribute>
							</Attributes>
						</Object>
						<Object ID="6120e28b-6b37-4eb3-8536-aae19978e88e" Name="image_current" Type="0d36c35d-9508-440f-bfec-668f3db8cfeb">
							<Attributes>
								<Attribute Name="resource_cache"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">15</Attribute>
								<Attribute Name="value">9720cab2-23dd-42d3-b648-15a4d1d3098b</Attribute>
								<Attribute Name="height">16</Attribute>
								<Attribute Name="width">16</Attribute>
								<Attribute Name="externalurl"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">364</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="82287d94-71db-4d09-9413-1b554a64a77b" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="7fb4f046-73f5-4359-943a-3f181dc6125e" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">9</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="7768c919-9ef4-4215-a7be-816a7a258bcd" Name="save_remote_scheme" Top="734" Left="231" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteSchemePage import ProSuiteRemoteSchemePage


page = ProSuiteRemoteSchemePage(self)

page.vdom_objects = {
    "growl": self.growl,
    "remotescheme.proadmin.test_out": self.test_out,
}
page.live("apply_remote_scheme")
				]]>
				</Action>
				<Action ID="8eb706d3-5947-4555-9525-bf6fb7400ef4" Name="refresh_proadmin_variable" Top="1116" Left="231" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteSchemePage import ProSuiteRemoteSchemePage


page = ProSuiteRemoteSchemePage(self)

page.vdom_objects = {
    "growl": self.growl,
}
page.live("restart_proadmin_connection")
				]]>
				</Action>
				<Action ID="c223b3b8-1d7c-48f5-800d-61a6221529ed" Name="test_sso" Top="676" Left="802" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteSchemePage import ProSuiteRemoteSchemePage


page = ProSuiteRemoteSchemePage(self)

page.vdom_objects = {
    "growl": self.growl,
    "remotescheme.sso_dialog.apply": self.dialog_test_sso.apply,
}
page.live("test_sso_to_proadmin")
				]]>
				</Action>
				<Action ID="0bf7dda4-2b18-4dbd-8515-a2e642da5e7e" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteSchemePage import ProSuiteRemoteSchemePage


page = ProSuiteRemoteSchemePage(self)

page.vdom_objects = {
    "growl": self.growl,
    "currentscheme.title": self.text_current_scheme,
    "selectscheme.title": self.text_set_scheme,
    "selectscheme.standalone.radio": self.container_local.form_local.formradiogroup_local.formradiobutton_local,
    "selectscheme.standalone.button": self.container_local.form_local.formbutton_apply,
    "selectscheme.proadmin.title": self.container_remote.form_remote.formradiogroup_remote.formradiobutton_remote,
    "selectscheme.proadmin.host": self.container_remote.form_remote.text_host,
    "selectscheme.proadmin.login": self.container_remote.form_remote.text_login,
    "selectscheme.proadmin.password": self.container_remote.form_remote.text_password,
    "selectscheme.proadmin.testconnection": self.container_remote.form_remote.testconnection,
    "selectscheme.proadmin.testsso": self.container_remote.form_remote.testsso,
    "selectscheme.proadmin.reset": self.container_remote.form_remote.reset,
    "selectscheme.proadmin.apply": self.container_remote.form_remote.apply,
    "localscheme_state.container": self.container_local_state,
    "localscheme_state.title": self.container_local_state.text_current_scheme,
    "remotescheme.dialog_sso_success": self.dialog_sso_success,
    "remotescheme.dialog_sso_success.text": self.dialog_sso_success.success,
    "remotescheme.dialog_sso_success.close": self.dialog_sso_success.close,
    "remotescheme.dialog_test_sso.text": self.dialog_test_sso.warning,
    "remotescheme.dialog_test_sso.apply": self.dialog_test_sso.apply,
    "remotescheme.dialog_test_sso.cancel": self.dialog_test_sso.cancel,
    "remotescheme_state.container": self.container_remote_state,
    "remotescheme_state.title": self.container_remote_state.text_current_scheme,
    "remotescheme_state.proadmin.test_out": self.container_remote_state.hpt_conn,
    "remotescheme_state.host_name": self.container_remote_state.hpt_host,
    "remotescheme_state.connection_img": self.container_remote_state.image_current,
    "remotescheme_state.status.last_sync": self.container_remote_state.container_proadmin.text_last_sync,
    "remotescheme_state.status.sync_state": self.container_remote_state.container_proadmin.text_sync_status,
    "remotescheme_state.status.objects": self.container_remote_state.container_proadmin.text_objects,
    "remotescheme_state.status.users": self.container_remote_state.container_proadmin.text_users,
    "remotescheme_state.restart": self.container_remote_state.restart,
    "remotescheme_state.testsso": self.container_remote_state.testsso,
    "remotescheme_state.refresh": self.container_remote_state.refresh,
}
page.live()
				]]>
				</Action>
				<Action ID="506abab4-3cfa-4b46-9bab-96ad1479963c" Name="save_local_scheme" Top="868" Left="249" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteSchemePage import ProSuiteRemoteSchemePage


page = ProSuiteRemoteSchemePage(self)

page.vdom_objects = {
    "growl": self.growl,
}
page.live("apply_local_scheme")
				]]>
				</Action>
				<Action ID="1d201b45-8f51-48c7-9688-0c023cf77286" Name="test_connection" Top="397" Left="816" State="False">
<![CDATA[
"""
"""

from ProSuiteRemoteSchemePage import ProSuiteRemoteSchemePage


page = ProSuiteRemoteSchemePage(self)

page.vdom_objects = {
    "growl": self.growl,
    "remotescheme.proadmin.test_out": self.test_out,
}
page.live("test_connection_to_proadmin")
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="df322f68-c093-4366-b9ed-e69259d8f8ba" Name="vdom_resources" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">VDOM Application Resources Manager</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="11a7e58b-f756-49b2-b943-a38a7c32b150" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="7f514a09-f24a-4ff6-9109-6ea0039f5dd1" Name="page_css" Type="f08a1d8f-771d-1757-e89c-7b7980ee9990">
					<Attributes>
						<Attribute Name="datatype">2</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[.resource {
  border: 1px solid black;
}
.removebtn {
  text-decoration: underline;
  cursor: pointer;
}]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="0e8be45f-88af-46f4-869c-73310aad27e7" Name="dovres" Type="45ec0aa6-d28b-407a-8c61-ffb64adce738">
					<Attributes>
						<Attribute Name="bindings"><![CDATA[{"default": {
  "resource": "img.htmlcode",
  "resname" : "resname.value",
  "resurl"  : "resurl.value",
  "resremove": "removebtn.htmlcode"
}
}]]></Attribute>
						<Attribute Name="selectonclick">4</Attribute>
						<Attribute Name="top">105</Attribute>
						<Attribute Name="height">498</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">830</Attribute>
						<Attribute Name="template"><![CDATA[{"default": "<VDOMCLASS name=\"vdomclass1\" visible=\"1\" top=\"158\" width=\"400\" height=\"250\" classname=\"resource\" left=\"0\"><HYPERTEXT name=\"img\" zindex=\"0\" height=\"200\" width=\"200\" top=\"5\" left=\"100\" /><TEXT name=\"text1\" textdecoration=\"underline\" top=\"211\" value=\"Name:\" width=\"45\" fontweight=\"bold\" align=\"right\" left=\"50\"/><TEXT name=\"text2\" textdecoration=\"underline\" top=\"230\" value=\"URL:\" width=\"45\" fontweight=\"bold\" align=\"right\" left=\"50\"/><TEXT name=\"resname\" top=\"211\" width=\"300\" left=\"100\"/><TEXT name=\"resurl\" top=\"230\" width=\"300\" left=\"100\"/><HYPERTEXT name=\"removebtn\" zindex=\"0\" height=\"18\" width=\"50\" top=\"10\" left=\"340\" /></VDOMCLASS>"}]]></Attribute>
						<Attribute Name="clickclass">span.removebtn</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="overflow">3</Attribute>
						<Attribute Name="left">0</Attribute>
					</Attributes>
				</Object>
				<Object ID="7d87748e-e934-4eb3-9ce0-0a1aea0c7867" Name="form1" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="target">df322f68-c093-4366-b9ed-e69259d8f8ba</Attribute>
						<Attribute Name="height">90</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">763</Attribute>
						<Attribute Name="enctype">multipart/form-data</Attribute>
						<Attribute Name="left">67</Attribute>
					</Attributes>
					<Objects>
						<Object ID="5352e0e6-1174-49ec-866c-4e04e2d94be1" Name="replace" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="width">209</Attribute>
								<Attribute Name="top">26</Attribute>
								<Attribute Name="left">260</Attribute>
								<Attribute Name="label">Replace existing resource</Attribute>
							</Attributes>
						</Object>
						<Object ID="49761f76-aefe-46e8-b1e8-c0a76fb690a3" Name="formbutton1" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">59</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="4672b450-2807-4a1d-a387-5426cba0a30c" Name="text1" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">9</Attribute>
								<Attribute Name="value">Select file:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">113</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="dee46b7c-d3dd-44f9-bd57-7840962a976c" Name="resource" Type="823833ac-0f63-431c-82e7-0a502af21c65">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">26</Attribute>
								<Attribute Name="left">16</Attribute>
							</Attributes>
						</Object>
						<Object ID="800d4810-ee61-47e1-886b-e729a5df22da" Name="resourceid" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
							<Attributes>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">50</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="placeholder">Enter resource ID</Attribute>
								<Attribute Name="left">260</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="ccb64c9c-6b8f-4294-95ac-26b6c8a1395a" Name="onload" Top="0" Left="0" State="True">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
			</Objects>
			<Actions>
				<Action ID="cd447cbb-937b-42eb-ab25-7f706dbfdb7c" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
def check_resource_in_request():
    resource = request.arguments.get("resource", castto=Attachment)
    if resource:
        resource_name = request.arguments.get("resource_filename")
        replace = request.arguments.get("replace", "0")
        guid = request.arguments.get("resourceid", "")

        res_attrs = {
            "res_type":"permanent",
            "res_format": "res",
            "name": resource_name
        }

        if (replace == "1" and not guid):
            self.growl.active = "1"
            self.growl.title = "Error"
            self.growl.text = "Enter resource GUID if you want to replace one old"

            return

        if replace == "1":
            res_attrs["id"] = guid
            application.resources.delete(guid)

        import managers
        res_id = managers.resource_manager.add_resource(
            application.id,
            None,
            res_attrs,
            resource.handler
        )

#        self.growl.active = "1"
#        self.growl.title = "Success"
#        self.growl.text = u"Resource '%s' added. Res GUID is %s" % (
#            resource_name,
#            res_id
#        )


check_resource_in_request()


import json
from collections import OrderedDict

resources = application.resources
result = OrderedDict()
for resource_guid in resources.get_list():
    resource = resources.get(resource_guid)

    result[resource.id] = {
        "resource": """<img src="/%s.res" />""" % resource.id,
        "resname" : resource.name,
        "resurl"  : "/%s.res" % resource.id,
        "resremove": """<span class="removebtn">Remove</span>"""
    }

self.dovres.data = json.dumps(result)

				]]>
				</Action>
				<Action ID="f12b00fb-3ae8-42c9-bf38-2b96c9327c78" Name="child_clicked" Top="102" Left="350" State="False">
<![CDATA[
import json
def main():
    itemid = request.arguments.get("itemid")

    resource = application.resources.get(itemid)
    if not resource:
        self.growl.action("show", ["Error", "Resource not found"])
        return

    application.resources.delete(itemid)
    self.dovres.action("removeItems", [[itemid]])
    self.growl.action("show", ["Success", "Resource was deleted"])


main()

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="2827dab8-8c06-4274-abcf-0c937bd25adc" Name="db_promail" Type="753ea72c-475d-4a29-96be-71c522ca2097">
			<Attributes>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="7736ec86-2dc2-4c02-95be-c15e4e8a8ccc" Name="account" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="57697fc8-7fd2-40f5-8ff8-c4e7c7ae7592" Name="archive" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">1</Attribute>
					</Attributes>
				</Object>
				<Object ID="69cdee40-eeb8-4027-80ac-e776f09537b9" Name="server" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">887</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">723</Attribute>
					</Attributes>
				</Object>
				<Object ID="d1dfaa3d-8e70-4df5-9f0f-10af05881b1f" Name="attachment" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="0a988fdf-2577-4017-a09a-0cbd9b5dc830" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

				
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="49e6fda0-c108-4135-a3c5-80b23c22abe1" Name="edit_macros" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass">no-subhead</Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="position">center</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[.CodeMirror {
background:#fff;
}]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="472bd9ec-e6fc-4bec-9107-91e9db721fc1" Name="bar_background" Type="91a12281-c9a8-430a-8a2d-93903b4a264f">
					<Attributes>
						<Attribute Name="color">F7F7F7</Attribute>
						<Attribute Name="top">147</Attribute>
						<Attribute Name="height">718</Attribute>
						<Attribute Name="zindex">1</Attribute>
						<Attribute Name="width">1034</Attribute>
						<Attribute Name="left">19</Attribute>
					</Attributes>
				</Object>
				<Object ID="29d42124-05b2-474e-b272-7782e3d9a697" Name="dialog_delete" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }
.boxy-modal-blackout { position: absolute; background-color: black; left: 0; top: 0; }

.boxy-wrapper .title-bar {
position: relative;
background-color: #fff !important;
margin-left:12px !important;
margin-right:12px !important;
margin-top:8px !important;
padding-bottom:8px !important;
text-align:left;
font-weight:normal;
border-bottom:1px solid #e5e5e5;

}
.boxy-wrapper .title-bar h2{
font-size:24px;
text-align:left;
font-weight:normal;
margin:0;
padding:0;
}

.boxy-wrapper .title-bar a.close{
outline: none;
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
display:none !important;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}

.boxy-inner {
border:0 !important;
background-color:#fff !important;
box-shadow: 0 0 40px #000;
-moz-box-shadow: 0 0 40px #000;
-webkit-box-shadow: 0 0 40px #000;
background: url("/ac84402d-b5d7-dcc7-fb33-357b0426918f.png") left bottom repeat-x;
}]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">169</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="skin">3</Attribute>
						<Attribute Name="left">1090</Attribute>
					</Attributes>
					<Objects>
						<Object ID="6bf4aef7-fa4d-4639-a769-95428f956fc1" Name="button_apply" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Apply</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">25</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">129</Attribute>
								<Attribute Name="left">184</Attribute>
							</Attributes>
						</Object>
						<Object ID="0767f787-4aba-4164-b3e7-deb6be252ddf" Name="text_delete" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">115</Attribute>
								<Attribute Name="top">59</Attribute>
								<Attribute Name="value">Delete macros?</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">86</Attribute>
							</Attributes>
						</Object>
						<Object ID="1b981ea9-aa82-4646-b32e-e51121387dd7" Name="button_cancel" Type="315381b8-f3f1-496c-92be-b65ebdd6b8a1">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="style"><![CDATA[#%(id)s {height: 33px !important}
#%(id)s a {
 text-align:center !important;
 background:#fff url("/c016ef5e-c636-586d-9841-f3ff499831aa.png") !important;
 background-repeat:repeat-x;
 background-position:bottom center;
 text-decoration:none;
 line-height:25px;
 border:1px solid #c5c5c5;
 border-radius: 6px;
 -moz-border-radius:6px;
 -webkit-border-radius: 6px;
 -o-border-radius:6px;
 -ms-border-radius: 6px;
 cursor:pointer;
 outline:none !important;
 height:26px !important;
 box-shadow:inset 0px 0px 3px #fff;
    -moz-box-shadow:inset 0px 0px 3px #fff;
    -webkit-box-shadow:inset 0px 0px 3px #fff;
 -o-box-shadow:inset 0px 0px 3px #fff;
 -ms-box-shadow:inset 0px 0px 3px #fff;
 -webkit-transition: all 0.7s ease;
    -moz-transition: all 0.7s ease;
 -o-transition: all 0.7s ease;
}
#%(id)s a:hover {
 box-shadow:inset 0px 0px 6px #fff;
    -moz-box-shadow:inset 0px 0px 6px #fff;
    -webkit-box-shadow:inset 0px 0px 6px #fff;
 -o-box-shadow:inset 0px 0px 6px #fff;
 -ms-box-shadow:inset 0px 0px 6px #fff;
 border:1px solid #a8a8a8;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
}
#%(id)s a span {
 line-height:22px !important;
 font-size:14px;
color:#000;
font-family:Arial,sans-serif;
}]]></Attribute>
								<Attribute Name="containerlink"><![CDATA[
								]]></Attribute>
								<Attribute Name="disabledimg"><![CDATA[
								]]></Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="text">Cancel</Attribute>
								<Attribute Name="image"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">25</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="link"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="rollover"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">129</Attribute>
								<Attribute Name="left">61</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="4458c5e8-32e4-499c-8b0d-b8ccf0790d65" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="2efc512d-478c-4b6d-a16e-a27679c3929a" Name="form_macros" Type="34f6ee59-9c50-4503-97c1-86c4e86bd1b7">
					<Attributes>
						<Attribute Name="zindex">2</Attribute>
						<Attribute Name="target"><![CDATA[
						]]></Attribute>
						<Attribute Name="top">147</Attribute>
						<Attribute Name="height">727</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">1035</Attribute>
						<Attribute Name="enctype">multipart/form-data</Attribute>
						<Attribute Name="left">21</Attribute>
					</Attributes>
					<Objects>
						<Object ID="312c3b21-ef60-4564-8ca1-793afa4fdfa1" Name="formcheckbox_on_board" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="height">16</Attribute>
								<Attribute Name="width">85</Attribute>
								<Attribute Name="top">102</Attribute>
								<Attribute Name="left">151</Attribute>
								<Attribute Name="label">On board</Attribute>
							</Attributes>
						</Object>
						<Object ID="e660384d-2927-44f7-863b-4b337c38786e" Name="formcheckbox_is_button" Type="8077aa1c-6762-4719-a6ea-fdfb0bcfa0c2">
							<Attributes>
								<Attribute Name="top">102</Attribute>
								<Attribute Name="height">16</Attribute>
								<Attribute Name="width">145</Attribute>
								<Attribute Name="state">1</Attribute>
								<Attribute Name="label">Button macros</Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
						<Object ID="da717cfd-6ea4-410f-8737-c80e92dc1b73" Name="formbutton_delete" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">657</Attribute>
								<Attribute Name="label">Delete</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="type">2</Attribute>
								<Attribute Name="left">502</Attribute>
							</Attributes>
						</Object>
						<Object ID="5bc3f9b4-cfec-4453-b417-ac05c2f3a7e2" Name="text_body" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">73</Attribute>
								<Attribute Name="top">181</Attribute>
								<Attribute Name="value">Body:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
						<Object ID="3f5230a9-c53b-4aa1-8e91-f57c3f2acc98" Name="uploader" Type="823833ac-0f63-431c-82e7-0a502af21c65">
							<Attributes>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="top">99</Attribute>
								<Attribute Name="left">606</Attribute>
								<Attribute Name="width">305</Attribute>
							</Attributes>
						</Object>
						<Object ID="047be7f3-8a14-4849-91ac-915f7edce743" Name="text_picture" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">95</Attribute>
								<Attribute Name="top">106</Attribute>
								<Attribute Name="value">Select picture:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">502</Attribute>
							</Attributes>
						</Object>
						<Object ID="7baf9540-0145-4e38-9bfa-d17377492a6c" Name="text_event" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">73</Attribute>
								<Attribute Name="top">141</Attribute>
								<Attribute Name="value">Event:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
						<Object ID="2b28eece-763c-4b3f-a1bd-5c9621025780" Name="hypertext_img" Type="7085bd26-e653-490b-908f-61208c260a86">
							<Attributes>
								<Attribute Name="top">103</Attribute>
								<Attribute Name="height">55</Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="width">55</Attribute>
								<Attribute Name="htmlcode"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">856</Attribute>
							</Attributes>
						</Object>
						<Object ID="750fb91f-cd48-4d21-84e4-206a3be408aa" Name="formbutton_check" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">657</Attribute>
								<Attribute Name="label">Check</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">714</Attribute>
							</Attributes>
						</Object>
						<Object ID="d84ae15d-3d39-46df-bdc4-633e9cbcdab7" Name="codeeditor_macros_body" Type="9a8f8e07-cb43-ff0f-7179-4a437911af23">
							<Attributes>
								<Attribute Name="width">818</Attribute>
								<Attribute Name="top">181</Attribute>
								<Attribute Name="left">93</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="height">447</Attribute>
							</Attributes>
						</Object>
						<Object ID="bed76b6a-9ab2-4817-9e25-6777c2184a04" Name="text_macros_name" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="width">73</Attribute>
								<Attribute Name="top">66</Attribute>
								<Attribute Name="value">Name:</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">6</Attribute>
							</Attributes>
						</Object>
						<Object ID="5b377fb2-070d-49b6-b3d8-832f5de6dd02" Name="formlist_event_list" Type="0c84f3d5-5f98-451d-a41c-e7a5b4afe5cf">
							<Attributes>
								<Attribute Name="width">818</Attribute>
								<Attribute Name="hierarchy">10</Attribute>
								<Attribute Name="top">136</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="zindex">0</Attribute>
								<Attribute Name="visible">0</Attribute>
								<Attribute Name="left">93</Attribute>
								<Attribute Name="selectedvalue"><![CDATA[
								]]></Attribute>
							</Attributes>
						</Object>
						<Object ID="b90d2560-0f0c-47c1-a7ff-7620fe4cc04b" Name="formbutton_apply" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">657</Attribute>
								<Attribute Name="label">Apply</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">821</Attribute>
							</Attributes>
						</Object>
						<Object ID="14cc298a-d678-4241-a523-2ec9e52c2618" Name="formtext_name" Type="410ce9c6-5ae0-4c66-9c2b-80b7470e2927">
							<Attributes>
								<Attribute Name="title"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">66</Attribute>
								<Attribute Name="value"><![CDATA[
								]]></Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">818</Attribute>
								<Attribute Name="placeholder"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">93</Attribute>
							</Attributes>
						</Object>
						<Object ID="cd3d942f-3e47-4923-b4f0-b77f91d74bda" Name="formbutton_cancel" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">657</Attribute>
								<Attribute Name="label">Cancel</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">606</Attribute>
							</Attributes>
						</Object>
						<Object ID="13bc791b-b65d-4239-80c1-642d7d72a220" Name="formbutton_export" Type="5be544cb-3d6b-4b75-ae79-b071fbe46094">
							<Attributes>
								<Attribute Name="style"><![CDATA[#%(id)s {
text-align:center !important;
background:#fff url("/f704b515-d69d-24d9-5e81-8dc0984592fa.png") !important;
background-repeat:repeat-x;
background-position:bottom center;
text-decoration:none;
line-height:25px;
border:1px solid #c5c5c5;
border-radius: 6px;
-moz-border-radius:6px;
-webkit-border-radius: 6px;
-o-border-radius:6px;
-ms-border-radius: 6px;
cursor:pointer;
outline:none !important;
height:26px !important;
box-shadow:inset 0px 0px 3px #fff;
-moz-box-shadow:inset 0px 0px 3px #fff;
-webkit-box-shadow:inset 0px 0px 3px #fff;
-o-box-shadow:inset 0px 0px 3px #fff;
-ms-box-shadow:inset 0px 0px 3px #fff;
-webkit-transition: all 0.7s ease;
-moz-transition: all 0.7s ease;
-o-transition: all 0.7s ease;
line-height:22px !important;
font-size:14px !important;
color:#000;
font-family:Arial,sans-serif;
}
#%(id)s:hover {
box-shadow:inset 0px 0px 6px #fff;
-moz-box-shadow:inset 0px 0px 6px #fff;
-webkit-box-shadow:inset 0px 0px 6px #fff;
-o-box-shadow:inset 0px 0px 6px #fff;
-ms-box-shadow:inset 0px 0px 6px #fff;
border:1px solid #a8a8a8;
}]]></Attribute>
								<Attribute Name="top">657</Attribute>
								<Attribute Name="label">Export</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="skin">1</Attribute>
								<Attribute Name="left">392</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="e73b4437-7deb-44ae-9af3-d0a01dccbcc1" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
				<Object ID="edeb0d96-a88a-4a67-87f9-99d3873ebd39" Name="copy_header" Type="5c1b98df-8609-4660-83b2-44ec7b2e7611">
					<Attributes>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="top"><![CDATA[
						]]></Attribute>
						<Attribute Name="left"><![CDATA[
						]]></Attribute>
						<Attribute Name="source_object">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
						<Attribute Name="source_object_cache">c73ef71e-d494-4a0e-bde4-00571800c838</Attribute>
					</Attributes>
				</Object>
				<Object ID="640d9fc4-c0bd-4fee-bc05-31dbc3d21893" Name="page_title" Type="73a54f2e-4001-4676-93a0-804048a57081">
					<Attributes>
						<Attribute Name="width">595</Attribute>
						<Attribute Name="top">105</Attribute>
						<Attribute Name="value">Edit macros</Attribute>
						<Attribute Name="classname">page-caption</Attribute>
						<Attribute Name="fontfamily">tahoma</Attribute>
						<Attribute Name="css"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">18</Attribute>
					</Attributes>
				</Object>
				<Object ID="f7648a76-3df4-4aaf-bde0-3e7287745601" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="active">1</Attribute>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">1415</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="db9d575f-b7b4-43c9-b779-61e2e282f5d7" Name="select_macros_picture" Top="693" Left="222" State="False">
<![CDATA[
from class_macros import Macros
import localization


lang = localization.get_lang()
if "Value" in request.arguments:
	if request.arguments.get("Value") == "0":
		self.form_macros.text_picture.visible = "0"
		self.form_macros.uploader.visible = "0"
		self.form_macros.hypertext_img.visible = "0"
	else:
		self.form_macros.text_picture.visible = "1"
		self.form_macros.uploader.visible = "1"

		self.form_macros.hypertext_img.visible = "1"
		if "macros_id" in session:
			macros = Macros.get_by_id(session.get("macros_id"))
			self.form_macros.hypertext_img.htmlcode = "<img src='/get_image?id=%s'/>"%macros.macros_picture if macros.macros_picture else ""

self.form_macros.text_picture.value = lang["edit_macros_picture_title"]

				]]>
				</Action>
				<Action ID="1a57253e-7a48-43bd-bf6b-97539e3aa69d" Name="select_macros_type" Top="539" Left="217" State="False">
<![CDATA[
from class_macros_events import MacrosEvents
import json
import localization


lang = localization.get_lang()
if "Value" in request.arguments:
	if request.arguments.get("Value") == "0":
		self.form_macros.text_event.visible = "1"
		self.form_macros.formlist_event_list.visible = "1"
		events = MacrosEvents.get_events()
		self.form_macros.formlist_event_list.value = json.dumps({event.id : event.name for event in events})

		self.form_macros.text_picture.visible = "0"
		self.form_macros.formcheckbox_on_board.visible = "0"
		self.form_macros.uploader.visible = "0"
		self.form_macros.hypertext_img.visible = "0"
	else:
		self.form_macros.text_event.visible = "0"
		self.form_macros.formlist_event_list.visible = "0"

		self.form_macros.formcheckbox_on_board.visible = "1"

		self.form_macros.hypertext_img.visible = "1"

self.form_macros.text_event.value = lang["edit_macros_event_title"]
self.form_macros.formcheckbox_on_board.label = lang["edit_macros_on_board_checkbox"]

				]]>
				</Action>
				<Action ID="fd5024f6-c0d1-4840-a1d3-e004a45a68f9" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
from class_macros import Macros
from class_macros_events import MacrosEvents
from vscript import errors, generic, boolean, string, v_empty, v_true_value, v_false_value, as_string, engine
import json
import VEE_events

from class_acl_user import ACLUser
import localization
from class_license import License
import base64
from utils.uuid import uuid4
import cgi
from widget_localization import LocalizationWidget
import localization


lang = localization.get_lang()
if not License().confirmed:
	response.redirect("/license.vdom")

try:

	user = ACLUser.current()

	if not user or not user.is_admin():
		response.redirect("/contact.vdom")

	events = MacrosEvents.get_events()
	self.form_macros.formlist_event_list.value = json.dumps({event.id : event.name for event in events})

	macros_id = session.get("macros_id")
	#self.form_macros.formbutton_delete.visible = "0"

	if macros_id:
		macros = Macros.get_by_id(macros_id)
		if macros.class_name:
			self.form_macros.formcheckbox_is_button.state = "0"
			self.form_macros.text_picture.visible = "0"
			self.form_macros.formcheckbox_on_board.visible = "0"
			self.form_macros.uploader.visible = "0"

			self.form_macros.formlist_event_list.visible = "1"
			self.form_macros.text_event.visible = "1"

			event = MacrosEvents.get_by_name(macros.class_name)
			self.form_macros.formlist_event_list.selectedvalue = event.id
		else:
			self.form_macros.formcheckbox_is_button.state = "1"
			self.form_macros.formcheckbox_on_board.visible = "1"
			self.form_macros.formlist_event_list.visible = "0"
			self.form_macros.text_event.visible = "0"

		if macros.on_board == "1":
			self.form_macros.formcheckbox_on_board.state = "1"
			self.form_macros.text_picture.visible = "1"
			self.form_macros.uploader.visible = "1"


		self.form_macros.formbutton_delete.visible = "1"
		self.form_macros.codeeditor_macros_body.value = macros.code
		self.form_macros.formtext_name.value = macros.name
		self.form_macros.hypertext_img.htmlcode = "<img src='/get_image?id=%s'/>"%macros.macros_picture if macros.macros_picture else ""



	if "formbutton_apply" in request.arguments:

		source = self.form_macros.codeeditor_macros_body.value = request.arguments.get("codeeditor_macros_body", "")
		name = self.form_macros.formtext_name.value = request.arguments.get("formtext_name", "")
		event = self.form_macros.formlist_event_list.selectedvalue = request.arguments.get("formlist_event_list")
		is_button = self.form_macros.formcheckbox_is_button.state = request.arguments.get("formcheckbox_is_button", "0")
		on_board = self.form_macros.formcheckbox_is_button.state = request.arguments.get("formcheckbox_on_board", "0")
		picture = request.arguments.get("uploader", "", castto=Attachment)
		picture_name = ""
		if picture:
			picture_name = str(uuid4())
			application.storage.write(picture_name, picture.handler.read())
		elif macros_id:
			macros_object = Macros.get_by_id(macros_id)
			picture_name = macros_object.macros_picture
			self.form_macros.hypertext_img.htmlcode = "<img src='/get_image?id=%s'/>"%picture_name if picture_name else ""
		#raise Exception(event)
		class_name = ""
		if not source or not name:
			self.growl.title = lang["error"]
			self.growl.text = lang["fill_all_fields_error"]
			self.growl.visible = "1"
		else:
			if is_button == "0":
				for e in events:
					if e.id == int(event):
						class_name = e.name

			macros = Macros()
			macros.id 			= macros_id if macros_id else None
			macros.name 		= name
			macros.code 		= source
			macros.class_name	= class_name
			macros.is_button_macros = is_button
			macros.on_board = on_board
			macros.macros_picture = picture_name
			macros.save()
			del session["macros_id"]
			response.redirect("/macros_settings.vdom")

	elif "formbutton_check" in request.arguments:
		if macros_id:
			macros = Macros.get_by_id(macros_id)

			source = self.form_macros.codeeditor_macros_body.value = request.arguments.get("codeeditor_macros_body", "")
			self.form_macros.formtext_name.value = request.arguments.get("formtext_name", "")
			self.form_macros.formlist_event_list.selectedvalue = request.arguments.get("formlist_event_list")
			self.form_macros.formcheckbox_is_button.state = request.arguments.get("formcheckbox_is_button", "0")
			self.form_macros.formcheckbox_is_button.state = request.arguments.get("formcheckbox_on_board", "0")
			self.form_macros.hypertext_img.htmlcode = "<img src='/get_image?id=%s'/>"%macros.macros_picture if macros.macros_picture else ""

			if source:
				cmpl = engine.vcompile(source)
				if not cmpl[1]:
					self.growl.title = lang["error"]
					self.growl.text = lang["vscript_not_compiled_error"]
					self.growl.visible = "1"
			else:
				self.growl.title = lang["error"]
				self.growl.text = lang["type_macros_code_error"]
				self.growl.visible = "1"

		else:
			self.growl.title = lang["error"]
			self.growl.text = lang["fill_macros_fields_error"]
			self.growl.visible = "1"


	elif "formbutton_export" in request.arguments:
		macros = Macros.get_by_id(macros_id)

		self.form_macros.codeeditor_macros_body.value = request.arguments.get("codeeditor_macros_body", "")
		self.form_macros.formtext_name.value = request.arguments.get("formtext_name", "")
		self.form_macros.formlist_event_list.selectedvalue = request.arguments.get("formlist_event_list")
		self.form_macros.formcheckbox_is_button.state = request.arguments.get("formcheckbox_is_button", "0")
		self.form_macros.formcheckbox_is_button.state = request.arguments.get("formcheckbox_on_board", "0")
		self.form_macros.hypertext_img.htmlcode = "<img src='/get_image?id=%s'/>"%macros.macros_picture if macros.macros_picture else ""

		if type(macros_id) != list:
			macros_id = [ macros_id ]

		output = Macros.export(macros_id)
		output_len = output.tell()
		output.seek(0)
		response.send_file(request.arguments.get("formtext_name", "") + ".xml", output_len, output)

	elif "formbutton_cancel" in request.arguments:
		del session["macros_id"]
		response.redirect("/macros_settings.vdom")

except Exception, ex:
	self.growl.title = lang["error"]
	self.growl.text = lang["unknown_error"]
	self.growl.active = "1"

localization_wdgt = LocalizationWidget()

localization_wdgt.add_controls( "edit_macros_page_title", self )
localization_wdgt.add_controls( "edit_macros_area_caption", self.page_title )
localization_wdgt.add_controls( "edit_macros_check_btn", self.form_macros.formbutton_check )
localization_wdgt.add_controls( "edit_macros_export_btn", self.form_macros.formbutton_export )
localization_wdgt.add_controls( "dialog_apply_btn", self.form_macros.formbutton_apply )
localization_wdgt.add_controls( "dialog_cancel_btn", self.form_macros.formbutton_cancel )
localization_wdgt.add_controls( "dialog_delete_btn", self.form_macros.formbutton_delete )
localization_wdgt.add_controls( "edit_macros_body_title", self.form_macros.text_body )
localization_wdgt.add_controls( "edit_macros_event_title", self.form_macros.text_event )
localization_wdgt.add_controls( "edit_macros_name_title", self.form_macros.text_macros_name )
localization_wdgt.add_controls( "edit_macros_button_macros_checkbox", self.form_macros.formcheckbox_is_button )
localization_wdgt.add_controls( "edit_macros_picture_title", self.form_macros.text_picture )
localization_wdgt.add_controls( "edit_macros_on_board_checkbox", self.form_macros.formcheckbox_on_board )


localization_wdgt.render()

				]]>
				</Action>
				<Action ID="69fa6c68-76b2-419e-bcf3-f0c93d6454bc" Name="delete_macros" Top="382" Left="222" State="False">
<![CDATA[
from class_macros import Macros
import localization


lang = localization.get_lang()
macros_id = session.get("macros_id")

if macros_id:
	macros = Macros.get_by_id(macros_id)
	macros.delete()
	del session["macros_id"]
	self.action("goTo", ["/macros_settings.vdom"])
else:
	self.growl.action("show", [lang["error"], lang["macro_not_defined_error"]])

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="67cf0af8-4a57-49ed-a8cd-6938d2e2dc3b" Name="dbschema_macros" Type="753ea72c-475d-4a29-96be-71c522ca2097">
			<Attributes>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="fd21fdf0-1788-4721-aa16-aa6d3fea70ba" Name="timer" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="top">451</Attribute>
						<Attribute Name="height">241</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">283</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">143</Attribute>
					</Attributes>
				</Object>
				<Object ID="77aebef4-e7d9-4f00-90da-a4edeb2c9625" Name="custom_event" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="top">330</Attribute>
						<Attribute Name="height">213</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">292</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">786</Attribute>
					</Attributes>
				</Object>
				<Object ID="6e46b856-2c74-4b0b-94ac-e6e143eab1eb" Name="macros" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="top">14</Attribute>
						<Attribute Name="height">394</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">285</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">36</Attribute>
					</Attributes>
				</Object>
				<Object ID="7e493748-dab4-480b-938b-92b77c58718e" Name="plugin" Type="92269b6e-4b6b-4882-852f-f7ef0e89c079">
					<Attributes>
						<Attribute Name="top">467</Attribute>
						<Attribute Name="height">258</Attribute>
						<Attribute Name="zindex">0</Attribute>
						<Attribute Name="width">244</Attribute>
						<Attribute Name="data"><![CDATA[
						]]></Attribute>
						<Attribute Name="structure"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">463</Attribute>
					</Attributes>
				</Object>
			</Objects>
			<Actions>
				<Action ID="fbc1b394-3856-4128-a534-d15ae4f53d94" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

				
				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="5073ff75-da99-44fb-a5d7-e44e5ab28598" Name="API" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title">API</Attribute>
				<Attribute Name="image"><![CDATA[
				]]></Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Actions>
				<Action ID="0c0c8b3b-162b-43bc-a91e-a0135676ca44" Name="call_macro" Top="0" Left="0" State="False">
<![CDATA[
from api_helper import *

#@license_confirmed
@authenticated
@error_handler
@parse_json
def main( data ):

	require_fileds = [ "plugin_guid", "name" ]
	for field in require_fileds:
		if 	field not in data or data[ field ] == "" :
			raise APICallFailedException( "errBadObjectFormat", field )

	from VEE_events import VEE_CustomEvent
	from VEE_core import engine
	from VEE_utils import AutoCast

	event = VEE_CustomEvent()
	event.name = data[ "name" ]
	event.plugin_guid = data[ "plugin_guid" ]
	event.data = data.get( "data", None )

	if data.get( "async", True ):
		event.activate()
		write_response( None )

	else:
		dispatcher = engine.get_dispatcher_by_event( event )
		if not dispatcher:
			raise APICallFailedException( "errBadObjectFormat", "No dispatcher for given data" )


		class v_response( object ):
			def __init__( self ):
				self.value = ""

			@AutoCast
			def v_write( self, value ):
				self.value = value

		v_responseObj = v_response()

		dispatcher(  event 		= event,
					 env_mask 	= 0b1111,
					 custom_env = ( ( "v_response", v_responseObj ), ),
					 safe = False 	)

		try:
			write_response( v_responseObj.value )
		except:
			raise APICallFailedException( "errBadObjectFormat", "Bad response format" )



main()

				]]>
				</Action>
				<Action ID="873b2706-3091-44ef-9c95-89e2fc490f3c" Name="change_scheme" Top="0" Left="0" State="True">
<![CDATA[
from vdom_trace import Trace

try:
	import ProAdmin
	import json
	from class_remote_settings import RemoteSettings
	import managers

	params = request.arguments.get( 'xml_data' )
	params = json.loads( params )

	server  =  params["server"] if "server" in params else ""
	login  =  params["login"] if "login" in params else ""
	password  =  params["password"] if "password" in params else ""

	if managers.request_manager.current.session().user == "root":
		if server:
			RemoteSettings(login, password, server).save()
			ProAdmin.unregister_default_scheme()
		else:
			if RemoteSettings.get_remote_setting():
				RemoteSettings.delete()
				ProAdmin.unregister_default_scheme()
	else:
		raise Exception("You can't change scheme")

	session[ 'response' ] = json.dumps( ["success"] ) #added [] 10.01.2013 Nikita

except:
	session[ 'response' ] = json.dumps( [ 'error', Trace.exception_trace() ] )

				]]>
				</Action>
				<Action ID="ced5f8bf-1c39-4afc-825b-9ada76a50528" Name="upgrade" Top="170" Left="281" State="True">
<![CDATA[
from db_update import Update
import managers
import json

def is_admin():
	# get server's user
	user = managers.request_manager.current.session().user
	return user == u'root'


def success_result():
	send_response( json.dumps( ["success"] ) )


def error_result( message = '' ):
	send_response( json.dumps( ["error", message] ) )


def send_response( message ):
	session[ 'response' ] = message


class PermissionDeniedError( Exception ):
	pass


try:
	if not is_admin():
		raise PermissionDeniedError()

	Update().update()

	success_result()

except PermissionDeniedError:
	error_result( 'Permission denied' )

except Exception as ex:
	error_result( ex.message )

				]]>
				</Action>
				<Action ID="cbf8beeb-9468-40db-a8cc-50989ac82022" Name="proadmin_sync" Top="0" Left="0" State="False">
<![CDATA[
import json

try:
	import ProAdmin
	ProAdmin.sync()
	session["response"] = json.dumps(["success"])
except:
	session["response"] = json.dumps(["error", "Synchronization failed"])

				]]>
				</Action>
				<Action ID="385dcf55-ef96-4c86-8e33-5c4666499d86" Name="login" Top="0" Left="0" State="True">
<![CDATA[
from api_helper import *


#@license_confirmed
#@authenticated
@error_handler
def main( ):

	import json, ProAdmin

	try:
		params = json.loads( request.arguments.get( 'xml_data' ) )
	except Exception, ex:
		raise APICallFailedException("errBadJSONFormat")

	token 		= params.get( 'token', '' )
	login 		= params.get( 'login', '' )
	password 	= params.get( 'password', '' )

	if not token and not any( (login, password) ):
		raise APICallFailedException( "errEmptyPassword" )


	try:
		if token:
			ProAdmin.login_token( token )
		else:
			ProAdmin.login( login, password )

		user = ProAdmin.current_user()

		data = {
			"guid" 			: user.guid,
			"email" 		: user.email,
			"first_name" 	: user.first_name,
			"last_name"		: user.last_name
		}

		write_response( data )

	except ProAdmin.ProAdminEmptyPasswordError, ex:
		raise APICallFailedException( "errEmptyPassword" )

	except ProAdmin.ProAdminLoginError, ex:
		raise APICallFailedException( "errLoginError" )


main()

				]]>
				</Action>
				<Action ID="3fccb495-e12a-4a13-867c-e8d59c9b5f71" Name="upload_file" Top="0" Left="0" State="True">
<![CDATA[
from class_errors import EmptyNameError, AccessDeniedError, AuthorisationError, DirectoryAlreadyExistsError
from class_proshare_node import FolderAlreadyExistsError
from class_acl_node_interface import ACLNodeInterface
from api_helper import APICallFailedException

try:
	from class_acl_user import ACLUser
	import json

	current_user = ACLUser.current()
	if not current_user:
		raise APICallFailedException( "errNotLoggedIn" )

	try:
		data = json.loads( request.arguments.get( 'xml_data' ) )
	except Exception, ex:
		raise APICallFailedException( "errBadJSONFormat" )

	if not  "path" in data or data[ "path" ] == "":
		raise APICallFailedException( "errBadObjectFormat", "path" )

	if not  "name" in data or data[ "name" ] == "":
		raise APICallFailedException( "errBadObjectFormat", "name" )

	if not  "b64data" in data or data[ "b64data" ] == "":
		raise APICallFailedException( "errBadObjectFormat", "b64data" )

	from cgi import escape
	import os

	path 		= os.path.abspath( escape( data[ "path" ] ))#.encode( "utf-8" ) )
	file_name 	= escape( data[ "name" ] )

	rewrite = False

	node = ACLNodeInterface.get_by_path( os.path.join( path, file_name ) )

	if node:
		rewrite = True
	else:
		if path.strip( "/" ) == "":
			node = ACLNodeInterface.root()
		else:
			node = ACLNodeInterface.get_by_path( path )

		if not node:
			raise APICallFailedException( "errObjNotExists" )

	from cStringIO import StringIO
	import base64



	try:
		b64data = data[ "b64data" ]
		output = StringIO( base64.b64decode( b64data ) )
	except:
		raise APICallFailedException( "errB64DecodeError" )


	if rewrite:
		node.write( output )
		node.save()

	else:
		node.put( file_name, output )




	session[ "response" ] = json.dumps( [ 'success' ] )


except AccessDeniedError, cfex:
	from api_error_code import error_code
	error = error_code[ "errNotNeededRules" ]
	session["response"] = json.dumps( [ 	"error",
											error[ 0 ],
											error[ 1 ] +  ": " + cfex.message
										]
									)

except APICallFailedException, cfex:
	from api_error_code import error_code
	error = error_code[ cfex.message ]
	session["response"] = json.dumps( [ 	"error",
											error[ 0 ],
											error[ 1 ] + ( ( ": " + cfex.info ) if cfex.info else "" )
										]
									)

except:
	from api_error_code import error_code
	from vdom_trace import Trace
	error = error_code[ "errScriptError" ]
	session[ 'response' ] = json.dumps( [ 'error', error[ 0 ], Trace.exception_trace() ] )

				]]>
				</Action>
				<Action ID="0d8634fd-bed3-4305-836c-46648e1e9620" Name="install_plugin" Top="0" Left="0" State="False">
<![CDATA[
import managers
import json
def is_admin():
	# get server's user
	user = managers.request_manager.current.session().user
	return user == u'root'

#response changed form xml to json 10.01.2013 Nikita

def success_result():
	send_response( json.dumps( ["success"] ) )


def error_result( message = '' ):
	send_response( json.dumps( ['error', message] ) )


def send_response( message ):
	session[ 'response' ] = message



class PermissionDeniedError( Exception ):
	pass


try:
	if not is_admin():
		raise PermissionDeniedError()

	import json
	from xml.dom.minidom import parseString
	from class_macro import Macros
	from class_plugins import Plugins
	from class_timer import Timer
	from class_custom_event import CustomEvent
	from class_xml_macro import XMLMacros
	from class_xml_timer import XMLTimer
	from class_xml_plugin import XMLPlugin
	from class_xml_plugin_db import XMLPluginDB
	from class_xml_resource import XMLResource
	from class_xml_custom_event import XMLCustomEvent
	from utils.uuid import uuid4
	import base64
	from VEE_resources import create_plugin_dir, ResourceFolderManager
	from VEE_sqlite3 import DatabaseManager

	xml_data = request.arguments.get('xml_data', None)
	plugin_xml = base64.b64decode(xml_data)
	try:
		dom = parseString( plugin_xml)
		node = XMLPlugin( dom )

		plugin = Plugins()

		plugin.name = node.name
		plugin.description = node.description
		plugin.guid = node.guid
		plugin.version = node.version
		plugin.author = node.author

		exist_plugin = Plugins.get_by_guid(plugin.guid)
		if exist_plugin:
			if exist_plugin.version > plugin.version:
				raise Exception("You can't install old version plugin")
			else:
				if exist_plugin.picture:
					application.storage.delete( exist_plugin.picture )
				exist_plugin.delete()

		plugin.picture = ""
		if node.picture:
			plugin.picture = str(uuid4())
			application.storage.write( plugin.picture, base64.b64decode(node.picture))

		plugin.save()

		create_plugin_dir( plugin.guid )
		dbManager = DatabaseManager( plugin.guid )
		resManager = ResourceFolderManager( plugin.guid )

		for child in node.childs:

			if child.tag == "timer":
				child = XMLTimer( child )
				if child.name:
					timer = Timer()
					timer.fill_from_xml( child, node.guid )

			elif child.tag == "custom_event":
				child = XMLCustomEvent( child )
				if child.name:
					custom_event = CustomEvent()
					custom_event.fill_from_xml( child, node.guid )

			elif child.tag == "macro":
				child = XMLMacros( child )
				if child.name and child.source:
					macros = Macros()
					macros.fill_from_xml( child, node.guid )

			elif child.tag == "database":
				child = XMLPluginDB( child )
				if child.name:
					dbManager.import_db( child.name, base64.b64decode( child.db_source ) )

			elif child.tag == "resource":
				child = XMLResource( child )
				if child.name:
					resManager.import_res( child.name, base64.b64decode( child.res_source ) )


	except Exception, ex:
		raise Exception(ex)

	success_result()

except PermissionDeniedError:
	error_result( 'Permission denied' )

except Exception as ex:
	error_result( ex.message )

				]]>
				</Action>
				<Action ID="e690b037-b5a5-41c8-9a18-19012e574785" Name="get_plugin" Top="0" Left="0" State="False">
<![CDATA[
import managers
import json
from api_helper import *
from class_plugins import Plugins

def success_result(data = ''):
	send_response( json.dumps( ["success",data] ) )


def error_result( message = '' ):
	send_response( json.dumps( ["error", message] ) )


def send_response( message ):
	session[ 'response' ] = message

def is_admin():
	# get server's user
	user = managers.request_manager.current.session().user
	return user == u'root'

class PermissionDeniedError( Exception ):
	pass

try:
	if not is_admin():
		raise PermissionDeniedError()
		
	try:
		params = json.loads( request.arguments.get( 'xml_data' ) )
	except Exception, ex:
		raise APICallFailedException("errBadJSONFormat")

	PluginID = params.get( 'pluginguid', '' )

	if not PluginID:
		raise APICallFailedException( "errNoPluginIDProvided" )
	
	try:
		plugin = Plugins.get_by_guid(PluginID)
		output = plugin.export()
		output_len = output.tell()
		output.seek(0)
		success_result( [plugin.name.encode( 'utf8' ) + ".xml", output_len, output.getvalue()] )
	except Exception, ex:
		raise APICallFailedException("errCantGetPlugIN : " + PluginID )
		
except PermissionDeniedError:
	error_result( 'Permission denied' )

except Exception as ex:
	error_result( ex.message )
				]]>
				</Action>
				<Action ID="ba2d6134-b442-4f94-9e6f-7707ad1c64f7" Name="change_root_password" Top="0" Left="0" State="True">
<![CDATA[
import managers
import ProAdmin
import json

def is_admin():
	# get server's user
	user = managers.request_manager.current.session().user
	return user == u'root'


def send_response( message ):
	session[ 'response' ] = json.dumps( message )


class PermissionDeniedError( Exception ):
	def __init__( self ):
		Exception.__init__( 'Permissions denied' )

class ArgumentsError( Exception ):
	def __init__( self, message ):
		Exception.__init__( self, 'Arguments Error: %s' % message )

class RootUserNotFoundError( Exception ):
	def __init__( self ):
		Exception.__init__( 'root-user not found!' )


class SilenException( Exception ):
	pass



try:
	if not is_admin():
		raise PermissionDeniedError()

	# get params
	args = json.loads( request.arguments.get( 'xml_data', '' ) )
	if not args:
		raise ArgumentsError( 'Action arguments not found.' )

	# get password
	password = args.get( 'password', '' )
	if not password:
		raise ArgumentsError( '"password" argument not found' )

	# get root user
	users = ProAdmin.application().get_users( 'root' )
	root = users[ 0 ] if users else None

	if not root:
		raise RootUserNotFoundError()

	# change root password
	root.password = password
	root.save()

	send_response( ['success'] ) #added [] 10.01.2013 Nikita




except PermissionDeniedError as er:
	send_response( [ 'error', er.message ] )

except ArgumentsError as er:
	send_response( [ 'error', er.message ] )

except RootUserNotFoundError as er:
	send_response( [ 'error', er.message ] )

except Exception as er:
	send_response( [ 'error', er.message ] )

except SilenException:
	pass

				]]>
				</Action>
				<Action ID="63c3fa98-e8bd-4e40-916d-ec2d739f12e4" Name="clear" Top="0" Left="0" State="True">
<![CDATA[
import managers
import ProAdmin
from class_db import Database
from class_errors import AccessDeniedError
import json
import clear

def is_admin():
	# get server's user
	user = managers.request_manager.current.session().user
	return user == u'root'


def send_response( message ):
	session[ 'response' ] =  json.dumps( message ) #added json.dumps() 10.01.2013 Nikita


def clear_all():
	clear.clear_all()

#	# clear LDAP base
#	ProAdmin.scheme().delete()
#
#	# delete all application storage
#	application.storage.rmtree('.')
#
#	# clear database
#	Database.maindb().clean()
#	Database.maindb().commit( 'VACUUM' )
#
#	Database.macrosdb().clean()
#	Database.macrosdb().commit( 'VACUUM' )
#
#	# clear all listeners and timers in VEE_core
#	engine.clear_all()


try:
	if not is_admin():
		raise AccessDeniedError()

	clear_all()
	send_response( ['success'] ) #added [] 10.01.2013 Nikita

except AccessDeniedError:
	send_response( ['error', 'premission_denied'] ) #added ['error', ...] 10.01.2013 Nikita

except Exception:
	send_response( ['error', 'unkonwn error'] ) #added [..., 'unknown error'] 10.01.2013 Nikita

				]]>
				</Action>
				<Action ID="9a5212bb-5c0b-440b-b206-a151f4ca6fa9" Name="onload" Top="0" Left="0" State="True">
<![CDATA[
import ProAdmin


user = ProAdmin.current_user()
if user:
	response.redirect( '/settings' )
else:
	response.redirect( '/login' )

				]]>
				</Action>
				<Action ID="43d8e31d-7255-4cdc-af8c-9c6a7cb87d6f" Name="selftest" Top="600" Left="461" State="True">
<![CDATA[
from class_acl_node_interface import ACLNodeInterface
import ProAdmin
from class_smart_group_acl import SmartGroupACL
import managers
import json

def is_admin():
	# get server's user
	user = managers.request_manager.current.session().user
	return user == u'root'


def success_result():
	send_response( json.dumps( ["success"] ) )


def error_result( message = '' ):
	send_response( json.dumps( ["error", message] ) )


def send_response( message ):
	session[ 'response' ] = message


class PermissionDeniedError( Exception ):
	pass


try:
	if not is_admin():
		raise PermissionDeniedError()
	folders = len( ACLNodeInterface.root().list() )
	smarts = len( SmartGroupACL.root().list() )
	success_result()

except PermissionDeniedError:
	error_result( 'Permission denied' )

except Exception as ex:
	error_result( ex.message )

				]]>
				</Action>
			</Actions>
		</Object>
		<Object ID="12d80202-fce3-42f8-a4c2-adb7f7557f76" Name="server500" Type="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
			<Attributes>
				<Attribute Name="noscript"><![CDATA[
				]]></Attribute>
				<Attribute Name="style"><![CDATA[
				]]></Attribute>
				<Attribute Name="testClasses"><![CDATA[
				]]></Attribute>
				<Attribute Name="description"><![CDATA[
				]]></Attribute>
				<Attribute Name="title"><![CDATA[
				]]></Attribute>
				<Attribute Name="image">ed048b51-ed74-46bb-bf9a-eefaf8822634</Attribute>
				<Attribute Name="testFunc"><![CDATA[
				]]></Attribute>
				<Attribute Name="cssclass"><![CDATA[
				]]></Attribute>
				<Attribute Name="customheaders"><![CDATA[
				]]></Attribute>
				<Attribute Name="securitycode"><![CDATA[
				]]></Attribute>
				<Attribute Name="deniedlink"><![CDATA[
				]]></Attribute>
				<Attribute Name="bgrepeat">no-repeat</Attribute>
				<Attribute Name="metakeywords"><![CDATA[
				]]></Attribute>
				<Attribute Name="metadescription"><![CDATA[
				]]></Attribute>
				<Attribute Name="css"><![CDATA[
				]]></Attribute>
			</Attributes>
			<Objects>
				<Object ID="8635680d-156c-4c0c-913b-ef11b7a01250" Name="growl" Type="cb5e0601-80f4-7011-11a2-4f41a3ec1e05">
					<Attributes>
						<Attribute Name="text"><![CDATA[
						]]></Attribute>
						<Attribute Name="left">648</Attribute>
						<Attribute Name="userclass"><![CDATA[
						]]></Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
					</Attributes>
				</Object>
				<Object ID="7e40ee33-5c91-404b-bfa6-9c94835dd223" Name="dialog_error" Type="5a70e041-f288-4905-3ea3-1a0fdfc40475">
					<Attributes>
						<Attribute Name="style"><![CDATA[.boxy-wrapper { position: absolute; }
.boxy-wrapper.fixed { position: fixed; }


.boxy-wrapper .title-bar {
position: relative;
background-color: #e9e9e9;
padding:1px;
font-size:10px;
text-align:center;
}
.boxy-wrapper .title-bar a.close{
position: absolute;
background: url("/3938bd92-e009-2767-09e2-1da56035c24a.png") -95px -128px;
height: 18px;
width: 19px;
top: 6px;
right: 6px;
}
.boxy-wrapper .title-bar a.close:hover{
border: 1px inset #999999;
}
.boxy-inner {
background-color:#fff !important;
box-shadow: 0 0 40px #ccc;
    box-shadow: 0 0 40px #ccc;
    -moz-box-shadow: 0 0 40px #ccc;
    -webkit-box-shadow: 0 0 40px #ccc; 
}]]></Attribute>
						<Attribute Name="show">1</Attribute>
						<Attribute Name="title"><![CDATA[
						]]></Attribute>
						<Attribute Name="height">171</Attribute>
						<Attribute Name="classname"><![CDATA[
						]]></Attribute>
						<Attribute Name="width">484</Attribute>
						<Attribute Name="skin">0</Attribute>
					</Attributes>
					<Objects>
						<Object ID="2b986017-bde9-4b58-9b0b-e3c92f6ed343" Name="text_caption" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="top">28</Attribute>
								<Attribute Name="value">You have been logged off</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">438</Attribute>
								<Attribute Name="fontsize">18</Attribute>
								<Attribute Name="fontfamily">arial</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">23</Attribute>
							</Attributes>
						</Object>
						<Object ID="3f1fa92d-3ae4-4605-9109-6c4849bc9bb2" Name="text_message" Type="73a54f2e-4001-4676-93a0-804048a57081">
							<Attributes>
								<Attribute Name="fontfamily">tahoma</Attribute>
								<Attribute Name="top">69</Attribute>
								<Attribute Name="hint"><![CDATA[
								]]></Attribute>
								<Attribute Name="value">You will be redirected to the login page in few seconds</Attribute>
								<Attribute Name="classname"><![CDATA[
								]]></Attribute>
								<Attribute Name="width">438</Attribute>
								<Attribute Name="css"><![CDATA[
								]]></Attribute>
								<Attribute Name="left">23</Attribute>
							</Attributes>
						</Object>
					</Objects>
					<Actions>
						<Action ID="49f34fbb-7b93-4a53-baef-68d829886953" Name="onload" Top="0" Left="0" State="False">
<![CDATA[

						
						]]>
						</Action>
					</Actions>
				</Object>
			</Objects>
			<Actions>
				<Action ID="dcd354d7-dd28-41ba-bcb4-a55c3460e258" Name="onload" Top="0" Left="0" State="False">
<![CDATA[
"""
"""

from ProSuiteServer500ErrorPage import ProSuiteServer500ErrorPage


page = ProSuiteServer500ErrorPage(self)
page.vdom_objects = {
    "growl": self.growl,
    "500error.caption": self.dialog_error.text_caption,
    "500error.message": self.dialog_error.text_message,
}
page.run("onload")

				]]>
				</Action>
			</Actions>
		</Object>
	</Objects>
	<Structure>
		<Object ID="fc627703-9cf7-4dd9-ab0a-d56bd664381d" Top="0" Left="0" State="0"/>
		<Object ID="3ddabe95-1428-45ce-ae75-1a3af6d74d31" Top="0" Left="0" State="0"/>
		<Object ID="408ecd01-64c9-4e73-bdae-b19202fb7c85" Top="0" Left="0" State="0"/>
		<Object ID="e9cb967e-63b0-4c6f-9824-a69ab9b56ebd" Top="0" Left="0" State="0"/>
		<Object ID="75e7c2b5-646c-4601-9d56-88eedcfba9d0" Top="0" Left="0" State="0"/>
		<Object ID="2ec2bcca-fde3-40c7-bce9-39b42fcad4a0" Top="0" Left="0" State="0"/>
		<Object ID="8d1f7f5d-d297-4dd0-bf13-c0de1beeab32" Top="0" Left="0" State="0"/>
		<Object ID="8e8cbf22-8d6d-46f3-b43e-60a9b8089089" Top="0" Left="0" State="0"/>
		<Object ID="ac45430c-18b1-43e6-8201-30d738b9ff45" Top="0" Left="0" State="0"/>
		<Object ID="39a33860-2520-4900-bb6e-7c58fa4643d8" Top="0" Left="0" State="0"/>
		<Object ID="a2faf518-8fac-4309-b105-1eadd13fe4ed" Top="0" Left="0" State="0"/>
		<Object ID="042dcd5f-fd75-4ece-be93-69d8c2233d12" Top="0" Left="0" State="0"/>
		<Object ID="5b0a11f2-7350-43c8-b2da-9bb7c292317c" Top="0" Left="0" State="0"/>
		<Object ID="043b8f80-f98e-4b17-b59d-03ccf57ec9a3" Top="0" Left="0" State="0"/>
		<Object ID="98387cdd-f400-4410-a8b7-b3da32483b46" Top="0" Left="0" State="0"/>
		<Object ID="9a33fdcd-a85f-40d3-872d-7b22c35646b8" Top="0" Left="0" State="0"/>
		<Object ID="60f0ccd8-ab04-4fd6-a1d1-9af51f23da25" Top="0" Left="0" State="0"/>
		<Object ID="c6021746-cbf1-4f56-bc90-4c1df4dfbaef" Top="0" Left="0" State="0"/>
		<Object ID="8e512270-2cd4-48f6-a0e7-e2b4ccf2e75f" Top="0" Left="0" State="0"/>
		<Object ID="5cad69bb-0ede-4b19-b185-b165471bdb8a" Top="0" Left="0" State="0"/>
		<Object ID="b29e0ecd-f28f-44fb-88e1-5da7fb6e09ce" Top="0" Left="0" State="0"/>
		<Object ID="6814366b-48fe-4b51-9b54-0d8c4c830dbd" Top="0" Left="0" State="0"/>
		<Object ID="6a498a16-c438-43ef-983f-304ea441d053" Top="0" Left="0" State="0"/>
		<Object ID="7f6ed206-a6a2-4e99-846d-3a1ef0e2b568" Top="0" Left="0" State="0"/>
		<Object ID="0c43c57e-2efc-4765-99fe-1608a7ee2206" Top="0" Left="0" State="0"/>
		<Object ID="acb3894d-8aaf-405d-bd0e-2e62aa4cd68c" Top="0" Left="0" State="0"/>
		<Object ID="df322f68-c093-4366-b9ed-e69259d8f8ba" Top="0" Left="0" State="0"/>
		<Object ID="2827dab8-8c06-4274-abcf-0c937bd25adc" Top="0" Left="0" State="0"/>
		<Object ID="49e6fda0-c108-4135-a3c5-80b23c22abe1" Top="0" Left="0" State="0"/>
		<Object ID="67cf0af8-4a57-49ed-a8cd-6938d2e2dc3b" Top="0" Left="0" State="0"/>
		<Object ID="5073ff75-da99-44fb-a5d7-e44e5ab28598" Top="0" Left="0" State="0"/>
		<Object ID="12d80202-fce3-42f8-a4c2-adb7f7557f76" Top="0" Left="0" State="0"/>
	</Structure>
	<Libraries>
		<Library Name="VEE_proadmin">
<![CDATA[from VEE_std_lib import v_BaseException, base_object
from VEE_utils import 	CachedProperty, AutoCast, v_PropertyReadOnly,\
						AutoCastCachedProperty, nothing_inst

from vscript import error
from vscript.subtypes import generic
import ProAdmin



class v_ProAdminLoginError( v_BaseException ):
	pass

class v_ProAdminEmptyPasswordError( v_BaseException ):
	pass

class v_ProAdminNoCurrentUser( v_BaseException ):
	pass

EXCEPTIONS = {
	ProAdmin.ProAdminLoginError			: v_ProAdminLoginError,
	ProAdmin.ProAdminEmptyPasswordError	: v_ProAdminEmptyPasswordError,
}



class v_user( base_object ):

	@CachedProperty
	def user( self ):
		return self.object


	@AutoCast
	@v_PropertyReadOnly
	def v_groups( self ):
		return map( v_group, self.user.get_groups() )


	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_isuser( self ):
		return True


	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_notificationemail( self ):
		return self.user.notification_email


	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_firstname( self ):
		return self.user.first_name


	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_lastname( self ):
		return self.user.last_name


	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_cellphone( self ):
		return self.user.cell_phone


	#obsolete methods names
	v_get_groups = v_groups
	v_is_user = v_isuser
	v_notification_email = v_notificationemail



class v_group( base_object ):

	@CachedProperty
	def group( self ):
		return self.object


	@AutoCast
	@v_PropertyReadOnly
	def v_users( self ):
		return map( v_user,  self.group.get_users() )


	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_isuser ( self ):
		return False


	#obsolete methods names
	v_get_users = v_users
	v_is_user = v_isuser



class v_application( base_object ):

	def __init__( self, data ):
		base_object.__init__( self, self )
		self._title = data[0]
		self.data = data[1]

	@AutoCast
	@v_PropertyReadOnly
	def v_title(self):
		return self._title

	@AutoCast
	@v_PropertyReadOnly
	def v_ip(self):
		return self.data.get('ip', '')

	@AutoCast
	@v_PropertyReadOnly
	def v_guid(self):
		return self.data.get('guid', '')

	@AutoCast
	@v_PropertyReadOnly
	def v_hosts(self):
		return self.data.get('hosts', [])

	@AutoCast
	@v_PropertyReadOnly
	def v_name(self):
		return self.data.get('name', '')


class v_proadmin( generic ):

	@classmethod
	@AutoCast
	@v_PropertyReadOnly
	def v_accesstokenforuser( self, user ):
		return ProAdmin.sudo_accesstoken( user.user )


	@classmethod
	@AutoCast
	def v_setcurrentuser( self, user = None ):
		ProAdmin.set_user( user.user )


	@classmethod
	@AutoCast
	@v_PropertyReadOnly
	def v_currentuser( self ):
		user = ProAdmin.current_user()
		return 	v_user( user ) if user else nothing_inst


	@classmethod
	@AutoCast
	def v_login( self, email, password ):
		try:
			ProAdmin.login( email, password )
		except Exception, ex:
			cls = EXCEPTIONS.get( ex.__class__, v_BaseException )
			raise cls( ex.message )


	@classmethod
	@AutoCast
	def v_searchuser( self, email = None, guid = None ):
		return map( v_user,  ProAdmin.application().get_users( email, guid ) )


	@classmethod
	@AutoCast
	def v_searchgroup( self, name = None, guid = None ):
		return map( v_group,  ProAdmin.application().get_groups( name, guid ) )


	@classmethod
	@AutoCast
	def v_isuseringroup( self, user, group ):
		group_guid = group.group.guid
		for g in user.user.get_groups():
			if g.guid == group_guid:
				return True

		return False


	@classmethod
	@AutoCast
	def v_registeredapplications( self ):
		return map( v_application, ProAdmin.get_registred_applications().items() )


	#obsolete methods names
	v_set_user = v_setcurrentuser
	v_current_user = v_currentuser
	v_search_users = v_users = v_searchuser
	v_search_groups = v_groups = v_searchgroup
	v_is_user_in_group = v_user_in_group = v_isuseringroup
	v_registered_applcations = v_applications = v_registeredapplications



def authenticated( func ):
	def wrapper( *args, **kwargs ):
		if not ProAdmin.current_user():
			raise v_ProAdminNoCurrentUser( "No logged in user" )
		return func( *args, **kwargs )
	return wrapper



class v_rule( base_object ):

	@CachedProperty
	def rule( self ):
		return self.object

	@CachedProperty
	@v_PropertyReadOnly
	def v_subject( self ):
		subj = self.rule.subject
		return v_user( subj ) if subj.is_user() else v_group( subj )

	@AutoCastCachedProperty
	@v_PropertyReadOnly
	def v_access( self ):
		return self.rule.access



environment = tuple( (  (cls.__name__.lower(), error( cls ) ) for cls in EXCEPTIONS.itervalues() ) ) + \
(	( "v_proadmin",			v_proadmin	), )
]]>
		</Library>
		<Library Name="VEE_triggers">
<![CDATA["""
"""

from utils.threads import VDOM_thread

import VEE_core


APP_ID = application.id


class EngineTimeTrigger(VDOM_thread):
    '''
    '''
    DEFAULT_TIMEOUT = 5.0

    def __init__(self):
        VDOM_thread.__init__(self)

    def work(self):
        '''
        '''
        try:
            #debug("------------>>>> Trying to start engine: ")
            application.set_app_id(APP_ID)
            self.save_thread()

            return VEE_core.engine.process_queue() or self.DEFAULT_TIMEOUT
            
        except Exception as ex:
            VEE_core.engine.engine_logger.exception('')
#           from vdom_trace import Trace
#           VEE_core.engine.log("@@@@@@@@@Error while vscript execution." )
#           VEE_core.engine.log( Trace.exception_trace() )

            # try:
            #   VEE_core.engine.info( str( e ) )
            # except: pass
            # #debug("------------>>>> Exception: %s"%e)
            try:
                return self.DEFAULT_TIMEOUT

            except Exception as ex:
                self.stop()


    def save_thread(self):
        '''
        '''
        try:
            import VEE_core as c
            c.engine_thread = self
        except:
            pass


class CompilerTimeTrigger(VDOM_thread):
    '''
    '''
    DEFAULT_TIMEOUT = 5.0

    def __init__(self):
        VDOM_thread.__init__(self)

    def work(self):
        '''
        '''
        try:
            #debug("------------>>>> Trying to start engine: ")
            application.set_app_id(APP_ID)
            self.save_thread()

            return VEE_core.engine.do_compile() or self.DEFAULT_TIMEOUT
            
        except Exception as ex:
            VEE_core.engine.engine_logger.exception('')
            # from vdom_trace import Debug
            # VEE_core.engine.error_log()
            # VEE_core.engine.info( Debug.exception_trace_s() )

            # try:
            #   VEE_core.engine.info( str( e ) )
            # except: pass
            # #debug("------------>>>> Exception: %s"%e)
            try:
                return self.DEFAULT_TIMEOUT

            except Exception as ex:
                self.stop()


    def save_thread(self):
        '''
        '''
        try:
            import VEE_core as c
            c.compiler_thread = self
        except:
            pass]]>
		</Library>
		<Library Name="promail_xapian">
<![CDATA[# encoding: utf8

import email
import os
import pyzmail

from datetime import datetime

from ext_xapian_orm import *


database_path = "mymails"
database = Database(database_path)


class ListField(Field):

    separator = ","

    def __init__(self, separator=None, *args, **kwargs):
        if separator is not None:
            self.separator = separator

        super(ListField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(ListField, self).clone_base(
            separator=self.separator,
            **kwargs
        )

    def xapian_value(self, value):
        return self.separator.join(map(self.coerce, value))

    def python_value(self, value):
        return value.split(self.separator)


class ContactsListField(ListField):

    def contacts_list_to_string(self, contacts):
        result = []
        for contact in contacts:
            result.extend(map(self.coerce, contact))

        return sorted(result)

    def coerce(self, value):
        return smart_str(value).replace("@", "_")\
                               .replace(".", "_")

    def xapian_term(self, value):
        return self.contacts_list_to_string(value)

    def xapian_value(self, value):
        return self.separator.join(self.contacts_list_to_string(value))

    def xapian_query_value(self, value):
        return self.coerce(value)


class ContactField(ContactsListField):

    def contact_to_string(self, contact):
        return sorted(map(self.coerce, contact))

    def xapian_term(self, value):
        return self.contact_to_string(value)

    def xapian_value(self, value):
        return self.separator.join(self.contact_to_string(value))


class Message(Document):

    class Meta:
        database = database

    bcc = ContactsListField(
        is_term=True,
        is_value=True,
        is_data=True,
        index=True,
        prefix="BC"
    )

    to = ContactsListField(
        is_term=True,
        is_value=True,
        is_data=True,
        index=True,
        prefix="TO"
    )

    cc = ContactsListField(
        is_term=True,
        is_value=True,
        is_data=True,
        index=True,
        prefix="CC"
    )

    sender = ContactField(
        is_term=True,
        is_value=True,
        is_data=True,
        index=True,
        prefix="FR"
    )

    uuid = UUIDField(
        is_boolean_term=True,
        is_value=True,
        prefix="UD"
    )

    date = DateTimeField(
        is_term=True,
        is_value=True,
        index=True,
        prefix="DT"
    )

    subject = TextField(
        is_term=True,
        is_value=True,
        index=True,
        prefix="SB"
    )

    # blind carbon copy list
    # bcc = TextField
    # body = TextField
    # body_html = TextField
    # cc = TextField
    # date = DateTimeField
    # embedded_text = TextField
    # attach_text = TextField
    # flags = TextField
    # sender = TextField
    # mime = TextField
    # msgid = TextField
    # path = TextField
    # priority = TextField
    # refs = TextField
    # size = IntegerField
    # subject = TextField
    # tags = TextField
    # thread_id = TextField
    # to = TextField
    # uuid = UUIDField

def parse_msg_date(msg):
    """
    Get Date from E-mail
    """
    date_str = msg.get_decoded_header("Date")
    date = None

    if date_str:
        date = email.utils.parsedate_tz(date_str)

    if not date:
        for hname, hvalue in msg.items():
            if "Received" in hname:
                date_str = hvalue.rsplit(";",1)[1]
                date = email.utils.parsedate_tz(date_str)

            if date:
                break

    if date:
        date = datetime.fromtimestamp(email.utils.mktime_tz(date))

    return date or ''


#
#if __name__ == "__main__":
#
#    path = '/Users/sergejpetrov/Downloads/Takeout/mails/out'
#
#    i = 0
#    for node in os.listdir(path):
#        break
#        if node.startswith('.'):
#            continue
#
#        with open(os.path.join(path, node), 'rb+') as fd:
#            msg = pyzmail.PyzMessage.factory(fd)
#
#            message = Message.create(
#                subject=msg.get_subject(),
#                date=parse_msg_date(msg),
#                sender=msg.get_addresses("from")[0],
#                to=msg.get_addresses("to"),
#                cc=msg.get_addresses("cc"),
#                bcc=msg.get_addresses("bcc")
#            )
#
#            i += 1
#
#        if i > 100:
#            break
#
#    q = Message.search(Message.sender.like(u'svpfido')).order_by(Message.to)
#    print q
#    print q.count()
#
#    for m in q:
#        print m.model.id
#        print m.model.uuid
#        print m.model.to
#
#
]]>
		</Library>
		<Library Name="promail_testers">
<![CDATA["""
"""

import json
import poplib
import smtplib
import subprocess

from inspect import getdoc

from promail_orm import Connectivity
from promail_tasks import tasks


def run_tests(tests):

    block_sep = "\n\n" + "=" * 30 + "\n\n"
    test_sep = "\n\n" + "-" * 50 + "\n\n"
    output = ['']
    stat = []


    for test_set in tests:

        test_output = []
        test_stat = []
        params = test_set[1]

        for name, test in test_set[0]:

            out, err = test(params)

            out = getdoc(test).format(**params) + "\n" + out
            out += "\n--== Test result: {} ==--".format("failed" if err else "passed")

            test_output.append(out)
            test_stat.append([name, err])
            if err:
                break

        output.append(test_sep.join(test_output))
        stat.append(test_stat)

    return {
        "output": block_sep.join(output),
        "stat": stat
    }



def test_ping(server):
    """--== Test: ping {host} ==--"""

    addr = server["host"]
    output =[]

    ping = subprocess.Popen(["ping", "-c", '4', addr], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = ping.communicate()

    output.append(out or err)
    error = ping.returncode

    return "\n".join(output), bool(error)


def test_pop3(server):
    """--== Test: POP3 connection to {host}:{port} (secure - {secure}) ==--"""

    auth = server.get('auth', None)
    addr = server["host"]
    port = int(server["port"])
    secure = Connectivity.SECURITY_E(server["secure"])
    output = []
    error = False

    try:
        conn = (poplib.POP3_SSL if secure == Connectivity.SECURITY_E.SSL else \
                poplib.POP3)(addr, port)

        output.append("Connecting to server...")
        output.append("Sent 'getwelcome'...")
        output.append("Response: {}".format(conn.getwelcome()))

        if auth:
            output.append("Sent 'user'...")
            output.append("Response: {}".format(conn.user(auth['login'])))
            output.append("Sent 'pass_'...")
            output.append("Response: {}".format(conn.pass_(auth['passwd'])))

    except Exception as ex:
        output.append("Error: {}".format(str(ex)))
        error = True

    return "\n".join(output), error


def test_smtp(server):
    """--== Test: SMTP connection to {host}:{port} (secure - {secure}) ==--"""

    auth = server.get('auth', None)
    addr = server["host"]
    port = int(server["port"])
    secure = Connectivity.SECURITY_E(server["secure"])
    output = []
    error = False

    try:
        conn = (smtplib.SMTP_SSL if secure == Connectivity.SECURITY_E.SSL else \
                smtplib.SMTP)(addr, port)

        output.append("Connecting to server...")
        output.append("Sent 'ehlo'...")
        output.append("Response: {}".format(str(conn.ehlo())))

        if secure == Connectivity.SECURITY_E.STARTTLS:
            output.append("Starting TLS ...")
            output.append("Response: {}".format(str(conn.starttls())))

        if auth:
            output.append("Sent 'login'...")
            output.append("Response: {}".format(conn.login(auth['login'], auth['passwd'])))

    except Exception as ex:
        output.append("Error: {}".format(str(ex)))
        error = True

    return "\n".join(output), error


@tasks.background_ui(attempts=2)
def test_server_connection(server):
    """
    Test connection to server
    """
    tests = [
        [
            [
                ["pop3_ping", test_ping],
                ["pop3_conn", test_pop3],
            ],
            server["in"]
        ],
        [
            [
                ["smtp_ping", test_ping],
                ["smtp_conn", test_smtp],
            ],
            server["out"]
        ],
    ]

    return json.dumps(run_tests(tests))


@tasks.background_ui(attempts=2)
def test_account_connection(account):
    """
    Test connection to server
    """
    server = account["server"]
    server["in"]["auth"] = server["out"]["auth"] = {
        "login": account["login"],
        "passwd": account["passwd"]
    }

    tests = [
        [
            [
                ["pop3_ping", test_ping],
                ["pop3_auth", test_pop3],
            ],
            server["in"]
        ],
        [
            [
                ["smtp_ping", test_ping],
                ["smtp_auth", test_smtp],
            ],
            server["out"]
        ],
    ]

    return json.dumps(run_tests(tests))






]]>
		</Library>
		<Library Name="class_xml_resource">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLResource( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'resource' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, obj, recursive=False, comparer=None ):
		result = Node.find( self, obj, recursive, comparer )

		if type(obj) not in [ str, unicode ]:
			return result

		if not result:
			result = self.create_child( obj )

		return result


	@property
	def name( self ):
		return self.find( 'name' ).text

	@name.setter
	def name( self, value ):
		self.find( 'name' ).text = value

	@property
	def res_source( self ):
		return self.find( 'res_source' ).text

	@res_source.setter
	def res_source( self, value ):
		self.find( 'res_source' ).text = value
]]>
		</Library>
		<Library Name="ProSuiteHeaderPage">
<![CDATA["""
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 23:30 (RTZ +5)"

import ProAdmin
import prosuite_constants as PRConst

from proadmin_remote_settings import RemoteSettings
from prosuite_web import ProSuiteBasicPage, callback, authenticated


LOGOUT_ICON = "/8ae9ed10-d910-4aec-8316-5e9cfb2da6d3.res"


class ProSuiteHeaderPage(ProSuiteBasicPage):

    def localize_page(self):
        pass

    @callback('request_start', 2)
    @authenticated
    def on_request_start(self, *args, **kwargs):
        pass

    @callback("onload", 2)
    def onload(self, *args, **kwargs):
        """
        On page load
        """
        self.render_menu_items()
        self.render_applications_list()

    def set_menu_items(self, menu_items_dict):
        self._menu_items = menu_items_dict

    def get_menu_items(self):
        if hasattr(self, "_menu_items"):
            return self._menu_items
        return {}

    menu_items = property(get_menu_items, set_menu_items)

    def get_page_title(self):
        return ""

    def get_localization_data(self):
        return {
        }

    def render_applications_list(self):
        """
        """

        result_html = [u"<div class='top_start_container'></div>"]

        if RemoteSettings.get_remote_settings():

            # define current protocol
            protocol = self.current_protocol() or "http"

            result_html.append((u"<div class='first_block block_start_container'>"
                               u"<div class='center_align_block switch-to'>"
                               u"{}</div></div>").format(
                                    self.localization["prosuite.header.switch_to_app"]
                                )
                            )

            remote_applications = ProAdmin.get_registred_applications()
            current_app_hosts = ProAdmin.hosts()
            current_app_id = application.id

            for app_name, app_data in remote_applications.items():

                # check to be sure that it is not current application
                if current_app_id != app_data["guid"] and current_app_hosts != app_data["hosts"]:

                    app_host = app_data["hosts"][0] if "hosts" in app_data else ""

                    # add protocol to application url
                    if app_host:
                        app_host = protocol + "://" + app_host

                    app_icon = PRConst.APP_ICONS.get(app_data["guid"], "")

                    result_html.append((u"<div class='app_start_container'>"
                                       u"<div class='center_align_app' title='{app_host}'>"
                                       u"<img src='{app_icon}'><a href='{app_host}'>"
                                       u"{app_name}</a></div></div>").format(
                                            app_icon=app_icon,
                                            app_host=app_host,
                                            app_name=app_data["name"]
                                        )
                                    )

        first_block = "first_block" if not RemoteSettings.get_remote_settings() else ""
        result_html.append((u"<div class='{first_block} block_start_container'>"
                           u"<div class='center_align_block current-user'>"
                           u"{user_name}</div></div>").format(
                                first_block=first_block,
                                user_name=self.current_user.user.name
                           )
                        )

        result_html.append((u"<div class='block_start_container app-like'>"
                            u"<div class='center_align_block'>"
                            u"<img src='{logout_icon}'>"
                            u"<a href='{logout_page}'>{logout_text}</a>"
                            u"</div></div><div class='bottom_start_container'>"
                            u"</div>").format(
                                logout_icon=LOGOUT_ICON,
                                logout_page=self.app_settings.pages["logoff"],
                                logout_text=self.localization["prosuite.header.logout_label"]
                            )
                        )

        self.vdom_objects["start_html"].htmlcode = u"".join(result_html)
        self.vdom_objects["start_button"].hint = u"{app_name} v. {app_version}".format(
            app_name=self.app_settings.info["name"],
            app_version=self.app_settings.info["version"]
        )

    def render_menu_items(self):
        """
        """
        is_admin = self.current_user.is_admin()
        current_page = self.current_page().split(".vdom")[0]

        for container, data in self.menu_items.items():
            if data["admin_only"] and not is_admin:
                container.visible = "0"

            if current_page in data["pages"]:
                container.classname += " m-active"

            data["title_obj"].value = self.localization[data["localization"]]
]]>
		</Library>
		<Library Name="proadmin_utils">
<![CDATA[import json


class AuthorizationError( Exception ):
	def __init__( self ):
		message = 'Need administrative rights. Relogin to application as "root".'
		Exception.__init__( self, message )





# -----------------------------------------------------------------------------
#		Common Utils for all applications
# -----------------------------------------------------------------------------

class CommonUtils( object ):
	@classmethod
	def is_proadmin( self ):
		""" define that current application is ProAdmin
		"""
		import ProAdmin
		return application.id == ProAdmin.PROADMIN_APPLICATION_GUID


	# ---------------------------------
	#  Server user authorization utils
	# ---------------------------------

	@classmethod
	def current_user( self ):
		""" get current server's user
		"""
		import managers
		return managers.request_manager.current.session().user


	@classmethod
	def login( self, login, password ):
		""" login user to server
		"""
		import managers
		managers.request_manager.current.session().set_user( login, password )


	@classmethod
	def logoff( self ):
		import managers
		managers.request_manager.current.session().set_user( 'guest', '' )


	@classmethod
	def is_admin( self ):
		""" check that current user admin
		"""
		return self.current_user().lower() in [ 'root', 'admin' ]




	# ---------------------------------
	#  Diagnostinc utils
	# ---------------------------------

	@classmethod
	def ping( self, showerror=False, raiseerror=False ):
		""" ping ProAdmin components for available
		"""
		import ProAdmin

		# define return formats
		def error_result( message='' ):
			error = {
				'status'	: 'error',
				'message'	: str( message )
			}

			if showerror:
				return json.dumps( error, indent=4 )

			return 'error'

		def success_result():
			success = {
				'status'	: 'success',
				'message'	: '',
			}

			if showerror:
				return json.dumps( success, indent=4 )

			return 'success'



		try:
			# check that scheme exists
			scheme = ProAdmin.scheme()
			if not scheme: raise Exception( "Can't create application scheme" )

			app = scheme.application
			if not app: raise Exception( "Can't create application ACL object" )

			# check objects ldap
			app.child_objects()

			# check users ldap
			app.get_users()

			if not scheme.is_remote():
				return success_result()

			# check sync thread
			if not ProAdmin.sync_thread: raise Exception( "Synchronization thread has crashed. Need server reboot." )

			# try to synchronize
			scheme.sync()


		except Exception as ex:
			if raiseerror: raise
			return error_result( ex.message )

		return success_result()





	@classmethod
	def info( self ):
		""" return information about current proadmin scheme
		"""
		if not self.is_admin():
			raise AuthorizationError()

		import ProAdmin
		from collections import OrderedDict
		info = OrderedDict()

		# application info
		app = ProAdmin.application()
		app_info = OrderedDict()
		app_info[ 'name' ] = app.name
		app_info[ 'guid' ] = app.guid
		app_info[ 'api' ] = app.scheme.get_option( 'api_guid' )
		info[ 'application' ] = app_info

		# scheme info
		scheme = ProAdmin.scheme()
		scheme_info = OrderedDict()
		scheme_info[ 'type' ] = scheme.type
		if scheme.is_remote():
			from proadmin_remote_settings import RemoteSettings
			settings = RemoteSettings.get_remote_settings()
			scheme_info[ 'host' ] = settings.server
			scheme_info[ 'login' ] = settings.login
		info[ 'scheme' ] = scheme_info

		return json.dumps( info, indent=4 )


	@classmethod
	def set_local_scheme( self ):
		""" set local scheme
		"""
		if not self.is_admin():
			raise AuthorizationError()

		from proadmin_remote_settings import RemoteSettings
		try:
			if RemoteSettings.get_remote_settings(): RemoteSettings.delete()
		except: pass

		import ProAdmin
		ProAdmin.unregister_default_scheme()



	@classmethod
	def set_remote_settings( self, server, user, password ):
		""" set another proadmin settings
		"""
		import ProAdmin
		from proadmin_remote_settings import RemoteSettings

		if not self.is_admin():
			raise AuthorizationError()

		if self.is_proadmin(): return

		remote = RemoteSettings.get_remote_settings()
		if remote and not password: password = remote.password

		RemoteSettings( user, password, server ).save()
		ProAdmin.logoff()
		ProAdmin.unregister_default_scheme()


	@classmethod
	def reset_root_password( self ):
		if not self.is_admin():
			raise AuthorizationError()

		import ProAdmin

		try:
			# find root user of create it
			root = ProAdmin.application().get_users( 'root' )
			if not root:
				root = ProAdmin.application().create_user( 'root' )
			else:
				root = root[0]

			# reset password to default
			root.password = 'root'
			root.save()

		except: raise







# -----------------------------------------------------------------------------
#		Utils specific only for ProAdmin application
# -----------------------------------------------------------------------------

class ProAdminUtils( CommonUtils ):
	@classmethod
	def info( self ):
		from collections import OrderedDict
		from class_db_application import DB_Application

		# get common information
		info = CommonUtils.info()
		info = json.loads( info, object_pairs_hook=OrderedDict )

		# get information about connected applications
		apps = DB_Application.get_all()

		def app_info( app ):
			result = OrderedDict()

			result[ 'name' ] = app.name
			result[ 'guid' ] = app.app_box_guid
			result[ 'host' ] = app.ip
			result[ 'api' ] = app.api_guid
			result[ 'ldap_guid' ] = app.guid

			return result
		info[ 'applications' ] = [ app_info(a) for a in apps ]

		return json.dumps( info, indent=4 )



	@classmethod
	def set_local_scheme( self ):
		""" set local scheme
		"""
		if not self.is_admin():
			raise AuthorizationError()

		
		from proadmin_external_settings import ProAdminSchemeConfig

		try:
			external = ProAdminSchemeConfig.get_active()
			if not external: return

			external.set_is_active( False )
			external.save()

		except: pass

		import ProAdmin
		ProAdmin.unregister_default_scheme()






# -----------------------------------------------------------------------------
#		Define correct class for concrete situation
# -----------------------------------------------------------------------------

Utils = ProAdminUtils if ProAdminUtils.is_proadmin() else CommonUtils
]]>
		</Library>
		<Library Name="class_xml_plugin">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLPlugin( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'plugin' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, key, recursive=False, comparer=None ):
		return self[key] if key in self.keys() else ""


	@property
	def name( self ):
		return self.find( 'name' )

	@name.setter
	def name( self, value ):
		self['name'] = value

	@property
	def guid( self ):
		return self.find( 'guid' )

	@guid.setter
	def guid( self, value ):
		self['guid'] = value

	@property
	def description( self ):
		return self.find( 'description' )

	@description.setter
	def description( self, value ):
		self['description'] = value

	@property
	def picture( self ):
		return self.find( 'picture' )

	@picture.setter
	def picture( self, value ):
		self['picture'] = value

	@property
	def version( self ):
		return self.find( 'version' )

	@version.setter
	def version( self, value ):
		self['version'] = value

	@property
	def author( self ):
		return self.find( 'author' )

	@author.setter
	def author( self, value ):
		self['author'] = value

	@property
	def protected( self ):
		return self.find( 'protected' )

	@protected.setter
	def protected( self, value ):
		self['protected'] = value


]]>
		</Library>
		<Library Name="VEE_system">
<![CDATA[from utils.system import get_hd_size, get_free_space
from VEE_utils import AutoCast, encodeUTF8
from vscript import generic, version

APPLICATION_LIBRARIES_VERSION = 2

class v_smartcard( object ):

	@classmethod
	@AutoCast
	def v_getparameterbyid( self, id ):
		from utils.card_connect import get_system_attribute
		return get_system_attribute( id )


	#obsolete methods names
	v_get_parameter = v_getparameterbyid



class v_system( object ):

	@staticmethod
	@AutoCast
	def v_applicationid( ):
		return application.id


	@staticmethod
	@AutoCast
	def v_applicationname( ):
		import config
		return config.config[ "app_name" ]


	@staticmethod
	@AutoCast
	def v_applicationversion( ):
		import config
		return config.config[ "version" ]


	@staticmethod
	@AutoCast
	def v_applicationhosts( ):
		return v_system.application_hosts()


	@classmethod
	def application_hosts( self ):
		import managers
		app_virtual_host = managers.virtual_hosts.get_site
		app_sites		 = managers.virtual_hosts.get_sites()
		app_id 			 = application.id
		return [  site for site in app_sites if app_id == app_virtual_host( site ) ]


	@staticmethod
	@AutoCast
	def v_serverversion( ):
		return server.version


	@staticmethod
	def v_enabledebug( ):
		v_system.debug( True )


	@staticmethod
	def v_disabledebug( ):
		v_system.debug( False )


	@staticmethod
	def debug( value, disp ):
		disp.debug = value

	@staticmethod
	def v_clearlog( disp ):
		disp.clear_log()


	@staticmethod
	@AutoCast
	def log( msg , disp ):
		disp.info(  msg  )


	@staticmethod
	@AutoCast
	def v_sendemail( to_email, from_email, subject, body, reply="" ):
		server.mailer.send( fr=from_email,to=to_email,subj=subject,msg=body,reply=reply )


	@staticmethod
	@AutoCast
	def v_httprequest( url ):
		import urllib2
		urllib2.urlopen( url )


	@staticmethod
	@AutoCast
	def v_vscriptversion( ):
		return "{major}.{minor}.{build}.{env}".format( 	major = version.major,
														minor = version.minor,
														build = version.build,
														env = APPLICATION_LIBRARIES_VERSION )

	class v_hdd( object ):
		@staticmethod
		@AutoCast
		def v_totalspace():
			#         Gb         Mb      Kb      bytes
			return get_hd_size()*1024.0*1024.0*1024.0


		@staticmethod
		@AutoCast
		def v_freespace():
			#         Gb         Mb      Kb      bytes
			return get_free_space()*1024.0*1024.0*1024.0



	#obsolete methods names
	v_application_id 		= v_applicationid
	v_application_name 		= v_applicationname
	v_application_version 	= v_applicationversion
	v_application_hosts 	= v_applicationhosts
	v_server_version 		= v_serverversion
	v_enable_debug 			= v_enabledebug
	v_disable_debug 		= v_disabledebug
	v_clear_log 			= v_clearlog
	v_send_email 			= v_sendemail
	v_http_request 			= v_httprequest


environment = (
	( "v_smartcard",			v_smartcard	),
	( "v_system",				v_system	),
)
]]>
		</Library>
		<Library Name="promail_acl_objects">
<![CDATA["""
"""

import ProAdmin

from collections import defaultdict
from functools import wraps

from ext_enum import Enum
from ext_peewee import fn
from promail_orm import (
    Archive,
    ArchivesList,
    Label,
    Mailbox
)
from prosuite_errors import ProSuiteBaseError
from prosuite_settings import settings
from prosuite_user import ProSuiteUser
from prosuite_utils import to_list



class PermissionDenied(ProSuiteBaseError):
    pass


def owner_rights(func):
    """
    Check user rights before function execution
    """
    @wraps(func)
    def decorator(self, *args, **kwargs):
        if not self.is_owner():
            raise PermissionDenied

        return func(self, *args, **kwargs)

    return decorator


def read_rights(func):
    """
    Check user rights before function execution
    """
    @wraps(func)
    def decorator(self, *args, **kwargs):
        if not self.can_read():
            raise PermissionDenied

        return func(self, *args, **kwargs)

    return decorator


def modify_rights(func):
    """
    Check user rights before function execution
    """
    @wraps(func)
    def decorator(self, *args, **kwargs):
        if not self.can_modify():
            raise PermissionDenied

        return func(self, *args, **kwargs)

    return decorator


def write_rights(func):
    """
    Check user rights before function execution
    """
    @wraps(func)
    def decorator(self, *args, **kwargs):
        if not self.can_write():
            raise PermissionDenied

        return func(self, *args, **kwargs)

    return decorator


################################
#
# ACL Rule Object
#
################################
class ACLRule(object):

    __slots__ = ("object", "subject", "access")
    def __init__(self, object, subject, access):
        self.object = object
        self.subject = subject
        self.access = access

################################
#
# ACL Proxy Object
#
################################

class ACLModelProxy(object):

    __slots__ = ("_obj", "_aclobj")

    # Low level access values
    class LL_ACCESS(Enum):
        READ = 'r'
        WRITE = 'w'
        DELETE = 'd'

    # High level access value
    class HL_ACCESS(Enum):
        READ = 'read'
        WRITE = 'write'
        MODIFY = 'modify'

    # Allowed attributes for access through proxy
    ALLOWED_ATTRS = None

    # DB Model
    MODEL = None

    # ACL Type
    ACL_TYPE = None


    def __init__(self, obj, aclobj):
        object.__setattr__(self, "_obj", obj)
        object.__setattr__(self, "_aclobj", aclobj)

    def __getattr__(self, key):
        if key not in self.ALLOWED_ATTRS:
            raise AttributeError(key)

        return getattr(self._obj, key)

    def __setattr__(self, key, value):
        if key not in self.ALLOWED_ATTRS:
            raise AttributeError(key)

        setattr(self._obj, key, value)

    @owner_rights
    def remove(self, full=False):
        if full:
            self._obj.remove(full=full)
            self._aclobj.delete()

        else:
            self._obj.remove(full=full)

    @read_rights
    def remove_rights(self):
        user = ProSuiteUser.current_user()
        rules = self.ll_rules(user=user)

        for rule in rules:
            if rule.subject == user:
                self._aclobj.remove_rule(rule.subject.user, rule.access.value)

        self._aclobj.save()

    @owner_rights
    def save(self):
        self._aclobj.name = self._obj.name
        self._aclobj.save()
        self._obj._uuid = self._aclobj.guid
        self._obj.save()

    ################################
    #
    # Low Level Rules <-> High Level Rules
    #
    ################################

    @classmethod
    def to_high_level_rules(cls, rules):
        if cls.LL_ACCESS.DELETE in rules and \
           cls.LL_ACCESS.WRITE in rules and \
           cls.LL_ACCESS.READ in rules:

            return cls.HL_ACCESS.MODIFY

        elif cls.LL_ACCESS.WRITE in rules and \
             cls.LL_ACCESS.READ in rules:

            return cls.HL_ACCESS.WRITE

        elif cls.LL_ACCESS.READ in rules:
            return cls.HL_ACCESS.READ

        return None

    @classmethod
    def to_low_level_rules(cls, rule):
        if rule == cls.HL_ACCESS.READ:
            return (cls.LL_ACCESS.READ,)

        elif rule == cls.HL_ACCESS.WRITE:
            return (cls.LL_ACCESS.READ, cls.LL_ACCESS.WRITE)

        elif rule == cls.HL_ACCESS.MODIFY:
            return (cls.LL_ACCESS.READ, cls.LL_ACCESS.WRITE, cls.LL_ACCESS.DELETE)

        return None

    ################################
    #
    # Low Level Rules Manipulation
    #
    ################################

    def ll_rules(self, rules=None, user=None, subject=None):
        user = (user or ProSuiteUser(subject)).user if (subject or user) else None
        rules = [rule.value for rule in to_list(rules) if rule in self.LL_ACCESS] if rules else None

        return [ACLRule(self, ProSuiteUser(rule.subject), self.LL_ACCESS(rule.access))
            for rule in self._aclobj.rules(
                subject=user,
                access=rules
        )]

    @owner_rights
    def add_ll_rules(self, rules, user=None, subject=None, save=True):
        user = (user or ProSuiteUser(subject)) if (subject or user) else ProSuiteUser.current_user()

        for rule in to_list(rules):
            if rule in self.LL_ACCESS:
                self._aclobj.add_rule(user.user, rule.value)

        if save:
            self._aclobj.save()

    def has_ll_rules(self, rules, user=None, subject=None):
        user = (user or ProSuiteUser(subject)) if (subject or user) else ProSuiteUser.current_user()
        if user.is_admin() and settings.system["root_god_mode"]:
            return True

        rules_len = len({r.access: r for r in self.ll_rules(
            user=user,
            rules=rules
        )})

        return len(rules) == rules_len

    @owner_rights
    def remove_ll_rules(self, rules=None, user=None, subject=None, save=True):
        subject = (user or ProSuiteUser(subject)).user if (subject or user) else None

        rules = self.ll_rules(rules=rules, subject=subject)
        if not rules:
            return

        for rule in rules:
            if rule.subject.user == subject:
                self._aclobj.remove_rule(rule.subject.user, rule.access.value)

        if save:
            self._aclobj.save()

    def users(self):
        return list({rule.subject for rule in self.ll_rules()})

    ################################
    #
    # High Level Rules Manipulation
    #
    ################################

    def add_hl_rule(self, rule, user=None, subject=None):
        if rule not in self.HL_ACCESS:
            return

        self.add_ll_rules(
            rules=self.to_low_level_rules(rule),
            user=user,
            subject=subject
        )

    def has_hl_rule(self, rule, user=None, subject=None):
        if rule not in self.HL_ACCESS:
            return False

        return self.has_ll_rules(
            rules=self.to_low_level_rules(rule),
            user=user,
            subject=subject
        )

    def remove_hl_rules(self, rule=None, user=None, subject=None):
        if rule and rule not in self.HL_ACCESS:
            return

        self.remove_ll_rules(
            rules=self.to_low_level_rules(rule) if rule else rule,
            user=user,
            subject=subject
        )

    def hl_rules(self, rule=None, user=None, subject=None):
        if rule and rule not in self.HL_ACCESS:
            return []

        rules = self.ll_rules(
            rules=self.to_low_level_rules(rule) if rule else rule,
            user=user,
            subject=subject
        )

        result = defaultdict(list)
        for rule in rules:
            result[rule.subject].append(rule.access)

        for subject in result.keys():
            access = self.to_high_level_rules(result[subject])
            if access:
                result[subject] = access

        return result

    ################################
    #
    # Check access
    #
    ################################

    def can_read(self, user=None, subject=None):
        return self.has_hl_rule(
            rule=self.HL_ACCESS.READ,
            user=user,
            subject=subject
        )

    def can_write(self, user=None, subject=None):
        return self.has_hl_rule(
            rule=self.HL_ACCESS.WRITE,
            user=user,
            subject=subject
        )

    def can_modify(self, user=None, subject=None):
        return self.has_hl_rule(
            rule=self.HL_ACCESS.MODIFY,
            user=user,
            subject=subject
        )

    def is_owner(self, user=None, subject=None):
        raise NotImplemented

    ################################
    #
    # Object Creation
    #
    ################################

    @classmethod
    def _create_acl_obj(cls, model_obj):
        raise NotImplemented

    @classmethod
    def create(cls, *args, **kwargs):
        model_obj = cls.MODEL.create(*args, **kwargs)

        try:
            acl_obj = cls._create_acl_obj(model_obj)

        except Exception as ex:
            model_obj.remove()
            raise ex

        model_obj._uuid = acl_obj.guid
        model_obj.save()

        return cls(model_obj, acl_obj)

    @classmethod
    def get_aclobjects(cls, uuid=None, name=None, parent=None):
        """
        Get ACL objects
        """
        if uuid:
            uuid = to_list(uuid)

        if not parent:
            parent = ProAdmin.application()

        user = ProSuiteUser.current_user()
        if user and user.is_admin() and settings.system["root_god_mode"]:
            user = None


        if not user:
            acl_objects = {obj.guid: obj for obj in parent.child_objects(name=name, type=cls.ACL_TYPE)}

        else:
            acl_objects = {rule.object.guid: rule.object for rule in parent.child_rules(
                objecttype=cls.ACL_TYPE,
                subject=user.user
            )}

        return dict(filter(lambda pair: pair[0] in uuid, acl_objects.iteritems())) if uuid else acl_objects

    @classmethod
    def get_aclobject(cls, uuid, name=None, parent=None):
        """
        Get ACL objects
        """
        if not parent:
            parent = ProAdmin.application()

        user = ProSuiteUser.current_user()
        if user and user.is_admin() and settings.system["root_god_mode"]:
            user = None

        acl_object = parent.child_objects(guid=uuid, name=name, type=cls.ACL_TYPE)
        if not acl_object:
            return None

        acl_object = acl_object[0]
        if not user:
            return acl_object

        return acl_object if acl_object.rules(subject=user.user) else None

    @classmethod
    def get_available(cls, uuid=None, name=None, sort=True):
        """
        Get available ACL mailboxes
        """
        if uuid:
            uuid = to_list(uuid)

        if uuid and len(uuid) == 1:
           acl_objects = cls.get_aclobject(uuid[0])
           acl_objects = {acl_objects.guid: acl_objects} if acl_objects else None

        else:
            acl_objects = cls.get_aclobjects(uuid=uuid, name=name)

        if not acl_objects:
            return []

        uuid = acl_objects.keys()
        db_objects = cls.MODEL.get_available(uuid=uuid)
        if name:
            db_objects = db_objects.where(cls.MODEL.name==name)

        if sort:
            db_objects = db_objects.order_by(fn.Lower(cls.MODEL.name))

        db_objects = db_objects.limit(len(uuid))

        return [cls(db_obj, acl_objects[db_obj.uuid]) for db_obj in db_objects]



class ACLMailbox(ACLModelProxy):

    __slots__ = ("_creator")

    # Low level access values
    class LL_ACCESS(Enum):
        READ = 'r'
        WRITE = 'w'
        DELETE = 'd'
        OWNER = 'o'

    # High level access value
    class HL_ACCESS(Enum):
        READ = 'read'
        WRITE = 'write'
        MODIFY = 'modify'
        OWNER = 'owner'

    # Allowed attributes for access through proxy
    ALLOWED_ATTRS = (
        "name",
        "color",
        "connection",
        "creator_name",
        "creator_uuid",
        "is_virtual",
        "last_incoming_access",
        "last_outgoing_access",
        "login",
        "passwd",
        "text_color",
        "uuid",
        "unread_msg_count",
    )

    # DB Model
    MODEL = Mailbox

    # ACL Type
    ACL_TYPE = "Mailbox"

    def __init__(self, *args , **kwargs):
        super(ACLMailbox, self).__init__(*args, **kwargs)
        object.__setattr__(self, "_creator", None)

    ################################
    #
    # Low Level Rules <-> High Level Rules
    #
    ################################

    @classmethod
    def to_high_level_rules(cls, rules):
        if cls.LL_ACCESS.OWNER in rules and \
           cls.LL_ACCESS.DELETE in rules and \
           cls.LL_ACCESS.WRITE in rules and \
           cls.LL_ACCESS.READ in rules:

            return cls.HL_ACCESS.OWNER

        return super(ACLMailbox, cls).to_high_level_rules(rules)

    @classmethod
    def to_low_level_rules(cls, rule):
        if rule == cls.HL_ACCESS.OWNER:
            return (cls.LL_ACCESS.READ, cls.LL_ACCESS.WRITE, cls.LL_ACCESS.DELETE, cls.LL_ACCESS.OWNER)

        return super(ACLMailbox, cls).to_low_level_rules(rule)

    ################################
    #
    # Instance properties and methods
    #
    ################################

    def creator(self):
        if not self._creator and self.creator_uuid:
            object.__setattr__(self, "_creator", ProSuiteUser.get_by_guid(self.creator_uuid))

        return self._creator

    def is_creator(self, user=None, subject=None):
        user = (user or ProSuiteUser(subject)) if (subject or user) else ProSuiteUser.current_user()
        return user.user.guid == self.creator_uuid

    def is_owner(self, user=None, subject=None):
        return self.has_hl_rule(
            rule=self.HL_ACCESS.OWNER,
            user=user,
            subject=subject
        )

    def archives(self):
        alist = self._obj.archives(listcls=ACLArchivesList)
        alist._acl_mailbox = self
        return alist

    @owner_rights
    def create_archive(self, *args, **kwargs):
        return ACLArchive._create_archive(
            self,
            self._obj.create_archive(*args, **kwargs)
        )

    def get_archive(self, *args, **kwargs):
        archive = self._obj.get_archive(*args, **kwargs)
        if not archive:
            return None

        acl_obj = ACLArchive.get_aclobject(
            uuid=archive.uuid,
            parent=self._aclobj
        )
        if not acl_obj:
            return None

        inst = ACLArchive(archive, acl_obj)
        object.__setattr__(inst, '_mailbox', self)

        return inst

    @owner_rights
    def make_real(self):
        self._obj.make_real(save=False)
        self.save()

    @owner_rights
    def make_virtual(self):
        self._obj.make_virtual(save=False)
        self.save()

    ################################
    #
    # Object Creation
    #
    ################################

    @classmethod
    def parent_object(cls):
        return ProAdmin.application().child_objects(name="Mailboxes", type=cls.ACL_TYPE)[0]

    @classmethod
    def get_aclobject(cls, uuid, name=None, parent=None):
        return super(ACLMailbox, cls).get_aclobject(uuid=uuid, name=name, parent=cls.parent_object())

    @classmethod
    def get_aclobjects(cls, uuid, name=None, parent=None):
        return super(ACLMailbox, cls).get_aclobjects(uuid=uuid, name=name, parent=cls.parent_object())

    @classmethod
    def _create_acl_obj(cls, model_obj):

        acl_obj = cls.parent_object().create_child(
            type=cls.ACL_TYPE,
            name=model_obj.name,
        )
        acl_obj.save()

        return acl_obj

    @classmethod
    def create(cls, *args, **kwargs):
        # create instance
        inst = super(ACLMailbox, cls).create(*args, **kwargs)

        creator = ProSuiteUser.current_user()

        # Add Owner access to new instance
        for rule in cls.to_low_level_rules(cls.HL_ACCESS.OWNER):
            inst._aclobj.add_rule(creator.user, rule.value)

        inst._aclobj.save()

        # save creator information
        object.__setattr__(inst, "_creator", creator)
        inst._obj._creator_uuid = inst._creator.user.guid
        inst._obj._creator_name = inst._creator.user.name
        inst._obj.save()

        # setup archives ACLs
        ACLArchive._create_from_mailbox(inst)

        return inst




class ACLArchivesList(ArchivesList):

    __slots__ = ("_acl_mailbox",)

    def __init__(self, *args, **kwargs):
        super(ACLArchivesList, self).__init__(*args, **kwargs)
        self._acl_mailbox = None

    def _generate_archives(self):
        archives = super(ACLArchivesList, self)._generate_archives()
        uuids = [archive.uuid for archive in archives]

        acl_objects = ACLArchive.get_aclobjects(
            uuid=uuids,
            parent=self._acl_mailbox._aclobj
        )

        result = []
        for archive in archives:
            if archive.uuid in acl_objects:
                inst = ACLArchive(archive, acl_objects[archive.uuid])
                object.__setattr__(inst, "_mailbox", self._acl_mailbox)
                result.append(inst)

        return result



class ACLArchive(ACLModelProxy):

    __slots__ = ("_mailbox")

    # Low level access values
    class LL_ACCESS(Enum):
        READ = 'r'
        WRITE = 'w'
        DELETE = 'd'

    # High level access value
    class HL_ACCESS(Enum):
        READ = 'read'
        WRITE = 'write'
        MODIFY = 'modify'

    # Allowed attributes for access through proxy
    ALLOWED_ATTRS = (
        "color",
        "name",
        "type",
        "uuid",
        "TYPE_E",
        "unread_msg_count",
    )

    # DB Model
    MODEL = Archive

    # ACL Type
    ACL_TYPE = "Archive"

    def __init__(self, *args , **kwargs):
        super(ACLArchive, self).__init__(*args, **kwargs)
        object.__setattr__(self, "_mailbox", None)

    ################################
    #
    # Instance properties and methods
    #
    ################################

    @property
    def mailbox(self):
        return self._mailbox

    def is_owner(self, user=None, subject=None):
        return self.mailbox.is_owner()

    def copy_rights_from_archive(self, other):
        for rule in other.ll_rules():
            self._aclobj.add_rule(rule.subject.user, rule.access.value)

        self._aclobj.save()

    def copy_rights_from_mailbox(self, other):
        rules_map = {
            ACLMailbox.LL_ACCESS.READ: self.LL_ACCESS.READ,
            ACLMailbox.LL_ACCESS.WRITE: self.LL_ACCESS.WRITE,
            ACLMailbox.LL_ACCESS.DELETE: self.LL_ACCESS.DELETE,
        }

        for rule in other.ll_rules():
            if rule.access in rules_map:
                access = rules_map[rule.access]
                self._aclobj.add_rule(rule.subject.user, access.value)

        self._aclobj.save()

    def copy_rights_from(self, src):
        if isinstance(src, ACLArchive):
            self.copy_rights_from_archive(src)

        elif isinstance(src, ACLMailbox):
            self.copy_rights_from_mailbox(src)
    ################################
    #
    # Object Creation
    #
    ################################

    @classmethod
    def _create_acl_obj(cls, parent, model_obj):
        acl_obj = parent.create_child(
            type=cls.ACL_TYPE,
            name=model_obj.name,
        )
        acl_obj.save()

        return acl_obj

    @classmethod
    def _create_from_mailbox(cls, mailbox):
        for archive in mailbox._obj.archives():
            cls._create_archive(mailbox, archive)

    @classmethod
    def _create_archive(cls, mailbox, archive):
        # create ACL object
        try:
            acl = cls._create_acl_obj(mailbox._aclobj, archive)

        except Exception as ex:
            archive.remove()
            raise ex

        # save UUID
        archive._uuid = acl.guid
        archive.save()

        inst = ACLArchive(archive, acl)
        object.__setattr__(inst, "_mailbox", mailbox)
        inst.add_hl_rule(cls.HL_ACCESS.MODIFY)

        return inst



class ACLLabel(ACLModelProxy):

    # Low level access values
    class LL_ACCESS(Enum):
        SHARED = 's'
        OWNER = 'o'

    # High level access value
    class HL_ACCESS(Enum):
        SHARED = 'shared'
        OWNER  = 'owner'

    # Allowed attributes for access through proxy
    ALLOWED_ATTRS = (
        "color",
        "text_color",
        "name",
        "uuid",
    )

    # DB Model
    MODEL = Label

    # ACL Type
    ACL_TYPE = "Label"


    def shared_rights(func):
        @wraps(func)
        def decorator(self, *args, **kwargs):
            if not self.has_hl_rule(rule=self.HL_ACCESS.SHARED):
                raise PermissionDenied

            return func(self, *args, **kwargs)
        return decorator

    @shared_rights
    def remove(self, *args, **kwargs):
        """
        Remove object
        """
        # trying to remove label using parent method
        # if user has OWNER rights - object will be deleted
        # else exception will be rased
        try:
            return super(ACLLabel, self).remove(*args, **kwargs)
        except PermissionDenied as ex:
            pass

        user = ProSuiteUser.current_user()
        rules = self.ll_rules(user=user)

        for rule in rules:
            if rule.subject == user:
                self._aclobj.remove_rule(rule.subject.user, rule.access.value)

        self._aclobj.save()

    def is_owner(self, user=None, subject=None):
        return self.has_hl_rule(
            rule=self.HL_ACCESS.OWNER,
            user=user,
            subject=subject
        )

    @classmethod
    def to_high_level_rules(cls, rules):
        if cls.LL_ACCESS.OWNER in rules and \
           cls.LL_ACCESS.SHARED in rules:

            return cls.HL_ACCESS.OWNER

        elif cls.LL_ACCESS.SHARED in rules:
            return cls.HL_ACCESS.SHARED

    @classmethod
    def to_low_level_rules(cls, rule):
        if rule == cls.HL_ACCESS.OWNER:
            return (cls.LL_ACCESS.OWNER, cls.LL_ACCESS.SHARED)

        elif rule == cls.HL_ACCESS.SHARED:
            return (cls.LL_ACCESS.SHARED,)

        return tuple()

    ################################
    #
    # Object Creation
    #
    ################################

    @classmethod
    def parent_object(cls):
        return ProAdmin.application().child_objects(name="Labels", type=cls.ACL_TYPE)[0]

    @classmethod
    def get_aclobject(cls, uuid, name=None, parent=None):
        return super(ACLLabel, cls).get_aclobject(uuid=uuid, name=name, parent=cls.parent_object())

    @classmethod
    def get_aclobjects(cls, uuid, name=None, parent=None):
        return super(ACLLabel, cls).get_aclobjects(uuid=uuid, name=name, parent=cls.parent_object())

    @classmethod
    def _create_acl_obj(cls, model_obj):

        acl_obj = cls.parent_object().create_child(
            type=cls.ACL_TYPE,
            name=model_obj.name,
        )
        acl_obj.save()

        return acl_obj

    @classmethod
    def create(cls, *args, **kwargs):
        # create instance
        inst = super(ACLLabel, cls).create(*args, **kwargs)

        creator = ProSuiteUser.current_user()

        # Add Owner access to new instance
        for rule in cls.to_low_level_rules(cls.HL_ACCESS.OWNER):
            inst._aclobj.add_rule(creator.user, rule.value)

        inst._aclobj.save()

        return inst
]]>
		</Library>
		<Library Name="class_xml">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLMacros( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'macro' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, obj, recursive=False, comparer=None ):
		result = Node.find( self, obj, recursive, comparer )

		if type(obj) not in [ str, unicode ]:
			return result

		if not result:
			result = self.create_child( obj )

		return result


	@property
	def source( self ):
		return self.find( 'source' ).text

	@source.setter
	def source( self, value ):
		self.find( 'source' ).text = value

	@property
	def name( self ):
		return self.find( 'name' ).text

	@name.setter
	def name( self, value ):
		self.find( 'name' ).text = value

	@property
	def class_name( self ):
		return self.find( 'class_name' ).text

	@class_name.setter
	def class_name( self, value ):
		self.find( 'class_name' ).text = value

	@property
	def is_button( self ):
		return self.find( 'is_button' ).text

	@is_button.setter
	def is_button( self, value ):
		self.find( 'is_button' ).text = value


	@property
	def on_board( self ):
		return self.find( 'ob_board' ).text

	@on_board.setter
	def on_board( self, value ):
		self.find( 'ob_board' ).text = value

	@property
	def macros_picture( self ):
		return self.find( 'macros_picture' ).text

	@macros_picture.setter
	def macros_picture( self, value ):
		self.find( 'macros_picture' ).text = value


	def save(self):
		import cStringIO
		output = cStringIO.StringIO()

		output.write(self.toprettyxml().encode("utf8"))
		output_len = output.tell()
		output.seek(0)
		response.send_file(self.name + ".xml", output_len, output)

]]>
		</Library>
		<Library Name="vdom_trace">
<![CDATA[import traceback, sys, cgi
import cProfile


__version__ = '1.0.10'


# ---------------------------------------------------------------------------------
#		Functions, usefull for debug prints
# ---------------------------------------------------------------------------------

def r(o, cont=None):
	text = '<pre style="word-wrap: break-word;">{0}</pre>'.format( cgi.escape(str(o)) )
	response.write( text, bool(cont) )

def d(o, cont=None): r( dir(o), cont )
def l(o, cont=None): r( len(o), cont )
def t(o, cont=None): r( type(o), cont )
def fa(f,cont=None): r( f.im_func.func_code.co_varnames, cont )



class ProfilerStats( object ):
	""" Wrapper for cProfile Stat object. Provide sorts and pretty output prints.
	"""
	def __init__( self, stats ):
		self.stats = stats


	def sort_by_totaltime( self ):
		self.stats.sort( cmp=lambda a,b: cmp( a.totaltime, b.totaltime ), reverse=True )

	def sort_by_inlinetime( self ):
		self.stats.sort( cmp=lambda a,b: cmp( a.inlinetime, b.inlinetime ), reverse=True )

	def sort_by_callcount( self ):
		self.stats.sort( cmp=lambda a,b: cmp( a.callcount, b.callcount ), reverse=True )


	def to_string( self ):
		def parse_code( c ):
			if isinstance(c,basestring): return c

			result = '{0:50}\t{1:4} : {2}'.format( c.co_name, c.co_firstlineno, c.co_filename )
			return result

		result = []

		header = '{0:9}\t{1:9}\t{2:9}\t{3:50}\t{4:6} {5}'.format( 'call count', 'total time', 'inline time', 'function', 'line', 'file' )
		result.append( header )
		result.append( '-' * 220 )

		for s in self.stats:
			line = '{0:9}\t{1:9f}\t{2:9f}\t{3}'.format( s.callcount, s.totaltime, s.inlinetime, parse_code(s.code) )
			result.append( line )

		return '\n'.join( result )


	def to_escaped_string( self ):
		return cgi.escape( self.to_string() )


	def to_s( self ):
		return self.to_string()

	def to_es( self ):
		return self.to_escaped_string()




class Debug( object ):
	""" Provide methods for debug information like stack traces, frames dump and profiling.
	"""
	@classmethod
	def exception_trace( self ):
		_type, val, tb = sys.exc_info()
		return traceback.format_exception( _type, val, tb )

	@classmethod
	def exception_trace_s( self ):
		return '\n'.join( self.exception_trace() )

	@classmethod
	def exception_trace_es( self ):
		return cgi.escape( self.exception_trace_s() )

	@classmethod
	def print_traceback( self ):
		""" this method returns exception trace, used in VEE
		"""
		type, val, exc_tb = sys.exc_info()
		return [ u"""File: "{file_name}", line {line}, in {func}""".format(
					file_name 	= line[ 0 ].split( "/" )[ -1 ],
					line 		= line[ 1 ] - 3 , #get real line number
					func		= line[ 2 ] )
			for line in traceback.extract_tb( exc_tb ) ]



	@classmethod
	def stack_trace( self ):
		return traceback.format_stack()

	@classmethod
	def stack_trace_s( self ):
		return '\n'.join( self.stack_trace() )

	@classmethod
	def stack_trace_es( self ):
		return cgi.escape( self.stack_trace_s() )



	@classmethod
	def frames_dump( self, thread_id=None ):
		threads = {}

		thread_id = thread_id or []
		if not isinstance(thread_id, list): thread_id = [thread_id]

		for threadId, stack in sys._current_frames().items():
			if thread_id and threadId not in thread_id: continue

			threads[ threadId ] = []
			code = threads[ threadId ]

			for filename, lineno, name, line in traceback.extract_stack(stack):
				code.append('File: "%s", line %d, in %s' % (filename, lineno, name))

				if line:
					code.append("  %s" % (line.strip()))

		return threads

	@classmethod
	def frames_dump_s( self, thread_id=None ):
		result = []
		threads = self.frames_dump( thread_id )

		for id in threads:
			result.append( '-' * 120 )
			result.append( 'ThreadID: {0}'.format( id ) )
			result += threads[ id ]
			result.append( '' )
			result.append( '' )

		return '\n'.join( result )

	@classmethod
	def frames_dump_es( self, thread_id=None ):
		return cgi.escape( self.frames_dump_s(thread_id) )




	@classmethod
	def profile( self, f, *args, **kwargs ):
		profiler = cProfile.Profile()
		profiler.runcall( f, *args, **kwargs )
		stats = profiler.getstats()

		return ProfilerStats( stats )

	@classmethod
	def profile_s( self, f, *args, **kwargs ):
		res = self.profile( f, *args, **kwargs )
		res.sort_by_totaltime()
		return res.to_string()

	@classmethod
	def profile_es( self, f, *args, **kwargs ):
		return cgi.escape( self.profile_s( f, *args, **kwargs ) )







# -----------------------------------
#	Obsolete. Use for compatibility.
# -----------------------------------

class Trace( object ):
	@classmethod
	def exception_trace( self, stacksize=0 ):
		return Debug.exception_trace_es()


	@classmethod
	def stack_trace( self ):
		return Debug.stack_trace_es()


	@classmethod
	def print_traceback( self ):
		return Debug.print_traceback()

	@classmethod
	def print_trace( self ):
		return self.print_traceback()
]]>
		</Library>
		<Library Name="widget_macros_datatable">
<![CDATA[import json
from class_plugins import Plugins

CONFIG_MACRO_NAME = "config"
class WidgetMacrosDatatable( object ):

	def __init__( self, plugin_guid, page_name = None  ):
		self.page_name 		= page_name
		self.plugin_guid 	= plugin_guid

	def render( self, datatable, dialog ):

		plugin = Plugins.get_by_guid( self.plugin_guid )
		if not plugin:
			raise Exception( "Plugin with GUID={guid} doesn't exists".format( \
										guid = self.plugin_guid ) )

		data = []
		for macro in plugin.get_macros():
			if 	macro.on_board != "1" and \
					macro.is_button_macros == "1" and \
					macro.page == self.page_name and \
					macro.name != CONFIG_MACRO_NAME:

				data.append( (
					macro.guid,
					"<img src='/get_image?id=%s'/>"%macro.macros_picture if macro.macros_picture else "",
					macro.name
				) )

		datatable.data 	= json.dumps( data )
		dialog.title	= plugin.name





]]>
		</Library>
		<Library Name="promail_pop3_core">
<![CDATA["""
"""

from promail_pop3_client import POP3ClientWorker
from prosuite_logging import app_logger
from prosuite_threading import ProSuiteThreadPool


MAX_CLIENT_THREADS = 4
DAEMON_THREAD = None


class POP3ClientsPool(ProSuiteThreadPool):

    def get_pool(self):
        return {}

    def add_pool_member(self, member):
        self._pool[member.account.guid] = member

    def in_pool(self, account):
        return account.guid in self._pool

    def get_member(self, pool_member):
        return self._pool[pool_member]

    def remove_member(self, pool_member):
        del self._pool[pool_member]


class POP3Core(object):

    __slots__ = (
        "_is_started",
        "_logger",
        "_pool",
    )

    def __init__(self):
        self._is_started = False
        self._logger = None
        self._pool = None

    def setup_logger(self, parent_logger):
        """
        Setup logger
        """
        self._logger = parent_logger.getChild("POP3Core")

    @property
    def logger(self):
        return self._logger

    @property
    def pool(self):
        return self._pool

    def is_started(self):
        return self._is_started

    def start(self):
        """
        Start POP3 core
        """
        return
        if self.is_started():
            self.logger.info("Already started! Exit...")
            return

        self.logger.info("Starting...")

        from promail_triggers import POP3Daemon
        daemon = POP3Daemon()
        daemon.setup_logger(self.logger)
        daemon.kill_existing_instance()

        self._pool = POP3ClientsPool(
            name=daemon.name + ".Pool",
            size=MAX_CLIENT_THREADS,
            pm_cls=POP3ClientWorker
        )
        self.pool.setup_logger(self.logger)

        daemon.start()

        self._is_started = True

    def stop(self):
        """
        Stop POP3 core
        """
        global DAEMON_THREAD

        if not self.is_started():
            return

        if DAEMON_THREAD:
            DAEMON_THREAD.stop()

        DAEMON_THREAD = None
        self._is_started = False

    def run(self):
        """
        """
        self.logger.info("POP3 clients pool check...")
        self.pool.check_members()

        if self.pool.is_fully_loaded():
            self.logger.debug("POP3 clients pool is fully loaded")
            return

        import ProMail

        for account in ProMail.NoACL.get_mailboxes():

            args = (account.server.pop3.host,
                    account.server.pop3.port,
                    account.login)

            if self.pool.in_pool(account):
                self.logger.debug("Account %s:%s %s already in pool", *args)
                continue

            self.logger.debug("Creating new worker for %s:%s %s...", *args)
            worker = self.pool.create_worker()
            if not worker:
                self.logger.debug("Creating new worker for %s:%s %s failed!", *args)
                break

            self.logger.debug("Starting worker for %s:%s %s", *args)

            worker.set_account(account)
            worker.setup_logger(self.logger)

            self.pool.add_pool_member(worker)
            worker.start()

            account.save()


#pop3_core = POP3Core()
#pop3_core.setup_logger(app_logger)
#pop3_core.start()
]]>
		</Library>
		<Library Name="feedparser">
<![CDATA["""Universal feed parser

Handles RSS 0.9x, RSS 1.0, RSS 2.0, CDF, Atom 0.3, and Atom 1.0 feeds

Visit https://code.google.com/p/feedparser/ for the latest version
Visit http://packages.python.org/feedparser/ for the latest documentation

Required: Python 2.4 or later
Recommended: iconv_codec <http://cjkpython.i18n.org/>
"""

__version__ = "5.1"
__license__ = """
Copyright (c) 2010-2011 Kurt McKee <contactme@kurtmckee.org>
Copyright (c) 2002-2008 Mark Pilgrim
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE."""
__author__ = "Mark Pilgrim <http://diveintomark.org/>"
__contributors__ = ["Jason Diamond <http://injektilo.org/>",
                    "John Beimler <http://john.beimler.org/>",
                    "Fazal Majid <http://www.majid.info/mylos/weblog/>",
                    "Aaron Swartz <http://aaronsw.com/>",
                    "Kevin Marks <http://epeus.blogspot.com/>",
                    "Sam Ruby <http://intertwingly.net/>",
                    "Ade Oshineye <http://blog.oshineye.com/>",
                    "Martin Pool <http://sourcefrog.net/>",
                    "Kurt McKee <http://kurtmckee.org/>"]

# HTTP "User-Agent" header to send to servers when downloading feeds.
# If you are embedding feedparser in a larger application, you should
# change this to your application name and URL.
USER_AGENT = "UniversalFeedParser/%s +https://code.google.com/p/feedparser/" % __version__

# HTTP "Accept" header to send to servers when downloading feeds.  If you don't
# want to send an Accept header, set this to None.
ACCEPT_HEADER = "application/atom+xml,application/rdf+xml,application/rss+xml,application/x-netcdf,application/xml;q=0.9,text/xml;q=0.2,*/*;q=0.1"

# List of preferred XML parsers, by SAX driver name.  These will be tried first,
# but if they're not installed, Python will keep searching through its own list
# of pre-installed parsers until it finds one that supports everything we need.
PREFERRED_XML_PARSERS = ["drv_libxml2"]

# If you want feedparser to automatically run HTML markup through HTML Tidy, set
# this to 1.  Requires mxTidy <http://www.egenix.com/files/python/mxTidy.html>
# or utidylib <http://utidylib.berlios.de/>.
TIDY_MARKUP = 0

# List of Python interfaces for HTML Tidy, in order of preference.  Only useful
# if TIDY_MARKUP = 1
PREFERRED_TIDY_INTERFACES = ["uTidy", "mxTidy"]

# If you want feedparser to automatically resolve all relative URIs, set this
# to 1.
RESOLVE_RELATIVE_URIS = 1

# If you want feedparser to automatically sanitize all potentially unsafe
# HTML content, set this to 1.
SANITIZE_HTML = 1

# If you want feedparser to automatically parse microformat content embedded
# in entry contents, set this to 1
PARSE_MICROFORMATS = 1

# ---------- Python 3 modules (make it work if possible) ----------
try:
    import rfc822
except ImportError:
    from email import _parseaddr as rfc822

try:
    # Python 3.1 introduces bytes.maketrans and simultaneously
    # deprecates string.maketrans; use bytes.maketrans if possible
    _maketrans = bytes.maketrans
except (NameError, AttributeError):
    import string
    _maketrans = string.maketrans

# base64 support for Atom feeds that contain embedded binary data
try:
    import base64, binascii
except ImportError:
    base64 = binascii = None
else:
    # Python 3.1 deprecates decodestring in favor of decodebytes
    _base64decode = getattr(base64, 'decodebytes', base64.decodestring)

# _s2bytes: convert a UTF-8 str to bytes if the interpreter is Python 3
# _l2bytes: convert a list of ints to bytes if the interpreter is Python 3
try:
    if bytes is str:
        # In Python 2.5 and below, bytes doesn't exist (NameError)
        # In Python 2.6 and above, bytes and str are the same type
        raise NameError
except NameError:
    # Python 2
    def _s2bytes(s):
        return s
    def _l2bytes(l):
        return ''.join(map(chr, l))
else:
    # Python 3
    def _s2bytes(s):
        return bytes(s, 'utf8')
    def _l2bytes(l):
        return bytes(l)

# If you want feedparser to allow all URL schemes, set this to ()
# List culled from Python's urlparse documentation at:
#   http://docs.python.org/library/urlparse.html
# as well as from "URI scheme" at Wikipedia:
#   https://secure.wikimedia.org/wikipedia/en/wiki/URI_scheme
# Many more will likely need to be added!
ACCEPTABLE_URI_SCHEMES = (
    'file', 'ftp', 'gopher', 'h323', 'hdl', 'http', 'https', 'imap', 'mailto',
    'mms', 'news', 'nntp', 'prospero', 'rsync', 'rtsp', 'rtspu', 'sftp',
    'shttp', 'sip', 'sips', 'snews', 'svn', 'svn+ssh', 'telnet', 'wais',
    # Additional common-but-unofficial schemes
    'aim', 'callto', 'cvs', 'facetime', 'feed', 'git', 'gtalk', 'irc', 'ircs',
    'irc6', 'itms', 'mms', 'msnim', 'skype', 'ssh', 'smb', 'svn', 'ymsg',
)
#ACCEPTABLE_URI_SCHEMES = ()

# ---------- required modules (should come with any Python distribution) ----------
import cgi
import copy
import datetime
import re
import struct
import time
import types
import urllib
import urllib2
import urlparse

from htmlentitydefs import name2codepoint, codepoint2name, entitydefs

try:
    from io import BytesIO as _StringIO
except ImportError:
    try:
        from cStringIO import StringIO as _StringIO
    except ImportError:
        from StringIO import StringIO as _StringIO

# ---------- optional modules (feedparser will work without these, but with reduced functionality) ----------

# gzip is included with most Python distributions, but may not be available if you compiled your own
try:
    import gzip
except ImportError:
    gzip = None
try:
    import zlib
except ImportError:
    zlib = None

# If a real XML parser is available, feedparser will attempt to use it.  feedparser has
# been tested with the built-in SAX parser and libxml2.  On platforms where the
# Python distribution does not come with an XML parser (such as Mac OS X 10.2 and some
# versions of FreeBSD), feedparser will quietly fall back on regex-based parsing.
try:
    import xml.sax
    from xml.sax.saxutils import escape as _xmlescape
except ImportError:
    _XML_AVAILABLE = 0
    def _xmlescape(data,entities={}):
        data = data.replace('&', '&amp;')
        data = data.replace('>', '&gt;')
        data = data.replace('<', '&lt;')
        for char, entity in entities:
            data = data.replace(char, entity)
        return data
else:
    try:
        xml.sax.make_parser(PREFERRED_XML_PARSERS) # test for valid parsers
    except xml.sax.SAXReaderNotAvailable:
        _XML_AVAILABLE = 0
    else:
        _XML_AVAILABLE = 1

# sgmllib is not available by default in Python 3; if the end user doesn't have
# it available then we'll lose illformed XML parsing, content santizing, and
# microformat support (at least while feedparser depends on BeautifulSoup).
try:
    import sgmllib
except ImportError:
    # This is probably Python 3, which doesn't include sgmllib anymore
    _SGML_AVAILABLE = 0

    # Mock sgmllib enough to allow subclassing later on
    class sgmllib(object):
        class SGMLParser(object):
            def goahead(self, i):
                pass
            def parse_starttag(self, i):
                pass
else:
    _SGML_AVAILABLE = 1

    # sgmllib defines a number of module-level regular expressions that are
    # insufficient for the XML parsing feedparser needs. Rather than modify
    # the variables directly in sgmllib, they're defined here using the same
    # names, and the compiled code objects of several sgmllib.SGMLParser
    # methods are copied into _BaseHTMLProcessor so that they execute in
    # feedparser's scope instead of sgmllib's scope.
    charref = re.compile('&#(\d+|[xX][0-9a-fA-F]+);')
    tagfind = re.compile('[a-zA-Z][-_.:a-zA-Z0-9]*')
    attrfind = re.compile(
        r'\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)[$]?(\s*=\s*'
        r'(\'[^\']*\'|"[^"]*"|[][\-a-zA-Z0-9./,:;+*%?!&$\(\)_#=~\'"@]*))?'
    )

    # Unfortunately, these must be copied over to prevent NameError exceptions
    entityref = sgmllib.entityref
    incomplete = sgmllib.incomplete
    interesting = sgmllib.interesting
    shorttag = sgmllib.shorttag
    shorttagopen = sgmllib.shorttagopen
    starttagopen = sgmllib.starttagopen

    class _EndBracketRegEx:
        def __init__(self):
            # Overriding the built-in sgmllib.endbracket regex allows the
            # parser to find angle brackets embedded in element attributes.
            self.endbracket = re.compile('''([^'"<>]|"[^"]*"(?=>|/|\s|\w+=)|'[^']*'(?=>|/|\s|\w+=))*(?=[<>])|.*?(?=[<>])''')
        def search(self, target, index=0):
            match = self.endbracket.match(target, index)
            if match is not None:
                # Returning a new object in the calling thread's context
                # resolves a thread-safety.
                return EndBracketMatch(match)
            return None
    class EndBracketMatch:
        def __init__(self, match):
            self.match = match
        def start(self, n):
            return self.match.end(n)
    endbracket = _EndBracketRegEx()


# iconv_codec provides support for more character encodings.
# It's available from http://cjkpython.i18n.org/
try:
    import iconv_codec
except ImportError:
    pass

# chardet library auto-detects character encodings
# Download from http://chardet.feedparser.org/
try:
    import chardet
except ImportError:
    chardet = None

# BeautifulSoup is used to extract microformat content from HTML
# feedparser is tested using BeautifulSoup 3.2.0
# http://www.crummy.com/software/BeautifulSoup/
try:
    import BeautifulSoup
except ImportError:
    BeautifulSoup = None
    PARSE_MICROFORMATS = False

# ---------- don't touch these ----------
class ThingsNobodyCaresAboutButMe(Exception): pass
class CharacterEncodingOverride(ThingsNobodyCaresAboutButMe): pass
class CharacterEncodingUnknown(ThingsNobodyCaresAboutButMe): pass
class NonXMLContentType(ThingsNobodyCaresAboutButMe): pass
class UndeclaredNamespace(Exception): pass

SUPPORTED_VERSIONS = {'': u'unknown',
                      'rss090': u'RSS 0.90',
                      'rss091n': u'RSS 0.91 (Netscape)',
                      'rss091u': u'RSS 0.91 (Userland)',
                      'rss092': u'RSS 0.92',
                      'rss093': u'RSS 0.93',
                      'rss094': u'RSS 0.94',
                      'rss20': u'RSS 2.0',
                      'rss10': u'RSS 1.0',
                      'rss': u'RSS (unknown version)',
                      'atom01': u'Atom 0.1',
                      'atom02': u'Atom 0.2',
                      'atom03': u'Atom 0.3',
                      'atom10': u'Atom 1.0',
                      'atom': u'Atom (unknown version)',
                      'cdf': u'CDF',
                      }

class FeedParserDict(dict):
    keymap = {'channel': 'feed',
              'items': 'entries',
              'guid': 'id',
              'date': 'updated',
              'date_parsed': 'updated_parsed',
              'description': ['summary', 'subtitle'],
              'url': ['href'],
              'modified': 'updated',
              'modified_parsed': 'updated_parsed',
              'issued': 'published',
              'issued_parsed': 'published_parsed',
              'copyright': 'rights',
              'copyright_detail': 'rights_detail',
              'tagline': 'subtitle',
              'tagline_detail': 'subtitle_detail'}
    def __getitem__(self, key):
        if key == 'category':
            try:
                return dict.__getitem__(self, 'tags')[0]['term']
            except IndexError:
                raise KeyError, "object doesn't have key 'category'"
        elif key == 'enclosures':
            norel = lambda link: FeedParserDict([(name,value) for (name,value) in link.items() if name!='rel'])
            return [norel(link) for link in dict.__getitem__(self, 'links') if link['rel']==u'enclosure']
        elif key == 'license':
            for link in dict.__getitem__(self, 'links'):
                if link['rel']==u'license' and 'href' in link:
                    return link['href']
        else:
            realkey = self.keymap.get(key, key)
            if isinstance(realkey, list):
                for k in realkey:
                    if dict.__contains__(self, k):
                        return dict.__getitem__(self, k)
            elif dict.__contains__(self, realkey):
                return dict.__getitem__(self, realkey)
        return dict.__getitem__(self, key)

    def __contains__(self, key):
        try:
            self.__getitem__(key)
        except KeyError:
            return False
        else:
            return True

    has_key = __contains__

    def get(self, key, default=None):
        try:
            return self.__getitem__(key)
        except KeyError:
            return default

    def __setitem__(self, key, value):
        key = self.keymap.get(key, key)
        if isinstance(key, list):
            key = key[0]
        return dict.__setitem__(self, key, value)

    def setdefault(self, key, value):
        if key not in self:
            self[key] = value
            return value
        return self[key]

    def __getattr__(self, key):
        # __getattribute__() is called first; this will be called
        # only if an attribute was not already found
        try:
            return self.__getitem__(key)
        except KeyError:
            raise AttributeError, "object has no attribute '%s'" % key

    def __hash__(self):
        return id(self)

_cp1252 = {
    128: unichr(8364), # euro sign
    130: unichr(8218), # single low-9 quotation mark
    131: unichr( 402), # latin small letter f with hook
    132: unichr(8222), # double low-9 quotation mark
    133: unichr(8230), # horizontal ellipsis
    134: unichr(8224), # dagger
    135: unichr(8225), # double dagger
    136: unichr( 710), # modifier letter circumflex accent
    137: unichr(8240), # per mille sign
    138: unichr( 352), # latin capital letter s with caron
    139: unichr(8249), # single left-pointing angle quotation mark
    140: unichr( 338), # latin capital ligature oe
    142: unichr( 381), # latin capital letter z with caron
    145: unichr(8216), # left single quotation mark
    146: unichr(8217), # right single quotation mark
    147: unichr(8220), # left double quotation mark
    148: unichr(8221), # right double quotation mark
    149: unichr(8226), # bullet
    150: unichr(8211), # en dash
    151: unichr(8212), # em dash
    152: unichr( 732), # small tilde
    153: unichr(8482), # trade mark sign
    154: unichr( 353), # latin small letter s with caron
    155: unichr(8250), # single right-pointing angle quotation mark
    156: unichr( 339), # latin small ligature oe
    158: unichr( 382), # latin small letter z with caron
    159: unichr( 376), # latin capital letter y with diaeresis
}

_urifixer = re.compile('^([A-Za-z][A-Za-z0-9+-.]*://)(/*)(.*?)')
def _urljoin(base, uri):
    uri = _urifixer.sub(r'\1\3', uri)
    #try:
    if not isinstance(uri, unicode):
        uri = uri.decode('utf-8', 'ignore')
    uri = urlparse.urljoin(base, uri)
    if not isinstance(uri, unicode):
        return uri.decode('utf-8', 'ignore')
    return uri
    #except:
    #    uri = urlparse.urlunparse([urllib.quote(part) for part in urlparse.urlparse(uri)])
    #    return urlparse.urljoin(base, uri)

class _FeedParserMixin:
    namespaces = {
        '': '',
        'http://backend.userland.com/rss': '',
        'http://blogs.law.harvard.edu/tech/rss': '',
        'http://purl.org/rss/1.0/': '',
        'http://my.netscape.com/rdf/simple/0.9/': '',
        'http://example.com/newformat#': '',
        'http://example.com/necho': '',
        'http://purl.org/echo/': '',
        'uri/of/echo/namespace#': '',
        'http://purl.org/pie/': '',
        'http://purl.org/atom/ns#': '',
        'http://www.w3.org/2005/Atom': '',
        'http://purl.org/rss/1.0/modules/rss091#': '',

        'http://webns.net/mvcb/':                                'admin',
        'http://purl.org/rss/1.0/modules/aggregation/':          'ag',
        'http://purl.org/rss/1.0/modules/annotate/':             'annotate',
        'http://media.tangent.org/rss/1.0/':                     'audio',
        'http://backend.userland.com/blogChannelModule':         'blogChannel',
        'http://web.resource.org/cc/':                           'cc',
        'http://backend.userland.com/creativeCommonsRssModule':  'creativeCommons',
        'http://purl.org/rss/1.0/modules/company':               'co',
        'http://purl.org/rss/1.0/modules/content/':              'content',
        'http://my.theinfo.org/changed/1.0/rss/':                'cp',
        'http://purl.org/dc/elements/1.1/':                      'dc',
        'http://purl.org/dc/terms/':                             'dcterms',
        'http://purl.org/rss/1.0/modules/email/':                'email',
        'http://purl.org/rss/1.0/modules/event/':                'ev',
        'http://rssnamespace.org/feedburner/ext/1.0':            'feedburner',
        'http://freshmeat.net/rss/fm/':                          'fm',
        'http://xmlns.com/foaf/0.1/':                            'foaf',
        'http://www.w3.org/2003/01/geo/wgs84_pos#':              'geo',
        'http://postneo.com/icbm/':                              'icbm',
        'http://purl.org/rss/1.0/modules/image/':                'image',
        'http://www.itunes.com/DTDs/PodCast-1.0.dtd':            'itunes',
        'http://example.com/DTDs/PodCast-1.0.dtd':               'itunes',
        'http://purl.org/rss/1.0/modules/link/':                 'l',
        'http://search.yahoo.com/mrss':                          'media',
        # Version 1.1.2 of the Media RSS spec added the trailing slash on the namespace
        'http://search.yahoo.com/mrss/':                         'media',
        'http://madskills.com/public/xml/rss/module/pingback/':  'pingback',
        'http://prismstandard.org/namespaces/1.2/basic/':        'prism',
        'http://www.w3.org/1999/02/22-rdf-syntax-ns#':           'rdf',
        'http://www.w3.org/2000/01/rdf-schema#':                 'rdfs',
        'http://purl.org/rss/1.0/modules/reference/':            'ref',
        'http://purl.org/rss/1.0/modules/richequiv/':            'reqv',
        'http://purl.org/rss/1.0/modules/search/':               'search',
        'http://purl.org/rss/1.0/modules/slash/':                'slash',
        'http://schemas.xmlsoap.org/soap/envelope/':             'soap',
        'http://purl.org/rss/1.0/modules/servicestatus/':        'ss',
        'http://hacks.benhammersley.com/rss/streaming/':         'str',
        'http://purl.org/rss/1.0/modules/subscription/':         'sub',
        'http://purl.org/rss/1.0/modules/syndication/':          'sy',
        'http://schemas.pocketsoap.com/rss/myDescModule/':       'szf',
        'http://purl.org/rss/1.0/modules/taxonomy/':             'taxo',
        'http://purl.org/rss/1.0/modules/threading/':            'thr',
        'http://purl.org/rss/1.0/modules/textinput/':            'ti',
        'http://madskills.com/public/xml/rss/module/trackback/': 'trackback',
        'http://wellformedweb.org/commentAPI/':                  'wfw',
        'http://purl.org/rss/1.0/modules/wiki/':                 'wiki',
        'http://www.w3.org/1999/xhtml':                          'xhtml',
        'http://www.w3.org/1999/xlink':                          'xlink',
        'http://www.w3.org/XML/1998/namespace':                  'xml',
    }
    _matchnamespaces = {}

    can_be_relative_uri = set(['link', 'id', 'wfw_comment', 'wfw_commentrss', 'docs', 'url', 'href', 'comments', 'icon', 'logo'])
    can_contain_relative_uris = set(['content', 'title', 'summary', 'info', 'tagline', 'subtitle', 'copyright', 'rights', 'description'])
    can_contain_dangerous_markup = set(['content', 'title', 'summary', 'info', 'tagline', 'subtitle', 'copyright', 'rights', 'description'])
    html_types = [u'text/html', u'application/xhtml+xml']

    def __init__(self, baseuri=None, baselang=None, encoding=u'utf-8'):
        if not self._matchnamespaces:
            for k, v in self.namespaces.items():
                self._matchnamespaces[k.lower()] = v
        self.feeddata = FeedParserDict() # feed-level data
        self.encoding = encoding # character encoding
        self.entries = [] # list of entry-level data
        self.version = u'' # feed type/version, see SUPPORTED_VERSIONS
        self.namespacesInUse = {} # dictionary of namespaces defined by the feed

        # the following are used internally to track state;
        # this is really out of control and should be refactored
        self.infeed = 0
        self.inentry = 0
        self.incontent = 0
        self.intextinput = 0
        self.inimage = 0
        self.inauthor = 0
        self.incontributor = 0
        self.inpublisher = 0
        self.insource = 0
        self.sourcedata = FeedParserDict()
        self.contentparams = FeedParserDict()
        self._summaryKey = None
        self.namespacemap = {}
        self.elementstack = []
        self.basestack = []
        self.langstack = []
        self.baseuri = baseuri or u''
        self.lang = baselang or None
        self.svgOK = 0
        self.title_depth = -1
        self.depth = 0
        if baselang:
            self.feeddata['language'] = baselang.replace('_','-')

        # A map of the following form:
        #     {
        #         object_that_value_is_set_on: {
        #             property_name: depth_of_node_property_was_extracted_from,
        #             other_property: depth_of_node_property_was_extracted_from,
        #         },
        #     }
        self.property_depth_map = {}

    def _normalize_attributes(self, kv):
        k = kv[0].lower()
        v = k in ('rel', 'type') and kv[1].lower() or kv[1]
        # the sgml parser doesn't handle entities in attributes, nor
        # does it pass the attribute values through as unicode, while
        # strict xml parsers do -- account for this difference
        if isinstance(self, _LooseFeedParser):
            v = v.replace('&amp;', '&')
            if not isinstance(v, unicode):
                v = v.decode('utf-8')
        return (k, v)

    def unknown_starttag(self, tag, attrs):
        # increment depth counter
        self.depth += 1

        # normalize attrs
        attrs = map(self._normalize_attributes, attrs)

        # track xml:base and xml:lang
        attrsD = dict(attrs)
        baseuri = attrsD.get('xml:base', attrsD.get('base')) or self.baseuri
        if not isinstance(baseuri, unicode):
            baseuri = baseuri.decode(self.encoding, 'ignore')
        # ensure that self.baseuri is always an absolute URI that
        # uses a whitelisted URI scheme (e.g. not `javscript:`)
        if self.baseuri:
            self.baseuri = _makeSafeAbsoluteURI(self.baseuri, baseuri) or self.baseuri
        else:
            self.baseuri = _urljoin(self.baseuri, baseuri)
        lang = attrsD.get('xml:lang', attrsD.get('lang'))
        if lang == '':
            # xml:lang could be explicitly set to '', we need to capture that
            lang = None
        elif lang is None:
            # if no xml:lang is specified, use parent lang
            lang = self.lang
        if lang:
            if tag in ('feed', 'rss', 'rdf:RDF'):
                self.feeddata['language'] = lang.replace('_','-')
        self.lang = lang
        self.basestack.append(self.baseuri)
        self.langstack.append(lang)

        # track namespaces
        for prefix, uri in attrs:
            if prefix.startswith('xmlns:'):
                self.trackNamespace(prefix[6:], uri)
            elif prefix == 'xmlns':
                self.trackNamespace(None, uri)

        # track inline content
        if self.incontent and not self.contentparams.get('type', u'xml').endswith(u'xml'):
            if tag in ('xhtml:div', 'div'):
                return # typepad does this 10/2007
            # element declared itself as escaped markup, but it isn't really
            self.contentparams['type'] = u'application/xhtml+xml'
        if self.incontent and self.contentparams.get('type') == u'application/xhtml+xml':
            if tag.find(':') <> -1:
                prefix, tag = tag.split(':', 1)
                namespace = self.namespacesInUse.get(prefix, '')
                if tag=='math' and namespace=='http://www.w3.org/1998/Math/MathML':
                    attrs.append(('xmlns',namespace))
                if tag=='svg' and namespace=='http://www.w3.org/2000/svg':
                    attrs.append(('xmlns',namespace))
            if tag == 'svg':
                self.svgOK += 1
            return self.handle_data(' < %s%s>' % (tag, self.strattrs(attrs)), escape=0)

        # match namespaces
        if tag.find(':') <> -1:
            prefix, suffix = tag.split(':', 1)
        else:
            prefix, suffix = '', tag
        prefix = self.namespacemap.get(prefix, prefix)
        if prefix:
            prefix = prefix + '_'

        # special hack for better tracking of empty textinput/image elements in illformed feeds
        if (not prefix) and tag not in ('title', 'link', 'description', 'name'):
            self.intextinput = 0
        if (not prefix) and tag not in ('title', 'link', 'description', 'url', 'href', 'width', 'height'):
            self.inimage = 0

        # call special handler (if defined) or default handler
        methodname = '_start_' + prefix + suffix
        try:
            method = getattr(self, methodname)
            return method(attrsD)
        except AttributeError:
            # Since there's no handler or something has gone wrong we explicitly add the element and its attributes
            unknown_tag = prefix + suffix
            if len(attrsD) == 0:
                # No attributes so merge it into the encosing dictionary
                return self.push(unknown_tag, 1)
            else:
                # Has attributes so create it in its own dictionary
                context = self._getContext()
                context[unknown_tag] = attrsD

    def unknown_endtag(self, tag):
        # match namespaces
        if tag.find(':') <> -1:
            prefix, suffix = tag.split(':', 1)
        else:
            prefix, suffix = '', tag
        prefix = self.namespacemap.get(prefix, prefix)
        if prefix:
            prefix = prefix + '_'
        if suffix == 'svg' and self.svgOK:
            self.svgOK -= 1

        # call special handler (if defined) or default handler
        methodname = '_end_' + prefix + suffix
        try:
            if self.svgOK:
                raise AttributeError()
            method = getattr(self, methodname)
            method()
        except AttributeError:
            self.pop(prefix + suffix)

        # track inline content
        if self.incontent and not self.contentparams.get('type', u'xml').endswith(u'xml'):
            # element declared itself as escaped markup, but it isn't really
            if tag in ('xhtml:div', 'div'):
                return # typepad does this 10/2007
            self.contentparams['type'] = u'application/xhtml+xml'
        if self.incontent and self.contentparams.get('type') == u'application/xhtml+xml':
            tag = tag.split(':')[-1]
            self.handle_data('</%s>' % tag, escape=0)

        # track xml:base and xml:lang going out of scope
        if self.basestack:
            self.basestack.pop()
            if self.basestack and self.basestack[-1]:
                self.baseuri = self.basestack[-1]
        if self.langstack:
            self.langstack.pop()
            if self.langstack: # and (self.langstack[-1] is not None):
                self.lang = self.langstack[-1]

        self.depth -= 1

    def handle_charref(self, ref):
        # called for each character reference, e.g. for '&#160;', ref will be '160'
        if not self.elementstack:
            return
        ref = ref.lower()
        if ref in ('34', '38', '39', '60', '62', 'x22', 'x26', 'x27', 'x3c', 'x3e'):
            text = '&#%s;' % ref
        else:
            if ref[0] == 'x':
                c = int(ref[1:], 16)
            else:
                c = int(ref)
            text = unichr(c).encode('utf-8')
        self.elementstack[-1][2].append(text)

    def handle_entityref(self, ref):
        # called for each entity reference, e.g. for '&copy;', ref will be 'copy'
        if not self.elementstack:
            return
        if ref in ('lt', 'gt', 'quot', 'amp', 'apos'):
            text = '&%s;' % ref
        elif ref in self.entities:
            text = self.entities[ref]
            if text.startswith('&#') and text.endswith(';'):
                return self.handle_entityref(text)
        else:
            try:
                name2codepoint[ref]
            except KeyError:
                text = '&%s;' % ref
            else:
                text = unichr(name2codepoint[ref]).encode('utf-8')
        self.elementstack[-1][2].append(text)

    def handle_data(self, text, escape=1):
        # called for each block of plain text, i.e. outside of any tag and
        # not containing any character or entity references
        if not self.elementstack:
            return
        if escape and self.contentparams.get('type') == u'application/xhtml+xml':
            text = _xmlescape(text)
        self.elementstack[-1][2].append(text)

    def handle_comment(self, text):
        # called for each comment, e.g. <!-- insert message here -->
        pass

    def handle_pi(self, text):
        # called for each processing instruction, e.g. < ?instruction>
        pass

    def handle_decl(self, text):
        pass

    def parse_declaration(self, i):
        # override internal declaration handler to handle CDATA blocks
        if self.rawdata[i:i+9] == '<![CDATA[':
            k = self.rawdata.find(']]', i)
            if k == -1:
                # CDATA block began but didn't finish
                k = len(self.rawdata)
                return k
            self.handle_data(_xmlescape(self.rawdata[i+9:k]), 0)
            return k+3
        else:
            k = self.rawdata.find('>', i)
            if k >= 0:
                return k+1
            else:
                # We have an incomplete CDATA block.
                return k

    def mapContentType(self, contentType):
        contentType = contentType.lower()
        if contentType == 'text' or contentType == 'plain':
            contentType = u'text/plain'
        elif contentType == 'html':
            contentType = u'text/html'
        elif contentType == 'xhtml':
            contentType = u'application/xhtml+xml'
        return contentType

    def trackNamespace(self, prefix, uri):
        loweruri = uri.lower()
        if not self.version:
            if (prefix, loweruri) == (None, 'http://my.netscape.com/rdf/simple/0.9/'):
                self.version = u'rss090'
            elif loweruri == 'http://purl.org/rss/1.0/':
                self.version = u'rss10'
            elif loweruri == 'http://www.w3.org/2005/atom':
                self.version = u'atom10'
        if loweruri.find(u'backend.userland.com/rss') <> -1:
            # match any backend.userland.com namespace
            uri = u'http://backend.userland.com/rss'
            loweruri = uri
        if loweruri in self._matchnamespaces:
            self.namespacemap[prefix] = self._matchnamespaces[loweruri]
            self.namespacesInUse[self._matchnamespaces[loweruri]] = uri
        else:
            self.namespacesInUse[prefix or ''] = uri

    def resolveURI(self, uri):
        return _urljoin(self.baseuri or u'', uri)

    def decodeEntities(self, element, data):
        return data

    def strattrs(self, attrs):
        return ''.join([' %s="%s"' % (t[0],_xmlescape(t[1],{'"':'&quot;'})) for t in attrs])

    def push(self, element, expectingText):
        self.elementstack.append([element, expectingText, []])

    def pop(self, element, stripWhitespace=1):
        if not self.elementstack:
            return
        if self.elementstack[-1][0] != element:
            return

        element, expectingText, pieces = self.elementstack.pop()

        if self.version == u'atom10' and self.contentparams.get('type', u'text') == u'application/xhtml+xml':
            # remove enclosing child element, but only if it is a <div> and
            # only if all the remaining content is nested underneath it.
            # This means that the divs would be retained in the following:
            #    <div>foo</div><div>bar</div>
            while pieces and len(pieces)>1 and not pieces[-1].strip():
                del pieces[-1]
            while pieces and len(pieces)>1 and not pieces[0].strip():
                del pieces[0]
            if pieces and (pieces[0] == '<div>' or pieces[0].startswith('<div ')) and pieces[-1]=='</div>':
                depth = 0
                for piece in pieces[:-1]:
                    if piece.startswith('</'):
                        depth -= 1
                        if depth == 0:
                            break
                    elif piece.startswith('<') and not piece.endswith('/>'):
                        depth += 1
                else:
                    pieces = pieces[1:-1]

        # Ensure each piece is a str for Python 3
        for (i, v) in enumerate(pieces):
            if not isinstance(v, unicode):
                pieces[i] = v.decode('utf-8')

        output = u''.join(pieces)
        if stripWhitespace:
            output = output.strip()
        if not expectingText:
            return output

        # decode base64 content
        if base64 and self.contentparams.get('base64', 0):
            try:
                output = _base64decode(output)
            except binascii.Error:
                pass
            except binascii.Incomplete:
                pass
            except TypeError:
                # In Python 3, base64 takes and outputs bytes, not str
                # This may not be the most correct way to accomplish this
                output = _base64decode(output.encode('utf-8')).decode('utf-8')

        # resolve relative URIs
        if (element in self.can_be_relative_uri) and output:
            output = self.resolveURI(output)

        # decode entities within embedded markup
        if not self.contentparams.get('base64', 0):
            output = self.decodeEntities(element, output)

        # some feed formats require consumers to guess
        # whether the content is html or plain text
        if not self.version.startswith(u'atom') and self.contentparams.get('type') == u'text/plain':
            if self.lookslikehtml(output):
                self.contentparams['type'] = u'text/html'

        # remove temporary cruft from contentparams
        try:
            del self.contentparams['mode']
        except KeyError:
            pass
        try:
            del self.contentparams['base64']
        except KeyError:
            pass

        is_htmlish = self.mapContentType(self.contentparams.get('type', u'text/html')) in self.html_types
        # resolve relative URIs within embedded markup
        if is_htmlish and RESOLVE_RELATIVE_URIS:
            if element in self.can_contain_relative_uris:
                output = _resolveRelativeURIs(output, self.baseuri, self.encoding, self.contentparams.get('type', u'text/html'))

        # parse microformats
        # (must do this before sanitizing because some microformats
        # rely on elements that we sanitize)
        if PARSE_MICROFORMATS and is_htmlish and element in ['content', 'description', 'summary']:
            mfresults = _parseMicroformats(output, self.baseuri, self.encoding)
            if mfresults:
                for tag in mfresults.get('tags', []):
                    self._addTag(tag['term'], tag['scheme'], tag['label'])
                for enclosure in mfresults.get('enclosures', []):
                    self._start_enclosure(enclosure)
                for xfn in mfresults.get('xfn', []):
                    self._addXFN(xfn['relationships'], xfn['href'], xfn['name'])
                vcard = mfresults.get('vcard')
                if vcard:
                    self._getContext()['vcard'] = vcard

        # sanitize embedded markup
        if is_htmlish and SANITIZE_HTML:
            if element in self.can_contain_dangerous_markup:
                output = _sanitizeHTML(output, self.encoding, self.contentparams.get('type', u'text/html'))

        if self.encoding and not isinstance(output, unicode):
            output = output.decode(self.encoding, 'ignore')

        # address common error where people take data that is already
        # utf-8, presume that it is iso-8859-1, and re-encode it.
        if self.encoding in (u'utf-8', u'utf-8_INVALID_PYTHON_3') and isinstance(output, unicode):
            try:
                output = output.encode('iso-8859-1').decode('utf-8')
            except (UnicodeEncodeError, UnicodeDecodeError):
                pass

        # map win-1252 extensions to the proper code points
        if isinstance(output, unicode):
            output = output.translate(_cp1252)

        # categories/tags/keywords/whatever are handled in _end_category
        if element == 'category':
            return output

        if element == 'title' and -1 < self.title_depth <= self.depth:
            return output

        # store output in appropriate place(s)
        if self.inentry and not self.insource:
            if element == 'content':
                self.entries[-1].setdefault(element, [])
                contentparams = copy.deepcopy(self.contentparams)
                contentparams['value'] = output
                self.entries[-1][element].append(contentparams)
            elif element == 'link':
                if not self.inimage:
                    # query variables in urls in link elements are improperly
                    # converted from `?a=1&b=2` to `?a=1&b;=2` as if they're
                    # unhandled character references. fix this special case.
                    output = re.sub("&([A-Za-z0-9_]+);", "&\g<1>", output)
                    self.entries[-1][element] = output
                    if output:
                        self.entries[-1]['links'][-1]['href'] = output
            else:
                if element == 'description':
                    element = 'summary'
                old_value_depth = self.property_depth_map.setdefault(self.entries[-1], {}).get(element)
                if old_value_depth is None or self.depth <= old_value_depth:
                    self.property_depth_map[self.entries[-1]][element] = self.depth
                    self.entries[-1][element] = output
                if self.incontent:
                    contentparams = copy.deepcopy(self.contentparams)
                    contentparams['value'] = output
                    self.entries[-1][element + '_detail'] = contentparams
        elif (self.infeed or self.insource):# and (not self.intextinput) and (not self.inimage):
            context = self._getContext()
            if element == 'description':
                element = 'subtitle'
            context[element] = output
            if element == 'link':
                # fix query variables; see above for the explanation
                output = re.sub("&([A-Za-z0-9_]+);", "&\g<1>", output)
                context[element] = output
                context['links'][-1]['href'] = output
            elif self.incontent:
                contentparams = copy.deepcopy(self.contentparams)
                contentparams['value'] = output
                context[element + '_detail'] = contentparams
        return output

    def pushContent(self, tag, attrsD, defaultContentType, expectingText):
        self.incontent += 1
        if self.lang:
            self.lang=self.lang.replace('_','-')
        self.contentparams = FeedParserDict({
            'type': self.mapContentType(attrsD.get('type', defaultContentType)),
            'language': self.lang,
            'base': self.baseuri})
        self.contentparams['base64'] = self._isBase64(attrsD, self.contentparams)
        self.push(tag, expectingText)

    def popContent(self, tag):
        value = self.pop(tag)
        self.incontent -= 1
        self.contentparams.clear()
        return value

    # a number of elements in a number of RSS variants are nominally plain
    # text, but this is routinely ignored.  This is an attempt to detect
    # the most common cases.  As false positives often result in silent
    # data loss, this function errs on the conservative side.
    @staticmethod
    def lookslikehtml(s):
        # must have a close tag or an entity reference to qualify
        if not (re.search(r'</(\w+)>',s) or re.search("&#?\w+;",s)):
            return

        # all tags must be in a restricted subset of valid HTML tags
        if filter(lambda t: t.lower() not in _HTMLSanitizer.acceptable_elements,
            re.findall(r'</?(\w+)',s)):
            return

        # all entities must have been defined as valid HTML entities
        if filter(lambda e: e not in entitydefs.keys(), re.findall(r'&(\w+);', s)):
            return

        return 1

    def _mapToStandardPrefix(self, name):
        colonpos = name.find(':')
        if colonpos <> -1:
            prefix = name[:colonpos]
            suffix = name[colonpos+1:]
            prefix = self.namespacemap.get(prefix, prefix)
            name = prefix + ':' + suffix
        return name

    def _getAttribute(self, attrsD, name):
        return attrsD.get(self._mapToStandardPrefix(name))

    def _isBase64(self, attrsD, contentparams):
        if attrsD.get('mode', '') == 'base64':
            return 1
        if self.contentparams['type'].startswith(u'text/'):
            return 0
        if self.contentparams['type'].endswith(u'+xml'):
            return 0
        if self.contentparams['type'].endswith(u'/xml'):
            return 0
        return 1

    def _itsAnHrefDamnIt(self, attrsD):
        href = attrsD.get('url', attrsD.get('uri', attrsD.get('href', None)))
        if href:
            try:
                del attrsD['url']
            except KeyError:
                pass
            try:
                del attrsD['uri']
            except KeyError:
                pass
            attrsD['href'] = href
        return attrsD

    def _save(self, key, value, overwrite=False):
        context = self._getContext()
        if overwrite:
            context[key] = value
        else:
            context.setdefault(key, value)

    def _start_rss(self, attrsD):
        versionmap = {'0.91': u'rss091u',
                      '0.92': u'rss092',
                      '0.93': u'rss093',
                      '0.94': u'rss094'}
        #If we're here then this is an RSS feed.
        #If we don't have a version or have a version that starts with something
        #other than RSS then there's been a mistake. Correct it.
        if not self.version or not self.version.startswith(u'rss'):
            attr_version = attrsD.get('version', '')
            version = versionmap.get(attr_version)
            if version:
                self.version = version
            elif attr_version.startswith('2.'):
                self.version = u'rss20'
            else:
                self.version = u'rss'

    def _start_channel(self, attrsD):
        self.infeed = 1
        self._cdf_common(attrsD)

    def _cdf_common(self, attrsD):
        if 'lastmod' in attrsD:
            self._start_modified({})
            self.elementstack[-1][-1] = attrsD['lastmod']
            self._end_modified()
        if 'href' in attrsD:
            self._start_link({})
            self.elementstack[-1][-1] = attrsD['href']
            self._end_link()

    def _start_feed(self, attrsD):
        self.infeed = 1
        versionmap = {'0.1': u'atom01',
                      '0.2': u'atom02',
                      '0.3': u'atom03'}
        if not self.version:
            attr_version = attrsD.get('version')
            version = versionmap.get(attr_version)
            if version:
                self.version = version
            else:
                self.version = u'atom'

    def _end_channel(self):
        self.infeed = 0
    _end_feed = _end_channel

    def _start_image(self, attrsD):
        context = self._getContext()
        if not self.inentry:
            context.setdefault('image', FeedParserDict())
        self.inimage = 1
        self.title_depth = -1
        self.push('image', 0)

    def _end_image(self):
        self.pop('image')
        self.inimage = 0

    def _start_textinput(self, attrsD):
        context = self._getContext()
        context.setdefault('textinput', FeedParserDict())
        self.intextinput = 1
        self.title_depth = -1
        self.push('textinput', 0)
    _start_textInput = _start_textinput

    def _end_textinput(self):
        self.pop('textinput')
        self.intextinput = 0
    _end_textInput = _end_textinput

    def _start_author(self, attrsD):
        self.inauthor = 1
        self.push('author', 1)
        # Append a new FeedParserDict when expecting an author
        context = self._getContext()
        context.setdefault('authors', [])
        context['authors'].append(FeedParserDict())
    _start_managingeditor = _start_author
    _start_dc_author = _start_author
    _start_dc_creator = _start_author
    _start_itunes_author = _start_author

    def _end_author(self):
        self.pop('author')
        self.inauthor = 0
        self._sync_author_detail()
    _end_managingeditor = _end_author
    _end_dc_author = _end_author
    _end_dc_creator = _end_author
    _end_itunes_author = _end_author

    def _start_itunes_owner(self, attrsD):
        self.inpublisher = 1
        self.push('publisher', 0)

    def _end_itunes_owner(self):
        self.pop('publisher')
        self.inpublisher = 0
        self._sync_author_detail('publisher')

    def _start_contributor(self, attrsD):
        self.incontributor = 1
        context = self._getContext()
        context.setdefault('contributors', [])
        context['contributors'].append(FeedParserDict())
        self.push('contributor', 0)

    def _end_contributor(self):
        self.pop('contributor')
        self.incontributor = 0

    def _start_dc_contributor(self, attrsD):
        self.incontributor = 1
        context = self._getContext()
        context.setdefault('contributors', [])
        context['contributors'].append(FeedParserDict())
        self.push('name', 0)

    def _end_dc_contributor(self):
        self._end_name()
        self.incontributor = 0

    def _start_name(self, attrsD):
        self.push('name', 0)
    _start_itunes_name = _start_name

    def _end_name(self):
        value = self.pop('name')
        if self.inpublisher:
            self._save_author('name', value, 'publisher')
        elif self.inauthor:
            self._save_author('name', value)
        elif self.incontributor:
            self._save_contributor('name', value)
        elif self.intextinput:
            context = self._getContext()
            context['name'] = value
    _end_itunes_name = _end_name

    def _start_width(self, attrsD):
        self.push('width', 0)

    def _end_width(self):
        value = self.pop('width')
        try:
            value = int(value)
        except ValueError:
            value = 0
        if self.inimage:
            context = self._getContext()
            context['width'] = value

    def _start_height(self, attrsD):
        self.push('height', 0)

    def _end_height(self):
        value = self.pop('height')
        try:
            value = int(value)
        except ValueError:
            value = 0
        if self.inimage:
            context = self._getContext()
            context['height'] = value

    def _start_url(self, attrsD):
        self.push('href', 1)
    _start_homepage = _start_url
    _start_uri = _start_url

    def _end_url(self):
        value = self.pop('href')
        if self.inauthor:
            self._save_author('href', value)
        elif self.incontributor:
            self._save_contributor('href', value)
    _end_homepage = _end_url
    _end_uri = _end_url

    def _start_email(self, attrsD):
        self.push('email', 0)
    _start_itunes_email = _start_email

    def _end_email(self):
        value = self.pop('email')
        if self.inpublisher:
            self._save_author('email', value, 'publisher')
        elif self.inauthor:
            self._save_author('email', value)
        elif self.incontributor:
            self._save_contributor('email', value)
    _end_itunes_email = _end_email

    def _getContext(self):
        if self.insource:
            context = self.sourcedata
        elif self.inimage and 'image' in self.feeddata:
            context = self.feeddata['image']
        elif self.intextinput:
            context = self.feeddata['textinput']
        elif self.inentry:
            context = self.entries[-1]
        else:
            context = self.feeddata
        return context

    def _save_author(self, key, value, prefix='author'):
        context = self._getContext()
        context.setdefault(prefix + '_detail', FeedParserDict())
        context[prefix + '_detail'][key] = value
        self._sync_author_detail()
        context.setdefault('authors', [FeedParserDict()])
        context['authors'][-1][key] = value

    def _save_contributor(self, key, value):
        context = self._getContext()
        context.setdefault('contributors', [FeedParserDict()])
        context['contributors'][-1][key] = value

    def _sync_author_detail(self, key='author'):
        context = self._getContext()
        detail = context.get('%s_detail' % key)
        if detail:
            name = detail.get('name')
            email = detail.get('email')
            if name and email:
                context[key] = u'%s (%s)' % (name, email)
            elif name:
                context[key] = name
            elif email:
                context[key] = email
        else:
            author, email = context.get(key), None
            if not author:
                return
            emailmatch = re.search(ur'''(([a-zA-Z0-9\_\-\.\+]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?))(\?subject=\S+)?''', author)
            if emailmatch:
                email = emailmatch.group(0)
                # probably a better way to do the following, but it passes all the tests
                author = author.replace(email, u'')
                author = author.replace(u'()', u'')
                author = author.replace(u'<>', u'')
                author = author.replace(u'&lt;&gt;', u'')
                author = author.strip()
                if author and (author[0] == u'('):
                    author = author[1:]
                if author and (author[-1] == u')'):
                    author = author[:-1]
                author = author.strip()
            if author or email:
                context.setdefault('%s_detail' % key, FeedParserDict())
            if author:
                context['%s_detail' % key]['name'] = author
            if email:
                context['%s_detail' % key]['email'] = email

    def _start_subtitle(self, attrsD):
        self.pushContent('subtitle', attrsD, u'text/plain', 1)
    _start_tagline = _start_subtitle
    _start_itunes_subtitle = _start_subtitle

    def _end_subtitle(self):
        self.popContent('subtitle')
    _end_tagline = _end_subtitle
    _end_itunes_subtitle = _end_subtitle

    def _start_rights(self, attrsD):
        self.pushContent('rights', attrsD, u'text/plain', 1)
    _start_dc_rights = _start_rights
    _start_copyright = _start_rights

    def _end_rights(self):
        self.popContent('rights')
    _end_dc_rights = _end_rights
    _end_copyright = _end_rights

    def _start_item(self, attrsD):
        self.entries.append(FeedParserDict())
        self.push('item', 0)
        self.inentry = 1
        self.guidislink = 0
        self.title_depth = -1
        id = self._getAttribute(attrsD, 'rdf:about')
        if id:
            context = self._getContext()
            context['id'] = id
        self._cdf_common(attrsD)
    _start_entry = _start_item

    def _end_item(self):
        self.pop('item')
        self.inentry = 0
    _end_entry = _end_item

    def _start_dc_language(self, attrsD):
        self.push('language', 1)
    _start_language = _start_dc_language

    def _end_dc_language(self):
        self.lang = self.pop('language')
    _end_language = _end_dc_language

    def _start_dc_publisher(self, attrsD):
        self.push('publisher', 1)
    _start_webmaster = _start_dc_publisher

    def _end_dc_publisher(self):
        self.pop('publisher')
        self._sync_author_detail('publisher')
    _end_webmaster = _end_dc_publisher

    def _start_published(self, attrsD):
        self.push('published', 1)
    _start_dcterms_issued = _start_published
    _start_issued = _start_published

    def _end_published(self):
        value = self.pop('published')
        self._save('published_parsed', _parse_date(value), overwrite=True)
    _end_dcterms_issued = _end_published
    _end_issued = _end_published

    def _start_updated(self, attrsD):
        self.push('updated', 1)
    _start_modified = _start_updated
    _start_dcterms_modified = _start_updated
    _start_pubdate = _start_updated
    _start_dc_date = _start_updated
    _start_lastbuilddate = _start_updated

    def _end_updated(self):
        value = self.pop('updated')
        parsed_value = _parse_date(value)
        self._save('updated_parsed', parsed_value, overwrite=True)
    _end_modified = _end_updated
    _end_dcterms_modified = _end_updated
    _end_pubdate = _end_updated
    _end_dc_date = _end_updated
    _end_lastbuilddate = _end_updated

    def _start_created(self, attrsD):
        self.push('created', 1)
    _start_dcterms_created = _start_created

    def _end_created(self):
        value = self.pop('created')
        self._save('created_parsed', _parse_date(value), overwrite=True)
    _end_dcterms_created = _end_created

    def _start_expirationdate(self, attrsD):
        self.push('expired', 1)

    def _end_expirationdate(self):
        self._save('expired_parsed', _parse_date(self.pop('expired')), overwrite=True)

    def _start_cc_license(self, attrsD):
        context = self._getContext()
        value = self._getAttribute(attrsD, 'rdf:resource')
        attrsD = FeedParserDict()
        attrsD['rel'] = u'license'
        if value:
            attrsD['href']=value
        context.setdefault('links', []).append(attrsD)

    def _start_creativecommons_license(self, attrsD):
        self.push('license', 1)
    _start_creativeCommons_license = _start_creativecommons_license

    def _end_creativecommons_license(self):
        value = self.pop('license')
        context = self._getContext()
        attrsD = FeedParserDict()
        attrsD['rel'] = u'license'
        if value:
            attrsD['href'] = value
        context.setdefault('links', []).append(attrsD)
        del context['license']
    _end_creativeCommons_license = _end_creativecommons_license

    def _addXFN(self, relationships, href, name):
        context = self._getContext()
        xfn = context.setdefault('xfn', [])
        value = FeedParserDict({'relationships': relationships, 'href': href, 'name': name})
        if value not in xfn:
            xfn.append(value)

    def _addTag(self, term, scheme, label):
        context = self._getContext()
        tags = context.setdefault('tags', [])
        if (not term) and (not scheme) and (not label):
            return
        value = FeedParserDict({'term': term, 'scheme': scheme, 'label': label})
        if value not in tags:
            tags.append(value)

    def _start_category(self, attrsD):
        term = attrsD.get('term')
        scheme = attrsD.get('scheme', attrsD.get('domain'))
        label = attrsD.get('label')
        self._addTag(term, scheme, label)
        self.push('category', 1)
    _start_dc_subject = _start_category
    _start_keywords = _start_category

    def _start_media_category(self, attrsD):
        attrsD.setdefault('scheme', u'http://search.yahoo.com/mrss/category_schema')
        self._start_category(attrsD)

    def _end_itunes_keywords(self):
        for term in self.pop('itunes_keywords').split():
            self._addTag(term, u'http://www.itunes.com/', None)

    def _start_itunes_category(self, attrsD):
        self._addTag(attrsD.get('text'), u'http://www.itunes.com/', None)
        self.push('category', 1)

    def _end_category(self):
        value = self.pop('category')
        if not value:
            return
        context = self._getContext()
        tags = context['tags']
        if value and len(tags) and not tags[-1]['term']:
            tags[-1]['term'] = value
        else:
            self._addTag(value, None, None)
    _end_dc_subject = _end_category
    _end_keywords = _end_category
    _end_itunes_category = _end_category
    _end_media_category = _end_category

    def _start_cloud(self, attrsD):
        self._getContext()['cloud'] = FeedParserDict(attrsD)

    def _start_link(self, attrsD):
        attrsD.setdefault('rel', u'alternate')
        if attrsD['rel'] == u'self':
            attrsD.setdefault('type', u'application/atom+xml')
        else:
            attrsD.setdefault('type', u'text/html')
        context = self._getContext()
        attrsD = self._itsAnHrefDamnIt(attrsD)
        if 'href' in attrsD:
            attrsD['href'] = self.resolveURI(attrsD['href'])
        expectingText = self.infeed or self.inentry or self.insource
        context.setdefault('links', [])
        if not (self.inentry and self.inimage):
            context['links'].append(FeedParserDict(attrsD))
        if 'href' in attrsD:
            expectingText = 0
            if (attrsD.get('rel') == u'alternate') and (self.mapContentType(attrsD.get('type')) in self.html_types):
                context['link'] = attrsD['href']
        else:
            self.push('link', expectingText)

    def _end_link(self):
        value = self.pop('link')

    def _start_guid(self, attrsD):
        self.guidislink = (attrsD.get('ispermalink', 'true') == 'true')
        self.push('id', 1)
    _start_id = _start_guid

    def _end_guid(self):
        value = self.pop('id')
        self._save('guidislink', self.guidislink and 'link' not in self._getContext())
        if self.guidislink:
            # guid acts as link, but only if 'ispermalink' is not present or is 'true',
            # and only if the item doesn't already have a link element
            self._save('link', value)
    _end_id = _end_guid

    def _start_title(self, attrsD):
        if self.svgOK:
            return self.unknown_starttag('title', attrsD.items())
        self.pushContent('title', attrsD, u'text/plain', self.infeed or self.inentry or self.insource)
    _start_dc_title = _start_title
    _start_media_title = _start_title

    def _end_title(self):
        if self.svgOK:
            return
        value = self.popContent('title')
        if not value:
            return
        self.title_depth = self.depth
    _end_dc_title = _end_title

    def _end_media_title(self):
        title_depth = self.title_depth
        self._end_title()
        self.title_depth = title_depth

    def _start_description(self, attrsD):
        context = self._getContext()
        if 'summary' in context:
            self._summaryKey = 'content'
            self._start_content(attrsD)
        else:
            self.pushContent('description', attrsD, u'text/html', self.infeed or self.inentry or self.insource)
    _start_dc_description = _start_description

    def _start_abstract(self, attrsD):
        self.pushContent('description', attrsD, u'text/plain', self.infeed or self.inentry or self.insource)

    def _end_description(self):
        if self._summaryKey == 'content':
            self._end_content()
        else:
            value = self.popContent('description')
        self._summaryKey = None
    _end_abstract = _end_description
    _end_dc_description = _end_description

    def _start_info(self, attrsD):
        self.pushContent('info', attrsD, u'text/plain', 1)
    _start_feedburner_browserfriendly = _start_info

    def _end_info(self):
        self.popContent('info')
    _end_feedburner_browserfriendly = _end_info

    def _start_generator(self, attrsD):
        if attrsD:
            attrsD = self._itsAnHrefDamnIt(attrsD)
            if 'href' in attrsD:
                attrsD['href'] = self.resolveURI(attrsD['href'])
        self._getContext()['generator_detail'] = FeedParserDict(attrsD)
        self.push('generator', 1)

    def _end_generator(self):
        value = self.pop('generator')
        context = self._getContext()
        if 'generator_detail' in context:
            context['generator_detail']['name'] = value

    def _start_admin_generatoragent(self, attrsD):
        self.push('generator', 1)
        value = self._getAttribute(attrsD, 'rdf:resource')
        if value:
            self.elementstack[-1][2].append(value)
        self.pop('generator')
        self._getContext()['generator_detail'] = FeedParserDict({'href': value})

    def _start_admin_errorreportsto(self, attrsD):
        self.push('errorreportsto', 1)
        value = self._getAttribute(attrsD, 'rdf:resource')
        if value:
            self.elementstack[-1][2].append(value)
        self.pop('errorreportsto')

    def _start_summary(self, attrsD):
        context = self._getContext()
        if 'summary' in context:
            self._summaryKey = 'content'
            self._start_content(attrsD)
        else:
            self._summaryKey = 'summary'
            self.pushContent(self._summaryKey, attrsD, u'text/plain', 1)
    _start_itunes_summary = _start_summary

    def _end_summary(self):
        if self._summaryKey == 'content':
            self._end_content()
        else:
            self.popContent(self._summaryKey or 'summary')
        self._summaryKey = None
    _end_itunes_summary = _end_summary

    def _start_enclosure(self, attrsD):
        attrsD = self._itsAnHrefDamnIt(attrsD)
        context = self._getContext()
        attrsD['rel'] = u'enclosure'
        context.setdefault('links', []).append(FeedParserDict(attrsD))

    def _start_source(self, attrsD):
        if 'url' in attrsD:
          # This means that we're processing a source element from an RSS 2.0 feed
          self.sourcedata['href'] = attrsD[u'url']
        self.push('source', 1)
        self.insource = 1
        self.title_depth = -1

    def _end_source(self):
        self.insource = 0
        value = self.pop('source')
        if value:
          self.sourcedata['title'] = value
        self._getContext()['source'] = copy.deepcopy(self.sourcedata)
        self.sourcedata.clear()

    def _start_content(self, attrsD):
        self.pushContent('content', attrsD, u'text/plain', 1)
        src = attrsD.get('src')
        if src:
            self.contentparams['src'] = src
        self.push('content', 1)

    def _start_body(self, attrsD):
        self.pushContent('content', attrsD, u'application/xhtml+xml', 1)
    _start_xhtml_body = _start_body

    def _start_content_encoded(self, attrsD):
        self.pushContent('content', attrsD, u'text/html', 1)
    _start_fullitem = _start_content_encoded

    def _end_content(self):
        copyToSummary = self.mapContentType(self.contentparams.get('type')) in ([u'text/plain'] + self.html_types)
        value = self.popContent('content')
        if copyToSummary:
            self._save('summary', value)

    _end_body = _end_content
    _end_xhtml_body = _end_content
    _end_content_encoded = _end_content
    _end_fullitem = _end_content

    def _start_itunes_image(self, attrsD):
        self.push('itunes_image', 0)
        if attrsD.get('href'):
            self._getContext()['image'] = FeedParserDict({'href': attrsD.get('href')})
    _start_itunes_link = _start_itunes_image

    def _end_itunes_block(self):
        value = self.pop('itunes_block', 0)
        self._getContext()['itunes_block'] = (value == 'yes') and 1 or 0

    def _end_itunes_explicit(self):
        value = self.pop('itunes_explicit', 0)
        # Convert 'yes' -> True, 'clean' to False, and any other value to None
        # False and None both evaluate as False, so the difference can be ignored
        # by applications that only need to know if the content is explicit.
        self._getContext()['itunes_explicit'] = (None, False, True)[(value == 'yes' and 2) or value == 'clean' or 0]

    def _start_media_content(self, attrsD):
        context = self._getContext()
        context.setdefault('media_content', [])
        context['media_content'].append(attrsD)

    def _start_media_thumbnail(self, attrsD):
        context = self._getContext()
        context.setdefault('media_thumbnail', [])
        self.push('url', 1) # new
        context['media_thumbnail'].append(attrsD)

    def _end_media_thumbnail(self):
        url = self.pop('url')
        context = self._getContext()
        if url != None and len(url.strip()) != 0:
            if 'url' not in context['media_thumbnail'][-1]:
                context['media_thumbnail'][-1]['url'] = url

    def _start_media_player(self, attrsD):
        self.push('media_player', 0)
        self._getContext()['media_player'] = FeedParserDict(attrsD)

    def _end_media_player(self):
        value = self.pop('media_player')
        context = self._getContext()
        context['media_player']['content'] = value

    def _start_newlocation(self, attrsD):
        self.push('newlocation', 1)

    def _end_newlocation(self):
        url = self.pop('newlocation')
        context = self._getContext()
        # don't set newlocation if the context isn't right
        if context is not self.feeddata:
            return
        context['newlocation'] = _makeSafeAbsoluteURI(self.baseuri, url.strip())

if _XML_AVAILABLE:
    class _StrictFeedParser(_FeedParserMixin, xml.sax.handler.ContentHandler):
        def __init__(self, baseuri, baselang, encoding):
            xml.sax.handler.ContentHandler.__init__(self)
            _FeedParserMixin.__init__(self, baseuri, baselang, encoding)
            self.bozo = 0
            self.exc = None
            self.decls = {}

        def startPrefixMapping(self, prefix, uri):
            if not uri:
                return
            # Jython uses '' instead of None; standardize on None
            prefix = prefix or None
            self.trackNamespace(prefix, uri)
            if prefix and uri == 'http://www.w3.org/1999/xlink':
                self.decls['xmlns:' + prefix] = uri

        def startElementNS(self, name, qname, attrs):
            namespace, localname = name
            lowernamespace = str(namespace or '').lower()
            if lowernamespace.find(u'backend.userland.com/rss') <> -1:
                # match any backend.userland.com namespace
                namespace = u'http://backend.userland.com/rss'
                lowernamespace = namespace
            if qname and qname.find(':') > 0:
                givenprefix = qname.split(':')[0]
            else:
                givenprefix = None
            prefix = self._matchnamespaces.get(lowernamespace, givenprefix)
            if givenprefix and (prefix == None or (prefix == '' and lowernamespace == '')) and givenprefix not in self.namespacesInUse:
                    raise UndeclaredNamespace, "'%s' is not associated with a namespace" % givenprefix
            localname = str(localname).lower()

            # qname implementation is horribly broken in Python 2.1 (it
            # doesn't report any), and slightly broken in Python 2.2 (it
            # doesn't report the xml: namespace). So we match up namespaces
            # with a known list first, and then possibly override them with
            # the qnames the SAX parser gives us (if indeed it gives us any
            # at all).  Thanks to MatejC for helping me test this and
            # tirelessly telling me that it didn't work yet.
            attrsD, self.decls = self.decls, {}
            if localname=='math' and namespace=='http://www.w3.org/1998/Math/MathML':
                attrsD['xmlns']=namespace
            if localname=='svg' and namespace=='http://www.w3.org/2000/svg':
                attrsD['xmlns']=namespace

            if prefix:
                localname = prefix.lower() + ':' + localname
            elif namespace and not qname: #Expat
                for name,value in self.namespacesInUse.items():
                     if name and value == namespace:
                         localname = name + ':' + localname
                         break

            for (namespace, attrlocalname), attrvalue in attrs.items():
                lowernamespace = (namespace or '').lower()
                prefix = self._matchnamespaces.get(lowernamespace, '')
                if prefix:
                    attrlocalname = prefix + ':' + attrlocalname
                attrsD[str(attrlocalname).lower()] = attrvalue
            for qname in attrs.getQNames():
                attrsD[str(qname).lower()] = attrs.getValueByQName(qname)
            self.unknown_starttag(localname, attrsD.items())

        def characters(self, text):
            self.handle_data(text)

        def endElementNS(self, name, qname):
            namespace, localname = name
            lowernamespace = str(namespace or '').lower()
            if qname and qname.find(':') > 0:
                givenprefix = qname.split(':')[0]
            else:
                givenprefix = ''
            prefix = self._matchnamespaces.get(lowernamespace, givenprefix)
            if prefix:
                localname = prefix + ':' + localname
            elif namespace and not qname: #Expat
                for name,value in self.namespacesInUse.items():
                     if name and value == namespace:
                         localname = name + ':' + localname
                         break
            localname = str(localname).lower()
            self.unknown_endtag(localname)

        def error(self, exc):
            self.bozo = 1
            self.exc = exc

        # drv_libxml2 calls warning() in some cases
        warning = error

        def fatalError(self, exc):
            self.error(exc)
            raise exc

class _BaseHTMLProcessor(sgmllib.SGMLParser):
    special = re.compile('''[<>'"]''')
    bare_ampersand = re.compile("&(?!#\d+;|#x[0-9a-fA-F]+;|\w+;)")
    elements_no_end_tag = set([
      'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',
      'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
      'source', 'track', 'wbr'
    ])

    def __init__(self, encoding, _type):
        self.encoding = encoding
        self._type = _type
        sgmllib.SGMLParser.__init__(self)

    def reset(self):
        self.pieces = []
        sgmllib.SGMLParser.reset(self)

    def _shorttag_replace(self, match):
        tag = match.group(1)
        if tag in self.elements_no_end_tag:
            return '<' + tag + ' />'
        else:
            return '<' + tag + '></' + tag + '>'

    # By declaring these methods and overriding their compiled code
    # with the code from sgmllib, the original code will execute in
    # feedparser's scope instead of sgmllib's. This means that the
    # `tagfind` and `charref` regular expressions will be found as
    # they're declared above, not as they're declared in sgmllib.
    def goahead(self, i):
        pass
    goahead.func_code = sgmllib.SGMLParser.goahead.func_code

    def __parse_starttag(self, i):
        pass
    __parse_starttag.func_code = sgmllib.SGMLParser.parse_starttag.func_code

    def parse_starttag(self,i):
        j = self.__parse_starttag(i)
        if self._type == 'application/xhtml+xml':
            if j>2 and self.rawdata[j-2:j]=='/>':
                self.unknown_endtag(self.lasttag)
        return j

    def feed(self, data):
        data = re.compile(r'<!((?!DOCTYPE|--|\[))', re.IGNORECASE).sub(r'&lt;!\1', data)
        data = re.sub(r'<([^<>\s]+?)\s*/>', self._shorttag_replace, data)
        data = data.replace('&#39;', "'")
        data = data.replace('&#34;', '"')
        try:
            bytes
            if bytes is str:
                raise NameError
            self.encoding = self.encoding + u'_INVALID_PYTHON_3'
        except NameError:
            if self.encoding and isinstance(data, unicode):
                data = data.encode(self.encoding)
        sgmllib.SGMLParser.feed(self, data)
        sgmllib.SGMLParser.close(self)

    def normalize_attrs(self, attrs):
        if not attrs:
            return attrs
        # utility method to be called by descendants
        attrs = dict([(k.lower(), v) for k, v in attrs]).items()
        attrs = [(k, k in ('rel', 'type') and v.lower() or v) for k, v in attrs]
        attrs.sort()
        return attrs

    def unknown_starttag(self, tag, attrs):
        # called for each start tag
        # attrs is a list of (attr, value) tuples
        # e.g. for <pre class='screen'>, tag='pre', attrs=[('class', 'screen')]
        uattrs = []
        strattrs=''
        if attrs:
            for key, value in attrs:
                value=value.replace('>','&gt;').replace('<','&lt;').replace('"','&quot;')
                value = self.bare_ampersand.sub("&amp;", value)
                # thanks to Kevin Marks for this breathtaking hack to deal with (valid) high-bit attribute values in UTF-8 feeds
                if not isinstance(value, unicode):
                    value = value.decode(self.encoding, 'ignore')
                try:
                    # Currently, in Python 3 the key is already a str, and cannot be decoded again
                    uattrs.append((unicode(key, self.encoding), value))
                except TypeError:
                    uattrs.append((key, value))
            strattrs = u''.join([u' %s="%s"' % (key, value) for key, value in uattrs])
            if self.encoding:
                try:
                    strattrs = strattrs.encode(self.encoding)
                except (UnicodeEncodeError, LookupError):
                    pass
        if tag in self.elements_no_end_tag:
            self.pieces.append('< %s%s />' % (tag, strattrs))
        else:
            self.pieces.append('< %s%s>' % (tag, strattrs))

    def unknown_endtag(self, tag):
        # called for each end tag, e.g. for </pre>, tag will be 'pre'
        # Reconstruct the original end tag.
        if tag not in self.elements_no_end_tag:
            self.pieces.append("</%s>" % tag)

    def handle_charref(self, ref):
        # called for each character reference, e.g. for '&#160;', ref will be '160'
        # Reconstruct the original character reference.
        if ref.startswith('x'):
            value = int(ref[1:], 16)
        else:
            value = int(ref)

        if value in _cp1252:
            self.pieces.append('&#%s;' % hex(ord(_cp1252[value]))[1:])
        else:
            self.pieces.append('&#%s;' % ref)

    def handle_entityref(self, ref):
        # called for each entity reference, e.g. for '&copy;', ref will be 'copy'
        # Reconstruct the original entity reference.
        if ref in name2codepoint or ref == 'apos':
            self.pieces.append('&%s;' % ref)
        else:
            self.pieces.append('&amp;%s' % ref)

    def handle_data(self, text):
        # called for each block of plain text, i.e. outside of any tag and
        # not containing any character or entity references
        # Store the original text verbatim.
        self.pieces.append(text)

    def handle_comment(self, text):
        # called for each HTML comment, e.g. <!-- insert Javascript code here -->
        # Reconstruct the original comment.
        self.pieces.append('<!--%s-->' % text)

    def handle_pi(self, text):
        # called for each processing instruction, e.g. < ?instruction>
        # Reconstruct original processing instruction.
        self.pieces.append('< ?%s>' % text)

    def handle_decl(self, text):
        # called for the DOCTYPE, if present, e.g.
        # <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        #     "http://www.w3.org/TR/html4/loose.dtd">
        # Reconstruct original DOCTYPE
        self.pieces.append('<!%s>' % text)

    _new_declname_match = re.compile(r'[a-zA-Z][-_.a-zA-Z0-9:]*\s*').match
    def _scan_name(self, i, declstartpos):
        rawdata = self.rawdata
        n = len(rawdata)
        if i == n:
            return None, -1
        m = self._new_declname_match(rawdata, i)
        if m:
            s = m.group()
            name = s.strip()
            if (i + len(s)) == n:
                return None, -1  # end of buffer
            return name.lower(), m.end()
        else:
            self.handle_data(rawdata)
#            self.updatepos(declstartpos, i)
            return None, -1

    def convert_charref(self, name):
        return '&#%s;' % name

    def convert_entityref(self, name):
        return '&%s;' % name

    def output(self):
        '''Return processed HTML as a single string'''
        return ''.join([str(p) for p in self.pieces])

    def parse_declaration(self, i):
        try:
            return sgmllib.SGMLParser.parse_declaration(self, i)
        except sgmllib.SGMLParseError:
            # escape the doctype declaration and continue parsing
            self.handle_data('&lt;')
            return i+1

class _LooseFeedParser(_FeedParserMixin, _BaseHTMLProcessor):
    def __init__(self, baseuri, baselang, encoding, entities):
        sgmllib.SGMLParser.__init__(self)
        _FeedParserMixin.__init__(self, baseuri, baselang, encoding)
        _BaseHTMLProcessor.__init__(self, encoding, 'application/xhtml+xml')
        self.entities=entities

    def decodeEntities(self, element, data):
        data = data.replace('&#60;', '&lt;')
        data = data.replace('&#x3c;', '&lt;')
        data = data.replace('&#x3C;', '&lt;')
        data = data.replace('&#62;', '&gt;')
        data = data.replace('&#x3e;', '&gt;')
        data = data.replace('&#x3E;', '&gt;')
        data = data.replace('&#38;', '&amp;')
        data = data.replace('&#x26;', '&amp;')
        data = data.replace('&#34;', '&quot;')
        data = data.replace('&#x22;', '&quot;')
        data = data.replace('&#39;', '&apos;')
        data = data.replace('&#x27;', '&apos;')
        if not self.contentparams.get('type', u'xml').endswith(u'xml'):
            data = data.replace('&lt;', '<')
            data = data.replace('&gt;', '>')
            data = data.replace('&amp;', '&')
            data = data.replace('&quot;', '"')
            data = data.replace('&apos;', "'")
        return data

    def strattrs(self, attrs):
        return ''.join([' %s="%s"' % (n,v.replace('"','&quot;')) for n,v in attrs])

class _MicroformatsParser:
    STRING = 1
    DATE = 2
    URI = 3
    NODE = 4
    EMAIL = 5

    known_xfn_relationships = set(['contact', 'acquaintance', 'friend', 'met', 'co-worker', 'coworker', 'colleague', 'co-resident', 'coresident', 'neighbor', 'child', 'parent', 'sibling', 'brother', 'sister', 'spouse', 'wife', 'husband', 'kin', 'relative', 'muse', 'crush', 'date', 'sweetheart', 'me'])
    known_binary_extensions =  set(['zip','rar','exe','gz','tar','tgz','tbz2','bz2','z','7z','dmg','img','sit','sitx','hqx','deb','rpm','bz2','jar','rar','iso','bin','msi','mp2','mp3','ogg','ogm','mp4','m4v','m4a','avi','wma','wmv'])

    def __init__(self, data, baseuri, encoding):
        self.document = BeautifulSoup.BeautifulSoup(data)
        self.baseuri = baseuri
        self.encoding = encoding
        if isinstance(data, unicode):
            data = data.encode(encoding)
        self.tags = []
        self.enclosures = []
        self.xfn = []
        self.vcard = None

    def vcardEscape(self, s):
        if isinstance(s, basestring):
            s = s.replace(',', '\\,').replace(';', '\\;').replace('\n', '\\n')
        return s

    def vcardFold(self, s):
        s = re.sub(';+$', '', s)
        sFolded = ''
        iMax = 75
        sPrefix = ''
        while len(s) > iMax:
            sFolded += sPrefix + s[:iMax] + '\n'
            s = s[iMax:]
            sPrefix = ' '
            iMax = 74
        sFolded += sPrefix + s
        return sFolded

    def normalize(self, s):
        return re.sub(r'\s+', ' ', s).strip()

    def unique(self, aList):
        results = []
        for element in aList:
            if element not in results:
                results.append(element)
        return results

    def toISO8601(self, dt):
        return time.strftime('%Y-%m-%dT%H:%M:%SZ', dt)

    def getPropertyValue(self, elmRoot, sProperty, iPropertyType=4, bAllowMultiple=0, bAutoEscape=0):
        all = lambda x: 1
        sProperty = sProperty.lower()
        bFound = 0
        bNormalize = 1
        propertyMatch = {'class': re.compile(r'\b%s\b' % sProperty)}
        if bAllowMultiple and (iPropertyType != self.NODE):
            snapResults = []
            containers = elmRoot(['ul', 'ol'], propertyMatch)
            for container in containers:
                snapResults.extend(container('li'))
            bFound = (len(snapResults) != 0)
        if not bFound:
            snapResults = elmRoot(all, propertyMatch)
            bFound = (len(snapResults) != 0)
        if (not bFound) and (sProperty == 'value'):
            snapResults = elmRoot('pre')
            bFound = (len(snapResults) != 0)
            bNormalize = not bFound
            if not bFound:
                snapResults = [elmRoot]
                bFound = (len(snapResults) != 0)
        arFilter = []
        if sProperty == 'vcard':
            snapFilter = elmRoot(all, propertyMatch)
            for node in snapFilter:
                if node.findParent(all, propertyMatch):
                    arFilter.append(node)
        arResults = []
        for node in snapResults:
            if node not in arFilter:
                arResults.append(node)
        bFound = (len(arResults) != 0)
        if not bFound:
            if bAllowMultiple:
                return []
            elif iPropertyType == self.STRING:
                return ''
            elif iPropertyType == self.DATE:
                return None
            elif iPropertyType == self.URI:
                return ''
            elif iPropertyType == self.NODE:
                return None
            else:
                return None
        arValues = []
        for elmResult in arResults:
            sValue = None
            if iPropertyType == self.NODE:
                if bAllowMultiple:
                    arValues.append(elmResult)
                    continue
                else:
                    return elmResult
            sNodeName = elmResult.name.lower()
            if (iPropertyType == self.EMAIL) and (sNodeName == 'a'):
                sValue = (elmResult.get('href') or '').split('mailto:').pop().split('?')[0]
            if sValue:
                sValue = bNormalize and self.normalize(sValue) or sValue.strip()
            if (not sValue) and (sNodeName == 'abbr'):
                sValue = elmResult.get('title')
            if sValue:
                sValue = bNormalize and self.normalize(sValue) or sValue.strip()
            if (not sValue) and (iPropertyType == self.URI):
                if sNodeName == 'a':
                    sValue = elmResult.get('href')
                elif sNodeName == 'img':
                    sValue = elmResult.get('src')
                elif sNodeName == 'object':
                    sValue = elmResult.get('data')
            if sValue:
                sValue = bNormalize and self.normalize(sValue) or sValue.strip()
            if (not sValue) and (sNodeName == 'img'):
                sValue = elmResult.get('alt')
            if sValue:
                sValue = bNormalize and self.normalize(sValue) or sValue.strip()
            if not sValue:
                sValue = elmResult.renderContents()
                sValue = re.sub(r'<\S[^>]*>', '', sValue)
                sValue = sValue.replace('\r\n', '\n')
                sValue = sValue.replace('\r', '\n')
            if sValue:
                sValue = bNormalize and self.normalize(sValue) or sValue.strip()
            if not sValue:
                continue
            if iPropertyType == self.DATE:
                sValue = _parse_date_iso8601(sValue)
            if bAllowMultiple:
                arValues.append(bAutoEscape and self.vcardEscape(sValue) or sValue)
            else:
                return bAutoEscape and self.vcardEscape(sValue) or sValue
        return arValues

    def findVCards(self, elmRoot, bAgentParsing=0):
        sVCards = ''

        if not bAgentParsing:
            arCards = self.getPropertyValue(elmRoot, 'vcard', bAllowMultiple=1)
        else:
            arCards = [elmRoot]

        for elmCard in arCards:
            arLines = []

            def processSingleString(sProperty):
                sValue = self.getPropertyValue(elmCard, sProperty, self.STRING, bAutoEscape=1).decode(self.encoding)
                if sValue:
                    arLines.append(self.vcardFold(sProperty.upper() + ':' + sValue))
                return sValue or u''

            def processSingleURI(sProperty):
                sValue = self.getPropertyValue(elmCard, sProperty, self.URI)
                if sValue:
                    sContentType = ''
                    sEncoding = ''
                    sValueKey = ''
                    if sValue.startswith('data:'):
                        sEncoding = ';ENCODING=b'
                        sContentType = sValue.split(';')[0].split('/').pop()
                        sValue = sValue.split(',', 1).pop()
                    else:
                        elmValue = self.getPropertyValue(elmCard, sProperty)
                        if elmValue:
                            if sProperty != 'url':
                                sValueKey = ';VALUE=uri'
                            sContentType = elmValue.get('type', '').strip().split('/').pop().strip()
                    sContentType = sContentType.upper()
                    if sContentType == 'OCTET-STREAM':
                        sContentType = ''
                    if sContentType:
                        sContentType = ';TYPE=' + sContentType.upper()
                    arLines.append(self.vcardFold(sProperty.upper() + sEncoding + sContentType + sValueKey + ':' + sValue))

            def processTypeValue(sProperty, arDefaultType, arForceType=None):
                arResults = self.getPropertyValue(elmCard, sProperty, bAllowMultiple=1)
                for elmResult in arResults:
                    arType = self.getPropertyValue(elmResult, 'type', self.STRING, 1, 1)
                    if arForceType:
                        arType = self.unique(arForceType + arType)
                    if not arType:
                        arType = arDefaultType
                    sValue = self.getPropertyValue(elmResult, 'value', self.EMAIL, 0)
                    if sValue:
                        arLines.append(self.vcardFold(sProperty.upper() + ';TYPE=' + ','.join(arType) + ':' + sValue))

            # AGENT
            # must do this before all other properties because it is destructive
            # (removes nested class="vcard" nodes so they don't interfere with
            # this vcard's other properties)
            arAgent = self.getPropertyValue(elmCard, 'agent', bAllowMultiple=1)
            for elmAgent in arAgent:
                if re.compile(r'\bvcard\b').search(elmAgent.get('class')):
                    sAgentValue = self.findVCards(elmAgent, 1) + '\n'
                    sAgentValue = sAgentValue.replace('\n', '\\n')
                    sAgentValue = sAgentValue.replace(';', '\\;')
                    if sAgentValue:
                        arLines.append(self.vcardFold('AGENT:' + sAgentValue))
                    # Completely remove the agent element from the parse tree
                    elmAgent.extract()
                else:
                    sAgentValue = self.getPropertyValue(elmAgent, 'value', self.URI, bAutoEscape=1);
                    if sAgentValue:
                        arLines.append(self.vcardFold('AGENT;VALUE=uri:' + sAgentValue))

            # FN (full name)
            sFN = processSingleString('fn')

            # N (name)
            elmName = self.getPropertyValue(elmCard, 'n')
            if elmName:
                sFamilyName = self.getPropertyValue(elmName, 'family-name', self.STRING, bAutoEscape=1)
                sGivenName = self.getPropertyValue(elmName, 'given-name', self.STRING, bAutoEscape=1)
                arAdditionalNames = self.getPropertyValue(elmName, 'additional-name', self.STRING, 1, 1) + self.getPropertyValue(elmName, 'additional-names', self.STRING, 1, 1)
                arHonorificPrefixes = self.getPropertyValue(elmName, 'honorific-prefix', self.STRING, 1, 1) + self.getPropertyValue(elmName, 'honorific-prefixes', self.STRING, 1, 1)
                arHonorificSuffixes = self.getPropertyValue(elmName, 'honorific-suffix', self.STRING, 1, 1) + self.getPropertyValue(elmName, 'honorific-suffixes', self.STRING, 1, 1)
                arLines.append(self.vcardFold('N:' + sFamilyName + ';' +
                                         sGivenName + ';' +
                                         ','.join(arAdditionalNames) + ';' +
                                         ','.join(arHonorificPrefixes) + ';' +
                                         ','.join(arHonorificSuffixes)))
            elif sFN:
                # implied "N" optimization
                # http://microformats.org/wiki/hcard#Implied_.22N.22_Optimization
                arNames = self.normalize(sFN).split()
                if len(arNames) == 2:
                    bFamilyNameFirst = (arNames[0].endswith(',') or
                                        len(arNames[1]) == 1 or
                                        ((len(arNames[1]) == 2) and (arNames[1].endswith('.'))))
                    if bFamilyNameFirst:
                        arLines.append(self.vcardFold('N:' + arNames[0] + ';' + arNames[1]))
                    else:
                        arLines.append(self.vcardFold('N:' + arNames[1] + ';' + arNames[0]))

            # SORT-STRING
            sSortString = self.getPropertyValue(elmCard, 'sort-string', self.STRING, bAutoEscape=1)
            if sSortString:
                arLines.append(self.vcardFold('SORT-STRING:' + sSortString))

            # NICKNAME
            arNickname = self.getPropertyValue(elmCard, 'nickname', self.STRING, 1, 1)
            if arNickname:
                arLines.append(self.vcardFold('NICKNAME:' + ','.join(arNickname)))

            # PHOTO
            processSingleURI('photo')

            # BDAY
            dtBday = self.getPropertyValue(elmCard, 'bday', self.DATE)
            if dtBday:
                arLines.append(self.vcardFold('BDAY:' + self.toISO8601(dtBday)))

            # ADR (address)
            arAdr = self.getPropertyValue(elmCard, 'adr', bAllowMultiple=1)
            for elmAdr in arAdr:
                arType = self.getPropertyValue(elmAdr, 'type', self.STRING, 1, 1)
                if not arType:
                    arType = ['intl','postal','parcel','work'] # default adr types, see RFC 2426 section 3.2.1
                sPostOfficeBox = self.getPropertyValue(elmAdr, 'post-office-box', self.STRING, 0, 1)
                sExtendedAddress = self.getPropertyValue(elmAdr, 'extended-address', self.STRING, 0, 1)
                sStreetAddress = self.getPropertyValue(elmAdr, 'street-address', self.STRING, 0, 1)
                sLocality = self.getPropertyValue(elmAdr, 'locality', self.STRING, 0, 1)
                sRegion = self.getPropertyValue(elmAdr, 'region', self.STRING, 0, 1)
                sPostalCode = self.getPropertyValue(elmAdr, 'postal-code', self.STRING, 0, 1)
                sCountryName = self.getPropertyValue(elmAdr, 'country-name', self.STRING, 0, 1)
                arLines.append(self.vcardFold('ADR;TYPE=' + ','.join(arType) + ':' +
                                         sPostOfficeBox + ';' +
                                         sExtendedAddress + ';' +
                                         sStreetAddress + ';' +
                                         sLocality + ';' +
                                         sRegion + ';' +
                                         sPostalCode + ';' +
                                         sCountryName))

            # LABEL
            processTypeValue('label', ['intl','postal','parcel','work'])

            # TEL (phone number)
            processTypeValue('tel', ['voice'])

            # EMAIL
            processTypeValue('email', ['internet'], ['internet'])

            # MAILER
            processSingleString('mailer')

            # TZ (timezone)
            processSingleString('tz')

            # GEO (geographical information)
            elmGeo = self.getPropertyValue(elmCard, 'geo')
            if elmGeo:
                sLatitude = self.getPropertyValue(elmGeo, 'latitude', self.STRING, 0, 1)
                sLongitude = self.getPropertyValue(elmGeo, 'longitude', self.STRING, 0, 1)
                arLines.append(self.vcardFold('GEO:' + sLatitude + ';' + sLongitude))

            # TITLE
            processSingleString('title')

            # ROLE
            processSingleString('role')

            # LOGO
            processSingleURI('logo')

            # ORG (organization)
            elmOrg = self.getPropertyValue(elmCard, 'org')
            if elmOrg:
                sOrganizationName = self.getPropertyValue(elmOrg, 'organization-name', self.STRING, 0, 1)
                if not sOrganizationName:
                    # implied "organization-name" optimization
                    # http://microformats.org/wiki/hcard#Implied_.22organization-name.22_Optimization
                    sOrganizationName = self.getPropertyValue(elmCard, 'org', self.STRING, 0, 1)
                    if sOrganizationName:
                        arLines.append(self.vcardFold('ORG:' + sOrganizationName))
                else:
                    arOrganizationUnit = self.getPropertyValue(elmOrg, 'organization-unit', self.STRING, 1, 1)
                    arLines.append(self.vcardFold('ORG:' + sOrganizationName + ';' + ';'.join(arOrganizationUnit)))

            # CATEGORY
            arCategory = self.getPropertyValue(elmCard, 'category', self.STRING, 1, 1) + self.getPropertyValue(elmCard, 'categories', self.STRING, 1, 1)
            if arCategory:
                arLines.append(self.vcardFold('CATEGORIES:' + ','.join(arCategory)))

            # NOTE
            processSingleString('note')

            # REV
            processSingleString('rev')

            # SOUND
            processSingleURI('sound')

            # UID
            processSingleString('uid')

            # URL
            processSingleURI('url')

            # CLASS
            processSingleString('class')

            # KEY
            processSingleURI('key')

            if arLines:
                arLines = [u'BEGIN:vCard',u'VERSION:3.0'] + arLines + [u'END:vCard']
                # XXX - this is super ugly; properly fix this with issue 148
                for i, s in enumerate(arLines):
                    if not isinstance(s, unicode):
                        arLines[i] = s.decode('utf-8', 'ignore')
                sVCards += u'\n'.join(arLines) + u'\n'

        return sVCards.strip()

    def isProbablyDownloadable(self, elm):
        attrsD = elm.attrMap
        if 'href' not in attrsD:
            return 0
        linktype = attrsD.get('type', '').strip()
        if linktype.startswith('audio/') or \
           linktype.startswith('video/') or \
           (linktype.startswith('application/') and not linktype.endswith('xml')):
            return 1
        path = urlparse.urlparse(attrsD['href'])[2]
        if path.find('.') == -1:
            return 0
        fileext = path.split('.').pop().lower()
        return fileext in self.known_binary_extensions

    def findTags(self):
        all = lambda x: 1
        for elm in self.document(all, {'rel': re.compile(r'\btag\b')}):
            href = elm.get('href')
            if not href:
                continue
            urlscheme, domain, path, params, query, fragment = \
                       urlparse.urlparse(_urljoin(self.baseuri, href))
            segments = path.split('/')
            tag = segments.pop()
            if not tag:
                if segments:
                    tag = segments.pop()
                else:
                    # there are no tags
                    continue
            tagscheme = urlparse.urlunparse((urlscheme, domain, '/'.join(segments), '', '', ''))
            if not tagscheme.endswith('/'):
                tagscheme += '/'
            self.tags.append(FeedParserDict({"term": tag, "scheme": tagscheme, "label": elm.string or ''}))

    def findEnclosures(self):
        all = lambda x: 1
        enclosure_match = re.compile(r'\benclosure\b')
        for elm in self.document(all, {'href': re.compile(r'.+')}):
            if not enclosure_match.search(elm.get('rel', u'')) and not self.isProbablyDownloadable(elm):
                continue
            if elm.attrMap not in self.enclosures:
                self.enclosures.append(elm.attrMap)
                if elm.string and not elm.get('title'):
                    self.enclosures[-1]['title'] = elm.string

    def findXFN(self):
        all = lambda x: 1
        for elm in self.document(all, {'rel': re.compile('.+'), 'href': re.compile('.+')}):
            rels = elm.get('rel', u'').split()
            xfn_rels = [r for r in rels if r in self.known_xfn_relationships]
            if xfn_rels:
                self.xfn.append({"relationships": xfn_rels, "href": elm.get('href', ''), "name": elm.string})

def _parseMicroformats(htmlSource, baseURI, encoding):
    if not BeautifulSoup:
        return
    try:
        p = _MicroformatsParser(htmlSource, baseURI, encoding)
    except UnicodeEncodeError:
        # sgmllib throws this exception when performing lookups of tags
        # with non-ASCII characters in them.
        return
    p.vcard = p.findVCards(p.document)
    p.findTags()
    p.findEnclosures()
    p.findXFN()
    return {"tags": p.tags, "enclosures": p.enclosures, "xfn": p.xfn, "vcard": p.vcard}

class _RelativeURIResolver(_BaseHTMLProcessor):
    relative_uris = set([('a', 'href'),
                     ('applet', 'codebase'),
                     ('area', 'href'),
                     ('blockquote', 'cite'),
                     ('body', 'background'),
                     ('del', 'cite'),
                     ('form', 'action'),
                     ('frame', 'longdesc'),
                     ('frame', 'src'),
                     ('iframe', 'longdesc'),
                     ('iframe', 'src'),
                     ('head', 'profile'),
                     ('img', 'longdesc'),
                     ('img', 'src'),
                     ('img', 'usemap'),
                     ('input', 'src'),
                     ('input', 'usemap'),
                     ('ins', 'cite'),
                     ('link', 'href'),
                     ('object', 'classid'),
                     ('object', 'codebase'),
                     ('object', 'data'),
                     ('object', 'usemap'),
                     ('q', 'cite'),
                     ('script', 'src')])

    def __init__(self, baseuri, encoding, _type):
        _BaseHTMLProcessor.__init__(self, encoding, _type)
        self.baseuri = baseuri

    def resolveURI(self, uri):
        return _makeSafeAbsoluteURI(_urljoin(self.baseuri, uri.strip()))

    def unknown_starttag(self, tag, attrs):
        attrs = self.normalize_attrs(attrs)
        attrs = [(key, ((tag, key) in self.relative_uris) and self.resolveURI(value) or value) for key, value in attrs]
        _BaseHTMLProcessor.unknown_starttag(self, tag, attrs)

def _resolveRelativeURIs(htmlSource, baseURI, encoding, _type):
    if not _SGML_AVAILABLE:
        return htmlSource

    p = _RelativeURIResolver(baseURI, encoding, _type)
    p.feed(htmlSource)
    return p.output()

def _makeSafeAbsoluteURI(base, rel=None):
    # bail if ACCEPTABLE_URI_SCHEMES is empty
    if not ACCEPTABLE_URI_SCHEMES:
        return _urljoin(base, rel or u'')
    if not base:
        return rel or u''
    if not rel:
        scheme = urlparse.urlparse(base)[0]
        if not scheme or scheme in ACCEPTABLE_URI_SCHEMES:
            return base
        return u''
    uri = _urljoin(base, rel)
    if uri.strip().split(':', 1)[0] not in ACCEPTABLE_URI_SCHEMES:
        return u''
    return uri

class _HTMLSanitizer(_BaseHTMLProcessor):
    acceptable_elements = set(['a', 'abbr', 'acronym', 'address', 'area',
        'article', 'aside', 'audio', 'b', 'big', 'blockquote', 'br', 'button',
        'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup',
        'command', 'datagrid', 'datalist', 'dd', 'del', 'details', 'dfn',
        'dialog', 'dir', 'div', 'dl', 'dt', 'em', 'event-source', 'fieldset',
        'figcaption', 'figure', 'footer', 'font', 'form', 'header', 'h1',
        'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'input', 'ins',
        'keygen', 'kbd', 'label', 'legend', 'li', 'm', 'map', 'menu', 'meter',
        'multicol', 'nav', 'nextid', 'ol', 'output', 'optgroup', 'option',
        'p', 'pre', 'progress', 'q', 's', 'samp', 'section', 'select',
        'small', 'sound', 'source', 'spacer', 'span', 'strike', 'strong',
        'sub', 'sup', 'table', 'tbody', 'td', 'textarea', 'time', 'tfoot',
        'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'video', 'noscript'])

    acceptable_attributes = set(['abbr', 'accept', 'accept-charset', 'accesskey',
      'action', 'align', 'alt', 'autocomplete', 'autofocus', 'axis',
      'background', 'balance', 'bgcolor', 'bgproperties', 'border',
      'bordercolor', 'bordercolordark', 'bordercolorlight', 'bottompadding',
      'cellpadding', 'cellspacing', 'ch', 'challenge', 'char', 'charoff',
      'choff', 'charset', 'checked', 'cite', 'class', 'clear', 'color', 'cols',
      'colspan', 'compact', 'contenteditable', 'controls', 'coords', 'data',
      'datafld', 'datapagesize', 'datasrc', 'datetime', 'default', 'delay',
      'dir', 'disabled', 'draggable', 'dynsrc', 'enctype', 'end', 'face', 'for',
      'form', 'frame', 'galleryimg', 'gutter', 'headers', 'height', 'hidefocus',
      'hidden', 'high', 'href', 'hreflang', 'hspace', 'icon', 'id', 'inputmode',
      'ismap', 'keytype', 'label', 'leftspacing', 'lang', 'list', 'longdesc',
      'loop', 'loopcount', 'loopend', 'loopstart', 'low', 'lowsrc', 'max',
      'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'nohref',
      'noshade', 'nowrap', 'open', 'optimum', 'pattern', 'ping', 'point-size',
      'prompt', 'pqg', 'radiogroup', 'readonly', 'rel', 'repeat-max',
      'repeat-min', 'replace', 'required', 'rev', 'rightspacing', 'rows',
      'rowspan', 'rules', 'scope', 'selected', 'shape', 'size', 'span', 'src',
      'start', 'step', 'summary', 'suppress', 'tabindex', 'target', 'template',
      'title', 'toppadding', 'type', 'unselectable', 'usemap', 'urn', 'valign',
      'value', 'variable', 'volume', 'vspace', 'vrml', 'width', 'wrap',
      'xml:lang'])

    unacceptable_elements_with_end_tag = set(['script', 'applet', 'style'])

    acceptable_css_properties = set(['azimuth', 'background-color',
      'border-bottom-color', 'border-collapse', 'border-color',
      'border-left-color', 'border-right-color', 'border-top-color', 'clear',
      'color', 'cursor', 'direction', 'display', 'elevation', 'float', 'font',
      'font-family', 'font-size', 'font-style', 'font-variant', 'font-weight',
      'height', 'letter-spacing', 'line-height', 'overflow', 'pause',
      'pause-after', 'pause-before', 'pitch', 'pitch-range', 'richness',
      'speak', 'speak-header', 'speak-numeral', 'speak-punctuation',
      'speech-rate', 'stress', 'text-align', 'text-decoration', 'text-indent',
      'unicode-bidi', 'vertical-align', 'voice-family', 'volume',
      'white-space', 'width'])

    # survey of common keywords found in feeds
    acceptable_css_keywords = set(['auto', 'aqua', 'black', 'block', 'blue',
      'bold', 'both', 'bottom', 'brown', 'center', 'collapse', 'dashed',
      'dotted', 'fuchsia', 'gray', 'green', '!important', 'italic', 'left',
      'lime', 'maroon', 'medium', 'none', 'navy', 'normal', 'nowrap', 'olive',
      'pointer', 'purple', 'red', 'right', 'solid', 'silver', 'teal', 'top',
      'transparent', 'underline', 'white', 'yellow'])

    valid_css_values = re.compile('^(#[0-9a-f]+|rgb\(\d+%?,\d*%?,?\d*%?\)?|' +
      '\d{0,2}\.?\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\))?)$')

    mathml_elements = set(['annotation', 'annotation-xml', 'maction', 'math',
      'merror', 'mfenced', 'mfrac', 'mi', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded',
      'mphantom', 'mprescripts', 'mroot', 'mrow', 'mspace', 'msqrt', 'mstyle',
      'msub', 'msubsup', 'msup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder',
      'munderover', 'none', 'semantics'])

    mathml_attributes = set(['actiontype', 'align', 'columnalign', 'columnalign',
      'columnalign', 'close', 'columnlines', 'columnspacing', 'columnspan', 'depth',
      'display', 'displaystyle', 'encoding', 'equalcolumns', 'equalrows',
      'fence', 'fontstyle', 'fontweight', 'frame', 'height', 'linethickness',
      'lspace', 'mathbackground', 'mathcolor', 'mathvariant', 'mathvariant',
      'maxsize', 'minsize', 'open', 'other', 'rowalign', 'rowalign', 'rowalign',
      'rowlines', 'rowspacing', 'rowspan', 'rspace', 'scriptlevel', 'selection',
      'separator', 'separators', 'stretchy', 'width', 'width', 'xlink:href',
      'xlink:show', 'xlink:type', 'xmlns', 'xmlns:xlink'])

    # svgtiny - foreignObject + linearGradient + radialGradient + stop
    svg_elements = set(['a', 'animate', 'animateColor', 'animateMotion',
      'animateTransform', 'circle', 'defs', 'desc', 'ellipse', 'foreignObject',
      'font-face', 'font-face-name', 'font-face-src', 'g', 'glyph', 'hkern',
      'linearGradient', 'line', 'marker', 'metadata', 'missing-glyph', 'mpath',
      'path', 'polygon', 'polyline', 'radialGradient', 'rect', 'set', 'stop',
      'svg', 'switch', 'text', 'title', 'tspan', 'use'])

    # svgtiny + class + opacity + offset + xmlns + xmlns:xlink
    svg_attributes = set(['accent-height', 'accumulate', 'additive', 'alphabetic',
       'arabic-form', 'ascent', 'attributeName', 'attributeType',
       'baseProfile', 'bbox', 'begin', 'by', 'calcMode', 'cap-height',
       'class', 'color', 'color-rendering', 'content', 'cx', 'cy', 'd', 'dx',
       'dy', 'descent', 'display', 'dur', 'end', 'fill', 'fill-opacity',
       'fill-rule', 'font-family', 'font-size', 'font-stretch', 'font-style',
       'font-variant', 'font-weight', 'from', 'fx', 'fy', 'g1', 'g2',
       'glyph-name', 'gradientUnits', 'hanging', 'height', 'horiz-adv-x',
       'horiz-origin-x', 'id', 'ideographic', 'k', 'keyPoints', 'keySplines',
       'keyTimes', 'lang', 'mathematical', 'marker-end', 'marker-mid',
       'marker-start', 'markerHeight', 'markerUnits', 'markerWidth', 'max',
       'min', 'name', 'offset', 'opacity', 'orient', 'origin',
       'overline-position', 'overline-thickness', 'panose-1', 'path',
       'pathLength', 'points', 'preserveAspectRatio', 'r', 'refX', 'refY',
       'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures',
       'restart', 'rotate', 'rx', 'ry', 'slope', 'stemh', 'stemv',
       'stop-color', 'stop-opacity', 'strikethrough-position',
       'strikethrough-thickness', 'stroke', 'stroke-dasharray',
       'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin',
       'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'systemLanguage',
       'target', 'text-anchor', 'to', 'transform', 'type', 'u1', 'u2',
       'underline-position', 'underline-thickness', 'unicode', 'unicode-range',
       'units-per-em', 'values', 'version', 'viewBox', 'visibility', 'width',
       'widths', 'x', 'x-height', 'x1', 'x2', 'xlink:actuate', 'xlink:arcrole',
       'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type',
       'xml:base', 'xml:lang', 'xml:space', 'xmlns', 'xmlns:xlink', 'y', 'y1',
       'y2', 'zoomAndPan'])

    svg_attr_map = None
    svg_elem_map = None

    acceptable_svg_properties = set([ 'fill', 'fill-opacity', 'fill-rule',
      'stroke', 'stroke-width', 'stroke-linecap', 'stroke-linejoin',
      'stroke-opacity'])

    def reset(self):
        _BaseHTMLProcessor.reset(self)
        self.unacceptablestack = 0
        self.mathmlOK = 0
        self.svgOK = 0

    def unknown_starttag(self, tag, attrs):
        acceptable_attributes = self.acceptable_attributes
        keymap = {}
        if not tag in self.acceptable_elements or self.svgOK:
            if tag in self.unacceptable_elements_with_end_tag:
                self.unacceptablestack += 1

            # add implicit namespaces to html5 inline svg/mathml
            if self._type.endswith('html'):
                if not dict(attrs).get('xmlns'):
                    if tag=='svg':
                        attrs.append( ('xmlns','http://www.w3.org/2000/svg') )
                    if tag=='math':
                        attrs.append( ('xmlns','http://www.w3.org/1998/Math/MathML') )

            # not otherwise acceptable, perhaps it is MathML or SVG?
            if tag=='math' and ('xmlns','http://www.w3.org/1998/Math/MathML') in attrs:
                self.mathmlOK += 1
            if tag=='svg' and ('xmlns','http://www.w3.org/2000/svg') in attrs:
                self.svgOK += 1

            # chose acceptable attributes based on tag class, else bail
            if  self.mathmlOK and tag in self.mathml_elements:
                acceptable_attributes = self.mathml_attributes
            elif self.svgOK and tag in self.svg_elements:
                # for most vocabularies, lowercasing is a good idea.  Many
                # svg elements, however, are camel case
                if not self.svg_attr_map:
                    lower=[attr.lower() for attr in self.svg_attributes]
                    mix=[a for a in self.svg_attributes if a not in lower]
                    self.svg_attributes = lower
                    self.svg_attr_map = dict([(a.lower(),a) for a in mix])

                    lower=[attr.lower() for attr in self.svg_elements]
                    mix=[a for a in self.svg_elements if a not in lower]
                    self.svg_elements = lower
                    self.svg_elem_map = dict([(a.lower(),a) for a in mix])
                acceptable_attributes = self.svg_attributes
                tag = self.svg_elem_map.get(tag,tag)
                keymap = self.svg_attr_map
            elif not tag in self.acceptable_elements:
                return

        # declare xlink namespace, if needed
        if self.mathmlOK or self.svgOK:
            if filter(lambda (n,v): n.startswith('xlink:'),attrs):
                if not ('xmlns:xlink','http://www.w3.org/1999/xlink') in attrs:
                    attrs.append(('xmlns:xlink','http://www.w3.org/1999/xlink'))

        clean_attrs = []
        for key, value in self.normalize_attrs(attrs):
            if key in acceptable_attributes:
                key=keymap.get(key,key)
                # make sure the uri uses an acceptable uri scheme
                if key == u'href':
                    value = _makeSafeAbsoluteURI(value)
                clean_attrs.append((key,value))
            elif key=='style':
                clean_value = self.sanitize_style(value)
                if clean_value:
                    clean_attrs.append((key,clean_value))
        _BaseHTMLProcessor.unknown_starttag(self, tag, clean_attrs)

    def unknown_endtag(self, tag):
        if not tag in self.acceptable_elements:
            if tag in self.unacceptable_elements_with_end_tag:
                self.unacceptablestack -= 1
            if self.mathmlOK and tag in self.mathml_elements:
                if tag == 'math' and self.mathmlOK:
                    self.mathmlOK -= 1
            elif self.svgOK and tag in self.svg_elements:
                tag = self.svg_elem_map.get(tag,tag)
                if tag == 'svg' and self.svgOK:
                    self.svgOK -= 1
            else:
                return
        _BaseHTMLProcessor.unknown_endtag(self, tag)

    def handle_pi(self, text):
        pass

    def handle_decl(self, text):
        pass

    def handle_data(self, text):
        if not self.unacceptablestack:
            _BaseHTMLProcessor.handle_data(self, text)

    def sanitize_style(self, style):
        # disallow urls
        style=re.compile('url\s*\(\s*[^\s)]+?\s*\)\s*').sub(' ',style)

        # gauntlet
        if not re.match("""^([:,;#%.\sa-zA-Z0-9!]|\w-\w|'[\s\w]+'|"[\s\w]+"|\([\d,\s]+\))*$""", style):
            return ''
        # This replaced a regexp that used re.match and was prone to pathological back-tracking.
        if re.sub("\s*[-\w]+\s*:\s*[^:;]*;?", '', style).strip():
            return ''

        clean = []
        for prop,value in re.findall("([-\w]+)\s*:\s*([^:;]*)",style):
            if not value:
                continue
            if prop.lower() in self.acceptable_css_properties:
                clean.append(prop + ': ' + value + ';')
            elif prop.split('-')[0].lower() in ['background','border','margin','padding']:
                for keyword in value.split():
                    if not keyword in self.acceptable_css_keywords and \
                        not self.valid_css_values.match(keyword):
                        break
                else:
                    clean.append(prop + ': ' + value + ';')
            elif self.svgOK and prop.lower() in self.acceptable_svg_properties:
                clean.append(prop + ': ' + value + ';')

        return ' '.join(clean)

    def parse_comment(self, i, report=1):
        ret = _BaseHTMLProcessor.parse_comment(self, i, report)
        if ret >= 0:
            return ret
        # if ret == -1, this may be a malicious attempt to circumvent
        # sanitization, or a page-destroying unclosed comment
        match = re.compile(r'--[^>]*>').search(self.rawdata, i+4)
        if match:
            return match.end()
        # unclosed comment; deliberately fail to handle_data()
        return len(self.rawdata)


def _sanitizeHTML(htmlSource, encoding, _type):
    if not _SGML_AVAILABLE:
        return htmlSource
    p = _HTMLSanitizer(encoding, _type)
    htmlSource = htmlSource.replace('<![CDATA[', '&lt;![CDATA[')
    p.feed(htmlSource)
    data = p.output()
    if TIDY_MARKUP:
        # loop through list of preferred Tidy interfaces looking for one that's installed,
        # then set up a common _tidy function to wrap the interface-specific API.
        _tidy = None
        for tidy_interface in PREFERRED_TIDY_INTERFACES:
            try:
                if tidy_interface == "uTidy":
                    from tidy import parseString as _utidy
                    def _tidy(data, **kwargs):
                        return str(_utidy(data, **kwargs))
                    break
                elif tidy_interface == "mxTidy":
                    from mx.Tidy import Tidy as _mxtidy
                    def _tidy(data, **kwargs):
                        nerrors, nwarnings, data, errordata = _mxtidy.tidy(data, **kwargs)
                        return data
                    break
            except:
                pass
        if _tidy:
            utf8 = isinstance(data, unicode)
            if utf8:
                data = data.encode('utf-8')
            data = _tidy(data, output_xhtml=1, numeric_entities=1, wrap=0, char_encoding="utf8")
            if utf8:
                data = unicode(data, 'utf-8')
            if data.count('<body'):
                data = data.split('<body', 1)[1]
                if data.count('>'):
                    data = data.split('>', 1)[1]
            if data.count('</body'):
                data = data.split('</body', 1)[0]
    data = data.strip().replace('\r\n', '\n')
    return data

class _FeedURLHandler(urllib2.HTTPDigestAuthHandler, urllib2.HTTPRedirectHandler, urllib2.HTTPDefaultErrorHandler):
    def http_error_default(self, req, fp, code, msg, headers):
        # The default implementation just raises HTTPError.
        # Forget that.
        fp.status = code
        return fp

    def http_error_301(self, req, fp, code, msg, hdrs):
        result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp,
                                                            code, msg, hdrs)
        result.status = code
        result.newurl = result.geturl()
        return result
    # The default implementations in urllib2.HTTPRedirectHandler
    # are identical, so hardcoding a http_error_301 call above
    # won't affect anything
    http_error_300 = http_error_301
    http_error_302 = http_error_301
    http_error_303 = http_error_301
    http_error_307 = http_error_301

    def http_error_401(self, req, fp, code, msg, headers):
        # Check if
        # - server requires digest auth, AND
        # - we tried (unsuccessfully) with basic auth, AND
        # If all conditions hold, parse authentication information
        # out of the Authorization header we sent the first time
        # (for the username and password) and the WWW-Authenticate
        # header the server sent back (for the realm) and retry
        # the request with the appropriate digest auth headers instead.
        # This evil genius hack has been brought to you by Aaron Swartz.
        host = urlparse.urlparse(req.get_full_url())[1]
        if base64 is None or 'Authorization' not in req.headers \
                          or 'WWW-Authenticate' not in headers:
            return self.http_error_default(req, fp, code, msg, headers)
        auth = _base64decode(req.headers['Authorization'].split(' ')[1])
        user, passw = auth.split(':')
        realm = re.findall('realm="([^"]*)"', headers['WWW-Authenticate'])[0]
        self.add_password(realm, host, user, passw)
        retry = self.http_error_auth_reqed('www-authenticate', host, req, headers)
        self.reset_retry_count()
        return retry

def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):
    """URL, filename, or string --> stream

    This function lets you define parsers that take any input source
    (URL, pathname to local or network file, or actual data as a string)
    and deal with it in a uniform manner.  Returned object is guaranteed
    to have all the basic stdio read methods (read, readline, readlines).
    Just .close() the object when you're done with it.

    If the etag argument is supplied, it will be used as the value of an
    If-None-Match request header.

    If the modified argument is supplied, it can be a tuple of 9 integers
    (as returned by gmtime() in the standard Python time module) or a date
    string in any format supported by feedparser. Regardless, it MUST
    be in GMT (Greenwich Mean Time). It will be reformatted into an
    RFC 1123-compliant date and used as the value of an If-Modified-Since
    request header.

    If the agent argument is supplied, it will be used as the value of a
    User-Agent request header.

    If the referrer argument is supplied, it will be used as the value of a
    Referer[sic] request header.

    If handlers is supplied, it is a list of handlers used to build a
    urllib2 opener.

    if request_headers is supplied it is a dictionary of HTTP request headers
    that will override the values generated by FeedParser.
    """

    if hasattr(url_file_stream_or_string, 'read'):
        return url_file_stream_or_string

    if isinstance(url_file_stream_or_string, basestring) \
       and urlparse.urlparse(url_file_stream_or_string)[0] in ('http', 'https', 'ftp', 'file', 'feed'):
        # Deal with the feed URI scheme
        if url_file_stream_or_string.startswith('feed:http'):
            url_file_stream_or_string = url_file_stream_or_string[5:]
        elif url_file_stream_or_string.startswith('feed:'):
            url_file_stream_or_string = 'http:' + url_file_stream_or_string[5:]
        if not agent:
            agent = USER_AGENT
        # test for inline user:password for basic auth
        auth = None
        if base64:
            urltype, rest = urllib.splittype(url_file_stream_or_string)
            realhost, rest = urllib.splithost(rest)
            if realhost:
                user_passwd, realhost = urllib.splituser(realhost)
                if user_passwd:
                    url_file_stream_or_string = '%s://%s%s' % (urltype, realhost, rest)
                    auth = base64.standard_b64encode(user_passwd).strip()

        # iri support
        if isinstance(url_file_stream_or_string, unicode):
            url_file_stream_or_string = _convert_to_idn(url_file_stream_or_string)

        # try to open with urllib2 (to use optional headers)
        request = _build_urllib2_request(url_file_stream_or_string, agent, etag, modified, referrer, auth, request_headers)
        opener = urllib2.build_opener(*tuple(handlers + [_FeedURLHandler()]))
        opener.addheaders = [] # RMK - must clear so we only send our custom User-Agent
        try:
            return opener.open(request)
        finally:
            opener.close() # JohnD

    # try to open with native open function (if url_file_stream_or_string is a filename)
    try:
        return open(url_file_stream_or_string, 'rb')
    except IOError:
        pass

    # treat url_file_stream_or_string as string
    if isinstance(url_file_stream_or_string, unicode):
        return _StringIO(url_file_stream_or_string.encode('utf-8'))
    return _StringIO(url_file_stream_or_string)

def _convert_to_idn(url):
    """Convert a URL to IDN notation"""
    # this function should only be called with a unicode string
    # strategy: if the host cannot be encoded in ascii, then
    # it'll be necessary to encode it in idn form
    parts = list(urlparse.urlsplit(url))
    try:
        parts[1].encode('ascii')
    except UnicodeEncodeError:
        # the url needs to be converted to idn notation
        host = parts[1].rsplit(':', 1)
        newhost = []
        port = u''
        if len(host) == 2:
            port = host.pop()
        for h in host[0].split('.'):
            newhost.append(h.encode('idna').decode('utf-8'))
        parts[1] = '.'.join(newhost)
        if port:
            parts[1] += ':' + port
        return urlparse.urlunsplit(parts)
    else:
        return url

def _build_urllib2_request(url, agent, etag, modified, referrer, auth, request_headers):
    request = urllib2.Request(url)
    request.add_header('User-Agent', agent)
    if etag:
        request.add_header('If-None-Match', etag)
    if isinstance(modified, basestring):
        modified = _parse_date(modified)
    elif isinstance(modified, datetime.datetime):
        modified = modified.utctimetuple()
    if modified:
        # format into an RFC 1123-compliant timestamp. We can't use
        # time.strftime() since the %a and %b directives can be affected
        # by the current locale, but RFC 2616 states that dates must be
        # in English.
        short_weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        request.add_header('If-Modified-Since', '%s, %02d %s %04d %02d:%02d:%02d GMT' % (short_weekdays[modified[6]], modified[2], months[modified[1] - 1], modified[0], modified[3], modified[4], modified[5]))
    if referrer:
        request.add_header('Referer', referrer)
    if gzip and zlib:
        request.add_header('Accept-encoding', 'gzip, deflate')
    elif gzip:
        request.add_header('Accept-encoding', 'gzip')
    elif zlib:
        request.add_header('Accept-encoding', 'deflate')
    else:
        request.add_header('Accept-encoding', '')
    if auth:
        request.add_header('Authorization', 'Basic %s' % auth)
    if ACCEPT_HEADER:
        request.add_header('Accept', ACCEPT_HEADER)
    # use this for whatever -- cookies, special headers, etc
    # [('Cookie','Something'),('x-special-header','Another Value')]
    for header_name, header_value in request_headers.items():
        request.add_header(header_name, header_value)
    request.add_header('A-IM', 'feed') # RFC 3229 support
    return request

_date_handlers = []
def registerDateHandler(func):
    '''Register a date handler function (takes string, returns 9-tuple date in GMT)'''
    _date_handlers.insert(0, func)

# ISO-8601 date parsing routines written by Fazal Majid.
# The ISO 8601 standard is very convoluted and irregular - a full ISO 8601
# parser is beyond the scope of feedparser and would be a worthwhile addition
# to the Python library.
# A single regular expression cannot parse ISO 8601 date formats into groups
# as the standard is highly irregular (for instance is 030104 2003-01-04 or
# 0301-04-01), so we use templates instead.
# Please note the order in templates is significant because we need a
# greedy match.
_iso8601_tmpl = ['YYYY-?MM-?DD', 'YYYY-0MM?-?DD', 'YYYY-MM', 'YYYY-?OOO',
                'YY-?MM-?DD', 'YY-?OOO', 'YYYY',
                '-YY-?MM', '-OOO', '-YY',
                '--MM-?DD', '--MM',
                '---DD',
                'CC', '']
_iso8601_re = [
    tmpl.replace(
    'YYYY', r'(?P<year>\d{4})').replace(
    'YY', r'(?P<year>\d\d)').replace(
    'MM', r'(?P<month>[01]\d)').replace(
    'DD', r'(?P<day>[0123]\d)').replace(
    'OOO', r'(?P<ordinal>[0123]\d\d)').replace(
    'CC', r'(?P<century>\d\d$)')
    + r'(T?(?P<hour>\d{2}):(?P<minute>\d{2})'
    + r'(:(?P<second>\d{2}))?'
    + r'(\.(?P<fracsecond>\d+))?'
    + r'(?P<tz>[+-](?P<tzhour>\d{2})(:(?P<tzmin>\d{2}))?|Z)?)?'
    for tmpl in _iso8601_tmpl]
try:
    del tmpl
except NameError:
    pass
_iso8601_matches = [re.compile(regex).match for regex in _iso8601_re]
try:
    del regex
except NameError:
    pass
def _parse_date_iso8601(dateString):
    '''Parse a variety of ISO-8601-compatible formats like 20040105'''
    m = None
    for _iso8601_match in _iso8601_matches:
        m = _iso8601_match(dateString)
        if m:
            break
    if not m:
        return
    if m.span() == (0, 0):
        return
    params = m.groupdict()
    ordinal = params.get('ordinal', 0)
    if ordinal:
        ordinal = int(ordinal)
    else:
        ordinal = 0
    year = params.get('year', '--')
    if not year or year == '--':
        year = time.gmtime()[0]
    elif len(year) == 2:
        # ISO 8601 assumes current century, i.e. 93 -> 2093, NOT 1993
        year = 100 * int(time.gmtime()[0] / 100) + int(year)
    else:
        year = int(year)
    month = params.get('month', '-')
    if not month or month == '-':
        # ordinals are NOT normalized by mktime, we simulate them
        # by setting month=1, day=ordinal
        if ordinal:
            month = 1
        else:
            month = time.gmtime()[1]
    month = int(month)
    day = params.get('day', 0)
    if not day:
        # see above
        if ordinal:
            day = ordinal
        elif params.get('century', 0) or \
                 params.get('year', 0) or params.get('month', 0):
            day = 1
        else:
            day = time.gmtime()[2]
    else:
        day = int(day)
    # special case of the century - is the first year of the 21st century
    # 2000 or 2001 ? The debate goes on...
    if 'century' in params:
        year = (int(params['century']) - 1) * 100 + 1
    # in ISO 8601 most fields are optional
    for field in ['hour', 'minute', 'second', 'tzhour', 'tzmin']:
        if not params.get(field, None):
            params[field] = 0
    hour = int(params.get('hour', 0))
    minute = int(params.get('minute', 0))
    second = int(float(params.get('second', 0)))
    # weekday is normalized by mktime(), we can ignore it
    weekday = 0
    daylight_savings_flag = -1
    tm = [year, month, day, hour, minute, second, weekday,
          ordinal, daylight_savings_flag]
    # ISO 8601 time zone adjustments
    tz = params.get('tz')
    if tz and tz != 'Z':
        if tz[0] == '-':
            tm[3] += int(params.get('tzhour', 0))
            tm[4] += int(params.get('tzmin', 0))
        elif tz[0] == '+':
            tm[3] -= int(params.get('tzhour', 0))
            tm[4] -= int(params.get('tzmin', 0))
        else:
            return None
    # Python's time.mktime() is a wrapper around the ANSI C mktime(3c)
    # which is guaranteed to normalize d/m/y/h/m/s.
    # Many implementations have bugs, but we'll pretend they don't.
    return time.localtime(time.mktime(tuple(tm)))
registerDateHandler(_parse_date_iso8601)

# 8-bit date handling routines written by ytrewq1.
_korean_year  = u'\ub144' # b3e2 in euc-kr
_korean_month = u'\uc6d4' # bff9 in euc-kr
_korean_day   = u'\uc77c' # c0cf in euc-kr
_korean_am    = u'\uc624\uc804' # bfc0 c0fc in euc-kr
_korean_pm    = u'\uc624\ud6c4' # bfc0 c8c4 in euc-kr

_korean_onblog_date_re = \
    re.compile('(\d{4})%s\s+(\d{2})%s\s+(\d{2})%s\s+(\d{2}):(\d{2}):(\d{2})' % \
               (_korean_year, _korean_month, _korean_day))
_korean_nate_date_re = \
    re.compile(u'(\d{4})-(\d{2})-(\d{2})\s+(%s|%s)\s+(\d{,2}):(\d{,2}):(\d{,2})' % \
               (_korean_am, _korean_pm))
def _parse_date_onblog(dateString):
    '''Parse a string according to the OnBlog 8-bit date format'''
    m = _korean_onblog_date_re.match(dateString)
    if not m:
        return
    w3dtfdate = '%(year)s-%(month)s-%(day)sT%(hour)s:%(minute)s:%(second)s%(zonediff)s' % \
                {'year': m.group(1), 'month': m.group(2), 'day': m.group(3),\
                 'hour': m.group(4), 'minute': m.group(5), 'second': m.group(6),\
                 'zonediff': '+09:00'}
    return _parse_date_w3dtf(w3dtfdate)
registerDateHandler(_parse_date_onblog)

def _parse_date_nate(dateString):
    '''Parse a string according to the Nate 8-bit date format'''
    m = _korean_nate_date_re.match(dateString)
    if not m:
        return
    hour = int(m.group(5))
    ampm = m.group(4)
    if (ampm == _korean_pm):
        hour += 12
    hour = str(hour)
    if len(hour) == 1:
        hour = '0' + hour
    w3dtfdate = '%(year)s-%(month)s-%(day)sT%(hour)s:%(minute)s:%(second)s%(zonediff)s' % \
                {'year': m.group(1), 'month': m.group(2), 'day': m.group(3),\
                 'hour': hour, 'minute': m.group(6), 'second': m.group(7),\
                 'zonediff': '+09:00'}
    return _parse_date_w3dtf(w3dtfdate)
registerDateHandler(_parse_date_nate)

# Unicode strings for Greek date strings
_greek_months = \
  { \
   u'\u0399\u03b1\u03bd': u'Jan',       # c9e1ed in iso-8859-7
   u'\u03a6\u03b5\u03b2': u'Feb',       # d6e5e2 in iso-8859-7
   u'\u039c\u03ac\u03ce': u'Mar',       # ccdcfe in iso-8859-7
   u'\u039c\u03b1\u03ce': u'Mar',       # cce1fe in iso-8859-7
   u'\u0391\u03c0\u03c1': u'Apr',       # c1f0f1 in iso-8859-7
   u'\u039c\u03ac\u03b9': u'May',       # ccdce9 in iso-8859-7
   u'\u039c\u03b1\u03ca': u'May',       # cce1fa in iso-8859-7
   u'\u039c\u03b1\u03b9': u'May',       # cce1e9 in iso-8859-7
   u'\u0399\u03bf\u03cd\u03bd': u'Jun', # c9effded in iso-8859-7
   u'\u0399\u03bf\u03bd': u'Jun',       # c9efed in iso-8859-7
   u'\u0399\u03bf\u03cd\u03bb': u'Jul', # c9effdeb in iso-8859-7
   u'\u0399\u03bf\u03bb': u'Jul',       # c9f9eb in iso-8859-7
   u'\u0391\u03cd\u03b3': u'Aug',       # c1fde3 in iso-8859-7
   u'\u0391\u03c5\u03b3': u'Aug',       # c1f5e3 in iso-8859-7
   u'\u03a3\u03b5\u03c0': u'Sep',       # d3e5f0 in iso-8859-7
   u'\u039f\u03ba\u03c4': u'Oct',       # cfeaf4 in iso-8859-7
   u'\u039d\u03bf\u03ad': u'Nov',       # cdefdd in iso-8859-7
   u'\u039d\u03bf\u03b5': u'Nov',       # cdefe5 in iso-8859-7
   u'\u0394\u03b5\u03ba': u'Dec',       # c4e5ea in iso-8859-7
  }

_greek_wdays = \
  { \
   u'\u039a\u03c5\u03c1': u'Sun', # caf5f1 in iso-8859-7
   u'\u0394\u03b5\u03c5': u'Mon', # c4e5f5 in iso-8859-7
   u'\u03a4\u03c1\u03b9': u'Tue', # d4f1e9 in iso-8859-7
   u'\u03a4\u03b5\u03c4': u'Wed', # d4e5f4 in iso-8859-7
   u'\u03a0\u03b5\u03bc': u'Thu', # d0e5ec in iso-8859-7
   u'\u03a0\u03b1\u03c1': u'Fri', # d0e1f1 in iso-8859-7
   u'\u03a3\u03b1\u03b2': u'Sat', # d3e1e2 in iso-8859-7
  }

_greek_date_format_re = \
    re.compile(u'([^,]+),\s+(\d{2})\s+([^\s]+)\s+(\d{4})\s+(\d{2}):(\d{2}):(\d{2})\s+([^\s]+)')

def _parse_date_greek(dateString):
    '''Parse a string according to a Greek 8-bit date format.'''
    m = _greek_date_format_re.match(dateString)
    if not m:
        return
    wday = _greek_wdays[m.group(1)]
    month = _greek_months[m.group(3)]
    rfc822date = '%(wday)s, %(day)s %(month)s %(year)s %(hour)s:%(minute)s:%(second)s %(zonediff)s' % \
                 {'wday': wday, 'day': m.group(2), 'month': month, 'year': m.group(4),\
                  'hour': m.group(5), 'minute': m.group(6), 'second': m.group(7),\
                  'zonediff': m.group(8)}
    return _parse_date_rfc822(rfc822date)
registerDateHandler(_parse_date_greek)

# Unicode strings for Hungarian date strings
_hungarian_months = \
  { \
    u'janu\u00e1r':   u'01',  # e1 in iso-8859-2
    u'febru\u00e1ri': u'02',  # e1 in iso-8859-2
    u'm\u00e1rcius':  u'03',  # e1 in iso-8859-2
    u'\u00e1prilis':  u'04',  # e1 in iso-8859-2
    u'm\u00e1ujus':   u'05',  # e1 in iso-8859-2
    u'j\u00fanius':   u'06',  # fa in iso-8859-2
    u'j\u00falius':   u'07',  # fa in iso-8859-2
    u'augusztus':     u'08',
    u'szeptember':    u'09',
    u'okt\u00f3ber':  u'10',  # f3 in iso-8859-2
    u'november':      u'11',
    u'december':      u'12',
  }

_hungarian_date_format_re = \
  re.compile(u'(\d{4})-([^-]+)-(\d{,2})T(\d{,2}):(\d{2})((\+|-)(\d{,2}:\d{2}))')

def _parse_date_hungarian(dateString):
    '''Parse a string according to a Hungarian 8-bit date format.'''
    m = _hungarian_date_format_re.match(dateString)
    if not m or m.group(2) not in _hungarian_months:
        return None
    month = _hungarian_months[m.group(2)]
    day = m.group(3)
    if len(day) == 1:
        day = '0' + day
    hour = m.group(4)
    if len(hour) == 1:
        hour = '0' + hour
    w3dtfdate = '%(year)s-%(month)s-%(day)sT%(hour)s:%(minute)s%(zonediff)s' % \
                {'year': m.group(1), 'month': month, 'day': day,\
                 'hour': hour, 'minute': m.group(5),\
                 'zonediff': m.group(6)}
    return _parse_date_w3dtf(w3dtfdate)
registerDateHandler(_parse_date_hungarian)

# W3DTF-style date parsing adapted from PyXML xml.utils.iso8601, written by
# Drake and licensed under the Python license.  Removed all range checking
# for month, day, hour, minute, and second, since mktime will normalize
# these later
# Modified to also support MSSQL-style datetimes as defined at:
# http://msdn.microsoft.com/en-us/library/ms186724.aspx
# (which basically means allowing a space as a date/time/timezone separator)
def _parse_date_w3dtf(dateString):
    def __extract_date(m):
        year = int(m.group('year'))
        if year < 100:
            year = 100 * int(time.gmtime()[0] / 100) + int(year)
        if year < 1000:
            return 0, 0, 0
        julian = m.group('julian')
        if julian:
            julian = int(julian)
            month = julian / 30 + 1
            day = julian % 30 + 1
            jday = None
            while jday != julian:
                t = time.mktime((year, month, day, 0, 0, 0, 0, 0, 0))
                jday = time.gmtime(t)[-2]
                diff = abs(jday - julian)
                if jday > julian:
                    if diff < day:
                        day = day - diff
                    else:
                        month = month - 1
                        day = 31
                elif jday < julian:
                    if day + diff < 28:
                       day = day + diff
                    else:
                        month = month + 1
            return year, month, day
        month = m.group('month')
        day = 1
        if month is None:
            month = 1
        else:
            month = int(month)
            day = m.group('day')
            if day:
                day = int(day)
            else:
                day = 1
        return year, month, day

    def __extract_time(m):
        if not m:
            return 0, 0, 0
        hours = m.group('hours')
        if not hours:
            return 0, 0, 0
        hours = int(hours)
        minutes = int(m.group('minutes'))
        seconds = m.group('seconds')
        if seconds:
            seconds = int(seconds)
        else:
            seconds = 0
        return hours, minutes, seconds

    def __extract_tzd(m):
        '''Return the Time Zone Designator as an offset in seconds from UTC.'''
        if not m:
            return 0
        tzd = m.group('tzd')
        if not tzd:
            return 0
        if tzd == 'Z':
            return 0
        hours = int(m.group('tzdhours'))
        minutes = m.group('tzdminutes')
        if minutes:
            minutes = int(minutes)
        else:
            minutes = 0
        offset = (hours*60 + minutes) * 60
        if tzd[0] == '+':
            return -offset
        return offset

    __date_re = ('(?P<year>\d\d\d\d)'
                 '(?:(?P<dsep>-|)'
                 '(?:(?P<month>\d\d)(?:(?P=dsep)(?P<day>\d\d))?'
                 '|(?P<julian>\d\d\d)))?')
    __tzd_re = ' ?(?P<tzd>[-+](?P<tzdhours>\d\d)(?::?(?P<tzdminutes>\d\d))|Z)?'
    __time_re = ('(?P<hours>\d\d)(?P<tsep>:|)(?P<minutes>\d\d)'
                 '(?:(?P=tsep)(?P<seconds>\d\d)(?:[.,]\d+)?)?'
                 + __tzd_re)
    __datetime_re = '%s(?:[T ]%s)?' % (__date_re, __time_re)
    __datetime_rx = re.compile(__datetime_re)
    m = __datetime_rx.match(dateString)
    if (m is None) or (m.group() != dateString):
        return
    gmt = __extract_date(m) + __extract_time(m) + (0, 0, 0)
    if gmt[0] == 0:
        return
    return time.gmtime(time.mktime(gmt) + __extract_tzd(m) - time.timezone)
registerDateHandler(_parse_date_w3dtf)

def _parse_date_rfc822(dateString):
    '''Parse an RFC822, RFC1123, RFC2822, or asctime-style date'''
    data = dateString.split()
    if not data:
        return None
    if data[0][-1] in (',', '.') or data[0].lower() in rfc822._daynames:
        del data[0]
    if len(data) == 4:
        s = data[3]
        i = s.find('+')
        if i > 0:
            data[3:] = [s[:i], s[i+1:]]
        else:
            data.append('')
        dateString = " ".join(data)
    # Account for the Etc/GMT timezone by stripping 'Etc/'
    elif len(data) == 5 and data[4].lower().startswith('etc/'):
        data[4] = data[4][4:]
        dateString = " ".join(data)
    if len(data) < 5:
        dateString += ' 00:00:00 GMT'
    tm = rfc822.parsedate_tz(dateString)
    if tm:
        # Jython doesn't adjust for 2-digit years like CPython does,
        # so account for it by shifting the year so that it's in the
        # range 1970-2069 (1970 being the year of the Unix epoch).
        if tm[0] < 100:
            tm = (tm[0] + (1900, 2000)[tm[0] < 70],) + tm[1:]
        return time.gmtime(rfc822.mktime_tz(tm))
# rfc822.py defines several time zones, but we define some extra ones.
# 'ET' is equivalent to 'EST', etc.
_additional_timezones = {'AT': -400, 'ET': -500, 'CT': -600, 'MT': -700, 'PT': -800}
rfc822._timezones.update(_additional_timezones)
registerDateHandler(_parse_date_rfc822)

def _parse_date_perforce(aDateString):
    """parse a date in yyyy/mm/dd hh:mm:ss TTT format"""
    # Fri, 2006/09/15 08:19:53 EDT
    _my_date_pattern = re.compile( \
        r'(\w{,3}), (\d{,4})/(\d{,2})/(\d{2}) (\d{,2}):(\d{2}):(\d{2}) (\w{,3})')

    m = _my_date_pattern.search(aDateString)
    if m is None:
        return None
    dow, year, month, day, hour, minute, second, tz = m.groups()
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    dateString = "%s, %s %s %s %s:%s:%s %s" % (dow, day, months[int(month) - 1], year, hour, minute, second, tz)
    tm = rfc822.parsedate_tz(dateString)
    if tm:
        return time.gmtime(rfc822.mktime_tz(tm))
registerDateHandler(_parse_date_perforce)

def _parse_date(dateString):
    '''Parses a variety of date formats into a 9-tuple in GMT'''
    if not dateString:
        return None
    for handler in _date_handlers:
        try:
            date9tuple = handler(dateString)
        except (KeyError, OverflowError, ValueError):
            continue
        if not date9tuple:
            continue
        if len(date9tuple) != 9:
            continue
        return date9tuple
    return None

def _getCharacterEncoding(http_headers, xml_data):
    '''Get the character encoding of the XML document

    http_headers is a dictionary
    xml_data is a raw string (not Unicode)

    This is so much trickier than it sounds, it's not even funny.
    According to RFC 3023 ('XML Media Types'), if the HTTP Content-Type
    is application/xml, application/*+xml,
    application/xml-external-parsed-entity, or application/xml-dtd,
    the encoding given in the charset parameter of the HTTP Content-Type
    takes precedence over the encoding given in the XML prefix within the
    document, and defaults to 'utf-8' if neither are specified.  But, if
    the HTTP Content-Type is text/xml, text/*+xml, or
    text/xml-external-parsed-entity, the encoding given in the XML prefix
    within the document is ALWAYS IGNORED and only the encoding given in
    the charset parameter of the HTTP Content-Type header should be
    respected, and it defaults to 'us-ascii' if not specified.

    Furthermore, discussion on the atom-syntax mailing list with the
    author of RFC 3023 leads me to the conclusion that any document
    served with a Content-Type of text/* and no charset parameter
    must be treated as us-ascii.  (We now do this.)  And also that it
    must always be flagged as non-well-formed.  (We now do this too.)

    If Content-Type is unspecified (input was local file or non-HTTP source)
    or unrecognized (server just got it totally wrong), then go by the
    encoding given in the XML prefix of the document and default to
    'iso-8859-1' as per the HTTP specification (RFC 2616).

    Then, assuming we didn't find a character encoding in the HTTP headers
    (and the HTTP Content-type allowed us to look in the body), we need
    to sniff the first few bytes of the XML data and try to determine
    whether the encoding is ASCII-compatible.  Section F of the XML
    specification shows the way here:
    http://www.w3.org/TR/REC-xml/#sec-guessing-no-ext-info

    If the sniffed encoding is not ASCII-compatible, we need to make it
    ASCII compatible so that we can sniff further into the XML declaration
    to find the encoding attribute, which will tell us the true encoding.

    Of course, none of this guarantees that we will be able to parse the
    feed in the declared character encoding (assuming it was declared
    correctly, which many are not).  iconv_codec can help a lot;
    you should definitely install it if you can.
    http://cjkpython.i18n.org/
    '''

    def _parseHTTPContentType(content_type):
        '''takes HTTP Content-Type header and returns (content type, charset)

        If no charset is specified, returns (content type, '')
        If no content type is specified, returns ('', '')
        Both return parameters are guaranteed to be lowercase strings
        '''
        content_type = content_type or ''
        content_type, params = cgi.parse_header(content_type)
        charset = params.get('charset', '').replace("'", "")
        if not isinstance(charset, unicode):
            charset = charset.decode('utf-8', 'ignore')
        return content_type, charset

    sniffed_xml_encoding = u''
    xml_encoding = u''
    true_encoding = u''
    http_content_type, http_encoding = _parseHTTPContentType(http_headers.get('content-type'))
    # Must sniff for non-ASCII-compatible character encodings before
    # searching for XML declaration.  This heuristic is defined in
    # section F of the XML specification:
    # http://www.w3.org/TR/REC-xml/#sec-guessing-no-ext-info
    try:
        if xml_data[:4] == _l2bytes([0x4c, 0x6f, 0xa7, 0x94]):
            # In all forms of EBCDIC, these four bytes correspond
            # to the string '<?xm'; try decoding using CP037
            sniffed_xml_encoding = u'cp037'
            xml_data = xml_data.decode('cp037').encode('utf-8')
        elif xml_data[:4] == _l2bytes([0x00, 0x3c, 0x00, 0x3f]):
            # UTF-16BE
            sniffed_xml_encoding = u'utf-16be'
            xml_data = unicode(xml_data, 'utf-16be').encode('utf-8')
        elif (len(xml_data) >= 4) and (xml_data[:2] == _l2bytes([0xfe, 0xff])) and (xml_data[2:4] != _l2bytes([0x00, 0x00])):
            # UTF-16BE with BOM
            sniffed_xml_encoding = u'utf-16be'
            xml_data = unicode(xml_data[2:], 'utf-16be').encode('utf-8')
        elif xml_data[:4] == _l2bytes([0x3c, 0x00, 0x3f, 0x00]):
            # UTF-16LE
            sniffed_xml_encoding = u'utf-16le'
            xml_data = unicode(xml_data, 'utf-16le').encode('utf-8')
        elif (len(xml_data) >= 4) and (xml_data[:2] == _l2bytes([0xff, 0xfe])) and (xml_data[2:4] != _l2bytes([0x00, 0x00])):
            # UTF-16LE with BOM
            sniffed_xml_encoding = u'utf-16le'
            xml_data = unicode(xml_data[2:], 'utf-16le').encode('utf-8')
        elif xml_data[:4] == _l2bytes([0x00, 0x00, 0x00, 0x3c]):
            # UTF-32BE
            sniffed_xml_encoding = u'utf-32be'
            xml_data = unicode(xml_data, 'utf-32be').encode('utf-8')
        elif xml_data[:4] == _l2bytes([0x3c, 0x00, 0x00, 0x00]):
            # UTF-32LE
            sniffed_xml_encoding = u'utf-32le'
            xml_data = unicode(xml_data, 'utf-32le').encode('utf-8')
        elif xml_data[:4] == _l2bytes([0x00, 0x00, 0xfe, 0xff]):
            # UTF-32BE with BOM
            sniffed_xml_encoding = u'utf-32be'
            xml_data = unicode(xml_data[4:], 'utf-32be').encode('utf-8')
        elif xml_data[:4] == _l2bytes([0xff, 0xfe, 0x00, 0x00]):
            # UTF-32LE with BOM
            sniffed_xml_encoding = u'utf-32le'
            xml_data = unicode(xml_data[4:], 'utf-32le').encode('utf-8')
        elif xml_data[:3] == _l2bytes([0xef, 0xbb, 0xbf]):
            # UTF-8 with BOM
            sniffed_xml_encoding = u'utf-8'
            xml_data = unicode(xml_data[3:], 'utf-8').encode('utf-8')
        else:
            # ASCII-compatible
            pass
        xml_encoding_match = re.compile(_s2bytes('^<\?.*encoding=[\'"](.*?)[\'"].*\?>')).match(xml_data)
    except UnicodeDecodeError:
        xml_encoding_match = None
    if xml_encoding_match:
        xml_encoding = xml_encoding_match.groups()[0].decode('utf-8').lower()
        if sniffed_xml_encoding and (xml_encoding in (u'iso-10646-ucs-2', u'ucs-2', u'csunicode', u'iso-10646-ucs-4', u'ucs-4', u'csucs4', u'utf-16', u'utf-32', u'utf_16', u'utf_32', u'utf16', u'u16')):
            xml_encoding = sniffed_xml_encoding
    acceptable_content_type = 0
    application_content_types = (u'application/xml', u'application/xml-dtd', u'application/xml-external-parsed-entity')
    text_content_types = (u'text/xml', u'text/xml-external-parsed-entity')
    if (http_content_type in application_content_types) or \
       (http_content_type.startswith(u'application/') and http_content_type.endswith(u'+xml')):
        acceptable_content_type = 1
        true_encoding = http_encoding or xml_encoding or u'utf-8'
    elif (http_content_type in text_content_types) or \
         (http_content_type.startswith(u'text/')) and http_content_type.endswith(u'+xml'):
        acceptable_content_type = 1
        true_encoding = http_encoding or u'us-ascii'
    elif http_content_type.startswith(u'text/'):
        true_encoding = http_encoding or u'us-ascii'
    elif http_headers and 'content-type' not in http_headers:
        true_encoding = xml_encoding or u'iso-8859-1'
    else:
        true_encoding = xml_encoding or u'utf-8'
    # some feeds claim to be gb2312 but are actually gb18030.
    # apparently MSIE and Firefox both do the following switch:
    if true_encoding.lower() == u'gb2312':
        true_encoding = u'gb18030'
    return true_encoding, http_encoding, xml_encoding, sniffed_xml_encoding, acceptable_content_type

def _toUTF8(data, encoding):
    '''Changes an XML data stream on the fly to specify a new encoding

    data is a raw sequence of bytes (not Unicode) that is presumed to be in %encoding already
    encoding is a string recognized by encodings.aliases
    '''
    # strip Byte Order Mark (if present)
    if (len(data) >= 4) and (data[:2] == _l2bytes([0xfe, 0xff])) and (data[2:4] != _l2bytes([0x00, 0x00])):
        encoding = 'utf-16be'
        data = data[2:]
    elif (len(data) >= 4) and (data[:2] == _l2bytes([0xff, 0xfe])) and (data[2:4] != _l2bytes([0x00, 0x00])):
        encoding = 'utf-16le'
        data = data[2:]
    elif data[:3] == _l2bytes([0xef, 0xbb, 0xbf]):
        encoding = 'utf-8'
        data = data[3:]
    elif data[:4] == _l2bytes([0x00, 0x00, 0xfe, 0xff]):
        encoding = 'utf-32be'
        data = data[4:]
    elif data[:4] == _l2bytes([0xff, 0xfe, 0x00, 0x00]):
        encoding = 'utf-32le'
        data = data[4:]
    newdata = unicode(data, encoding)
    declmatch = re.compile('^<\?xml[^>]*?>')
    newdecl = '''<?xml version='1.0' encoding='utf-8'?>'''
    if declmatch.search(newdata):
        newdata = declmatch.sub(newdecl, newdata)
    else:
        newdata = newdecl + u'\n' + newdata
    return newdata.encode('utf-8')

def _stripDoctype(data):
    '''Strips DOCTYPE from XML document, returns (rss_version, stripped_data)

    rss_version may be 'rss091n' or None
    stripped_data is the same XML document, minus the DOCTYPE
    '''
    start = re.search(_s2bytes('<\w'), data)
    start = start and start.start() or -1
    head,data = data[:start+1], data[start+1:]

    entity_pattern = re.compile(_s2bytes(r'^\s*<!ENTITY([^>]*?)>'), re.MULTILINE)
    entity_results=entity_pattern.findall(head)
    head = entity_pattern.sub(_s2bytes(''), head)
    doctype_pattern = re.compile(_s2bytes(r'^\s*<!DOCTYPE([^>]*?)>'), re.MULTILINE)
    doctype_results = doctype_pattern.findall(head)
    doctype = doctype_results and doctype_results[0] or _s2bytes('')
    if doctype.lower().count(_s2bytes('netscape')):
        version = u'rss091n'
    else:
        version = None

    # only allow in 'safe' inline entity definitions
    replacement=_s2bytes('')
    if len(doctype_results)==1 and entity_results:
       safe_pattern=re.compile(_s2bytes('\s+(\w+)\s+"(&#\w+;|[^&"]*)"'))
       safe_entities=filter(lambda e: safe_pattern.match(e),entity_results)
       if safe_entities:
           replacement=_s2bytes('<!DOCTYPE feed [\n  <!ENTITY') + _s2bytes('>\n  <!ENTITY ').join(safe_entities) + _s2bytes('>\n]>')
    data = doctype_pattern.sub(replacement, head) + data

    return version, data, dict(replacement and [(k.decode('utf-8'), v.decode('utf-8')) for k, v in safe_pattern.findall(replacement)])

def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):
    '''Parse a feed from a URL, file, stream, or string.

    request_headers, if given, is a dict from http header name to value to add
    to the request; this overrides internally generated values.
    '''

    if handlers is None:
        handlers = []
    if request_headers is None:
        request_headers = {}
    if response_headers is None:
        response_headers = {}

    result = FeedParserDict()
    result['feed'] = FeedParserDict()
    result['entries'] = []
    result['bozo'] = 0
    if not isinstance(handlers, list):
        handlers = [handlers]
    try:
        f = _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers)
        data = f.read()
    except Exception, e:
        result['bozo'] = 1
        result['bozo_exception'] = e
        data = None
        f = None

    if hasattr(f, 'headers'):
        result['headers'] = dict(f.headers)
    # overwrite existing headers using response_headers
    if 'headers' in result:
        result['headers'].update(response_headers)
    elif response_headers:
        result['headers'] = copy.deepcopy(response_headers)

    # lowercase all of the HTTP headers for comparisons per RFC 2616
    if 'headers' in result:
        http_headers = dict((k.lower(), v) for k, v in result['headers'].items())
    else:
        http_headers = {}

    # if feed is gzip-compressed, decompress it
    if f and data and http_headers:
        if gzip and 'gzip' in http_headers.get('content-encoding', ''):
            try:
                data = gzip.GzipFile(fileobj=_StringIO(data)).read()
            except (IOError, struct.error), e:
                # IOError can occur if the gzip header is bad
                # struct.error can occur if the data is damaged
                # Some feeds claim to be gzipped but they're not, so
                # we get garbage.  Ideally, we should re-request the
                # feed without the 'Accept-encoding: gzip' header,
                # but we don't.
                result['bozo'] = 1
                result['bozo_exception'] = e
                data = None
        elif zlib and 'deflate' in http_headers.get('content-encoding', ''):
            try:
                data = zlib.decompress(data)
            except zlib.error, e:
                result['bozo'] = 1
                result['bozo_exception'] = e
                data = None

    # save HTTP headers
    if http_headers:
        if 'etag' in http_headers:
            etag = http_headers.get('etag', u'')
            if not isinstance(etag, unicode):
                etag = etag.decode('utf-8', 'ignore')
            if etag:
                result['etag'] = etag
        if 'last-modified' in http_headers:
            modified = http_headers.get('last-modified', u'')
            if modified:
                result['modified'] = modified
                result['modified_parsed'] = _parse_date(modified)
    if hasattr(f, 'url'):
        if not isinstance(f.url, unicode):
            result['href'] = f.url.decode('utf-8', 'ignore')
        else:
            result['href'] = f.url
        result['status'] = 200
    if hasattr(f, 'status'):
        result['status'] = f.status
    if hasattr(f, 'close'):
        f.close()

    if data is None:
        return result

    # there are four encodings to keep track of:
    # - http_encoding is the encoding declared in the Content-Type HTTP header
    # - xml_encoding is the encoding declared in the <?xml declaration
    # - sniffed_encoding is the encoding sniffed from the first 4 bytes of the XML data
    # - result['encoding'] is the actual encoding, as per RFC 3023 and a variety of other conflicting specifications
    result['encoding'], http_encoding, xml_encoding, sniffed_xml_encoding, acceptable_content_type = \
        _getCharacterEncoding(http_headers, data)
    if http_headers and (not acceptable_content_type):
        if 'content-type' in http_headers:
            bozo_message = '%s is not an XML media type' % http_headers['content-type']
        else:
            bozo_message = 'no Content-type specified'
        result['bozo'] = 1
        result['bozo_exception'] = NonXMLContentType(bozo_message)

    if data is not None:
        result['version'], data, entities = _stripDoctype(data)

    # ensure that baseuri is an absolute uri using an acceptable URI scheme
    contentloc = http_headers.get('content-location', u'')
    href = result.get('href', u'')
    baseuri = _makeSafeAbsoluteURI(href, contentloc) or _makeSafeAbsoluteURI(contentloc) or href

    baselang = http_headers.get('content-language', None)
    if not isinstance(baselang, unicode) and baselang is not None:
        baselang = baselang.decode('utf-8', 'ignore')

    # if server sent 304, we're done
    if result.get('status', 0) == 304:
        result['version'] = u''
        result['debug_message'] = 'The feed has not changed since you last checked, ' + \
            'so the server sent no data.  This is a feature, not a bug!'
        return result

    # if there was a problem downloading, we're done
    if data is None:
        return result

    # determine character encoding
    use_strict_parser = 0
    known_encoding = 0
    tried_encodings = []
    # try: HTTP encoding, declared XML encoding, encoding sniffed from BOM
    for proposed_encoding in (result['encoding'], xml_encoding, sniffed_xml_encoding):
        if not proposed_encoding:
            continue
        if proposed_encoding in tried_encodings:
            continue
        tried_encodings.append(proposed_encoding)
        try:
            data = _toUTF8(data, proposed_encoding)
        except (UnicodeDecodeError, LookupError):
            pass
        else:
            known_encoding = use_strict_parser = 1
            break
    # if no luck and we have auto-detection library, try that
    if (not known_encoding) and chardet:
        proposed_encoding = chardet.detect(data)['encoding']
        if proposed_encoding and (proposed_encoding not in tried_encodings):
            tried_encodings.append(proposed_encoding)
            try:
                data = _toUTF8(data, proposed_encoding)
            except (UnicodeDecodeError, LookupError):
                pass
            else:
                known_encoding = use_strict_parser = 1
    # if still no luck and we haven't tried utf-8 yet, try that
    if (not known_encoding) and (u'utf-8' not in tried_encodings):
        proposed_encoding = u'utf-8'
        tried_encodings.append(proposed_encoding)
        try:
            data = _toUTF8(data, proposed_encoding)
        except UnicodeDecodeError:
            pass
        else:
            known_encoding = use_strict_parser = 1
    # if still no luck and we haven't tried windows-1252 yet, try that
    if (not known_encoding) and (u'windows-1252' not in tried_encodings):
        proposed_encoding = u'windows-1252'
        tried_encodings.append(proposed_encoding)
        try:
            data = _toUTF8(data, proposed_encoding)
        except UnicodeDecodeError:
            pass
        else:
            known_encoding = use_strict_parser = 1
    # if still no luck and we haven't tried iso-8859-2 yet, try that.
    if (not known_encoding) and (u'iso-8859-2' not in tried_encodings):
        proposed_encoding = u'iso-8859-2'
        tried_encodings.append(proposed_encoding)
        try:
            data = _toUTF8(data, proposed_encoding)
        except UnicodeDecodeError:
            pass
        else:
            known_encoding = use_strict_parser = 1
    # if still no luck, give up
    if not known_encoding:
        result['bozo'] = 1
        result['bozo_exception'] = CharacterEncodingUnknown( \
            'document encoding unknown, I tried ' + \
            '%s, %s, utf-8, windows-1252, and iso-8859-2 but nothing worked' % \
            (result['encoding'], xml_encoding))
        result['encoding'] = u''
    elif proposed_encoding != result['encoding']:
        result['bozo'] = 1
        result['bozo_exception'] = CharacterEncodingOverride( \
            'document declared as %s, but parsed as %s' % \
            (result['encoding'], proposed_encoding))
        result['encoding'] = proposed_encoding

    if not _XML_AVAILABLE:
        use_strict_parser = 0
    if use_strict_parser:
        # initialize the SAX parser
        feedparser = _StrictFeedParser(baseuri, baselang, 'utf-8')
        saxparser = xml.sax.make_parser(PREFERRED_XML_PARSERS)
        saxparser.setFeature(xml.sax.handler.feature_namespaces, 1)
        try:
            # disable downloading external doctype references, if possible
            saxparser.setFeature(xml.sax.handler.feature_external_ges, 0)
        except xml.sax.SAXNotSupportedException:
            pass
        saxparser.setContentHandler(feedparser)
        saxparser.setErrorHandler(feedparser)
        source = xml.sax.xmlreader.InputSource()
        source.setByteStream(_StringIO(data))
        try:
            saxparser.parse(source)
        except xml.sax.SAXParseException, e:
            result['bozo'] = 1
            result['bozo_exception'] = feedparser.exc or e
            use_strict_parser = 0
    if not use_strict_parser and _SGML_AVAILABLE:
        feedparser = _LooseFeedParser(baseuri, baselang, 'utf-8', entities)
        feedparser.feed(data.decode('utf-8', 'replace'))
    result['feed'] = feedparser.feeddata
    result['entries'] = feedparser.entries
    result['version'] = result['version'] or feedparser.version
    result['namespaces'] = feedparser.namespacesInUse
    return result

]]>
		</Library>
		<Library Name="class_xml_macro">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLMacros( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'macro' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, obj, recursive=False, comparer=None ):
		result = Node.find( self, obj, recursive, comparer )

		if type(obj) not in [ str, unicode ]:
			return result

		if not result:
			result = self.create_child( obj )

		return result


	@property
	def source( self ):
		return self.find( 'source' ).text

	@source.setter
	def source( self, value ):
		self.find( 'source' ).text = value

	@property
	def name( self ):
		return self.find( 'name' ).text

	@name.setter
	def name( self, value ):
		self.find( 'name' ).text = value

	@property
	def class_name( self ):
		return self.find( 'class_name' ).text

	@class_name.setter
	def class_name( self, value ):
		self.find( 'class_name' ).text = value

	@property
	def is_button( self ):
		return self.find( 'is_button' ).text

	@is_button.setter
	def is_button( self, value ):
		self.find( 'is_button' ).text = value


	@property
	def on_board( self ):
		return self.find( 'ob_board' ).text

	@on_board.setter
	def on_board( self, value ):
		self.find( 'ob_board' ).text = value

	@property
	def macros_picture( self ):
		return self.find( 'macros_picture' ).text

	@macros_picture.setter
	def macros_picture( self, value ):
		self.find( 'macros_picture' ).text = value

	@property
	def guid( self ):
		return self.find( 'guid' ).text

	@guid.setter
	def guid( self, value ):
		self.find( 'guid' ).text = value

	@property
	def description( self ):
		return self.find( 'description' ).text

	@description.setter
	def description( self, value ):
		self.find( 'description' ).text = value

	@property
	def timer_guid( self ):
		return self.find( 'timer_guid' ).text

	@timer_guid.setter
	def timer_guid( self, value ):
		self.find( 'timer_guid' ).text = value

	@property
	def custom_event_guid( self ):
		return self.find( 'custom_event_guid' ).text

	@custom_event_guid.setter
	def custom_event_guid( self, value ):
		self.find( 'custom_event_guid' ).text = value

	@property
	def plugin_guid( self ):
		return self.find( 'plugin_guid' ).text

	@plugin_guid.setter
	def plugin_guid( self, value ):
		self.find( 'plugin_guid' ).text = value

	@property
	def page( self ):
		return self.find( 'page' ).text

	@page.setter
	def page( self, value ):
		self.find( 'page' ).text = value


	@property
	def type(self):
		return self.find('type').text


	@type.setter
	def type(self, value):
		self.find('type').text = value


]]>
		</Library>
		<Library Name="prosuite_errors">
<![CDATA[
class ProSuiteBaseError(Exception):
    pass

]]>
		</Library>
		<Library Name="class_timer">
<![CDATA[from class_db import Database
from VEE_core import engine
from utils.uuid import uuid4

class Timer:
	def __init__(self):
		self.id 			= None
		self.name 			= None
		self.period 		= None
		self.guid	 		= None
		self.plugin_guid	= None


	def __fill_from_row(self, row):
		self.id 			= row[0]
		self.name 			= row[1]
		self.period		 	= row[2]
		self.guid	 		= row[3]
		self.plugin_guid	= row[4]

		return self

	@classmethod
	def get_by_id(self, id):
		db_row = Database.macrosdb().fetch_one(	"""
			SELECT
				timer.id,
				timer.name,
				timer.period,
				timer.guid,
				timer.plugin_guid
			FROM `timer`
			WHERE timer.id=?""", (id, ))

		return self().__fill_from_row(db_row) if db_row else None

	@classmethod
	def register_timer_by_guid( self, guid ):
		timer = self.get_timer_by_guid( guid )
		if timer: timer.register()


	def __internal_name( self ):
		return "{0}:{1}".format( self.plugin_guid, self.name ).encode( "utf-8" ).lower()


	def register( self ):
		engine.add_timer( self.__internal_name(), self.period, self.guid )

	def unregister( self ):
		engine.delete_timer( self.__internal_name() )

	def update_timer( self ):
		engine.update_timer( self.__internal_name(), self.period, self.guid )


	@classmethod
	def get_timer_by_plugin_guid(self, plugin_guid):
		db_rows = Database.macrosdb().fetch_all(	"""
			SELECT
				timer.id,
				timer.name,
				timer.period,
				timer.guid,
				timer.plugin_guid
			FROM `timer`
			WHERE timer.plugin_guid=?""", (plugin_guid, ) )
		return [self().__fill_from_row(row) for row in db_rows]

	@classmethod
	def get_timer_by_guid(self, guid):
		db_row = Database.macrosdb().fetch_one(	"""
			SELECT
				timer.id,
				timer.name,
				timer.period,
				timer.guid,
				timer.plugin_guid
			FROM `timer`
			WHERE timer.guid=?""", (guid, ))

		return self().__fill_from_row(db_row) if db_row else None


	def save(self):
		return self.__update() if self.id else self.__insert()

	def __insert(self):
		self.guid = str(uuid4()) if self.guid is None else self.guid
		self.id = Database.macrosdb().commit(
			"""INSERT INTO timer (name, period, guid, plugin_guid) VALUES (?,?,?,?)""",
			 (self.name, self.period, self.guid, self.plugin_guid ) )

		self.register()
		return self

	def __update(self):
		Database.macrosdb().commit(
			"""UPDATE timer
				SET
					name=?,
					period=?,
					guid=?,
					plugin_guid=?
					WHERE id=?""",
			 (self.name, self.period, self.guid, self.plugin_guid, self.id))
		self.update_timer()
		return self

	def delete(self):
		from class_macro import Macros

		macros_list = Macros.get_macros_by_timer_guid(self.guid)
		for macros in macros_list:
			macros.class_name = "NULL"
			macros.timer_guid = "NULL"
			macros.is_button_macros = "1"
			macros.on_board = "0"
			macros.save()

		self.unregister()
		Database.macrosdb().commit("""DELETE FROM timer WHERE id=?""", (self.id,))


	def get_xmlnode(self):
		from class_xml_timer import XMLTimer
		import base64
		xml = XMLTimer()
		xml.name 			= self.name
		xml.guid 			= self.guid
		xml.period 			= self.period

		return xml

	def generate_xml(self):
		return self.get_xmlnode().toprettyxml().encode("utf8")

	def fill_from_xml(self, xml, plugin_guid):
		self.name 				= xml.name
		self.guid	 			= xml.guid
		self.period				= xml.period
		self.plugin_guid		= plugin_guid
		self.save()
]]>
		</Library>
		<Library Name="widget_plugins">
<![CDATA[import json
import cgi
import localization
from class_macro import Macros

class WidgetPlugins:
	def __init__(self):
		self.__datatable = None
		self.__richtext = None
		self.__plugins_list = None
		self.__richtext_value = None

	def set_data(self, data):
		plugins = []
		for plugin in data:
			config_macros = Macros.get_config_macro(plugin.guid)
			plugins.append({"id": plugin.id,
					"Picture" : "<img src='/get_image?id="+plugin.picture+"' width='48'/>" if plugin.picture else "<img src='/abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png' />",
					"Plugin_info" : "<h1>" +plugin.name + "</h1><h2>by " + plugin.author + "</h2><p class='clearfix'></p><p>" + plugin.description + "</p><p>Version " + plugin.version + "</p>",
					"Update" : "<a href=''><img src='/690302ab-f3e2-476e-ac6d-a69dc2f0734e.res'/>Update</a>",
					"Export" : "<a href=''><img src='/9238c80d-f1ca-4b81-bf4a-59d54bd5c6eb.res'/>Export</a>",
					"Open" : "<a href=''><img src='/3827f2ea-edca-491a-bc5f-a765776dd109.res'/>Open</a>",
					"Delete" : "<a href=''>Uninstall</a>",
					"MD5" : "<a href=''>Get MD5</a>",
					"Config" : ("<a href=''>Config</a>" if config_macros else "")} if not plugin.protected else {"id": plugin.id,
					"Picture" : "<img src='/get_image?id="+plugin.picture+"' width='48'/>" if plugin.picture else "<img src='/abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png' />",
					"Plugin_info" : "<h1>" +plugin.name + "</h1><h2>by " + plugin.author + "</h2><p class='clearfix'></p><p>" + plugin.description + "</p><p>Version " + plugin.version + "</p><p>Protected</p>" ,
					"Update" : "<a href=''><img src='/690302ab-f3e2-476e-ac6d-a69dc2f0734e.res'/>Update</a>",
					"Export" : "",
					"Open" : "",
					"Delete" : "<a href=''>Uninstall</a>",
					"MD5" : "<a href=''>Get MD5</a>",
					"Config" : ("<a href=''>Config</a>" if config_macros else "")})

		self.__plugins_list = json.dumps(plugins)

	def set_single_data(self, data):

#		plugins = [{"id": data.id,
#					"Picture" : "<img src='/get_image?id=" +data.picture+ "'/>" if data.picture else "<img src='/abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png'/>",
#					"Plugin_info" : "<h1>" + data.name + "</h1><h2>by " + data.author + "</h2><p class='clearfix'></p><p>" + data.description + "</p><p>Version " + data.version + "</p>",
#					"Update" : "<a href='?op=update&id=" + str(data.id) + "'><img src='/690302ab-f3e2-476e-ac6d-a69dc2f0734e.res'/>Update</a>",
#					"Export" : "<a href='?op=export&id=" + str(data.id) + "'><img src='/9238c80d-f1ca-4b81-bf4a-59d54bd5c6eb.res'/>Export</a>",
#					"Open" : "<a href='?op=edit&id=" + str(data.id) + "'><img src='/910e3e46-f9cf-4aa7-9147-04ec354078c8.res'/>Edit Details</a>"}]
#
		img = "<img src='/get_image?id=" +data.picture+ "' width='48'/>" if data.picture else "<img src='/abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png'/>"
		self.__richtext_value =  img + "<h1>" + data.name + "</h1><h2>by " + data.author + "</h2><p class='clearfix'></p>" \
		"<div class='breadcrumbs'><a href='/plugins.vdom'>Plug-Ins</a> > " + data.name + "</div>"
		#self.__plugins_list = json.dumps(plugins)


	def render(self, datatable = None, richtext = None):
		if datatable:
			self.__datatable = datatable
			self.__datatable.data = self.__plugins_list
		if 	richtext:
			self.__richtext = richtext
			self.__richtext.value = self.__richtext_value
]]>
		</Library>
		<Library Name="ProSuiteUsersAndGroupsPage">
<![CDATA["""
"""

import json

from collections import OrderedDict
from functools import wraps

import ProAdmin

from prosuite_web import ProSuiteBasicPage, administrator_only, error_handler,\
                         authenticated, callback
from prosuite_utils import CachedProperty
from prosuite_widgets import Datatable, ComplexDatatable, Form


HEADER_CELL_TMPLT = u"<span id='{}' class='ug_datatable_title'>{} {}</span>"
OBJ_EDIT_CELL_TMPLT = u"<div class='ug_subject_edit' title='{} {}'></div>"
OBJ_CELL_TMPLT = u"<span title='{}'>{}</span>"


def local_scheme(method):
    """
    """
    @wraps(method)
    def wrapper(page_controller, *args, **kwargs):
        """
        """
        if not ProAdmin.scheme().is_remote():
            return method(page_controller, *args, **kwargs)

        page_controller.redirect(page_controller.app_settings.pages["remote_ug"])

    return wrapper


def cast_json_str_to_list(value):
    """
    """
    if not value:
        return []

    if value.startswith("["):
        return json.loads(value)

    return [value]


class BasicPageDatatable(ComplexDatatable):

    def __init__(self, prefix, *args, **kwargs):
        super(BasicPageDatatable, self).__init__(*args, **kwargs)
        self.prefix = prefix

    def init_args(self):
        """
        """
        super(BasicPageDatatable, self).init_args()
        self.arguments.update({
            "currentPage": self.Argument("pagenumber", "CurrentPage", default=1, castto=int),
            "rowsPerPage": self.Argument("perpage", "RowsPerPage", default=10, castto=int,
                                         valid_value=(10,20,30,40,50),
                                         test=lambda self: self.value in self.valid_value),
            "selectedRows": self.Argument("keyList", "SelectedRows", default=[], castto=cast_json_str_to_list),
            "searchQuery": self.Argument("query", "SearchQuery", default=""),
            "sortBy": self.Argument("headername", "SortBy"),
            "sortOrder": self.Argument("sortOrder", "SortOrder", default="",
                                       valid_value=("headerSortUp", "headerSortDown", ""),
                                       test=lambda self: self.value in self.valid_value),
        })

    def set_sv_prefix(self):
        """
        """
        for arg in self.arguments.values():
            arg.svName = self.prefix + arg.svName

    def get_obj_attrs_map(self):
        """
        """
        raise NotImplementedError

    def get_sortable_headers(self):
        """
        """
        raise NotImplementedError

    def get_hidden_fields(self):
        return ["guid"]

    def get_key(self):
        return "guid"

    def get_selection_mode(self):
        return self.SELECTION_MODE.MULTI

    def get_show_header(self):
        return True

    def get_title(self):
        return ""

    def toogle_sort_order(self):
        """
        """
        sort_orders = self.arguments["sortOrder"].valid_value
        sort_order = self.arguments["sortOrder"].value

        next_index = sort_orders.index(sort_order) - len(sort_orders) + 1
        self.arguments["sortOrder"].value = sort_orders[next_index]

    def is_sort_order_down(self):
        return self.arguments["sortOrder"].value == \
               self.arguments["sortOrder"].valid_value[1]

    def is_sort_order_up(self):
        return self.arguments["sortOrder"].value == \
               self.arguments["sortOrder"].valid_value[0]

    def get_sort_by(self):
        """
        """
        arg = self.arguments["sortBy"]

        # if header clicked, validate it and toogle order
        if arg.reqValue:

            # chech is header valid or not
            for hid in self.get_sortable_headers():
                if hid in arg.reqValue:
                    arg.value = hid
                    break

            else:
                arg.value = arg.default

            # toogle sort orted if needed
            if arg.value:
                if arg.value != arg.svValue:
                    self.arguments["sortOrder"].value = ""

                self.toogle_sort_order()

        return arg.value

    def get_sort_filter(self):
        """
        """
        attr = self.get_obj_attrs_map()[self.sort_by]

        if self.is_sort_order_down():
            return lambda obj1, obj2: cmp(getattr(obj1, attr).lower(), getattr(obj2, attr).lower())

        else:
            return lambda obj1, obj2: cmp(getattr(obj2, attr).lower(), getattr(obj1, attr).lower())

    def format_header_cell(self, hcell):
        """
        """
        hid, htitle = hcell
        if not htitle:
            return hid

        arrow = ""
        if hid == self.sort_by and self.sort_order:
            arrow = "&#9660;" if self.is_sort_order_up() else "&#9650"


        return HEADER_CELL_TMPLT.format(
            hid,
            htitle,
            arrow
        )

    def render(self, attention, *args, **kwargs):
        """
        """
        super(BasicPageDatatable, self).render(*args, **kwargs)

        if not self.data:
            attention.visible = "1"
            attention.value = self.delegate.localization["ug.table.attention.no_objects"] if not self.search_query else \
                             self.delegate.localization["ug.table.attention.no_objects_match_query"]

        else:
            attention.visible = "0"

    def is_edit_cell(self, headerdata):
        """
        """
        return headerdata == "edit"


class UsersDatatable(BasicPageDatatable):

    def init_args(self):
        """
        """
        super(UsersDatatable, self).init_args()
        self.arguments.update({
            "selectedGroup": self.Argument("group", "SelectedGroup", default="")
        })

    def get_search_filter(self):
        """
        """
        q = self.search_query
        return lambda user: \
           q in user.name.lower() or\
           q in user.email.lower() or\
           q in user.notification_email.lower() or\
           q in user.cell_phone or\
           q in user.phone or\
           q in user.country.lower() or\
           q in user.keywords

    def get_objects(self):
        """
        """
        group_uuid = self.arguments["selectedGroup"].value
        if group_uuid:
            groups = ProAdmin.application().get_groups(guid=group_uuid)
            if groups:
                return groups[0].get_users()

            return []

        return ProAdmin.application().get_users()

    def get_sortable_headers(self):
        """
        """
        return ("login", "fullname")

    def get_header(self):
        return (
            ("guid", ""),
            ("edit", ""),
            ("login", self.delegate.localization["ug.userstable.header.login"]),
            ("fullname", self.delegate.localization["ug.userstable.header.fullname"])
        )

    def to_row(self, user):
        return (
            user.guid,
            OBJ_EDIT_CELL_TMPLT.format(
                self.delegate.localization["ug.userstable.row.edit"],
                user.name
            ),
            user.email,
            user.name
        )

    def get_obj_attrs_map(self):
        """
        """
        return {
            "login": "email",
            "fullname": "name",
        }

    def render_groups_list(self, groups_list):
        """
        """
        groups = sorted(ProAdmin.application().get_groups(), key=lambda g: g.name.lower())

        groups_dict = OrderedDict([("", self.delegate.localization["ug.groups.list.all"])])
        for group in groups:
            groups_dict[group.guid] = group.name

        groups_list.value = json.dumps(groups_dict)
        groups_list.selectedvalue = self.arguments["selectedGroup"].value


class GroupsDatatable(BasicPageDatatable):

    def get_search_filter(self):
        """
        """
        return lambda group: self.search_query in group.name.lower()

    def get_objects(self):
        return ProAdmin.application().get_groups()

    def get_sortable_headers(self):
        """
        """
        return ("name", )

    def get_header(self):
        return (
            ("guid", ""),
            ("edit", ""),
            ("name", self.delegate.localization["ug.groupstable.header.name"])
        )

    def to_row(self, group):
        return (
            group.guid,
            OBJ_EDIT_CELL_TMPLT.format(
                self.delegate.localization["ug.groupstable.row.edit"],
                group.name
            ),
            group.name
        )

    def get_obj_attrs_map(self):
        """
        """
        return {"name": "name"}


class DeleteSelectedObjectsForm(Form):

    def init_fields(self):
        """
        """
        super(DeleteSelectedObjectsForm, self).init_fields()
        self.fields.update({
            "selectedObjects": self.Field("objlist", default=[], castto=cast_json_str_to_list)
        })

    def delete_selected_objects(self):
        """
        """
        guids = self.fields["selectedObjects"].value
        for subj in ProAdmin.application().get_subjects():
            if subj.guid in guids:
                subj.delete()

    def submit(self):
        """
        """
        submit_flag = False

        if not self.fields["selectedObjects"].value:
            self.delegate.show_error_growl(
                self.delegate.localization["ug.delete_dialog.no_selected_error.text"],
                self.delegate.localization["ug.delete_dialog.no_selected_error.title"]
            )

        else:
            submit_flag = True

        if submit_flag:
            self.delete_selected_objects()
            self.delegate.show_info_growl(
                self.delegate.localization["ug.delete_dialog.delete_success.text"],
                self.delegate.localization["ug.delete_dialog.delete_success.title"]
            )

        return submit_flag

    def fill_form(self, objects_guids, objects_list):
        """
        """
        if not objects_guids:
            self.delegate.show_error_growl(
                self.delegate.localization["ug.delete_dialog.no_selected_error.text"],
                self.delegate.localization["ug.delete_dialog.no_selected_error.title"]
            )
            return False

        objects_list.value = json.dumps({
            subj.guid: subj.name for subj in ProAdmin.application().get_subjects() if subj.guid in objects_guids
        })
        objects_list.selectedvalue = json.dumps(objects_guids)

        return True


class AddUsersToGroupForm(Form):

    def init_fields(self):
        """
        """
        super(AddUsersToGroupForm, self).init_fields()
        self.fields.update({
            "groupGUID": self.Field("groupguid", default="", test=self.check_group_guid_field),
            "groupName": self.Field("groupname", default="", test=self.check_group_name_field),
            "selectedUsers": self.Field("users", default=[], castto=cast_json_str_to_list)
        })

    def check_group_guid_field(self, field):
        """
        """
        if not field.value:
            field.value = "new"

        if field.value == "new":
            return True

        groups = ProAdmin.application().get_groups(guid=field.value)
        if groups:
            field.svValue = groups[0]

        return bool(groups)

    def check_group_name_field(self, field):
        """
        """
        if not field.value:
            return False

        groups = ProAdmin.application().get_groups(name=field.value)
        return not bool(groups)

    def fill_group_with_users(self):
        """
        """
        group = None
        group_guid = self.fields["groupGUID"].value

        if group_guid == "new":
            group = ProAdmin.application().create_group(self.fields["groupName"].value)
            group.save()

        else:
            group = self.fields["groupGUID"].svValue

        users = self.fields["selectedUsers"].value
        for user in ProAdmin.application().get_users():
            if user.guid in users:
                group.add_user(user)

        group.save()

    def submit(self):
        """
        """
        submit_flag = False
        self.fields["groupGUID"].is_valid()

        if self.fields["groupGUID"].value == "new":
            if not self.fields["groupName"].value:
                self.delegate.show_error_growl(
                    self.delegate.localization["ug.add_to_group_dialog.no_group_name.text"],
                    self.delegate.localization["ug.add_to_group_dialog.no_group_name.title"]
                )

            elif not self.fields["groupName"].is_valid():
                self.delegate.show_error_growl(
                    self.delegate.localization["ug.add_to_group_dialog.group_name_exists.text"],
                    self.delegate.localization["ug.add_to_group_dialog.group_name_exists.title"]
                )

            else:
                submit_flag = True

        elif not self.fields["groupGUID"].is_valid():
            self.delegate.show_error_growl(
                self.delegate.localization["ug.add_to_group_dialog.no_group_in_proadmin.text"],
                self.delegate.localization["ug.add_to_group_dialog.no_group_in_proadmin.title"]
            )

        else:
            submit_flag = True


        if not self.fields["selectedUsers"].value:
            submit_flag = False
            self.delegate.show_error_growl(
                self.delegate.localization["ug.add_to_group_dialog.no_selected_error.text"],
                self.delegate.localization["ug.add_to_group_dialog.no_selected_error.title"]
            )

        if submit_flag:
            self.fill_group_with_users()
            self.delegate.show_info_growl(
                self.delegate.localization["ug.add_to_group_dialog.add_success.text"],
                self.delegate.localization["ug.add_to_group_dialog.add_success.title"]
            )

        return submit_flag

    def fill_form(self, users_guids, users_list, groups_list):
        """
        """
        if not users_guids:
            self.delegate.show_error_growl(
                self.delegate.localization["ug.add_to_group_dialog.no_selected_error.text"],
                self.delegate.localization["ug.add_to_group_dialog.no_selected_error.title"]
            )
            return False

        users_list.value = json.dumps({
            user.guid: user.name for user in ProAdmin.application().get_users() if user.guid in users_guids
        })
        users_list.selectedvalue = json.dumps(users_guids)

        groups = OrderedDict([
            (group.guid, group.name) for group in sorted(ProAdmin.application().get_groups(), key=lambda group: group.name)
        ])
        groups["new"] = u"-- {} --".format(self.delegate.localization["ug.add_to_group_dialog.create_new"])

        groups_list.value = json.dumps(groups)
        groups_list.selectedvalue = "new"

        return True


class SubjectsDatatable(ComplexDatatable):
    """
    """
    def __init__(self, datasource, *args, **kwargs):
        super(SubjectsDatatable, self).__init__(*args, **kwargs)
        self.datasource = datasource

    def init_args(self):
        """
        """
        super(SubjectsDatatable, self).init_args()
        self.arguments.update({
            "selectedRows": self.Argument("keyList", "FormSelectedSubjects", default=[], castto=cast_json_str_to_list),
            "searchQuery": self.Argument("searchquery", default=""),
            "sortBy": self.Argument("sortby"),
            "sortOrder": self.Argument("sortorder"),
        })

    def get_hidden_fields(self):
        return ["guid"]

    def get_key(self):
        return "guid"

    def get_selection_mode(self):
        return self.SELECTION_MODE.MULTI

    def get_show_header(self):
        return False

    def get_title(self):
        return ""

    def get_search_filter(self):
        """
        """
        q = self.search_query
        return lambda obj: q in obj.name.lower()

    def get_header(self):
        return (
            ("guid", ""),
            ("name", "")
        )

    def to_row(self, obj):
        return (
            obj.guid,
            obj.name
        )

    def get_data(self):
        return self.objects

    def get_objects(self):
        return self.datasource.get_objects(self)

    def format_header_cell(self, hcell):
        """
        """
        return hcell[0]

    def render(self, datatable, attention):
        Datatable.render(self, datatable)
        self.save_args()

        if not self.data:
            attention.visible = "1"
            attention.value = self.delegate.localization["ug.form.group.search.attention.no_objects"] if not self.search_query else \
                             self.delegate.localization["ug.form.group.search.attention.no_objects_match_query"]

        else:
            attention.visible = "0"


class GroupForm(AddUsersToGroupForm):

    def __init__(self, *args, **kwargs):
        super(AddUsersToGroupForm, self).__init__(*args, **kwargs)
        self.object = None

    def init_fields(self):
        """
        """
        super(AddUsersToGroupForm, self).init_fields()
        self.fields.update({
            "groupGUID": self.Field("groupguid", default="", test=self.check_group_guid_field),
            "groupName": self.Field("groupname", default="", test=self.check_group_name_field),
            "selectedUsers": self.Field(svName="FormSelectedSubjects", default=[], castto=cast_json_str_to_list)
        })

    def check_group_guid_field(self, field):
        """
        """
        if not field.value:
            field.value = "new"

        if field.value == "new":
            return True

        groups = ProAdmin.application().get_groups(guid=field.value)
        if groups:
            field.svValue = groups[0]

        return bool(groups)

    def set_object(self, group_guid):
        """
        """
        groups = ProAdmin.application().get_groups(guid=group_guid)
        self.object = groups[0] if groups else None

    def get_objects(self, widget):
        """
        """
        return sorted(ProAdmin.application().get_users(), key=lambda usr: usr.name.lower())

    def fill_users_table(self, datatable, attention):
        """
        """
        table_w = SubjectsDatatable(datasource=self, delegate=self.delegate)
        table_w.fill_args()

        if self.object:
            table_w.arguments["selectedRows"].value = [u.guid for u in self.object.get_users()]

        table_w.render(datatable, attention)

    def fill_form(self, vdom_objects):
        """
        """
        vdom_objects["ug.group_dialog.create"].action("hide", [""])
        vdom_objects["ug.group_dialog.save"].action("show", [""])
        vdom_objects["ug.group_dialog.title.new"].action("hide", [""])
        vdom_objects["ug.group_dialog.title.edit"].action("show", [""])
        vdom_objects["ug.group_dialog.form.search.throbber"].action("hide", [""])
        vdom_objects["ug.group_dialog.form.groupname.input"].action("setValue", [self.object.name])
        vdom_objects["ug.group_dialog.form.groupguid.input"].action("setValue", [self.object.guid])

        self.fill_users_list(
            vdom_objects["ug.group_dialog.form.search.table"],
            vdom_objects["ug.group_dialog.form.search.attention"]
        )

        vdom_objects["ug.group_dialog"].action("show", [""])


class UserForm(Form):

    def __init__(self, *args, **kwargs):
        super(UserForm, self).__init__(*args, **kwargs)
        self.object = None

    def init_fields(self):
        """
        """
        super(UserForm, self).init_fields()
        self.fields.update({
            "userGUID": self.Field("guid", default="", test=self.check_user_guid_field),
            "userLogin": self.Field("login", default="", test=self.check_user_login_field),
            "userPasswd": self.Field("password", default="", test=self.check_user_password_field),
            "userFirstName": self.Field("firstname", default=""),
            "userLastName": self.Field("lastname", default=""),
            "userEmail": self.Field("email", default=""),
            "userPhone": self.Field("phone", default=""),
            "userKeywords": self.Field("keywords", default=""),
            "selectedGroups": self.Field(svName="FormSelectedSubjects", default=[], castto=cast_json_str_to_list)
        })

    def check_user_guid_field(self, field):
        """
        """
        if not field.value:
            field.value = "new"

        if field.value == "new":
            return True

        users = ProAdmin.application().get_users(guid=field.value)
        if users:
            field.svValue = users[0]

        return bool(users)

    def check_user_login_field(self, field):
        """
        """
        if not field.value:
            return False

        if len(field.value) < 4:
            return False

        users = ProAdmin.application().get_users(email=field.value)
        if users:
            field.svValue = users[0]

        return not bool(users)

    def check_user_password_field(self, field):
        """
        """
        if not field.value:
            return ""

        return len(field.value) >= 6

    def set_object(self, user_guid):
        """
        """
        users = ProAdmin.application().get_users(guid=user_guid)
        self.object = users[0] if users else None

    def get_objects(self, widget):
        """
        """
        return sorted(ProAdmin.application().get_groups(), key=lambda usr: usr.name.lower())

    def fill_groups_table(self, datatable, attention):
        """
        """
        table_w = SubjectsDatatable(datasource=self, delegate=self.delegate)
        table_w.fill_args()

        if self.object:
            table_w.arguments["selectedRows"].value = [g.guid for g in self.object.get_groups()]

        table_w.render(datatable, attention)

    def fill_form(self, vdom_objects):
        """
        """
        vdom_objects["ug.user_dialog.create"].action("hide", [""])
        vdom_objects["ug.user_dialog.save"].action("show", [""])
        vdom_objects["ug.user_dialog.title.new"].action("hide", [""])
        vdom_objects["ug.user_dialog.title.edit"].action("show", [""])
        vdom_objects["ug.user_dialog.form.search.throbber"].action("hide", [""])

        vdom_objects["ug.user_dialog.form.login"].action("setValue", [self.object.email])
        vdom_objects["ug.user_dialog.form.password"].action("setValue", ["*"*6])
        vdom_objects["ug.user_dialog.form.vispassword"].action("setValue", ["*"*6])
        vdom_objects["ug.user_dialog.form.keywords"].action("setValue", [" ".join(self.object.keywords)])
        vdom_objects["ug.user_dialog.form.email"].action("setValue", [self.object.notification_email])
        vdom_objects["ug.user_dialog.form.firstname"].action("setValue", [self.object.first_name])
        vdom_objects["ug.user_dialog.form.lastname"].action("setValue", [self.object.last_name])
        vdom_objects["ug.user_dialog.form.phone"].action("setValue", [self.object.phone])
        vdom_objects["ug.user_dialog.form.guid"].action("setValue", [self.object.guid])
        vdom_objects["ug.user_dialog.form.search.table"].action("show", [""])

        self.fill_groups_table(
            vdom_objects["ug.user_dialog.form.search.table"],
            vdom_objects["ug.user_dialog.form.search.attention"]
        )

        vdom_objects["ug.user_dialog"].action("show", [""])

    def submit(self):
        """
        """
        submit_flag = False
        self.fields["userGUID"].is_valid()

        if self.fields["userGUID"].value == "new":
            if not self.fields["userLogin"].value:
                self.delegate.show_error_growl(
                    self.delegate.localization["ug.user.no_user_login.text"],
                    self.delegate.localization["ug.user.no_user_login.title"]
                )

            elif not self.fields["userLogin"].is_valid():
                self.delegate.show_error_growl(
                    self.delegate.localization["ug.user.user_login_exists.text"],
                    self.delegate.localization["ug.user.user_login_exists.title"]
                )

            else:
                submit_flag = True

        elif not self.fields["userGUID"].is_valid():
            self.delegate.show_error_growl(
                self.delegate.localization["ug.user.no_user_in_proadmin.text"],
                self.delegate.localization["ug.user.no_user_in_proadmin.title"]
            )

        else:
            submit_flag = True

        if not self.fields["userPasswd"].is_valid():
            self.delegate.show_error_growl(
                self.delegate.localization["ug.user.invalid_password.text"],
                self.delegate.localization["ug.user.invalid_password.title"]
            )
            submit_flag = False

        if not submit_flag:
            return

        user_guid = self.fields["userGUID"].value
        user = None

        if user_guid == "new":
            user = ProAdmin.application().create_user(self.fields["userLogin"].value)

        else:
            user = self.fields["userGUID"].svValue

        if self.fields["userPasswd"].value != "*"*6:
            user.password = self.fields["userPasswd"].value

        user.first_name = self.fields["userFirstName"].value
        user.last_name = self.fields["userLastName"].value
        user.notification_email = self.fields["userEmail"].value
        user.phone = self.fields["userPhone"].value
        user.keywords =  [k for k in self.fields["userKeywords"].value.split(" ")]
        user.save()

        sel_groups = set(self.fields["selectedGroups"].value)
        usr_groups = set([g.guid for g in user.get_groups()])

        to_del = list(usr_groups - sel_groups)
        to_add = list(sel_groups - usr_groups)

        for group in ProAdmin.application().get_groups():
            if group.guid in to_add:
                group.add_user(user)
                group.save()

            elif group.guid in to_del:
                group.remove_user(user)
                group.save()

        return True


class ProSuiteUsersAndGroupsPage(ProSuiteBasicPage):

    @callback('request_start', 2)
    @local_scheme
    @authenticated
    @administrator_only
    def on_request_start(self, *args, **kwargs):
        pass

    @callback('onload', 2)
    def onload(self, *args, **kwargs):
        """
        """
        self.render_datatable(self, True)

        per_page = OrderedDict()
        for i in range(10, 60, 10):
            per_page[str(i)] = str(i)

        self.vdom_objects["ug.per_page_list"].value = json.dumps(per_page)

    @CachedProperty
    def active_datatable(self):
        """
        """
        active_tab = self.get_argument("Name", "")
        if not active_tab:
            active_tab = self.shared_vars.get("currentTab", "user")

        self.shared_vars["currentTab"] = active_tab

        widget_cls = GroupsDatatable if active_tab == "group" else UsersDatatable
        table_w = widget_cls(prefix=active_tab, delegate=self)
        table_w.set_sv_prefix()
        table_w.fill_args()

        return table_w

    def get_page_title(self):
        return self.localization["prosuite.usergroups.title"]

    def get_localization_data(self):
        return {
            self.vdom_objects["ug.search"]: {
                "placeholder": "ug.search.placeholder",
                "title": "ug.search.title",
            },
            self.vdom_objects["ug.add_to_group_dialog.groupname"]: {
                "placeholder": "ug.add_to_group_dialog.groupname.placeholder",
                "title": "ug.add_to_group_dialog.groupname.title",
            },
            self.vdom_objects["ug.group_dialog.form.groupname.input"]: {
                "placeholder": "ug.group.form.groupname.input.placeholder"
            },
            self.vdom_objects["ug.group_dialog.form.search.input"]: {
                "placeholder": "ug.group.form.search.input.placeholder"
            },
            self.vdom_objects["ug.user_dialog.form.keywords.input"]: {
                "placeholder": "ug.user_dialog.form.keywords.input",
            },

            self.vdom_objects["ug.user_dialog.form.login.input"]: {
                "placeholder": "ug.user_dialog.form.login.input"
            },

            self.vdom_objects["ug.user_dialog.form.email.input"]: {
                "placeholder": "ug.user_dialog.form.email.input"
            },

            self.vdom_objects["ug.user_dialog.form.firstname.input"]: {
                "placeholder": "ug.user_dialog.form.firstname.input"
            },

            self.vdom_objects["ug.user_dialog.form.lastname.input"]: {
                "placeholder": "ug.user_dialog.form.lastname.input"
            },

            self.vdom_objects["ug.user_dialog.form.phone.input"]: {
                "placeholder": "ug.user_dialog.form.phone.input"
            },

            self.vdom_objects["ug.delete_dialog.attention"]: "ug.delete_dialog.attention",
            self.vdom_objects["ug.delete_dialog.cancel"]: "ug.delete_dialog.cancel",
            self.vdom_objects["ug.delete_dialog.submit"]: "ug.delete_dialog.submit",

            self.vdom_objects["ug.add_to_group_dialog"]: "ug.add_to_group_dialog",
            self.vdom_objects["ug.add_to_group_dialog.submit"]: "ug.add_to_group_dialog.submit",
            self.vdom_objects["ug.add_to_group_dialog.cancel"]: "ug.add_to_group_dialog.cancel",
            self.vdom_objects["ug.add_to_group_dialog.to"]: "ug.add_to_group_dialog.to",

            self.vdom_objects["ug.toolbar.delete_selected"]: "ug.toolbar.delete_selected",
            self.vdom_objects["ug.toolbar.create_user"]: "ug.toolbar.create_user",
            self.vdom_objects["ug.toolbar.create_group"]: "ug.toolbar.create_group",
            self.vdom_objects["ug.toolbar.add_to_group"]: "ug.toolbar.add_to_group",

            self.vdom_objects["ug.group_dialog.create"]: "ug.group.form.create",
            self.vdom_objects["ug.group_dialog.cancel"]: "ug.group.form.cancel",
            self.vdom_objects["ug.group_dialog.save"]: "ug.group.form.save",
            self.vdom_objects["ug.group_dialog.title.edit"]: "ug.group.form.title.edit",
            self.vdom_objects["ug.group_dialog.title.new"]: "ug.group.form.title.new",
            self.vdom_objects["ug.group_dialog.form.groupname.title"]: "ug.group.form.groupname.input.title",
            self.vdom_objects["ug.group_dialog.form.search.input.title"]: "ug.group.form.search.input.title",
            self.vdom_objects["ug.group_dialog.form.search.title"]: "ug.group.form.search.title",

            self.vdom_objects["ug.user_dialog.create"]: "ug.user_dialog.create",
            self.vdom_objects["ug.user_dialog.cancel"]: "ug.user_dialog.cancel",
            self.vdom_objects["ug.user_dialog.save"]: "ug.user_dialog.save",
            self.vdom_objects["ug.user_dialog.title.edit"]: "ug.user_dialog.title.edit",
            self.vdom_objects["ug.user_dialog.title.new"]: "ug.user_dialog.title.new",
            self.vdom_objects["ug.user_dialog.to_groups"]: "ug.user_dialog.to_groups",
            self.vdom_objects["ug.user_dialog.to_info"]: "ug.user_dialog.to_info",
            self.vdom_objects["ug.user_dialog.groups.select.title"]: "ug.user_dialog.groups.select.title",
            self.vdom_objects["ug.user_dialog.form.generate_passwd"]: "ug.user_dialog.form.generate_passwd",
            self.vdom_objects["ug.user_dialog.form.keywords.title"]: "ug.user_dialog.form.keywords.title",
            self.vdom_objects["ug.user_dialog.form.login.title"]: "ug.user_dialog.form.login.title",
            self.vdom_objects["ug.user_dialog.form.password.title"]: "ug.user_dialog.form.password.title",
            self.vdom_objects["ug.user_dialog.form.email.title"]: "ug.user_dialog.form.email.title",
            self.vdom_objects["ug.user_dialog.form.firstname.title"]: "ug.user_dialog.form.firstname.title",
            self.vdom_objects["ug.user_dialog.form.lastname.title"]: "ug.user_dialog.form.lastname.title",
            self.vdom_objects["ug.user_dialog.form.phone.title"]: "ug.user_dialog.form.phone.title",
        }

    ############################
    ############################
    ############################
    @callback
    def render_datatable(self, groups_list=False, *args, **kwargs):
        """
        """
        self.active_datatable.render(
            self.vdom_objects["ug.table.attention"],
            self.vdom_objects["ug.table"],
            self.vdom_objects["ug.pager"],
            self.vdom_objects["ug.per_page_list"],
            self.vdom_objects["ug.search"],
        )

        if groups_list and isinstance(self.active_datatable, UsersDatatable):
            self.active_datatable.render_groups_list(self.vdom_objects["ug.groups.list"])

    @callback
    def change_datasource(self, *args, **kwargs):
        """
        """
        if isinstance(self.active_datatable, UsersDatatable):
            self.vdom_objects["ug.toolbar.create_user"].action("show", [""])
            self.vdom_objects["ug.toolbar.create_group"].action("hide", [""])
            self.vdom_objects["ug.toolbar.add_to_group"].action("show", [""])
            self.vdom_objects["ug.groups"].action("show", [""])

        else:
            self.vdom_objects["ug.toolbar.create_group"].action("show", [""])
            self.vdom_objects["ug.toolbar.create_user"].action("hide", [""])
            self.vdom_objects["ug.toolbar.add_to_group"].action("hide", [""])
            self.vdom_objects["ug.groups"].action("hide", [""])

        self.render_datatable(self, True)


    @callback
    def show_delete_selected_dialog(self, *args, **kwargs):
        """
        """
        form = DeleteSelectedObjectsForm(self)
        fill_flag = form.fill_form(
            self.active_datatable.selected_rows,
            self.vdom_objects["ug.delete_dialog.objects"]
        )

        if fill_flag:
            self.vdom_objects["ug.delete_dialog"].action("show", [""])

    @callback
    def submit_delete_selected_dialog(self, *args, **kwargs):
        """
        """
        form = DeleteSelectedObjectsForm(self)
        form.fill_fields()

        if form.submit():
            self.vdom_objects["ug.delete_dialog"].action("hide", [""])
            self.render_datatable(self)

    @callback
    def show_add_selected_to_group_dialog(self, *args, **kwargs):
        """
        """
        form = AddUsersToGroupForm(self)
        fill_flag = form.fill_form(
            self.active_datatable.selected_rows,
            self.vdom_objects["ug.add_to_group_dialog.users"],
            self.vdom_objects["ug.add_to_group_dialog.group"]
        )

        if fill_flag:
            self.vdom_objects["ug.add_to_group_dialog"].action("show", [""])

    @callback
    def submit_add_selected_to_group_dialog(self, *args, **kwargs):
        """
        """
        form = AddUsersToGroupForm(self)
        form.fill_fields()

        if form.submit():
            self.vdom_objects["ug.add_to_group_dialog"].action("hide", [""])
            self.render_datatable(self, True)

    @callback
    def search_users(self, *args, **kwargs):
        """
        """
        form = GroupForm(self)
        form.fill_users_table(
            self.vdom_objects["form.group.search.table"],
            self.vdom_objects["form.group.search.attention"]
        )

        self.vdom_objects["form.group.search.throbber"].action("hide", [""])

    @callback
    def search_groups(self, *args, **kwargs):
        """
        """
        form = UserForm(self)
        form.fill_groups_table(
            self.vdom_objects["form.user.search.table"],
            self.vdom_objects["form.user.search.attention"]
        )

        self.vdom_objects["form.user.search.throbber"].action("hide", [""])

    @callback
    def submit_group_form(self, *args, **kwargs):
        """
        """
        form = GroupForm(self)
        form.fill_fields()

        if form.submit():
            self.vdom_objects["ug.group_dialog"].action("hide", [""])
            self.render_datatable(self, True)

    @callback
    def table_cell_click(self, *args, **kwargs):
        """
        """
        if not self.active_datatable.is_edit_cell(self.get_argument("headerData", "")):
            return

        form_cls = GroupForm if isinstance(self.active_datatable, GroupsDatatable) else UserForm

        form = form_cls(self)
        form.set_object(self.get_argument("keyField"))

        if not form.object:
            self.show_error_growl(
                self.localization["ug.form.group.group_not_exists.text"],
                self.localization["ug.form.group.group_not_exists.title"]
            )
            return

        form.fill_form(self.vdom_objects)

    @callback
    def submit_user_form(self, *args, **kwargs):
        """
        """
        form = UserForm(self)
        form.fill_fields()

        if form.submit():
            self.vdom_objects["ug.user_dialog"].action("hide", [""])
            self.render_datatable(self, True)




]]>
		</Library>
		<Library Name="widget_macros">
<![CDATA[import json
from collections import OrderedDict
from class_plugins import Plugins

DEFAULT_MACRO_IMG  = "<img src='/b41299d0-b0bc-4d31-a320-ed5eb62568ca.png'/>"
DEFAULT_PLUGIN_IMG = "<img src='/abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png'/>"
DEFAULT_VDOM_CLASS_ID = "c9b2a813-7c02-4833-875c-9d260bf9b3b6"

CONFIG_MACRO_NAME = "config"


class WidgetMacros:

	def __init__( self ):
		self.pictures = []
		self.buttons = []

	def fetch_data( self, page_name ):

		plugins = Plugins.get_all()

		for plugin in plugins:

			board_macros_count = 0
			macros_on_page_count = 0
			for macros in plugin.get_macros():

				if 	macros.is_button_macros == "1" and \
								macros.page == page_name and \
								macros.name != CONFIG_MACRO_NAME:


					macros_on_page_count += 1

					if macros.on_board	!= "1": continue

					board_macros_count += 1

					if macros.macros_picture:
						self.pictures.append( macros.macros_picture )

					self.buttons.append({
						"guid"		: "m_" + macros.guid,
						"data"		: json.dumps({
										"name"		: macros.name,
										"picture"	: "<img src='/get_image?id=%s'/>" % macros.macros_picture if macros.macros_picture else DEFAULT_MACRO_IMG
									}),
						"position"	: macros.zindex,
						})

			if macros_on_page_count > board_macros_count:
				if plugin.picture:
					self.pictures.append( plugin.picture )

				self.buttons.append({
						"guid"		: "p_" + plugin.guid,
						"data"		: json.dumps({
										"name"		: plugin.name,
										"picture"	: "<img src='/get_image?id=%s'/>" % plugin.picture if plugin.picture else DEFAULT_PLUGIN_IMG
									}),
						"position"	: plugin.zindex,
						})

	def get_data( self ):
		return OrderedDict( [ ( item['guid'], item['data'] ) \
								for item in sorted( self.buttons, key = lambda k: k['position'] ) ] )


	def set_img( self ):
		from cStringIO import StringIO
		html_buffer = StringIO()
		html_buffer.write( "<div class='img-grid'>" )
		html_buffer.writelines( [ "<img src='/get_image?id=%s'/>" % pic_guid for pic_guid in self.pictures[:4] ] )
		html_buffer.write( "</div>" )
		return html_buffer.getvalue()



	def render(self, objectview, img_holder=None, header_button=None, page_name=None):
		self.fetch_data( page_name )
		if self.buttons:
			objectview.vdomclassid = DEFAULT_VDOM_CLASS_ID
			objectview.data = json.dumps( self.get_data() )
			if img_holder:	img_holder.htmlcode = self.set_img()
		else:
			header_button.visible = "0"

]]>
		</Library>
		<Library Name="proadmin_remote_sync">
<![CDATA[import ProAdmin

# define serialization format
import json

# define serializationt
Serialization = json



# def debug_print( *args ):
# 	marker = args[-1]
# 	if len( str(marker) ) == 1:
# 		args = args[ :-1 ]
# 	else:
# 		marker = '-'
# 	marker = marker or '-'

# 	text = [ '%s' % s for s in args ]
# 	text = ', '.join( text )

# 	debug( '' )
# 	debug( marker * 35 )

# 	debug( '%s' % text )

# 	debug( marker * 35 )
# 	debug( '' )




class APIFormat( object ):
	""" implement methods for create reponses of Remote API methods
	"""
	@classmethod
	def success_result( self, args=None ):
		return Serialization.dumps( [ 'success', args ] )

	@classmethod
	def error_result( self, args=None ):
		return Serialization.dumps( [ 'error', args ] )

	@classmethod
	def request( self, app_guid, data ):
		return Serialization.dumps( [ app_guid, data ] )

	@classmethod
	def parse_response( self, response ):
		try:
			response = Serialization.loads( response )
		except:
			response = response.rsplit( '\n', 1 )[0] # remove sid-code (VDOMService bug)
			response = Serialization.loads( response )

		status = response[0] if len( response ) > 0 else None
		result = response[1] if len( response ) > 1 else None

		return (status, result)







# ------------------------------------------------------------------------------------------------------------------------------------------------------------
#		FORMAT CLASSES
# ------------------------------------------------------------------------------------------------------------------------------------------------------------


class SyncFormat( object ):
	""" Base class for all formats
	"""
	def __init__( self ):
		self.structure 	= [
			'SyncObject', 	# type
			{} 				# attributes
		]

	@property
	def type( self ):
		return self.structure[ 0 ]

	@type.setter
	def type( self, value ):
		self.structure[ 0 ] = value

	@property
	def attributes( self ):
		return self.structure[ 1 ]

	@attributes.setter
	def attributes( self, value ):
		self.structure[ 1 ] = value


	def get_object( self ):
		return self._deserialize()


	def _serialize( self, object ):
		pass

	def _deserialize( self ):
		pass

	@classmethod
	def from_object( self, object ):
		return self()._serialize( object )

	@classmethod
	def from_structure( self, structure ):
		result = self()
		result.structure = structure

		return result



class ACLObjectSyncFormat( SyncFormat ):
	""" Format for ACLObject-instances
	"""
	def __init__( self ):
		SyncFormat.__init__( self )
		self.type = 'ACLObject'


	def _serialize( self, object ):
		if not object:
			return None

		# get object rules
		rules = {}
		for rule in object.rules():
			if not rule.subject:
				rule.delete()
				continue

			subject_guid = rule.subject.guid

			if subject_guid not in rules:
				rules[ subject_guid ] = []

			rules[ subject_guid ].append( rule.access )

		self.attributes =  {
			'guid'		: object.guid,
			'name'		: object.name,
			'type'		: object.type,
			'rules'		: rules,
			'parent'	: object.parent.guid if object.parent else None,
			'childs'	: [ child.guid for child in object.child_objects() ],
		}

		return self


	def _deserialize( self ):
		args = self.attributes

		guid = args[ 'guid' ]
		type = args[ 'type' ]
		name = args[ 'name' ]

		parent_guid = args[ 'parent' ]

		# get parent object
		parent = ProAdmin.application() if not parent_guid else ProAdmin.application().get_by_guid( parent_guid )

		if not parent:
			return None

		object = parent.get_by_guid( guid )
		if not object:
			object = parent.create_child( name=name, type=type )

		object.guid = guid
		object.name = name

		
		rules = args[ 'rules' ]
		
		# get needed application subjects
		app = ProAdmin.application()
		subjects = [ app.get_subject(g) for g in rules ]
		subjects = { s.guid : s for s in subjects if s }

		# remove old rules
		for rule in object.rules():
			if rule.access not in rules.get( rule.subject.guid, [] ):
				object.remove_rule( rule.subject, rule.access )
		
		# set new rules
		for subject_guid in rules:
			subject = subjects.get( subject_guid, None )
			[ object.add_rule( subject, right ) for right in rules[ subject_guid ] if subject and right ]

		return object




class UserSyncFormat( SyncFormat ):
	""" Format for User-instances
	"""
	def __init__( self ):
		SyncFormat.__init__( self )
		self.type = 'User'


	def _serialize( self, user ):
		if not user:
			return None

		self.attributes = {
			'guid'					: user.guid,
			'email'					: user.email,
			'first_name'			: user.first_name,
			'last_name'				: user.last_name,
			'phone'					: user.phone,
			'password'				: user.password,
			'notification_email'	: user.notification_email,
			'cell_phone'			: user.cell_phone,
			'country'				: user.country,
			'keywords'				: user.keywords,
			'root'					: True if ProAdmin.scheme().get_option( 'root_user' ) == user.email else False,
		}

		return self


	def _deserialize( self ):
		args = self.attributes

		guid 	= args[ 'guid' ]
		email 	= args[ 'email' ]

		# check if user exist
		user = ProAdmin.application().create_user( email=email )

		user.guid 		= guid
		user.first_name = args[ 'first_name' ]
		user.last_name 	= args[ 'last_name' ]
		user.phone 		= args[ 'phone' ]
		user.cell_phone = args[ 'cell_phone' ]
		user.country 	= args[ 'country' ]
		user.keywords	= args[ 'keywords' ]
		user.notification_email = args[ 'notification_email' ]
		user.set_password_hash( args[ 'password' ] )

		if args.get( 'root', False ):
			ProAdmin.scheme().set_option( 'root_user', user.email )

		return user





class GroupSyncFormat( SyncFormat ):
	""" Format for Group-instances
	"""
	def __init__( self ):
		SyncFormat.__init__( self )
		self.type = 'Group'

	def _serialize( self, group ):
		if not group:
			return None

		# get group's users guids
		members = [ user.guid for user in group.get_users() ]

		self.attributes = {
			'guid'		: group.guid,
			'name'		: group.name,
			'members'	: members,
		}

		return self



	def _deserialize( self ):
		args = self.attributes

		guid 	= args[ 'guid' ]
		name 	= args[ 'name' ]
		members = args[ 'members' ]

		# check if group exist
		groups = ProAdmin.application().get_groups( guid=guid )

		# skip Everyone group
		if groups and groups[0]._is_everyone_group():
			return groups[0]

		group = ProAdmin.application().create_group( name=name )
		group.guid = guid

		# delete all users from group
		[ group.remove_user( user ) for user in group.get_users() ]

		# add new list
		for user_guid in members:
			users = ProAdmin.application().get_users( guid=user_guid )
			[ group.add_user( users[0] ) if users else None ]

		return group




class SubjectSyncFormat( SyncFormat ):
	""" Common subjects-format
	"""
	@classmethod
	def from_object( self, subject ):
		if subject.is_user():
			return UserSyncFormat.from_object( subject )

		if subject.is_group():
			return GroupSyncFormat.from_object( subject )

		return None


	@classmethod
	def from_structure( self, subject_struct ):
		if subject_struct[0].lower() == 'user':
			return UserSyncFormat.from_structure( subject_struct )

		if subject_struct[0].lower() == 'group':
			return GroupSyncFormat.from_structure( subject_struct )

		return None






# ------------------------------------------------------------------------------------------------------------------------------------------------------------
#		SYNC CLASS
# ------------------------------------------------------------------------------------------------------------------------------------------------------------



class RemoteSync( object ):

	API_OBJECTS_PER_REQUEST = 100 # limitation of structures for one api call request


	# --------------------
	#	SUBJECTS
	# --------------------

	@classmethod
	def _create_subject_structures( self, subjects ):
		return [ SubjectSyncFormat.from_object( subj ).structure for subj in subjects ]


	@classmethod
	def get_subjects_structures( self ):
		return self._create_subject_structures( ProAdmin.application().get_subjects() )


	@classmethod
	def apply_subjects_structures( self, structures ):
		# accept new subjects
		subjects_formats = [ SubjectSyncFormat.from_structure( structure ) for structure in structures ]
		subjects = [ format.get_object() for format in subjects_formats ]

		subject_guids = [ subject.guid for subject in subjects ]

		# remove old application subjects
		[ subject.delete() for subject in ProAdmin.application().get_subjects() if subject.guid not in subject_guids ]

		# accept new subjects
		[ subject.save() for subject in subjects ]



	# --------------------
	#	OBJECTS
	# --------------------

	@classmethod
	def sort_aclobjects( self, objects ):
		""" sort list of acl objects by tree-level. Firstly root than first level, second etc
		"""
		objects = objects or []

		def compare( a,b ):
			# ??
			i = len( a.guid )
			j = len( a.guid )
			return cmp( i, j )

		objects.sort( cmp=compare )
		return objects


	@classmethod
	def get_dirty_objects( self, root=None, limit=None ):
		""" return list of objects that need to sync
		"""
		if not root:
			ProAdmin.application().refresh()
			root = ProAdmin.application()
			
		return [ root ] if root.is_dirty() else []
		
		objects = []
		def deep( obj ):
			if limit is not None and len( objects ) >= limit:
				return

			if obj.is_dirty():
				objects.append( obj )
			
			# sync of objects disabled
			#for o in obj.child_objects():
			#	deep( o )

		deep( root )
		
		return self.sort_aclobjects( objects )


	@classmethod
	def _create_object_structures( self, objects ):
		return [ ACLObjectSyncFormat.from_object( obj ).structure for obj in objects ]


	@classmethod
	def get_objects_structures( self, root=None ):
		"""
		"""
		if not root:
			root = ProAdmin.application()

		objects = self.get_dirty_objects( root )
		return self._create_object_structures( objects )



	@classmethod
	def apply_objects_structures( self, structures, rights_only=False ):
		""" apply changes from update (commit) arguments
		"""
		# disable deleting of child objects if rights_only mode
		delete_childs = False if rights_only else True

		def is_equal( a,b ):
			""" compare acl objects
			"""
			return False # TODO: compare by rules

			if not a or not b: return False
			
			# compare guids
			if a.guid != b.guid: return False

			# compare names:
			if a.name != b.name: return False

			# compare type
			if a.type != b.type: return False

			return True




		def deep_update( object_guid ):
			""" update chain from object to parent to parent to.. root-object
				remove updated object from dictionary
			"""
			object_struct = objects.pop( object_guid )

			# get parent guid
			parent_guid = object_struct[1][ 'parent' ]

			# check may be parent in upadte-dictionary
			if parent_guid and parent_guid in objects:
				deep_update( parent_guid )

			object_format = ACLObjectSyncFormat.from_structure( object_struct )
			object = object_format.get_object()
			if not object: return 

			# get old ACL object
			old_obj = ProAdmin.application().get_by_guid( object.guid )

			# restore object attributes if rights_only mode
			if rights_only:
				if not old_obj: return
				object.name = old_obj.name
				# TODO: maybe another attributes

			#ignore childs due to disable objets sync
			# remove childs if need
			#childs = object_format.attributes.get( 'childs', None )
			#childs = childs if childs is not None else [ child.guid for child in object.child_objects() ]

			# delete rules of childs if it's was removed
			#for child in object.child_objects():
			#	if child.guid in childs: continue
			#
			#	if delete_childs:
			#		child.delete( False )
			#	else:
			#		[ r.delete() for r in child.rules() ]


			# compare old object and new object
			# apply new object if it changed

			# if was dirty - need to clear dirty bit
			if not is_equal( object, old_obj ) or old_obj.is_dirty():
				object.is_new = None #not sure if new
				object.clear_dirty_bit()
				object.save()



		objects = { obj[1]['guid']: obj for obj in structures }

		# update it localy
		while( objects ):
			object_guid = objects.keys()[0]
			deep_update( object_guid )












class RemoteSyncClient( RemoteSync ):
	""" implement sync-operations
	"""
	def __init__( self, service ):
		RemoteSync.__init__( self )

		self._service = service
		self._connection = None


	def get_connection( self ):
		if not self._service: return None

		if not self._connection:
			from proadmin_api_connection import APIConnection

			# sync API container
			sync_api = '19a67ddc-a792-41fd-bbee-b5190126b6dc'

			# create connection
			self._connection = APIConnection( self._service, sync_api )
			self._connection.set_application_id( application.id )

		return self._connection


	@property
	def last_error( self ):
		conn = self.get_connection()
		if not conn: return None

		return conn.last_error



	def safe_call( self, action, params=None ):
		from proadmin_api_connection import APIError
		#import pprint
		#print ">>>>safe_call", action
		#pprint.pprint( params );
		#print

		connection = self.get_connection()

		try:
			r = connection.call( action, params )
			#pprint.pprint( r );
			#print
			return r
			
		except APIError as error:
			#print "!!!!", error.message
			self.process_error( error.message )
			


	def process_error( self, error ):
		""" process synchronization API errors
		"""
		if error == 'ApplicationIsNotRegistered':
			# Application was deleted in ProAdmin - now need to switch scheme to local
			
			# remove remote settings
			from proadmin_remote_settings import RemoteSettings
			RemoteSettings.delete()

			# unregister current scheme
			ProAdmin.stop_sync()
			ProAdmin.unregister_default_scheme()



	def register( self ):
		""" register Application in ProAdmin
		"""
		# create application
		connection = self.get_connection()
		scheme = ProAdmin.application().scheme

		connection.set_application_id( scheme.guid )

		# create ACLObjectTypes structures
		objecttypes = []
		for obj_type in scheme.get_aclobjecttypes():
			structure = {
				'guid'  			: obj_type.guid,
				'name'  			: obj_type.name,
				'icon'  			: obj_type.icon.get_resource_url() if obj_type.icon else '',
				'access_rights'  	: obj_type.get_access_types(),
			}

			objecttypes.append( structure )

		# prepare call arguments
		args = {
			'object_guid'		: scheme.guid,
			'name'				: scheme.name,
			'icon'				: scheme.get_application_icon_url() if scheme.icon else '',
			'acl_objecttypes'	: objecttypes,
			'api_guid'			: scheme.get_option( 'api_guid', '' ),
			'hosts'				: ProAdmin.hosts(),
		}

		return connection.call( 'register', args )


	def register_sync( self ):
		# update objects
		self.update_objects( rights_only=True, register_sync=True )

		# commit all objects
		self._commit_all_objects()




	def get_registered_applications( self ):
		result = self.safe_call( 'registred_applications' )
		return result

	def get_registred_applications( self, *args, **kwargs ):
		""" obsolete. need for compatibility
		"""
		return self.get_registered_applications( *args, **kwargs )



	def update_subjects( self ):
		# as ksubjects from proadmin
		structs = self.safe_call( 'update_subjects' ) or []
		if not structs: return

		# apply structures
		self.apply_subjects_structures( structs )



	def update_objects( self, rights_only=False, register_sync=False ):		
		limit 	= RemoteSync.API_OBJECTS_PER_REQUEST
		args 	= {}
		objects = []

		# call list of objects for register sync
		if register_sync:
			args = {
				'register_sync_update'	: True,
			}

			objects = self.safe_call( 'update_objects', args )


		while True:
			# call concrete list of objects for register sync
			if register_sync:
				args = {
					'register_sync_update'	: True,
					'objects'				: objects[ :limit ],
				}

				objects = objects[ limit: ]

			# ask objects from ProAdmin application
			structs = self.safe_call( 'update_objects', args ) or []
			if self.last_error is not None: return
			if not structs: return

			# apply it locally
			self.apply_objects_structures( structs, rights_only )



	def commit_objects( self, objects=None ):
		limit = RemoteSync.API_OBJECTS_PER_REQUEST
		if objects: objects = self.sort_aclobjects( objects )

		# implement commit method by parts of data
		while True:
			# get part of data from obejcts list or from application dirty objects
			part = []
			if objects is None:
				part = self.get_dirty_objects( limit=limit )
			else:
				part = objects[ :limit ]
				objects = objects[ limit: ]

			if not part: return

			structs = self._create_object_structures( part )
			self.safe_call( 'commit_objects', structs )
			if self.last_error is not None: return

			# clear dirty-bit
			for obj in part:
				obj.clear_dirty_bit()
				obj.save()



	def _commit_all_objects( self ):
		objects = [ ProAdmin.application() ] #+ ProAdmin.application().child_objects( recursive=True ) #disable object sync except for application
		return self.commit_objects( objects )



	def check_password( self, email, password ):
		result = self.safe_call( action_name = 'check_password', params = { 'login': email, 'password': password } )
		return result



	def proadmin_version( self, details=False ):
		try:
			params = { 'details' : details }
			return self.safe_call( 'version', params )
		except:
			pass

		if self.get_registred_applications():
			return 'less than v.1.1.06'

		return None


	def create_user( self ):
		pass


	def create_group( self, name, users=None ):
		if not name: return None
		users = users or []

		params = {
			'name'		: name,
			'users'		: users,
		}

		return self.safe_call( 'create_group', params )















class RemoteSyncServer( RemoteSync ):

	def __init__( self ):
		RemoteSync.__init__( self )

		self.guid_map = {}



	def guid( self, guid ):
		""" guid-mapping
		"""
		if guid in self.guid_map:
			return self.guid_map[ guid ]

		return guid



	def commit_objects( self, real_guid, app, args ):
		""" implementation of commit objects in server
		"""
		# update guids by map
		self.guid_map[ real_guid ] = app.guid

		for obj in args:
			obj[1]['guid'] 		= self.guid( obj[1]['guid'] )
			obj[1]['parent']	= self.guid( obj[1]['parent'] )

		RemoteSync.apply_objects_structures( args )




	def update_objects( self, real_guid, app, args ):
		"""
		"""
		args 	= args or {}
		limit 	= RemoteSync.API_OBJECTS_PER_REQUEST
		objects = []

		# for first sync get objects from session
		if 'register_sync_update' in args:
			
			# return list of all guids for first request
			if 'objects' not in args:
				childs = app.child_objects( recursive=True )
				return [ o.guid for o in self.sort_aclobjects( childs )  ]
			
			# get objects for asked guids
			guids = args.get( 'objects', [] )
			objects = [ app.get_by_guid( g ) for g in guids ]
		
		else:
			objects = self.get_dirty_objects( root=app, limit=limit )
		
		structs = self._create_object_structures( objects )

		# modify guids
		self.guid_map[ app.guid ] = real_guid
		self.guid_map[ ProAdmin.application().guid ] = ''

		for s in structs:
			s[1]['guid'] 	= self.guid( s[1]['guid'] )
			s[1]['parent'] 	= self.guid( s[1]['parent'] )

		# clear dirty objects
		for obj in objects:
			obj.clear_dirty_bit()
			obj.save()

		return structs



	def update_subjects( self, app, args ):
		"""
		"""
		return RemoteSync.get_subjects_structures()


	def check_password( self, app, args ):
		email = args[ 'login' ]
		password = args[ 'password' ]

		users = ProAdmin.application().get_users( email )
		user = users[0] if users else None

		if not user: return False
		return user.check_password( password )



	def create_group( self, app, args ):
		""" create group in ProAdmin from SYNC API
		"""
		return ProAdmin.create_group( name=args.get('name'), users=args.get('users') )


	def create_user( self, app, args ):
		"""
		"""
		pass

]]>
		</Library>
		<Library Name="widget_resource">
<![CDATA[import json
from VEE_resources import ResourceFolderManager
import mimetypes


class WidgetResource:
	def __init__(self):
		self.__datatable = None
		self.__resource_list = None

	def set_data(self, data, plugin_guid):
		resources = []
		for res in data:
			mimetype = mimetypes.guess_type( res, strict=False )[0]
			resources.append({"id": res,
					"Picture" : "<img src='" + ResourceFolderManager(plugin_guid).public_link( res ) + "' />" if mimetype and "image" in mimetype else "<img src='358b703e-65e9-4a71-ab7f-e1bab238f027.res' />",
					"Name" : res,
					"Export" : "",
					"Delete" : "<a href=''>Delete</a>"})
		self.__resource_list = json.dumps(resources)

	def render(self, datatable = None):
		if datatable:
			self.__datatable = datatable
			self.__datatable.data = self.__resource_list
]]>
		</Library>
		<Library Name="prosuite_storage">
<![CDATA["""
ProSuite File Storage
"""

import md5
from os import path as os_path


class VDOMFileStorage(object):

    @classmethod
    def open(cls, path, mode='r'):
        return application.storage.open(path, mode)

    @classmethod
    def write(cls, path, content):
        application.storage.write(path, content)

    @classmethod
    def remove(cls, path):
        application.storage.delete(path)

    @classmethod
    def exists(cls, path):
        return application.storage.exists(path)

    @classmethod
    def size(cls, path):
        return application.storage.getsize(path)

    @classmethod
    def rmtree(cls, path):
        application.storage.rmtree(path)

    @classmethod
    def list(cls, path):
        return application.storage.listdir(path)

    @classmethod
    def isdir(cls, path):
        return application.storage.isdir(path)

    @classmethod
    def isfile(cls, path):
        return application.storage.isfile(path)

    @classmethod
    def mkdir(cls, path):
        application.storage.mkdir(path)


def md5path(create=True):

    def decorator_func(func):

        def wrapper(cls, path, *args, **kwargs):

            # path to md5 hash sum
            path = md5.new(path).hexdigest()

            # took 2 fist chars of md5 hash sum
            folder = cls.join(cls.root, *path[:2])
            if not VDOMFileStorage.exists(folder) and create:
                VDOMFileStorage.mkdir(folder)

            # new path
            path = cls.join(folder, path[2:])

            return func(cls, path, *args, **kwargs)

        return wrapper

    if callable(create):
        return decorator_func(create)

    return decorator_func


class ProSuiteDatastore(object):

    root = 'datastore'

    @classmethod
    def initialize(cls):
        try:
            VDOMFileStorage.mkdir(cls.root)
        except:
            pass

    @classmethod
    def join(cls, *args):
        return os_path.join(*args)

    @classmethod
    def add_child(cls, child):
        return cls.join(cls.root, child)

    @classmethod
    def clear(cls):
        VDOMFileStorage.rmtree(cls.root)
        cls.initialize()

    @classmethod
    @md5path
    def open(cls, path, mode='r'):
        return VDOMFileStorage.open(path, mode=mode)

    @classmethod
    @md5path
    def write(cls, path, content):
        VDOMFileStorage.write(path, content)

    @classmethod
    @md5path(create=False)
    def remove(cls, path):
        VDOMFileStorage.remove(path)

    @classmethod
    @md5path(create=False)
    def exists(cls, path):
        return VDOMFileStorage.exists(path)

    @classmethod
    @md5path(create=False)
    def size(cls, path):
        return VDOMFileStorage.size(path)


class ProSuiteFileStorage(ProSuiteDatastore):

    root = ProSuiteDatastore.add_child('prosuite')




]]>
		</Library>
		<Library Name="ProSuiteLogoffPage">
<![CDATA["""
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 23:40 (RTZ +5)"


from urllib import urlencode

import ProAdmin

from proadmin_sso import SSOUrl
from prosuite_web import ProSuiteBasicPage, callback


class ProSuiteLogoffPage(ProSuiteBasicPage):

    @callback('redirectToLogin')
    def redirect_to_login(self, *args, **kwargs):
        """
        Redirect to login page
        """
        back_url = self.shared_vars.get("back_url", "")
        redirect_to = self.get_login_url()

        if back_url:
            redirect_to += "?" + urlencode({"back_url": back_url})

        # remote scheme
        if ProAdmin.scheme().is_remote():
            app_host = SSOUrl.current_protocol() + "://" + SSOUrl.current_host()

            url = SSOUrl.proadmin_url(self.app_settings.pages["logoff"])
            url.cont_url = app_host + redirect_to
            redirect_to = url.build()

        try:
            self.redirect(redirect_to)

        except Exception as ex:
            raise Exception(str(ex))

    @callback("onload", 2)
    def onload(self, *args, **kwargs):
        """
        On page onload
        """
        self.shared_vars["back_url"] = self.get_argument("back_url", "")

        try:
            ProAdmin.logoff()

        except:
            pass

    def get_page_title(self):
        return self.localization["prosuite.logoff.title"]

    def get_localization_data(self):
        return {
            self.vdom_objects["logoff.caption"]: "prosuite.logoff.dialog.caption",
            self.vdom_objects["logoff.message"]: "prosuite.logoff.dialog.message",
        }
]]>
		</Library>
		<Library Name="prosuite_localization_fr">
<![CDATA[localization = {
'fr': 'fr',
}]]>
		</Library>
		<Library Name="ext_enum">
<![CDATA["""Python Enumerations"""

import sys as _sys

__all__ = ['Enum', 'IntEnum', 'unique']

version = 1, 0, 4

pyver = float('%s.%s' % _sys.version_info[:2])

try:
    any
except NameError:
    def any(iterable):
        for element in iterable:
            if element:
                return True
        return False

try:
    from collections import OrderedDict
except ImportError:
    OrderedDict = None

try:
    basestring
except NameError:
    # In Python 2 basestring is the ancestor of both str and unicode
    # in Python 3 it's just str, but was missing in 3.1
    basestring = str

try:
    unicode
except NameError:
    # In Python 3 unicode no longer exists (it's just str)
    unicode = str

class _RouteClassAttributeToGetattr(object):
    """Route attribute access on a class to __getattr__.

    This is a descriptor, used to define attributes that act differently when
    accessed through an instance and through a class.  Instance access remains
    normal, but access to an attribute through a class will be routed to the
    class's __getattr__ method; this is done by raising AttributeError.

    """
    def __init__(self, fget=None):
        self.fget = fget

    def __get__(self, instance, ownerclass=None):
        if instance is None:
            raise AttributeError()
        return self.fget(instance)

    def __set__(self, instance, value):
        raise AttributeError("can't set attribute")

    def __delete__(self, instance):
        raise AttributeError("can't delete attribute")


def _is_descriptor(obj):
    """Returns True if obj is a descriptor, False otherwise."""
    return (
            hasattr(obj, '__get__') or
            hasattr(obj, '__set__') or
            hasattr(obj, '__delete__'))


def _is_dunder(name):
    """Returns True if a __dunder__ name, False otherwise."""
    return (name[:2] == name[-2:] == '__' and
            name[2:3] != '_' and
            name[-3:-2] != '_' and
            len(name) > 4)


def _is_sunder(name):
    """Returns True if a _sunder_ name, False otherwise."""
    return (name[0] == name[-1] == '_' and
            name[1:2] != '_' and
            name[-2:-1] != '_' and
            len(name) > 2)


def _make_class_unpicklable(cls):
    """Make the given class un-picklable."""
    def _break_on_call_reduce(self, protocol=None):
        raise TypeError('%r cannot be pickled' % self)
    cls.__reduce_ex__ = _break_on_call_reduce
    cls.__module__ = '<unknown>'


class _EnumDict(dict):
    """Track enum member order and ensure member names are not reused.

    EnumMeta will use the names found in self._member_names as the
    enumeration member names.

    """
    def __init__(self):
        super(_EnumDict, self).__init__()
        self._member_names = []

    def __setitem__(self, key, value):
        """Changes anything not dundered or not a descriptor.

        If a descriptor is added with the same name as an enum member, the name
        is removed from _member_names (this may leave a hole in the numerical
        sequence of values).

        If an enum member name is used twice, an error is raised; duplicate
        values are not checked for.

        Single underscore (sunder) names are reserved.

        Note:   in 3.x __order__ is simply discarded as a not necessary piece
                leftover from 2.x

        """
        if pyver >= 3.0 and key == '__order__':
                return
        if _is_sunder(key):
            raise ValueError('_names_ are reserved for future Enum use')
        elif _is_dunder(key):
            pass
        elif key in self._member_names:
            # descriptor overwriting an enum?
            raise TypeError('Attempted to reuse key: %r' % key)
        elif not _is_descriptor(value):
            if key in self:
                # enum overwriting a descriptor?
                raise TypeError('Key already defined as: %r' % self[key])
            self._member_names.append(key)
        super(_EnumDict, self).__setitem__(key, value)


# Dummy value for Enum as EnumMeta explicity checks for it, but of course until
# EnumMeta finishes running the first time the Enum class doesn't exist.  This
# is also why there are checks in EnumMeta like `if Enum is not None`
Enum = None


class EnumMeta(type):
    """Metaclass for Enum"""
    @classmethod
    def __prepare__(metacls, cls, bases):
        return _EnumDict()

    def __new__(metacls, cls, bases, classdict):
        # an Enum class is final once enumeration items have been defined; it
        # cannot be mixed with other types (int, float, etc.) if it has an
        # inherited __new__ unless a new __new__ is defined (or the resulting
        # class will fail).
        if type(classdict) is dict:
            original_dict = classdict
            classdict = _EnumDict()
            for k, v in original_dict.items():
                classdict[k] = v

        member_type, first_enum = metacls._get_mixins_(bases)
        __new__, save_new, use_args = metacls._find_new_(classdict, member_type,
                                                        first_enum)
        # save enum items into separate mapping so they don't get baked into
        # the new class
        members = dict((k, classdict[k]) for k in classdict._member_names)
        for name in classdict._member_names:
            del classdict[name]

        # py2 support for definition order
        __order__ = classdict.get('__order__')
        if __order__ is None:
            if pyver < 3.0:
                try:
                    __order__ = [name for (name, value) in sorted(members.items(), key=lambda item: item[1])]
                except TypeError:
                    __order__ = [name for name in sorted(members.keys())]
            else:
                __order__ = classdict._member_names
        else:
            del classdict['__order__']
            if pyver < 3.0:
                __order__ = __order__.replace(',', ' ').split()
                aliases = [name for name in members if name not in __order__]
                __order__ += aliases

        # check for illegal enum names (any others?)
        invalid_names = set(members) & set(['mro'])
        if invalid_names:
            raise ValueError('Invalid enum member name(s): %s' % (
                ', '.join(invalid_names), ))

        # create our new Enum type
        enum_class = super(EnumMeta, metacls).__new__(metacls, cls, bases, classdict)
        enum_class._member_names_ = []               # names in random order
        if OrderedDict is not None:
            enum_class._member_map_ = OrderedDict()
        else:
            enum_class._member_map_ = {}             # name->value map
        enum_class._member_type_ = member_type

        # Reverse value->name map for hashable values.
        enum_class._value2member_map_ = {}

        # instantiate them, checking for duplicates as we go
        # we instantiate first instead of checking for duplicates first in case
        # a custom __new__ is doing something funky with the values -- such as
        # auto-numbering ;)
        if __new__ is None:
            __new__ = enum_class.__new__
        for member_name in __order__:
            value = members[member_name]
            if not isinstance(value, tuple):
                args = (value, )
            else:
                args = value
            if member_type is tuple:   # special case for tuple enums
                args = (args, )     # wrap it one more time
            if not use_args or not args:
                enum_member = __new__(enum_class)
                if not hasattr(enum_member, '_value_'):
                    enum_member._value_ = value
            else:
                enum_member = __new__(enum_class, *args)
                if not hasattr(enum_member, '_value_'):
                    enum_member._value_ = member_type(*args)
            value = enum_member._value_
            enum_member._name_ = member_name
            enum_member.__objclass__ = enum_class
            enum_member.__init__(*args)
            # If another member with the same value was already defined, the
            # new member becomes an alias to the existing one.
            for name, canonical_member in enum_class._member_map_.items():
                if canonical_member.value == enum_member._value_:
                    enum_member = canonical_member
                    break
            else:
                # Aliases don't appear in member names (only in __members__).
                enum_class._member_names_.append(member_name)
            enum_class._member_map_[member_name] = enum_member
            try:
                # This may fail if value is not hashable. We can't add the value
                # to the map, and by-value lookups for this value will be
                # linear.
                enum_class._value2member_map_[value] = enum_member
            except TypeError:
                pass


        # If a custom type is mixed into the Enum, and it does not know how
        # to pickle itself, pickle.dumps will succeed but pickle.loads will
        # fail.  Rather than have the error show up later and possibly far
        # from the source, sabotage the pickle protocol for this class so
        # that pickle.dumps also fails.
        #
        # However, if the new class implements its own __reduce_ex__, do not
        # sabotage -- it's on them to make sure it works correctly.  We use
        # __reduce_ex__ instead of any of the others as it is preferred by
        # pickle over __reduce__, and it handles all pickle protocols.
        unpicklable = False
        if '__reduce_ex__' not in classdict:
            if member_type is not object:
                methods = ('__getnewargs_ex__', '__getnewargs__',
                        '__reduce_ex__', '__reduce__')
                if not any(m in member_type.__dict__ for m in methods):
                    _make_class_unpicklable(enum_class)
                    unpicklable = True


        # double check that repr and friends are not the mixin's or various
        # things break (such as pickle)
        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
            class_method = getattr(enum_class, name)
            obj_method = getattr(member_type, name, None)
            enum_method = getattr(first_enum, name, None)
            if name not in classdict and class_method is not enum_method:
                if name == '__reduce_ex__' and unpicklable:
                    continue
                setattr(enum_class, name, enum_method)

        # method resolution and int's are not playing nice
        # Python's less than 2.6 use __cmp__

        if pyver < 2.6:

            if issubclass(enum_class, int):
                setattr(enum_class, '__cmp__', getattr(int, '__cmp__'))

        elif pyver < 3.0:

            if issubclass(enum_class, int):
                for method in (
                        '__le__',
                        '__lt__',
                        '__gt__',
                        '__ge__',
                        '__eq__',
                        '__ne__',
                        '__hash__',
                        ):
                    setattr(enum_class, method, getattr(int, method))

        # replace any other __new__ with our own (as long as Enum is not None,
        # anyway) -- again, this is to support pickle
        if Enum is not None:
            # if the user defined their own __new__, save it before it gets
            # clobbered in case they subclass later
            if save_new:
                setattr(enum_class, '__member_new__', enum_class.__dict__['__new__'])
            setattr(enum_class, '__new__', Enum.__dict__['__new__'])
        return enum_class

    def __call__(cls, value, names=None, module=None, type=None):
        """Either returns an existing member, or creates a new enum class.

        This method is used both when an enum class is given a value to match
        to an enumeration member (i.e. Color(3)) and for the functional API
        (i.e. Color = Enum('Color', names='red green blue')).

        When used for the functional API: `module`, if set, will be stored in
        the new class' __module__ attribute; `type`, if set, will be mixed in
        as the first base class.

        Note: if `module` is not set this routine will attempt to discover the
        calling module by walking the frame stack; if this is unsuccessful
        the resulting class will not be pickleable.

        """
        if names is None:  # simple value lookup
            return cls.__new__(cls, value)
        # otherwise, functional API: we're creating a new Enum type
        return cls._create_(value, names, module=module, type=type)

    def __contains__(cls, member):
        return isinstance(member, cls) and member.name in cls._member_map_

    def __delattr__(cls, attr):
        # nicer error message when someone tries to delete an attribute
        # (see issue19025).
        if attr in cls._member_map_:
            raise AttributeError(
                    "%s: cannot delete Enum member." % cls.__name__)
        super(EnumMeta, cls).__delattr__(attr)

    def __dir__(self):
        return (['__class__', '__doc__', '__members__', '__module__'] +
                self._member_names_)

    @property
    def __members__(cls):
        """Returns a mapping of member name->value.

        This mapping lists all enum members, including aliases. Note that this
        is a copy of the internal mapping.

        """
        return cls._member_map_.copy()

    def __getattr__(cls, name):
        """Return the enum member matching `name`

        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.

        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
            raise AttributeError(name)

    def __getitem__(cls, name):
        return cls._member_map_[name]

    def __iter__(cls):
        return (cls._member_map_[name] for name in cls._member_names_)

    def __reversed__(cls):
        return (cls._member_map_[name] for name in reversed(cls._member_names_))

    def __len__(cls):
        return len(cls._member_names_)

    def __repr__(cls):
        return "<enum %r>" % cls.__name__

    def __setattr__(cls, name, value):
        """Block attempts to reassign Enum members.

        A simple assignment to the class namespace only changes one of the
        several possible ways to get an Enum member from the Enum class,
        resulting in an inconsistent Enumeration.

        """
        member_map = cls.__dict__.get('_member_map_', {})
        if name in member_map:
            raise AttributeError('Cannot reassign members.')
        super(EnumMeta, cls).__setattr__(name, value)

    def _create_(cls, class_name, names=None, module=None, type=None):
        """Convenience method to create a new Enum class.

        `names` can be:

        * A string containing member names, separated either with spaces or
          commas.  Values are auto-numbered from 1.
        * An iterable of member names.  Values are auto-numbered from 1.
        * An iterable of (member name, value) pairs.
        * A mapping of member name -> value.

        """
        if pyver < 3.0:
            # if class_name is unicode, attempt a conversion to ASCII
            if isinstance(class_name, unicode):
                try:
                    class_name = class_name.encode('ascii')
                except UnicodeEncodeError:
                    raise TypeError('%r is not representable in ASCII' % class_name)
        metacls = cls.__class__
        if type is None:
            bases = (cls, )
        else:
            bases = (type, cls)
        classdict = metacls.__prepare__(class_name, bases)
        __order__ = []

        # special processing needed for names?
        if isinstance(names, basestring):
            names = names.replace(',', ' ').split()
        if isinstance(names, (tuple, list)) and isinstance(names[0], basestring):
            names = [(e, i+1) for (i, e) in enumerate(names)]

        # Here, names is either an iterable of (name, value) or a mapping.
        for item in names:
            if isinstance(item, basestring):
                member_name, member_value = item, names[item]
            else:
                member_name, member_value = item
            classdict[member_name] = member_value
            __order__.append(member_name)
        # only set __order__ in classdict if name/value was not from a mapping
        if not isinstance(item, basestring):
            classdict['__order__'] = ' '.join(__order__)
        enum_class = metacls.__new__(metacls, class_name, bases, classdict)

        # TODO: replace the frame hack if a blessed way to know the calling
        # module is ever developed
        if module is None:
            try:
                module = _sys._getframe(2).f_globals['__name__']
            except (AttributeError, ValueError):
                pass
        if module is None:
            _make_class_unpicklable(enum_class)
        else:
            enum_class.__module__ = module

        return enum_class

    @staticmethod
    def _get_mixins_(bases):
        """Returns the type for creating enum members, and the first inherited
        enum class.

        bases: the tuple of bases that was given to __new__

        """
        if not bases or Enum is None:
            return object, Enum


        # double check that we are not subclassing a class with existing
        # enumeration members; while we're at it, see if any other data
        # type has been mixed in so we can use the correct __new__
        member_type = first_enum = None
        for base in bases:
            if  (base is not Enum and
                    issubclass(base, Enum) and
                    base._member_names_):
                raise TypeError("Cannot extend enumerations")
        # base is now the last base in bases
        if not issubclass(base, Enum):
            raise TypeError("new enumerations must be created as "
                    "`ClassName([mixin_type,] enum_type)`")

        # get correct mix-in type (either mix-in type of Enum subclass, or
        # first base if last base is Enum)
        if not issubclass(bases[0], Enum):
            member_type = bases[0]     # first data type
            first_enum = bases[-1]  # enum type
        else:
            for base in bases[0].__mro__:
                # most common: (IntEnum, int, Enum, object)
                # possible:    (<Enum 'AutoIntEnum'>, <Enum 'IntEnum'>,
                #               <class 'int'>, <Enum 'Enum'>,
                #               <class 'object'>)
                if issubclass(base, Enum):
                    if first_enum is None:
                        first_enum = base
                else:
                    if member_type is None:
                        member_type = base

        return member_type, first_enum

    if pyver < 3.0:
        @staticmethod
        def _find_new_(classdict, member_type, first_enum):
            """Returns the __new__ to be used for creating the enum members.

            classdict: the class dictionary given to __new__
            member_type: the data type whose __new__ will be used by default
            first_enum: enumeration to check for an overriding __new__

            """
            # now find the correct __new__, checking to see of one was defined
            # by the user; also check earlier enum classes in case a __new__ was
            # saved as __member_new__
            __new__ = classdict.get('__new__', None)
            if __new__:
                return None, True, True      # __new__, save_new, use_args

            N__new__ = getattr(None, '__new__')
            O__new__ = getattr(object, '__new__')
            if Enum is None:
                E__new__ = N__new__
            else:
                E__new__ = Enum.__dict__['__new__']
            # check all possibles for __member_new__ before falling back to
            # __new__
            for method in ('__member_new__', '__new__'):
                for possible in (member_type, first_enum):
                    try:
                        target = possible.__dict__[method]
                    except (AttributeError, KeyError):
                        target = getattr(possible, method, None)
                    if target not in [
                            None,
                            N__new__,
                            O__new__,
                            E__new__,
                            ]:
                        if method == '__member_new__':
                            classdict['__new__'] = target
                            return None, False, True
                        if isinstance(target, staticmethod):
                            target = target.__get__(member_type)
                        __new__ = target
                        break
                if __new__ is not None:
                    break
            else:
                __new__ = object.__new__

            # if a non-object.__new__ is used then whatever value/tuple was
            # assigned to the enum member name will be passed to __new__ and to the
            # new enum member's __init__
            if __new__ is object.__new__:
                use_args = False
            else:
                use_args = True

            return __new__, False, use_args
    else:
        @staticmethod
        def _find_new_(classdict, member_type, first_enum):
            """Returns the __new__ to be used for creating the enum members.

            classdict: the class dictionary given to __new__
            member_type: the data type whose __new__ will be used by default
            first_enum: enumeration to check for an overriding __new__

            """
            # now find the correct __new__, checking to see of one was defined
            # by the user; also check earlier enum classes in case a __new__ was
            # saved as __member_new__
            __new__ = classdict.get('__new__', None)

            # should __new__ be saved as __member_new__ later?
            save_new = __new__ is not None

            if __new__ is None:
                # check all possibles for __member_new__ before falling back to
                # __new__
                for method in ('__member_new__', '__new__'):
                    for possible in (member_type, first_enum):
                        target = getattr(possible, method, None)
                        if target not in (
                                None,
                                None.__new__,
                                object.__new__,
                                Enum.__new__,
                                ):
                            __new__ = target
                            break
                    if __new__ is not None:
                        break
                else:
                    __new__ = object.__new__

            # if a non-object.__new__ is used then whatever value/tuple was
            # assigned to the enum member name will be passed to __new__ and to the
            # new enum member's __init__
            if __new__ is object.__new__:
                use_args = False
            else:
                use_args = True

            return __new__, save_new, use_args


########################################################
# In order to support Python 2 and 3 with a single
# codebase we have to create the Enum methods separately
# and then use the `type(name, bases, dict)` method to
# create the class.
########################################################
temp_enum_dict = {}
temp_enum_dict['__doc__'] = "Generic enumeration.\n\n    Derive from this class to define new enumerations.\n\n"

def __new__(cls, value):
    # all enum instances are actually created during class construction
    # without calling this method; this method is called by the metaclass'
    # __call__ (i.e. Color(3) ), and by pickle
    if type(value) is cls:
        # For lookups like Color(Color.red)
        value = value.value
        #return value
    # by-value search for a matching enum member
    # see if it's in the reverse mapping (for hashable values)
    try:
        if value in cls._value2member_map_:
            return cls._value2member_map_[value]
    except TypeError:
        # not there, now do long search -- O(n) behavior
        for member in cls._member_map_.values():
            if member.value == value:
                return member
    raise ValueError("%s is not a valid %s" % (value, cls.__name__))
temp_enum_dict['__new__'] = __new__
del __new__

def __repr__(self):
    return "<%s.%s: %r>" % (
            self.__class__.__name__, self._name_, self._value_)
temp_enum_dict['__repr__'] = __repr__
del __repr__

def __str__(self):
    return "%s.%s" % (self.__class__.__name__, self._name_)
temp_enum_dict['__str__'] = __str__
del __str__

def __dir__(self):
    added_behavior = [
            m
            for cls in self.__class__.mro()
            for m in cls.__dict__
            if m[0] != '_'
            ]
    return (['__class__', '__doc__', '__module__', ] + added_behavior)
temp_enum_dict['__dir__'] = __dir__
del __dir__

def __format__(self, format_spec):
    # mixed-in Enums should use the mixed-in type's __format__, otherwise
    # we can get strange results with the Enum name showing up instead of
    # the value

    # pure Enum branch
    if self._member_type_ is object:
        cls = str
        val = str(self)
    # mix-in branch
    else:
        cls = self._member_type_
        val = self.value
    return cls.__format__(val, format_spec)
temp_enum_dict['__format__'] = __format__
del __format__


####################################
# Python's less than 2.6 use __cmp__

if pyver < 2.6:

    def __cmp__(self, other):
        if type(other) is self.__class__:
            if self is other:
                return 0
            return -1
        return NotImplemented
        raise TypeError("unorderable types: %s() and %s()" % (self.__class__.__name__, other.__class__.__name__))
    temp_enum_dict['__cmp__'] = __cmp__
    del __cmp__

else:

    def __le__(self, other):
        raise TypeError("unorderable types: %s() <= %s()" % (self.__class__.__name__, other.__class__.__name__))
    temp_enum_dict['__le__'] = __le__
    del __le__

    def __lt__(self, other):
        raise TypeError("unorderable types: %s() < %s()" % (self.__class__.__name__, other.__class__.__name__))
    temp_enum_dict['__lt__'] = __lt__
    del __lt__

    def __ge__(self, other):
        raise TypeError("unorderable types: %s() >= %s()" % (self.__class__.__name__, other.__class__.__name__))
    temp_enum_dict['__ge__'] = __ge__
    del __ge__

    def __gt__(self, other):
        raise TypeError("unorderable types: %s() > %s()" % (self.__class__.__name__, other.__class__.__name__))
    temp_enum_dict['__gt__'] = __gt__
    del __gt__


def __eq__(self, other):
    if type(other) is self.__class__:
        return self is other
    return NotImplemented
temp_enum_dict['__eq__'] = __eq__
del __eq__

def __ne__(self, other):
    if type(other) is self.__class__:
        return self is not other
    return NotImplemented
temp_enum_dict['__ne__'] = __ne__
del __ne__

def __hash__(self):
    return hash(self._name_)
temp_enum_dict['__hash__'] = __hash__
del __hash__

def __reduce_ex__(self, proto):
    return self.__class__, (self._value_, )
temp_enum_dict['__reduce_ex__'] = __reduce_ex__
del __reduce_ex__

# _RouteClassAttributeToGetattr is used to provide access to the `name`
# and `value` properties of enum members while keeping some measure of
# protection from modification, while still allowing for an enumeration
# to have members named `name` and `value`.  This works because enumeration
# members are not set directly on the enum class -- __getattr__ is
# used to look them up.

@_RouteClassAttributeToGetattr
def name(self):
    return self._name_
temp_enum_dict['name'] = name
del name

@_RouteClassAttributeToGetattr
def value(self):
    return self._value_
temp_enum_dict['value'] = value
del value

Enum = EnumMeta('Enum', (object, ), temp_enum_dict)
del temp_enum_dict

# Enum has now been created
###########################

class IntEnum(int, Enum):
    """Enum where members are also (and must be) ints"""


def unique(enumeration):
    """Class decorator that ensures only unique members exist in an enumeration."""
    duplicates = []
    for name, member in enumeration.__members__.items():
        if name != member.name:
            duplicates.append((name, member.name))
    if duplicates:
        duplicate_names = ', '.join(
                ["%s -> %s" % (alias, name) for (alias, name) in duplicates]
                )
        raise ValueError('duplicate names found in %r: %s' %
                (enumeration, duplicate_names)
                )
    return enumeration
]]>
		</Library>
		<Library Name="promail_predefined_servers">
<![CDATA[import ProMail

from collections import OrderedDict

encryption = ProMail.Connectivity.SECURITY_E


predefined = {
    "gmail": {
        "title": "Google Gmail",
        "incoming": {
            "server": "pop.gmail.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.gmail.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "outlook_com": {
        "title": "Outlook.com",
        "incoming": {
            "server": "pop3.live.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.live.com",
            "ssl": encryption.STARTTLS,
            "port": 587,
            "login": "",
            "passwd": "",
        }
    },

    "office365_com": {
        "title": "Office365.com",
        "incoming": {
            "server": "outlook.office365.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.office365.com",
            "ssl": encryption.STARTTLS,
            "port": 587,
            "login": "",
            "passwd": "",
        }
    },

    "yahoo_mail": {
        "title": "Yahoo Mail",
        "incoming": {
            "server": "pop.mail.yahoo.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.mail.yahoo.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "yahoo_mail_plus": {
        "title": "Yahoo Mail Plus",
        "incoming": {
            "server": "plus.pop.mail.yahoo.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "plus.smtp.mail.yahoo.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "yahoo": {
        "title": "Yahoo UK",
        "incoming": {
            "server": "pop.mail.yahoo.co.uk",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.mail.yahoo.co.uk",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "yahoo_deutschland": {
        "title": "Yahoo Deutschland",
        "incoming": {
            "server": "pop.mail.yahoo.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.mail.yahoo.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "yahoo_au_nz": {
        "title": "Yahoo AU/NZ",
        "incoming": {
            "server": "pop.mail.yahoo.com.au",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.mail.yahoo.com.au",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "o2": {
        "title": "O2",
        "incoming": {
            "server": "pop3.o2.ie",
            "ssl": encryption.NONE,
            "port": 110,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.o2.ie",
            "ssl": encryption.NONE,
            "port": 25,
            "login": "",
            "passwd": "",
        }
    },

    "o2_uk": {
        "title": "O2.uk",
        "incoming": {
            "server": "pop.o2.co.uk",
            "ssl": encryption.NONE,
            "port": 110,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.o2.co.uk",
            "ssl": encryption.NONE,
            "port": 25,
            "login": "",
            "passwd": "",
        }
    },

    "at_t": {
        "title": "AT&T",
        "incoming": {
            "server": "pop.att.yahoo.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.att.yahoo.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "ntl_ntlworld_com": {
        "title": "NTL @ntlworld.com",
        "incoming": {
            "server": "pop.ntlworld.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.ntlworld.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "orange": {
        "title": "Orange",
        "incoming": {
            "server": "pop.orange.net",
            "ssl": encryption.NONE,
            "port": 110,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.orange.net",
            "ssl": encryption.NONE,
            "port": 25,
            "login": "",
            "passwd": "",
        }
    },

    "orange_uk": {
        "title": "Orange.uk",
        "incoming": {
            "server": "pop.orange.co.uk",
            "ssl": encryption.NONE,
            "port": 110,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.orange.co.uk",
            "ssl": encryption.NONE,
            "port": 25,
            "login": "",
            "passwd": "",
        }
    },

    "hotmail": {
        "title": "Hotmail",
        "incoming": {
            "server": "pop3.live.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.live.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    },

    "mail_com": {
        "title": "Mail.com",
        "incoming": {
            "server": "pop.mail.com",
            "ssl": encryption.SSL,
            "port": 995,
            "login": "",
            "passwd": "",
        },
        "outgoing": {
            "server": "smtp.mail.com",
            "ssl": encryption.SSL,
            "port": 465,
            "login": "",
            "passwd": "",
        }
    }
}


predefined = OrderedDict(sorted(predefined.items(), key=lambda x: x[1]['title']))
]]>
		</Library>
		<Library Name="proadmin_base_scheme">
<![CDATA[import copy

# -------------------------------------------------------------------
#		Description of object type
# -------------------------------------------------------------------

class ACLObjectType( object ):
	""" class for descript ACLObjectType - contains: name, icon, and access types
	"""
	def __init__( self, name="", guid="", icon=None ):
		self.name 			= name
		self.guid			= guid
		self.icon			= icon
		
		self._accesstypes 	= {}


	@property
	def access_types( self ):
		return self._accesstypes
	
	@access_types.setter
	def access_types( self, value ):
		self._accesstypes = copy.deepcopy( value )
	

	def get_access_types( self ):
		""" obsolete. need for compatibility
		"""
		return self.access_types

	def set_access_types( self, value ):
		""" obsolete. need for compatibility
		"""
		self.access_types = value



	@property
	def object_icon_url( self ):
		return self.icon.resource_url


	def get_object_icon_url( self ):
		""" obsolete. need for compatibility
		"""
		return self.icon.resource_url


	def __eq__( self, other ):
		return self.guid == other.guid




# -------------------------------------------------------------------
#		Icon
# -------------------------------------------------------------------

class Icon( object ):
	""" class for Icon routines in ProAdmin
	"""
	def __init__( self, res_name="" ):
		self._resource_url	= res_name


	@classmethod
	def on_resource( self, res_name ):
		""" create Icon object from resource image
		"""
		url = "/%s.res" % res_name
		return Icon( url ) 


	@property
	def resource_url( self ):
		return self._resource_url
		
		
	def get_resource_url( self ):
		"""
		"""
		return self.resource_url







# -------------------------------------------------------------------
#		Base class for ProAdmin Schemas
# -------------------------------------------------------------------

class BaseProAdminScheme( object ):
	""" Base class for ProAdmin scheme
	"""
	def __init__( self, guid=None, objects_connection=None, subjects_connection=None ):
		# connections
		self._objects_conn	= objects_connection
		self._subjects_conn	= subjects_connection

		# main attributes
		self.guid		= guid
		self.name		= ''
		self.icon		= None
		self.type 		= ''
		self.config		= None

		# application instance
		self._application = None

		# specific scheme oprtions
		self.options			= {}

		# acl object types
		self._acl_object_types	= []
		self.prepare_synchronize = None
	
	
	# --------------------------------
	#	Properties
	# --------------------------------
	
	@property
	def application( self ):
		return self._application
		
	def get_application( self ):
		""" obsolete. need for compatibility
		"""
		return self.application
		
		
		
		
	@property
	def objects_connection( self ):
		return self._objects_conn
		
	@property	
	def connection( self ):
		""" obsolete. need for compatibility
		"""
		return self.objects_connection
		
	def get_connection( self ):
		""" obsolete. need for compatibility
		"""
		return self.objects_connection


		
	@property
	def subjects_connection( self ):
		return self._subjects_conn

	def userconnection( self ):
		""" obsolete. need for compatibility
		"""
		return self.subjects_connection
		
		
			
		
	
	def is_remote( self ):
		return self.type == 'remote'


	def synchronize( self ):
		pass





	def register( self, make_default=None ):
		""" register this scheme
		"""
		from proadmin_acl_object import ACLObject
		import ProAdmin
		self._application = ACLObject.application( self.name, self.guid, self )

		ProAdmin.register_scheme( self )
		
		
	def unregister( self ):
		""" unregister this scheme
		"""
		import ProAdmin
		ProAdmin.unregister_default_scheme()


	def delete( self ):
		""" delete this scheme from LDAP
		"""
		import ProAdmin

		self.application.delete()
		ProAdmin.delete_scheme( self )




	def set_information( self, name="", icon=None ):
		""" set information about scheme: name and icon
		"""
		self.name = name
		self.icon = icon


	def set_option( self, key, value ):
		""" set value for option specific for application
		"""
		self.options[ key ] = value


	def get_option( self, key, default_value=None ):
		"""
		"""
		return self.options.get( key, default_value )


	def set_api_guid( self, api_guid ):
		""" set api guid
		"""
		self.set_option( 'api_guid', api_guid )


	def get_registered_applications( self ):
		""" get applications info that can connecting via API from this applicatino
		"""
		import ProAdmin
		
		app_info = {
			'name'		: self.name,
			'guid'		: self.guid,
			'ip'		: '127.0.0.1',
			'api_guid'	: self.get_option( 'api_guid' ),
			'hosts'		: ProAdmin.hosts(),
		}

		return { self.name : app_info }

	def get_registred_applications( self ):
		""" obsolete. need for compatibility
		"""
		return self.get_registered_applications()




	def get_application_icon_url( self ):
		""" return resource URL to application icon
		"""
		return self.icon.get_resource_url()

	def add_aclobjecttype( self, object_type):
		if not (object_type in self._acl_object_types):
			self._acl_object_types.append( object_type )

	def get_aclobjecttypes( self ):
		return self._acl_object_types


	application_icon_url = property( get_application_icon_url )




	def create_root_user( self ):
		pass
		
	def create_admins_group( self ):
		pass

	def create_user( self ):
		pass

	def create_group( self ):
		pass

	def get_users( self, email='', guid='' ):
		pass

	def get_groups( self, guid='', name='', user=None ):
		pass



	def check_password( self, user, password ):
		return False



]]>
		</Library>
		<Library Name="widget_localizaion_rectangle">
<![CDATA[import localization

class LocalizationRectangleWidget( object ):
	def __init__( self, page_name ):
		self.controls = {}
		self.page_name = page_name


	def add_controls( self, key, controls ):
		if type(controls) != list:
			controls = [ controls ]

		if not key in self.controls:
			self.controls[ key ] = controls
		else:
			self.controls[ key ] += controls


	def set_data( self, control_dict ):
		for key in control_dict:
			self.add_controls( key, control_dict[ key ] )


	def render( self ):
		lang = localization.get_lang_rectangle()
		lang = lang.get( self.page_name )
		if not lang: return

		for key in self.controls:
			value = lang.get( key )
			if not value: continue

			for control in self.controls[ key ]:
				control.left, control.top, control.width, control.height 	= \
				value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ]


]]>
		</Library>
		<Library Name="promail_indexers">
<![CDATA[from subprocess import *
import shlex
import chardet
from email.parser import Parser
import unicodedata
#from  pyth.plugins.rtf15 import reader


def remove_accents(str):
    return u"".join([c for c in str if not unicodedata.combining(c)])



def normalize( unicode_text ):
    """
    Should be used for all indexers!!
    TODO: rebuild the inderxer-call mechanizm (with decorator?) to auto-normalize
    Answers a normalised form of a UNICODE (not encoded) string (line):
        1) Decomposition of uncicode characters (Ã© -> eÂ´)
        2) legature manual decomposition
        3) Removal of all non-ascii symbols

    """
    return unicode_text and remove_accents( unicodedata.normalize('NFKD', unicode_text) \
        .replace( u"\xc6", "AE" )\
        .replace( u"\u0152", "OE" ) \
        .replace( u"\u0153", 'oe' )\
        .replace( u"\u00E6", 'ae' )\
        ) or ""

def get_unicode(text):
    try:
        enc  = chardet.detect(text)['encoding']
        if enc == "ISO-8859-2":
            enc = "ISO-8859-1"
        elif enc == "windows-1250":
            enc = "windows-1252"
        s = u""+enc
        return u""+text.decode(s)
    except:
        pass

    try:
        return  u""+text.decode("cp1252") #hooray, no exception!
    except:
        pass
    try:
        return  u""+text.decode("latin-1") #hooray, no exception!
    except:
        pass

    try:
        return  u""+text.decode("ascii") #hooray, no exception!
    except:
        pass




    try:
        return  u""+text.decode("utf-8") #hooray, no exception!
    except:
        pass
    try:
        return  u""+text.decode("utf-16") #hooray, no exception!
    except:
        pass
    return u""+text



def stub(filepath):
    return u""

def pdf2txt(filepath):
    try:
        cmd = """/usr/local/bin/pdftotext -nopgbrk -q -f 1 -l 30 -enc "UTF-8" "%(file)s" -"""%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdin=PIPE,bufsize=-1, stdout=PIPE, stderr=PIPE, close_fds=True)
        return p.stdout.read().decode("UTF-8")
    except:
        return u""


def doc2txt(filepath):
    try:
    #if True:
        cmd = """/usr/local/bin/catdoc -s 'cp1252' -d 'utf-8' '%(file)s' """%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdin=PIPE, bufsize=-1, stdout=PIPE, stderr=PIPE, close_fds=True)
        #raise Exception(p.stdout.read().decode("utf-8"))
        return p.stdout.read().decode("utf-8")
    except Exception, e:
        raise Exception(str(e)+"its DOC!")
        return u""



def rtf2txt(filepath):
    try:
        #cmd = """/usr/local/bin/unrtf --text  '%(file)s' """%{"file": filepath}
        #p = Popen( shlex.split( cmd.encode( "utf-8") ), stdin=PIPE, bufsize=-1, stdout=PIPE, stderr=PIPE, close_fds=True)
        #result = get_unicode( p.stdout.read() )
        #delete comments from text (first 13 lines)
        #return "\n".join(result.split("\n")[13:])


        doc = pyth.plugins.rtf15.Rtf15Reader.read(open(filepath,"rb"))
        rtf_index = u" ".join([text.content[0].content[0] for text in doc.content])
        return rtf_index
    except:
        raise
        return u""


def odt2txt(filepath):
    try:
        cmd = """/usr/local/bin/odt2txt --encoding='UTF-8' '%(file)s' """%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdin=PIPE, bufsize=-1, stdout=PIPE, stderr=PIPE, close_fds=True)
        return p.stdout.read().decode("UTF-8")
    except:
        return u""

def xls2txt(filepath):
    try:
        cmd = """/usr/local/bin/xls2csv -s cp1252 -d 'utf-8' '%(file)s' """%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdin=PIPE, bufsize=-1, stdout=PIPE, stderr=PIPE, close_fds=True)
        return p.stdout.read().decode("UTF-8")
    except:
        raise
        return u""


def docx2txt(filepath):
    import re
    try:
        cmd = """/usr/local/bin/unzip -p '%(file)s' 'word/document.xml' """%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdout=PIPE, bufsize=-1, close_fds=True)
        xml_output = p.stdout.read().decode("utf-8")
        txt_output = re.sub( "<[^>]*>", " ", xml_output )
        return txt_output
    except:

        return u""


def pptx2txt(filepath):
    import re
    try:
        cmd = """/usr/local/bin/unzip -p '%(file)s' 'ppt/slides/slide*.xml' """%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdout=PIPE, bufsize=-1, close_fds=True)
        xml_output = p.stdout.read().decode("utf-8")
        txt_output = re.sub( "<[^>]*>", " ", xml_output )
        return txt_output
    except:

        return u""

def txt2txt(filepath):
    with open( filepath, 'r') as f:
        result = f.read()#.encode("utf8")
    return get_unicode( result )

def xlsx2txt(filepath):
    import re
    try:
        cmd = """/usr/local/bin/unzip -p '%(file)s' 'xl/sharedStrings.xml' """%{"file": filepath}
        p = Popen( shlex.split( cmd.encode( "utf-8") ), stdin=PIPE, stdout=PIPE, bufsize=-1, stderr=PIPE, close_fds=True)
        xml_output = p.stdout.read().decode( "UTF-8" )
        txt_output = re.sub( "<[^>]*>", " ", xml_output )
        return txt_output
    except:
        return u""

def eml2txt(filepath):
    result = u""
    message = Parser().parsestr(open(filepath,"r").read())

    header_titles = ['From','To','Subject','Date', 'Reply-to']

    for head in header_titles:
        result += u"""%(title)s: %(value)s """ % {
            "title": head,
            "value": message[head]
        }

    if message.get_content_maintype() == 'multipart':
        for part in message.walk():
            if part.get_content_maintype() == 'multipart':
                continue
            elif part.get_content_subtype() in ('text','html'):
                result += part.get_payload()
                continue
            filename = part.get_filename()
            if filename:
                result += " "+filename
            else:
                result += str(part)
    else:
        result += " " + message.get_payload()

    return result



def unknown2txt(filepath):
    return u"binary content"



ICON_TABLE = {
 # doc, docx, xls, txt, bmp, jpg, msg, eml, tif, tiff, png
    #basic types
    ".txt": "txt",
    ".rtf": "doc",
    ".pdf": "pdf",
    ".xml": "txt",
    ".log": "txt",

    #office
    ".doc"  : "doc",
    ".xls"  : "xls",
    ".docx" : "docx",
    ".odt"  : "doc",
    ".bmp"  : "bmp",
    ".xlsx" : "xls",
    ".jpg"  : "jpg",
    ".tif"  : "jpg",
    ".tiff" : "jpg",
    ".png"  : "jpg",
    ".msg"  : "msg",
    ".eml"  : "eml"

}



MIME_TABLE = {
    #basic types
    ".txt": "text/plain",
    ".rtf": "application/rtf",
    ".pdf": "application/pdf",
    ".xml": "application/xml",
    ".log": "text/plain", #"plain/text",
    ".csv": "text/plain", #"plain/text",
    ".eml": "application/email",
#   ".msg": "text/plain",

    #office
    ".doc": "application/msword",
    ".xls": "application/vnd.ms-excel",
    ".docx": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    ".pptx": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
    ".odt": "application/vnd.oasis.opendocument.text",
    ".xlsx": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",

    #progs
    ".py" : "text/plain"
}


#Mime to function dictionary
MIME_INDEXERS = {
    #basic types
    "text/plain": txt2txt,
    "application/rtf": rtf2txt,
    "application/pdf": pdf2txt,
    "application/xml": txt2txt,

    #office
    "application/msword": doc2txt,
    "application/vnd.ms-excel": xls2txt,
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": docx2txt,
    "application/vnd.oasis.opendocument.text": odt2txt,
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": xlsx2txt,
    "application/vnd.openxmlformats-officedocument.presentationml.presentation":pptx2txt,
    "application/email": eml2txt,

    "unknown"   : unknown2txt,
}


def get_mime_indexer( mime ):
    return MIME_INDEXERS[ mime ] if mime in MIME_INDEXERS else stub


def get_indexer( file_name ):
    import os.path
    root,fextension = os.path.splitext(file_name)
    fextension = fextension.lower()

    if fextension and fextension in MIME_TABLE:
        mime = MIME_TABLE[ fextension ]
    else:
        mime = 'unknown'

    return get_mime_indexer( mime )

]]>
		</Library>
		<Library Name="ProMailHomePage">
<![CDATA["""
"""


import json
import re

from collections import OrderedDict, defaultdict
from functools import wraps, partial

# import feedparser
import ProAdmin
import ProMail

# from class_macro import Macros

# from promail_eac import EACConnector
# from promail_pop3_client import POP3Client


from ext_signals import Signal
from prosuite_errors import ProSuiteBaseError
from prosuite_utils import CachedProperty, escape_w_quote
from prosuite_web import ProSuiteBasicPage, RequestStorage, authenticated, callback
from prosuite_widgets import Widget

# from ProSuiteMacrosWidget import ProSuiteMacrosWidget, ProSuiteMacrosDatatableWidget, ProSuiteMailComposerListWidget
# from VEE_vmacro_dispatcher import InvokeDispatcher


########################################
#
# HTML TEMPLATES
#
########################################
MAILBOXES_SELECT_TMPLT = u"""<div class="mailbox">
  <div class="boxcolor" style="background-color: #{boxcolor}"></div>
  <div class="boxinfo">
    <div class="boxname cut-out-text" title="{boxname}">{boxname}</div>
    <div class="boxaddr cut-out-text" title="{boxaddr}">{boxaddr}</div>
  </div>
  <div style="clear: both"></div>
</div>"""


NEW_MAILBOX_SELECT_TMPLT = u"""<div class="mailbox">
  <div class="boxnewicon"></div>
  <div class="boxnew">{boxname}</div>
  <div style="clear: both"></div>
</div>"""


ARCHIVES_LIST_ITEM_TMPLT = u"""<div class="archive %(controls)s">
  <div class="archiveicon {archicon}"></div>
  <span class="archivename cut-out-text" title="{archname}">{archname}</span>
  {archunread}
  %(deleteicon)s
  %(editicon)s
  <div style="clear: both"></div>
</div>"""


ARCHIVE_OPT_DEL_ICON = u"""<span class="control-icon delete-icon"></span>"""
ARCHIVE_OPT_EDT_ICON = u"""<span class="control-icon edit-icon"></span>"""


NEW_ARCHIVE_LIST_TMPLT = u"""<div class="archive">
  <div class="archiveicon archive-new"></div>
  <div class="archivename">{archname}</div>
  <div style="clear: both"></div>
</div>"""


ARCHIVE_UNREAD_MESSAGES = u"""<span class="archivemsg cut-out-text">{unread}</span>"""


ACL_RIGHTS_TMPLT = u"""<span class="cut-out-text">{uname} {uemail}</span>
<div class="rights" style="float: right">{rights}
  <span class="control-icon delete-icon {hidden}"></span>
  <span class="control-icon edit-icon"></span>
</div>"""


ACL_RIGHTS_USER_SEARCH_TMPLT = u"""<div>
  <span class"subj-name">{name}</span>
  <span class="remove-icon"></span>
  <input type="hidden" name="subj_{guid}" value="{guid}">
</div>"""


LABELS_ITEM_TMPLT = (u"""<div class="label-item checkbox-unselected">"""
    u"""<div class="body">"""
        u"""<div class="clickblock"></div>"""
        u"""<span class="name">{name}</span>"""
    u"""</div>"""
u"""</div>""")


LABELS_NEW_ITEM_TMPLT = (u"""<div class="label-item">"""
    u"""<div class="body">"""
        u"""<div class="clickblock"></div>"""
        u"""<span class="name"></span>"""
    u"""</div>"""
u"""</div>""")


LABEL_MGMT_ITEM_TMPLT = (u"""<div class="color" style="background-color: #{color}"></div>"""
u"""<span class="cut-out-text">{label}</span>"""
u"""<div style="float: right">"""
  u"""<span class="control-icon delete-icon"></span>"""
  u"""<span class="control-icon edit-icon {hidden}"></span>"""
u"""</div>""")


########################################
#
# CONSTANTS
#
########################################
SELECTED_MAILBOX_KEY = "sidebar.mailboxes.selected"
SELECTED_ARCHIVE_KEY = "sidebar.archives.selected"
AVAILABLE_MAILBOXES_KEY = "sidebar.mailboxes.available"
AVAILABLE_LABELS_KEY = "topbar.labels.available"

ARCHIVE_RIGHTS_MAILBOX_KEY = "dialog.archives.rights.mailbox"
ARCHIVE_RIGHTS_LATER_KEY = "dialog.archives.rights.later"

LABEL_SEARCH_QUERY = "topbar.labels.query"

# list constants
LIST_NEW_ITEM_KEY = "list.item.new"
NOT_SELECTABLE_KEY = "list.nonselectable.keys"

# async task keys and vars
CHECK_TASK_TIMER_INTERVAL = 2000

# reg exp
DEFAULT_COLOR = "#ccc"
HEX_COLOR_RE = re.compile(r'^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')

# password placeholder
PASSWD_PLACEHOLDER = "*" * 6

# archive type to UI icon
ARCHIVE_ICONS_MAP = {
    ProMail.Archive.TYPE_E.INBOX: "archive-inbox",
    ProMail.Archive.TYPE_E.OUTBOX: "archive-outbox",
    ProMail.Archive.TYPE_E.DRAFT: "archive-draft",
    ProMail.Archive.TYPE_E.DELETED: "archive-trash",
}


########################################
#
# Exceptions
#
########################################
class NoObjectError(ProSuiteBaseError):
    pass


class ObjectDoesNotExist(NoObjectError):
    pass


class MailboxDoesNotExist(ObjectDoesNotExist):
    pass


class SelectedMailboxDoesNotExist(MailboxDoesNotExist):
    pass


class ArchiveDoestNotExist(ObjectDoesNotExist):
    pass


class LabelDoestNotExist(ObjectDoesNotExist):
    pass


########################################
#
# Basic dialog
#
########################################
class Dialog(Widget):

    DIALOG_OBJ_KEY = ""

    @CachedProperty
    def dialog(self):
        return self.delegate.vdom_objects[self.DIALOG_OBJ_KEY]

    @property
    def dialog_name(self):
        return self.__class__.__name__

    @CachedProperty
    def request_session(self):
        data = self.delegate.request_session["dialogs"].get(self.dialog_name, None)
        if data is None:
            self.delegate.request_session["dialogs"][self.dialog_name] = data = {}

        return data

    def set_displayd_flag(self, flag):
        self.request_session["displayed"] = flag

    def is_displayed(self):
        try:
            return self.request_session["displayed"]
        except:
            return False

    def is_on_top(self):
        try:
            return self.delegate.request_session["dialogs"]["opened"][-1] == self.dialog_name
        except IndexError:
            return False

    def add_to_top(self):
        """
        Add dialog to top of stack
        """
        if not self.is_on_top():
            self.delegate.request_session["dialogs"]["opened"].append(self.dialog_name)

    def remove_from_top(self):
        """
        Despite on method nane, remove dialog from stack
        """
        opened = self.delegate.request_session["dialogs"]["opened"]
        if self.dialog_name in opened:
            opened.pop(opened.index(self.dialog_name))

    def child(self, key):
        """
        Return child object
        """
        return self.delegate.vdom_objects[u"{}.{}".format(self.DIALOG_OBJ_KEY, key)]

    def show(self):
        """
        Show dialog
        """
        self.set_displayd_flag(True)
        self.add_to_top()
        self.dialog.action("show", [""])

    def hide(self):
        """
        Hide dialog
        """
        self.delegate.request_session["dialogs"].pop(self.dialog_name, None)
        self.remove_from_top()
        self.dialog.action("hide", [""])


########################################
#
# Async Task Dialog
#
########################################
class AsyncTaskDialog(Dialog):

    DIALOG_OBJ_KEY = "dialog.checktask"

    @property
    def callback(self):
        return self.request_session.get("callback", None)

    @callback.setter
    def callback(self, value):
        self.request_session["callback"] = value

    @property
    def task_uuid(self):
        return self.request_session.get("task_uuid", None)

    @task_uuid.setter
    def task_uuid(self, value):
        self.request_session["task_uuid"] = value

    def search_callback(self):
        """
        Trying to find object in delegate
        """
        callback_path = self.callback
        if not callback_path:
            return None

        callback_path = callback_path.split(".")
        obj = self.delegate
        try:
            for attr in callback_path[:-1]:
                obj = getattr(obj, attr)

            return getattr(obj, callback_path[-1])
        except:
            return None

    def set_dialog_title(self, title):
        self.dialog.action("setTitle", [title])

    def start_task_monitoring(self):
        self.child("timer").action("start", [CHECK_TASK_TIMER_INTERVAL])
        self.child("output").action("setValue", [
            self.delegate.localization["promail.home.dialogs.checktask.loading"]
        ])

        super(AsyncTaskDialog, self).show()

    def refresh_task_status(self):

        task = ProMail.tasks.search_task(self.task_uuid) if self.task_uuid else None

        if not task:
            self.child("timer").action("stop", [""])
            self.child("output").action("setValue", [
                self.delegate.localization["promail.home.dialogs.checktask.error.invalid_task"]
            ])

            return self.delegate.show_error_growl(
                self.delegate.localization["promail.home.dialogs.checktask.error.invalid_task"],
                self.delegate.localization["global.error.title"]
            )

        if not (task.finished_at or task.failed_at):
            return

        self.child("timer").action("stop", [""])

        if task.finished_at:
            self.delegate.show_info_growl(
                self.delegate.localization["promail.home.dialogs.checktask.success.task_done"],
                self.delegate.localization["global.success.title"]
            )
            self.child("output").action("setValue", [
                self.search_callback()(task.output)
            ])

        else:
            self.delegate.show_error_growl(
                self.delegate.localization["promail.home.dialogs.checktask.success.task_failed"],
                self.delegate.localization["global.error.title"]
            )
            self.child("output").action("setValue", [
                u"{} {}\n\n{}".format(
                    self.delegate.localization["promail.home.dialogs.checktask.success.task_failed"],
                    self.delegate.localization["promail.home.dialogs.checktask.success.task_failed.traceback"],
                    task.last_error
                )
            ])


########################################
#
# Archive Dialog Implementation
#
########################################
class ACLRightsDialog(Dialog):

    DIALOG_OBJ_KEY = "dialog.aclrights"

    @property
    def aclobj_class(self):
        return self.request_session.get("aclclass", None)

    @aclobj_class.setter
    def aclobj_class(self, value):
        self.request_session["aclclass"] = value

    @property
    def is_extended_rules(self):
        return self.request_session.get("extended_rules", False)

    @is_extended_rules.setter
    def is_extended_rules(self, value):
        self.request_session["extended_rules"] = value

    @property
    def rights_data(self):
        return self.request_session.get("rights_data", None)

    @rights_data.setter
    def rights_data(self, value):
        self.request_session["rights_data"] = value

    @rights_data.deleter
    def rights_data(self, value):
        self.request_session.pop("rights_data", None)

    @property
    def submit_callback(self):
        return self.request_session.get("submit_callback", None)

    @submit_callback.setter
    def submit_callback(self, value):
        self.request_session["submit_callback"] = value

    def search_submit_callback(self):
        """
        Trying to find object in delegate
        """
        callback_path = self.submit_callback
        if not callback_path:
            return None

        callback_path = callback_path.split(".")
        obj = self.delegate
        try:
            for attr in callback_path[:-1]:
                obj = getattr(obj, attr)

            return getattr(obj, callback_path[-1])
        except:
            return None

    def is_mailbox(self):
        return self.aclobj_class is ProMail.ACLMailbox

    def is_archive(self):
        return self.aclobj_class is ProMail.ACLArchive

    def is_label(self):
        return self.aclobj_class is ProMail.ACLLabel

    @CachedProperty
    def access_loc(self):
        access = self.aclobj_class.HL_ACCESS

        if self.is_mailbox():
            return OrderedDict([
                (access.READ, self.delegate.localization["promail.home.dialogs.rightsmgmt.mailbox.access.read"]),
                (access.WRITE, self.delegate.localization["promail.home.dialogs.rightsmgmt.mailbox.access.read_write"]),
                (access.MODIFY, self.delegate.localization["promail.home.dialogs.rightsmgmt.mailbox.access.read_write_delete"]),
                (access.OWNER, self.delegate.localization["promail.home.dialogs.rightsmgmt.mailbox.access.owner"]),
            ])

        elif self.is_archive():
            return OrderedDict([
                (access.READ, self.delegate.localization["promail.home.dialogs.rightsmgmt.archive.access.read"]),
                (access.WRITE, self.delegate.localization["promail.home.dialogs.rightsmgmt.archive.access.read_write"]),
                (access.MODIFY, self.delegate.localization["promail.home.dialogs.rightsmgmt.archive.access.read_write_delete"]),
            ])

        elif self.is_label():
            return OrderedDict([
                (access.OWNER, self.delegate.localization["promail.home.dialogs.rightsmgmt.label.access.owner"]),
                (access.SHARED, self.delegate.localization["promail.home.dialogs.rightsmgmt.label.access.shared"])
            ])

    @CachedProperty
    def proadmin_subjects(self):
        return {subj.guid: subj for subj in ProAdmin.application().get_subjects()}

    def normalize_rights_data(self, rights_data):
        """
        Convert rights data to normal format
        """
        aclobj_class = self.aclobj_class
        result = {}

        for subj_uuid, rights in rights_data.iteritems():
            rights = aclobj_class.to_high_level_rules(rights[0])
            if rights:
                result[subj_uuid] = rights

        return result

    def add_to_rights(self, subject, access):
        """
        Add subject rules to rights data
        """
        rights_data = self.rights_data
        rights_data[subject.guid][0] = access

        if subject.is_group():
            for user in subject.get_users():
                rights_data[user.guid][1].extend(access)

    def remove_from_rights(self, subject):
        """
        Remove subject from rights data
        """
        rights_data = self.rights_data
        rights = rights_data[subject.guid][0]

        if subject.is_group():
            for user in subject.get_users():
                if user.guid in rights_data:
                    inherited_rights = rights_data[user.guid][1]

                    for access in rights:
                        try:
                            inherited_rights.remove(access)
                        except:
                            raise

        rights_data[subject.guid][0] = []

    def prefetch_rules_from(self, aclobj):
        """
        Fetch rules from ACL object
        """
        rules = defaultdict(lambda: [[], []])
        if aclobj:
            for rule in aclobj.ll_rules():
                # save real rights
                rules[rule.subject.guid][0].append(rule.access)
                # if subject is group
                if rule.subject.user.is_group():
                    for user in rule.subject.user.get_users():
                        # save rights for group
                        rules[user.guid][1].append(rule.access)

        self.rights_data = rules

    def merge_hl_ll_rules(self, rights):
        """
        Merge rules
        """
        rights_data = self.rights_data
        aclobj_class = self.aclobj_class

        for guid, access in rights.iteritems():

            subject = self.proadmin_subjects.get(guid, None)
            if not subject:
                continue

            new_rights = aclobj_class.to_low_level_rules(access)
            rights_data[subject.guid][0].extend(new_rights)

            if subject.is_group():
                for user in subject.get_users():
                    # save rights for group
                    rights_data[user.guid][1].extend(new_rights)

    def init(self, aclobj, aclclass, rights=None):
        """
        Initializ dialog
        """
        self.aclobj_class = aclclass
        self.prefetch_rules_from(aclobj)

        if rights:
            self.merge_hl_ll_rules(rights)

    def render_rules_list(self):
        """
        Render rules list
        """
        output = OrderedDict()
        aclobj_class = self.aclobj_class
        rights_data = self.rights_data
        need_expand = self.is_extended_rules

        if need_expand:
            compute_rules = lambda rights: list(set(rights[0]) | set(rights[1]))
        else:
            compute_rules = lambda rights: rights[0]


        if rights_data:

            # iterate over all ProAdmin subjects
            for subject in sorted(self.proadmin_subjects.values(), key=lambda s: s.name.lower()):

                # if subject's access data exists
                if subject.guid in rights_data:

                    rights = rights_data[subject.guid]

                    # hide Delete icon if subject has no rules
                    hidden = u"hidden-elem" if need_expand and not rights[0] else u""

                    # compute rights, using user and group access tuples
                    rights = compute_rules(rights)

                    if rights:
                        output[subject.guid] = ACL_RIGHTS_TMPLT.format(
                            uname=escape_w_quote(subject.name),
                            uemail=escape_w_quote(u"({})".format(subject.email)) if hasattr(subject, "email") else "",
                            rights=self.access_loc[self.aclobj_class.to_high_level_rules(rights)],
                            hidden=hidden
                        )

        if output:
            self.child("rights.list").data = json.dumps(output)
            self.delegate.hide_object(self.child("rights.message"))

        else:
            self.delegate.hide_object(self.child("rights.list"))
            self.delegate.show_object(self.child("rights.message"))

    def render_rights_select(self):
        """
        Render dropdown list
        """
        access_select = OrderedDict([("select", self.delegate.localization["promail.home.dialogs.rightsmgmt.select"])])
        for key, loc in self.access_loc.items():
            access_select[key.value] = loc

        vdom_rights = self.child("adduser.rights")
        vdom_rights.value = json.dumps(access_select)
        vdom_rights.disabledvalue = \
        vdom_rights.selectedvalue = "select"

    def get_dialog_title(self):
        if self.is_mailbox():
            return self.delegate.localization["promail.home.dialogs.rightsmgmt.mailbox.title"]

        elif self.is_archive():
            return self.delegate.localization["promail.home.dialogs.rightsmgmt.archive.title"]

        elif self.is_label():
            return self.delegate.localization["promail.home.dialogs.rightsmgmt.label.title"]

    def show(self):
        """
        Show dialog
        """
        self.render_rules_list()
        self.render_rights_select()

        self.child("inherited").action("unselect", [""])
        self.child("adduser.subjects").action("setHTML", [""])
        self.child("adduser.query").action("setValue", [""])

        self.dialog.action("setTitle", [self.get_dialog_title()])
        super(ACLRightsDialog, self).show()

    def toggle_access(self):
        """
        Toggle display mode
        """
        self.is_extended_rules = self.delegate.get_argument("Value", "") == "1"
        self.render_rules_list()

    def access_icon_clicked(self):
        """
        Access icon was clicked
        """
        subject_guid = self.delegate.get_argument("itemid", "")
        action_type = self.delegate.get_argument("child", "")

        try:
            action_type = json.loads(action_type)["class"]
        except:
            action_type = None

        if not (subject_guid and action_type):
            return

        subject = ProAdmin.application().get_subject(guid=subject_guid)
        if not subject:
            self.delegate.show_error_growl(
                self.delegate.localization["promail.home.dialogs.rightsmgmt.submit.invalid_subject"],
                self.delegate.localization["global.error.title"]
            )
            self.render_rules_list()
            return

        if "delete" in action_type:
            self.remove_from_rights(subject)
            self.render_rules_list()

        else:
            if subject.guid not in self.rights_data:
                return

            self.child("adduser.query").action("setValue", [""])
            self.child("adduser.rights").action("selectItem", ["select"])
            self.child("adduser.subjects").action("setHTML", [
                ACL_RIGHTS_USER_SEARCH_TMPLT.format(
                    name=subject.name,
                    guid=subject.guid
                )
            ])

    def add_subject_rights(self):
        """
        Add user with rights
        """
        args = request.arguments
        guids = [args[key] for key in args.keys() if key.startswith("subj_")]

        try:
            access = self.aclobj_class.to_low_level_rules(
                self.aclobj_class.HL_ACCESS(self.delegate.get_argument("rights", ""))
            )

        except:
            access = ""

        if not (guids and access):
            self.delegate.show_error_growl(
                self.delegate.localization["promail.home.dialogs.rightsmgmt.submit.invalid_request"],
                self.delegate.localization["global.error.title"]
            )
            return

        application = ProAdmin.application()

        for guid in guids:
            subject = application.get_subject(guid=guid)
            self.add_to_rights(subject, access)

        self.render_rules_list()
        self.child("adduser.subjects").action("setHTML", [""])

    def submit(self):
        """
        Submit rights form
        """
        if not self.is_displayed():
            return

        callback = self.search_submit_callback()
        if callback:
            callback(self.normalize_rights_data(self.rights_data))

        self.hide()


########################################
#
# Archive Dialog Implementation
#
########################################
class ArchiveABCDialog(Dialog):

    def _connect_signals_and_slots(self):
        """
        Connect signals and slots
        """
        # archive was not found
        self.delegate.storage.archives["on_not_exists"].connect(self.archive_not_exists_error)

    def archive_not_exists_error(self):
        """
        Hide dialog if it is displayed
        """
        if self.is_displayed():
            self.hide()

    @property
    def archive(self):
        """
        Return Label instance if exists
        """
        if not hasattr(self, '_archive'):

            self._archive = None
            uuid = self.request_session.get("archive", "")

            if self.is_displayed() and uuid:
                # trying to find archive
                self._archive = self.delegate.storage.selected_mailbox.get_archive(uuid=uuid)

                # raise exception if no archive found
                if not self._archive:
                    raise ArchiveDoestNotExist

        return self._archive

    @archive.setter
    def archive(self, value):
        """
        Set archive instance, also in can be None
        """
        self._archive = value

    @archive.deleter
    def archive(self):
        """
        Delete attribute and shared variable
        """
        self.request_session.pop("archive", "")
        try:
            delattr(self, "_archive")
        except AttributeError:
            pass

    def hide(self):
        """
        Hide dialog
        """
        del self.archive
        super(ArchiveABCDialog, self).hide()

    def show(self):
        """
        Show dialog
        """
        self.request_session["archive"] = self._archive.uuid if self._archive else ""
        super(ArchiveABCDialog, self).show()


class ArchiveDeleteDialog(ArchiveABCDialog):

    DIALOG_OBJ_KEY = "dialog.archivedelete"

    def show(self):
        """
        Show dialog
        """
        show_dialog = False
        archive = self.archive

        if archive.can_modify():
            show_dialog = True
            self.delegate.show_object(self.child("checkbox.delmails"))
        else:
            self.delegate.hide_object(self.child("checkbox.delmails"))

        if archive.is_owner() and archive.type == archive.TYPE_E.USERDEF:
            show_dialog = True
            self.delegate.show_object(self.child("checkbox.delarchive"))
        else:
            self.delegate.hide_object(self.child("checkbox.delarchive"))

        if not show_dialog:
            return

        self.dialog.action("setTitle", [
            self.delegate.localization["promail.home.dialogs.archivedelete.title"]
        ])
        super(ArchiveDeleteDialog, self).show()

    def submit(self):
        """
        Submit form
        """
        if not self.is_displayed():
            return

        if self.delegate.get_argument("delarchive", "") == "1" and self.archive.is_owner():

            self.archive.remove()

            # emit signal
            self.delegate.storage.archives["on_delete"](archive=self.archive)

            self.delegate.show_info_growl(
                self.delegate.localization["promail.home.dialogs.archivedelete.archive.success"],
                self.delegate.localization["global.form.submit.success.title"]
            )


        if self.delegate.get_argument("delmails", "") == "1" and self.archive.can_modify():

            self.delegate.show_info_growl(
                self.delegate.localization["promail.home.dialogs.archivedelete.mails.success"],
                self.delegate.localization["global.form.submit.success.title"]
            )

        self.hide()


class ArchiveInfoDialog(ArchiveABCDialog):

    DIALOG_OBJ_KEY = "dialog.archiveinfo"

    @property
    def rights_data(self):
        return self.request_session.get("rights_data", None)

    @rights_data.setter
    def rights_data(self, value):
        self.request_session["rights_data"] = value

    @rights_data.deleter
    def rights_data(self, value):
        self.request_session.pop("rights_data", None)

    def get_shares_list(self, archive):
        cu = self.delegate.current_user
        return [subject.name for subject in archive.hl_rules() if subject.guid != cu.guid]

    def show_shared_data(self, shared_with):
        if shared_with:
            text = u"{}: {}".format(
                self.delegate.localization["promail.home.dialogs.archiveinfo.shared.label"],
                shared_with
            )

        else:
            text = self.delegate.localization["promail.home.dialogs.archiveinfo.shared.nobody"]

        self.child("shared").action("setText", [escape_w_quote(text)])

    def localize_archive_name(self, archive, escape=True):
        """
        Localize archive name if possible
        """
        if archive.type == archive.TYPE_E.USERDEF:
            return escape_w_quote(archive.name) if escape else archive.name

        return self.delegate.localization["promail.home.sidebar.archives." + archive.type.value.lower()]

    def render_sources_list(self):
        """
        Render dropdown list of servers
        """
        sources = OrderedDict([
            ("select", self.delegate.localization["promail.home.dialogs.archiveinfo.rights.sources.selectsource"]),
            (ARCHIVE_RIGHTS_MAILBOX_KEY, self.delegate.localization["promail.home.dialogs.archiveinfo.rights.sources.mailbox"]),
        ])

        if not self.archive:
            sources[ARCHIVE_RIGHTS_LATER_KEY] = self.delegate.localization["promail.home.dialogs.archiveinfo.rights.sources.selectlater"]

        sources["hrline"] = ""

        for archive in sorted(self.delegate.storage.selected_mailbox.archives(), key=lambda x: x.name.lower()):
            sources[archive.uuid] = self.localize_archive_name(archive)

        vdom_list = self.child("sources")
        vdom_list.value = json.dumps(sources)
        vdom_list.selectedvalue = ARCHIVE_RIGHTS_MAILBOX_KEY
        vdom_list.disabledvalue = json.dumps(("hrline", "select"))

    def show(self):
        """
        Show dialog
        """
        if not self.delegate.storage.selected_mailbox.is_owner():
            return

        archive = self.archive
        if archive:
            title = self.delegate.localization["promail.home.dialogs.archiveinfo.edit.title"]
            archive_name = self.localize_archive_name(archive, escape=False)
            archive_shared = ", ".join(self.get_shares_list(archive))

        else:
            title = self.delegate.localization["promail.home.dialogs.archiveinfo.create.title"]
            archive_name = ""
            archive_shared = ""

        self.dialog.action("setTitle", [title])
        self.child("archname").action("setValue", [archive_name])
        self.render_sources_list()
        self.show_shared_data(archive_shared)
        super(ArchiveInfoDialog, self).show()

    def show_another(self):
        """
        Show dialog to create another label
        """
        self.child("archname").action("setValue", [""])

        if self.archive:
            del self.archive
            del self.rights_data

            self.child("shared").action("setText", [
                self.delegate.localization["promail.home.dialogs.archiveinfo.shared.nobody"]
            ])

            self.dialog.action("setTitle", [self.delegate.localization["promail.home.dialogs.archiveinfo.create.title"]])

    def collect_args(self):
        """
        Collect form arguments from request
        """
        return {
            "archive": self.archive,
            "name": self.delegate.get_argument("archname", ""),
            "sources": self.delegate.get_argument("sources", ""),
            "submit": self.delegate.get_argument("submit", "") == "1",
            "rights": self.delegate.get_argument("rights", "") == "1",
            "another": self.delegate.get_argument("addanother", "") == "1",
        }

    def verify_args(self, args):
        """
        Verify arguments and return True if OK else False
        """
        err_keys = []

        if not self.delegate.storage.selected_mailbox.is_owner():
            err_keys.append(self.delegate.localization["promail.home.dialogs.archiveinfo.submit.error.access"])

        if not args["name"]:
            err_keys.append(self.delegate.localization["promail.home.dialogs.archiveinfo.submit.error.name"])

        if err_keys:
            self.delegate.show_error_growl(
                err_keys,
                self.delegate.localization["global.form.submit.failed.title"]
            )

        return not bool(err_keys)

    def submit(self):
        """
        Submit form
        """
        if not self.is_displayed():
            return

        args = self.collect_args()
        if not self.verify_args(args):
            return

        if args["rights"]:
            self.show_rights_dialog()
            return

        if not args["archive"]:
            archive = self.delegate.storage.selected_mailbox.create_archive(name=args["name"])

            # emit signal
            self.delegate.storage.archives["on_create"](archive=archive)

        else:
            archive = args["archive"]
            archive.name = args["name"]
            archive.save()

            # emit signal
            self.delegate.storage.archives["on_update"](archive=archive)

        # show notification and hide dialog
        msg = self.delegate.localization["promail.home.dialogs.archiveinfo.submit.success"] if not args["archive"] else \
              self.delegate.localization["promail.home.dialogs.archiveinfo.update.success"]

        self.delegate.show_info_growl(
            msg,
            self.delegate.localization["global.form.submit.success.title"]
        )

        if args["another"]:
            self.show_another()

        else:
            self.hide()

    def copy_rights_from(self, src, dst):
        """
        Copy rights from src object
        """
        if src == ARCHIVE_RIGHTS_MAILBOX_KEY:
            src = self.delegate.storage.selected_mailbox

        else:
            src = self.delegate.storage.selected_mailbox.get_archive(uuid=src)

        if not src:
            self.delegate.show_warning_growl(
                self.delegate.localization["promail.home.dialogs.archiveinfo.rights.failed"],
                self.delegate.localization["global.form.submit.warning.title"]
            )
            return

        dst.copy_rights_from(src)
        self.delegate.show_warning_growl(
            self.delegate.localization["promail.home.dialogs.archiveinfo.rights.success"],
            self.delegate.localization["global.form.submit.success.title"]
        )

    def show_rights_dialog(self):
        """
        Show rights dialog
        """
        dialog = self.delegate.acl_rights_dialog
        dialog.submit_callback = "archive_info_dialog.save_rights_data"
        dialog.init(self.archive, ProMail.ACLArchive, self.rights_data)
        dialog.show()

    def save_rights_data(self, rights_data):
        """
        Saving rights data from Rights Dialog
        And update "shared with" text
        """
        self.rights_data = rights_data
        subjects = ProAdmin.application().get_subjects()
        shared = ", ".join([subject.name for subject in subjects if subject.guid in rights_data])
        self.show_shared_data(shared)


########################################
#
# Label Dialogs Implementation
#
########################################
class LabelsManagementDialog(Dialog):

    DIALOG_OBJ_KEY = "dialog.labelsmgmt"

    def _connect_signals_and_slots(self):
        """
        Connect signals and slots
        """
        # labels was deleted
        self.delegate.storage.labels["on_delete"].connect(self.refresh)

        # new label was created
        self.delegate.storage.labels["on_create"].connect(self.refresh)

        # label was updated
        self.delegate.storage.labels["on_update"].connect(self.refresh)

        # labels was not found
        self.delegate.storage.labels["on_not_exists"].connect(self.refresh)

    def refresh(self, *args, **kwargs):
        """
        Refresh dialog data if it is displayed
        """
        if self.is_displayed():
            self.show()

    def show(self):
        """
        Show dialog
        """
        result = OrderedDict()
        for label in self.delegate.storage.available_labels:
            result[label.uuid] = LABEL_MGMT_ITEM_TMPLT.format(
                label=escape_w_quote(label.name),
                color=label.color,
                hidden=u"hidden" if not label.is_owner() else u""
            )

        self.child("labels.list").data = json.dumps(result)

        if result:
            self.delegate.hide_object(self.delegate.vdom_objects["dialog.labelsmgmt.labels.message"])

        else:
            self.delegate.show_object(self.delegate.vdom_objects["dialog.labelsmgmt.labels.message"])

        super(LabelsManagementDialog, self).show()

    def child_clicked(self):
        """
        Child item was clicked
        """
        itemid = self.delegate.get_argument("itemid", "")
        label  = None

        if itemid:
            labels = ProMail.ACLLabel.get_available(uuid=itemid)
            if not labels:
                raise LabelDoestNotExist

            label = labels[0]

        if not label:
            return

        try:
            child_item = json.loads(self.delegate.get_argument("child", "")).get('class', '')
        except:
            return

        if not child_item:
            return

        dialogs_map = {
            "edit": self.delegate.label_info_dialog,
            "delete": self.delegate.label_delete_dialog,
        }

        for key, inst in dialogs_map.items():
            if key in child_item:
                inst.label = label
                inst.show()
                break


class LabelABCDialog(Dialog):

    def _connect_signals_and_slots(self):
        """
        Connect signals and slots
        """
        # labels was not found
        self.delegate.storage.labels["on_not_exists"].connect(self.label_not_exists_error)

    def label_not_exists_error(self):
        """
        Hide dialog if it is displayed
        """
        if self.is_displayed():
            self.hide()

    @property
    def label(self):
        """
        Return Label instance if exists
        """
        if not hasattr(self, '_label'):

            self._label = None
            uuid = self.request_session.get("label", "")

            if self.is_displayed() and uuid:
                # trying to find label
                labels = ProMail.ACLLabel.get_available(uuid=uuid)
                self._label = labels[0] if labels else None

                # raise exception if no label found
                if not self._label:
                    raise LabelDoestNotExist

        return self._label

    @label.setter
    def label(self, value):
        """
        Set label instance, also in can be None
        """
        self._label = value

    @label.deleter
    def label(self):
        """
        Delete attribute and shared variable
        """
        self.request_session.pop("label", "")
        try:
            delattr(self, "_label")
        except AttributeError:
            pass

    def hide(self):
        """
        Hide dialog
        """
        del self.label
        super(LabelABCDialog, self).hide()

    def show(self):
        """
        Show dialog
        """
        self.request_session["label"] = self._label.uuid if self._label else ""
        super(LabelABCDialog, self).show()


class LabelDeleteDialog(LabelABCDialog):

    DIALOG_OBJ_KEY = "dialog.labeldelete"

    def show(self):
        """
        Show dialog
        """
        self.child("message").action("setText", [
            self.delegate.localization["promail.home.dialogs.labeldelete.message.real"] if self.label.is_owner() else \
            self.delegate.localization["promail.home.dialogs.labeldelete.message.fake"]
        ])
        self.dialog.action("setTitle", [
            self.delegate.localization["promail.home.dialogs.labeldelete.title"]
        ])
        super(LabelDeleteDialog, self).show()

    def submit(self):
        """
        Submit form
        """
        if not self.is_displayed():
            return

        self.label.remove()
        self.delegate.show_info_growl(
            self.delegate.localization["promail.home.dialogs.labeldelete.success"],
            self.delegate.localization["global.form.submit.success.title"]
        )

        self.delegate.storage.labels["on_delete"](label=self.label)
        self.hide()


class LabelInfoDialog(LabelABCDialog):

    DIALOG_OBJ_KEY = "dialog.labelinfo"

    @property
    def rights_data(self):
        return self.request_session.get("rights_data", None)

    @rights_data.setter
    def rights_data(self, value):
        self.request_session["rights_data"] = value

    @rights_data.deleter
    def rights_data(self, value):
        self.request_session.pop("rights_data", None)

    def get_shares_list(self, label):
        cu = self.delegate.current_user
        return [subject.name for subject in label.hl_rules() if subject.guid != cu.guid]

    def show_shared_data(self, shared_with):
        if shared_with:
            text = u"{}: {}".format(
                self.delegate.localization["promail.home.dialogs.labelinfo.shared.label"],
                shared_with
            )

        else:
            text = self.delegate.localization["promail.home.dialogs.labelinfo.shared.nobody"]

        self.child("shared").action("setText", [escape_w_quote(text)])

    def show(self, name=""):
        """
        Show dialog
        """
        if self.label:
            title = self.delegate.localization["promail.home.dialogs.labelinfo.edit.title"]
            label_name = self.label.name
            label_color = "#" + self.label.color
            label_shared = ", ".join(self.get_shares_list(self.label))

        else:
            title = self.delegate.localization["promail.home.dialogs.labelinfo.new.title"]
            label_name = name
            label_color = DEFAULT_COLOR
            label_shared = ""

        self.dialog.action("setTitle", [title])
        self.child("name").action("setValue", [label_name])
        self.child("color").action("setValue", [label_color])
        self.show_shared_data(label_shared)
        super(LabelInfoDialog, self).show()

    def show_another(self):
        """
        Show dialog to create another label
        """
        self.child("name").action("setValue", [""])
        self.child("color").action("setValue", [DEFAULT_COLOR])

        if self.label:
            del self.label
            del self.rights_data

            self.child("shared").action("setText", [
                self.delegate.localization["promail.home.dialogs.labelinfo.shared.nobody"]
            ])

            self.dialog.action("setTitle", [self.delegate.localization["promail.home.dialogs.labelinfo.new.title"]])

    def show_rights_dialog(self):
        """
        Show rights dialog
        """
        dialog = self.delegate.acl_rights_dialog
        dialog.submit_callback = "label_info_dialog.save_rights_data"
        dialog.init(self.label, ProMail.ACLLabel, self.rights_data)
        dialog.show()

    def save_rights_data(self, rights_data):
        """
        Saving rights data from Rights Dialog
        And update "shared with" text
        """
        self.rights_data = rights_data
        subjects = ProAdmin.application().get_subjects()
        shared = ", ".join([subject.name for subject in subjects if subject.guid in rights_data])
        self.show_shared_data(shared)

    def collect_args(self):
        """
        Collect form arguments from request
        """
        return {
            "label": self.label,
            "name": self.delegate.get_argument("shortcut", ""),
            "color": self.delegate.get_argument("color", "").replace("#", ""),
            "submit": self.delegate.get_argument("submit", "") == "1",
            "rights": self.delegate.get_argument("rights", "") == "1",
            "another": self.delegate.get_argument("addanother", "") == "1",
        }

    def verify_args(self, args):
        """
        Verify arguments and return True if OK else False
        """
        err_keys = []

        if args["label"] and not args["label"].is_owner():
            err_keys.append(self.delegate.localization["promail.home.dialogs.labelinfo.submit.error.label"])

        if not args["name"]:
            err_keys.append(self.delegate.localization["promail.home.dialogs.labelinfo.submit.error.name"])

        if not args["color"]:
            err_keys.append(self.delegate.localization["promail.home.dialogs.labelinfo.submit.error.color"])

        elif not HEX_COLOR_RE.match(args["color"]):
            err_keys.append(self.delegate.localization["promail.home.dialogs.labelinfo.submit.error.invalid_color"])

        if err_keys:
            self.delegate.show_error_growl(
                err_keys,
                self.delegate.localization["global.form.submit.failed.title"]
            )

        return not bool(err_keys)

    def submit(self):
        """
        Submit form
        """
        if not self.is_displayed():
            return

        args = self.collect_args()
        if not self.verify_args(args):
            return

        if args["rights"]:
            self.show_rights_dialog()
            return

        if not args["label"]:
            label = ProMail.ACLLabel.create(
                name=args["name"],
                color=args["color"]
            )

            self.delegate.storage.labels["on_create"](label=label)

        else:
            label = args["label"]
            label.name = args["name"]
            label.color = args["color"]
            label.save()

            self.delegate.storage.labels["on_update"](label=label)

        self.delegate.show_info_growl(
            self.delegate.localization["promail.home.dialogs.labelinfo.update.success"] if args["label"] else \
            self.delegate.localization["promail.home.dialogs.labelinfo.submit.success"],

            self.delegate.localization["global.form.submit.success.title"]
        )

        if args["another"]:
            self.show_another()

        else:
            self.hide()


########################################
#
# Mailbox Dialogs Implementation
#
########################################
class MailboxABCDialog(Dialog):

    def _connect_signals_and_slots(self):
        """
        Connect signals and slots
        """
        # labels was not found
        self.delegate.storage.mailboxes["on_not_exists"].connect(self.mailbox_not_exists_error)

    def mailbox_not_exists_error(self):
        """
        Hide dialog if it is displayed
        """
        if self.is_displayed():
            self.hide()

    @property
    def mailbox(self):
        """
        Return Mailbox instance if exists
        """
        if not hasattr(self, '_mailbox'):

            self._mailbox = None
            uuid = self.request_session.get("mailbox", "")

            if self.is_displayed() and uuid:

                if uuid != self.delegate.storage.selected_mailbox.uuid:
                    raise SelectedMailboxDoesNotExist

                self._mailbox = self.delegate.storage.selected_mailbox

        return self._mailbox

    @mailbox.setter
    def mailbox(self, value):
        """
        Set Mailbox instance, also in can be None
        """
        self._mailbox = value

    @mailbox.deleter
    def mailbox(self):
        """
        Delete attribute and shared variable
        """
        self.request_session.pop("mailbox", "")
        try:
            delattr(self, "_mailbox")
        except AttributeError:
            pass

    def hide(self):
        """
        Hide dialog
        """
        del self.mailbox
        super(MailboxABCDialog, self).hide()

    def show(self):
        """
        Show dialog
        """
        self.request_session["mailbox"] = self._mailbox.uuid if self._mailbox else ""
        super(MailboxABCDialog, self).show()


class MailboxDeleteDialog(MailboxABCDialog):

    DIALOG_OBJ_KEY = "dialog.mailboxdelete"

    def show(self):
        """
        Show dialog
        """
        self.child("message").action("setText", [
            self.delegate.localization["promail.home.dialogs.mailboxdelete.message.real"] if self.mailbox.is_owner() else \
            self.delegate.localization["promail.home.dialogs.mailboxdelete.message.fake"]
        ])
        self.dialog.action("setTitle", [
            self.delegate.localization["promail.home.dialogs.mailboxdelete.title"]
        ])
        super(MailboxDeleteDialog, self).show()

    def submit(self):
        """
        Submit form
        """
        if not self.is_displayed():
            return

        self.mailbox.remove()
        self.delegate.show_info_growl(
            self.delegate.localization["promail.home.dialogs.mailboxdelete.success"],
            self.delegate.localization["global.form.submit.success.title"]
        )

        self.delegate.storage.mailboxes["on_delete"](mailbox=self.mailbox)
        self.hide()


class MailboxInfoDialog(MailboxABCDialog):

    DIALOG_OBJ_KEY = "dialog.mailboxinfo"

    @property
    def rights_data(self):
        return self.request_session.get("rights_data", None)

    @rights_data.setter
    def rights_data(self, value):
        self.request_session["rights_data"] = value

    @rights_data.deleter
    def rights_data(self, value):
        self.request_session.pop("rights_data", None)

    def format_creator(self, creator_tuple):
        """
        Format creator information
        """
        name, email = creator_tuple
        if email:
            name = u"{} ({})".format(name, email)

        return name

    def render_servers_list(self):
        """
        Render dropdown list of servers
        """
        servers = OrderedDict([
            ("", self.delegate.localization["promail.home.dialogs.mailboxinfo.servers.selectfrom"])
        ])
        for conn in ProMail.Connectivity.get_available(disabled=False, sort=True):
            servers[conn.uuid] = escape_w_quote(conn.name)

        vdom_list = self.child("server")
        vdom_list.value = json.dumps(servers)
        vdom_list.disabledvalue = ""
        vdom_list.selectedvalue = self.mailbox.connection.uuid if self.mailbox and self.mailbox.connection else ""

    def get_shares_list(self, mailbox):
        cu = self.delegate.current_user
        return [subject.name for subject in mailbox.hl_rules() if subject.guid != cu.guid]

    def show_shared_data(self, shared_with):
        if shared_with:
            text = u"{}: {}".format(
                self.delegate.localization["promail.home.dialogs.mailboxinfo.addinfo.shared.users"],
                shared_with
            )

        else:
            text = self.delegate.localization["promail.home.dialogs.mailboxinfo.addinfo.shared.nobody"]

        self.child("shared").action("setText", [escape_w_quote(text)])

    def show(self):
        """
        Show dialog
        """
        mailbox = self.mailbox
        if self.mailbox:
            title = self.delegate.localization["promail.home.dialogs.mailboxinfo.edit.title"]
            creator_name = ""
            mailbox_name = mailbox.name
            mailbox_color = mailbox.color
            mailbox_type, mailbox_action = ("select", "toVirtual") if mailbox.is_virtual() else ("unselect", "toReal")
            mailbox_login = mailbox.login
            mailbox_passwd = PASSWD_PLACEHOLDER if mailbox.passwd else ""
            mailbox_shared = self.get_shares_list(mailbox)

            mailbox_creator = mailbox.creator()
            if mailbox_creator:
                mailbox_creator = (mailbox_creator.name, mailbox_creator.notification_email)

            else:
                mailbox_creator = (mailbox.creator_name, '')

        else:
            title = self.delegate.localization["promail.home.dialogs.mailboxinfo.create.title"]
            creator_name = ""
            mailbox_name = ""
            mailbox_color = DEFAULT_COLOR
            mailbox_type = "unselect"
            mailbox_action = "toReal"
            mailbox_login = ""
            mailbox_passwd = ""
            mailbox_shared = ""
            mailbox_creator = (self.delegate.current_user.name, self.delegate.current_user.notification_email)


        self.dialog.action("setTitle", [title])
        self.child("boxname").action("setValue", [mailbox_name])
        self.child("color").action("setValue", ["#" + mailbox_color])
        self.child("boxtype").action(mailbox_type, [""])
        self.child("login").action("setValue", [mailbox_login])
        self.child("passwd").action("setValue", [mailbox_passwd])
        self.child("creator").action("setText", [u"{}: {}".format(
            self.delegate.localization["promail.home.dialogs.mailboxinfo.addinfo.creator"],
            escape_w_quote(self.format_creator(mailbox_creator))
        )])
        self.show_shared_data(mailbox_shared)
        self.render_servers_list()

        self.delegate.page.action("custom", ["ProMail.Forms.Mailbox.%s()" % mailbox_action])
        super(MailboxInfoDialog, self).show()

    def collect_args(self):
        """
        Collect form arguments from request
        """
        return {
            "mailbox": self.mailbox,
            "name": self.delegate.get_argument("boxname", ""),
            "color": self.delegate.get_argument("color", "").replace("#", ""),
            "login": self.delegate.get_argument("login", ""),
            "passwd": self.delegate.get_argument("passwd", ""),
            "server": list(ProMail.Connectivity.get_available(uuid=self.delegate.get_argument("server","") or "unknown")),
            "checkconn": self.delegate.get_argument("checkconn", "") == "1",
            "virtual": self.delegate.get_argument("boxtype", "") == "1",
            "submit": self.delegate.get_argument("submit", "") == "1",
            "rights": self.delegate.get_argument("rights", "") == "1",
        }

    def verify_args(self, args):
        """
        Verify arguments and return True if OK else False
        """
        err_keys = []

        if args["mailbox"] and not args["mailbox"].is_owner():
            err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.mailbox"])

        if not args["name"]:
            err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.name"])

        if not args["color"]:
            err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.color"])

        elif not HEX_COLOR_RE.match(args["color"]):
            err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.invalid_color"])

        if not args["virtual"]:
            if not args["login"]:
                err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.login"])

            if not args["passwd"]:
                err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.passwd"])

            if not args["server"]:
                err_keys.append(self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.error.server"])

        if err_keys:
            self.delegate.show_error_growl(
                err_keys,
                self.delegate.localization["global.form.submit.failed.title"]
            )

        return not bool(err_keys)

    def submit(self):
        """
        Submit form
        """
        if not self.is_displayed():
            return

        args = self.collect_args()
        if not self.verify_args(args):
            return

        if args["checkconn"] and not args["virtual"]:
            self.check_mailbox_connection(args)
            return

        if args["rights"]:
            self.show_rights_dialog()
            return

        args["server"] = args["server"][0] if args["server"] else None

        if not args["mailbox"]:
            mailbox = ProMail.ACLMailbox.create(
                name=args["name"],
                connection=args["server"],
                color=args["color"],
                login=args["login"],
                passwd=args["passwd"],
                _is_virtual=args["virtual"]
            )

            sig = self.delegate.storage.mailboxes["on_create"]

        else:
            mailbox = args["mailbox"]
            mailbox.name = args["name"]
            mailbox.connection = args["server"]
            mailbox.color = args["color"]
            mailbox.login = args["login"]

            if args["passwd"] != PASSWD_PLACEHOLDER:
                mailbox.passwd = args["passwd"]

            # emit signal
            sig = self.delegate.storage.mailboxes["on_update"]


        if args["virtual"]:
            mailbox.make_virtual()

        else:
            mailbox.make_real()

        sig(mailbox=mailbox)


        # show notification and hide dialog
        msg = self.delegate.localization["promail.home.dialogs.mailboxinfo.submit.success"] if not args["mailbox"] else \
              self.delegate.localization["promail.home.dialogs.mailboxinfo.update.success"]

        self.delegate.show_info_growl(
            msg,
            self.delegate.localization["global.form.submit.success.title"]
        )

        self.hide()

    def check_mailbox_connection(self, args):
        """
        Check connection to mailbox account
        """
        if args["mailbox"] and args["passwd"] == PASSWD_PLACEHOLDER:
            args["passwd"] = args["mailbox"].passwd

        data = args.copy()

        # remove non serializeable data
        del data["mailbox"]

        # convert connection data to json
        data["server"] = data["server"][0].to_json()

        # starting new task
        dialog = self.delegate.async_task_dialog
        dialog.task_uuid = ProMail.test_account_connection(data).uuid
        dialog.callback = "mailbox_info_dialog.process_task_output"
        dialog.set_dialog_title(self.delegate.localization["promail.home.dialogs.checktask.title.check_account_access"])
        dialog.start_task_monitoring()

    def process_task_output(self, output):
        output = json.loads(output)

        has_errors = False
        stat_out = []

        i = 1

        for task_set in output["stat"]:

            j = 1

            for task_name, ret in task_set:
                has_errors |= ret

                ret = (self.delegate.localization["promail.home.dialogs.checktask.success.test_failed"] if ret else
                      self.delegate.localization["promail.home.dialogs.checktask.success.test_passed"])

                stat_out.append(u"{}.{} {} - {}!".format(
                    i, j,
                    self.delegate.localization["promail.home.dialogs.checktask.tasks." + task_name],
                    ret
                ))

                j += 1

            i += 1

        stat_out.append('')
        stat_out.append(self.delegate.localization["promail.home.dialogs.checktask.success.tests_failed"] if has_errors else
                        self.delegate.localization["promail.home.dialogs.checktask.success.tests_passed"])

        return u"\n".join(stat_out) + output["output"]

    def show_rights_dialog(self, from_sidebar=False):
        """
        Show rights dialog
        """
        dialog = self.delegate.acl_rights_dialog

        if from_sidebar:
            dialog.submit_callback = "mailbox_info_dialog.apply_rights_data"

        else:
            dialog.submit_callback = "mailbox_info_dialog.save_rights_data"

        dialog.init(self.mailbox, ProMail.ACLMailbox, self.rights_data)
        dialog.show()

    def save_rights_data(self, rights_data):
        """
        Saving rights data from Rights Dialog
        And update "shared with" text
        """
        self.rights_data = rights_data
        subjects = ProAdmin.application().get_subjects()
        shared = ", ".join([subject.name for subject in subjects if subject.guid in rights_data])
        self.show_shared_data(shared)

    def apply_rights_data(self, rights_data):
        """
        Saving rights data from Rights Dialog
        """
        pass


########################################
#
# Sidebar Implementation
#
########################################
class Sidebar(Widget):

    def _connect_signals_and_slots(self):
        """
        Connect signals and slots
        """
        # new mailbox was created
        self.delegate.storage.mailboxes["on_create"].connect(self.on_mailbox_create)

        # other mailbox was selected
        self.delegate.storage.mailboxes["on_change"].connect(self.on_mailbox_change)

        # mailbox was deleted
        self.delegate.storage.mailboxes["on_delete"].connect(self.on_mailbox_delete)

        # mailbox was updated
        self.delegate.storage.mailboxes["on_update"].connect(self.on_mailbox_update)

        # mailbox doesn't exist
        self.delegate.storage.mailboxes["on_not_exists"].connect(self.on_mailbox_not_exists)


        # new archive was created
        self.delegate.storage.archives["on_create"].connect(self.on_archive_create)

        # other archive was selected
        self.delegate.storage.archives["on_change"].connect(self.on_archive_change)

        # archive was deleted
        self.delegate.storage.archives["on_delete"].connect(self.on_archive_delete)

        # archive was updated
        self.delegate.storage.archives["on_update"].connect(self.on_archive_update)

        # archive doesn't exist
        self.delegate.storage.archives["on_not_exists"].connect(self.on_archive_not_exists)

    def on_archive_create(self, archive):
        """
        On archive create
        """
        self.delegate.storage.selected_archive = archive
        self.render()

    def on_archive_delete(self, archive):
        """
        On archive delete
        """
        try:
            if self.delegate.storage.selected_archive.uuid == archive.uuid:
                del self.delegate.storage.selected_archive
        except:
            del self.delegate.storage.selected_archive

        self.render()

    def on_archive_change(self, archive):
        """
        On archive update (name, color or something else)
        """
        self.delegate.storage.selected_archive = archive
        self.render()

    def on_archive_update(self, archive):
        """
        On archive update (name, color or something else)
        """
        self.render()

    def on_archive_not_exists(self):
        """
        Looks like archive doesn't exist, need to re-render
        """
        try:
            archive = self.delegate.storage.selected_archive
        except:
            del self.delegate.storage.selected_archive

        self.render()

    def on_mailbox_create(self, mailbox):
        """
        On mailbox create
        """
        # clear list of available mailboxes and archive
        del self.delegate.storage.available_mailboxes
        del self.delegate.storage.selected_archive

        # set new active mailbox
        self.delegate.storage.selected_mailbox = mailbox
        self.render()

    def on_mailbox_change(self, mailbox):
        """
        On mailbox change
        """
        # clear list of available mailboxes and archive
        del self.delegate.storage.available_mailboxes
        del self.delegate.storage.selected_archive

        # set new active mailbox
        self.delegate.storage.selected_mailbox = mailbox
        self.render()

    def on_mailbox_delete(self, mailbox):
        """
        On mailbox delete
        """
        # clear list of available mailboxes
        del self.delegate.storage.available_mailboxes
        del self.delegate.storage.selected_mailbox
        del self.delegate.storage.selected_archive
        self.render()

    def on_mailbox_update(self, mailbox):
        """
        On mailbox update (name, color or something else)
        """
        # clear list of available mailboxes
        del self.delegate.storage.available_mailboxes
        self.delegate.storage.selected_mailbox = mailbox
        self.render()

    def on_mailbox_not_exists(self):
        """
        Looks like mailbox doesn't exist, need to re-render
        """
        # clear list of available mailboxes
        del self.delegate.storage.available_mailboxes

        try:
            mailbox = self.delegate.storage.selected_mailbox

        except SelectedMailboxDoesNotExist:
            del self.delegate.storage.selected_archive
            del self.delegate.storage.selected_mailbox

        self.render()

    def load(self):
        """
        Initial render (i.e. on page loading or some errors)
        """
        # fetch list of available mailboxes again
        if not self.delegate.storage.selected_mailbox and \
           self.delegate.storage.available_mailboxes:

            self.delegate.storage.selected_mailbox = self.delegate.storage.available_mailboxes[0]

        self.render()

    def render(self, *args, **kwargs):
        """
        Render all sidebar items
        """
        self.render_unread_mailbox_list()
        self.render_mailboxes_list()
        self.render_selected_mailbox()
        self.render_mailbox_options_list()
        self.render_archives_list()

    def render_unread_mailbox_list(self):
        """
        Render Unread Mailboxes list
        """
        mailboxes = [(mailbox.unread_msg_count(), mailbox) for mailbox in self.delegate.storage.available_mailboxes]

        result = OrderedDict()
        for msgcount, mailbox in reversed(sorted(mailboxes, key=lambda x: x[0])):
            # if msgcount:
            result[mailbox.uuid] = {
                "msgcount": str(msgcount),
                "bgcolor": mailbox.color,
                "txtcolor": mailbox.text_color,
                "hint": u"{}{}".format(
                    escape_w_quote(mailbox.name),
                    u" {}".format(escape_w_quote(mailbox.login) if mailbox.is_virtual() else u"")
                )
            }

        if len(result):
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.mailboxes.unread.message"])
            self.delegate.vdom_objects["sidebar.mailboxes.unread.list"].data = json.dumps(result)

        else:
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.mailboxes.unread.list"])
            self.delegate.vdom_objects["sidebar.mailboxes.unread.message"].value = \
                self.delegate.localization["promail.home.sidebar.mailboxes.unread.message.no_mails"] if mailboxes else \
                self.delegate.localization["promail.home.sidebar.mailboxes.unread.message.no_mailboxes"]

    def render_mailboxes_list(self):
        """
        Render dropdown list of mailboxes
        """
        result = OrderedDict()
        result[LIST_NEW_ITEM_KEY] = NEW_MAILBOX_SELECT_TMPLT.format(
            boxname=self.delegate.localization["promail.home.sidebar.mailboxes.create_new"]
        )

        for mailbox in self.delegate.storage.available_mailboxes:
            result[mailbox.uuid] = MAILBOXES_SELECT_TMPLT.format(
                boxname=escape_w_quote(mailbox.name),
                boxaddr=escape_w_quote(mailbox.login),
                boxcolor=mailbox.color,
            )

        vdom_list = self.delegate.vdom_objects["sidebar.mailboxes.select.list"]
        vdom_list.data = json.dumps(result)
        vdom_list.selectablerows = json.dumps(result.keys()[1:] or [NOT_SELECTABLE_KEY])

        if self.delegate.storage.selected_mailbox:
            vdom_list.selectedrows = json.dumps([self.delegate.storage.selected_mailbox.uuid])

    def render_selected_mailbox(self, mailbox=None):
        """
        Render selected mailbox UI
        """
        selected_mailbox = self.delegate.storage.selected_mailbox

        if not selected_mailbox:
            self.delegate.vdom_objects["sidebar.mailboxes.current.name"].value = self.delegate.localization["promail.home.sidebar.mailboxes.select_mailbox"]
            self.delegate.vdom_objects["sidebar.mailboxes.current.addr"].value = self.delegate.localization["promail.home.sidebar.mailboxes.no_selected_mailbox"]
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.mailboxes.current.color"])
            return

        self.delegate.vdom_objects["sidebar.mailboxes.current.name"].value = \
        self.delegate.vdom_objects["sidebar.mailboxes.current.name"].hint = escape_w_quote(selected_mailbox.name)
        self.delegate.vdom_objects["sidebar.mailboxes.current.color"].color = selected_mailbox.color

        if selected_mailbox.is_virtual():
            self.delegate.vdom_objects["sidebar.mailboxes.current.addr"].value= self.delegate.localization["promail.home.sidebar.mailboxes.virtual_mailbox"]

        else:
            self.delegate.vdom_objects["sidebar.mailboxes.current.addr"].value = \
            self.delegate.vdom_objects["sidebar.mailboxes.current.addr"].hint = escape_w_quote(selected_mailbox.login)

    def _archive_localization(self, archive):
        """
        Localize archive name if possible
        """
        if archive.type == archive.TYPE_E.USERDEF:
            return escape_w_quote(archive.name)

        return self.delegate.localization["promail.home.sidebar.archives." + archive.type.value.lower()]

    def _render_archive(self, archive, template):
        """
        Render archive using template
        """
        # unread mails in archive
        unread = ARCHIVE_UNREAD_MESSAGES.format(unread=archive.unread_msg_count())

        return template.format(
            archname=self._archive_localization(archive),
            archunread=unread,
            archicon=ARCHIVE_ICONS_MAP.get(archive.type, ""),
        )

    def render_archives_list(self):
        """
        Render selected mailbox archives
        """
        selected_mailbox = self.delegate.storage.selected_mailbox

        if not selected_mailbox:
            del self.delegate.storage.selected_archive
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.archives.attention"])
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.archives.list"])
            return

        archives = selected_mailbox.archives()
        output = OrderedDict()

        if selected_mailbox.is_owner():
            output[LIST_NEW_ITEM_KEY] = NEW_ARCHIVE_LIST_TMPLT.format(
                archname=self.delegate.localization["promail.home.sidebar.archives.create_new"]
            )
            archive_template = ARCHIVES_LIST_ITEM_TMPLT % {
                'editicon': ARCHIVE_OPT_EDT_ICON,
                'deleteicon': ARCHIVE_OPT_DEL_ICON,
                'controls': u'with-controls',
            }

        else:
            archive_template = ARCHIVES_LIST_ITEM_TMPLT % {
                'editicon': u'',
                'deleteicon': u'',
                'controls': u'',
            }

        if archives.inbox:
            output[archives.inbox.uuid] = self._render_archive(
                archives.inbox,
                archive_template
            )

        if archives.outbox:
            output[archives.outbox.uuid] = self._render_archive(
                archives.outbox,
                archive_template
            )

        if archives.draft:
            output[archives.draft.uuid] = self._render_archive(
                archives.draft,
                archive_template
            )

        for archive in archives.userdefined:
            output[archive.uuid] = self._render_archive(archive, archive_template)

        if archives.deleted:
            output[archives.deleted.uuid] = self._render_archive(
                archives.deleted,
                archive_template
            )

        if not output:
            self.delegate.show_object(self.delegate.vdom_objects["sidebar.archives.attention"])
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.archives.list"])
            del self.delegate.storage.selected_archive
            return

        writeable_uuids = [archive.uuid for archive in archives if archive.can_write()]
        selected_uuid = ''

        if not self.delegate.storage.selected_archive and archives.archives:
            self.delegate.storage.selected_archive = archives.archives[0]

        if self.delegate.storage.selected_archive:
            selected_uuid = self.delegate.storage.selected_archive.uuid

        # Inbox , and custom archives are droppable, except selected archive
        droppable_uuids = list(set(writeable_uuids) - set([selected_uuid]))

        archives_list = self.delegate.vdom_objects["sidebar.archives.list"]
        archives_list.data = json.dumps(output)
        archives_list.selectablerows = json.dumps(output.keys()[1:] or ['noselectablerows'])
        archives_list.droppablerows = json.dumps(droppable_uuids or ['nodroppablerows'])
        archives_list.selectedrows = json.dumps([selected_uuid]) if selected_uuid else u''

        # hide error message
        self.delegate.hide_object(self.delegate.vdom_objects["sidebar.archives.attention"])

    def render_mailbox_options_list(self):
        """
        Fill mailbox options pop-up list
        """
        selected_mailbox = self.delegate.storage.selected_mailbox
        if not (selected_mailbox and selected_mailbox.is_owner()):
            self.delegate.hide_object(self.delegate.vdom_objects["sidebar.mailboxes.current.options.button"])
            return

        options = OrderedDict()
        options['edit'] = self.delegate.localization["promail.home.sidebar.mailboxes.options.edit"]
        options['rights'] = self.delegate.localization["promail.home.sidebar.mailboxes.options.rules"]
        options['delete'] = self.delegate.localization["promail.home.sidebar.mailboxes.options.delete"]

        vdom_list = self.delegate.vdom_objects["sidebar.mailboxes.current.options.list"]
        vdom_list.data = json.dumps(options)

        self.delegate.show_object(self.delegate.vdom_objects["sidebar.mailboxes.current.options.button"])

    def mailboxes_list_item_selected(self):
        """
        Mailbox was selected from list or object view
        """
        uuid = self.delegate.get_argument("itemid", "") or \
                       self.delegate.get_argument("id", "")

        if not uuid:
            return

        if uuid == LIST_NEW_ITEM_KEY:
            self.delegate.mailbox_info_dialog.show()
            return

        mailboxes = ProMail.ACLMailbox.get_available(uuid=uuid)
        if not mailboxes:
            raise MailboxDoesNotExist

        self.delegate.storage.mailboxes["on_change"](mailbox=mailboxes[0])

    def mailbox_options_selected(self):
        """
        Mailbox option selected from list
        """
        option = self.delegate.get_argument("itemid", "")
        if not option:
            return

        dialog = {
            "delete": self.delegate.mailbox_delete_dialog,
            "edit": self.delegate.mailbox_info_dialog,
            "rights": (
                self.delegate.mailbox_info_dialog,
                partial(self.delegate.mailbox_info_dialog.show_rights_dialog, from_sidebar=True)
            ),
        }.get(option, None)

        if not dialog:
            return

        if isinstance(dialog, (tuple, list)):
            dialog, func = dialog

        else:
            func = dialog.show

        dialog.mailbox = self.delegate.storage.selected_mailbox
        func()

    def archives_list_item_selected(self):
        """
        Archive was selected from list
        """
        uuid = self.delegate.get_argument("itemid", "")
        if not uuid:
            return

        if uuid == LIST_NEW_ITEM_KEY:
            self.delegate.archive_info_dialog.show()
            return

        archive = self.delegate.storage.selected_mailbox.get_archive(uuid=uuid)
        if not archive:
            raise ArchiveDoestNotExist

        self.delegate.storage.archives["on_change"](archive=archive)

    def archive_options_selected(self):
        """
        Archive option selected from list
        """
        uuid = self.delegate.get_argument("itemid", "")
        if not uuid or uuid == LIST_NEW_ITEM_KEY:
            return

        try:
            child_item = json.loads(self.delegate.get_argument("child", ""))
        except:
            return

        archive = self.delegate.storage.selected_mailbox.get_archive(uuid=uuid)
        if not archive:
            raise ArchiveDoestNotExist

        dialogs_map = {
            "edit": self.delegate.archive_info_dialog,
            "delete": self.delegate.archive_delete_dialog,
        }
        child_item = child_item.get('class', '')

        for key, inst in dialogs_map.items():
            if key in child_item:
                inst.archive = archive
                inst.show()
                break


########################################
#
# Topbar Implementation
#
########################################
class Topbar(Widget):

    def _connect_signals_and_slots(self):
        """
        Connect signals and slots
        """
        # new label was created
        self.delegate.storage.labels["on_create"].connect(self.on_label_crud_ops)

        # label was changed
        self.delegate.storage.labels["on_update"].connect(self.on_label_crud_ops)

        # label was deleted
        self.delegate.storage.labels["on_delete"].connect(self.on_label_crud_ops)

        # label not exists
        self.delegate.storage.labels["on_not_exists"].connect(self.on_label_crud_ops)

    def on_label_crud_ops(self, *args, **kwargs):
        """
        Re-render labels list if label on operation fron CRUD
        """
        del self.delegate.storage.available_labels

        self.render_labels()
        self.delegate.page.action("custom", ["ProMail.Topbar.Labels.resetAll()"])

    def load(self):
        """
        Load data
        """
        self.render_labels()

    def render_labels(self):
        """
        Render labels list
        """
        result = OrderedDict()
        for label in self.delegate.storage.available_labels:
            result[label.uuid] = LABELS_ITEM_TMPLT.format(name=escape_w_quote(label.name))

        result["new"] = LABELS_NEW_ITEM_TMPLT
        self.delegate.vdom_objects["topbar.labels.popup.list"].data = json.dumps(result)

        if len(result) == 1:
            self.delegate.show_object(self.delegate.vdom_objects["topbar.labels.popup.message"])

        else:
            self.delegate.hide_object(self.delegate.vdom_objects["topbar.labels.popup.message"])

    def labels_list_item_selected(self):
        """
        Label was selected from list
        """
        item = self.delegate.get_argument("itemid", "")
        query = self.delegate.shared_vars.get(LABEL_SEARCH_QUERY, '').strip()

        if item == "new" and query:
            self.delegate.label_info_dialog.label = None
            self.delegate.label_info_dialog.show(query)
            return


class HomePageRequestStorage(RequestStorage):

    def __init__(self, *args, **kwargs):
        super(HomePageRequestStorage, self).__init__(*args, **kwargs)

        self.archives = {
            # value changed - i.e. user selected other object
            "on_change": Signal(),

            # object was deleted (you need use del object, not object = None)
            "on_delete": Signal(),

            # object was created
            "on_create": Signal(),

            # object was created
            "on_update": Signal(),

            # objects was not found
            "on_not_exists": Signal(),
        }

        self.labels = {
            # value changed - i.e. user selected other object
            "on_change": Signal(),

            # object was deleted (you need use del object, not object = None)
            "on_delete": Signal(),

            # object was created
            "on_create": Signal(),

            # object was created
            "on_update": Signal(),

            # objects was not found
            "on_not_exists": Signal(),
        }

        self.mailboxes = {
            # value changed - i.e. user selected other object
            "on_change": Signal(),

            # object was deleted (you need use del object, not object = None)
            "on_delete": Signal(),

            # object was created
            "on_create": Signal(),

            # object was created
            "on_update": Signal(),

            # objects was not found
            "on_not_exists": Signal(),
        }

    @CachedProperty
    def request_session(self):
        data = self.delegate.request_session.get("storage", None)
        if data is None:
            self.delegate.request_session["storage"] = data = {}

        return data

    ##################################
    #
    # SELECTED MAILBOX
    #
    ##################################
    def get_cookie_key(self, key):
        return self.delegate.current_user.user.guid + key

    @RequestStorage.get_handler(SELECTED_MAILBOX_KEY)
    def get_active_mailbox(self):

        # from cookie flag
        from_cookie = False
        uuid = None

        # if it is page on load
        # trying get UUID from cookies
        if not self.delegate.is_action():
            uuid = self.delegate.get_cookie(self.get_cookie_key(SELECTED_MAILBOX_KEY), None)
            from_cookie = True

        uuid = uuid or self.request_session.get(SELECTED_MAILBOX_KEY, "")
        if not uuid:
            return None

        mailboxes = ProMail.ACLMailbox.get_available(uuid=uuid)
        if not mailboxes:

            # if UUID was read from cookies
            # just remove it
            if from_cookie:
                self.delegate.set_cookie(self.get_cookie_key(SELECTED_MAILBOX_KEY), '', age=1)
                return None

            raise SelectedMailboxDoesNotExist

        mailbox = mailboxes[0]
        self.request_session[SELECTED_MAILBOX_KEY] = mailbox.uuid
        self.delegate.set_cookie(self.get_cookie_key(SELECTED_MAILBOX_KEY), mailbox.uuid)
        return mailbox

    @RequestStorage.set_handler(SELECTED_MAILBOX_KEY)
    def set_active_mailbox(self, value):
        self.request_session[SELECTED_MAILBOX_KEY] = value.uuid
        self.delegate.set_cookie(self.get_cookie_key(SELECTED_MAILBOX_KEY), value.uuid)
        # self.active_mailbox['on_change'](mailbox=value)

    @RequestStorage.del_handler(SELECTED_MAILBOX_KEY)
    def del_active_mailbox(self, value):
        self.request_session[SELECTED_MAILBOX_KEY] = ''
        self.delegate.del_cookie(self.get_cookie_key(SELECTED_MAILBOX_KEY))
        # self.active_mailbox['on_delete'](mailbox=value)

    @property
    def selected_mailbox(self):
        return self[SELECTED_MAILBOX_KEY]

    @selected_mailbox.setter
    def selected_mailbox(self, value):
        self[SELECTED_MAILBOX_KEY] = value

    @selected_mailbox.deleter
    def selected_mailbox(self):
        del self[SELECTED_MAILBOX_KEY]

    ##################################
    #
    # SELECTED ARCHIVE
    #
    ##################################

    @RequestStorage.get_handler(SELECTED_ARCHIVE_KEY)
    def get_selected_archive(self):
        if not self.selected_mailbox:
            return None

        uuid = self.request_session.get(SELECTED_ARCHIVE_KEY, "")
        if not uuid:
            return None

        archive = self.selected_mailbox.get_archive(uuid=uuid)
        if not archive:
            raise ArchiveDoestNotExist

        self.request_session[SELECTED_ARCHIVE_KEY] = archive.uuid
        return archive

    @RequestStorage.set_handler(SELECTED_ARCHIVE_KEY)
    def set_selected_archive(self, value):
        self.request_session[SELECTED_ARCHIVE_KEY] = value.uuid
        # self.active_archive['on_change'](archive=value)

    @RequestStorage.del_handler(SELECTED_ARCHIVE_KEY)
    def del_selected_archive(self, value):
        self.request_session[SELECTED_ARCHIVE_KEY] = ''
        # self.active_archive['on_delete'](archive=value)

    @property
    def selected_archive(self):
        return self[SELECTED_ARCHIVE_KEY]

    @selected_archive.setter
    def selected_archive(self, value):
        self[SELECTED_ARCHIVE_KEY] = value

    @selected_archive.deleter
    def selected_archive(self):
        del self[SELECTED_ARCHIVE_KEY]

    ##################################
    #
    # AVAILABLE MAILBOXES
    #
    ##################################

    @RequestStorage.get_handler(AVAILABLE_MAILBOXES_KEY)
    def get_available_mailboxes(self):
        return ProMail.ACLMailbox.get_available()

    @RequestStorage.del_handler(AVAILABLE_MAILBOXES_KEY)
    def del_available_mailboxes(self, value):
        pass

    @property
    def available_mailboxes(self):
        return self[AVAILABLE_MAILBOXES_KEY]

    @available_mailboxes.deleter
    def available_mailboxes(self):
        del self[AVAILABLE_MAILBOXES_KEY]

    ##################################
    #
    # AVAILABLE LABELS
    #
    ##################################

    @RequestStorage.get_handler(AVAILABLE_LABELS_KEY)
    def get_available_labels(self):
        return ProMail.ACLLabel.get_available()

    @RequestStorage.del_handler(AVAILABLE_LABELS_KEY)
    def del_available_labels(self, value):
        pass

    @property
    def available_labels(self):
        return self[AVAILABLE_LABELS_KEY]

    @available_labels.deleter
    def available_labels(self):
        del self[AVAILABLE_LABELS_KEY]


class ProMailHomePage(ProSuiteBasicPage):

    def get_page_title(self):
        return self.localization["promail.home.title"]

    def get_localization_data(self):
        self.vdom_objects["dialog.mailboxinfo.addinfo.label"].value =\
            self.vdom_objects["dialog.mailboxinfo.addinfo.label"].value.format(
                self.localization["promail.home.dialogs.mailboxinfo.addinfo.label"]
            )

        self.shared_vars["localization"] = {
            "topbar.labels.new": self.localization["promail.home.topbar.labels.popup.list.new"],
        }

        return {

            self.vdom_objects["dialog.archiveinfo.archname.label"]: "promail.home.dialogs.archiveinfo.archname.label",
            self.vdom_objects["dialog.archiveinfo.orlabel"]: "promail.home.dialogs.archiveinfo.or_label",
            self.vdom_objects["dialog.archiveinfo.rights"]: "promail.home.dialogs.archiveinfo.rights.button",

            self.vdom_objects["dialog.archivedelete"]: "promail.home.dialogs.archivedelete.title",
            self.vdom_objects["dialog.archivedelete.checkbox.delarchive"]: "promail.home.dialogs.archivedelete.checkbox.delete_archive",
            self.vdom_objects["dialog.archivedelete.checkbox.delmails"]: "promail.home.dialogs.archivedelete.checkbox.delete_mails",

            self.vdom_objects["dialog.mailboxinfo.boxname.label"]: "promail.home.dialogs.mailboxinfo.boxname.label",
            self.vdom_objects["dialog.mailboxinfo.color.label"]: "promail.home.dialogs.mailboxinfo.color.label",
            self.vdom_objects["dialog.mailboxinfo.login.label"]: "promail.home.dialogs.mailboxinfo.login.label",
            self.vdom_objects["dialog.mailboxinfo.passwd.label"]: "promail.home.dialogs.mailboxinfo.passwd.label",
            self.vdom_objects["dialog.mailboxinfo.server.label"]: "promail.home.dialogs.mailboxinfo.server.label",
            self.vdom_objects["dialog.mailboxinfo.checkconn"]: "promail.home.dialogs.mailboxinfo.checkconn.label",
            self.vdom_objects["dialog.mailboxinfo.boxtype.label"]: "promail.home.dialogs.mailboxinfo.boxtype.label",
            self.vdom_objects["dialog.mailboxinfo.boxtype"]: "promail.home.dialogs.mailboxinfo.boxtype.fake",
            self.vdom_objects["dialog.mailboxinfo.rights"]: "promail.home.dialogs.mailboxinfo.rights",

            self.vdom_objects["dialog.aclrights.query"]: {
                "placeholder": "promail.home.dialogs.rightsmgmt.query.placeholder",
            },

            self.vdom_objects["dialog.aclrights.inherited"]: "promail.home.dialogs.rightsmgmt.inherited.label",
            self.vdom_objects["dialog.aclrights.clear"]: "promail.home.dialogs.rightsmgmt.clear",
            self.vdom_objects["dialog.aclrights.submit"]: "promail.home.dialogs.rightsmgmt.apply",
            self.vdom_objects["dialog.aclrights.rights.label"]: "promail.home.dialogs.rightsmgmt.rights.label",
            self.vdom_objects["dialog.aclrights.subjects.label"]: "promail.home.dialogs.rightsmgmt.subjects.label",
            self.vdom_objects["dialog.aclrights.rights.message"]: "promail.home.dialogs.rightsmgmt.rights.message",

            self.vdom_objects["dialog.aclrights.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.aclrights.continue"]: "global.form.buttons.continue",
            self.vdom_objects["dialog.archivedelete.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.archivedelete.submit"]: "global.form.buttons.delete",
            self.vdom_objects["dialog.archiveinfo.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.archiveinfo.submit"]: "global.form.buttons.submit",
            self.vdom_objects["dialog.archiveinfo.continue"]: "global.form.buttons.addanother",
            self.vdom_objects["dialog.checktask.close"]: "global.form.buttons.close",
            self.vdom_objects["dialog.labeldelete.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.labeldelete.submit"]: "global.form.buttons.delete",
            self.vdom_objects["dialog.labelinfo.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.labelinfo.submit"]: "global.form.buttons.submit",
            self.vdom_objects["dialog.labelinfo.continue"]: "global.form.buttons.addanother",
            self.vdom_objects["dialog.labelsmgmt.close"]: "global.form.buttons.close",
            self.vdom_objects["dialog.labelsmgmt.create"]: "global.form.buttons.create",
            self.vdom_objects["dialog.mailboxinfo.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.mailboxinfo.submit"]: "global.form.buttons.submit",
            self.vdom_objects["dialog.mailboxdelete.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.mailboxdelete.submit"]: "global.form.buttons.delete",


            self.vdom_objects["dialog.labelinfo.rights"]: "promail.home.dialogs.labelinfo.rights",
            self.vdom_objects["dialog.labelinfo.color.label"]: "promail.home.dialogs.labelinfo.color.label",
            self.vdom_objects["dialog.labelinfo.shortcut.label"]: "promail.home.dialogs.labelinfo.shortcut.label",
            self.vdom_objects["dialog.labelinfo.shared.label"]: "promail.home.dialogs.labelinfo.shared.label",

            self.vdom_objects["dialog.labelsmgmt"]: "promail.home.dialogs.labelsmgmt",
            self.vdom_objects["dialog.labelsmgmt.labels.message"]: "promail.home.dialogs.labelsmgmt.message",

            self.vdom_objects["sidebar.mailboxes.unread.title"]: "promail.home.sidebar.mailboxes.unread.title",
            self.vdom_objects["sidebar.archives.attention"]: "promail.home.sidebar.archives.no_available",

            self.vdom_objects["topbar.labels.popup.query.label"]: "promail.home.topbar.labels.popup.query.label",
            self.vdom_objects["topbar.labels.popup.buttons.create"]: "promail.home.topbar.labels.popup.buttons.create",
            self.vdom_objects["topbar.labels.popup.buttons.manage"]: "promail.home.topbar.labels.popup.buttons.manage",
            self.vdom_objects["topbar.labels.popup.message"]: "promail.home.topbar.labels.popup.message",
        }

    def _connect_widgets_signals_and_slots(self):
        """
        Connect signals and slots in widgets
        """

        self.archive_info_dialog._connect_signals_and_slots()
        self.archive_delete_dialog._connect_signals_and_slots()

        self.label_delete_dialog._connect_signals_and_slots()
        self.label_info_dialog._connect_signals_and_slots()
        self.labels_mgmt_dialog._connect_signals_and_slots()

        self.mailbox_info_dialog._connect_signals_and_slots()
        self.mailbox_delete_dialog._connect_signals_and_slots()

        self.sidebar._connect_signals_and_slots()
        self.topbar._connect_signals_and_slots()

    def execute_e2vdom_action_callback(self, func_map):
        sender = self.get_argument("sender", "")
        event  = self.get_argument("sender_event", "")

        func = func_map.get(sender, None)
        if isinstance(func, dict):
            func = func.get(event, None)

        if func:
            func()

    ################################
    #
    # Cached properties
    #
    ################################

    @CachedProperty
    def acl_rights_dialog(self):
        return ACLRightsDialog(self)

    @CachedProperty
    def archive_info_dialog(self):
        return ArchiveInfoDialog(self)

    @CachedProperty
    def archive_delete_dialog(self):
        return ArchiveDeleteDialog(self)

    @CachedProperty
    def async_task_dialog(self):
        return AsyncTaskDialog(self)

    @CachedProperty
    def label_info_dialog(self):
        return LabelInfoDialog(self)

    @CachedProperty
    def label_delete_dialog(self):
        return LabelDeleteDialog(self)

    @CachedProperty
    def labels_mgmt_dialog(self):
        return LabelsManagementDialog(self)

    @CachedProperty
    def mailbox_info_dialog(self):
        return MailboxInfoDialog(self)

    @CachedProperty
    def mailbox_delete_dialog(self):
        return MailboxDeleteDialog(self)

    @CachedProperty
    def sidebar(self):
        return Sidebar(self)

    @CachedProperty
    def storage(self):
        return HomePageRequestStorage(self)

    @CachedProperty
    def topbar(self):
        return Topbar(self)


    ################################
    #
    # Callbacks
    #
    ################################

    @callback('request_start', 2)
    @authenticated
    def on_request_start(self, *args, **kwargs):
        self._connect_widgets_signals_and_slots()

    @callback('request_failed', 2)
    def errors_catch(self, exc):

        if isinstance(exc, ProMail.PermissionDenied):
            self.show_error_growl(
                self.localization["promail.home.errors.permission_denied"],
                self.localization["global.error.title"],
            )

        elif isinstance(exc, MailboxDoesNotExist):
            self.show_error_growl(
                self.localization["promail.home.errors.mailbox.doesntexists"],
                self.localization["global.error.title"],
            )
            self.storage.mailboxes["on_not_exists"]()

        elif isinstance(exc, ArchiveDoestNotExist):
            self.show_error_growl(
                self.localization["promail.home.errors.archive.doesntexists"],
                self.localization["global.error.title"],
            )
            self.storage.archives["on_not_exists"]()

        elif isinstance(exc, LabelDoestNotExist):
            self.show_error_growl(
                self.localization["promail.home.errors.label.doesntexists"],
                self.localization["global.error.title"],
            )
            self.storage.labels["on_not_exists"]()

    @callback('onload', 4)
    def init_sv_vars(self, *args, **kwargs):
        self.request_session["dialogs"] = {
            "opened": []
        }

    @callback('onload', 3)
    @callback('topbar.data-update', 1)
    def topbar_update(self, *args, **kwargs):
        self.topbar.load()

    @callback('onload', 2)
    @callback('sidebar.data-update', 1)
    def sidebar_update(self, *args, **kwargs):
        self.sidebar.load()


    @callback('area.async_task_dialog.actions')
    def area_async_task_dialog_actions(self, *args, **kwargs):
        self.execute_e2vdom_action_callback({
            self.vdom_objects["dialog.checktask.timer"].id: self.async_task_dialog.refresh_task_status,
            self.vdom_objects["dialog.checktask.close"].id: self.async_task_dialog.hide,
        })


    @callback('area.archives.actions')
    def area_archives_actions(self, *args, **kwargs):
        self.execute_e2vdom_action_callback({
            self.vdom_objects["dialog.archiveinfo.cancel"].id: self.archive_info_dialog.hide,
            self.vdom_objects["dialog.archiveinfo.form"].id: self.archive_info_dialog.submit,

            self.vdom_objects["dialog.archivedelete.cancel"].id: self.archive_delete_dialog.hide,
            self.vdom_objects["dialog.archivedelete.form"].id: self.archive_delete_dialog.submit,
        })


    @callback('area.labels.actions')
    def area_labels_actions(self, *args, **kwargs):
        self.execute_e2vdom_action_callback({
            self.vdom_objects["dialog.labeldelete.cancel"].id: self.label_delete_dialog.hide,
            self.vdom_objects["dialog.labeldelete.submit"].id: self.label_delete_dialog.submit,

            self.vdom_objects["dialog.labelinfo.cancel"].id: self.label_info_dialog.hide,
            self.vdom_objects["dialog.labelinfo.form"].id: self.label_info_dialog.submit,

            self.vdom_objects["dialog.labelsmgmt.close"].id: self.labels_mgmt_dialog.hide,
            self.vdom_objects["dialog.labelsmgmt.create"].id: self.label_info_dialog.show,
            self.vdom_objects["dialog.labelsmgmt.labels.list"].id: self.labels_mgmt_dialog.child_clicked,

            self.vdom_objects["topbar.labels.popup.buttons.create"].id: self.label_info_dialog.show,
            self.vdom_objects["topbar.labels.popup.buttons.manage"].id: self.labels_mgmt_dialog.show,
            self.vdom_objects["topbar.labels.popup.list"].id: self.topbar.labels_list_item_selected,
        })


    @callback('area.mailboxes.actions')
    def area_mailboxes_actions(self, *args, **kwargs):
        self.execute_e2vdom_action_callback({
            self.vdom_objects["dialog.mailboxinfo.form"].id: self.mailbox_info_dialog.submit,
            self.vdom_objects["dialog.mailboxinfo.cancel"].id: self.mailbox_info_dialog.hide,

            self.vdom_objects["dialog.mailboxdelete.cancel"].id: self.mailbox_delete_dialog.hide,
            self.vdom_objects["dialog.mailboxdelete.submit"].id: self.mailbox_delete_dialog.submit
        })


    @callback('area.rights.actions')
    def area_rights_actions(self, *args, **kwargs):
        self.execute_e2vdom_action_callback({
            self.vdom_objects["dialog.aclrights.cancel"].id: self.acl_rights_dialog.hide,
            self.vdom_objects["dialog.aclrights.continue"].id: self.acl_rights_dialog.submit,
            self.vdom_objects["dialog.aclrights.inherited"].id: self.acl_rights_dialog.toggle_access,
            self.vdom_objects["dialog.aclrights.rights.list"].id: self.acl_rights_dialog.access_icon_clicked,
            self.vdom_objects["dialog.aclrights.adduser.form"].id: self.acl_rights_dialog.add_subject_rights
        })


    @callback('area.sidebar.actions')
    def area_sidebar_actions(self, *args, **kwargs):
        self.execute_e2vdom_action_callback({
            self.vdom_objects["sidebar.archives.list"].id: {
                "itemclick": self.sidebar.archives_list_item_selected,
                "childitemclick": self.sidebar.archive_options_selected,
            },
            self.vdom_objects["sidebar.mailboxes.select.list"].id: self.sidebar.mailboxes_list_item_selected,
            self.vdom_objects["sidebar.mailboxes.unread.list"].id: self.sidebar.mailboxes_list_item_selected,
            self.vdom_objects["sidebar.mailboxes.current.options.list"].id: self.sidebar.mailbox_options_selected,
        })

    # @callback('onload', 2)
    # def onload(self, *args, **kwargs):
    #     """
    #     On page loading
    #     """
    #     self.sidebar.render()

        # macros_widget = ProSuiteMacrosWidget()
        # macros_widget.render(
        #     self.vdom_objects["widget.macros.objectview"],
        #     img_holder = self.vdom_objects["widget.macros.img_holder"],
        #     header_button = self.vdom_objects["widget.macros.header.button"],
        #     page_name = self.page.name
        # )

        # composer_widget = ProSuiteMailComposerListWidget()
        # composer_widget.render(self.vdom_objects["widget.composer.list"])

        # macro_id = self.get_argument( 'macros', '' )
        # if macro_id:
        #     macro = Macros.get_by_guid( macro_id )
        #     if not macro:
        #         self.show_error_growl(
        #             "No such macro. Please, reload page",
        #             "Error"
        #         )
        #         return

        #     else:
        #         self.invoke_dispather(macro)

        # widget = ProSuiteMailComposerListWidget()
        # widget.set_default_composer(
        #     self.vdom_objects["topbar.mailcomposer.image"],
        #     self.vdom_objects["topbar.mailcomposer.title"]
        # )

    # def _connect_widgets_signals_and_slots(self):
    #     """
    #     """
    #     self.sidebar._connect_signals_and_slots()
    #     self.maillist._connect_signals_and_slots()

    # def execution_failed(self, exc):
    #     """
    #     """
    #     err_title = "Error"
    #     err_msg = ""

    #     if isinstance(exc, NoMailboxError):
    #         err_msg = "No such mailbox"

    #     elif isinstance(exc, NoArchiveError):
    #         err_msg = "No such archive"

    #     elif isinstance(exc, NoMailError):
    #         err_msg = "No such mail(s)"

    #     elif isinstance(exc, NoPermissionsError):
    #         err_msg = "You have no such permissions"

    #     else:
    #         raise Exception("Uncaught exception")
    #         raise exc

    #     self.show_error_growl(err_msg, err_title)

    # def invoke_dispather(self, macros):

    #     invoke_disp = InvokeDispatcher()
    #     invoke_disp.page        = self
    #     invoke_disp.growl       = self.growl
    #     invoke_disp.xmldialog   = self.vdom_objects["xmldialog"]
    #     invoke_disp.vdomdynobj  = self.vdom_objects["vdomdynobj"]
    #     invoke_disp.macros      = macros

    #     invoke_disp.run()


    # ################################
    # #
    # # Cached properties
    # #
    # ################################

    # @CachedProperty
    # def storage(self):
    #     return HomePageRequestStorage(self)

    # @CachedProperty
    # def sidebar(self):
    #     return Sidebar(self)

    # @CachedProperty
    # def mailbox_dialog(self):
    #     return MailboxDialog(self)

    # @CachedProperty
    # def delete_mailbox_dialog(self):
    #     return MailboxDeleteDialog(self)

    # @CachedProperty
    # def delete_archive_dialog(self):
    #     return ArchiveDeleteDialog(self)

    # @CachedProperty
    # def archive_dialog(self):
    #     return ArchiveDialog(self)

    # @CachedProperty
    # def mailbox_rights_dialog(self):
    #     return MailboxRightsDialog(self)

    # @CachedProperty
    # def maillist(self):
    #     return MailList(self)

    # @CachedProperty
    # def mailcontent(self):
    #     return MailContent(self)

    # ################################
    # #
    # # Callbacks declaration
    # #
    # ################################
    # @callback
    # @catch_object_access_error
    # def archive_options_clicked(self, page_controller):
    #     """
    #     Options from mailbox popup list was selected
    #     """
    #     self.sidebar.archive_options_clicked()

    # @callback
    # @catch_object_access_error
    # def archive_selected(self, page_controller):
    #     """
    #     Archive selected from archives list
    #     """
    #     self.sidebar.archive_selected()

    # @callback
    # @catch_object_access_error
    # def delete_dialog_submitted(self, page_controller):
    #     """
    #     Delete dialog was submitted
    #     """
    #     dialog_type = self.get_shared_var(DELETE_DIALOG_TYPE_SV_KEY, "")

    #     if dialog_type == MAILBOX_TYPE_SV_VAL:
    #         self.delete_mailbox_dialog.submit_delete_dialog()

    #     elif dialog_type == ARCHIVE_TYPE_SV_VAL:
    #         self.delete_archive_dialog.submit_delete_dialog()

    # @callback
    # @catch_object_access_error
    # def mailbox_selected(self, page_controller):
    #     """
    #     Mailbox selected from 'mailboxes list' or
    #     'unread mailboxes' object view
    #     """
    #     self.sidebar.mailbox_selected()

    # @callback
    # @catch_object_access_error
    # def simple_dialog_submit(self, page_controller):
    #     """
    #     Simple dialog was submitted
    #     """
    #     self.archive_dialog.submit_archiveinfo_dialog()

    # @callback
    # @catch_object_access_error
    # def submit_mailbox_form(self, page_controller):
    #     """
    #     New mailbox or edit form was submitted
    #     """
    #     self.mailbox_dialog.submit_mailboxinfo_dialog()

    # @callback
    # @catch_object_access_error
    # def submit_new_mailbox_access_form(self, page_controller):
    #     """
    #     Add new user with right to mailbox access
    #     """
    #     self.mailbox_rights_dialog.add_user_with_rights()

    # @callback
    # @catch_object_access_error
    # def submit_mailbox_access_click(self, page_controller):
    #     """
    #     Access icon was clicked
    #     """
    #     self.mailbox_rights_dialog.access_clicked()

    # @callback
    # @catch_object_access_error
    # def update_sidebar(self, page_controller):
    #     """
    #     Update sidebar by timer
    #     """
    #     try:
    #         update = json.loads(self.get_argument("items", ""))
    #     except:
    #         update = None

    #     if not update:
    #         return

    #     self.sidebar.update(
    #         mailbox=SIDEBAR_MAILBOX_TIMER_KEY in update,
    #         archives=SIDEBAR_ARCHIVES_TIMER_KEY in update,
    #         mailboxes=SIDEBAR_MAILBOXES_TIMER_KEY in update,
    #         unread=SIDEBAR_UNREAD_TIMER_KEY in update
    #     )

    #     if SIDEBAR_MAILLIST_TIMER_KEY in update:
    #         self.maillist.refresh()

    # @callback
    # @catch_object_access_error
    # def mail_dropped_on_archive(self, page_controller):
    #     """
    #     Mail was dragged and dropped on archive
    #     """
    #     self.sidebar.mail_dropped_on_archive()

    # @callback
    # @catch_object_access_error
    # def maillist_scroll_ends(self, page_controller):
    #     """
    #     Render new mail list items
    #     """
    #     self.maillist.scroll_ends()

    # @callback
    # @catch_object_access_error
    # def maillist_clicked(self, page_controller):
    #     """
    #     User clicked on mail item in mail list
    #     """
    #     self.maillist.mail_clicked()

    # @callback
    # @catch_object_access_error
    # def get_eac_content(self, page_controller):
    #     """
    #     """
    #     self.mailcontent.get_eac_content()

    # @callback
    # @catch_object_access_error
    # def post_eac_content(self, page_controller):
    #     """
    #     """
    #     self.mailcontent.post_eac_content()

    # @callback
    # @catch_object_access_error
    # def topbar_delete_selected_mails(self, page_controller):
    #     """
    #     """
    #     self.sidebar.delete_selected_mails()

    # @callback
    # def execute_macro(self, page_controller):

    #     #click on macros\plugiuns panel
    #     object_guid = request.arguments.get("id")
    #     if object_guid:

    #         if object_guid.find("_", 0) == 1:
    #             #parse guid
    #             prefix, object_guid = object_guid.split("_", 1)
    #             #check prefix value

    #             if prefix == "p": #it is plugin guid

    #                 widget_macro_table = ProSuiteMacrosDatatableWidget( object_guid, self.page.name )
    #                 widget_macro_table.render(
    #                     self.vdom_objects["macros.widget.datatable"],
    #                     self.vdom_objects["macros.widget.dialog"]
    #                 )

    #                 self.vdom_objects["macros.widget.dialog"].show = "1"
    #                 return

    #             elif prefix <> "m":
    #                 return

    #     #click from dialog_plugin_macros.datatable
    #     elif request.arguments.get("keyField"):
    #         object_guid = request.arguments.get("keyField")

    #     #macros invoked from macros
    #     elif request.arguments.get("macros_id"):
    #         object_guid = request.arguments.get("macros_id")

    #     elif self.get_shared_var(MAIL_COMPOSER_SV_KEY, ''):
    #         object_guid = self.get_shared_var(MAIL_COMPOSER_SV_KEY, '')
    #         if object_guid == "default":
    #             return

    #     else:
    #         return

    #     macros = Macros.get_by_guid( object_guid )
    #     if not macros:
    #         self.show_error_growl(
    #             "No such macro",
    #             "Error"
    #         )
    #         return

    #     self.invoke_dispather(macros)

    # @callback
    # def mailcomposer_selected(self, page_controller):

    #     itemid = self.get_argument("itemid", "")
    #     macros = Macros.get_by_guid(itemid)
    #     if not (macros or itemid == "default"):
    #         self.show_error_growl(
    #             "No such macro",
    #             "Error"
    #         )
    #         return

    #     widget = ProSuiteMailComposerListWidget()
    #     if itemid == "default":
    #         widget.set_default_composer(
    #             self.vdom_objects["topbar.mailcomposer.image"],
    #             self.vdom_objects["topbar.mailcomposer.title"]
    #         )

    #     else:
    #         widget.set_composer(
    #             macros,
    #             self.vdom_objects["topbar.mailcomposer.image"],
    #             self.vdom_objects["topbar.mailcomposer.title"]
    #         )

    #     self.set_shared_var(MAIL_COMPOSER_SV_KEY, itemid)




]]>
		</Library>
		<Library Name="widget_user_group_dialog">
<![CDATA[country_list_str = u'{"0": "Argentina", "1": "Australia", "2": "Bangladesh", "3": "Belgie", "4": "Belgique", "5": "Brasil", "6": "\u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f", "7": "Burma", "8": "Cambodia", "9": "Canada", "10": "Ceska Republika", "11": "Chile", "12": "Colombia", "13": "Costa Rica", "14": "Deutschland", "15": "Espana", "16": "France", "17": "Hong Kong", "18": "India", "19": "Indonesia", "20": "Ireland", "21": "Jamaica", "22": "Laos", "23": "Macau", "24": "Mexico", "25": "Malaysia", "26": "Mongolia", "27": "Nederland", "28": "Nepal", "29": "Panama", "30": "Peru", "31": "Philippines", "32": "Polska", "33": "Puerto Rico", "34": "Republica Dominicana", "35": "Romania", "36": "\u0420\u043e\u0441\u0441\u0438\u044f", "37": "Singapore", "38": "South Africa", "39": "Sri Lanka", "40": "Turkiye", "41": "Taiwan", "42": "Trinidad and Tobago", "43": "\u0423\u043a\u0440\u0430\u0457\u043d\u0430", "44": "United Kingdom", "45": "United States of America", "46": "Uruguay", "47": "Venezuela", "48": "Vietnam", "-1":""}'

country_list = [ u"Argentina",u"Bangladesh",u"Australia",u"Belgie",u"Belgique",\
u"Brasil",u"България",u"Burma",u"Cambodia",u"Canada",u"Ceska Republika",u"Chile",\
u"Colombia",u"Costa Rica",u"Deutschland",u"Espana",u"France",u"Hong Kong",u"India",\
u"Indonesia",u"Ireland",u"Jamaica",u"Laos",u"Macau",u"Mexico",u"Malaysia",u"Mongolia",\
u"Nederland",u"Nepal",u"Panama",u"Peru",u"Philippines",u"Polska",u"Puerto Rico",\
u"Republica Dominicana",u"Romania",u"Россия",u"Singapore",u"South Africa",u"Sri Lanka",\
u"Turkiye",u"Taiwan",u"Trinidad and Tobago",u"Україна",u"United Kingdom",\
u"United States of America",u"Uruguay",u"Venezuela",u"Vietnam"]



#from collections import OrderedDict
#from json import dumps
#d = OrderedDict()
#i=0
#for k in country_list:
#	d[i] = k
#	i+=1
#raise Exception( dumps(d) )


login_page_url 			= "/login"
home_page_url  			= "/"
proadmin_attention_url 	= "/proadmin_attention"
license_url 			= "/license"



vdom_container = None
def redirect( url ):
	if vdom_container:
		vdom_container.action( "goTo", [ url ] )
	else:
		response.redirect( url )



import ProAdmin
def authenticated( method ):
	def wrapper( *args, **kwargs ):
		if ProAdmin.current_user() is None:
			redirect( login_page_url )
		else:
			return method()
	return wrapper


def administrator( method ):
	def wrapper( *args, **kwargs ):
		current_user = ProAdmin.current_user()
		if bool( ProAdmin.application().rules( subject = current_user, access='a' ) ):
			return method()
		else:
			redirect( home_page_url )
	return wrapper


def local_scheme( method ):
	def wrapper( *args, **kwargs ):
		if ProAdmin.scheme().is_remote():
			redirect( proadmin_attention_url )
		else:
			return method()
	return wrapper

def license_confirmed( method ):
	def wrapper( *args, **kwargs ):
		return method()
	return wrapper


from engine.exceptions import RenderTermination
def error_handler( method ):
	def wrapper( *args, **kwargs ):
		try:
			return method()
		except RenderTermination:
			raise
		except Exception, ex:
			session[ "error" ] = unicode(ex)
			redirect( home_page_url )
	return wrapper

def active_directory_scheme( method ):
	def wrapper( *args, **kwargs ):
		 if ProAdmin.scheme().type == "active_directory":
		 	return method()
	return wrapper
]]>
		</Library>
		<Library Name="prosuite_user">
<![CDATA["""
"""

import ProAdmin


class ProSuiteUser(object):

    def __init__(self, proadmin_user):
        self._user = proadmin_user

    def __hash__(self):
        return hash(self.guid)

    def __eq__(self, other):
        return self.guid == other.guid

    @property
    def user(self):
        return self._user

    @property
    def guid(self):
        return self.user.guid

    @property
    def name(self):
        return self.user.name

    @property
    def notification_email(self):
        return self.user.notification_email

    def is_admin(self):
        return bool(ProAdmin.application().rules(subject=self.user, access="a"))

    @classmethod
    def current_user(cls):
        """
        Return logged in user
        """
        proadmin_user = ProAdmin.current_user()
        return cls(proadmin_user) if proadmin_user else None

    @classmethod
    def get_by_guid(cls, guid):
        """
        Find user by GUID
        """
        proadmin_user = ProAdmin.application().get_users(guid=guid)
        return cls(proadmin_user[0]) if proadmin_user else None
]]>
		</Library>
		<Library Name="prosuite_localization_bg">
<![CDATA[localization = {
}]]>
		</Library>
		<Library Name="prosuite_logging">
<![CDATA["""
"""

import cStringIO
import gzip
import logging
import os
import sys
import traceback
import weakref

from collections import deque
from logging.handlers import RotatingFileHandler

from prosuite_settings import settings


class DequeMemoryHandler(logging.Handler):
    """
    A handler class which buffers logging records in memory. Whenever each
    record is added to the buffer, a check is made to see if the buffer should
    be flushed. If it should, then flush() is expected to do what's needed.
    """

    def __init__(self, capacity):
        """
        Initialize the handler with the buffer size.
        """
        logging.Handler.__init__(self)
        self.capacity = capacity
        self.buffer = deque(maxlen=capacity)

    def emit(self, record):
        """
        Emit a record
        """
        self.buffer.append(record)

    def flush(self):
        """
        Override to implement custom flushing behaviour.

        This version just zaps the buffer to empty.
        """
        self.buffer.clear()

    def close(self):
        """
        Close the handler.

        This version just flushes and chains to the parent class' close().
        """
        try:
            self.flush()
        finally:
            logging.Handler.close(self)

    def handle(self, record):
        """
        Conditionally emit the specified logging record.

        Emission depends on filters which may have been added to the handler.
        Returns whether the filter passed the record foremission.
        """
        rv = self.filter(record)
        if rv:
            self.emit(record)
        return rv


class RotatingGzipFileHandler(RotatingFileHandler):

    def doRollover(self):
        """
        Do a rollover and gzip file
        """
        if self.stream:         # close existing stream
            self.stream.close()
            self.stream = None

        if self.backupCount > 0:       # iterate over existing file
            for i in range(self.backupCount - 1, 0, -1):
                sfn = "%s.%d.gz" % (self.baseFilename, i)
                dfn = "%s.%d.gz" % (self.baseFilename, i + 1)
                if os.path.exists(sfn):
                    #print "%s -> %s" % (sfn, dfn)
                    if os.path.exists(dfn):
                        os.remove(dfn)
                    os.rename(sfn, dfn)

            dfn = self.baseFilename + ".1.gz"
            if os.path.exists(dfn):
                os.remove(dfn)

            # Issue 18940: A file may not have been created if delay is True.
            if os.path.exists(self.baseFilename):
                sfh = open(self.baseFilename, "rb")
                dfh = gzip.open(dfn, "wb")
                dfh.writelines(sfh)
                dfh.close()
                sfh.close()
                os.remove(self.baseFilename)

        if not self.delay:
            self.stream = self._open()


class ExcPlusFormatter(logging.Formatter):
    """
    """
    def format(self, record):
        """
        Format the specified record as text.

        The record's attribute dictionary is used as the operand to a
        string formatting operation which yields the returned string.
        Before formatting the dictionary, a couple of preparatory steps
        are carried out. The message attribute of the record is computed
        using LogRecord.getMessage(). If the formatting string uses the
        time (as determined by a call to usesTime(), formatTime() is
        called to format the event time. If there is exception information,
        it is formatted using formatException() and appended to the message.
        """
        record.message = record.getMessage()
        if self.usesTime():
            record.asctime = self.formatTime(record, self.datefmt)
        s = self._fmt % record.__dict__
        if record.exc_info:
            # Cache the traceback text to avoid converting it multiple times
            # (it's constant anyway)
            if not hasattr(record, "exc_text_ext"):
                setattr(record, "exc_text_ext", self.formatException(record.exc_info))

        if getattr(record, "exc_text_ext", None) :
            if s[-1:] != "\n":
                s = s + "\n"
            try:
                s = s + record.exc_text_ext
            except UnicodeError:
                # Sometimes filenames have non-ASCII chars, which can lead
                # to errors when s is Unicode and record.exc_text_ext is str
                # See issue 8924.
                # We also use replace for when there are multiple
                # encodings, e.g. UTF-8 for the filesystem and latin-1
                # for a script. See issue 13232.
                s = s + record.exc_text_ext.decode(sys.getfilesystemencoding(),
                                               "replace")
        return s

    def formatException(self, ei):
        """
        Format and return the specified exception information as a string.

        This default implementation just uses
        traceback.print_exception()
        """
        tb = sys.exc_info()[2]
        while 1:
            if not tb.tb_next:
                break
            tb = tb.tb_next

        stack = []
        f = tb.tb_frame
        while f:
            stack.append(f)
            f = f.f_back

        stack = reversed(stack)

        sio = cStringIO.StringIO()
        traceback.print_exception(ei[0], ei[1], ei[2], None, sio)

        sio.write("%s\n%s" % ("*"*10, "Locals by frame, innermost last"))
        for frame in stack:
            sio.write("\n\nFrame \"%s\" in %s:%s at line %s:" % (
                frame.f_code.co_name,
                frame.f_code.co_filename,
                frame.f_code.co_firstlineno,
                frame.f_lineno
            ))

            for key, value in frame.f_locals.items():
                sio.write("\n\t%20s = " % key)
                #We have to be careful not to cause a new error in our error
                #printer! Calling str() on an unknown object could cause an
                #error we don't want.
            try:
                sio.write("%s :: %s" % (str(type(value)), str(value)))
            except:
                sio.write("<ERROR WHILE PRINTING VALUE>")

        sio.write("\n\n")
        traceback.print_exception(ei[0], ei[1], ei[2], None, sio)
        sio.write("%s\n" % ("*"*10))

        s = sio.getvalue()
        sio.close()

        return s


class ProSuiteRootLogger(logging.Logger):
    """
    """
    def getChild(self, suffix):
        return self.manager.getLogger(suffix)


# Create unique root logger
manager = logging.Manager(None)
manager.setLoggerClass(ProSuiteRootLogger)

root_logger = manager.getLogger("System")
root_logger.setLevel(settings.logging["level"])
root_logger.manager = manager

manager.root = weakref.proxy(root_logger)
manager.setLoggerClass(logging.Logger)

# create rotating logs handler
logs_path = application.storage.abs_path(settings.logging["file"])
logs_dir = os.path.dirname(logs_path)

try:
    os.stat(logs_dir)
except Exception as ex:
    application.storage.mkdir(logs_dir)


rotating_hdlr = RotatingGzipFileHandler(
    logs_path,
    maxBytes=settings.logging["max_size"],
    backupCount=settings.logging["parts"]
)

# create default formatting
default_fmt = ExcPlusFormatter("%(asctime)s :: %(name)-12s :: %(levelname)-8s :: %(thread)s :: %(message)s")
rotating_hdlr.setFormatter(default_fmt)
root_logger.addHandler(rotating_hdlr)


root_logger.info("Logging system setup for application %s [%s] done!",
    application.name,
    application.id
)

root_logger.info("Logging level is %s", logging.getLevelName(settings.logging["level"]))

# create application level logger
app_logger = root_logger.getChild(settings.info["name"])

# setup logs which will be stored in memory
logs_in_memory = DequeMemoryHandler(capacity=settings.logging["max_mem_records"])
app_logger.addHandler(logs_in_memory)

app_logger.info("Application logger created!")

]]>
		</Library>
		<Library Name="localization_bg">
<![CDATA[# -*- coding: utf-8 -*-


localization_dict = {

	#page titles
	"login_page_title"						: u'Регистрация - ProShare',
	"home_page_title"						: u'Shares - ProShare',
	"smart_folders_page_title"				: u'Smart Folders and Groups - ProShare',
	"smart_contents_page_title"				: u'Съдържание на Smart Folder - ProShare', #smart folder contents page title (private)
	"public_contents_page_title"			: u'Съдържание не Smart Folder - ProShare', #smart folder contents page title (public)
	"macros_page_title"						: u'Макрос - ProShare',
	"edit_macros_page_title"				: u'Редактиране на макрос - ProShare',
	"settings_page_title"					: u'Параметри - ProShare',
	"rules_management_page_title"			: u'Управление на правилата - ProShare',
	"users_groups_management_page_title"	: u'Управление на потребители и групи - ProShare',
	"remote_control_page_title"				: u'Дистанционно управление от ProAdmin - ProShare',
	"proadmin_attention_page_title"			: u'Внимание - ProShare',
	"clear_page_title"						: u'Clear - ProShare', #NEEDED



	#common dialogs and forms strings
	"login" 					: u'Регистрация:',
	"password" 					: u'Парола:',
	"last_name"					: u'Фамилия',
	"first_name"				: u'Име',
	"dialog_add_btn"			: u'Добави',
	"dialog_apply_btn"			: u'Приложи',
	"dialog_cancel_btn" 		: u'Анулирай',
	"dialog_close_btn"			: u'Затвори',
	"dialog_delete_btn"			: u'Изтрий',
	"dialog_download_btn"		: u'Download', #NEEDED
	"dialog_edit_btn"			: u'Редактирай',
	"dialog_ok_btn"				: u'Ok',
	"dialog_save_btn" 			: u'Запиши',
	"dialog_title_confirm"		: u'Потвърди',
	"server"					: u'Сървър:',
	"dialog_upload_btn"			: u'Качи ',
	"email_column_header"		: u'E-mail',
	"error"						: u'Грешка',
	"invalid_data_error_title"	: u'Невалидна дата',
	"check_fields_error"		: u'Проверете полетата',
	"check_name_field_error"	: u'Проверете поле "Име"',
	"btn_delete_selected"		: u"Изтрийте избраното",
	"growl_title_warning"		: u"Предупреждение",
	"growl_title_message"		: u"Съобщение",




	#Errors, messages and warnings
	"unknown_error"								: u"Unknown error occured. Please, try to reload the page or relogin the system. If it repeats, please, contact your administrator.", #NEEDED
	"empty_login_error"							: u"Полето за име не може да бъде празно",
	"empty_name_error"							: u"Полето за регистрация не може да бъде празно",
	"empty_password_error"						: u"Полето за парола не може да бъде празно",
	"invalid_login_or_password_error"			: u"Invalid login or password", #NEEDED
	"files_ignored_warning"						: u"Файловете бяха игнорирани.",
	"nodes_not_exists_warning"					: u"Някои папки и/или файлове бяха изтрити. Моля, заредете страницата отново.",
	"sf_not_exists_warning"						: u"Some Smart Folders or Smart Groups were deleted and no more exist. Please, reload the page.", #NEEDED
	"already_contained_warning"					: u"%s Вече се съдържа %s",
	"subfolders_ignored_warning"				: u"Subfolders were ignored.", #NEEDED
	"folders_added_message"						: u"{0} папката/ките бяха успешно добавени към {1}",
	"nothing_added_message"						: u"Нищо не беше добавено",
	"fields_updated_message"					: u"Fields successfully updated", #NEEDED
	"IllegalCharactersInNameError"				: u"Името не трябва да съдржа, който и да е, от следните символи: *?:\\|/\"&lt&gt",
	"SFAlreadyExistsError"						: u"Smart Smart Folder със същото име вече съществува.",
	"MetaAlreadyExistsError"					: u"Мета поле със същото име вече съществува.",
	"FolderAlreadyContainedError"				: u"Тази папка вече съществува в Smart Folder",
	"AccessDeniedError"							: u"Нямате права да извършите това действие.",
	"SessionExpiredError"						: u"Времето на сесията изтече.",
	"AuthorisationError"						: u"Няма регистриран потребител.",
	"RemoteApplicationDisconnected"				: u"Няма връзка с приложението. ID : %s.",
	"EmptyNameError"							: u"Името е празно.",
	"DirectoryAlreadyExistsError"				: u"Папката вече съществува.",
	"NothingSelectedError"						: u"Не е избрано нищо.",
	"FileAlreadyExistsError"					: u"Дестинацията вече съдържа файл със същото име.",
	"FolderAlreadyExistsError"					: u"Дестинацията вече съдържа папка със същото име.",
	"rules_saved_message"						: u"Rules successfully updated.", #NEEDED
	"rules_inherited_message"					: u"Rules successfully inherited.", #NEEDED
	"inaccessable_rules_warning"				: u"You can't edit rules for this contents:%s", #NEEDED
	"LongNameError"								: u"Name is too long", #NEEDED
	"no_such_directory"							: u"No such directory", #NEEDED
	"fill_all_star_fields_error"				: u'Please, fill all fields marked with a star', #NEEDED
	"file_not_exist"							: u"This file not exist", #NEEDED
	"deleting_no_acces_files_warning"			: u"There are files and folders to which you have no access. These files and folders have not been deleted.", #NEEDED
	"sf_not_exists_error"						: u"Smart Folder does not exist", #NEEDED
	"downloads_not_linked_to_sf"				: u"The downloads are not related to the specified Smart Folder.", #NEEDED
	"folders_and_files_not_found"				: u"Files and folders are not found.", #NEEDED
	"wrong_public_key"							: u"Specified public key is invalid or out of date", #NEEDED
	"downloading_error"							: u"Internal error occurred. Unable to download files and folders.", #NEEDED
	"common_error_message"						: u"An error has occurred. If the error continues, please, contact support of your product provider or your system administrator.",  #NEEDED
	"deleting_no_acces_sfolers_warning"			: u"There are Smart Folders and Groups to which you have no access. These Smart Folders and Groups have not been deleted.",


	#Home
	#top bar buttons
	"btn_upload_files"						: u"Качване на файл",
	"btn_new_folder"						: u"Нова папка",
	"btn_download_selected"					: u"Свалете избраното",
	"btn_edit_selected"						: u"Rename", #NEEDED
	"btn_edit_rights"						: u"Права за редактиране",
	"btn_add_to_smart_folder"				: u"Прибавете към Smart Folder",
	"btn_macros"							: u"Макрос",
	"macro_menu_label"						: u"<p>Run macro</p>", #NEEDED
	"unknown_type"							: u"unknown",
	#contents table
	"contents_tbl_name_title"				: u"Име",
	"contents_tbl_Type_title"				: u"Тип",
	"contents_tbl_Size_title"				: u"Размер",
	"contents_tbl_modified_title"			: u"Променен",
	"contents_tbl_uploaded_title"			: u"Uploaded", #NEEDED
	"node_type_folder"						: u"folder", #NEEDED
	"no_contents_title"						: u"There are no files and folders in this folder", #NEEDED
	#upload dialog
	"dialog_upload_title"					: u"Добави файл",
	"dialog_upload_file_uploader_title"		: u"Файл за качване:",
	"dialog_upload_destination_title"		: u"Дестинация:",
	"dialog_upload_uploader_title"			: u"Select file...", #NEEDED
	#new folder/edit folder dialog
	"dialog_new_folder_title"				: u"Нова папка",
	"dialog_rename_title"					: u"Rename", #NEEDED
	"dialog_folder_name_title"				: u"Име:",
	"dialog_edit_folder_rules_title"		: u"Access rules:", #NEEDED
	#delete selected dialog
	"dialog_delete_selected_title"			: u"Изтрийте избраното",
	#add to Smart Folder dialog
	"dialog_add_to_sf_title"				: u"Добавете към Smart Folder",
	"dialog_dialog_add_to_sf_list_title"	: u"към:",
	"dialog_dialog_add_to_sf_list_new"		: u"Създайте Smart Folder",
	#rules dialog
	"dialog_rules_title"					: u'Edit access rules', #NEEDED
	"inherit_checkbox_title"				: u'apply same rights to contents', #NEEDED
	"processing_rules_in_bg_message"		: u'Access rights will apply in the background. Processing may take a few minutes.', #NEEDED


	#Smart Folders
	"smart_folders_groups_title"		:u"Smart Folders and Groups", #NEEDED
	#top bar buttons
	"btn_new_smart_folder"		: u"Нова папка",
	#delete and edit titles used from page home
	#smart folders table
	"smart_folders_tbl_title"			: u"Smart Folders",
	"smart_folders_tbl_name_title"		: u"Име",
	"smart_folders_tbl_objs_title"		: u"Обекти",
	"smart_folders_tbl_modified_title"	: u"Променен/а",

	"sfg_button_edit"			: u"Edit", #NEEDED
	"sfg_button_add"			: u"Add Smart Folder", #NEEDED
	"sfg_button_delete"			: u"Delete", #NEEDED
	"sfg_button_group"			: u"Group", #NEEDED
	"sfg_button_ungroup"		: u"Ungroup", #NEEDED
	"sfg_button_selectmode"		: u"Select mode", #NEEDED
	"sfg_button_select"			: u"Select", #NEEDED
	"sfg_button_selectall"		: u"Select All", #NEEDED
	"sfg_button_selectnone"		: u"Select None", #NEEDED
	"sfg_button_rules"			: u"Rules", #NEEDED
	"sfg_msg_1"					: u"Please enter name for new folder:", #NEEDED
	"sfg_msg_2"					: u"New Folder", #NEEDED
	"sfg_msg_3"					: u"Folder name is empty", #NEEDED
	"sfg_msg_4"					: u"Not allowed in select mode", #NEEDED
	"sfg_msg_5"					: u"No folder selected", #NEEDED
	"sfg_msg_6"					: u"Please enter new name:", #NEEDED
	"sfg_msg_7"					: u"Please enter name for new group:", #NEEDED
	"sfg_msg_8"					: u"New Group", #NEEDED
	"sfg_msg_9"					: u"Group name is empty", #NEEDED
	"sfg_msg_10"				: u"No items selected", #NEEDED
	"sfg_msg_11"				: u"Group is not specified", #NEEDED


	#Smart Folder contents
	"metafield_type_string"				: u"НИЗ",
	"btn_edit_folders"					: u"Edit folders",  #NEEDED
	"metafield_no_value_title"			: u"Няма стойност",
	"no_files_title"					: u"Няма файлове в тази папка",
	"public_link_btn_title"				: u"Публична връзка",
	"download_all_btn_title"			: u"Download all",   #NEEDED
	#predefined metafields
	"metafield_created"					: u"Създадено",
	"metafield_modified"				: u"Променено",
	"metafield_watchers"				: u"Наблюдатели - да бъдат информирани",
	#add metafield dialog
	"dialog_add_metafield_title"		: u"Добави мета поле",
	"dialog_add_metafield_name_title"	: u"Име:",
	"dialog_add_metafield_type_title"	: u"Тип:",
	"dialog_add_metafield_value_title"	: u"Стойност:",
	#public link dialog
	"dialog_public_link_title"			: u"Публична връзка",
	"dialog_public_link_reset_btn"		: u"Нулиране",
	"dialog_public_clipboard_btn"		: u"Copy to clipboard", #NEEDED
	#add folder dialog
	"dialog_add_folder_title"			: u"Add folder(s)", #NEEDED


	#Macros
	"add_macros_btn"					: u"Добавяне на макрос",
	"import_macros_btn"					: u"Импорт",
	"macros_table_title"				: u"Макрос",
	"macros_table_name_title"			: u"Име",
	"macros_table_event_title"			: u"Събитие",

	#Ecit macros
	"edit_macros_area_caption"				: u"Редактиране на макрос",
	"edit_macros_check_btn"					: u"Проверка",
	"edit_macros_export_btn"				: u"Експорт",
	"edit_macros_name_title"				: u"Име:",
	"edit_macros_event_title"				: u"Събитие:",
	"edit_macros_body_title"				: u"Тяло:",
	"edit_macros_button_macros_checkbox"	: u"Макрос на бутон",
	"edit_macros_on_board_checkbox"			: u"On board", #NEEDED
	"edit_macros_picture_title"				: u"Select picture:", #NEEDED

	#errors
	"fill_all_fields_error"					: u"Fill all fields", #NEEDED
	"vscript_not_compiled_error"			: u"Vscript is not compiled", #NEEDED
	"type_macros_code_error"				: u"Type macros code", #NEEDED
	"fill_macros_fields_error"				: u"Fill macros fields",#NEEDED
	"macro_not_defined_error"				: u"Macro id is not defined", #NEEDED
	"xml_not_correctr_error"				: u"XML is not correct", #NEEDED


	#Design
	#cnt_login
	"greeting"		: u'Здравейте, %s %s',
	"login_error"	: u'Невалидна регистрация или парола',
	#header
	"menu_main_title"			: u'<div style="text-align: center">Дялове</div>',
	"menu_settings_title"		: u'<div style="text-align: center">Параметри</div>',
	"menu_smart_folders_title"	: u'<div style="text-align: center">Smart Folders</div>',
	#add user to group dialog (container_some)
	"find_usr_title"					: u'Намери потребител',
	"find_grp_title"					: u'Намери група',
	"add_usrgrp_diaolg_grp_tab_title"	: u'Добави група',
	"add_usrgrp_diaolg_usr_tab_title"	: u'Добави потребител',

	#Settings
	"settings_proshare_mngmnt_btn"	: u'Управление на дяловете',
	"settings_rules_btn"			: u'Управление на правилата',
	"settings_users_groups_btn"		: u'Управление на потребителите и групите',
	"settings_remote_control_btn"	: u'Дистанционно управление от ProAdmin',


	#Remote scheme (Remote Control)
	"current_scheme_local"		: u'Текуща схема - локално управление на правата',
	"current_scheme_remote"		: u'Текуща схема - Дистанционно управление на правата от ProAdmin',
	##"remote_scheme_page_title"	: u'Remote Control', used "settings_remote_control_btn"
	"radio_btn_local"			: u'Локална схема',
	"radio_btn_remote"			: u'Дистанционна схема',
	#widget_remote_form
	"socket.gaierror" 			: u'Попълнете полето "Сървър"',
	"socket.error" 				: u'Невалиден адрес на сървъра',
	"faultType" 				: u'Проверете полетата "Регистрация" и "Парола"',
	"connection_error"			: u'Грешка при свързването',
	"connection_success"		: u'Успешно свързване. Презаредете страницата и се опитайте да се регистрирате отново.',
	#Proadmin_attention
	"proadmin_attention_text"	: u'Приложението работи по дистанционната схема. Използвайте ProAdmin за конфигуриране на потребители и групи.',
	#Rules Management
	"rules_acl_cancel_btn"		: u'<div class="acl_cancel">Анулиране</div>',
	"rules_acl_apply_btn"		: u'<div class="acl_apply">Прилагане</div>',
	"cont_rules_title"			: u'<div style="padding-left: 15px;" class="acl_container_title">Управление на правата</div>',
	"cont_subjects_title"		: u'<div style="padding-left: 30px;" class="acl_container_title">Потребители и групи</div>',
	"cont_tree_title"			: u'<div class="acl_container_title" style="padding-left: 52px !important;">Обекти</div>',
	#rules_simple
	"widgetuser_rights_name"	: u'Име',
	"widgetuser_rights_access"	: u'Достъп',
	"bttn_apply_to_contents"	: u"Inherit rules", #NEEDED
	"edit_access_rules_title"	: u"Rules Management", #NEEDED
	"btn_back_title"			: u"Back", #NEEDED
	#rights keys (set in proadmin_config)
	"a"							: u'Администриране',
	"w" 						: u'Промяна',
	"r" 						: u'Четене',
	"o"							: u'Edit rights',
	"d"							: u'Изтриване',
	"edit_rights"				: u'Собственик',
	"Full"						: u'Пълни', #title for selecting all available rights options (widget_acl_rules)


	#Users & Groups Management
	##"usr_grp_management_page_title"	: u'Управление на потребители и права', used "settings_users_groups_btn"
	"create_user_btn_text"			: u'Нов потребител',
	"create_group_btn_text"			: u'Нова група',
	"users_tab_title"				: u'Потребители',
	"groups_tab_title"				: u'Групи',
	"fullname_column_header"		: u'Пълно име',
	"groupname_column_header"		: u'Име на група',
	#User dialog
	"dialog_edit_user_title"		: u'Параметри на потребител',
	"info_container_title"			: u'Информация',
	"phone"							: u'Cell Phone',#NEEDED
	"notification_email"			: u'E-mail',#NEEDED
	"country"						: u'Country',#NEEDED
	"key_words"						: u'Key Words',#NEEDED
	#Group dialog
	"dialog_edit_group_title"		: u'Параметри на група',
	"add_usrs_to_grp_btn_title"		: u'Добави потребители',
	"group_name_title"				: u'Име:',
	"add_group"						: u'Добави група',
	"find_user"						: u'Намери потребител',
	"find_group"					: u'Намери група',
	#Delete user or group dialog
	"delete_usr_grp_dialog_title"	: u'Сигурни ли сте, че искате да изтриете избраните обекти',

	"VEE_AddSmartFolder"			:u'Add smart folder',
	"VEE_DeleteSmartFolder"			:u'Delete smart folder',
	"VEE_EditSmartFolder"			:u'Edit smart folder',
	"VEE_AddFileSmartFolder"		:u'Add file to smart folder',
	"VEE_EditFileSmartFolder"		:u'Edit file in smart folder',
	"VEE_DeleteFileSmartFolder"		:u'Delete file from smart folder',
	"VEE_AddFile"					:u'Add file',
	"VEE_EditFile"					:u'Edit file',
	"VEE_DeleteFile"				:u'Delete file',
	"VEE_DownloadFileFromSmartFolder"	: u"Download file from smart folder",
	"VEE_SmartFolderOpenByPulicLink"	: u"Open smart folder by public link",
	"VEE_AddFolder"					:u"Add folder",
	"VEE_RulesChanged"					:u"Access Change",
	"VEE_EditFolder"				:u"Edit folder",
	"VEE_DeleteFolder"				:u"Delete folder",
	"VEE_AddFolderSmartFolder"		:u"Add folder to smart folder",
	"VEE_EditFolderSmartFolder"		:u"Edit folder in smart folder",
	"VEE_DeleteFolderSmartFolder"	:u"Delete folder from smart folder",


		#log page
	"log_btn_hide_filter"			: u"Скриване филтър",
	"log_btn_show_filter"			: u"Покажи филтър",
	"log_btn_clear_log"				: u"Изчисти",
	"log_btn_refresh_log"			: u"Обнови дневник",
	"log_filter_text"				: u"Филтър настройка",
	"log_by_time"					: u"От времето",
	"log_by_plugin_macros"			: u"От приставката / макроси",
	"log_btn_reset_filter"			: u"Сброс",
	"log_btn_apply_filter"			: u"Нанесете",
	"log_all_messages"				: u"Всички съобщения",
	"log_error"						: u"Грешка",
	"log_invalid_start_date"		: u"Невалидна дата за начало формат",
	"log_invalid_end_date"			: u"Невалидна крайна дата формат",
	"log_invalid_start_end"			: u"Началната дата трябва да бъде по-малко крайна дата",



	#Users & Groups Management
		#page titles
			"users_groups_management_title"	: u'Управление на потребители и групи',

		#top bar buttons
			"create_user_btn_text"			: u'Създаване на потреб.',
			"create_group_btn_text"			: u'Създаване на група',
			"add_selected_to_group_btn_text": u'Добави към група',

		#tableview
			"users_tab_title"				: u'Потребители',
			"groups_tab_title"				: u'Група',

		#datatable header
			"fullname_column_header"		: u'Пълно име',
			"groupname_column_header"		: u'Името на групата',
			"email_column_header"			: u'E-mail',
			"login_column_header"			: u'Влез',
			"group_column_header"			: u'Група',
			"users_count_column_header"		: u'Броят на потребителите',

		#group tab
			"create_new_group_text"			: u'Създаване на нова група',
			"create_new_group_btn"			: u'Създаване',
			"create_new_group_placeholder"	: u'Името на групата',

		#user dialog
			"dialog_create_user_title"		: u'Нов потребител',
			"dialog_edit_user_title"		: u'Редактиране на потребителя',
			"login_field_title"				: u'Влез',
			"password_field_title"			: u'Парола',
			"last_name_field_title"			: u'Фамилно име',
			"first_name_field_title"		: u'Име',
			"email_field_title"				: u'E-mail',
			"cell_phone_field_title"		: u'Телефонен номер',
			"country_field_title"			: u'Страна',
			"key_words_field_title"			: u'Ключови думи',
			"create_continue_btn"			: u'Създаване и продълж.',
			"info_cont_title"				: u'Информация',
			"group_cont_title"				: u'Група',
			"add_groups_btn"				: u'Добавяне на група',
			"no_groups_text"				: u'Наличните няма групи',
			"gen_password_btn"				: u'Генериране на парола',
			"send_email_checkbox"			: u'Изпрати имейл на потребителя',
			"select_groups_text"			: u'Изберете групите:',
			"selected_groups_text"			: u'Брой на избраните групи:',

		#group dialog
			"dialog_create_group_title"		: u'Новата група',
			"dialog_edit_group_title"		: u'Редактиране на група',
			"name_field_title"				: u'Име',
			"add_users_btn"					: u'Добавяне на потребител.',
			"no_users_text"					: u'Не регистрирани потребители',
			"selected_users_text"			: u"Брой на избрани потребители:",
			"select_users_text"				: u'Изберете потребители:',
			"search_users_text"				: u'Ръководство на филтър',

		#add user/group dialog
			"dialog_add_user_title"			: u"Търсене на потребители",
			"dialog_add_group_title"		: u"Търсене на група",
			"search_doesnt_find"			: u"За съжаление не е намерен",
			"search_field_title_user"		: u"Въведете име, фамилия или Е-мейл",
			"search_field_title_group"		: u"Въведете името на групата",

		#delete dialog
			"dialog_delete_user_title"		: u'Махни обекти',
			"dialog_delete_group_title"		: u'Махни обекти',

		#dialog add users to group
			"dialog_add_to_group_title"		: u'Добави към група',
			"to_text"						: u'в',
			"create_new_group_text"			: u'Създаване на нова група',

		"cancel_btn_title"					: u'Отменяне',
		"create_btn_title"					: u'Създаване',
		"save_btn_title"					: u'Спасяване',
		"delete_selected_btn_title"			: u'Изтриване на избраните',
		"add_btn_title"						: u'Добави',
		"delete_btn_title"					: u'Премахнете',
		"dd_all_users"						: u'Всички потребители',
		"show_on_page_text"					: u'Покажи по',


		#remote_setting_page
		"settings_remote_page_title" 		: u'Set scheme',
		"text_current_scheme"				: u'Current scheme',
		"radio_btn_local"					: u'Local scheme',
		"radio_btn_remote"					: u'Remote scheme',
		"host"								: u'Host:',
		"apply_btn"							: u'Apply',
		"test_btn"							: u'Test connection',
		"use_settings_btn"					: u'Use this settings',
		"refresh_btn"						: u'Refresh',
		"last_sync_text"					: u'Last sync: ',
		"syns_state_text"					: u'Sync thread status: ',
		"object_text"						: u'Objects: ',
		"user_text"							: u'Users: ',
		"connect_ip_success"				: u'Connect to ',
		"connect_ip_fail"					: u'Connection to IP address failed',
		"open_session_success"				: u'Open session ',
		"open_session_fail"					: u'Opening session failed: incorrect login or password',
		"proadmin_connection_fail"			: u'Connection to ProAdmin failed: there is no app on selected IP or login and password are incorrect',
		"at"								: u' at ',
		"test_sso_btn"						: u'Test SSO',
		"cancel_btn"						: u'Cancel',
		"close_btn"							: u'Close',
		"warning_test_sso"					: u"You'll be redirected to ProAdmin. If something wrong press back button in your browser.",
		"success_sso"						: u'SSO works.',

		#errors
		"fill_all_fields_error"					: u"Fill all fields",
		"vscript_not_compiled_error"			: u"Vscript is not compiled",
		"type_macros_code_error"				: u"Type macros code",
		"fill_macros_fields_error"				: u"Fill macros fields",
		"macro_not_defined_error"				: u"Macro id is not defined",
		"xml_not_correctr_error"				: u"XML is not correct",

		#errors
			"warning_title"					: u'Внимание!',
			"error_title"					: u'Дървеница!',
			"select_objects_error"			: u'Преминете към',
			"fill_group_name_field"			: u'Посочете името на групата',
			"group_name_already_exists"		: u'Група с това име вече съществува',
			"group_doesnt_exist"			: u'Групата не съществува',
			"fill_all_fields_with_star_error" : u'Моля попълнете всички полета',
			"user_doesnt_exist_error"		: u'Потребителят не съществува. Обновяване на страницата.',
			"group_doesnt_exist_error"		: u'Групата не съществува. Обновяване на страницата.',
			"user_login_already_exist_error": u'Това потребителско име вече съществува',
			"user_email_is_incorrect_error" : u'Невалиден имейл адрес',
			"user_phone_illegal_characters"	: u'Телефонният номер е невалиден',
			"user_password_is_empty_error"	: u'Въведете паролата',



	############################################################################
	"license" : u"""Ce logiciel et sa documentation sont la propriete de VDOM Box International. Il est interdit de les traduire, decompiler, modifier, adapter et corriger. Il vous est interdit de supprimer ou modifier les informations de licence et de le transmettre a des tiers. La location et le pret du logiciel sont interdits. Vous ne pouvez pas utiliser ce logiciel sur un autre materiel que celui fournie avec celui-ci. Seul l’auteur est habilite a effectuer ces operations.
Si vous effectuez une des operations ci-dessus, vos droits d’utilisation sont automatiquement resilies et l’auteur pourra recourir en justice.
Vous etes autorise, a posseder a des fins de sauvegarde uniquement des copies du fichier XML representant l’application sur d’autres supports de stockage que ceux inclus dans le materiel executant l’application. Vous n’etes pas autorise a faire de copies de la documentation papier.
Vous n’etes autorise a installer et utiliser le logiciel que sur un seul materiel executant le serveur d’application VDOM (generalement une VDOM Box). La licence de ce logiciel est associe a un identifiant unique d’utilisateur stocke sur la carte a Puce equipant la VDOM Box, vous n’etes pas autorise a utiliser la licence de ce logiciel pour un autre utilisateur possedant un identifiant unique different.
Transfert de licence. Pour transferer la licence de ce logiciel sur un autre utilisateur unique, celle-ci doit d’abord etre supprime de la carte a puce autorisant du precedent utilisateur, ce transfert ne peut se faire que par le distributeur de cette licence.
En utilisant ce logiciel, vous vous engagez a respecter les droits d’auteur, et a veiller a ce que les autres utilisateurs les respectent eux-memes.
Ce logiciel est protege en France par les lois sur la propriete intellectuelle ainsi qu’a l’etranger par les conventions internationales sur le droit d’auteur (convention de Berne).
La violation de l'un des droits de l'auteur du logiciel est un delit de contrefacon sanctionnee en France par l'article L335-2 du code de la propriete intellectuelle.
Le logiciel est fourni tel quel, sans aucune garantie. L'auteur ne saurait voir sa responsabilite engagee en cas de dommages de quelque nature que ce soit subis par l'utilisateur ou des tiers et resultant directement ou indirectement de son utilisation, notamment la perte de donnees, ou toute perte financiere resultant de son utilisation ou de l’impossibilite de l’utiliser, et ceci meme si l’auteur a ete prevenu de la possibilite de tels dommages. En tout etat de cause, la responsabilite de l’auteur ne pourra exceder le montant paye pour l’acquisition de la licence.
Si le logiciel propose est presente comme etant une mise a jour, vous devez etre deja titulaire d’une licence anterieure du meme logiciel pour pouvoir en beneficier. Une mise a jour complete ou remplace la licence et la version anterieure du logiciel. La mise a jour et la licence originale doivent etre considerees comme un produit unique. Vous n’etes donc pas autorise a les ceder ou donner separement.""",

	"license_button" : u"License",

	#license page
	"agree_button"				: u'Agree',
	"disagree_button"			: u'Disagree',
	"close_button"				: u'Close',
	"disagree_warning"			: u'You have to agree with license to use product',
	"select_operation_mode"		: u'Select the application operating mode:',
	"standalone_mode"			: u'Standalone',
	"proadmin_mode"				: u'ProAdmin connection',
	"proadmin_page_warning"		: u'You can set up ProAdmin connection on special page.',
	"go_button"					: u'Go',
	"password_title"			: u'Set password for administrator account:',
	"password_field"			: u'Password:',
	"confirm_password_field"	: u'Confirm password:',
	"apply_password"			: u'Apply',

	#proadmin_v2
	"system_login_title"			: u'System login',
	"system_account"				: u'System account:',
	"login_btn"						: u'Login',
	"users_container_label"			: u'Users',
	"incorrect_login"				:u'Incorrect login or password',
	"no_vdom"						:u'There is no VDOM',
	"standalone"					:u'Standalone',
	"proadmin_connection"			:u'ProAdmin connection',
	"restart_connectoin_btn"		:u'Restart connection',
	"reset_btn"						:u'Reset',
	"greating_title"				:u'Logged in ProSuite as %s',
	"account_column"				:u'Login',
	"name_column"					:u'Name',
	"login_column"					:u'Login as',
	"standalone_text"				:u'What is standalone connection?',
	"proadmin_text"					:u'What is ProAdmin connection?',
	"logout_hint"					:u'click to log out from ProSuite',
	"user_not_logged_in"			:u'Not logged in...',
	"proadmin_management"			:u'ProAdmin management',
	"user_management"				:u'Users management',

	#log off/start button
	"switch_to"						: u"Switch to",
	"logout"						: u"Log Out",
	"logoff_caption"				: u"You have been logged off",
	"logoff_message"				: u"You will be redirected to the login page in few seconds",

	#free_space
	"Gb"			:u'Gb',
	"Mb"			:u'Mb',
	"of"			:u' of ',
	"free"			:u' free',
}

lang_rectangle = {
	#'id' 							: 	[ 	left,		top,	width,	height 	]
	"user_and_group_manage"	: {
		#top bar
			"top_bar_create_user_btn"		: 	[	"18", 	"85", 	"105", 	"35" 	],
			"top_bar_delete_selected_btn" 	: 	[ 	"133", 	"85", 	"120", 	"35" 	],
			"top_bar_add_to_group_btn"		: 	[ 	"263", 	"85", 	"88", 	"35" 	],
			"top_Bar_create_group_btn"		:	[	"18",	"85",	"103",	"35"	],

		#add to group dialog
			"add_to_group_to_title_text"	:	[ 	"17",	"155",	"15",	"14"	],

		#add user group dialog
			"add_ug_cancel_btn"				:	[	"218",	"397",	"80",	"33"	],
			"add_ug_add_btn"				:	[	"310",	"397",	"80",	"33"	],

		#create user dialog
			"continue_btn"					:	[	"111",	"582",	"188",	"25"	],
			"add_groups_btn"				:	[	"14",	"27",	"140",	"32"	],
			"del_sel_groups_btn"			:	[	"160",	"27",	"190",	"32"	],

		#create group dialog
			"add_users_btn"					:	[	"17",	"67",	"200",	"32"	],
			"del_sel_users_btn"				:	[	"218",	"67",	"190",	"32"	],
			"selected_users_text"			:	[	"19",	"364",	"180",	"14"	],
			"selected_groups_text"			:	[	"8",	"446",	"155",	"14"	],
			"selected_users_count"			:	[	"205",	"364",	"50",	"14"	],
			"selected_groups_count"			:	[	"170",	"446",	"50",	"14"	],

			"objects_per_page_dropdown"		: 	[	"75",	"1",	"52",	"22"	],

		}
}


]]>
		</Library>
		<Library Name="VEE_compiler_trigger">
<![CDATA[from utils.threads import VDOM_thread


appId = application.id


class compilerTimeTrigger( VDOM_thread ):
	# default wait timeout
	DEFAULT_TIMEOUT = 10.0

	def __init__( self ):
		VDOM_thread.__init__( self )


	def work( self ):
		import VEE_core
#		VEE_core.engine.engine_logger.debug("Compiler thread work...")
		try:
			application.set_app_id( appId )
			self.save_thread()
			return VEE_core.engine.do_compile()
		except Exception as e:
#			from vdom_trace import Trace

			VEE_core.engine.engine_logger.exception("@@@@@@@@@Error while vscript compilation." )
#			VEE_core.engine.engine_logger.info( Trace.exception_trace() )

#			try:
#				VEE_core.engine.engine_logger..info( str( e ) )
#			except: pass
			try:
				return self.DEFAULT_TIMEOUT
			except:
				self.stop()


	def save_thread( self ):
		try:
			import VEE_core
			VEE_core.compiler_thread = self
		except:
			pass
]]>
		</Library>
		<Library Name="widget_plugin_db">
<![CDATA[import json

class WidgetPluginDB:
	def __init__(self):
		self.__datatable = None
		self.__db_list = None

	def set_data(self, data):
		plugin_db = [{"id": db,
					"Picture" : "<img src='0b4d0a39-487e-4954-9293-ef467ed727e7.res' />",
					"Name" : "<h1>" + db + "</h1>",
					"Import" : "<a href=''><img src='/690302ab-f3e2-476e-ac6d-a69dc2f0734e.res'/>Update</a>",
					"Export" : "<a href=''><img src='/9238c80d-f1ca-4b81-bf4a-59d54bd5c6eb.res'/>Download</a>",
					"Delete" : "<a href=''>Delete</a>"} for db in data]

		self.__db_list = json.dumps(plugin_db)

	def render(self, datatable = None):
		if datatable:
			self.__datatable = datatable
			self.__datatable.data = self.__db_list
]]>
		</Library>
		<Library Name="prosuite_threading">
<![CDATA["""
"""

import threading
import time

from prosuite_settings import settings


class ProSuiteBaseThread(threading.Thread):
    """
    ProSuite base thread with logging
    """

    def __init__(self, *args, **kwargs):
        super(ProSuiteBaseThread, self).__init__(*args, **kwargs)
        self._stop_event = threading.Event()
        self._logger = None

    def setup_logger(self, parent_logger, logger=None):
        """
        Setup logger
        """
        self._logger = logger or parent_logger.getChild(self.name)

    @property
    def logger(self):
        return self._logger

    def kill_existing_instance(self):
        """
        Kill thread with same name as if exists
        """
        self.logger.debug("Search threads starting with name '%s'...", self.name)

        # enumerate over existing threads
        for thread in threading.enumerate():

            # check name and
            # thread is instance of VDOM_thread or not
            if not thread.name.startswith(self.name):
                continue

            args = (
                thread.getName(),
                thread.ident,
                thread.__class__.__name__
            )
            self.logger.debug(
                "Thread %s:%s (%s class) was found! Trying stop it...",
                *args
            )
            try:
                thread.stop()

            except Exception as ex:
                self.logger.debug(
                    "Can't stop thread %s:%s (%s class)!",
                    *args
                )

    def stop(self):
        """
        Set 'stop' flag to true
        """
        self._stop_event.set()

    def is_running(self):
        """
        Check is thread running or not
        """
        return not self._stop_event.is_set()

    def set_app_id(self):
        """
        Set application ID
        """
        application.set_app_id(settings.info["id"])

    def prepare(self):
        """
        Prepare env
        """
        self.set_app_id()

    def cleanup(self):
        """
        Cleanup env
        """
        pass

    def main(self):
        """
        Main function
        """
        pass

    def run(self):
        try:
            self.prepare()
            self.main()

        except Exception as ex:
            self.logger.exception("Exception in thread.run...")

        finally:
            self.cleanup()


class ProSuiteDaemon(ProSuiteBaseThread):
    """
    Basic ProSuite daemon class
    """

    DEFAULT_QUANTUM = 1.0
    DEFAULT_TIMEOUT = 30.0
    DEFAULT_NAME = "Daemons.ProSuite"

    def __init__(self, *args, **kwargs):
        super(ProSuiteDaemon, self).__init__(*args, **kwargs)
        self.name = settings.info["id"] + "." + self.DEFAULT_NAME

    def main(self):
        """
        Mail loop
        """
        while self.is_running():
            self.set_app_id()
            self.sleep(self.work())

        self.logger.info("Stop event was set... Exiting...")

    def sleep(self, seconds=0):
        """
        """
        remainder = seconds or self.DEFAULT_TIMEOUT

        while remainder > 0 and self.is_running():
            value = min(self.DEFAULT_QUANTUM, remainder)
            time.sleep(value)
            remainder -= value

    def work(self):
        """
        Main function of the thread.
        Executed every DEFAULT_TIMEOUT seconds
        """
        try:
            self.save_thread()
            self.process()
        except Exception as ex:
            self.logger.exception("Exception in 'work'")

        finally:
            return self.DEFAULT_TIMEOUT

    def save_thread(self):
        """
        Save thread to module variable
        """
        pass

    def process(self):
        """
        Write your code here to run in thread
        """
        pass


class ProSuiteThreadPool(object):

    __slots__ = (
        "_pool",
        "_size",
        "_name",
        "_pm_name",
        "_pm_cls",
        "_logger",
        "_counter",
    )

    def __init__(self, name, size, pm_name="worker", pm_cls=ProSuiteBaseThread):
        self._logger = None
        self._name = name
        self._pm_name = "%s.%s" % (self._name, pm_name)
        self._pm_cls = pm_cls
        self._pool = self.get_pool()
        self._size = size
        self._counter = 0

    def setup_logger(self, parent_logger):
        """
        Setup logger
        """
        self._logger = parent_logger.getChild(self.name)

    @property
    def logger(self):
        return self._logger

    def get_pool(self):
        return []

    @property
    def name(self):
        return self._name

    @property
    def worker_name(self):
        return self._pm_name

    @property
    def worker_class(self):
        return self._pm_cls

    @property
    def size(self):
        return self._size

    def inc_counter(self):
        if self._counter > self._size ** 4:
            self._counter = 0

        self._counter += 1
        return self._counter

    def is_fully_loaded(self):
        """
        Check is pool full or not
        """
        return bool(self.size and len(self._pool) >= self.size)

    def start_worker(self, *args, **kwargs):
        if self.is_fully_loaded():
            return None

        name = "%s-%d" % (self.worker_name, self.inc_counter())
        worker = self.worker_class(name=name, *args, **kwargs)
        self.add_pool_member(worker)
        worker.start()

        return worker

#    def create_worker(self, *args, **kwargs):
#        """
#        Create new worker and add it to pool
#        """
#        if self.is_fully_loaded():
#            return None
#
#        name = "%s-%d" % (self.worker_name, len(self._pool))
#        worker = self.worker_class(name=name, *args, **kwargs)
#
#        return worker
#
#    def add_worker(self, worker):
#        """
#        Add worker to pool
#        """
#        if self.is_fully_loaded():
#            return False
#
#        self.add_pool_member(worker)
#        return True

    def add_pool_member(self, member):
        """
        Add pool member @{member} to pool
        """
        self._pool.append(member)

    def get_member(self, pool_member):
        """
        Find pool member in pool
        @{pool_member} can be dictionary key in case
        when @{pool} is dictionary
        """
        return pool_member

    def remove_member(self, pool_member):
        """
        Remove pool member from pool
        """
        self._pool.remove(pool_member)

    def pool_copy(self):
        return self._pool[:]

    def check_members(self):
        """
        Check is pool member alive or not
        """
        if not self._pool:
            return

        for member in self.pool_copy():

            thread = self.get_member(member)
            if not thread.is_alive():
                self.remove_member(member)

                args = (
                    thread.getName(),
                    thread.ident,
                    thread.__class__.__name__
                )
                self.logger.debug(
                    "Pool member %s (%s, %s) is dead. Remove it from pool",
                    *args
                )
]]>
		</Library>
		<Library Name="proadmin_db_scheme">
<![CDATA[from proadmin_base_scheme import BaseProAdminScheme
from proadmin_db_aclobject import DbACLObject

class DbApplicationScheme( BaseProAdminScheme ):
	""" ProAdmin scheme working with 
	"""
	def __init__( self, guid=None, connection=None ):
		BaseProAdminScheme.__init__( self, guid, connection, connection )
		
		self.type 	= 'local'		
		self.set_option( 'root_user', 'root' )
		self.set_option( 'admin_group', 'Administrators' )



	def register( self, make_default=None ):
		""" register this scheme
		"""
		import ProAdmin
		self._application = DbACLObject.application( self.name, self.guid, self )

		ProAdmin.register_scheme( self )





	def create_root_user( self, password='root' ):
		"""	 create super user for this scheme
		"""
		# get root user
		email = self.get_option( 'root_user' )
		users = self.get_users( email )
		root = users[0] if users else None
		
		if not root:
			root = self.create_user( email )
			root.first_name = email
			root.password = password
			root.save()
		
		# try to get admins group
		name = self.get_option( 'admin_group' )
		admins = self.get_groups( name )
		admins = admins[0] if admins else None
		
		if not admins:
			return root
			
		# check that root in admins group
		if root not in admins.get_users():
			admins.add_user( root )
			admins.save()
		
		return root



	def create_admins_group( self ):
		""" group of application administrators
		"""
		# try to get admins group
		name = self.get_option( 'admin_group' )
		admins = self.get_groups( name )
		admins = admins[0] if admins else None
		
		# creat group if need
		if not admins:
			admins = self.create_group( name )
			admins.save()
		
		# add root user to group
		email = self.get_option( 'root_user' )
		users = self.get_users( email )
		root = users[0] if users else None
		
		if not root: return admins
		
		if root not in admins.get_users():
			admins.add_user( root )
			admins.save()
				
		return admins
		


	def create_user( self, email='' ):
		from proadmin_db_user import DbUser

		if email:
			users = self.get_users( email = email )
			if users: return users[0]
	
		user = DbUser( scheme = self )
		user.email = email
		return user

	def create_group( self, name='' ):
		from proadmin_db_group import DbGroup
		groups = self.get_groups( name = name ) if name else []
		if groups: return groups[0]
		
		group = DbGroup( scheme = self )
		group.name = name
		return group

	def get_users( self, email=None, guid=None ):
		from proadmin_db_user import DbUser
		return DbUser.get_users( scheme=self, email=email, guid=guid )

	def get_groups( self, name=None, user=None, guid=None ):
		from proadmin_db_group import DbGroup
		return user.get_groups() if user else DbGroup.get_groups( scheme = self, guid = guid, name = name )


	def check_password( self, user, password ):
		return user.check_local_password( password )


]]>
		</Library>
		<Library Name="ProSuiteServer500ErrorPage">
<![CDATA["""
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 23:20 (RTZ +5)"


from prosuite_web import ProSuiteBasicPage, callback


class ProSuiteServer500ErrorPage(ProSuiteBasicPage):

    @callback("onload", 2)
    def onload(self, *args, **kwargs):
        """
        On page onload
        """
        self.vdom_objects["500error.message"].value = self.vdom_objects["500error.message"].value.format(
            eid=self.get_argument("eid", ""),
            back_url=self.get_argument("back_url", "") or self.get_home_url(),
            logout_page=self.get_logout_url()
        )

    def get_page_title(self):
        return self.localization["prosuite.500error.title"]

    def get_localization_data(self):
        return {
            self.vdom_objects["500error.caption"]: "prosuite.500error.dialog.caption",
            self.vdom_objects["500error.message"]: "prosuite.500error.dialog.message",
        }
]]>
		</Library>
		<Library Name="widget_timer">
<![CDATA[import json
import cgi
import localization

class WidgetTimer:
	def __init__(self):
		self.__datatable = None
		self.__timer_list = None

	def set_data(self, data):
		timer = []
		for t in data:
			timer.append({"id" : t.id,
					"Picture" : "<img src='/e574b9ce-9582-4962-ad7b-b11820dacc3d.png' />",
					"Name" : "<h1>" + t.name + "</h1><p class='clearfix'></p><p>" + get_period(t.period.split(":")) + "</p><p></p>",
					"Edit" : "<a href=''><img src='/910e3e46-f9cf-4aa7-9147-04ec354078c8.res'/>Edit timer</a>",
					"Delete" : "<a href=''>Delete</a>"})

		self.__timer_list = json.dumps(timer)

	def render(self, datatable):
		self.__datatable = datatable
		self.__datatable.data = self.__timer_list

def get_period(period):
	period_str = "once "
	if len(period) == 4:
		if int(period[0]) > 1 :
			period_str += str(int(period[0])) + " days "
		elif int(period[0]) ==  1 :
			period_str += str(int(period[0]))  + " day "
		if int(period[1]) > 1 :
			period_str += str(int(period[1])) + " hours "
		elif int(period[1]) ==  1 :
			period_str += str(int(period[1])) + " hour "
		if int(period[2]) > 1 :
			period_str += str(int(period[2])) + " mins "
		elif int(period[2]) ==  1 :
			period_str += str(int(period[2])) + " min "
		if int(period[3]) > 1 :
			period_str += str(int(period[3])) + " secs "
		elif int(period[3]) ==  1 :
			period_str += str(int(period[3])) + " sec "
	if len(period) == 3:
		if int(period[1]) > 1 :
			period_str += str(int(period[1])) + " hours "
		elif int(period[1]) ==  1 :
			period_str += str(int(period[1])) + " hour "
		if int(period[2]) > 1 :
			period_str += str(int(period[2])) + " mins "
		elif int(period[2]) ==  1 :
			period_str += str(int(period[2])) + " min "
		if int(period[3]) > 1 :
			period_str += str(int(period[3])) + " secs "
		elif int(period[3]) ==  1 :
			period_str += str(int(period[3])) + " sec "
	if len(period) == 2:
		if int(period[2]) > 1 :
			period_str += str(int(period[2])) + " mins "
		elif int(period[2]) ==  1 :
			period_str += str(int(period[2])) + " min "
		if int(period[3]) > 1 :
			period_str += str(int(period[3])) + " secs "
		elif int(period[3]) ==  1 :
			period_str += str(int(period[3])) + " sec "
	if len(period) == 1:
		if int(period[3]) > 1 :
			period_str += str(int(period[3])) + " secs "
		elif int(period[3]) ==  1 :
			period_str += istr(int(period[3])) + " sec "

	return period_str
]]>
		</Library>
		<Library Name="prosuite_constants">
<![CDATA["""
"""

ProAdminID = "491d4c93-4089-4517-93d3-82326298da44"
ProAdminName = "ProAdmin"
ProAdminIcon = "/068664fb-3f24-4761-ac3a-ae57eda025bb.res"

ProContactID = "526ae088-8004-469c-9d8e-cea715f8f63b"
ProContactName = "ProContact"
ProContactIcon = "/da39157c-f46a-48bf-94e6-c1cb49fe7c5a.res"

ProMailID = "7f459762-e1ba-42d3-a0e1-e74beda2eb85"
ProMailName = "ProMail"
ProMailIcon = "/027a5359-0d88-4895-ab27-94bc97487928.res"

ProPlanningID = "22d43054-9861-48e8-875f-53d09bb1fd11"
ProPlanningName = "ProPlanning"
ProPlanningIcon = "/47d1dfbd-feef-42ba-a264-e7c999d13e7b.res"

ProSearchID = "fc2221b2-794b-4c40-991f-6c7c2f61dbc2"
ProSearchName = "ProSearch"
ProSearchIcon = "/4d827ae1-a2c9-449e-96f6-7510be1caa7e.res"

ProShareID = "b0a274f0-22bc-44be-be48-da6ec9180268"
ProShareName = "ProShare"
ProShareIcon = "/48cb6738-97ef-4fea-9f4e-a74452a23f10.res"


APP_ICONS = {
    ProAdminID: ProAdminIcon,
    ProContactID: ProContactIcon,
    ProMailID: ProMailIcon,
    ProPlanningID: ProPlanningIcon,
    ProSearchID: ProSearchIcon,
    ProShareID: ProShareIcon,
}]]>
		</Library>
		<Library Name="pyzmail">
<![CDATA[#
# pyzmail/parse.py
# (c) Alain Spineux <alain.spineux@gmail.com>
# http://www.magiksys.net/pyzmail
# Released under LGPL

"""
Useful functions to parse emails

@var email_address_re: a regex that match well formed email address (from perlfaq9)
@undocumented: atom_rfc2822
@undocumented: atom_posfix_restricted
@undocumented: atom
@undocumented: dot_atom
@undocumented: local
@undocumented: domain_lit
@undocumented: domain
@undocumented: addr_spec
"""

import email
import email.errors
import email.header
import email.message
import mimetypes
import re
import StringIO
import sys

from pyzmail_utils import *

# email address REGEX matching the R    FC 2822 spec from perlfaq9
#    my $atom       = qr{[a-zA-Z0-9_!#\$\%&'*+/=?\^`{}~|\-]+};
#    my $dot_atom   = qr{$atom(?:\.$atom)*};
#    my $quoted     = qr{"(?:\\[^\r\n]|[^\\"])*"};
#    my $local      = qr{(?:$dot_atom|$quoted)};
#    my $domain_lit = qr{\[(?:\\\S|[\x21-\x5a\x5e-\x7e])*\]};
#    my $domain     = qr{(?:$dot_atom|$domain_lit)};
#    my $addr_spec  = qr{$local\@$domain};
#
# Python's translation
atom_rfc2822=r"[a-zA-Z0-9_!#\$\%&'*+/=?\^`{}~|\-]+"
atom_posfix_restricted=r"[a-zA-Z0-9_#\$&'*+/=?\^`{}~|\-]+" # without '!' and '%'
atom=atom_rfc2822
dot_atom=atom  +  r"(?:\."  +  atom  +  ")*"
quoted=r'"(?:\\[^\r\n]|[^\\"])*"'
local="(?:"  +  dot_atom  +  "|"  +  quoted  +  ")"
domain_lit=r"\[(?:\\\S|[\x21-\x5a\x5e-\x7e])*\]"
domain="(?:"  +  dot_atom  +  "|"  +  domain_lit  +  ")"
addr_spec=local  +  "\@"  +  domain
# and the result
email_address_re=re.compile('^'+addr_spec+'$')

class MailPart:
    """
    Data related to a mail part (aka message content, attachment or
    embedded content in an email)

    @type charset: str or None
    @ivar charset: the encoding of the I{get_payload()} content if I{type} is 'text/*'
    and charset has been specified in the message
    @type content_id: str or None
    @ivar content_id: the MIME Content-ID if specified in the message.
    @type description: str or None
    @ivar description: the MIME Content-Description if specified in the message.
    @type disposition: str or None
    @ivar disposition: C{None}, C{'inline'} or C{'attachment'} depending
    the MIME Content-Disposition value
    @type filename: unicode or None
    @ivar filename: the name of the file, if specified in the message.
    @type part: inherit from email.mime.base.MIMEBase
    @ivar part: the related part inside the message.
    @type is_body: str or None
    @ivar is_body: None if this part is not the mail content itself (an
        attachment or embedded content), C{'text/plain'} if this part is the
        text content or C{'text/html'} if this part is the HTML version.
    @type sanitized_filename: str or None
    @ivar sanitized_filename: This field is filled by L{PyzMessage} to store
    a valid unique filename related or not with the original filename.
    @type type: str
    @ivar type: the MIME type, like 'text/plain', 'image/png', 'application/msword' ...
    """

    def __init__(self, part, filename=None, type=None, charset=None, content_id=None, description=None, disposition=None, sanitized_filename=None, is_body=None):
        """
        Create an mail part and initialize all attributes
        """
        self.part=part          # original python part
        self.filename=filename  # filename in unicode (if any)
        self.type=type          # the mime-type
        self.charset=charset    # the charset (if any)
        self.description=description    # if any
        self.disposition=disposition    # 'inline', 'attachment' or None
        self.sanitized_filename=sanitized_filename # cleanup your filename here (TODO)
        self.is_body=is_body        # usually in (None, 'text/plain' or 'text/html')
        self.content_id=content_id  # if any
        if self.content_id:
            # strip '<>' to ease search and replace in "root" content (TODO)
            if self.content_id.startswith('<') and self.content_id.endswith('>'):
                self.content_id=self.content_id[1:-1]

    def get_payload(self):
        """
        decode and return part payload. if I{type} is 'text/*' and I{charset}
        not C{None}, be careful to take care of the text encoding. Use
        something like C{part.get_payload().decode(part.charset)}
        """

        payload=None
        if self.type.startswith('message/'):
            # I don't use msg.as_string() because I want to use mangle_from_=False
            if sys.version_info<(3, 0):
                # python 2.x
                from email.generator import Generator
                fp = StringIO.StringIO()
                g = Generator(fp, mangle_from_=False)
                g.flatten(self.part, unixfrom=False)
                payload=fp.getvalue()
            else:
                # support only for python >= 3.2
                from email.generator import BytesGenerator
                import io
                fp = io.BytesIO()
                g = BytesGenerator(fp, mangle_from_=False)
                g.flatten(self.part, unixfrom=False)
                payload=fp.getvalue()

        else:
            payload=self.part.get_payload(decode=True)
        return payload

    def __repr__(self):
        st=u'MailPart<'
        if self.is_body:
            st+=u'*'
        st+=self.type
        if self.charset:
            st+=' charset='+self.charset
        if self.filename:
            st+=' filename='+self.filename
        if self.content_id:
            st+=' content_id='+self.content_id
        st+=' len=%d' % (len(self.get_payload()), )
        st+=u'>'
        return st



_line_end_re=re.compile('\r\n|\n\r|\n|\r')

def _friendly_header(header):
    """
    Convert header returned by C{email.message.Message.get()} into a
    user friendly string.

    Py3k C{email.message.Message.get()} return C{header.Header()} with charset
    set to C{charset.UNKNOWN8BIT} when the header contains invalid characters,
    else it return I{str} as  Python 2.X does

    @type header: str or email.header.Header
    @param header: the header to convert into a user friendly string

    @rtype: str
    @returns: the converter header
    """

    save=header
    if isinstance(header, email.header.Header):
        header=str(header)

    return re.sub(_line_end_re, ' ', header)

def decode_mail_header(value, default_charset='us-ascii'):
    """
    Decode a header value into a unicode string.
    Works like a more smarter python
    C{u"".join(email.header.decode_header()} function

    @type value: str
    @param value: the value of the header.
    @type default_charset: str
    @keyword default_charset: if one charset used in the header (multiple charset
    can be mixed) is unknown, then use this charset instead.

    >>> decode_mail_header('=?iso-8859-1?q?Courrier_=E8lectronique_en_Fran=E7ais?=')
    u'Courrier \\xe8lectronique en Fran\\xe7ais'
    """

#    value=_friendly_header(value)
    try:
        headers=email.header.decode_header(value)
    except email.errors.HeaderParseError:
        # this can append in email.base64mime.decode(), for example for this value:
        # '=?UTF-8?B?15HXmdeh15jXqNeVINeY15DXpteUINeTJ9eV16jXlSDXkdeg15XXldeUINem15PXpywg15TXptei16bXldei15nXnSDXqdecINek15zXmdeZ?==?UTF-8?B?157XldeR15nXnCwg157Xldek16Ig157Xl9eV15wg15HXodeV15bXnyDXk9ec15DXnCDXldeh15gg157Xl9eR16rXldeqINep15wg15HXmdeQ?==?UTF-8?B?15zXmNeZ?='
        # then return a sanitized ascii string
        # TODO: some improvements are possible here, but a failure here is
        # unlikely
        return value.encode('us-ascii', 'replace').decode('us-ascii')
    else:
        for i, (text, charset) in enumerate(headers):
            # python 3.x
            # email.header.decode_header('a') -> [('a', None)]
            # email.header.decode_header('a =?ISO-8859-1?Q?foo?= b')
            # --> [(b'a', None), (b'foo', 'iso-8859-1'), (b'b', None)]
            # in Py3 text is sometime str and sometime byte :-(
            # python 2.x
            # email.header.decode_header('a') -> [('a', None)]
            # email.header.decode_header('a =?ISO-8859-1?Q?foo?= b')
            # --> [('a', None), ('foo', 'iso-8859-1'), ('b', None)]
            if (charset is None and sys.version_info>=(3, 0)):
                # Py3
                if isinstance(text, str):
                    # convert Py3 string into bytes string to be sure their is no
                    # non us-ascii chars and because next line expect byte string
                    text=text.encode('us-ascii', 'replace')
            try:
                headers[i]=text.decode(charset or 'us-ascii', 'replace')
            except LookupError:
                # if the charset is unknown, force default
                headers[i]=text.decode(default_charset, 'replace')

        return u"".join(headers)

def get_mail_addresses(message, header_name):
    """
    retrieve all email addresses from one message header

    @type message: email.message.Message
    @param message: the email message
    @type header_name: str
    @param header_name: the name of the header, can be 'from', 'to', 'cc' or
    any other header containing one or more email addresses
    @rtype: list
    @returns: a list of the addresses in the form of tuples
    C{[(u'Name', 'addresse@domain.com'), ...]}

    >>> import email
    >>> import email.mime.text
    >>> msg=email.mime.text.MIMEText('The text.', 'plain', 'us-ascii')
    >>> msg['From']=email.email.utils.formataddr(('Me', 'me@foo.com'))
    >>> msg['To']=email.email.utils.formataddr(('A', 'a@foo.com'))+', '+email.email.utils.formataddr(('B', 'b@foo.com'))
    >>> print msg.as_string(unixfrom=False)
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    From: Me <me@foo.com>
    To: A <a@foo.com>, B <b@foo.com>
    <BLANKLINE>
    The text.
    >>> get_mail_addresses(msg, 'from')
    [(u'Me', 'me@foo.com')]
    >>> get_mail_addresses(msg, 'to')
    [(u'A', 'a@foo.com'), (u'B', 'b@foo.com')]
    """
    addrs=email.utils.getaddresses([ _friendly_header(h) for h in message.get_all(header_name, [])])
    for i, (addr_name, addr) in enumerate(addrs):
        if not addr_name and addr:
            # only one string! Is it the address or the  address name ?
            # use the same for both and see later
            addr_name=addr

        if is_usascii(addr):
            # address must be ascii only and must match address regex
            if not email_address_re.match(addr):
                addr=''
        else:
            addr=''
        addrs[i]=(decode_mail_header(addr_name), addr)
    return addrs

def get_filename(part):
    """
    Find the filename of a mail part. Many MUA send attachments with the
    filename in the I{name} parameter of the I{Content-type} header instead
    of in the I{filename} parameter of the I{Content-Disposition} header.

    @type part: inherit from email.mime.base.MIMEBase
    @param part: the mail part
    @rtype: None or unicode
    @returns: the filename or None if not found

    >>> import email.mime.image
    >>> attach=email.mime.image.MIMEImage('data', 'png')
    >>> attach.add_header('Content-Disposition', 'attachment', filename='image.png')
    >>> get_filename(attach)
    u'image.png'
    >>> print attach.as_string(unixfrom=False)
    Content-Type: image/png
    MIME-Version: 1.0
    Content-Transfer-Encoding: base64
    Content-Disposition: attachment; filename="image.png"
    <BLANKLINE>
    ZGF0YQ==
    >>> import email.mime.text
    >>> attach=email.mime.text.MIMEText('The text.', 'plain', 'us-ascii')
    >>> attach.add_header('Content-Disposition', 'attachment', filename=('iso-8859-1', 'fr', u'Fran\\xe7ais.txt'.encode('iso-8859-1')))
    >>> get_filename(attach)
    u'Fran\\xe7ais.txt'
    >>> print attach.as_string(unixfrom=False)
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-Disposition: attachment; filename*="iso-8859-1'fr'Fran%E7ais.txt"
    <BLANKLINE>
    The text.
    """
    filename=part.get_param('filename', None, 'content-disposition')
    if not filename:
        filename=part.get_param('name', None) # default is 'content-type'

    if filename:
        if isinstance(filename, tuple):
            # RFC 2231 must be used to encode parameters inside MIME header
            filename=email.utils.collapse_rfc2231_value(filename).strip()
        else:
            # But a lot of MUA erroneously use RFC 2047 instead of RFC 2231
            # in fact anybody missuse RFC2047 here !!!
            filename=decode_mail_header(filename)

    return filename

def _search_message_content(contents, part):
    """
    recursive search of message content (text or HTML) inside
    the structure of the email. Used by L{search_message_content()}

    @type contents: dict
    @param contents: contents already found in parents or brothers I{parts}.
    The dictionary will be completed as and when. key is the MIME type of the part.
    @type part: inherit email.mime.base.MIMEBase
    @param part: the part of the mail to look inside recursively.
    """
    type=part.get_content_type()
    if part.is_multipart(): # type.startswith('multipart/'):
        # explore only True 'multipart/*'
        # because 'messages/rfc822' are 'multipart/*' too but
        # must not be explored here
        if type=='multipart/related':
            # the first part or the one pointed by start
            start=part.get_param('start', None)
            related_type=part.get_param('type', None)
            for i, subpart in enumerate(part.get_payload()):
                if (not start and i==0) or (start and start==subpart.get('Content-Id')):
                    _search_message_content(contents, subpart)
                    return
        elif type=='multipart/alternative':
            # all parts are candidates and latest is the best
            for subpart in part.get_payload():
                _search_message_content(contents, subpart)
        elif type in ('multipart/report',  'multipart/signed'):
            # only the first part is candidate
            try:
                subpart=part.get_payload()[0]
            except IndexError:
                return
            else:
                _search_message_content(contents, subpart)
                return

        elif type=='multipart/encrypted':
            # the second part is the good one, but we need to de-crypt it
            # using the first part. Do nothing
            return

        else:
            # unknown types must be handled as 'multipart/mixed'
            # This is the peace of code that could probably be improved,
            # I use a heuristic : if not already found, use first valid non
            # 'attachment' parts found
            for subpart in part.get_payload():
                tmp_contents=dict()
                _search_message_content(tmp_contents, subpart)
                for k, v in tmp_contents.iteritems():
                    if not subpart.get_param('attachment', None, 'content-disposition')=='':
                        # if not an attachment, initiate value if not already found
                        contents.setdefault(k, v)
            return
    else:
        contents[part.get_content_type().lower()]=part
        return

    return

def search_message_content(mail):
    """
    search of message content (text or HTML) inside
    the structure of the mail. This function is used by L{get_mail_parts()}
    to set the C{is_body} part of the L{MailPart}s

    @type mail: inherit from email.message.Message
    @param mail: the message to search in.
    @rtype: dict
    @returns: a dictionary of the form C{{'text/plain': text_part, 'text/html': html_part}}
    where text_part and html_part inherite from C{email.mime.text.MIMEText}
    and are respectively the I{text} and I{HTML} version of the message content.
    One part can be missing. The dictionay can aven be empty if none of the
    parts math the requirements to be considered as the content.
    """
    contents=dict()
    _search_message_content(contents, mail)
    return contents

def get_mail_parts(msg):
    """
    return a list of all parts of the message as a list of L{MailPart}.
    Retrieve parts attributes to fill in L{MailPart} object.

    @type msg: inherit email.message.Message
    @param msg: the message
    @rtype: list
    @returns: list of mail parts

    >>> import email.mime.multipart
    >>> msg=email.mime.multipart.MIMEMultipart(boundary='===limit1==')
    >>> import email.mime.text
    >>> txt=email.mime.text.MIMEText('The text.', 'plain', 'us-ascii')
    >>> msg.attach(txt)
    >>> import email.mime.image
    >>> image=email.mime.image.MIMEImage('data', 'png')
    >>> image.add_header('Content-Disposition', 'attachment', filename='image.png')
    >>> msg.attach(image)
    >>> print msg.as_string(unixfrom=False)
    Content-Type: multipart/mixed; boundary="===limit1=="
    MIME-Version: 1.0
    <BLANKLINE>
    --===limit1==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    <BLANKLINE>
    The text.
    --===limit1==
    Content-Type: image/png
    MIME-Version: 1.0
    Content-Transfer-Encoding: base64
    Content-Disposition: attachment; filename="image.png"
    <BLANKLINE>
    ZGF0YQ==
    --===limit1==--
    >>> parts=get_mail_parts(msg)
    >>> parts
    [MailPart<*text/plain charset=us-ascii len=9>, MailPart<image/png filename=image.png len=4>]
    >>> # the star "*" means this is the mail content, not an attachment
    >>> parts[0].get_payload().decode(parts[0].charset)
    u'The text.'
    >>> parts[1].filename, len(parts[1].get_payload())
    (u'image.png', 4)

    """
    mailparts=[]

    # retrieve messages of the email
    contents=search_message_content(msg)
    # reverse contents dict
    parts=dict((v,k) for k, v in contents.iteritems())

    # organize the stack to handle deep first search
    stack=[ msg, ]
    while stack:
        part=stack.pop(0)
        type=part.get_content_type()
        if type.startswith('message/'):
            # ('message/delivery-status', 'message/rfc822', 'message/disposition-notification'):
            # I don't want to explore the tree deeper her and just save source using msg.as_string()
            # but I don't use msg.as_string() because I want to use mangle_from_=False
            filename='message.eml'
            mailparts.append(MailPart(part, filename=filename, type=type, charset=part.get_param('charset'), description=part.get('Content-Description')))
        elif part.is_multipart():
            # insert new parts at the beginning of the stack (deep first search)
            stack[:0]=part.get_payload()
        else:
            charset=part.get_param('charset')
            filename=get_filename(part)

            disposition=None
            if part.get_param('inline', None, 'content-disposition')=='':
                disposition='inline'
            elif part.get_param('attachment', None, 'content-disposition')=='':
                disposition='attachment'

            mailparts.append(MailPart(part, filename=filename, type=type, charset=charset, content_id=part.get('Content-Id'), description=part.get('Content-Description'), disposition=disposition, is_body=parts.get(part, False)))

    return mailparts


def decode_text(payload, charset, default_charset):
    """
    Try to decode text content by trying multiple charset until success.
    First try I{charset}, else try I{default_charset} finally
    try popular charsets in order : ascii, utf-8, utf-16, windows-1252, cp850
    If all fail then use I{default_charset} and replace wrong characters

    @type payload: str
    @param payload: the content to decode
    @type charset: str or None
    @param charset: the first charset to try if != C{None}
    @type default_charset: str or None
    @param default_charset: the second charset to try if != C{None}

    @rtype: tuple
    @returns: a tuple of the form C{(payload, charset)}
        - I{payload}: this is the decoded payload if charset is not None and
        payload is a unicode string
        - I{charset}: the charset that was used to decode I{payload} If charset is
        C{None} then something goes wrong: if I{payload} is unicode then
        invalid characters have been replaced and the used charset is I{default_charset}
        else, if I{payload} is still byte string then nothing has been done.


    """
    for chset in [ charset, default_charset, 'ascii', 'utf-8', 'utf-16', 'windows-1252', 'cp850' ]:
        if chset:
            try:
                return payload.decode(chset), chset
            except UnicodeError:
                pass

    if default_charset:
        return payload.decode(chset, 'replace'), None

    return payload, None

class PyzMessage(email.message.Message):
    """
    Inherit from email.message.Message. Combine L{get_mail_parts()},
    L{get_mail_addresses()} and L{decode_mail_header()} into a
    B{convenient} object to access mail contents and attributes.
    This class also B{sanitize} part filenames.

    @type mailparts: list of L{MailPart}
    @ivar mailparts: list of L{MailPart} objects composing the email, I{text_part}
    and I{html_part} are part of this list as are other attachements and embedded
    contents.
    @type text_part: L{MailPart} or None
    @ivar text_part: the L{MailPart} object that contains the I{text}
    version of the message, None if the mail has not I{text} content.
    @type html_part: L{MailPart} or None
    @ivar html_part: the L{MailPart} object that contains the I{HTML}
    version of the message, None if the mail has not I{HTML} content.

    @note: Sample:

    >>> raw='''Content-Type: text/plain; charset="us-ascii"
    ... MIME-Version: 1.0
    ... Content-Transfer-Encoding: 7bit
    ... Subject: The subject
    ... From: Me <me@foo.com>
    ... To: A <a@foo.com>, B <b@foo.com>
    ...
    ... The text.
    ... '''
    >>> msg=PyzMessage.factory(raw)
    >>> print 'Subject: %r' % (msg.get_subject(), )
    Subject: u'The subject'
    >>> print 'From: %r' % (msg.get_address('from'), )
    From: (u'Me', 'me@foo.com')
    >>> print 'To: %r' % (msg.get_addresses('to'), )
    To: [(u'A', 'a@foo.com'), (u'B', 'b@foo.com')]
    >>> print 'Cc: %r' % (msg.get_addresses('cc'), )
    Cc: []
    >>> for mailpart in msg.mailparts:
    ...   print '    %sfilename=%r sanitized_filename=%r type=%s charset=%s desc=%s size=%d' % ('*'if mailpart.is_body else ' ', mailpart.filename, mailpart.sanitized_filename, mailpart.type, mailpart.charset, mailpart.part.get('Content-Description'), 0 if mailpart.get_payload()==None else len(mailpart.get_payload()))
    ...   if mailpart.is_body=='text/plain':
    ...     payload, used_charset=decode_text(mailpart.get_payload(), mailpart.charset, None)
    ...     print '        >', payload.split('\\n')[0]
    ...
        *filename=None sanitized_filename='text.txt' type=text/plain charset=us-ascii desc=None size=10
            > The text.
    """

    @staticmethod
    def smart_parser(input):
        """
        Use the appropriate parser and return a email.message.Message object
        (this is not a L{PyzMessage} object)

        @type input: string, file, bytes, binary_file or  email.message.Message
        @param input: the source of the message
        @rtype: email.message.Message
        @returns: the message
        """
        if isinstance(input, email.message.Message):
            return input

        if sys.version_info<(3, 0):
            # python 2.x
            if isinstance(input, basestring):
                return email.message_from_string(input)
            elif hasattr(input, 'read') and hasattr(input, 'readline'):
                return email.message_from_file(input)
            else:
                raise ValueError, 'input must be a string, a file or a Message'
        else:
            # python 3.x
            if isinstance(input, str):
                return email.message_from_string(input)
            elif isinstance(input, bytes):
                # python >= 3.2 only
                return email.message_from_bytes(input)
            elif hasattr(input, 'read') and hasattr(input, 'readline'):
                if hasattr(input, 'encoding'):
                    # python >= 3.2 only
                    return email.message_from_file(input)
                else:
                    return email.message_from_binary_file(input)
            else:
                raise ValueError, 'input must be a string a bytes, a file or a Message'

    @staticmethod
    def factory(input):
        """
        Use the appropriate parser and return a L{PyzMessage} object
        see L{smart_parser}
        @type input: string, file, bytes, binary_file or  email.message.Message
        @param input: the source of the message
        @rtype: L{PyzMessage}
        @returns: the L{PyzMessage} message
        """
        return PyzMessage(PyzMessage.smart_parser(input))


    def __init__(self, message):
        """
        Initialize the object with data coming from I{message}.

        @type message: inherit email.message.Message
        @param message: The message
        """
        if not isinstance(message, email.message.Message):
            raise ValueError, "message must inherit from email.message.Message use PyzMessage.factory() instead"
        self.__dict__.update(message.__dict__)

        self.mailparts=get_mail_parts(self)
        self.text_part=None
        self.html_part=None

        filenames=[]
        for part in self.mailparts:
            ext=mimetypes.guess_extension(part.type)
            if not ext:
                 # default to .bin
                ext='.bin'
            elif ext=='.ksh':
                # guess_extension() is not very accurate, .txt is more
                # appropriate than .ksh
                ext='.txt'

            sanitized_filename=sanitize_filename(part.filename, part.type.split('/', 1)[0], ext)
            sanitized_filename=handle_filename_collision(sanitized_filename, filenames)
            filenames.append(sanitized_filename.lower())
            part.sanitized_filename=sanitized_filename

            if part.is_body=='text/plain':
                self.text_part=part

            if part.is_body=='text/html':
                self.html_part=part

    def get_addresses(self, name):
        """
        return the I{name} header value as an list of addresses tuple as
        returned by L{get_mail_addresses()}

        @type name: str
        @param name: the name of the header to read value from: 'to', 'cc' are
        valid I{name} here.
        @rtype: tuple
        @returns: a tuple of the form C{('Sender Name', 'sender.address@domain.com')}
        or C{('', '')} if no header match that I{name}.
        """
        return get_mail_addresses(self, name)

    def get_address(self, name):
        """
        return the I{name} header value as an address tuple as returned by
        L{get_mail_addresses()}

        @type name: str
        @param name: the name of the header to read value from: : C{'from'} can
        be used to return the sender address.
        @rtype: list of tuple
        @returns: a list of tuple of the form C{[('Recipient Name', 'recipient.address@domain.com'), ...]}
        or an empty list if no header match that I{name}.
        """
        value=get_mail_addresses(self, name)
        if value:
            return value[0]
        else:
            return ('', '')

    def get_subject(self, default=''):
        """
        return the RFC2047 decoded subject.

        @type default: any
        @param default: The value to return if the message has no I{Subject}
        @rtype: unicode
        @returns: the subject or C{default}
        """
        return self.get_decoded_header('subject', default)

    def get_decoded_header(self, name, default=''):
        """
        return decoded header I{name} using RFC2047. Always use this function
        to access header, because any header can contain invalid characters
        and this function sanitize the string and avoid unicode exception later
        in your program.
        EVEN for date, I already saw a "Center box bar horizontal" instead
        of a minus character.

        @type name: str
        @param name: the name of the header to read value from.
        @type default: any
        @param default: The value to return if the I{name} field don't exist
        in this message.
        @rtype: unicode
        @returns: the value of the header having that I{name} or C{default} if no
        header have that name.
        """
        value=self.get(name)
        if value==None:
            value=default
        else:
            value=decode_mail_header(value)
        return value

    def get_decoded_headers(self, name, default=''):
        """
        return decoded header I{name} using RFC2047. Always use this function
        to access header, because any header can contain invalid characters
        and this function sanitize the string and avoid unicode exception later
        in your program.
        EVEN for date, I already saw a "Center box bar horizontal" instead
        of a minus character.

        @type name: str
        @param name: the name of the header to read value from.
        @type default: any
        @param default: The value to return if the I{name} field don't exist
        in this message.
        @rtype: unicode
        @returns: the value of the header having that I{name} or C{default} if no
        header have that name.
        """
        value=self.get_all(name)
        if value==None:
            value=default
        else:
            value=[decode_mail_header(v) for v in value]
        return value

class PzMessage(PyzMessage):
    """
    Old name and interface for PyzMessage.
    B{Deprecated}
    """

    def __init__(self, input):
        """
        Initialize the object with data coming from I{input}.

        @type input: str or file or email.message.Message
        @param input: used as the raw content for the email, can be a string,
        a file object or an email.message.Message object.
        """
        PyzMessage.__init__(self, self.smart_parser(input))


def message_from_string(s, *args, **kws):
    """
    Parse a string into a L{PyzMessage} object model.
    @type s: str
    @param s: the input string
    @rtype: L{PyzMessage}
    @return: the L{PyzMessage} object
    """
    return PyzMessage(email.message_from_string(s, *args, **kws))

def message_from_file(fp, *args, **kws):
    """
    Read a file and parse its contents into a L{PyzMessage} object model.
    @type fp: text_file
    @param fp: the input file (must be open in text mode if Python >= 3.0)
    @rtype: L{PyzMessage}
    @return: the L{PyzMessage} object
    """
    return PyzMessage(email.message_from_file(fp, *args, **kws))

def message_from_bytes(s, *args, **kws):
    """
    Parse a bytes string into a L{PyzMessage} object model.
    B{(Python >= 3.2)}
    @type s: bytes
    @param s: the input bytes string
    @rtype: L{PyzMessage}
    @return: the L{PyzMessage} object
    """
    return PyzMessage(email.message_from_bytes(s, *args, **kws))

def message_from_binary_file(fp, *args, **kws):
    """
    Read a binary file and parse its contents into a L{PyzMessage} object model.
    B{(Python >= 3.2)}
    @type fp: binary_file
    @param fp: the input file, must be open in binary mode
    @rtype: L{PyzMessage}
    @return: the L{PyzMessage} object
    """
    return PyzMessage(email.message_from_binary_file(fp, *args, **kws))
]]>
		</Library>
		<Library Name="ProSuiteRemoteSchemePage">
<![CDATA["""
"""

import os

from md5 import md5
from SOAPpy.Errors import Error, HTTPError
from SOAPpy.Types import faultType
from socket import gethostbyname

import ProAdmin
import prosuite_constants as PSConst

from proadmin_remote_settings import RemoteSettings
from proadmin_remote_sync import RemoteSyncClient
from proadmin_sso import SSOClient
from prosuite_web import ProSuiteBasicPage, administrator_only, error_handler,\
                         authenticated, callback
from vdom_remote_api import VDOMService, VDOMServiceSingleThread


REMOTE_CON_FAILED_IMG = "5eea6bc1-f346-4c42-a1d4-844c39820bf3"
REMOTE_CON_ESTABLISH_IMG = "9720cab2-23dd-42d3-b648-15a4d1d3098b"


class ProAdminConnector(object):

    class ERR(object):
        OK, RESOLV, PING, VDOM_CON, CRED, PROADMIN_CON = range(6)

    """
    """
    def __init__(self, host, login, passwd, logger):
        self.host = host
        self.logger = logger
        self.login = login
        self.passwd = passwd

    def test_connection(self):
        """
        """
        self.host = self.host.replace("https://", "").replace("http://", "")

        try:
            self.ip = gethostbyname(self.host)
        except Exception as ex:
            self.logger.exception(u"Can't resolve host - %s", self.host)
            self.status = self.ERR.RESOLV
            return

        if os.system("ping -c 1 " + self.ip):
            self.logger.error(u"Can't ping host %s (%s)", self.host, self.ip)
            self.status = self.ERR.PING
            return

        try:
            self.service = VDOMService(
                self.host,
                self.login,
                md5(self.passwd).hexdigest(),
                PSConst.ProAdminID
            ).open_session()

        except Error as ex:
            self.logger.exception(
                u"Can't connect to VDOM at %s (%s)",
                self.host,
                self.ip
            )
            self.status = self.ERR.CRED if isinstance(ex, faultType) else \
                          self.ERR.VDOM_CON
            return

        try:
            self.proadmin_info = RemoteSyncClient(self.service).proadmin_version(True)

        except Exception as ex:
            self.logger.exception(
                u"Can't retrive data from %s at %s (%s)",
                PSConst.ProAdminName,
                self.host,
                self.ip
            )
            self.status = self.ERR.PROADMIN_CON
            return

        if not isinstance(self.proadmin_info, dict):
            self.proadmin_info = {
                'name': PSConst.ProAdminName,
                'version': self.proadmin_info,
            }

        self.status = self.ERR.OK if self.proadmin_info else self.ERR.PROADMIN_CON
        return


class ProSuiteRemoteSchemePage(ProSuiteBasicPage):

    @error_handler
    @authenticated
    @administrator_only
    def live(self, action="onload"):
        self._live(action)

    def onload(self, page_controller):
        """
        """
        self.check_test_sso_result()

        if self.get_argument("restart_conn", ""):
            self.show_info_growl(
                self.localization["remotescheme.reset_proadmin_conn.text"],
                self.localization["remotescheme.reset_proadmin_conn.title"]
            )

        if ProAdmin.scheme().is_remote():
            self.show_remote_scheme()

        else:
            self.show_local_scheme()

    @callback
    def test_connection_to_proadmin(self, page_controller, logs_out=None):
        """
        """
        host = self.get_shared_var("host", "")
        login = self.get_shared_var("login", "")
        passwd = self.get_shared_var("password", "")

        if not all((host, login, passwd)):
            self.show_error_growl(
                self.localization["remotescheme.not_all_params_filled.text"],
                self.localization["remotescheme.not_all_params_filled.title"]
            )
            return

        connector = ProAdminConnector(host, login, passwd, self.logger)
        connector.test_connection()
        self.show_test_connection_logs(connector,
            logs_out or self.vdom_objects["remotescheme.proadmin.test_out"]
        )

        if connector.status == connector.ERR.OK:
            self.show_info_growl(
                self.localization["remotescheme.proadmin_check.success.text"],
                self.localization["remotescheme.proadmin_check.success.title"]
            )

        else:
            self.show_error_growl(
                self.localization["remotescheme.proadmin_check.error.text"],
                self.localization["remotescheme.proadmin_check.error.title"]
            )

        return connector

    @callback
    def test_sso_to_proadmin(self, page_controller):
        """
        """

        host = ""
        if self.get_shared_var("sso_test_type", "") == "new" :
            host = self.get_shared_var("host", "")
            login = self.get_shared_var("login", "")
            passwd = self.get_shared_var("password", "")

            if not all((host, login, passwd)):
                self.show_error_growl(
                    self.localization["remotescheme.not_all_params_filled.text"],
                    self.localization["remotescheme.not_all_params_filled.title"]
                )
                return

        ssoclient = SSOClient(request, response)
        ssoclient.set_action_mode(self.page)
        url = ssoclient.test_sso(url=host, get_url=True)
        self.page.action('custom', ['window.open("{}")'.format(url)])
        self.set_shared_var("sso_test_type", "")

    @callback
    def apply_local_scheme(self, page_controller):
        """
        """
        if RemoteSettings.get_remote_setting():
            RemoteSettings.delete()

        ProAdmin.logoff()
        ProAdmin.unregister_default_scheme()
        ProAdmin.scheme()

        self.redirect(self.get_logout_url())

    @callback
    def apply_remote_scheme(self, page_controller):
        """
        """
        pa_connector = self.test_connection_to_proadmin(
            page_controller,
            self.vdom_objects["remotescheme.proadmin.test_out"]
        )

        if not pa_connector or pa_connector.status != pa_connector.ERR.OK:
            return

        try:
            RemoteSettings(
                pa_connector.login,
                pa_connector.passwd,
                pa_connector.host
            ).save()

            ProAdmin.logoff()
            ProAdmin.unregister_default_scheme()
            ProAdmin.scheme()

        except Exception as ex:
            self.logger.exception("Can't apply remote scheme")
            self.show_error_growl(
                self.localization["remotescheme.apply_remote_error.text"],
                self.localization["remotescheme.apply_remote_error.title"]
            )

        else:
            self.redirect(self.get_logout_url())

    @callback
    def restart_proadmin_connection(self, page_controller):
        """
        """
        try:
            ProAdmin.unregister_default_scheme()
            ProAdmin.scheme()

        except Exception as ex:
            self.logger.exception("Error during restart ProAdmin connection restart")
            self.show_error_growl(
                self.localization["remotescheme.reset_proadmin_conn_error.text"],
                self.localization["remotescheme.reset_proadmin_conn_error.title"]
            )

        else:
            self.redirect(self.current_page(), params={"restart_conn": "1"})



    def show_test_connection_logs(self, pa_connector, hpt):
        """
        """
        tmplt = u"""<div class="{}"><span>{}</span></div>"""
        results = self.format_connection_check_result(pa_connector)

        hpt.htmlcode = \
            hpt.htmlcode.format(
                self.localization["remotescheme.proadmin_check.title"],
                "".join([tmplt.format(*r) for r in results])
            )

        hpt.visible = "1"

    def check_test_sso_result(self):
        """
        """
        ssoclient = SSOClient(request, response)
        if ssoclient.test_sso(check=True):
            self.vdom_objects["remotescheme.dialog_sso_success"].show = "1"

    def format_connection_check_result(self, pa_connector):
        """
        """
        results = []

        if pa_connector.status == pa_connector.ERR.RESOLV:
            results.append((
                "failed",
                u"{} - {}".format(
                    self.localization["remotescheme.proadmin_check.resolv_erro"],
                    pa_connector.host
                )
            ))
            return results

        else:
            results.append((
                "success",
                u"{} - {} == {}".format(
                    self.localization["remotescheme.proadmin_check.host_resolved"],
                    pa_connector.host,
                    pa_connector.ip
                )
            ))

        if pa_connector.status == pa_connector.ERR.PING:
            results.append((
                "failed",
                u"{} - {}".format(
                    self.localization["remotescheme.proadmin_check.ping_erro"],
                    pa_connector.ip
                )
            ))
            return results

        else:
            results.append((
                "success",
                u"{} - {}".format(
                    self.localization["remotescheme.proadmin_check.ping_done"],
                    pa_connector.ip
                )
            ))

        if pa_connector.status == pa_connector.ERR.VDOM_CON:
            results.append((
                "failed",
                self.localization["remotescheme.proadmin_check.vdom_error"]
            ))
            return results

        else:
            results.append((
                "success",
                self.localization["remotescheme.proadmin_check.vdom_done"]
            ))

        if pa_connector.status == pa_connector.ERR.CRED:
            results.append((
                "failed",
                self.localization["remotescheme.proadmin_check.login_error"]
            ))
            return results

        else:
            results.append((
                "success",
                self.localization["remotescheme.proadmin_check.login_done"]
            ))

        if pa_connector.status == pa_connector.ERR.PROADMIN_CON:
            results.append((
                "failed",
                self.localization["remotescheme.proadmin_check.proadmin_error"]
            ))
            return results

        results.append((
                "success",
                u"{} - {} ({})".format(
                    self.localization["remotescheme.proadmin_check.proadmin_done"],
                    pa_connector.proadmin_info["name"],
                    pa_connector.proadmin_info["version"],
                )
            ))

        return results

    def show_local_scheme(self):
        """
        """
        self.vdom_objects["localscheme_state.container"].visible = "1"
        self.vdom_objects["selectscheme.standalone.button"].visible = "0"

    def show_remote_scheme(self):
        """
        """
        self.vdom_objects["selectscheme.standalone.button"].visible = "1"
        self.vdom_objects["remotescheme_state.container"]. visible = "1"
        self.vdom_objects["localscheme_state.container"].visible = "0"

        remote = RemoteSettings.get_remote_setting()

        connector = ProAdminConnector(
            remote.server,
            remote.login,
            remote.password,
            self.logger
        )
        connector.test_connection()

        self.show_test_connection_logs(connector,
            self.vdom_objects["remotescheme_state.proadmin.test_out"]
        )

        host_name = u"'{}' {} '{}'".format(
            remote.login,
            self.localization["remotescheme.remotescheme.host_at"],
            remote.server
        )

        self.vdom_objects["remotescheme_state.host_name"].htmlcode = \
            u"""<span style='font-size:11pt; font-weight:bold;' title='{}'>{}</span>""".format(
                    host_name, host_name[:30]
            )

        self.vdom_objects["remotescheme_state.connection_img"].value = \
            REMOTE_CON_ESTABLISH_IMG if connector.status == connector.ERR.OK else \
            REMOTE_CON_FAILED_IMG

        self.vdom_objects["remotescheme_state.status.last_sync"].value = u"{} : {}".format(
            self.localization["remotescheme.remotescheme.last_sync"],
            ProAdmin.scheme().sync_datetime.strftime(self.localization["global.datetime_format"]) if ProAdmin.scheme().sync_datetime else "?"
        )
        self.vdom_objects["remotescheme_state.status.sync_state"].value = u"{} : {}".format(
            self.localization["remotescheme.remotescheme.sync_state"],
            self.localization["remotescheme.remotescheme.sync_state.ok"] if ProAdmin.scheme().is_sync_active() else \
            self.localization["remotescheme.remotescheme.sync_state.fail"]
        )
        self.vdom_objects["remotescheme_state.status.objects"].value = u"{} : {}".format(
            self.localization["remotescheme.remotescheme.objects"],
            str(len( ProAdmin.application().child_objects(recursive=True)))
        )
        self.vdom_objects["remotescheme_state.status.users"].value = u"{} : {}".format(
            self.localization["remotescheme.remotescheme.users"],
            str(len(ProAdmin.application().get_users()))
        )

    def get_page_title(self):
        return self.app_settings.localization["page_title"].format(
            app_name=self.app_settings.info["name"],
            page_name=self.localization["remotescheme.title"]
        )

    def get_localization_data(self):
        return {
            self.vdom_objects["currentscheme.title"]: "remotescheme.currentscheme.title",
            self.vdom_objects["selectscheme.title"]: "remotescheme.selectscheme.title",

            (self.vdom_objects["selectscheme.standalone.radio"],
             self.vdom_objects["localscheme_state.title"]) : "remotescheme.selectscheme.standalone.title",

            (self.vdom_objects["selectscheme.proadmin.title"],
             self.vdom_objects["remotescheme_state.title"]): "remotescheme.selectscheme.proadmin.title",

            self.vdom_objects["selectscheme.standalone.button"]: "remotescheme.selectscheme.standalone.button",
            self.vdom_objects["selectscheme.proadmin.host"]: "remotescheme.selectscheme.proadmin.host",
            self.vdom_objects["selectscheme.proadmin.login"]: "remotescheme.selectscheme.proadmin.login",
            self.vdom_objects["selectscheme.proadmin.password"]: "remotescheme.selectscheme.proadmin.password",
            self.vdom_objects["selectscheme.proadmin.testconnection"]: "remotescheme.selectscheme.proadmin.testconnection",
            self.vdom_objects["selectscheme.proadmin.testsso"]: "remotescheme.selectscheme.proadmin.testsso",
            self.vdom_objects["selectscheme.proadmin.reset"]: "remotescheme.selectscheme.proadmin.reset",
            self.vdom_objects["selectscheme.proadmin.apply"]: "remotescheme.selectscheme.proadmin.apply",
            self.vdom_objects["remotescheme.dialog_sso_success.text"]: "remotescheme.sso_dialog.success",
            self.vdom_objects["remotescheme.dialog_sso_success.close"]: "remotescheme.sso_dialog.close",
            self.vdom_objects["remotescheme.dialog_test_sso.text"]: "remotescheme.sso_dialog.warning",
            self.vdom_objects["remotescheme.dialog_test_sso.apply"]: "remotescheme.sso_dialog.apply",
            self.vdom_objects["remotescheme.dialog_test_sso.cancel"]: "remotescheme.sso_dialog.cancel",
            self.vdom_objects["remotescheme_state.restart"]: "remotescheme_state.restart",
            self.vdom_objects["remotescheme_state.testsso"]: "remotescheme_state.testsso",
            self.vdom_objects["remotescheme_state.refresh"]: "remotescheme_state.refresh",
        }
]]>
		</Library>
		<Library Name="proadmin_local_ldap_application_scheme">
<![CDATA[from proadmin_base_scheme import BaseProAdminScheme
from proadmin_ldapconfig import LDAPConfig

class LocalLDAPApplicationScheme( BaseProAdminScheme ):
	""" ProAdmin scheme working with 
	"""
	def __init__( self, guid=None, connection=None ):
		BaseProAdminScheme.__init__( self, guid, connection, connection )
		
		
		self.type 	= 'local'		
		self.config = LDAPConfig.create_config( config = 'local' )
		
		self.set_option( 'base_dn', "dc=vdombox,dc=local" )

		self.set_option( 'root_user', 'root' )
		self.set_option( 'admin_group', 'Administrators' )



	def create_root_user( self, password='root' ):
		"""	 create super user for this scheme
		"""
		# get root user
		email = self.get_option( 'root_user' )
		users = self.get_users( email )
		root = users[0] if users else None
		
		if not root:
			root = self.create_user( email )
			root.first_name = email
			root.password = password
			root.save()
		
		# try to get admins group
		name = self.get_option( 'admin_group' )
		admins = self.get_groups( name )
		admins = admins[0] if admins else None
		
		if not admins:
			return root
			
		# check that root in admins group
		if root not in admins.get_users():
			admins.add_user( root )
			admins.save()
		
		return root



	def create_admins_group( self ):
		""" group of application administrators
		"""
		# try to get admins group
		name = self.get_option( 'admin_group' )
		admins = self.get_groups( name )
		admins = admins[0] if admins else None
		
		# creat group if need
		if not admins:
			admins = self.create_group( name )
			admins.save()
		
		# add root user to group
		email = self.get_option( 'root_user' )
		users = self.get_users( email )
		root = users[0] if users else None
		
		if not root: return admins
		
		if root not in admins.get_users():
			admins.add_user( root )
			admins.save()
				
		return admins
		


	def create_user( self, email='' ):
		users = self.get_users( email ) if email else []
		if users: return users[0]
		
		from proadmin_subject import LDAPUser
		return LDAPUser.create( scheme = self, email = email )

	def create_group( self, name='' ):
		groups = self.get_groups( name ) if name else []
		if groups: return groups[0]
		
		from proadmin_subject import LDAPGroup
		return LDAPGroup.create( scheme = self, name = name )

	def get_users( self, email=None, guid=None ):
		from proadmin_subject import LDAPUser		
		return LDAPUser.get_users( self, email=email, guid=guid )

	def get_groups( self, name=None, user=None, guid=None ):
		from proadmin_subject import LDAPGroup
		groups = user.get_groups() if user else LDAPGroup.get_groups( scheme = self, guid = guid, name = name )
		return groups



	def check_password( self, user, password ):
		return user.check_local_password( password )


]]>
		</Library>
		<Library Name="VEE_tools">
<![CDATA[#Tools for compilation and execution
from vscript.errors import generic, python
from vscript.engine import vcompile, vexecute
import sys, time

VScriptExecutionError 	= VScriptComlipationError 	= generic
PythonExecutionError 	= PythonCompilationError  	= python


def safe_execute( routine, timeout, *arguments, **keywords ):
	if sys.gettrace(): raise PythonExecutionError("Unable to set trace")
	get_time, deadline = time.time, time.time() + timeout

	def trace( frame, event, arguments ):
		if get_time() > deadline:
			raise VScriptExecutionError("Execution timeout")
		return trace

	try:
		sys.settrace(trace)
		return routine(*arguments, **keywords)
	finally:
		sys.settrace( None )



class StopExecutionError( python ):
	pass


def compile( source_code, environment = None, silent = False ):
	try:
		return vcompile( source_code, anyway = silent , environment = environment )
	except VScriptComlipationError:
		raise
	except PythonCompilationError:
		raise


TIME_OUT = 300 #5 minutes
def execute( byte_code, source_code, environment = None, safe = True ):
	try:
		if not safe:
			vexecute( byte_code, source_code, environment = environment )
		else:
			safe_execute( vexecute, TIME_OUT, byte_code, source_code, environment = environment )
	except VScriptExecutionError:
		raise
	except PythonExecutionError:
		raise





]]>
		</Library>
		<Library Name="VEE_std_lib">
<![CDATA[#16.01.2013
#clean and improve library

#23.01.2013
#modify v_timer

#30.01.2013
#move code to other library

from datetime import datetime
from class_db import Database
from cgi import escape
from hashlib import md5
from VEE_utils import   AutoCast, CachedProperty, is_dict,\
                        v_PropertySimple, v_PropertyComplex, \
                        v_PropertyReadOnly, encodeUTF8, decodeUTF8, \
                        AutoCastCachedProperty

from vscript.subtypes import  binary, generic
from vscript import errors, error
import base64, cStringIO, re



property_pattern = re.compile( "^(v_*)" )



class v_BaseException( errors.generic ):

    def __init__( self, message ):
        errors.generic.__init__( self, message =  message )

class v_BadObjectType( v_BaseException ):
    pass



class base_object( generic ):

    def __init__( self, object = None ):
        generic.__init__( self )
        self.object  = object


    @AutoCast
    def __getattr__( self, key ):
        return getattr( self.object, property_pattern.sub( "", key ) )


    def __nonzero__( self ):
        return True



@AutoCast
def v_generateguid( ):
    from utils.uuid import uuid4
    return str( uuid4() )



class v_xmldialog( object ):

    def __init__( self ):
        self.xml            = None
        self.arguments      = {}
        self.macros_id      = None
        self.width          = "400"
        self.height         = "300"
        self.container_guid = ""
        self.visible        = False
        self.actions        = []


    @AutoCast
    @v_PropertySimple
    def v_visible( self, value, retVal ):
        if retVal: return self.visible
        else: self.visible = value


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_macrosid( self ):
        return self.macros_id


    @AutoCast
    def v_setsize( self, width, height ):
        self.width = width
        self.height = height


    @AutoCast
    def v_show( self, xml_data ):
        self.xml = xml_data


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_containerguid( self ):
        return self.container_guid


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_arguments( self ):
        return self.arguments

    @AutoCast
    def v_executecallback(self, callback, data):
        self.actions.append([callback, data])


    #obsolete methods names
    v_get_macros_id = v_macrosid
    v_set_size = v_setsize
    v_show_xml_form = v_show
    v_obj_guid = v_containerguid
    v_get_answer = v_arguments


class v_dynamicvdom( object ):

    def __init__( self, dynobj ):
        self.vdomdynobj     = dynobj

    @AutoCast
    def v_render(self, vdomxml, vdomactions="", absolute=False):
        self.vdomdynobj.vdomxml = vdomxml
        self.vdomdynobj.vdomactions = vdomactions
        return self.vdomdynobj.render(None, raw_content=absolute)

    @AutoCast
    @v_PropertySimple
    def v_top( self, value, retVal ):
        if retVal: return self.vdomdynobj.top
        else: self.vdomdynobj.top = str(value)

    @AutoCast
    @v_PropertySimple
    def v_left( self, value, retVal ):
        if retVal: return self.vdomdynobj.left
        else: self.vdomdynobj.left = str(value)

    @AutoCast
    @v_PropertySimple
    def v_height( self, value, retVal ):
        if retVal: return self.vdomdynobj.height
        else: self.vdomdynobj.height = str(value)

    @AutoCast
    @v_PropertySimple
    def v_width( self, value, retVal ):
        if retVal: return self.vdomdynobj.width
        else: self.vdomdynobj.width = str(value)


class v_growl( generic ):

    def __init__( self ):
        self.message = ""
        self.title   = ""


    @AutoCast
    def __call__( self, title, message ):
        self.message = message
        self.title = title



class v_dbdictionary( generic ):

    __DB_NAME = "kv_macro_storage"


    def __init__( self, namespace ):
        generic.__init__( self )
        self.__namespace = namespace


    def __call__( self, *arguments, **keywords ):
        if "let" in keywords:
            return self.let(*arguments, **keywords)
        elif "set" in keywords:
            raise errors.type_mismatch
        else:
            return self.get(*arguments, **keywords)


    @AutoCast
    def get( self, key ):
        row = Database.macrosdb().fetch_one(
                "SELECT value FROM `{0}` WHERE key=? AND namespace=?".format( v_dbdictionary.__DB_NAME ),
                (  key , self.__namespace ) )
        return row[0] if row else None


    @AutoCast
    def let( self, key = None, *arguments, **keywords ):
        if not key: raise errors.wrong_number_of_arguments
        Database.macrosdb().commit(
                "REPLACE INTO `{0}` (key, value, namespace) VALUES (?, ?, ?)".format( v_dbdictionary.__DB_NAME ),
                (  key , keywords[ "let" ], self.__namespace ) )


    @AutoCast
    def v_remove( self, key ):
        self.erase( key )


    @AutoCast
    def erase( self, key ):
        Database.macrosdb().commit(
                "DELETE FROM `{0}` WHERE key=? AND namespace=?".format( v_dbdictionary.__DB_NAME ),
                (  key, self.__namespace ) )


    @AutoCast
    def __contains__( self, key ):
        return bool( Database.macrosdb().fetch_one(
                "SELECT value FROM `{0}` WHERE key=? AND namespace=?".format( v_dbdictionary.__DB_NAME ),
                (  key , self.__namespace ) ) )


    @AutoCast
    def v_keys( self ):
        return  [ row[0] for row in Database.macrosdb().fetch_all(
                "SELECT key FROM `{0}` WHERE namespace=?".format( v_dbdictionary.__DB_NAME ),
                (  self.__namespace, ) ) ]


    @AutoCast
    def v_items( self ):
        return  [ (row[0], row[1] ) for row in Database.macrosdb().fetch_all(
                "SELECT key, value FROM `{0}` WHERE namespace=?".format( v_dbdictionary.__DB_NAME ),
                (  self.__namespace, ) ) ]


    def __iter__( self ):
        for key in self.v_keys():
                yield key




class v_session_dictionary( generic ):

    def __init__( self, namespace ):
        generic.__init__( self )
        self.session_db = session[ namespace ] = session.get( namespace, {} )


    def __call__( self, *arguments, **keywords ):
        if "let" in keywords:
            return self.let( *arguments, **keywords )
        elif "set" in keywords:
            return self.set( *arguments, **keywords )
        else:
            return self.get( *arguments, **keywords )


    @AutoCast
    def get( self, key, secure = True, *arguments, **keywords ):
        db = self.session_db if secure else session
        return db.get( key, None )


    def let( self, key = None, secure = True, *arguments, **keywords ):
        db = self.session_db if secure else session
        db[ key.as_string ] = keywords[ "let" ]


    def set( self, key = None, secure = True, *arguments, **keywords ):
        db = self.session_db if secure else session
        db[ key.as_string ] = keywords[ "set" ]


    @AutoCast
    def v_remove( self, *args, **kwargs  ):
        self.erase( *args, **kwargs )


    @AutoCast
    def erase( self, key, secure = True ):
        db = self.session_db if secure else session
        if key in db: del db[ key ]


    @AutoCast
    def __contains__( self, key ):
        return key in self.session_db


    @AutoCast
    def v_keys( self, secure = True ):
        db = self.session_db if secure else session
        return db.keys()


    @AutoCast
    def v_items( self, secure = True ):
        return self.session_db.items()


    def __iter__( self ):
        for key in self.v_keys():
                yield key



class v_buffer( generic ):

    def __init__( self, inst = None ):
        self._handler = inst


    @CachedProperty
    def handler( self ):
        return self._handler if  self._handler else self.open()


    def open( self ):
        return cStringIO.StringIO()

    @classmethod
    def v_create( self ):
        #old implementation. Use 'set b = new buffer'
        return self()


    @AutoCast
    def v_write( self, line ):
        self.handler.write( encodeUTF8( line ) )

    @AutoCast
    def v_writelines( self, lines ):
        self.handler.writelines( map( encodeUTF8, lines ) )


    @AutoCast
    def v_read( self, size = -1 ):
        return decodeUTF8( self.handler.read( size ) )


    @AutoCast
    def v_readline( self, size = -1 ):
        return decodeUTF8( self.handler.readline( size ) )


    @AutoCast
    def v_readlines( self, size = -1 ):
        return map( decodeUTF8, self.handler.readlines( size ) )


    @AutoCast
    def v_seek( self, offset, whence = 0 ):
        self.handler.seek( offset, whence )


    @AutoCast
    def v_tell( self ):
        return self.handler.tell()


    @AutoCast
    def v_truncate( self, size = None ):
        self.handler.truncate( size )


    def get_value( self ):
        self.handler.seek( 0 )
        data = decodeUTF8( self.handler.read() )
        self.handler.seek( 0 )
        return data


    @AutoCast
    def v_getvalue( self ):
        return self.get_value()


    def v_getbinary( self ):
        return binary( self.get_value() )


    @AutoCast
    def v_frombinary( self, data ):
        self.handler.write( data )


    def v_close( self ):
        self.handler.close()


    @AutoCast
    def v_insertbom( self, codec_name = "utf8" ):
        import codecs
        codec = codecs.BOM_UTF8
        current = self.handler.tell()
        self.handler.seek(0)
        self.handler.write(codec)
        self.handler.seek( current + len( codec ) )



date_format = "%d.%m.%Y %H:%M:%S"
def date_from_vdate( value ):
    from vscript.subtypes.date import decode_date
    return datetime( *decode_date( value ) )



def date_to_vdate( value ):
    from vscript.subtypes.date import encode_date, date
    return date( encode_date( *list( value.timetuple() )[:6] ) )



@AutoCast
def v_formatdate( template, date ):
    return date.strftime( template )



@AutoCast
def v_datefromstring( date_string, template = None):
    if not template: template = date_format
    return datetime.strptime( date_string, template )



@AutoCast
def v_base64encode( line ):
    return base64.b64encode( line.encode("utf8") )



@AutoCast
def v_base64decode( line ):
    return base64.b64decode( line ).decode("utf8")



@AutoCast
def v_md5( line ):
    return md5( line ).hexdigest()



@AutoCast
def v_formatstring( template, *args ):
    if len( args ) == 0: return template
    elif len( args ) == 1 and is_dict( args[ 0 ] ):
        return template.format( **args[ 0 ] )
    else: return template.format( *args )



class v_event( base_object ):

    @CachedProperty
    def event( self ):
        return self.object



class v_customevent( v_event ):

    def __init__( self ):
        from VEE_events import VEE_CustomEvent
        v_event.__init__( self, VEE_CustomEvent() )


    @AutoCast
    @v_PropertySimple
    def v_name( self, value, retVal ):
        if retVal:
            return self.event.name
        else:
            self.event.name = value


    @AutoCast
    @v_PropertySimple
    def v_data( self, value, retVal ):
        if retVal:
            return self.event.data
        else:
            self.event.data = value



@AutoCast
def v_raiseevent( event_obj, disp ):

    if not isinstance( event_obj, v_customevent ):
        raise v_BadObjectType( "Event must be CustomEvent or APIEvent type, not %s" % event_obj.__class__.__name__ )

    if event_obj.event.name:
        event_obj.event.plugin_guid = disp.namespace
        event_obj.event.activate()
    else:
        raise v_BadObjectType( "Set event name" )



class v_timer( base_object ):

    @CachedProperty
    def timer( self ):
        return self.object


    @AutoCast
    @v_PropertySimple
    def v_delay( self, value, retVal ):
        if retVal:
            return ":".join( map( str, self.timer.delay ) )
        else:
            self.timer.delay = map( int, value.split( ":" ) )


    @AutoCast
    @v_PropertySimple
    def v_isactive( self, value, retVal ):
        if retVal:
            return self.timer.active
        else:
            self.timer.active = value


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_lastrun( self ):
        return self.timer.last_run


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_name( self ):
        #timer name is GUID:name
        return self.timer.name.split( ":", 1 )[ 1 ]


    #obsolete methods names
    v_is_active = v_isactive
    v_last_run  = v_lastrun



class v_TimerDoesntExists( v_BaseException ):
    pass



class v_engine( object ):

    @staticmethod
    @AutoCast
    def v_activatetimer( timer_name, disp ):
        try:
            disp.activate_timer( timer_name )
        except:
            raise v_TimerDoesntExists( "Timer doesn't exists" )


    @staticmethod
    @AutoCast
    def v_deactivatetimer( timer_name, disp ):
        try:
            disp.deactivate_timer( timer_name )
        except:
            raise v_TimerDoesntExists( "Timer doesn't exists" )


    @staticmethod
    @AutoCast
    def v_gettimer( timer_name, disp ):
        t = disp.get_timer_by_name( timer_name )
        if not t: raise v_TimerDoesntExists( "Timer doesn't exists" )
        return v_timer( t )



class v_currentpage( generic ):

    def __init__( self ):
        generic.__init__( self )
        self.page_name = ""
        self.redirect_url = ""
        self.namespace = ""


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_host( self ):
        return "{0}://{1}".format(
                    "https" if request.environment.get( 'SERVER_PORT', '80' ) == '443' else request.protocol.name.lower(),
                    request.server.host )


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_lang( self ):
        return session.get( "lang" )


    @AutoCastCachedProperty
    @v_PropertyReadOnly
    def v_name( self ):
        return self.page_name


    @AutoCast
    def v_redirect( self, url ):
        self.redirect_url = url


    def v_refresh( self ):
        self.v_redirect( "/" + self.page_name )


    def __call__( self, *arguments, **keywords ):
        if "let" in keywords:
            return self.let(*arguments, **keywords)
        elif "set" in keywords:
            raise errors.type_mismatch
        else:
            return self.get(*arguments, **keywords)


    def _format_key( self, key ):
        return u"{0}_{1}".format( self.namespace, key )

    @AutoCast
    def get( self, key, secure = True, *arguments, **keywords ):
        if not key: raise errors.wrong_number_of_arguments
        return request.shared_variables[ self._format_key( key ) if secure else key ]


    @AutoCast
    def let( self, key = None, secure = True, *arguments, **keywords ):
        if not key: raise errors.wrong_number_of_arguments
        response.shared_variables[ self._format_key( key ) if secure else key ] = keywords[ "let" ]


    @AutoCast
    def erase( self, key, secure = True ):
        if not key: raise errors.wrong_number_of_arguments
        response.shared_variables[ self._format_key( key ) if secure else key ] = None


    @AutoCast
    def __contains__( self, key ):
        if not key: raise errors.wrong_number_of_arguments
        return self._format_key( key ) in request.shared_variables.keys()




class v_plugin( base_object ):

    def __init__( self, guid ):
        base_object.__init__( self, self )
        #self.name = ""
        self.guid = guid


class v_macros( base_object ):

    def __init__( self, guid, name ):
        base_object.__init__( self, self )
        self.macro_name = name
        self.guid = guid

    @AutoCast
    def v_name( self ):
        return self.macro_name

    @AutoCast
    def v_guid( self ):
        return self.guid


def v_exitscript():
    from VEE_tools import StopExecutionError
    raise StopExecutionError()


@AutoCast
def v_escapestring( data, quote = False ):
    return escape( data, quote )


environment = (
    (   "v_generateguid"            , v_generateguid    ),
    (   "v_generate_guid"           , v_generateguid    ),
    (   "v_buffer"                  , v_buffer          ),
    (   "v_base64encode"            , v_base64encode    ),
    (   "v_base64decode"            , v_base64decode    ),
    (   "v_md5"                     , v_md5             ),
    (   "v_formatstring"            , v_formatstring    ),
    (   "v_datefromstring"          , v_datefromstring  ),
    (   "v_formatdate"              , v_formatdate      ),
    (   "v_exitscript"              , v_exitscript      ),
    (   "v_escapestring"            , v_escapestring    ),
    #Exceptions
    (   "v_baseexception"               , error( v_BaseException                )   ),
    (   "v_badobjecttype"               , error( v_BadObjectType                )   ),
    (   "v_timerdoesntexists"           , error( v_TimerDoesntExists            )   ),
)
]]>
		</Library>
		<Library Name="ProSuitePluginsPage">
<![CDATA["""
"""

import json
import urllib

import ProAdmin

from prosuite_plugins import Plugin
from prosuite_web import ProSuiteBasicPage, administrator_only, error_handler,\
                         authenticated, callback
from prosuite_utils import CachedProperty


class PluginsWidget(object):

    def __init__(self, delegate):
        self.delegate = delegate

    @CachedProperty
    def plugins(self):
        return Plugin.get_all(sorted=True)

    def format_plugin_date(self, datetime):
        if datetime:
            return datetime.strftime("%m/%d/%Y %H:%M:%S")

        return "n/a"

    def get_plugin_info(self, plugin):
        return (u"""<h1><span title="{name}" class="cut-out-text">{name}</span></h1>"""
                """<h2><span title="{author}" class="cut-out-text">by {author}</span></h2>"""
                """<p class="clearfix"></p>"""
                """<p class="description cut-out-text">{desc}</p><p>Version - {version}"""
                """<br>created - {ctime}, modified - {mtime}</p>""").format(
                    name=plugin.name,
                    author=plugin.author,
                    desc=plugin.description,
                    version=plugin.version if plugin.version else "n/a",
                    ctime=self.format_plugin_date(plugin.creation_date),
                    mtime=self.format_plugin_date(plugin.modification_date),
                )

    def render(self):
        result = [{
            "id": plugin.guid,
            "picture" : "<img src='/97300803-bb07-459c-85a9-de973dda8110.res' />",
            "info" : self.get_plugin_info(plugin),
            "update" : "<a href=''><img src='/82a97fba-18cb-4097-a553-92798a287543.res'/>Update</a>",
            "export" : "<a href=''><img src='/72541a0c-bf3d-4471-9b83-9a0ac54be1cf.res'/>Export</a>",
            "open" : "<a href=''><img src='/cd7a9373-1f59-4ea0-b117-2039ae746080.res'/>Open</a>",
            "delete" : "<a href=''>Uninstall</a>",
            "md5hash" : "<a href=''>Get MD5</a>",
            "config" : "<a href=''>Config</a>"
        } for plugin in self.plugins]

        self.delegate.vdom_objects["plugins.datatable"].data = json.dumps(result)



class ProSuitePluginsPage(ProSuiteBasicPage):

    @error_handler
    @authenticated
    @administrator_only
    def live(self, action="onload"):
        self._live(action)

    def onload(self, page_controller):
        """
        """
        self.plugins.render()

    def get_page_title(self):
        return self.app_settings.localization["page_title"].format(
            app_name=self.app_settings.info["name"],
            page_name=self.localization["plugins.title"]
        )

    def get_localization_data(self):
        return {}


    @CachedProperty
    def plugins(self):
        return PluginsWidget(self)

    def show_delete_plugin_dialog(self, plugin):
        self.set_shared_var("plugin.guid", plugin.guid)
        self.vdom_objects["dialog.delete"].action("show", [""])

    @callback
    def submit_plugin_dialog(self, page_controller):

        name = self.get_argument("pluginname", "")
        desc = self.get_argument("description", "")
        author = self.get_argument("author", "")
        version = self.get_argument("version", "")

        if not (name and desc and author and version):
            self.show_error_growl(
                "Fill all fields",
                "Error"
            )
            return

        plugin = Plugin(name)
        plugin.version = version
        plugin.description = desc
        plugin.author = author
        plugin.save()

        self.show_info_growl(
            "Plugin created",
            "Success"
        )
        self.vdom_objects["dialog.plugin"].action("hide", [""])
        self.plugins.render()

    @callback
    def plugins_table_cell_click(self, page_controller):

        field = self.get_argument("headerData", "")
        plugin = self.get_argument("keyField", "")

        if plugin:
            plugin = Plugin.get_by_guid(plugin)

        if not (field and plugin):
            self.show_error_growl(
                "Plugin not exists",
                "Error"
            )
            return

        if field == "delete":
            self.show_delete_plugin_dialog(plugin)

        elif field == "update":
            pass

        elif field == "export":
            pass

        elif field == "md5hash":
            pass

        elif field == "open":
            link = "{}?{}".format(
                self.app_settings.pages["plugin_ide"],
                urllib.urlencode({"guid": plugin.guid})
            )
            self.page.action("goTo", [link])

        elif field == "picture":
            pass

        elif field == "config":
            pass

    @callback
    def submit_plugin_uninstall(self, page_controller):
        plugin = self.get_shared_var("plugin.guid", "")

        if plugin:
            plugin = Plugin.get_by_guid(plugin)

        if not plugin:
            self.show_info_growl(
                "Plugin not exists",
                "Error"
            )
            return

        plugin.delete()

        self.vdom_objects["dialog.delete"].action("hide", [""])
        self.plugins.render()

        self.show_info_growl(
            "Plugin was uninstalled",
            "Success"
        )
]]>
		</Library>
		<Library Name="promail_tasks">
<![CDATA["""
"""

from datetime import datetime, timedelta

from ext_tasks import DBTaskRunner

from prosuite_logging import app_logger
from promail_database import database as ProMailDatabase

from prosuite_tasks import (
    ProSuiteTask,
    ProSuiteTasks,
    ProSuiteTaskManager
)

from prosuite_threading import (
    ProSuiteDaemon,
    ProSuiteBaseThread,
    ProSuiteThreadPool
)


logger = app_logger.getChild("Tasks").getChild("ProMail")

daemon = None


class ProMailTask(ProSuiteTask):

    class PRIORITY(object):
        UI = 10
        EAC = 20
        OTHER = 0

    class Meta:
        database = ProMailDatabase
        db_table = 'background_task'


# create model
ProMailDatabase.connect()
ProMailDatabase.create_tables([ProMailTask], safe=True)
ProMailDatabase.close()


class ProMailTaskManager(ProSuiteTaskManager):

    def find_available_ui_tasks(self):
        return super(ProMailTaskManager, self).find_available().where(self.task_cls.priority == ProMailTask.PRIORITY.UI)

    def find_available_eac_tasks(self):
        return super(ProMailTaskManager, self).find_available().where(self.task_cls.priority == ProMailTask.PRIORITY.EAC)

    def find_available_other_tasks(self):
        return super(ProMailTaskManager, self).find_available().where(self.task_cls.priority == ProMailTask.PRIORITY.OTHER)


class ProMailDBTaskRunner(DBTaskRunner):

    def _get_task_to_run(self, tasks):
        for task in tasks:
            # try to lock task
            locked_task = task.lock(self.worker_name)
            if locked_task:
                return locked_task

        return None

    def get_ui_task_to_run(self):
        return self._get_task_to_run(self.task_cls.manager.find_available_ui_tasks()[:5])

    def get_eac_task_to_run(self):
        return self._get_task_to_run(self.task_cls.manager.find_available_eac_tasks()[:5])

    def get_other_task_to_run(self):
        return self._get_task_to_run(self.task_cls.manager.find_available_other_tasks()[:5])


class ProMailTasks(ProSuiteTasks):

    def _start_daemon(self):
        """
        Start daemon thread
        """
        daemon = ProMailTasksDaemon()
        daemon.setup_logger(None, logger=logger)
        daemon.kill_existing_instance()
        daemon.setup_worker_pools()
        daemon.start()

    def background_ui(self, *args, **kwargs):
        kwargs['priority'] = ProMailTask.PRIORITY.UI
        return self.background(*args, **kwargs)

    def background_eac(self, *args, **kwargs):
        kwargs['priority'] = ProMailTask.PRIORITY.EAC
        return self.background(*args, **kwargs)

    def background_other(self, *args, **kwargs):
        kwargs['priority'] = ProMailTask.PRIORITY.OTHER
        return self.background(*args, **kwargs)

    def get_ui_task_to_run(self):
        return self._runner.get_ui_task_to_run()

    def get_eac_task_to_run(self):
        return self._runner.get_eac_task_to_run()

    def get_other_task_to_run(self):
        return self._runner.get_other_task_to_run()


class ProMailTaskWorker(ProSuiteBaseThread):

    def __init__(self, task, *args, **kwargs):
        super(ProMailTaskWorker, self).__init__(*args, **kwargs)
        self.task = task

    def main(self):
        tasks.execute_task(self.task)


class ProMailTasksDaemon(ProSuiteDaemon):

    DEFAULT_TIMEOUT = 2.0
    DEFAULT_NAME = "Daemons.ProMailTaskDaemon"

    def setup_worker_pools(self):
        self.ui_pool = ProSuiteThreadPool("UI", size=10, pm_name="Worker", pm_cls=ProMailTaskWorker)
        self.eac_pool = ProSuiteThreadPool("EAC", size=10, pm_name="Worker", pm_cls=ProMailTaskWorker)
        self.other_pool = ProSuiteThreadPool("OTHER", size=10, pm_name="Worker", pm_cls=ProMailTaskWorker)

        self.ui_pool.setup_logger(self.logger)
        self.eac_pool.setup_logger(self.logger)
        self.other_pool.setup_logger(self.logger)

    def execute_tasks(self, tasks_get_f, pool):
        count = 0
        while True:

            #pool.logger.debug(u"Pool size %d", len(pool._pool))
            #for w in pool._pool:
                #pool.logger.debug(u"Type %s", str(type(w)))
                #pool.logger.debug(u"Task type %s", str(type(w.task)))
                #pool.logger.debug(u"Task name %s", w.task.name)
                #break

            pool.check_members()
            if pool.is_fully_loaded():
                pool.logger.debug(u"Can't start task - pool is full")
                pool.logger.debug(u"Pool size %d", len(pool._pool))
                for w in pool._pool:
                    #pool.logger.debug(u"Type %s", str(type(w)))
                    #pool.logger.debug(u"Task type %s", str(type(w.task)))
                    pool.logger.debug(u"Task name %s", w.task.name)
                    break
                break

            task = tasks_get_f()
            if not task:
                break

            pool.start_worker(task=task)
            pool.logger.debug(u"%s task started in separate thread", unicode(task))
            count += 1

            if count >= pool.size:
                break

        if count:
            pool.logger.debug("%d task(s) started", count)


    def process(self):
        """
        Write your code here to run in thread
        """
        self.execute_tasks(tasks.get_ui_task_to_run, self.ui_pool)
        self.execute_tasks(tasks.get_eac_task_to_run, self.eac_pool)
        self.execute_tasks(tasks.get_other_task_to_run, self.other_pool)

    def save_thread(self):
        global daemon
        try:
            daemon = self

        except Exception as ex:
            self.logger.exception("Exception in 'save_thread'")


# setup tasks manager
ProMailTask.manager = ProMailTaskManager(ProMailTask)

# setup tasks instance
tasks = ProMailTasks(ProMailDBTaskRunner(ProMailTask))



#######################################
# Cleaner task - remove finished and failed tasks
# unique task (it means it will have only single record for given set of params)
# repeat it every 20 minutes

TASK_TIMEOUT = 60 * 20


@tasks.background_other(unique=True, repeat_every=TASK_TIMEOUT, repeat_times=-1)
def clean_dead_tasks():

    expires_at = datetime.now() - timedelta(seconds=TASK_TIMEOUT)
    i = 0

    for task in ProMailTask.select().where((ProMailTask.finished_at <= expires_at) | (ProMailTask.failed_at <= expires_at)):
        task.remove()
        i += 1

    logger.info(u"Dead and Finished tasks cleaner report - %d tasks were deleted", i)


if not clean_dead_tasks():
    logger.debug(u"Dead and Finished tasks cleaner already registered!")

]]>
		</Library>
		<Library Name="VEE_sqlite3">
<![CDATA[from VEE_utils import AutoCast
from VEE_resources import BaseResourceManager, DB_FOLDER
from vscript import generic
from cStringIO import StringIO
import threading, sqlite3, os


#######################################
#Exceptions							  #
#######################################
class DatabaseDoesntExist( Exception ):
	def __init__( self ):
		Exception.__init__( self, 'Database doesn\'t exist' )

class DatabaseUnknownType( Exception ):
	def __init__( self, t ):
		Exception.__init__( self, "Database doesn't support '%s' type" % t.__name__  )

#######################################
#SQLITE DB Wrapper					  #
#######################################
TIMEOUT = 10
class ExternalDatabase( object ):

	local_db_list = threading.local()

	@classmethod
	def open_db( self, name ):

		db = getattr( self.local_db_list, name, None ) is None
		if db is None:
			db = self( name )
			setattr( self.local_db_list,name, db )

		return db

	def __init__(self, dbname ):
		self.conn = sqlite3.connect( dbname , timeout = TIMEOUT )


	def insert(self, query, escapeList=None):
		self.query(query,escapeList)
		# Get the last inserted id
		id = self.query('SELECT last_insert_rowid();')[0][0]
		# Return the id
		return id


	def execute_many( self, query, escapeList ):
		return self.query( query, escapeList, executeMany=True )


	def query(self, query, escapeList=None, executeMany = False ):
		"""
		Perform a query. When an escapeList is provided it'll be used for
		variable substitution.

		Returns a list with dictionaries containing the result of your SELECT,
		or an empty list after an INSERT or UPDATE.
		"""

		# Create a new cursor
		tc = self.conn.cursor()
		tc.execute( "PRAGMA foreign_keys = ON" )
		# Execute our query with or without values to escape
		if( escapeList ):
			if executeMany: tc.executemany( query, tuple(escapeList) )
			else: tc.execute(query, tuple(escapeList))
		else:
			tc.execute(query)

		# Make an empty result list
		result = []
		append = result.append

		# A description is only set after a SELECT statement
		# Even when there are no results.
		if(tc.description):
			# Fetch the field names out of our cursor
			#field_names = [d[0].lower() for d in tc.description]

			# Generate a dictionary
			while True:
				rows = tc.fetchmany()
				if not rows: break
				for row in rows: append(row)
	   	else:
			# If there is no description this must mean we're doing an insert
			# or update. Anything that needs a commit.
			self.conn.commit()

		# Close the cursor
		tc.close()

		# Return the list with the dictionaries
		return result


	def truncate(self, tablename):
		"""
		Delete all rows from a table and reset the autoincrement
		"""

		# Create a new cursor
		tc = self.conn.cursor()

		# Clear the table
		tc.execute("delete from "+ tablename + ";")
		# Reset the autoincrement
		#tc.execute("delete from sqlite_sequence where name='"+ tablename + "';")
		tc.close()


	def force_close( self ):

		self.conn.interrupt()
		self.conn.close()


	def save_close( self ):

		self.conn.commit()
		self.force_close()


	def unlock_db( self ):
		self.conn.interrupt()



#######################################
#DB Manager Class		  			  #
#######################################

class DatabaseManager( BaseResourceManager ):
	"""Class for manage DB Sqlite files.
		All db files are stored in ./db folder
	"""

	def __init__( self, plugin_guid ):
		BaseResourceManager.__init__( self, plugin_guid )
		self._path = DB_FOLDER

	databaselist 	= property( lambda x: x.listdir( "." ) )
	import_db 		= BaseResourceManager.write
	export_db		= BaseResourceManager.open
	delete_db		= BaseResourceManager.delete


	def open_db( self, name ):
		if self.exists( name ): return ExternalDatabase( os.path.join( self.abs_path(), name ) )
		else: raise DatabaseDoesntExist

	def create_db( self, name ):
		if not self.exists( name ):
			self.import_db( name, StringIO() )



#######################################
#VScript wrappers					  #
#######################################
class v_ExternalDatabase( generic ):

	def __init__( self,  db ):
		self.db = db


	@AutoCast
	def v_insert(self, query, escapeList = None ):
		return self.db.insert( query, escapeList )


	@AutoCast
	def v_query(self, query, escapeList=None, executeMany = False  ):
		return self.db.query( query, escapeList, executeMany )


	def v_executemany( self, query, escapeList ):
		return self.v_query( query, escapeList, True )



class v_DatabaseManager( generic ):

	def __init__( self, plugin_guid ):
		self.db_manager = DatabaseManager( plugin_guid )
		self.data_bases = {}


	@AutoCast
	def __call__( self, name ):

		db = self.data_bases.get( name, None )
		if not db:
			try:
				db = self.db_manager.open_db( name )
			except DatabaseDoesntExist, ex:
				self.db_manager.create_db( name )
				db = self.db_manager.open_db( name )

			self.data_bases[ name ] = db

		return v_ExternalDatabase( db )


	@AutoCast
	def v_exists( self, name ):
		return self.db_manager.exists( name )

	@AutoCast
	def v_deletedatabase( self, name ):
		self.db_manager.delete( name )
]]>
		</Library>
		<Library Name="promail_eac_core">
<![CDATA["""
"""

from prosuite_logging import app_logger
from prosuite_threading import ProSuiteThreadPool


MAX_CLIENT_THREADS = 10
DAEMON_THREAD = None


class EACClientsPool(ProSuiteThreadPool):

    def get_pool(self):
        return {}

    def add_pool_member(self, member):
        pass
#        self._pool[member.account.guid] = member

    def in_pool(self, account):
        pass
#        return account.guid in self._pool

    def get_member(self, pool_member):
        pass
#        return self._pool[pool_member]

    def remove_member(self, pool_member):
        pass
#        del self._pool[pool_member]


class EACCore(object):

    __slots__ = (
        "_is_started",
        "_logger",
        "_pool",
    )

    def __init__(self):
        self._is_started = False
        self._logger = None
        self._pool = None

    def setup_logger(self, parent_logger):
        """
        Setup logger
        """
        self._logger = parent_logger.getChild("EACCore")

    @property
    def logger(self):
        return self._logger

    @property
    def pool(self):
        return self._pool

    def is_started(self):
        return self._is_started

    def start(self):
        """
        Start EAC core
        """
        if self.is_started():
            self.logger.info("Already started! Exit...")
            return

        self.logger.info("Starting...")

        from promail_triggers import EACDaemon
        daemon = EACDaemon()
        daemon.setup_logger(self.logger)
        daemon.kill_existing_instance()

#        self._pool = EACClientsPool(
#            name=daemon.name + ".Pool",
#            size=MAX_CLIENT_THREADS,
#            pm_cls=EACClientWorker
#        )
#        self.pool.setup_logger(self.logger)

        daemon.start()

        self._is_started = True

    def stop(self):
        """
        Stop EAC core
        """
        global DAEMON_THREAD

        if not self.is_started():
            return

        if DAEMON_THREAD:
            DAEMON_THREAD.stop()

        DAEMON_THREAD = None
        self._is_started = False

    def run(self):
        """
        """
        self.logger.info("EAC clients pool check...")
#        self.pool.check_members()

        if self.pool.is_fully_loaded():
            self.logger.debug("EAC clients pool is fully loaded")
            return

#        import ProMail
#
#        for account in ProMail.NoACL.get_mailboxes():
#
#            args = (account.server.pop3.host,
#                    account.server.pop3.port,
#                    account.login)
#
#            if self.pool.in_pool(account):
#                self.logger.debug("Account %s:%s %s already in pool", *args)
#                continue
#
#            self.logger.debug("Creating new worker for %s:%s %s...", *args)
#            worker = self.pool.create_worker()
#            if not worker:
#                self.logger.debug("Creating new worker for %s:%s %s failed!", *args)
#                break
#
#            self.logger.debug("Starting worker for %s:%s %s", *args)
#
#            worker.set_account(account)
#            worker.setup_logger(self.logger)
#
#            self.pool.add_pool_member(worker)
#            worker.start()
#
#            account.save()


eac_core = EACCore()
eac_core.setup_logger(app_logger)
eac_core.start()
]]>
		</Library>
		<Library Name="localization">
<![CDATA[import localization_ru
import localization_fr
import localization_en
import localization_bg

def _get_lang( not_user = None ):
	#return localization_bg
	if session.get( "lang" ) is None:
		if "HTTP_ACCEPT-LANGUAGE" in request.environment:
			set_lang = str(request.environment["HTTP_ACCEPT-LANGUAGE"])[:2]
			switch_lang(set_lang)

	if session["lang"] == "ru":		return localization_ru
	elif session["lang"] == "fr":	return localization_fr
	elif session["lang"] == "bg":	return localization_bg
	else:							return localization_en

def get_lang(not_used = None):
	return _get_lang( not_used ).localization_dict

def get_lang_rectangle( not_used = None ):
	return _get_lang( not_used ).lang_rectangle

def switch_lang( newlang ):
	session["lang"] = newlang

def current_language():
	return session["lang"]


]]>
		</Library>
		<Library Name="ProMail">
<![CDATA["""
"""

from promail_acl_objects import (
    ACLArchive,
    ACLArchivesList,
    ACLLabel,
    ACLMailbox,
    PermissionDenied,
)

from promail_orm import (
    Connectivity, Mailbox,
    Archive
)

from promail_predefined_servers import predefined as PredefinedServers

from promail_tasks import tasks

from promail_testers import (
    test_server_connection,
    test_account_connection,
)

]]>
		</Library>
		<Library Name="widget_localization">
<![CDATA[import localization

class LocalizationWidget( object ):
	def __init__( self ):
		self.controls = {}


	def add_controls( self, key, controls ):
		if type(controls) != list:
			controls = [ controls ]

		if not key in self.controls:
			self.controls[ key ] = controls
		else:
			self.controls[ key ] += controls


	def set_data( self, control_dict ):
		for key in control_dict:
			self.add_controls( key, control_dict[ key ] )


	def render( self ):
		lang = localization.get_lang()

		for key in self.controls:
			value = lang.get( key )
			if not value: continue

			for control in self.controls[ key ]:
				control_attr = dir( control )

				# modify values in controls
				if   'title' in control_attr:
					control.title = value
				elif 'label' in control_attr:
					control.label = value
				elif 'text'	 in control_attr:
					control.text = value
				elif 'value' in control_attr:
					control.value = value



]]>
		</Library>
		<Library Name="prosuite_widgets">
<![CDATA[""" General widgets
"""

import json

from prosuite_utils import CachedProperty


########################################
#
# Base Widget Implementation
#
########################################
class Widget(object):

    def __init__(self, delegate):
        self._delegate = delegate

    @property
    def delegate(self):
        return self._delegate


""" Base class for childs:

class Datatable(Datatable):

    def get_data(self):
        raise NotImplementedError

    def get_header(self):
        raise NotImplementedError

    def get_hidden_fields(self):
        raise NotImplementedError

    def get_key(self):
        raise NotImplementedError

    def get_selected_rows(self):
        raise NotImplementedError

    def get_selection_mode(self):
        raise NotImplementedError

    def get_show_header(self):
        raise NotImplementedError

    def get_title(self):
        raise NotImplementedError

    def format_header_cell(self, hcell):
        raise NotImplementedError

    def to_row(self, data):
        raise NotImplementedError

"""

class Datatable(object):
    """ Datatable widget
    """

    class SELECTION_MODE(object):
        MULTI = "1"
        SINGLE = "0"

    def get_data(self):
        """ Return data (iterable) for datatable
        """
        raise NotImplementedError

    @CachedProperty
    def data(self):
        """ Cached value, lazy load
        """
        return self.get_data()

    def get_header(self):
        """ Return header (iterable) for datatable
        """
        raise NotImplementedError

    @CachedProperty
    def header(self):
        """ Cached value, lazy load
        """
        return self.get_header()

    def get_hidden_fields(self):
        """ Return list of keys to hide fields
        """
        raise NotImplementedError

    @CachedProperty
    def hidden_fields(self):
        """ Cached value, lazy load
        """
        return self.get_hidden_fields()

    def get_key(self):
        """ Return key
        """
        raise NotImplementedError

    @CachedProperty
    def key(self):
        """ Cached value, lazy load
        """
        return self.get_key()

    def get_selected_rows(self):
        """ Return list of keys for selected rows
        """
        raise NotImplementedError

    @CachedProperty
    def selected_rows(self):
        """ Cached value, lazy load
        """
        return self.get_selected_rows()

    def get_selection_mode(self):
        """ Return selection mode
        """
        raise NotImplementedError

    @CachedProperty
    def selection_mode(self):
        """ Cached value, lazy load
        """
        return self.get_selection_mode()

    def get_show_header(self):
        """ Return True if show header else False
        """
        raise NotImplementedError

    @CachedProperty
    def show_header(self):
        """ Cached value, lazy load
        """
        return self.get_show_header()

    def get_title(self):
        """ Return datatable title
        """
        raise NotImplementedError

    @CachedProperty
    def title(self):
        """ Cached value, lazy load
        """
        return self.get_title()

    def format_header_cell(self, hcell):
        """ Return formatted header cell
        """
        raise NotImplementedError

    def to_row(self, data):
        """ Return list or tuple contains
            data representation
        """
        raise NotImplementedError

    def render(self, datatable):
        """ Render datatable with data
        """
        datatable.data = json.dumps(map(self.to_row, self.data))
        datatable.key = self.key
        datatable.header = json.dumps(map(self.format_header_cell, self.header))
        datatable.hiddenfields = json.dumps(self.hidden_fields)
        datatable.selectedrows = json.dumps(self.selected_rows)
        datatable.selectionmode = self.selection_mode
        datatable.showheader = str(int(self.show_header))
        datatable.title = self.title


class ComplexDatatable(Datatable):
    """
    """

    class Argument(object):
        """
        """
        __slots__ = (
            "castto",
            "default",
            "reqName",
            "reqValue",
            "svName",
            "svValue",
            "test",
            "valid_value",
            "value",
        )

        def __init__(self, reqName='',
                           svName='',
                           default=None,
                           castto=None,
                           test=None,
                           valid_value=None):

            self.castto = castto
            self.reqName = reqName
            self.reqValue = None
            self.svName = svName
            self.svValue = None
            self.default = default
            self.test = test
            self.valid_value = valid_value
            self.value = None

        def is_valid(self):
            """
            """
            return self.test(self) if self.test else True


    def __init__(self, delegate=None):
        self.delegate = delegate
        self.arguments = None

        self.init_args()

    def init_args(self):
        """
        """
        self.arguments = {}

    def save_args(self):
        """
        """
        for arg in self.arguments.values():
            if arg.svName:
                self.delegate.shared_vars[arg.svName] = arg.value

    def fill_args(self):
        """
        """
        for arg in self.arguments.values():
            self.fill_arg(arg)

    def fill_arg(self, arg):
        """
        """
        if arg.reqName:
            arg.reqValue = self.delegate.get_argument(arg.reqName, None)

        if arg.svName:
            arg.svValue = self.delegate.shared_vars.get(arg.svName, None)

        if arg.reqValue is not None:
            arg.value = arg.reqValue

        elif arg.svValue is not None:
            arg.value = arg.svValue

        else:
            arg.value = arg.default

        if arg.castto and arg.reqValue is not None:
            try:
                arg.value = arg.reqValue = arg.castto(arg.reqValue)

            except Exception as ex:
                arg.value = arg.reqValue = arg.default

        if not arg.is_valid():
            arg.value = arg.default

        return arg

    def get_objects(self):
        """
        """
        return NotImplementedError

    def get_search_filter(self):
        """
        """
        raise NotImplementedError

    def get_sort_filter(self):
        """
        """
        raise NotImplementedError

    def get_data(self):
        """
        """
        start = (self.current_page - 1) * self.rows_per_page
        end = start + self.rows_per_page

        return self.objects[start:end]

    def get_current_page(self):
        """
        """
        return self.arguments["currentPage"].value

    def get_pages_count(self):
        """
        """
        count = len(self.objects) / self.rows_per_page
        if len(self.objects) % self.rows_per_page:
            count += 1

        return count

    def get_rows_per_page(self):
        """
        """
        return self.arguments["rowsPerPage"].value

    def get_search_query(self):
        """
        """
        return self.arguments["searchQuery"].value

    def get_selected_rows(self):
        """
        """
        return self.arguments["selectedRows"].value

    def get_sort_by(self):
        """
        """
        return self.arguments["sortBy"].value

    def get_sort_order(self):
        """
        """
        return self.arguments["sortOrder"].value

    @CachedProperty
    def current_page(self):
        """
        """
        page = abs(self.get_current_page())
        if page > self.pages_count:
            page = self.pages_count

        return page

    @CachedProperty
    def objects(self):
        """
        """
        objects = self.get_objects()
        if self.search_query:
            objects = filter(self.get_search_filter(), objects)

        if self.sort_by and self.sort_order:
            objects = sorted(objects, cmp=self.get_sort_filter())

        return objects

    @CachedProperty
    def pages_count(self):
        """
        """
        return self.get_pages_count()

    @CachedProperty
    def rows_per_page(self):
        """
        """
        return self.get_rows_per_page()

    @CachedProperty
    def search_query(self):
        """
        """
        return self.get_search_query().lower()

    @CachedProperty
    def sort_by(self):
        """
        """
        return self.get_sort_by()

    @CachedProperty
    def sort_order(self):
        """
        """
        return self.get_sort_order()

    def render(self, datatable, pager, perpage, search):
        """ Render datatable with data
        """
        if self.arguments["searchQuery"].reqValue is not None:
            self.arguments["currentPage"].value = 1

        super(ComplexDatatable, self).render(datatable)

        if pager:
            pager.pagescount = str(self.pages_count)
            pager.currentpage = self.current_page

        if self.delegate.is_action:
            perpage.action("selectItem", [self.rows_per_page])
            search.action("setValue", [self.search_query])

        else:
            perpage.selectedvalue = self.rows_per_page
            search.value = self.search_query

        self.save_args()


class Form(object):
    """
    """

    class Field(object):
        """
        """
        __slots__ = (
            "castto",
            "default",
            "reqName",
            "reqValue",
            "svName",
            "svValue",
            "test",
            "valid_value",
            "value",
            "vdomobject"
        )

        def __init__(self, reqName='',
                           svName='',
                           default=None,
                           castto=None,
                           test=None,
                           valid_value=None,
                           vdomobject=None):

            self.castto = castto
            self.reqName = reqName
            self.reqValue = None
            self.svName = svName
            self.svValue = None
            self.default = default
            self.test = test
            self.valid_value = valid_value
            self.value = None
            self.vdomobject = vdomobject

        def is_valid(self):
            """
            """
            return self.test(self) if self.test else True

    def __init__(self, delegate):
        self.delegate = delegate
        self.fields = None

        self.init_fields()

    def init_fields(self):
        """
        """
        self.fields = {}

    def fill_fields(self):
        """
        """
        for field in self.fields.values():
            self.fill_field(field)

    def fill_field(self, field):
        """
        """
        if field.reqName:
            field.reqValue = self.delegate.get_argument(field.reqName, None)

        if field.svName:
            field.svValue = self.delegate.shared_vars.get(field.svName, None)

        if field.reqValue is not None:
            field.value = field.reqValue

        elif field.svValue is not None:
            field.value = field.svValue

        else:
            field.value = field.default

        if field.castto and field.reqValue is not None:
            try:
                field.value = field.reqValue = field.castto(field.reqValue)

            except Exception as ex:
                field.value = field.reqValue = field.default

        return field

    def submit_form(self):
        """
        """
        pass
]]>
		</Library>
		<Library Name="prosuite_app_cleaner">
<![CDATA["""
"""

from prosuite_logging import app_logger


class ApplicationCleaner(object):
    """
    """
    def __init__(self):
        self.clean_main_db = False
        self.clean_plugins_db = False
        self.clean_storage = False
        self.clean_config = False
        self.clean_vee_engine = False

    def submit(self):
        """
        """
        if self.clean_main_db:
            app_logger.info("Clear application main database")

        if self.clean_plugins_db:
            app_logger.info("Clear application Plug-Ins database")

        if self.clean_storage:
            app_logger.info("Clear application storage")

        if self.clean_vee_engine:
            app_logger.info("Remove all Plug-In dispatchers from VScript Engine")

        if self.clean_config:
            app_logger.info("Reset application settings to defaults")]]>
		</Library>
		<Library Name="VEE_timer">
<![CDATA[
import datetime

class VEE_timer(object):
	def __init__(self, name, delay, hash_value ):
		"""delay should be in format 00:00:00:00, where each digit - delay in day:hr:min:sec"""
		self.delay = map(int,delay.split(':'))
		self.name = name
		self.active = True
		self.hash_value = hash_value
		self.last_run = datetime.datetime.now()
		if not len(self.delay) == 4:
			raise Exception ("Timer delay have invalid format")

	def check(self):
		"""Return true if since last run needed time already passed. Timer should be active"""
		if self.active and self.last_run + datetime.timedelta(days = self.delay[0],
				hours=self.delay[1],minutes=self.delay[2], seconds = self.delay[3])<=datetime.datetime.now():
			self.last_run = datetime.datetime.now()
			return True
]]>
		</Library>
		<Library Name="VEE_server">
<![CDATA[from vscript.wrappers.environment import v_server



vscript_wrappers_name="wrappers"



class v_server_wrapper( object ):

	def __init__( self ):
		self.server = v_server()


	def v_application( self ):
		return self.server.v_application()


	def v_sendmail( self, *args, **kwargs ):
		return self.server.v_sendmail( *args, **kwargs )


	def v_mailstatus( self, *args, **kwargs ):
		return self.server.v_mailstatus( *args, **kwargs )


	def v_mailer( self, *args, **kwargs ):
		return self.server.v_mailer( *args, **kwargs )


environment =  (
	(	"v_mailserverclosedconnection"		, vscript_wrappers_name ),
	(	"v_mailservernomessageindex"		, vscript_wrappers_name ),
	(	"v_mailservererror"					, vscript_wrappers_name ),
	(	"v_mailserveralreadyconnectederror"	, vscript_wrappers_name ),
	(   "v_server"							, v_server_wrapper()	),
	(   "v_attachment"						, vscript_wrappers_name ),
	(   "v_mailattachment"					, vscript_wrappers_name ),
	(   "v_message"							, vscript_wrappers_name ),
	(   "v_mailmessage"						, vscript_wrappers_name ),
)
]]>
		</Library>
		<Library Name="prosuite_localization_ru">
<![CDATA[localization = {
'login.title': u'Вход',
'login.login_label': u'Логин',
'login.password_label': u'Пароль',
}]]>
		</Library>
		<Library Name="localization_ru">
<![CDATA[# -*- coding: utf-8 -*-


localization_dict = {

	#page titles
	"login_page_title"						: u'Вход - ProShare',
	"home_page_title"						: u'Файлы - ProShare',
	"smart_folders_page_title"				: u'Смарт папки и группы - ProShare',
	"smart_contents_page_title"				: u'Смарт папка - ProShare', #smart folder contents page title (private)
	"public_contents_page_title"			: u'Смарт папка - ProShare', #smart folder contents page title (public)
	"macros_page_title"						: u'Макросы - ProShare',
	"edit_macros_page_title"				: u'Редактирование макросов - ProShare',
	"settings_page_title"					: u'Настройки - ProShare',
	"rules_management_page_title"			: u'Управление правами - ProShare',
	"users_groups_management_page_title"	: u'Управление пользователями и группами - ProShare',
	"remote_control_page_title"				: u'Удалённое администрирование - ProShare',
	"proadmin_attention_page_title"			: u'Оповещение - ProShare',
	"clear_page_title"						: u'Очистка приложения - ProShare',


	#common dialogs and forms strings
	"login" 					: u'Логин:',
	"password" 					: u'Пароль:',
	"last_name"					: u'Фамилия',
	"first_name"				: u'Имя',
	"dialog_add_btn"			: u'Добавить',
	"dialog_apply_btn"			: u'Применить',
	"dialog_cancel_btn" 		: u'Отмена',
	"dialog_close_btn"			: u'Закрыть',
	"dialog_delete_btn"			: u'Удалить',
	"dialog_download_btn"		: u'Скачать',
	"dialog_edit_btn"			: u'Редактировать',
	"dialog_ok_btn"				: u'ОК',
	"dialog_save_btn" 			: u'Сохранить',
	"dialog_title_confirm"		: u'Подтвердить',
	"server"					: u'Сервер:',
	"dialog_upload_btn"			: u'Загрузить',
	"email_column_header"		: u'E-mail',
	"error"						: u'Ошибка',
	"invalid_data_error_title"	: u'Некорректные данные.',
	"check_fields_error"		: u'Заполнены не все поля.',
	"check_name_field_error"	: u'Поле "Имя" не заполнено.',
	"btn_delete_selected"		: u'Удалить выбранные',
	"growl_title_warning"		: u'Предупреждение',
	"growl_title_message"		: u'Сообщение',




	#Errors, messages and warnings
	"unknown_error"								: u"Произошла неизвестная ошибка. Пожалуйста, попробуйте перезагрузить страницу или перелогиниться в систему. Если ошибка повторится, свяжитесь с администратором.",
	"empty_login_error"							: u"Пожалуйста, введите логин.",
	"empty_name_error"							: u"Пожалуйста, введите логин.",
	"empty_password_error"						: u"Пожалуйста, введите пароль.",
	"invalid_login_or_password_error"			: u"Неправильный логин или пароль.",
	"files_ignored_warning"						: u"Файлы не могут быть добавлены.",
	"nodes_not_exists_warning"					: u"Некоторые файлы и папки были удалены и больше не существуют. Пожалуйста, обновите страницу.",
	"sf_not_exists_warning"						: u"Некоторые смарт папки или смарт группы были удалены и больше не существуют. Пожалуйста, обновите страницу.",
	"already_contained_warning"					: u"%s уже содержится в %s.",
	"subfolders_ignored_warning"				: u"Подпапки были пропущены.",
	"folders_added_message"						: u"Количество папок добавленных в {1}: {0}.",
	"nothing_added_message"						: u"Ничего не добавлено.",
	"fields_updated_message"					: u"Поля успешно обновлены.",
	"IllegalCharactersInNameError"				: u"Имя не может содержать следующие символы: *?:\\|/\"&lt&gt.",
	"SFAlreadyExistsError"						: u"Смарт папка с таким именем уже существует.",
	"MetaAlreadyExistsError"					: u"Мета Поле с таким именем уже существует.",
	"FolderAlreadyContainedError"				: u"Папка уже содрежится.",
	"AccessDeniedError"							: u"У вас недостаточно прав доступа для выполнения этого действия.",
	"SessionExpiredError"						: u"Сессия завершилась.",
	"AuthorisationError"						: u"Необходима повторная авторизация.",
	"RemoteApplicationDisconnected"				: u"Приложение отключено. ID : %s",
	"EmptyNameError"							: u"Пожалуйста, введите имя.",
	"DirectoryAlreadyExistsError"				: u"Папка уже существует.",
	"NothingSelectedError"						: u"Ничего не выбрано.",
	"FileAlreadyExistsError"					: u"Папка уже содержит файл с таким именем.",
	"FolderAlreadyExistsError"					: u"Папка уже содержит подпапку с таким именем.",
	"rules_saved_message"						: u"Права успешно обновлены.",
	"rules_inherited_message"					: u"Права успешно наследованы.",
	"inaccessable_rules_warning"				: u"Вы не можете редактировать права для следующих объектов: %s.",
	"LongNameError"								: u"Слишком длинное имя.",
	"no_such_directory"							: u"Папка с таким именем не существует.", #NEEDED
	"fill_all_star_fields_error"				: u'Пожалуйста, заполните все поля отмеченные звёздочкой.',#NEEDED
	"file_not_exist"							: u"К сожалению, такого файла нет.", #NEEDED
	"deleting_no_acces_files_warning"			: u"Найдены объекты, к которым у вас нет доступа. Они не были удалены.", #NEEDED
	"sf_not_exists_error"						: u"Смарт папка не существует.", #NEEDED
	"downloads_not_linked_to_sf"				: u"Скачиваемые файлы и папки не привязаны к указанной смарт папке.", #NEEDED
	"folders_and_files_not_found"				: u"Файлы и папки не найдены.", #NEEDED
	"wrong_public_key"							: u"Указанный ключ доступа неверен или устарел.", #NEEDED
	"downloading_error"							: u"Произошла внутренняя ошибка. Невозможно скачать файлы или папки.", #NEEDED
	"common_error_message"						: u"Произошла ошибка. Если ошибка повторится, пожалуйста, обратитесь за помощью в службу поддержки поставщика продукта или своему системному администратору.",  #NEEDED
	"deleting_no_acces_sfolers_warning"			: u"Найдены объекты, к которым у вас нет доступа. Они не были удалены.",




	#Home
	#top bar buttons
	"btn_upload_files"			: u"Добавить файл",
	"btn_new_folder"			: u"Создать папку",
	"btn_download_selected"		: u"Скачать выбранные",
	"btn_edit_selected"			: u"Переменовать",
	"btn_edit_rights"			: u"Права доступа",
	"btn_add_to_smart_folder"	: u"Добавить в смарт папку",
	"btn_macros"				: u"Макросы",
	"macro_menu_label"			: u"<p>Плагин</p>",
	#contents table
	"contents_tbl_name_title"		: u"Имя",
	"contents_tbl_Type_title"		: u"Тип",
	"contents_tbl_Size_title"		: u"Размер",
	"contents_tbl_modified_title"	: u"Изменен",
	"contents_tbl_uploaded_title"	: u"Загружен",
	"node_type_folder"				: u"Папка",
	"no_contents_title"				: u"В этой папке ничего нет", #NEEDED
	"unknown_type"					: u"неизвестный. Или неизвестен? Как правильно?",
	#upload dialog
	"dialog_upload_title"					: u"Добавить файл",
	"dialog_upload_file_uploader_title"		: u"Файл:",
	"dialog_upload_destination_title"		: u"Добавить в:",
	"dialog_upload_uploader_title"			: u"Выбрать файл...",
	#new folder/edit folder dialog
	"dialog_new_folder_title"			: u"Создать папку",
	"dialog_rename_title"				: u"Переименовать",
	"dialog_folder_name_title"			: u"Имя:",
	"dialog_edit_folder_rules_title"	: u"Права доступа:",
	#delete selected dialog
	"dialog_delete_selected_title"		: u"Удалить выбранные",
	#add to Smart Folder dialog
	"dialog_add_to_sf_title"				: u"Добавить в смарт папку",
	"dialog_dialog_add_to_sf_list_title"	: u"В:",
	"dialog_dialog_add_to_sf_list_new"		: u"Создать смарт папку",
	#rules dialog
	"dialog_rules_title"					: u'Редактирование прав доступа', #NEEDED
	"inherit_checkbox_title"				: u'применить права для содержимого', #NEEDED
	"processing_rules_in_bg_message"		: u"Права доступа будут применены в фоновом режиме. Процесс обработки может занять несколько минут.",


	#Smart Folders
	"smart_folders_groups_title"		:u"Смарт папки и группы", #NEEDED
	#top bar buttons
	"btn_new_smart_folder"		: u"Создать",
	#delete and edit titles used from page home
	#smart folders table
	"smart_folders_tbl_title"			: u"Смарт папки",
	"smart_folders_tbl_name_title"		: u"Имя",
	"smart_folders_tbl_objs_title"		: u"Подпапки",
	"smart_folders_tbl_modified_title"	: u"Изменена",

	"sfg_button_edit"			: u"Редактировать",
	"sfg_button_add"			: u"Добавить смарт папку",
	"sfg_button_delete"			: u"Удалить",
	"sfg_button_group"			: u"Объединить в группу",
	"sfg_button_ungroup"		: u"Разгруппировать",
	"sfg_button_selectmode"		: u"Режим выделения",
	"sfg_button_select"			: u"Выделить",
	"sfg_button_selectall"		: u"Выделить всё",
	"sfg_button_selectnone"		: u"Снять выделение",
	"sfg_button_rules"			: u"Права доступа",
	"sfg_msg_1"					: u"Введите имя для новой смарт папки:",
	"sfg_msg_2"					: u"Новая папка",
	"sfg_msg_3"					: u"Вы не ввели имя",
	"sfg_msg_4"					: u"Ошибка режима выделения",
	"sfg_msg_5"					: u"Ничего не выделено",
	"sfg_msg_6"					: u"Введите новое имя:",
	"sfg_msg_7"					: u"Введите имя для новой группы:",
	"sfg_msg_8"					: u"Новая группа",
	"sfg_msg_9"					: u"Вы не ввели имя группы",
	"sfg_msg_10"				: u"Ничего не выделено",
	"sfg_msg_11"				: u"Группа не выделена",



	#Smart Folder contents
	"metafield_type_string"				: u"СТРОКА",
	"btn_edit_folders"					: u"Редактировать",
	"metafield_no_value_title"			: u"Нет данных",
	"no_files_title"					: u"В этой папке ничего нет",
	"public_link_btn_title"				: u"Внешняя ссылка",
	"download_all_btn_title"			: u"Скачать всё",
	#predefined metafields
	"metafield_created"					: u"Создана",
	"metafield_modified"				: u"Изменена",
	"metafield_watchers"				: u"Наблюдатели",
	#add metafield dialog
	"dialog_add_metafield_title"		: u"Добавить поле",
	"dialog_add_metafield_name_title"	: u"Имя:",
	"dialog_add_metafield_type_title"	: u"Тип:",
	"dialog_add_metafield_value_title"	: u"Значение:",
	#public link dialog
	"dialog_public_link_title"			: u"Внешняя ссылка",
	"dialog_public_link_reset_btn"		: u"Сбросить",
	"dialog_public_clipboard_btn"		: u"Скопировать в буфер",
	#add folder dialog
	"dialog_add_folder_title"			: u"Добавить папку(ки)",


	#Macros
	"add_macros_btn"					: u"Добавить макросы",
	"import_macros_btn"					: u"Импортировать",
	"macros_table_title"				: u"Макросы",
	"macros_table_name_title"			: u"Имя",
	"macros_table_event_title"			: u"Событие",

	#Ecit macros
	"edit_macros_area_caption"				: u"Редактировать макросы",
	"edit_macros_check_btn"					: u"Проверка",
	"edit_macros_export_btn"				: u"Экспортировать",
	"edit_macros_name_title"				: u"Название:",
	"edit_macros_event_title"				: u"Событие:",
	"edit_macros_body_title"				: u"Код:",
	"edit_macros_button_macros_checkbox"	: u"Кнопочный",
	"edit_macros_on_board_checkbox"			: u"На панель",
	"edit_macros_picture_title"				: u"Картинка:",

	#errors
	"fill_all_fields_error"					: u"Пожалуйста, заполните все поля.",
	"vscript_not_compiled_error"			: u"VScript, к сожалению, не был скомпилирован.",
	"type_macros_code_error"				: u"Пожалуйста, добавьте код макроса.",
	"fill_macros_fields_error"				: u"Пожалуйста, заполните поля макроса.",
	"macro_not_defined_error"				: u"Макрос, к сожалению, не задан.",
	"xml_not_correctr_error"				: u"XML, к сожалению, неправильный.",


	#Design
	#cnt_login
	"greeting"		: u'Здравствуйте, %s %s',
	"login_error"	: u'Неверный логин или пароль',
	#header
	"menu_main_title"			: u'<div style="text-align: center">Файлы</div>',
	"menu_settings_title"		: u'<div style="text-align: center">Настройки</div>',
	"menu_smart_folders_title"	: u'<div style="text-align: center">Смарт папки</div>',
	"menu_macros_title"			: u'<div style="text-align: center">Макросы</div>',
	#add user to group dialog (container_some)
	"find_usr_title"					: u'Найти пользователя',
	"find_grp_title"					: u'Найти группу',
	"add_usrgrp_diaolg_grp_tab_title"	: u'Добавить пользователя',
	"add_usrgrp_diaolg_usr_tab_title"	: u'Добавить группу',

	#Settings
	"settings_rules_btn"			: u'Управление правами доступа',
	"settings_users_groups_btn"		: u'Управление пользователями и группами',
	"settings_remote_control_btn"	: u'Удалённое администрирование',


	#Remote scheme (Remote Control)
	"current_scheme_local"		: u'Текущая схема: Локальная',
	"current_scheme_remote"		: u'Текущая схема: Удалённая',
	##"remote_scheme_page_title"	: u'Remote Control', used "settings_remote_control_btn"
	"radio_btn_local"			: u'Локальная схема',
	"radio_btn_remote"			: u'Удалённая схема',
	#widget_remote_form
	"socket.gaierror" 			: u'Пожалуйста, введите адрес сервера.',
	"socket.error" 				: u'Некорректный адрес сервера.',
	"faultType" 				: u'Пожалуйста, введите логин и пароль.',
	"connection_error"			: u'Ошибка подключения',
	"connection_success"		: u'Подключение успешно установлено. Пожалуйста, обновите страницу.',
	#Proadmin_attention
	"proadmin_attention_text"	: u'Приложение работает по удалённой схеме. Для работы с пользователями и группами используйте приложение ProAdmin.',
	#Rules Management
	"rules_acl_cancel_btn"		: u'<div class="acl_cancel">Отмена</div>',
	"rules_acl_apply_btn"		: u'<div class="acl_apply">Применить</div>',
	"cont_rules_title"			: u'<div style="padding-left: 15px;" class="acl_container_title">Управление правами доступа</div>',
	"cont_subjects_title"		: u'<div style="padding-left: 30px;" class="acl_container_title">Пользователи и группы</div>',
	"cont_tree_title"			: u'<div class="acl_container_title" style="padding-left: 52px !important;">Объекты</div>',
	#rules_simple
	"widgetuser_rights_name"	: u'Имя',
	"widgetuser_rights_access"	: u'Доступ',
	"bttn_apply_to_contents"	: u"Наследовать права",
	"edit_access_rules_title"	: u"Управление правами",
	"btn_back_title"			: u"Назад",
	#rights keys (set in proadmin_config)
	"a"							: u'Администратор',
	"w" 						: u'Изменение',
	"r" 						: u'Чтение',
	"o"							: u'Редактирование прав',
	"d"							: u'Удаление',
	"edit_rights"				: u'Владелец',
	"Full"						: u'Полный контроль', #title for selecting all available rights options (widget_acl_rules)


	#Users & Groups Management
	"users_groups_management_title"	: u'Управление пользователями и группами',
	"create_user_btn_text"			: u'Создать пользователя',
	"create_group_btn_text"			: u'Создать группу',
	"users_tab_title"				: u'Пользователи',
	"groups_tab_title"				: u'Группы',
	"fullname_column_header"		: u'Полное имя',
	"groupname_column_header"		: u'Имя группы',
	#User dialog
	"dialog_edit_user_title"		: u'Пользовательские настройки',
	"info_container_title"			: u'Информация',
	"phone"							: u'Телефон',
	"notification_email"			: u'E-mail',
	"country"						: u'Страна',
	"key_words"						: u'Ключевые слова',
	#Group dialog
	"dialog_edit_group_title"		: u'Настройки группы',
	"add_usrs_to_grp_btn_title"		: u'Добавить пользователей',
	"group_name_title"				: u'Имя:',
	"add_group"						: u'Добавить группу',
	"find_user"						: u'Найти пользователя',
	"find_group"					: u'Найти группу',
	#Delete user or group dialog
	"delete_usr_grp_dialog_title"	: u'Вы действительно хотите удалить выбранные объекты?',


	"VEE_AddSmartFolder"			:u'Добавление смарт папки',
	"VEE_DeleteSmartFolder"			:u'Удаление смарт папки',
	"VEE_EditSmartFolder"			:u'Редактирование смарт папки',
	"VEE_AddFileSmartFolder"		:u'Добавление файла в смарт папку',
	"VEE_EditFileSmartFolder"		:u'Редактирование файла в смарт папке',
	"VEE_DeleteFileSmartFolder"		:u'Удаление файла из смарт папки',
	"VEE_AddFile"					:u'Добавление файла',
	"VEE_EditFile"					:u'Редактирование файла',
	"VEE_DeleteFile"				:u'Удаление файла',
	"VEE_DownloadFileFromSmartFolder"	: u"Файл загружен из смарт папки",
	"VEE_SmartFolderOpenByPulicLink"	: u"Смарт папка открыта по публичной ссылке",
	"VEE_AddFolder"					:u"Добавление папки",
	"VEE_RulesChanged"					:u"Access Change",
	"VEE_EditFolder"				:u"Редактирование папки",
	"VEE_DeleteFolder"				:u"Удаление папки",
	"VEE_AddFolderSmartFolder"		:u"Добавление папки в смарт папку",
	"VEE_EditFolderSmartFolder"		:u"Редактирование папки в смарт папке",
	"VEE_DeleteFolderSmartFolder"	:u"Удаление папки из смарт папки",

		#log page
	"log_btn_hide_filter"			: u"Скрыть фильтр",
	"log_btn_show_filter"			: u"Открыть фильтр",
	"log_btn_clear_log"				: u"Очистить лог",
	"log_btn_refresh_log"			: u"Обновить лог",
	"log_filter_text"				: u"Настройка фильтра",
	"log_by_time"					: u"По времени",
	"log_by_plugin_macros"			: u"По плагину/макросу",
	"log_btn_reset_filter"			: u"Сбросить",
	"log_btn_apply_filter"			: u"Применить",
	"log_all_messages"				: u"Все сообщения",
	"log_error"						: u"Ошибка",
	"log_invalid_start_date"		: u"Неправильный формат даты начала.",
	"log_invalid_end_date"			: u"Неправильный формат даты окончания.",
	"log_invalid_start_end"			: u"Дата начала должна быть меньше даты окончания.",


	#Users & Groups Management
		#page titles
			"users_groups_management_title"	: u'Управление пользователями и группами',

		#top bar buttons
			"create_user_btn_text"			: u'Создать пользователя',
			"create_group_btn_text"			: u'Создать группу',
			"add_selected_to_group_btn_text": u"Добавить в группу",

		#tableview
			"users_tab_title"				: u'Пользователи',
			"groups_tab_title"				: u'Группы',

		#datatable header
			"fullname_column_header"		: u'Полное имя',
			"groupname_column_header"		: u'Имя группы',
			"email_column_header"			: u'E-mail',
			"login_column_header"			: u'Логин',
			"group_column_header"			: u'Группы',
			"users_count_column_header"		: u'Количество пользователей',

		#group tab
			"create_new_group_text"			: u'Создать новую группу',
			"create_new_group_btn"			: u'Создать',
			"create_new_group_placeholder"	: u'Имя группы',

		#user dialog
			"dialog_create_user_title"		: u'Новый пользователь',
			"dialog_edit_user_title"		: u'Редактировать пользователя',
			"login_field_title"				: u'Логин',
			"password_field_title"			: u'Пароль',
			"last_name_field_title"			: u'Фамилия',
			"first_name_field_title"		: u'Имя',
			"email_field_title"				: u'E-mail',
			"cell_phone_field_title"		: u'Телефон',
			"country_field_title"			: u'Страна',
			"key_words_field_title"			: u'Ключевые слова',
			"create_continue_btn"			: u'Создать и продолжить',
			"info_cont_title"				: u'Информация',
			"group_cont_title"				: u'Группы',
			"add_groups_btn"				: u'Добавить группу',
			"no_groups_text"				: u'Нет доступных групп',
			"gen_password_btn"				: u'Сгенерировать пароль',
			"send_email_checkbox"			: u'Отослать письмо пользователю',
			"select_groups_text"			: u'Выберите группы:',
			"selected_groups_text"			: u'Количество выделенных групп:',

		#group dialog
			"dialog_create_group_title"		: u'Новая группа',
			"dialog_edit_group_title"		: u'Редактировать группу',
			"name_field_title"				: u'Название',
			"add_users_btn"					: u'Добавить пользователя',
			"no_users_text"					: u'Нет зарегистрированных пользователей',
			"selected_users_text"			: u'Количество выделенных пользователей:',
			"select_users_text"				: u'Выберите пользователей:',
			"search_users_text"				: u'Фильтр пользователей',

		#add user/group dialog
			"dialog_add_user_title"			: u'Поиск пользователей',
			"dialog_add_group_title"		: u'Поиск групп',
			"search_doesnt_find"			: u'По вашему запросу ничего не найдено',
			"search_field_title_user"		: u'Введите имя, фамилию или e-mail',
			"search_field_title_group"		: u'Введите название группы',

		#delete dialog
			"dialog_delete_user_title"		: u'Удалить объекты',
			"dialog_delete_group_title"		: u'Удалить объекты',

		#dialog add users to group
			"dialog_add_to_group_title"		: u'Добавить в группу',
			"to_text"						: u'В:',
			"create_new_group_text"			: u'Создать новую группу',

		"cancel_btn_title"					: u'Отмена',
		"create_btn_title"					: u'Создать',
		"save_btn_title"					: u'Сохранить',
		"delete_selected_btn_title"			: u'Удалить выбранные',
		"add_btn_title"						: u'Добавить',
		"delete_btn_title"					: u'Удалить',
		"dd_all_users"						: u'Все пользователи',
		"show_on_page_text"					: u'Показывать на странице',

		#remote_setting_page
		"settings_remote_page_title" 		: u'Установить схему',
		"text_current_scheme"				: u'Текущая схема',
		"radio_btn_local"					: u'Локальная схема',
		"radio_btn_remote"					: u'Удаленная схема',
		"host"								: u'Хост:',
		"apply_btn"							: u'Принять',
		"test_btn"							: u'Тест соединения',
		"use_settings_btn"					: u'Применить',
		"refresh_btn"						: u'Обновить',
		"last_sync_text"					: u'Последняя синхронизация: ',
		"syns_state_text"					: u'Статус треда синхронизации: ',
		"object_text"						: u'Объекты: ',
		"user_text"							: u'Пользователи: ',
		"connect_ip_success"				: u'Установлена связь с ',
		"connect_ip_fail"					: u'Не установлена связь с указанным IP',
		"open_session_success"				: u'Открыто соединение ',
		"open_session_fail"					: u'Соединение не установлено: неверный логин и пароль',
		"proadmin_connection_fail"			: u'Связя с ProAdmin не установлена: приложения нет по указанному IP или логин и пароль неверны.',
		"at"								: u' на ',
		"test_sso_btn"						: u'Тест SSO',
		"cancel_btn"						: u'Отменить',
		"close_btn"							: u'Закрыть',
		"warning_test_sso"					: u'Вы будете перенаправлены в ProAdmin. Нажмите кнопку "Назад" в вашем браузере, если возникнет ошибка.',
		"success_sso"						: u'SSO работает.',


		#errors
		"fill_all_fields_error"					: u"Пожалуйста, заполните все поля",
		"vscript_not_compiled_error"			: u"VScript не был скомпилирован",
		"type_macros_code_error"				: u"Пожалуйста, напишите код макроса",
		"fill_macros_fields_error"				: u"Пожалуйста, заполните поля макроса",
		"macro_not_defined_error"				: u"ID макса не определен",
		"xml_not_correctr_error"				: u"XML не верна",

		#errors
		"warning_title"					: u'Внимание!',
		"error_title"					: u'Ошибка!',
		"select_objects_error"			: u'Пожалуйста, выделите необходимые объекты.',
		"fill_group_name_field"			: u'Пожалуйста, задайте имя группы.',
		"group_name_already_exists"		: u'Группа с таким именем уже существует.',
		"group_doesnt_exist"			: u'Группа не существует.',
		"fill_all_fields_with_star_error" : u'Пожалуйста, заполните все поля.',
		"user_doesnt_exist_error"		: u'Пользователь не существует. Пожалуйста, обновите страницу.',
		"group_doesnt_exist_error"		: u'Группа не существует. Пожалуйста, обновите страницу.',
		"user_login_already_exist_error": u'Пользователь с таким логином уже существует.',
		"user_email_is_incorrect_error" : u'Введен некорректный e-mail адрес.',
		"user_phone_illegal_characters"	: u'Введен некорректный телефонный номер.',
		"user_password_is_empty_error"	: u'Пожалуйста, введите пароль.',

	############################################################################
	"license" : u"""Это программное обеспечение и документация - собственность компании VDOM Box International. Запрещено преобразовывать, декомпилировать, адаптировать и вносить изменения и поправки. Вы не можете удалять или изменять лицензионную информацию. Передача прав на лицензию другим лицам запрещена. Вы не можете использовать это программное обеспечение на других аппаратных средствах, которые не идут с ним. Один только автор уполномочен выполнить вышеперечисленные операции.
Если Вы совершаете какие-либо из вышеупомянутых действий, Ваши права автоматически аннулированы, и автор может обратиться в суд.
Вам разрешено обладать с целью создания резервных копий только версией файла XML, представляющего собой приложение, сохраненное на внешнем носителе , в сравнении с теми, которые включены в аппаратные средства, запускающие приложение. Вам не разрешено делать копии бумажной документации.
Вы можете устанавливать и использовать программное обеспечение на одном устройстве, управляющем сервером приложений VDOM (обычно VDOM BOX). Лицензией этого программного обеспечения обладает единственный пользователь, идентификационные данные которого сохранены на смарт-карте, подходящей к VDOM BOX. Вы не имеете право передавать лицензию этого программного обеспечения другому пользователю с другим уникальным идентификатором.
Чтобы передать лицензию данного программного обеспечения другому пользователю, следует удалить из смарт-карты идентификационные данные предыдущего пользователя. Право передачи лицензии имеет лишь дистрибьютор данной лицензии.
Используя это программное обеспечение, Вы соглашаетесь соблюдать авторское право и гарантируете выполнение условий авторского права другими пользователями.
Это программное обеспечение защищено законом о праве на интеллектуальную собственность во Франции и за ее пределами - международными конвенциями по авторскому праву (Бернское Соглашение).
Нарушение любого из прав автора данного программного обеспечения является нарушением, наказуемым во Франции в соответствии со Статьей L335-2 Кодекса интеллектуальной собственности.
Гарантия не распространяется на данный продукт. Автор не несет ответственность за какой-либо ущерб, которые возник в процессе прямого или косвенного использования данного программного обеспечения, включая потерю данных или любые денежные убытки, являющиеся результатом использования продукта или неспособности его использования. В любом случае, ответственность автора не может превышать стоимость приобретённой лицензии.
Прежде чем использовать программное обеспечение, Вам следует получить лицензию на право пользования данным продуктом.. Обновление и оригинальная лицензия должны рассматриваться как единый продукт. Вы не уполномочены продавать их отдельно.""",

	"license_button" : u"Лицензия",

	#license page
	"agree_button"				: u'Согласен',
	"disagree_button"			: u'Не согласен',
	"close_button"				: u'Закрыть',
	"disagree_warning"			: u'Вам нужно согласиться с лицензией, чтобы использовать продукт',
	"select_operation_mode"		: u'Выберите режим работы приложения:',
	"standalone_mode"			: u'Автономная работа',
	"proadmin_mode"				: u'ProAdmin соединение',
	"proadmin_page_warning"		: u'Вы можете установить ProAdmin соединение на специальной странице.',
	"go_button"					: u'Вперед',
	"password_title"			: u'Установить пароль администратора:',
	"password_field"			: u'Пароль:',
	"confirm_password_field"	: u'Подтверждение пароля:',
	"apply_password"			: u'Принять',

	#proadmin_v2
	"system_login_title"			: u'Системный логин',
	"system_account"				: u'Системный аккаунт:',
	"login_btn"						: u'Логин',
	"users_container_label"			: u'Пользователи',
	"incorrect_login"				: u'Неверный логин или пароль',
	"no_vdom"						: u'Не VDOM сервер',
	"standalone"					: u'Автономная работа',
	"proadmin_connection"			: u'Связь с ProAdmin',
	"restart_connectoin_btn"		: u'Обновить соединение',
	"reset_btn"						: u'Сбросить',
	"greating_title"				: u'Выполнен вход в ProSuite как %s',
	"account_column"				: u'Логин',
	"name_column"					: u'Имя',
	"login_column"					: u'Войти как',
	"standalone_text"				: u'Что такое автономная работа?',
	"proadmin_text"					: u'Что такое ProAdmin соединение?',
	"logout_hint"					: u'нажмите, чтобы разложиниться из ProSuite',
	"user_not_logged_in"			: u'Не выполнен вход в ProSuite...',
	"proadmin_management"			: u'Управление ProAdmin',
	"user_management"				: u'Управление пользователями',

	#log off/start button
	"switch_to"						: u"Перейти в",
	"logout"						: u"Выйти",
	"logoff_caption"				: u"Вы вышли из системы",
	"logoff_message"				: u"Через несколько секунд вы будете перемещены на страницу входа.",

	#free_space
	"Gb"			:u'Гб',
	"Mb"			:u'Мб',
	"of"			:u' из ',
	"free"			:u' свободно',
}

lang_rectangle = {
	#'id' 							: 	[ 	left,		top,	width,	height 	]
	"user_and_group_manage"	: {
		#top bar
			"top_bar_create_user_btn"		: 	[	"18", 	"85", 	"75", 	"35" 	],
			"top_bar_delete_selected_btn" 	: 	[ 	"103", 	"85", 	"98", 	"35" 	],
			"top_bar_add_to_group_btn"		: 	[ 	"211", 	"85", 	"95", 	"35" 	],
			"top_Bar_create_group_btn"		:	[	"18",	"85",	"77",	"35"	],

		#add to group dialog
			"add_to_group_to_title_text"	:	[ 	"17",	"155",	"15",	"14"	],

		#add user group dialog
			"add_ug_cancel_btn"				:	[	"218",	"397",	"80",	"33"	],
			"add_ug_add_btn"				:	[	"310",	"397",	"80",	"33"	],

		#create user dialog
			"continue_btn"					:	[	"111",	"582",	"188",	"25"	],
			"add_groups_btn"				:	[	"14",	"27",	"140",	"32"	],
			"del_sel_groups_btn"			:	[	"160",	"27",	"180",	"32"	],
			"selected_users_text"			:	[	"19",	"364",	"240",	"14"	],
			"selected_groups_text"			:	[	"8",	"446",	"185",	"14"	],
			"selected_users_count"			:	[	"255",	"364",	"50",	"14"	],
			"selected_groups_count"			:	[	"200",	"446",	"50",	"14"	],

			"objects_per_page_dropdown"		: 	[	"145",	"1",	"52",	"22"	],

		}
}

]]>
		</Library>
		<Library Name="ProSuiteLogsPage">
<![CDATA["""
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 23:45 (RTZ +5)"

import copy
import json
import logging
import os
import time

from collections import OrderedDict

from ext_enum import Enum
from prosuite_logging import logs_in_memory, manager as logs_manager, app_logger
from prosuite_utils import CachedProperty, escape_w_quote
from prosuite_web import ProSuiteBasicPage, administrator_only,\
                         authenticated, callback

# Shared Variables
LAST_RECORD_SV = "logs.lastrecord"
LOG_LEVEL_SV = "logs.level"
LOGGERS_SV = "logs.loggers"


LOGS_TIMER_UPDATE = 5000


TIME_CONVERTER = time.localtime


LOG_ROW_TEMPLATE = (u"<tr><td class='text-center cut-out-text'>{datetime}</td>"
                    u"<td class='text-center cut-out-text'>{lvl}</td>"
                    u"<td class='cut-out-text'>{name}</td><td><div><pre>{msg}</pre></div>"
                    u"</td></tr>")


class LogLevel(Enum):

    CRITICAL = logging.CRITICAL
    FATAL = logging.FATAL
    ERROR = logging.ERROR
    WARNING = logging.WARNING
    WARN = logging.WARN
    INFO = logging.INFO
    DEBUG = logging.DEBUG



class ProSuiteLogsPage(ProSuiteBasicPage):

    @callback('request_start', 2)
    @authenticated
#    @administrator_only
    def on_request_start(self, *args, **kwargs):
        pass

    @callback('onload', 2)
    def onload(self, *args, **kwargs):
        """
        On page loading
        """
        try:
            download_f = int(self.get_argument("download", None))

        except Exception as  ex:
            download_f = None

        if download_f is not None:
            self.get_log_file(download_f)
            return

        self.render_logs_table()
        self.render_loggers()
        self.render_log_levels()


    @callback('update', 1)
    def update_logs(self, *args, **kwargs):
        """
        Refresh logs data
        """
        self.page.action("custom", [u"{}({})".format(
            self.logs_update_js_func,
            json.dumps(escape_w_quote(self.logs_to_html())))
        ])

        self.vdom_objects["logs.timer"].action("start", [LOGS_TIMER_UPDATE])

    @callback('files', 1)
    def show_log_files(self, *args, **kwargs):
        """
        Show list of available log files
        """
        path_to_logs = application.storage.abs_path(os.path.dirname(self.app_settings.logging["file"]))
        files = sorted(os.listdir(path_to_logs))
        files_html = [u"""<li><a href="?download={}">{}</a></li>""".format(i, files[i]) for i in range(0, len(files))]

        self.vdom_objects["dialogs.download.files"].htmlcode = "".join(files_html)
        self.vdom_objects["dialogs.download"].action("show", [""])


    @CachedProperty
    def datetime_format(self):
        return self.localization["global.datetime_format"]

    @CachedProperty
    def record_formatter(self):
        return logs_in_memory.format

    @CachedProperty
    def logs_update_js_func(self):
        return "setLogsToTable" if self.get_argument("formid", "") else \
               "appendLogsToTable"

    @CachedProperty
    def _available_loggers(self):
        return [logger for logger in logs_manager.loggerDict.keys() \
                 if logger.startswith(app_logger.name)]

    @property
    def available_loggers(self):
        return self._available_loggers


    @CachedProperty
    def _last_record_ts(self):
        # timestamp of last displayed record
        last_record_ts = 0.0

        # if there is no submitted form get value from SV
        # or from request args
        if not self.get_argument("formid", ""):
            try:
                last_record_ts = float(self.get_argument("ts", 0.0) or self.shared_vars.get(LAST_RECORD_SV, 0.0))
            except:
                pass

        self.shared_vars[LAST_RECORD_SV] = last_record_ts

        return last_record_ts

    @property
    def last_record_ts(self):
        return self._last_record_ts

    @last_record_ts.setter
    def last_record_ts(self, value):
        self._last_record_ts = self.shared_vars[LAST_RECORD_SV] = value


    @CachedProperty
    def _log_level(self):
        # check is arg in request or not
        log_level = self.get_argument("lv", "")

        # if it is action check is form submitted or not
        if self.is_action():

            if self.get_argument("formid", "") == "loglevel":

                try:
                    log_level = json.loads(log_level)
                except:
                    log_level = log_level

            else:
                # exception will be raised only
                # if such arg is not in request args
                log_level = self.shared_vars.get(LOG_LEVEL_SV, None)

        else:
            log_level = log_level.split(",")

        if not isinstance(log_level, (list, tuple)):
            log_level = [log_level]

        result = []
        for level in log_level:
            if level:
                try:
                    result.append(LogLevel(int(level)).value)
                except:
                    pass

        if result:
            self.shared_vars[LOG_LEVEL_SV] = result

        else:
            self.shared_vars[LOG_LEVEL_SV] = None

        return result

    @property
    def log_level(self):
        return self._log_level

    @log_level.setter
    def log_level(self, value):
        self._log_level = self.shared_vars[LOG_LEVEL_SV] = value


    @CachedProperty
    def _loggers(self):
        # check is arg in request or not
        loggers = self.get_argument("lg", "")

        # if it is action check is form submitted or not
        if self.is_action():

            if self.get_argument("formid", "") == "logger":

                try:
                    loggers = json.loads(loggers)
                except:
                    loggers = loggers

            else:
                # exception will be raised only
                # if such arg is not in request args
                loggers = self.shared_vars.get(LOGGERS_SV, None)

        else:
            loggers = loggers.split(",")

        if not isinstance(loggers, (list, tuple)):
            loggers = [loggers]

        loggers = [logger for logger in loggers if logger in self.available_loggers]
        if loggers:
            self.shared_vars[LOGGERS_SV] = loggers

        else:
            self.shared_vars[LOGGERS_SV] = None

        return loggers

    @property
    def loggers(self):
        return self._loggers

    @loggers.setter
    def loggers(self, value):
        self._loggers = self.shared_vars[LOGGERS_SV] = value



    def format_time(self, record):
        """
        Format record's timestamp
        """
        return time.strftime(self.datetime_format, TIME_CONVERTER(record.created))

    def format_record(self, record):
        """
        Render logs record
        """
        try:
            msg = escape_w_quote(self.record_formatter(record))
        except:
            msg = self.localization["prosuite.logs.table.msg.error.cantformat"]

        return LOG_ROW_TEMPLATE.format(
            datetime=self.format_time(record),
            lvl=record.levelname,
            name=record.name,
            msg=msg
        )

    def logs_to_render(self):
        """
        Return filtered logs list
        """
        # copy logs to avoid mutations during iterations
        logs = copy.copy(logs_in_memory.buffer)

        if self.last_record_ts and logs:
            logs = filter(lambda rec: rec.relativeCreated > self.last_record_ts, logs)

        if self.log_level and logs:
            logs = filter(lambda rec: rec.levelno in self.log_level, logs)

        if self.loggers and logs:
            logs = filter(lambda rec: rec.name in self.loggers, logs)

        return logs

    def logs_to_html(self):
        """
        Render logs data to HTML
        """
        logs = self.logs_to_render()

        out =  "".join(map(self.format_record, reversed(logs)))

        if logs:
            self.last_record_ts = logs[-1].relativeCreated

        return out

    def render_logs_table(self):
        """
        Render logs table
        """
        self.vdom_objects["logs.data"].htmlcode = self.vdom_objects["logs.data"].htmlcode.format(
            th_date=self.localization["prosuite.logs.table.header.date"],
            th_lvl=self.localization["prosuite.logs.table.header.lvl"],
            th_name=self.localization["prosuite.logs.table.header.name"],
            th_msg=self.localization["prosuite.logs.table.header.msg"],
            table_body=self.logs_to_html()
        )

    def render_loggers(self):
        loggers = sorted(self.available_loggers)
        spacer = "-"

        result = OrderedDict()
        for logger in loggers:
            chain = logger.split(".")
            result[logger] = "{} {}".format(
                spacer * (len(chain) - 1),
                chain[-1]
            )

        self.vdom_objects["popup.loggers.form.list"].value = json.dumps(result)
        if self.loggers:
            self.vdom_objects["popup.loggers.form.list"].selectedvalue = json.dumps(self.loggers)

    def render_log_levels(self):
        self.vdom_objects["popup.loglevel.form.list"].value = json.dumps({
            str(lvl.value): logging.getLevelName(lvl.value) for lvl in LogLevel
        })
        if self.log_level:
            self.vdom_objects["popup.loglevel.form.list"].selectedvalue = json.dumps(map(str, self.log_level))

    def get_log_file(self, fnum):
        """
        Send in response requested log file
        """
        fname_suffix = ".{}.gz".format(fnum) if fnum else ""
        fname = self.app_settings.logging["file"] + fname_suffix

        if application.storage.exists(fname):
            response.send_file(os.path.split(fname)[1], application.storage.getsize(fname), application.storage.open(fname))

    def get_page_title(self):
        return self.localization["prosuite.logs.title"]

    def get_localization_data(self):
        return {
            self.vdom_objects["topbar.download.btn"]: "prosuite.logs.header.download_logs",
            self.vdom_objects["topbar.autoupdate.btn"]: "prosuite.logs.header.autoupdate.button",
            self.vdom_objects["dialogs.download"]: "prosuite.logs.download_logs.title",
            self.vdom_objects["dialogs.download.close"]: "prosuite.logs.download_logs.close",
            self.vdom_objects["popup.loglevel.form.hide"]: "prosuite.logs.popup.loglevel.hide",
            self.vdom_objects["popup.loglevel.form.reset"]: "prosuite.logs.popup.loglevel.reset",
            self.vdom_objects["popup.loglevel.form.submit"]: "prosuite.logs.popup.loglevel.submit",
            self.vdom_objects["popup.loggers.form.hide"]: "prosuite.logs.popup.loggers.hide",
            self.vdom_objects["popup.loggers.form.reset"]: "prosuite.logs.popup.loggers.reset",
            self.vdom_objects["popup.loggers.form.submit"]: "prosuite.logs.popup.loggers.submit",
        }
]]>
		</Library>
		<Library Name="proadmin_time_trigger">
<![CDATA[from utils.threads import VDOM_thread


class BackgroundThread( VDOM_thread ):
	def __init__( self, app_id=None ):
		VDOM_thread.__init__( self, name = 'time trigger' )

		# sometimes need to set applicatino id
		self.app_id = app_id

		# is daemon thread
		self.daemon = True


	def define_application( self ):
		try:
			if self.app_id:
				application.set_app_id( self.app_id )
		except:
			pass



class ProAdminTimeTrigger( BackgroundThread ):
	# default wait timeout
	DEFAULT_TIMEOUT = 60.0

	def __init__( self ):
		BackgroundThread.__init__( self, app_id = application.id )

		self.procedure = None


	def work( self ):
		try:
			self.save_thread()
			return self.execute()
		except:
			try:
				return ProAdminTimeTrigger.DEFAULT_TIMEOUT
			except:
				self.stop()


	def execute( self ):
		timeout = None
		self.define_application()

		if self.procedure:
			import ProAdmin
			timeout = self.procedure( ProAdmin.scheme() )

		return timeout if timeout else ProAdminTimeTrigger.DEFAULT_TIMEOUT


	def save_thread( self ):
		try:
			import ProAdmin
			ProAdmin.sync_thread = self
		except:
			pass


	def set_action( self, procedure ):
		self.procedure = procedure

	def unset_action( self ):
		self.procedure = None

]]>
		</Library>
		<Library Name="prosuite_web">
<![CDATA["""
ProSuite Web Utils and Classes
"""

import md5
import threading
import time
import urlparse

from collections import defaultdict, OrderedDict
from functools import wraps
from urllib import urlencode
from UserDict import DictMixin
from uuid import uuid4

from promail_tasks import tasks
from prosuite_errors import ProSuiteBaseError
from prosuite_localization import get_localization
from prosuite_logging import app_logger
from prosuite_settings import settings
from prosuite_user import ProSuiteUser
from prosuite_utils import CachedProperty




##############################
#
# Global Private Constants
#
##############################

# Default value for function arguments
_DEFAULT_VALUE = []

# Growl types
_GROWL_TYPES = ("show", "showInformation", "showWarning", "showError")

# Cookie max age
_COOKIE_MAX_AGE = str(60 * 60 * 24 * 365)



##############################
#
# Module Exceptions
#
##############################

class MissingRequestDataError(KeyError):
    """
    Missing Data in Request Error
    """
    pass


class MissingArgumentError(MissingRequestDataError):
    """
    Missing request argument error
    """
    pass


class MissingSharedVariableError(MissingRequestDataError):
    """
    Missing shared variable error
    """
    pass


class MissingCookieError(MissingRequestDataError):
    """
    Missing cookie error
    """
    pass


class RequestSessionError(Exception):
    """
    Request session error
    """
    pass


class RequestSessionDoesntExist(RequestSessionError):
    """
    Request session not exists
    """
    pass


class RequestSessionInvalidKey(RequestSessionError):
    """
    Request session not exists
    """
    pass


class RedirectException(Exception):
    """
    Redirect exception
    """
    def __init__(self, redirect_to, params=None, back_url=""):
        super(RedirectException, self).__init__()
        self.back_url = back_url
        self.params = params
        self.redirect_to = redirect_to




##############################
#
# Request Storage Implemeation
#
##############################

class RequestStorageMeta(type):
    """
    Request Storage Meta Class
    """
    def __new__(mcs, classname, bases, classDict):

        # handler prefixes
        prefixes = ("get", "set", "del")
        handlers_attr_t = "%s_handlers"
        func_attr_t = "%s_key"

        for prefix in prefixes:

            h_attr = handlers_attr_t % prefix
            f_attr = func_attr_t % prefix

            handlers = classDict[h_attr] = {}

            for base in bases:
                handlers.update(getattr(base, h_attr, {}))

            for item in classDict.itervalues():
                if hasattr(item, f_attr):
                    handlers[getattr(item, f_attr)] = item

        return type.__new__(mcs, classname, bases, classDict)


class RequestStorage(dict):

    __metaclass__ = RequestStorageMeta

    @staticmethod
    def get_handler(key):
        """
        Decorator to mark method as missing key handler
        """
        def wrapper(func):
            func.get_key = key
            return func

        return wrapper

    @staticmethod
    def set_handler(key):
        """
        Decorator to mark method as set key handler
        """
        def wrapper(func):
            func.set_key = key
            return func

        return wrapper

    @staticmethod
    def del_handler(key):
        """
        Decorator to mark method as del key handler
        """
        def wrapper(func):
            func.del_key = key
            return func

        return wrapper

    def __init__(self, delegate, *args, **kwargs):
        super(RequestStorage, self).__init__(*args, **kwargs)
        self.delegate = delegate

    def __missing__(self, key):
        if key not in self.get_handlers:
            raise KeyError(key)

        value = self.get_handlers[key](self)
        super(RequestStorage, self).__setitem__(key, value)
        return value

    def __setitem__(self, key, value):
        super(RequestStorage, self).__setitem__(key, value)
        if key in self.set_handlers:
            self.set_handlers[key](self, value)

    def __delitem__(self, key):
        value = super(RequestStorage, self).pop(key, None)
        if key in self.del_handlers:
            self.del_handlers[key](self, value)

    get_by_key = dict.__getitem__
    del_by_key = dict.__delitem__
    set_by_key = dict.__setitem__


##############################
#
# Request session
#
##############################

class RequestSession(dict):

    def __init__(self):
        super(RequestSession, self).__init__()
        self._last_access = time.time()

    @property
    def last_access(self):
        return self._last_access

    def touch(self):
        self._last_access = time.time()


class RequestSessionManager(object):

    GLOB_LOCK = threading.Lock()
    TIMEOUT = 60.0 * 3

    def __init__(self):
        self._request_sessions = {}

    def count(self):
        """
        Return count of registered instances
        """
        return len(self._request_sessions)

    def remove_expired(self):
        """
        Remove expired instances from dict
        """
        now = time.time()
        return [self.remove_if_expired(key, now) for key in self._request_sessions.keys()[:]].count(True)

    def remove_if_expired(self, key, now):
        """
        Remove instance from dict if expired
        """
        with self.GLOB_LOCK:
            inst = self._request_sessions.get(key, None)
            if inst is not None and (inst.last_access + self.TIMEOUT < now):
                self._request_sessions.pop(key, None)
                return True

            return False

    def remove_request_session(self, key):
        """
        Remove instance from dict
        """
        with self.GLOB_LOCK:
            return self._request_sessions.pop(key, None)

    def get_request_session(self, key):
        """
        Return instance from dict if exists
        """
        with self.GLOB_LOCK:
            inst = self._request_sessions.get(key, None)
            if inst is not None:
                inst.touch()

            return inst

    def pop_request_session(self, key):
        """
        Remove instance from dict and return it
        """
        with self.GLOB_LOCK:
            inst = self._request_sessions.pop(key, None)
            if inst is not None:
                inst.touch()

            return inst

    def put_request_session(self, key, inst):
        """
        Put instance to dict
        """
        with self.GLOB_LOCK:
            inst.touch()
            self._request_sessions[key] = inst

    def create_request_session(self):
        """
        Return new instance
        """
        return RequestSession()


RequestSessionManager = RequestSessionManager()



##############################
#
# Shared Variables Implemetation
#
##############################

class SharedVariables(DictMixin):

    def __init__(self):
        # copy all existing SVs in request
        sv = request.shared_variables
        self.data = {key: sv[key] for key in sv.keys()}

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value
        response.shared_variables[key] = value

    def __delitem__(self, key):
        # silently delete value by key
        self.data.pop(key, None)
        try:
            del response.shared_variables[key]
        except:
            pass




##############################
#
# Helpers Functions
#
##############################
def message_to_ul_li(msg):
    if isinstance(msg, (list, tuple)):
        msg = u"<ul>{}</ul>".format(u"".join([
            u"<li>{}</li>".format(item) for item in msg
        ]))

    return msg



##############################
#
# Callbacks logic implemetation
#
##############################

def callback(name, order=0):
    """
    Decorator to mark method as callback
    """
    def decorator_func(func):
        if not hasattr(func, "_callbacks"):
            func._callbacks = defaultdict(list)

        func._callbacks[name].append(order)
        return func

    if callable(name):
        func = name
        name = func.__name__
        return decorator_func(func)

    return decorator_func


class BasePageMetaClass(type):
    """
    Metaclass for Page Controllers
    """
    def __new__(mcs, classname, bases, classDict):

        # callbacks will have structure like
        # {
        #   "callback_name": {
        #       1: func_1,
        #       10: func_2
        #   }
        # }
        callbacks = {}

        # check callbacks in parent classes
        for base in bases:

            if not (hasattr(base, "callbacks") and base.callbacks):
                continue

            for name in base.callbacks:
                if name not in callbacks:
                    callbacks[name] = {}

                callbacks[name].update(base.callbacks[name])

        # check callbacks in new class
        for item in classDict.itervalues():

            if not hasattr(item, "_callbacks"):
                continue

            for name, order in item._callbacks.items():
                if name not in callbacks:
                    callbacks[name] = {}

                for i in order:
                    callbacks[name][i] = item

                callbacks[name] = OrderedDict(sorted(callbacks[name].items(), key=lambda x: x[0]))

        classDict["callbacks"] = callbacks
        return super(BasePageMetaClass, mcs).__new__(mcs, classname, bases, classDict)


class BasePageController(object):

    __metaclass__ = BasePageMetaClass

    def __init__(self, page):

        # current action name
        self._action_name = ""

        # current user
        self._current_user = None

        # logger
        self._logger = None

        # is action mode
        self._is_action = None

        # page object
        self._page = page

        # shared vars
        self._shared_vars = SharedVariables()

        # dictionary with VDOM objects
        self.vdom_objects = {}

        # init functions depends on request mode
        self._init_implementation()

    ###########################################
    # <<<<<<<<<<<< Properties >>>>>>>>>>>>>>> #
    ###########################################

    @property
    def action_name(self):
        return self._action_name

    @property
    def app_settings(self):
        return self.get_application_settings()

    @property
    def current_user(self):
        if self._current_user is None:
            self._current_user = self.get_current_user()

        return self._current_user

    @property
    def logger(self):
        if self._logger is None:
            self._logger = app_logger.getChild("Pages").getChild(self.__class__.__name__)

        return self._logger

    @property
    def page(self):
        return self._page

    @property
    def shared_vars(self):
        return self._shared_vars

    @property
    def request_session_manager(self):
        return RequestSessionManager


    ###########################################
    # <<<<<<<< Methods to override >>>>>>>>>> #
    ###########################################

    def get_application_settings(self):
        raise NotImplementedError

    def get_current_user(self):
        raise NotImplementedError

    def get_home_url(self):
        raise NotImplementedError

    def get_localization(self):
        raise NotImplementedError

    def get_localization_data(self):
        raise NotImplementedError

    def get_login_url(self):
        raise NotImplementedError

    def get_logout_url(self):
        raise NotImplementedError

    def is_debug(self):
        raise NotImplementedError

    ###########################################
    # <<<<<<<<<<<<< Main logic >>>>>>>>>>>>>> #
    ###########################################

    def execute_callbacks(self, name, *args, **kwargs):
        """
        Call registered callbacks by name
        """
        callbacks = self.callbacks.get(name, {}).items()
        for order, func in callbacks:
            func(self, *args, **kwargs)

        return len(callbacks)

    def run(self, action):
        """
        Run request processing
        """
        self._action_name = action
        self._work()

    def _work(self):
        """
        Main logic
        """
        try:
            self.execute_callbacks('request_start', action=self._action_name)
            self.execute_callbacks(self._action_name)

        finally:
            self.execute_callbacks('request_done', action=self._action_name)

    ###########################################
    # <<<<<<<<< Localization logic >>>>>>>>>> #
    ###########################################

    @CachedProperty
    def localization(self):
        return self.get_localization()

    def localize_page(self):
        self.localization.controls = self.get_localization_data()
        self.localization.localize()

    ###########################################
    # <<<<<<<<<<<<< Request info >>>>>>>>>>>> #
    ###########################################

    def current_host(self):
        return request.server.host

    def current_page(self):
        uri = request.environment.get("REQUEST_URI", "")
        referer = request.environment.get("HTTP_REFERER", "")

        try:
            return urlparse.urlsplit(referer if self.is_action() else uri).path
        except:
            return ""

    def current_page_id(self):
        return request.container.id

    def current_protocol(self):
        if request.environment.get("SERVER_PORT", "80") == "443":
            return "https"

        return request.protocol.name.lower()

    def current_query( self ):
        try:
            return request.environment.get("QUERY_STRING", "")
        except:
            return ""

    def current_uri( self ):
        return self.current_page() + "?" + self.current_query()

    def full_url( self ):
        return self.current_protocol() + "://" + self.current_host() +\
                self.current_page() + "?" + self.current_query()

    def is_action(self):
        if self._is_action is None:
            try:
                self._is_action = request.render_type == "e2vdom"

            except:
                self._is_action = False

        return self._is_action

    ###########################################
    # <<<<<<<<<<<< Redirect logic >>>>>>>>>>> #
    ###########################################

    def generate_redirect_url(self, url, params=None, back_url=""):
        """
        Generate redirect URL
        """
        params = params or {}

        if back_url:
            params["back_url"] = back_url

        url = urlparse.urlsplit(url)

        return u"{scheme}{netloc}{path}{question}{query}{concat}{params}{fragment}".format(
            scheme = (url.scheme + u"://") if url.scheme else u"",
            netloc = url.netloc,
            path   = url.path,
            query  = url.query,
            fragment = (u"#" + url.fragment) if url.fragment else u"",
            concat = u"" if not params else u"&" if url.query else u"?",
            question = u"" if not url.query else u"?",
            params = urlencode(params)
        )

    def redirect(self, redirect_to, params=None, back_url="", terminate=False):
        """
        Redirect to URL and generate back URL
        """
        if params or back_url:
            redirect_to = self.generate_redirect_url(redirect_to, params, back_url)

        if terminate:
            raise RedirectException(redirect_to)

        if self.is_action():
            self.page.action('goTo', [redirect_to])

        else:
            response.redirect(redirect_to)

    ###########################################
    # <<<<<<<<<< Render mode impl >>>>>>>>>>> #
    ###########################################

    def _init_implementation(self):
        if self.is_action():
            self.show_object = self.show_object_action
            self.hide_object = self.hide_object_action
            self.show_growl = self.show_growl_action

        else:
            self.show_object = self.show_object_onload
            self.hide_object = self.hide_object_onload
            self.show_growl = self.show_growl_onload

    def show_object_action(self, vdom_object):
        vdom_object.action("show", [""])

    def show_object_onload(self, vdom_object):
        vdom_object.visible = "1"

    def hide_object_action(self, vdom_object):
        vdom_object.action("hide", [""])

    def hide_object_onload(self, vdom_object):
        vdom_object.visible = "0"

    def show_growl_action(self, msg, title="", growl_t="show"):
        self.growl.action(growl_t, [title, message_to_ul_li(msg), False])

    def show_growl_onload(self, msg, title="", growl_t="show"):
        self.growl.title = title
        self.growl.text = message_to_ul_li(msg)
        self.growl.active = "1"
        self.growl.style = _GROWL_TYPES.index(growl_t)

    ###########################################
    # <<<<<<<<< Growl Notification >>>>>>>>>> #
    ###########################################

    @property
    def growl(self):
        return self.vdom_objects["growl"]

    def show_error_growl(self, text, title=""):
        self.show_growl(growl_t="showError", msg=text, title=title)

    def show_info_growl(self, text, title=""):
        self.show_growl(growl_t="showInformation", msg=text, title=title)

    def show_warning_growl(self, text, title=""):
        self.show_growl(growl_t="showWarning", msg=text, title=title)

    ###########################################
    # <<<<<<<<<<<<< Request args >>>>>>>>>>>> #
    ###########################################

    def get_argument(self, key, default=_DEFAULT_VALUE, strip=True, castto=None):
        value = request.arguments.get(key, default=default, castto=castto)
        if value is _DEFAULT_VALUE:
            raise MissingArgumentError(key)

        return value.strip() if strip and value is not default else value

    def get_cookie(self, key, default=_DEFAULT_VALUE):
        key = key.encode("utf8")
        value = request.cookies.get(key)
        if value is None and default is _DEFAULT_VALUE:
            raise MissingCookieError(key)

        return value.value if value else default

    def set_cookie(self, key, value, age=_COOKIE_MAX_AGE, **kwargs):
        key = key.encode("utf8")
        response.cookies[key] = value
        response.cookies[key]['max-age'] = age

        for arg in kwargs:
            response.cookies[key][arg] = kwargs[key]

    def del_cookie(self, key):
        key = key.encode("utf8")
        response.cookies.pop(key, None)


##############################
#
# Decorators
#
##############################

def authenticated(method):
    """authenticated decorator
    """
    @wraps(method)
    def wrapper(self, *args, **kwargs ):
        if not self.current_user:
            # redirect to login page
            raise RedirectException(self.get_login_url(), back_url=self.current_uri())

        return method(self, *args, **kwargs)

    return wrapper


def administrator_only(method):
    """authenticated decorator
    """
    @wraps(method)
    def wrapper(self, *args, **kwargs ):
        if not self.current_user.is_admin():
            # redirect to login page
            raise RedirectException(self.get_home_url())

        return method(self, *args, **kwargs)

    return wrapper


def error_handler(method):
    """error handler decorator
    """
    @wraps(method)
    def wrapper(self, *args, **kwargs):
        try:
            return method(self, *args, **kwargs)

        except RedirectException as ex:
            self.redirect(
                ex.redirect_to,
                back_url=ex.back_url,
                params=ex.params
            )

        except MissingRequestDataError:
            if self.is_debug():
                raise

            self.show_error_growl(
                self.localization["global.invalid_request.text"],
                self.localization["global.invalid_request.title"]
            )

        except RequestSessionError as ex:
            self.show_error_growl(
                self.localization["global.invalid_request_session.text"],
                self.localization["global.invalid_request_session.title"]
            )

        except ProSuiteBaseError as ex:
            if not self.execute_callbacks('request_failed', exc=ex) and self.is_debug():
                raise

        except Exception as ex:

            eid = uuid4().hex[:6]
            self.logger.exception("[EID=%s] Unhandled exception caught!!!", eid)
            if self.is_debug():
                raise

            self.redirect(self.get_server_500_error_url(), params={
                'eid': eid,
                'back_url': self.current_uri()
            })

    return wrapper


class ProSuiteBasicPage(BasePageController):

    def get_application_settings(self):
        return settings

    def get_current_user(self):
        return ProSuiteUser.current_user()

    def get_home_url(self):
        return self.app_settings.pages["home"]

    def get_localization(self):
        return get_localization()

    def get_login_url(self):
        return self.app_settings.pages["login"]

    def get_logout_url(self):
        return self.app_settings.pages["logoff"]

    def get_page_title(self):
        raise NotImplementedError

    def get_server_500_error_url(self):
        return self.app_settings.pages["server500"]

    def is_debug(self):
        return self.app_settings.system["debug"]

    def localize_page(self):
        self.page.title = self.app_settings.localization["page_title"].format(
            app_name=self.app_settings.info["name"],
            page_name=self.get_page_title()
        )
        super(ProSuiteBasicPage, self).localize_page()



    def compute_request_session_key(self, uuid):
        return md5.new("".join([
            session.id,
            self.current_user.guid if self.current_user else "",
            self.page.name,
            uuid
        ])).hexdigest()

    def generate_request_session_key(self):
        """
        Generate unique request session key
        """
        uuid = uuid4().hex
        return self.compute_request_session_key(uuid), uuid

    def verify_request_session_key(self, key, uuid):
        """
        Generate unique request session key
        """
        return self.compute_request_session_key(uuid) == key

    @property
    def request_session(self):
        """
        If session not fetched - fetch its SID from shared vars
        then try to find session, if session not exists:
        1. if it is action - show growl and refresh page
        2. if it is onload - create new instance
        """
        if not hasattr(self, "_request_session"):
            rqsid = self.shared_vars.pop("rqsid", "")
            rqses = self.request_session_manager.pop_request_session(rqsid)

            if not rqses:
                if self.is_action():
                    raise RequestSessionDoesntExist

                rqses = self.request_session_manager.create_request_session()

            else:
                uuid = rqses["rqsid_uuid"]
                if not self.verify_request_session_key(rqsid, uuid):
                    raise RequestSessionInvalidKey

            self._request_session = rqses

        return self._request_session

    def has_request_session(self):
        return hasattr(self, "_request_session")

    @callback("request_done", 1)
    def save_request_session(self, *args, **kwargs):
        if self.has_request_session():
            key, uuid = self.generate_request_session_key()
            self.request_session["rqsid_uuid"] = uuid
            self.shared_vars["rqsid"] = key
            self.request_session_manager.put_request_session(key, self.request_session)


    @error_handler
    def run(self, *args, **kwargs):
        super(ProSuiteBasicPage, self).run(*args, **kwargs)

    @callback("onload", 1)
    def onload_localization(self, *args, **kwargs):
        self.localize_page()



#######################################
# Cleaner task - remove expired request session storage
# unique task (it means it will have only single record for given set of params)
# repeat it every 20 minutes

TASK_TIMEOUT = RequestSessionManager.TIMEOUT


@tasks.background_other(unique=True, repeat_every=TASK_TIMEOUT, repeat_times=-1)
def clean_request_sessions():

    app_logger.getChild("RQSClenaer").debug(
        "RQS task done, %d removed", RequestSessionManager.remove_expired()
    )


clean_request_sessions()



]]>
		</Library>
		<Library Name="ProSuiteSettingsPage">
<![CDATA["""
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 23:10 (RTZ +5)"


from prosuite_web import ProSuiteBasicPage, administrator_only,\
                         authenticated, callback


class ProSuiteSettingsPage(ProSuiteBasicPage):

    @callback('request_start', 2)
    @authenticated
    @administrator_only
    def on_request_start(self, *args, **kwargs):
        pass

    def get_page_title(self):
        return self.localization["prosuite.settings.title"]

    def get_localization_data(self):
        return {
            self.vdom_objects["settings.plugins"]: "prosuite.settings.plugins.title",
            self.vdom_objects["settings.remote_control"]: "prosuite.settings.remote_control.title",
            self.vdom_objects["settings.users_and_groups"]: "prosuite.settings.users_and_groups.title",
            self.vdom_objects["settings.rules"]: "prosuite.settings.rules.title",
            self.vdom_objects["settings.cleaner"]: "prosuite.settings.cleaner.title",
            self.vdom_objects["settings.servers"]: "prosuite.settings.servers.title",
            self.vdom_objects["settings.title"]: "prosuite.settings.pagetitle",
            self.vdom_objects["settings.header.proadmin"]: "prosuite.settings.header.proadmin",
            self.vdom_objects["settings.header.plugins"]: "prosuite.settings.header.plugins",
            self.vdom_objects["settings.header.general"]: "prosuite.settings.header.general",
        }
]]>
		</Library>
		<Library Name="ext_xapian_orm">
<![CDATA[# encoding: utf8
"""
Xapian ORM (based on 'peewee' code)
"""

import datetime
import json
import operator
import os
import threading
import time
import uuid
import xapian

from collections import deque
from copy import deepcopy
from UserDict import DictMixin


__all__ = (
    "BooleanField",
    "Database",
    "DateTimeField",
    "Document",
    "Field",
    "FloatField",
    "IntegerField",
    "NumericField",
    "PhraseQuery",
    "QueryParser",
    "QueryString",
    "smart_str",
    "TextField",
    "UUIDField",
)


unicode_type = unicode
string_type = basestring
binary_construct = buffer


# types which can't be converted to strings via smart_str
_PROTECTED_TYPES = (
    int,
    long,
    type(None),
    float,
    datetime.datetime,
    datetime.date,
    datetime.time
)


class attrdict(dict):
    def __getattr__(self, attr):
        return self[attr]


# Operators used in binary expressions.
OP = attrdict(
    AND='and',
    OR='or',
    ADD='+',
    SUB='-',
    MUL='*',
    DIV='/',
    POW='**',
    BIN_AND='&',
    BIN_OR='|',
    XOR='^',
    MOD='%',
    EQ='=',
    LT='<',
    LTE='<=',
    GT='>',
    GTE='>=',
    NE='!=',
    IN='in',
    NOT_IN='not in',
    IS='is',
    IS_NOT='is not',
    LIKE='like',
    BETWEEN='between',
    AND_NOT='and_not',
)


def with_metaclass(meta, base=object):
    return meta("NewBase", (base,), {})


def is_iterable(x):
    """
    A implementation independent way of checking for iterables
    """
    return hasattr(x, '__iter__')


def listify(x):
    """
    Convert to list
    """
    return x if isinstance(x ,(list, tuple)) else [x]


def is_protected_type(obj):
    """Determine if the object instance is of a protected type.
    Objects of protected types are preserved as-is when passed to
    force_text(strings_only=True).
    """
    return isinstance(obj, _PROTECTED_TYPES)


def smart_str(s, encoding='utf-8', strings_only=False, errors='strict'):
    # Handle the common case first for performance reasons.
    if isinstance(s, bytes):
        if encoding == 'utf-8':
            return s
        else:
            return s.decode('utf-8', errors).encode(encoding, errors)

    if strings_only and is_protected_type(s):
        return s

    if not isinstance(s, basestring):
        try:
            return bytes(s)
        except UnicodeEncodeError:
            if isinstance(s, Exception):
                # An Exception subclass containing non-ASCII data that doesn't
                # know how to print itself properly. We shouldn't raise a
                # further exception.
                return b' '.join(smart_str(arg, encoding, strings_only, errors)
                                 for arg in s)
            return unicode(s).encode(encoding, errors)

    else:
        return s.encode(encoding, errors)


def format_date_time(value, formats, post_process=None):
    post_process = post_process or (lambda x: x)
    for fmt in formats:
        try:
            return post_process(datetime.datetime.strptime(value, fmt))
        except ValueError:
            pass
    return value


def reraise(tp, value, tb=None):
    raise tp, value, tb


def retry_if_except(errors, num_retry=4, delay=0.5, cleanup_callback=None):
    def _wrap(func):
        def _inner(*args, **kwargs):
            for n in reversed(range(num_retry)):
                try:
                    return func(*args, **kwargs)
                except errors as error:
                    # propagate the exception if we have run out of tries
                    if not n:
                        raise
                    # perform a clean up action before the next attempt if required
                    if callable(cleanup_callback):
                        cleanup_callback(error=error)

                    if delay:
                        time.sleep(delay)

        return _inner
    return _wrap


def reopen_if_modified(database, num_retry=4, errors=xapian.DatabaseModifiedError):
    return retry_if_except(
        errors,
        num_retry=num_retry,
        cleanup_callback=lambda: database.reopen()
    )


def returns_clone(func):
    """
    Method decorator that will "clone" the object before applying the given
    method.  This ensures that state is mutated in a more predictable fashion,
    and promotes the use of method-chaining.
    """
    def inner(self, *args, **kwargs):
        clone = self.clone()  # Assumes object implements `clone`.
        func(clone, *args, **kwargs)
        return clone
    inner.call_local = func  # Provide a way to call without cloning.
    return inner


class Proxy(object):
    """
    Proxy class useful for situations when you wish to defer the initialization
    of an object.
    """
    __slots__ = ('obj', '_callbacks')

    def __init__(self, initialize=True):
        self._callbacks = []
        if initialize:
            self.initialize(None)

    def initialize(self, obj):
        self.obj = obj
        for callback in self._callbacks:
            callback(obj)

    def attach_callback(self, callback):
        self._callbacks.append(callback)
        return callback

    def __getattr__(self, attr):
        if self.obj is None:
            raise AttributeError('Cannot use uninitialized Proxy.')
        return getattr(self.obj, attr)

    def __setattr__(self, attr, value):
        if attr not in dir(self):
            raise AttributeError('Cannot set attribute on proxy.')
        return super(Proxy, self).__setattr__(attr, value)


class Node(object):
    """
    Base-class for any part of a query which shall be composable.
    """
    _node_type = 'node'

    def __init__(self):
        self._negated = False
        self._bind_to = None
        self._ordering = False

    @classmethod
    def extend(cls, name=None, clone=False):
        def decorator(method):
            method_name = name or method.__name__
            if clone:
                method = returns_clone(method)
            setattr(cls, method_name, method)
            return method
        return decorator

    def clone_base(self):
        return type(self)()

    def clone(self):
        inst = self.clone_base()
        inst._negated = self._negated
        inst._ordering = self._ordering
        inst._bind_to = self._bind_to
        return inst

    @returns_clone
    def __invert__(self):
        self._negated = not self._negated

    @returns_clone
    def bind_to(self, bt):
        """
        Bind the results of an expression to a specific model type. Useful
        when adding expressions to a select, where the result of the expression
        should be placed on a joined instance.
        """
        self._bind_to = bt

    @returns_clone
    def asc(self):
        self._ordering = False

    @returns_clone
    def desc(self):
        self._ordering = True

    def __pos__(self):
        return self.asc()

    def __neg__(self):
        return self.desc()

    def _e(op, inv=False):
        """
        Lightweight factory which returns a method that builds an Expression
        consisting of the left-hand and right-hand operands, using `op`.
        """
        def inner(self, rhs):
            if inv:
                return Expression(rhs, op, self)
            return Expression(self, op, rhs)
        return inner

    __and__ = _e(OP.AND)
    __or__ = _e(OP.OR)

    __add__ = _e(OP.ADD)
    __sub__ = _e(OP.SUB)
    __mul__ = _e(OP.MUL)
    __div__ = __truediv__ = _e(OP.DIV)
    __xor__ = _e(OP.XOR)
    __radd__ = _e(OP.ADD, inv=True)
    __rsub__ = _e(OP.SUB, inv=True)
    __rmul__ = _e(OP.MUL, inv=True)
    __rdiv__ = __rtruediv__ = _e(OP.DIV, inv=True)
    __rand__ = _e(OP.AND, inv=True)
    __ror__ = _e(OP.OR, inv=True)
    __rxor__ = _e(OP.XOR, inv=True)

    def __eq__(self, rhs):
        if rhs is None:
            return Expression(self, OP.IS, None)
        return Expression(self, OP.EQ, rhs)

    def __ne__(self, rhs):
        if rhs is None:
            return Expression(self, OP.IS_NOT, None)
        return Expression(self, OP.NE, rhs)

    __lt__ = _e(OP.LT)
    __le__ = _e(OP.LTE)
    __gt__ = _e(OP.GT)
    __ge__ = _e(OP.GTE)
    __lshift__ = _e(OP.IN)
    __rshift__ = _e(OP.IS)
    __mod__ = _e(OP.LIKE)
    __pow__ = _e(OP.POW)

    bin_and = _e(OP.BIN_AND)
    bin_or = _e(OP.BIN_OR)

    # Special expressions.
    def in_(self, *rhs):
        return Expression(self, OP.IN, rhs)

    def startswith(self, rhs):
        return Expression(self, OP.LIKE, rhs)

    def between(self, low, high):
        return Expression(self, OP.BETWEEN, (low, high))

    def and_not(self, rhs):
        return Expression(self, OP.AND_NOT, rhs)

    def scale_weight(self, rhs):
        return Expression(self, OP.POW, rhs)

    def filter(self, rhs):
        return Expression(self, OP.DIV, rhs)

    def near(self, rhs):
        return Expression(self, OP.MUL, rhs)

    def maybe(self, rhs):
        return Expression(self, OP.ADD, rhs)

    def phrase(self, rhs):
        return Expression(self, OP.MOD, rhs)

    def less_than(self, rhs):
        return Expression(self, OP.LT, rhs)

    def greater_than(self, rhs):
        return Expression(self, OP.GT, rhs)

    def like(self, rhs):
        return Expression(self, OP.LIKE, rhs)


class Expression(Node):
    """A binary expression, e.g `foo + 1` or `bar < 7`."""
    _node_type = 'expression'

    def __init__(self, lhs, op, rhs):
        super(Expression, self).__init__()
        self.lhs = lhs
        self.op = op
        self.rhs = rhs

    def clone_base(self):
        return Expression(self.lhs, self.op, self.rhs)


class QueryString(Node):
    _node_type = 'query_string'

    def __init__(self, value=''):
        super(QueryString, self).__init__()
        self._value = value

    @property
    def value(self):
        return self._value

    def clone(self):
        inst = super(QueryString, self).clone()
        inst._value = self._value
        return inst


class PhraseQuery(QueryString):
    _node_type = 'phrase_string'


class FieldDescriptor(object):

    def __init__(self, field):
        self.field = field
        self.att_name = self.field.name

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            if self.att_name not in instance._data and instance._doc:
                instance._data[self.att_name] = instance._fetch_field_data(self.field)
            return instance._data.get(self.att_name)
        return self.field

    def __set__(self, instance, value):
        instance._data[self.att_name] = value
        instance._dirty.add(self.att_name)


class Field(Node):

    _node_type = 'field'

    def __init__(self, is_term=False,
                       is_value=False,
                       is_boolean_term=False,
                       is_data=False,
                       is_range=False,
                       index=False,
                       prefix=None,
                       default=None,
                       positions=True):

        # is term field or not
        self.is_term = is_term

        # is value field or not
        self.is_value = is_value

        # is boolean term or not
        self.is_boolean_term = is_boolean_term

        # is data field or not
        self.is_data = is_data

        # can be used for range query or not
        self.is_range = is_range

        # need index or not
        self.index = index

        # field prefix A-Za-z{0,}
        self.prefix = prefix

        # default value
        self.default = default

        # include term positions in index or not
        self.positions = positions

        # slot number
        self._slot = None

        # Whether the Field is "bound" to a Model.
        self._is_bound = False

        super(Field, self).__init__()

    def __hash__(self):
        return hash(self.name + '.' + self.model_class.__name__)

    @property
    def slot(self):
        return self._slot

    def clone_base(self, **kwargs):
        inst = type(self)(
            is_term=self.is_term,
            is_value=self.is_value,
            is_boolean_term=self.is_boolean_term,
            is_data=self.is_data,
            is_range=self.is_range,
            index=self.index,
            prefix=self.prefix,
            default=self.default,
            positions=self.positions,
            **kwargs)

        if self._is_bound:
            inst.name = self.name
            inst.model_class = self.model_class
            inst._slot = self._slot

        inst._is_bound = self._is_bound
        return inst

    def add_to_class(self, model_class, name):
        """
        Hook that replaces the `Field` attribute on a class with a named
        `FieldDescriptor`. Called by the metaclass during construction of the
        `Model`.
        """
        self.name = name
        self.model_class = model_class

        model_class._meta.fields[self.name] = self

        setattr(model_class, name, FieldDescriptor(self))
        self._is_bound = True

    def xapian_range_processor(self):
        return None, None

    def coerce(self, value):
        return value

    # From Python to Xapian
    def xapian_term(self, value):
        # data for terms generator
        return self.coerce(value)

    def xapian_query_value(self, value):
        # normalize data which will be used in query
        return self.coerce(value)

    def xapian_value(self, value):
        # data which store as doc value
        return self.coerce(value)

    def xapian_data(self, value):
        # data which store in doc data
        return value

    # From Xapian to Python
    def python_value(self, value):
        # value loaded from doc value
        return self.coerce(value)

    def python_data(self, value):
        # value loaded from doc data
        return value


class UUIDField(Field):

    def __init__(self, default=None, *args, **kwargs):
        super(UUIDField, self).__init__(*args, **kwargs)
        if default is None:
            self.default = lambda: uuid.uuid4().hex

    def coerce(self, value):
        return str(value)

    # From Xapian to Python
    def python_data(self, value):
        return None if value is None else uuid.UUID(value)

    python_value = python_data


class BooleanField(Field):

    truth = ('True', 1)
    coerce = str

    def __init__(self, truth=None, *args, **kwargs):
        if truth is not None:
            self.truth = truth

        super(BooleanField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(BooleanField, self).clone_base(
            truth=self.truth,
            **kwargs)

    # From Xapian to Python
    def python_data(self, value):
        return value in self.truth

    python_value = python_data


class NumericField(Field):

    def xapian_range_processor(self):
        return xapian.NumberValueRangeProcessor, None

    # From Python to Xapian
    def xapian_term(self, value):
        # data for terms generator
        return str(self.coerce(value))

    def xapian_value(self, value):
        # data which store as doc value
        return xapian.sortable_serialise(self.coerce(value))

    xapian_query_value = xapian_value

    def xapian_data(self, value):
        # data which store in doc data
        return value

    # From Xapian to Python
    def python_value(self, value):
        # value loaded from doc value
        return self.coerce(xapian.sortable_unserialise(value))

    def python_data(self, value):
        # value loaded from doc data
        return value


class IntegerField(NumericField):
    coerce = int


class FloatField(NumericField):
    coerce = float


class TextField(Field):

    def xapian_range_processor(self):
        return xapian.StringValueRangeProcessor, None

    # From Python to Xapian
    def xapian_data(self, value):
        # data which store in doc data
        return smart_str(value or '')

    def xapian_term(self, value):
        # data for terms generator
        return value

    xapian_value = xapian_term
    xapian_query_value = xapian_term

    # From Xapian to Python
    def python_value(self, value):
        # value loaded from doc value
        return value

    python_data = python_value


class _BaseFormattedField(Field):

    formats = None

    def __init__(self, formats=None, prefer_mdy=False, epoch_year=1970, *args, **kwargs):
        if formats is not None:
            self.formats = formats

        # prefer mm/dd/yyyy rather than dd/mm/yyyy
        self.prefer_mdy = prefer_mdy

        # Year to use as the epoch for dates with 2 digit years
        # (default: 1970, so 1/1/69 is 2069 while 1/1/70 is 1970).
        self.epoch_year = epoch_year

        super(_BaseFormattedField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(_BaseFormattedField, self).clone_base(
            formats=self.formats,
            prefer_mdy=self.prefer_mdy,
            epoch_year=self.epoch_year,
            **kwargs)

    def xapian_range_processor(self):
        return xapian.DateValueRangeProcessor, (self.prefer_mdy, self.epoch_year)


class DateTimeField(_BaseFormattedField):

    formats = ['%Y%m%d%H%M%S%f']

    # From Python to Xapian
    def xapian_term(self, value):
        # data for terms generator
        if not value:
            return value

        t = value.time()
        return map(str, (
            value.year,
            value.month,
            value.day,
            t.hour,
            t.minute,
            t.second
        ))

    def xapian_value(self, value):
        # data which store as doc value
        if not value:
            return value

        return value.strftime(self.formats[0])

    xapian_data = xapian_value
    xapian_query_value = xapian_value

    # From Xapian to Python
    def python_value(self, value):
        if value and isinstance(value, basestring):
            return format_date_time(value, self.formats)
        return value

    python_data = python_value


class Query(Node):
    _node_type = 'query'

    def __init__(self, model_class, where=None):
        super(Query, self).__init__()

        self.model_class = model_class
        self.database = model_class._meta.database

        self._query_ctx = model_class
        self._where = where

        self._flags = xapian.QueryParser.FLAG_PHRASE \
                        | xapian.QueryParser.FLAG_BOOLEAN \
                        | xapian.QueryParser.FLAG_LOVEHATE \
                        | xapian.QueryParser.FLAG_WILDCARD \
                        | xapian.QueryParser.FLAG_PARTIAL \
                        | xapian.QueryParser.FLAG_SPELLING_CORRECTION

    def __repr__(self):
        return str(self.query())

    def clone(self):
        query = type(self)(self.model_class)
        query.database = self.database
        return self._clone_attributes(query)

    def _clone_attributes(self, query):
        if self._where is not None:
            query._where = self._where.clone()

        query._query_ctx = self._query_ctx
        return query

    def _add_query_expressions(self, initial, expressions, conjunction=None):
        reduced = reduce(operator.and_, expressions)
        if initial is None:
            return reduced
        conjunction = conjunction or operator.and_
        return conjunction(initial, reduced)

    @returns_clone
    def where(self, *expressions):
        self._where = self._add_query_expressions(self._where, expressions)

    @returns_clone
    def orwhere(self, *expressions):
        self._where = self._add_query_expressions(
            self._where, expressions, operator.or_)

    @returns_clone
    def filter(self, *expressions):
        self._where = self._add_query_expressions(
            self._where, expressions, operator.div)

    def compiler(self):
        return self.database.compiler()

    def query(self):
        compiler = self.compiler()
        compiler.query_parser = self.model_class.query_parser()
        compiler.query_parser_flags = self._flags
        return compiler.generate_query(self)

    def execute(self):
        raise NotImplementedError


class SearchQuery(Query):
    _node_type = 'search_query'

    def __init__(self, *args, **kwargs):
        super(SearchQuery, self).__init__(*args, **kwargs)
        self._result = None
        self._offset = None
        self._limit = None
        self._order_by = None
        self._collapse_by = None
        self._relevance_first = None

    def _clone_attributes(self, query):
        query = super(SearchQuery, self)._clone_attributes(query)
        if self._order_by is not None:
            query._order_by = list(self._order_by)

        query._limit = self._limit
        query._offset = self._offset
        query._collapse_by = self._collapse_by
        query._flags = self._flags

        return query

    @returns_clone
    def relevance_first(self, flag):
        self._relevance_first = flag

    @returns_clone
    def order_by(self, *args):
        self._order_by = list(args)

    @returns_clone
    def collapse_by(self, arg):
        self._collapse_by = arg

    @returns_clone
    def limit(self, lim):
        self._limit = lim

    @returns_clone
    def offset(self, off):
        self._offset = off

    @returns_clone
    def paginate(self, page, paginate_by=20):
        if page > 0:
            page -= 1

        self._limit = paginate_by
        self._offset = page * paginate_by

    def count(self):
        return self.execute().size()

    def execute(self):
        if self._result is None:
            self._result = ResultSet(
                self.model_class,
                self.query(),
                self._offset,
                self._limit,
                self._order_by,
                self._collapse_by,
                self._relevance_first,
                self._flags
            )

        return self._result

    def __iter__(self):
        return iter(self.execute())

    def __getitem__(self, value):
        return self.execute()[value]

    def exists(self):
        clone = self.paginate(1, 1)
        return bool(list(clone))

    def get(self):
        clone = self.paginate(1, 1)
        try:
            return clone[0]
        except IndexError:
            raise self.model_class.DoesNotExist('Instance matching query does not exist:\n%s' % self)

    def first(self):
        clone = self.paginate(1, 1)
        try:
            return self[0]
        except IndexError:
            return None


class ResultItemProxy(Proxy):

    __slots__ = [
        'ri_weight',
        'ri_rank',
        'ri_percent',
        'ri_collapse_key',
        'ri_collapse_count',
    ]

    def __init__(self, match, model):
        super(ResultItemProxy, self).__init__()
        self.ri_weight = match.weight
        self.ri_rank = match.rank
        self.ri_percent = match.percent
        self.ri_collapse_key = match.collapse_key
        self.ri_collapse_count = match.collapse_count
        self.initialize(model)

    @property
    def model(self):
        return self.obj


class ResultSet(object):

    def __init__(self, model_class,
                       query,
                       offset=0,
                       limit=None,
                       order_by=None,
                       collapse_by=None,
                       relevance_first=None,
                       flags=None):

        self._model_class = model_class
        self._query = query
        self._offset = offset
        self._limit = limit
        self._order_by = order_by
        self._collapse_by = collapse_by
        self._relevance_first = relevance_first
        self._flags = flags

        self._resultset_cache = None
        self._mset = None

    def _do_doc_count(self):
        database = self._model_class._meta.database.readable_connection
        return reopen_if_modified(database)(lambda: database.get_doccount())()

    def _do_count(self):
        self._get_mset()
        return self._mset.size()

    def _do_search(self):
        database = self._model_class._meta.database.readable_connection
        enquire = xapian.Enquire(database)

        if self._collapse_by:
            enquire.set_collapse_key(self._collapse_by._slot)

        if not self._order_by:
            if self._relevance_first:
                enquire.set_sort_by_relevance()

        else:
            set_sort = enquire.set_sort_by_value if self._relevance_first is None else \
                       enquire.set_sort_by_relevance_then_value if self._relevance_first else \
                       enquire.set_sort_by_value_then_relevance

            if len(self._order_by) == 1:
                set_sort(self._order_by[0]._slot, self._order_by[0]._ordering)

            else:
                maker = MultiValueKeyMaker()
                for field in self._order_by:
                    maker.add_value(field._slot, field._ordering)

                set_sort(maker)

        self._offset = self._offset or 0
        if self._limit is None:
            self._limit = self._do_doc_count()

        enquire.set_query(self._query)
        self._mset = reopen_if_modified(database)(lambda: enquire.get_mset(self._offset, self._limit))()

    def _fetch_results(self):
        if self._mset is None:
            self._do_search()

        if self._resultset_cache is None:
            self._parse_results()

        return self._resultset_cache

    def _parse_results(self):
        create = self._model_class.create_from_document
        self._resultset_cache = [ResultItemProxy(match, create(match.document)) for match in self._mset]

    def size(self):
        self._do_search()
        return self._mset.size()

    def __iter__(self):
        self._fetch_results()
        return iter(self._resultset_cache)

    def __len__(self):
        self._fetch_results()
        return len(self._resultset_cache)

    def __getitem__(self, k):
        if not isinstance(k, (slice, int, long)):
            raise TypeError
        if not ((not isinstance(k, slice) and (k >= 0))
                or (isinstance(k, slice) and (k.start is None or k.start >= 0)
                    and (k.stop is None or k.stop >= 0))):
            raise IndexError("Negative indexing is not supported.")

        return self._fetch_results()[k]


def xapian_op_like(compiler, field, value, *args, **kwargs):
    return compiler.query_parser.parse_query(value + "*", compiler.query_parser_flags, field.prefix)


def xapian_op_eq(compiler, field, value, *args, **kwargs):
    return xapian.Query(field.prefix + value.lower())


def xapian_op_le(compiler, field, value, *args, **kwargs):
    return xapian.Query(xapian.Query.OP_VALUE_LE, field.slot, value.lower())


def xapian_op_ge(compiler, field, value, *args, **kwargs):
    return xapian.Query(xapian.Query.OP_VALUE_GE, field.slot, value.lower())


def xapian_op_range(compiler, field, value, *args, **kwargs):
    return xapian.Query(xapian.Query.OP_VALUE_RANGE, field.slot, value[0].lower(), value[1].lower())


def xapian_op_in(compiler, field, values, *args, **kwargs):
    return xapian.Query(xapian.Query.OP_OR, [
        xapian_op_eq(field, value) for value in values
    ])


def xapian_op_phrase(compiler, field, value, *args, **kwargs):
    phrase = [field.prefix + v.lower() for v in value.split() if v]
    return xapian.Query(xapian.Query.OP_PHRASE, [xapian.Query(phrase[i].lower(), 1, i+1) for i in range(len(phrase))])


def two_hands_expr_to_xapian_query(op):
    def conv(compiler, lhs, rhs, *args, **kwargs):
        return xapian.Query(op, lhs, rhs)
    return conv


class QueryCompiler(object):

    op_map = {
        OP.EQ: xapian_op_eq,
        OP.LT: xapian_op_le,
        OP.LTE: xapian_op_le,
        OP.GT: xapian_op_ge,
        OP.GTE: xapian_op_ge,
        OP.LIKE: xapian_op_like,
        OP.BETWEEN: xapian_op_range,
        OP.IN: xapian_op_in,
        OP.MOD: xapian_op_phrase,

        OP.DIV: two_hands_expr_to_xapian_query(xapian.Query.OP_FILTER),
        OP.XOR: two_hands_expr_to_xapian_query(xapian.Query.OP_XOR),
        OP.AND: two_hands_expr_to_xapian_query(xapian.Query.OP_AND),
        OP.OR: two_hands_expr_to_xapian_query(xapian.Query.OP_OR),
        OP.POW: two_hands_expr_to_xapian_query(xapian.Query.OP_SCALE_WEIGHT),
        OP.AND_NOT: two_hands_expr_to_xapian_query(xapian.Query.OP_AND_NOT),
        OP.ADD: two_hands_expr_to_xapian_query(xapian.Query.OP_AND_MAYBE),
        OP.MUL: two_hands_expr_to_xapian_query(xapian.Query.OP_NEAR),
    }

    def __init__(self):
        self._parse_map = self.get_parse_map()
        self.query_parser = None
        self.query_parser_flags = None

    def get_parse_map(self):
        return {
            'field': self._parse_field,
            'expression': self._parse_expression,
            'query_string': self._parse_query_string,
            'phrase_string': self._parse_phrase_string,
            'search_query': self._parse_search_query,
        }

    def generate_query(self, query):
        return self.build_query(query)

    def build_query(self, query):
        return self.parse_node(query)

    def parse_node(self, query, conv=None):
        return self._parse(query, conv)

    def _parse(self, node, conv):
        node_type = getattr(node, '_node_type', None)

        if node_type in self._parse_map:
            result = self._parse_map[node_type](node, conv)

        else:
            result = map(conv, node) if is_iterable(node) else conv(node)

        return result

    def _parse_field(self, node, conv):
        return node

    def _parse_query_string(self, node, conv):
        return self.query_parser.parse_query(node.value, self.query_parser_flags)

    def _parse_phrase_string(self, field, node, conv):
        return xapian_op_phrase(field, conv(node.value))

    def _parse_expression(self, node, conv):
        if isinstance(node.lhs, Field):
            conv = node.lhs.xapian_query_value

        lhs = self.parse_node(node.lhs, conv)
        rhs = self.parse_node(node.rhs, conv)

        return self.op_map[node.op](self, lhs, rhs)

    def _parse_search_query(self, node, conv):
        if not node._where:
            return xapian.Query.MatchAll

        return self.parse_node(node._where, conv)


class QueryParser(object):

    def __init__(self, model):
        self.model = model

    def field_prefix(self, field):
        return []

    def field_range_prefix(self, field):
        return '',''

    def create(self):
        query_parser = xapian.QueryParser()

        # set db
        query_parser.set_database(self.model._meta.database.writable_connection)
        query_parser.set_stemming_strategy(xapian.QueryParser.STEM_ALL)

        # iterate over fields
        for field in self.model._meta.fields.values():

            add_prefix = query_parser.add_boolean_prefix if field.is_boolean_term else \
                         query_parser.add_prefix if field.is_term else None

            if add_prefix:
                prefix = self.field_prefix(field)
                for v in prefix:
                    add_prefix(v, field.prefix)

            if field.is_range:
                vrp, params = field.xapian_range_processor()
                prefix, suffix = self.field_range_prefix(field)

                args = [field.slot]
                if prefix or suffix:
                    args.extend([prefix or suffix, not bool(prefix)])

                if params:
                    args.extend(params)

                query_parser.add_valuerangeprocessor(vrp(*args))

        return query_parser


class XapianDatabasesLocks(DictMixin):

    def __init__(self):
        self.locks = {}
        self.lock = threading.Lock()

    def __getitem__(self, key):
        with self.lock:
            return self.locks[key]

    def __setitem__(self, key, value):
        with self.lock:
            self.locks[key] = value

    def __delitem__(self, key):
        with self.lock:
            del self.locks[key]

    def keys(self):
        return self.locks.keys()

    def get_or_create_lock(self, key):
        with self.lock:
            if key not in self.locks:
                self.locks[key] = threading.Lock()

            return self.locks[key]


XapianDatabasesLocks = XapianDatabasesLocks()


class ExceptionWrapper(object):

    __slots__ = ['exceptions']

    def __init__(self, exceptions):
        self.exceptions = exceptions

    def __enter__(self):
        pass

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            return

        if exc_type.__name__ in self.exceptions:
            new_type = self.exceptions[exc_type.__name__]
            exc_args = exc_value.args
            reraise(new_type, new_type(*exc_args), traceback)


class _callable_context_manager(object):
    def __call__(self, fn):
        @wraps(fn)
        def inner(*args, **kwargs):
            with self:
                return fn(*args, **kwargs)
        return inner


class transaction(_callable_context_manager):

    def __init__(self, db):
        self.db = db

    def _begin(self):
        self.db.begin_transaction()

    def commit(self, begin=True):
        self.db.commit_transaction()
        if begin:
            self._begin()

    def rollback(self, begin=True):
        self.db.cancel_transaction()
        if begin:
            self._begin()

    def __enter__(self):
        if self.db.transaction_depth() == 0:
            self._begin()
        self.db.push_transaction(self)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        try:
            if exc_type:
                self.rollback(False)
            elif self.db.transaction_depth() == 1:
                try:
                    self.commit(False)
                except:
                    self.rollback(False)
                    raise
        finally:
            self.db.pop_transaction()
            self.db.close_writable()


class _BaseConnectionLocal(object):

    def __init__(self, **kwargs):
        super(_BaseConnectionLocal, self).__init__(**kwargs)
        self.autocommit = None

        # store readable and writable connections in
        # different vars to not block database
        self.readable_conn = None
        self.writable_conn = None

        self.transactions = []


class _ConnectionLocal(_BaseConnectionLocal, threading.local):
    pass


class Database(object):

    compiler_class = QueryCompiler

    exceptions = {
        'DatabaseCorruptError': xapian.DatabaseCorruptError,
        'DatabaseCreateError': xapian.DatabaseCreateError,
        'DatabaseError': xapian.DatabaseError,
        'DatabaseLockError': xapian.DatabaseLockError,
        'DatabaseModifiedError': xapian.DatabaseModifiedError,
        'DatabaseOpeningError': xapian.DatabaseOpeningError,
        'DatabaseVersionError': xapian.DatabaseVersionError,
    }

    def __init__(self, database, threadlocals=True, autocommit=True):
        if threadlocals:
            self.__local = _ConnectionLocal()
        else:
            self.__local = _BaseConnectionLocal()

        self._conn_lock = XapianDatabasesLocks.get_or_create_lock(database)
        self.autocommit = autocommit
        self.database = database

    def database_exists(self):
        return os.path.exists(self.database)

    def exception_wrapper(self):
        return ExceptionWrapper(self.exceptions)

    def close(self):
        """
        Close readable and writable connections -
         all connections will be closed
        """
        self.close_readable()
        self.close_writable()

    def close_readable(self):
        """
        Close readable connection
        """
        if self.__local.readable_conn:
            self.__local.readable_conn.close()
            self.__local.readable_conn = None

    def close_writable(self):
        """
        Close writable connection
        """
        if self.__local.writable_conn:
            self.__local.writable_conn.close()
            self.__local.writable_conn = None

    def _readable_connect(self):
        return xapian.Database(self.database)

    @retry_if_except(xapian.DatabaseLockError)
    def _writable_connect(self):
        return xapian.WritableDatabase(
            self.database,
            xapian.DB_CREATE_OR_OPEN
        )

    @property
    def readable_connection(self):
        if not self.__local.readable_conn:
            with self._conn_lock:
                with self.exception_wrapper():
                    if not self.database_exists():
                        # create database if not exists
                        self._writable_connection().close()

                    self.__local.readable_conn = self._readable_connect()

        return self.__local.readable_conn

    @property
    def writable_connection(self):
        if not self.__local.writable_conn:
            with self._conn_lock:
                with self.exception_wrapper():
                    self.__local.writable_conn = self._writable_connect()

        return self.__local.writable_conn

    def begin_transaction(self):
        reopen_if_modified(self.writable_connection)(lambda: self.writable_connection.begin_transaction())()

    def cancel_transaction(self):
        reopen_if_modified(self.writable_connection)(lambda: self.writable_connection.cancel_transaction())()

    def commit_transaction(self):
        reopen_if_modified(self.writable_connection)(lambda: self.writable_connection.commit_transaction())()

    def termgenerator(self):
        termgenerator = xapian.TermGenerator()
        termgenerator.set_database(self.writable_connection)

        return termgenerator

    def set_autocommit(self, autocommit):
        self.__local.autocommit = autocommit

    def get_autocommit(self):
        if self.__local.autocommit is None:
            self.set_autocommit(self.autocommit)
        return self.__local.autocommit

    def push_transaction(self, transaction):
        self.__local.transactions.append(transaction)

    def pop_transaction(self):
        self.__local.transactions.pop()

    def transaction_depth(self):
        return len(self.__local.transactions)

    def in_transaction_state(self):
        return len(self.__local.transactions) != 0

    def transaction(self):
        return transaction(self)

    def compiler(self):
        return self.compiler_class()


class DoesNotExist(Exception):
    pass


class DocumentOptions(object):

    def __init__(self, cls, database=None,
                            order_by=None,
                            serialise_impl=None,
                            query_parser=None,
                            **kwargs):

        self.model_class = cls
        self.name = cls.__name__.lower()
        self.fields = {}
        self.defaults = {}
        self._default_by_name = {}
        self._default_dict = {}
        self._default_callables = {}

        self.database = database
        self.order_by = order_by
        self.serialise_impl = serialise_impl or json
        self.query_parser = query_parser or QueryParser

        for key, value in kwargs.items():
            setattr(self, key, value)

        self._additional_keys = set(kwargs.keys())

    def prepared(self):
        slot_i = 0
        for field in self.fields.values():
            if field.prefix:
                field.prefix = field.prefix.upper()
            if field.default is not None:
                self.defaults[field] = field.default
                if callable(field.default):
                    self._default_callables[field] = field.default
                else:
                    self._default_dict[field] = field.default
                    self._default_by_name[field.name] = field.default

            if field.is_value:
                field._slot = slot_i
                slot_i += 1

        if self.order_by:
            norm_order_by = []

            for item in self.order_by:
                if isinstance(item, Field):
                    prefix = '-' if item._ordering is False else ''
                    item = prefix + item.name

                field = self.fields[item.lstrip('-')]
                if item.startswith('-'):
                    norm_order_by.append(field.desc())
                else:
                    norm_order_by.append(field.asc())

            self.order_by = norm_order_by

    def get_default_dict(self):
        dd = self._default_by_name.copy()
        if self._default_callables:
            for field, default in self._default_callables.items():
                dd[field.name] = default()
        return dd

    def get_sorted_fields(self):
        key = lambda i: i[1].slot
        return sorted(self.fields.items(), key=key)

    def get_field_names(self):
        return [f[0] for f in self.get_sorted_fields()]

    def get_fields(self):
        return [f[1] for f in self.get_sorted_fields()]

    def get_field_index(self, field):
        for i, (field_name, field_obj) in enumerate(self.get_sorted_fields()):
            if field_name == field.name:
                return i
        return -1

    def get_term_fields(self):
        return filter(lambda field: field.is_term, self.fields.values())


class BaseDocument(type):

    inheritable = set([
        'database',
        'order_by'
    ])

    def __new__(cls, name, bases, attrs):
        if not bases:
            return super(BaseDocument, cls).__new__(cls, name, bases, attrs)

        meta_options = {}
        meta = attrs.pop('Meta', None)
        if meta:
            for k, v in meta.__dict__.items():
                if not k.startswith('_'):
                    meta_options[k] = v

        # inherit any field descriptors by deep copying the underlying field
        # into the attrs of the new model, additionally see if the bases define
        # inheritable model options and swipe them
        for b in bases:
            if not hasattr(b, '_meta'):
                continue

            base_meta = getattr(b, '_meta')
            all_inheritable = cls.inheritable | base_meta._additional_keys
            for (k, v) in base_meta.__dict__.items():
                if k in all_inheritable and k not in meta_options:
                    meta_options[k] = v

            for (k, v) in b.__dict__.items():
                if k in attrs:
                    continue
                if isinstance(v, FieldDescriptor):
                    attrs[k] = deepcopy(v.field)

        # initialize the new class and set the magic attributes
        cls = super(BaseDocument, cls).__new__(cls, name, bases, attrs)
        cls._meta = DocumentOptions(cls, **meta_options)
        cls._data = None

        # replace fields with field descriptors, calling the add_to_class hook
        fields = []
        for name, attr in cls.__dict__.items():
            if isinstance(attr, Field):
                fields.append((attr, name))

        for field, name in fields:
            field.add_to_class(cls, name)

        # create a repr and error class before finalizing
        if hasattr(cls, '__unicode__'):
            setattr(cls, '__repr__', lambda self: '<%s: %r>' % (
                cls.__name__, self.__unicode__()))

        exc_name = '%sDoesNotExist' % cls.__name__
        exception_class = type(exc_name, (DoesNotExist,), {})
        cls.DoesNotExist = exception_class
        cls._meta.prepared()

        return cls

    def __iter__(self):
        return iter(self.search())

    def add_to_class(cls, name, value):
        setattr(cls, name, value)


class Document(with_metaclass(BaseDocument)):

    def __init__(self, *args, **kwargs):
        self._data = self._meta.get_default_dict()
        self._dirty = set()
        self._doc = None
        self._id = None
        self.__doc_data = None

        for k, v in kwargs.items():
            setattr(self, k, v)

    @property
    def id(self):
        return self._id

    @property
    def _doc_data(self):
        if self.__doc_data is None:
            data = self._doc.get_data()
            self.__doc_data = self._meta.serialise_impl.loads(data) if data else {}

        return self.__doc_data

    def _fetch_field_data(self, field):
        """
        Fetch field data from document
        If attribute was not saved in doc_data or
        in doc.value None will be returned
        """
        if field.is_data:
            return field.python_data(self._doc_data.get(field.name))

        if field.is_value:
            return field.python_value(self._doc.get_value(field.slot))

    def is_reindex_needed(self):
        if not self._doc:
            return True

        for field in self._meta.fields.values():
            if field.index and field.name in self._dirty:
                return True
        return False

    def is_dirty(self):
        return bool(self._dirty)

    def _prepare_instance(self):
        self._dirty.clear()

    def document_will_be_indexed(self):
        """
        Prepare document before indexing,
        i.e. load data from external sources
        """
        pass

    def save(self):
        """
        Update or create document in database
        """
        database = self._meta.database
        doc_data = {}
        terms_gen = None

        # term fields first
        fields = sorted(self._meta.fields.values(), key=lambda field: field.is_term)

        # search values directly in _data, avoiding descriptors
        get_value = lambda field: self._data[field.name]

        if self.is_reindex_needed():
            # notify about document index
            self.document_will_be_indexed()

            doc = xapian.Document()

            # initialize terms generator
            terms_gen = database.termgenerator()
            terms_gen.set_flags(xapian.TermGenerator.FLAG_SPELLING)
            terms_gen.set_stemmer(xapian.Stem('none'))
            # terms_gen.set_stemming_strategy(xapian.TermGenerator.STEM_ALL)
            terms_gen.set_document(doc)

            if self._doc:
                # get existing data from document using descriptors and doc_data
                get_value = lambda field: getattr(self, field.name)

        else:
            doc = self._doc or xapian.Document()

            # update only dirty fields if no index needed
            fields = filter(lambda field: field.name in self._dirty, fields)

        if not fields:
            return

        for field in reversed(fields):

            # raw value
            value = get_value(field)

            if terms_gen and (field.is_term or field.index):

                # indexer function
                index_text = terms_gen.index_text if field.positions else terms_gen.index_text_without_positions
                prefix = field.prefix

                # if field is term
                if field.is_term:

                    # create terms
                    for v in listify(field.xapian_term(value)):
                        v = v.lower()
                        index_text(v, 1, prefix)
                        index_text(v)

                elif field.index:

                    # index for general search
                    for v in listify(field.xapian_term(value)):
                        index_text(v.lower())

                    terms_gen.increase_termpos()


            if field.is_value:
                doc.add_value(field.slot, field.xapian_value(value))

            if field.is_boolean_term:
                v = listify(field.xapian_term(value))[0].lower()
                prefix = field.prefix
                doc.add_boolean_term(prefix + v)

            if field.is_data:
                doc_data[field.name] = field.xapian_data(value)

        doc.set_data(self._meta.serialise_impl.dumps(doc_data))

        if not self.id:
            self._id = database.writable_connection.add_document(doc)

        else:
            database.writable_connection.replace_document(self.id, doc)

        self._doc = doc

        if not database.in_transaction_state():
            database.writable_connection.commit()
            database.close_writable()

        self._dirty.clear()
        return self

    def __eq__(self, other):
        return self.id is not None and other.id == self.id

    def __ne__(self, other):
        return not self == other

    @classmethod
    def create_from_document(cls, doc):
        inst = cls()
        inst._doc = doc
        inst._id = doc.get_docid()
        return inst

    @classmethod
    def create(cls, **query):
        inst = cls(**query)
        inst.save()
        inst._prepare_instance()
        return inst

    @classmethod
    def query_parser(cls):
        return cls._meta.query_parser(cls).create()

    @classmethod
    def search(cls, query=None):
        if isinstance(query, basestring):
            query = QueryString(query)

        query = SearchQuery(cls, where=query)
        if cls._meta.order_by:
            query = query.order_by(*cls._meta.order_by)

        return query
]]>
		</Library>
		<Library Name="promail_database">
<![CDATA[from prosuite_orm import SqliteFKDatabase


################################
#
# Custom SQlite Database class
#
################################

class ProMailDatabase(SqliteFKDatabase):
    """
    Allow to use Foreign keys in database
    """
    logger = None #SqliteFKDatabase.logger.getChild("ProMail")


################################
#
# Database initialization
#
################################

database = ProMailDatabase(
    "promail/promail.sqlite",
    threadlocals=True,
    journal_mode="WAL"
)
]]>
		</Library>
		<Library Name="ProAdmin">
<![CDATA[class ProAdminRegisterSchemeError( Exception ):
	def __init__( self, message=None ):
		if not message: message = 'Application scheme is not registred in ProAdmin'
		Exception.__init__( self, message )

class ProAdminLoginError( Exception ):
	def __init__( self, message=None ):
		if not message: message = 'Invalid user name or password'
		Exception.__init__( self, message )

class ProAdminEmptyPasswordError( ProAdminLoginError ):
	def __init__( self, message=None ):
		if not message: message = 'Password must not be empty'
		Exception.__init__( self, message )

class ProAdminEmptyLoginError( ProAdminLoginError ):
	def __init__( self, message=None ):
		if not message: message = 'Login must not be empty'
		Exception.__init__( self, message )

class SubjectsLimitationError( Exception ):
	def __init__( self, message=None ):
		if not message: message = 'Subjects limitation error'
		Exception.__init__( self, message )

class TokenSessionExpiredError( Exception ):
	def __init__( self, message=None ):
		if not message: message = 'Required session is over'
		Exception.__init__( self, message )



# version of library
__version__ = '1.09'




# save globals variables
SESSION 	= session
APPLICATION = application




# -----------------------------------------------------
#	Fake Session - need for macros background threads
# -----------------------------------------------------

class FakeSession( object ):
	def __init__( self ):
		import uuid
		self.__id	= str(uuid.uuid4())
		self.__data = {}


	@property
	def id( self ):
		return self.__id


	@property
	def _data( self ):
		return self.__data



	def get( self, key, default_value=None ):
		return self._data.get( key, default_value )

	def keys( self ):
		return self._data.keys()



	def __getitem__( self, key ):
		return self._data[ key ]

	def __setitem__( self, key, value ):
		self._data[ key ] = value

	def __delitem__( self, key ):
		if key in self._data:
			del self._data[ key ]



	def __iter__( self ):
		for key in self._data:
			yield self._data[ key ]



# thread-safe Singleton of _FakeSession
import threading
_local = threading.local()

class FakeSessionSingleton( FakeSession ):
	def __new__( cls, *args, **kwargs ):
		try:
			return _local.instance
		except:
			pass

		# create new object
		_local.instance = FakeSession.__new__( cls, *args, **kwargs )
		_local.instance.__created = True

		return _local.instance

	def __init__( self ):
		if self.__created:
			self.__created = False
			FakeSession.__init__( self )




def session():
	# check that real session exists
	try:
		SESSION.id
		return SESSION
	except:
		pass

	# create fake session for this thread
	return FakeSessionSingleton()

def _session():
	""" obsolete for capability
	"""
	return session()





# const
PROADMIN_APPLICATION_GUID = '491d4c93-4089-4517-93d3-82326298da44'



# global variable for save current scheme
current_scheme = None

# global variable - saves thread for synchronization
sync_thread = None

# authorized_tokens
authorized_tokens = {}


def register_scheme( scheme ):
	""" register scheme in ProAdmin memory
	"""
	# stop synchronization
	stop_sync()

	global current_scheme
	current_scheme = scheme
	logoff()


def unregister_default_scheme():
	global current_scheme
	current_scheme = None
	logoff()


def delete_scheme( schema ):
	""" delete scheme from ProAdmin memory
	"""
	global current_scheme
	current_scheme = None
	logoff()





def local_scheme( guid="", connection=None ):
	""" create new instance of local scheme
	"""
	from proadmin_local_ldap_application_scheme import LocalLDAPApplicationScheme
	return LocalLDAPApplicationScheme( guid, connection )


def remote_scheme( guid="", connection=None ):
	""" create new instance of remote scheme
	"""
	from proadmin_remote_application_scheme import RemoteApplicationScheme
	return RemoteApplicationScheme( guid, connection )


def external_scheme( guid="", connection=None, userconnection=None, config=None ):
	""" create external application scheme
	"""
	from proadmin_external_application_scheme import ExternalApplicationScheme
	return ExternalApplicationScheme( guid, connection, userconnection, config )





def scheme():
	""" return current active scheme
	"""
	# try to create default scheme
	try:
		if not current_scheme:
			from proadmin_config import create_default_scheme
			create_default_scheme()
			logoff()
	except Exception, ex:
		raise

	# if scheme not registred - raise Exception
	if not current_scheme:
		raise ProAdminRegisterSchemeError()

	# if scheme exists
	return current_scheme



def application():
	return scheme().application





def get_registered_applications( guid_key=False ):
	from proadmin_sso import SSOUrl

	apps = scheme().get_registered_applications() or {}

	# sort hosts by samesess with current host
	for name in apps:
		app = apps[ name ]
		SSOUrl.sort_hosts_by_current( app.get('hosts', []) )

	# transform result
	if guid_key:
		apps_names = apps.keys()
		for name in apps_names:
			# pop application info from dictionary
			app = apps[ name ]
			del apps[ name ]

			# save it by guid-key
			apps[ app['guid'] ] = app

	return apps


def get_registred_applications( guid_key=False ):
	""" OBSOLETE. NEED FOR COMPATIBILITY.
	"""
	return get_registered_applications( guid_key )


def get_scheme_discovery():
	return [ scheme().guid, scheme().name ]






def start_sync():
	global sync_thread

	# create background sync thread and start it
	if not sync_thread:
		from proadmin_time_trigger import ProAdminTimeTrigger
		sync_thread = ProAdminTimeTrigger()
		sync_thread.start()

	# set synchronization procedure to background thread
	if scheme().is_remote():
		from proadmin_remote_application_scheme import RemoteApplicationScheme
		sync_thread.set_action( RemoteApplicationScheme.sync )


def stop_sync():
	global sync_thread

	if not sync_thread:
		return

	sync_thread.unset_action()

	# stop background thread
	try:
		sync_thread.stop()
	except:
		pass
	finally:
		sync_thread = None






def login_token( token ):
	""" accpet user by token
	"""
	from proadmin_sso import SSOToken, SSOAccessToken, SSOCrypto

	if type( token ) in [ unicode, str ]:
		if SSOAccessToken.is_access_token( token ):
			token = SSOAccessToken( token )
		else:
			token = SSOToken.unpack( token, SSOCrypto.client() )

	# login by access token
	if type( token ) == SSOAccessToken:
		token.login()
		return

	user_guid = token.user_guid
	session_id = token.session_id

	if session().id != session_id:
		raise TokenSessionExpiredError()

	# login user
	user = application().get_subject( user_guid )
	if not user:
		token.clear()
		return

	# save user and token to current session
	session()[ 'current_user' ] = user
	session()[ 'access_token' ] = token.access_token



def sudo_accesstoken( user ):
	""" get authorized access token for user
	"""
	from proadmin_sso import SSOToken, SSOAccessToken, SSOCrypto
	return SSOAccessToken.get_sudo_accesstoken( user ).data



def login( email, password ):
	""" login user to ProAdmin
	"""
	# remove current user
	logoff()

	if not email:
		raise ProAdminLoginError()

	# empty password disabled in ProAdmin
	if not password:
		raise ProAdminEmptyPasswordError()

	# get user
	users = application().get_users( email=email )
	if not users:
		raise ProAdminLoginError()

	# check password
	user = users[ 0 ]
	if not user.check_password( password ):
		raise ProAdminLoginError()

	session()[ 'current_user' ] = user



def access_token():
	""" return current auth_token
	"""
	auth_token = session().get( 'access_token', None )
	return auth_token



def current_user():
	""" return current logined user
	"""
	scheme()

	def fix_addled( user ):
		if not user._is_addled_instance(): return user
		users = application().get_users( guid=user.guid )
		return users[0] if users else None

	# try setted user
	user = session().get( 'sudo', None )
	if user: return fix_addled(user)

	# check auth_token
	token = access_token()
	if token and not token.check():
		logoff()

	user = session().get( 'current_user', None )
	if not user:
		logoff()
		return None

	# check user
	if getattr( _local, 'current_user_guid', None ) == user.guid:
		return fix_addled(user)

	if application().get_subject( user.guid ):
		_local.current_user_guid = user.guid
		return fix_addled(user)
	else:
		logoff()

	return None



def set_user( user ):
	""" change current user
	"""
	# remove (unset) sudo-user if user is None
	if not user:
		session()[ 'sudo' ] = None
		del session()[ 'sudo' ]
		return

	session()[ 'sudo' ] = user





def create_group( name, users=None ):
	""" create group in proadmin and return it's guid
	"""
	if not name: return None
	users = users or []

	# this operation incorrect for external scheme
	if scheme().type == 'external':
		return None

	guid = None

	# create in ProAdmin
	if scheme().is_remote():
		api = scheme().remote_sync
		guid = api.create_group( name, users )

	# create group in local
	group = application().create_group( name )
	if guid: group.guid = guid

	# add users to group
	for u in users:
		user = application().get_subject( u )
		if user: group.add_user( user )

	# save changes
	group.save()
	return group.guid




def create_user( self ):
	pass











def logoff():
	""" logoff current user
	"""
	# remove user
	session()[ 'current_user' ] = None
	del session()[ 'current_user' ]

	# remove auth_token
	session()[ 'access_token' ] = None
	del session()[ 'access_token' ]

	# remove set_user
	session()[ 'sudo' ] = None
	del session()[ 'sudo' ]







def login_server( login, password ):
	""" login user to server
	"""
	import managers
	managers.request_manager.current.session().set_user( login, password )

def logoff_server():
	""" logoff server's user
	"""
	login_server( 'guest', '' )

def server_user():
	""" get current server's user
	"""
	import managers
	return managers.request_manager.current.session().user

def is_server_admin():
	""" check that current server's user is admin
	"""
	user = server_user().lower()
	return user in [ 'root', 'admin' ]







def hosts():
	""" get hosts of this application
	"""
	from managers import virtual_hosts

	appid = APPLICATION.id.lower()

	# define host by virtual hosts
	hosts = virtual_hosts.get_sites()
	hosts = [ h for h in hosts if h ]
	hosts = [ h for h in hosts if virtual_hosts.get_site(h).lower() == appid ]

	hosts.sort()
	return hosts



# obsolete. save for compatibility
from proadmin_base_scheme import ACLObjectType, Icon


]]>
		</Library>
		<Library Name="proadmin_api_connection">
<![CDATA[import threading
from vdom_remote_api import VDOMService, VDOMServiceCallError
from md5 import md5


from proadmin_remote_sync import APIFormat


class APIError( Exception ):
	def __init__( self, message, conn=None ):
		Exception.__init__( self, message )
		
		# save last error message in connection
		if conn:
			conn.last_error = message




class APIConnection:
	""" class singleton for remote api routines
	"""

	__local	= threading.local()

	def __init__( self, vdom_service, cont_id, app_id=None ):
		self.service		= vdom_service
		self.cont_id		= cont_id
		self.app_id			= app_id

		self.last_error		= None


	def set_application_id( self, id ):
		self.app_id = id



	def call( self, action_name, params=None ):
		if not self.app_id:
			raise Exception( 'Application ID not defined' )

		# generate request data
		xml_data = APIFormat.request( self.app_id, params )

		# call remote action
		try:
			response_xml = self.service.call( self.cont_id, action_name, xml_data )
		except VDOMServiceCallError:
			self.service.open_session()
			response_xml = self.service.call( self.cont_id, action_name, xml_data )

		# parse response
		status, result = APIFormat.parse_response( response_xml )

		self.last_error = None

		if not status:
			raise APIError( 'Invalid call response', self )

		if status == 'success':
			return result
		else:
			raise APIError( result, self )


	def clone( self ):
		""" create copy of this connection """
		return self.create_copy( self )


	@classmethod
	def create_copy( self, connection ):
		""" create copy (another instance) of APIConnection object
		"""
		return APIConnection( connection.service, connection.cont_id, connection.app_id )
		
		
		
		
		
		
]]>
		</Library>
		<Library Name="localization_en">
<![CDATA[localization_dict = {

	#page titles
	"login_page_title"						: u'Login - ProShare',
	"home_page_title"						: u'Files - ProShare',
	"smart_folders_page_title"				: u'Smart folders and groups - ProShare',
	"smart_contents_page_title"				: u'Smart folder contents - ProShare', #smart folder contents page title (private)
	"public_contents_page_title"			: u'Smart folder contents - ProShare', #smart folder contents page title (public)
	"macros_page_title"						: u'Macros - ProShare',
	"edit_macros_page_title"				: u'Edit macros - ProShare',
	"settings_page_title"					: u'Settings - ProShare',
	"rules_management_page_title"			: u'Rights management - ProShare',
	"users_groups_management_page_title"	: u'Users & groups management - ProShare',
	"remote_control_page_title"				: u'Remote control - ProShare',
	"proadmin_attention_page_title"			: u'Attention - ProShare',
	"clear_page_title"						: u'Clear - ProShare',



	#common dialogs and forms strings
	"login" 					: u'Login:',
	"password" 					: u'Password:',
	"last_name"					: u'Last name',
	"first_name"				: u'First name',
	"dialog_add_btn"			: u'Add',
	"dialog_apply_btn"			: u'Apply',
	"dialog_cancel_btn" 		: u'Cancel',
	"dialog_close_btn"			: u'Close',
	"dialog_download_btn"		: u'Download',
	"dialog_delete_btn"			: u'Delete',
	"dialog_edit_btn"			: u'Edit',
	"dialog_ok_btn"				: u'Ok',
	"dialog_save_btn" 			: u'Save',
	"dialog_title_confirm"		: u'Confirm',
	"server"					: u'Server:',
	"dialog_upload_btn"			: u'Upload',
	"email_column_header"		: u'E-mail',
	"error"						: u'Error',
	"invalid_data_error_title"	: u'Invalid data',
	"check_fields_error"		: u'Check fields',
	"check_name_field_error"	: u'Check the "Name" field',
	"btn_delete_selected"		: u"Delete selected",
	"growl_title_warning"		: u"Warning",
	"growl_title_message"		: u"Message",




	#Errors, messages and warnings
	"unknown_error"								: u"Unknown error has occured. Please, try to reload the page or relogin the system. If it repeats, please, contact your administrator.",
	"empty_name_error"							: u"Name cannot be empty.",
	"empty_login_error"							: u"Login cannot be empty.",
	"empty_password_error"						: u"Password cannot be empty.",
	"invalid_login_or_password_error"			: u"Invalid login or password.",
	"files_ignored_warning"						: u"Files ignored.",
	"nodes_not_exists_warning"					: u"Some folders or files have been deleted and no more exist. Please, reload the page.",
	"sf_not_exists_warning"						: u"Some smart folders or smart groups have been deleted and no more exist. Please, reload the page.",
	"already_contained_warning"					: u"%s already contained in %s.",
	"subfolders_ignored_warning"				: u"Subfolders were ignored.",
	"folders_added_message"						: u"{0} folder(s) successfully  added to {1}.",
	"nothing_added_message"						: u"Nothing have been added.",
	"fields_updated_message"					: u"Fields have been successfully updated.",
	"IllegalCharactersInNameError"				: u"Name cannot contain any of following characters: *?:\\|/\"&lt&gt.",
	"SFAlreadyExistsError"						: u"Smart folder with such name already exists.",
	"MetaAlreadyExistsError"					: u"Meta field with such name already exists.",
	"FolderAlreadyContainedError"				: u"Folder already contained.",
	"AccessDeniedError"							: u"You have no permissions to perform this action.",
	"SessionExpiredError"						: u"Session has expired.",
	"AuthorisationError"						: u"No one is logged in.",
	"RemoteApplicationDisconnected"				: u"Application disconnected. ID : %s.",
	"EmptyNameError"							: u"The name is empty.",
	"DirectoryAlreadyExistsError"				: u"Folder already exists.",
	"NothingSelectedError"						: u"Nothing is selected.",
	"FileAlreadyExistsError"					: u"Destination already contains file with such name.",
	"FolderAlreadyExistsError"					: u"Destination already contains folder with such name.",
	"rules_saved_message"						: u"Rights have been successfully updated.",
	"rules_inherited_message"					: u"Rights have been successfully inherited.",
	"inaccessable_rules_warning"				: u"You cannot edit rights for this contents:%s.",
	"LongNameError"								: u"Name is too long.",
	"no_such_directory"							: u"No such directory.",
	"fill_all_star_fields_error"				: u"Please, fill all the fields marked with an asterisk.",
	"phone_illegal_characters"					: u"Phone number contains illegal characters.",
	"file_not_exist"							: u"This file does not exist.",
	"deleting_no_acces_files_warning"			: u"There are files and folders to which you have no access. They cannot be deleted.",
	"sf_not_exists_error"						: u"Smart folder does not exist.", #NEEDED
	"downloads_not_linked_to_sf"				: u"The downloads are not related to the specified smart folder.", #NEEDED
	"folders_and_files_not_found"				: u"Files and folders are not found.", #NEEDED
	"wrong_public_key"							: u"Specified public key is invalid or out-of-date.", #NEEDED
	"downloading_error"							: u"An internal error has occurred. Unable to download files and folders.", #NEEDED
	"common_error_message"						: u"An error has occurred. If the error repeats, please, contact support of your product provider or your system administrator.",  #NEEDED
	"deleting_no_acces_sfolers_warning"			: u"There are smart folders and groups to which you have no access. They cannot be deleted.",




	#Home
	#top bar buttons
	"btn_upload_files"						: u"Upload file",
	"btn_new_folder"						: u"New folder",
	"btn_download_selected"					: u"Download selected",
	"btn_edit_selected"						: u"Rename",
	"btn_edit_rights"						: u"Edit rights",
	"btn_add_to_smart_folder"				: u"Add to smart folder",
	"btn_macros"							: u"Macros",
	"macro_menu_label"						: u"<p>Plugin</p>",
	#contents table
	"contents_tbl_name_title"				: u"Name",
	"contents_tbl_Type_title"				: u"Type",
	"contents_tbl_Size_title"				: u"Size",
	"contents_tbl_modified_title"			: u"Modified",
	"contents_tbl_uploaded_title"			: u"Uploaded",
	"node_type_folder"						: u"folder",
	"no_contents_title"						: u"There are no files and folders in this folder.",
	"unknown_type"							: u"unknown",
	#upload dialog
	"dialog_upload_title"					: u"Add file",
	"dialog_upload_file_uploader_title"		: u"File to upload:",
	"dialog_upload_destination_title"		: u"Destination:",
	"dialog_upload_uploader_title"			: u"Select file...",
	#new folder/edit folder dialog
	"dialog_new_folder_title"				: u"New folder",
	"dialog_rename_title"					: u"Rename",
	"dialog_folder_name_title"				: u"Name:",
	"dialog_edit_folder_rules_title"		: u"Access rights:",
	#delete selected dialog
	"dialog_delete_selected_title"			: u"Delete selected",
	#add to Smart Folder dialog
	"dialog_add_to_sf_title"				: u"Add to smart folder",
	"dialog_dialog_add_to_sf_list_title"	: u"To:",
	"dialog_dialog_add_to_sf_list_new"		: u"Create smart folder",
	#rules dialog
	"dialog_rules_title"					: u'Edit access rights',
	"inherit_checkbox_title"				: u'Apply the same rights to contents',
	"processing_rules_in_bg_message"		: u'Access rights will be applied in the background. Processing may take a few minutes.',



	#Smart Folders
	"smart_folders_groups_title"		:u"Smart folders and groups", #NEEDED
	#top bar buttons
	"btn_new_smart_folder"		: u"New folder",
	#delete and edit titles used from page home
	#smart folders table
	"smart_folders_tbl_title"			: u"Smart folders",
	"smart_folders_tbl_name_title"		: u"Name",
	"smart_folders_tbl_objs_title"		: u"Objects",
	"smart_folders_tbl_modified_title"	: u"Modified",

	"sfg_button_edit"			: u"Edit",
	"sfg_button_add"			: u"Add smart folder",
	"sfg_button_delete"			: u"Delete",
	"sfg_button_group"			: u"Group",
	"sfg_button_ungroup"		: u"Ungroup",
	"sfg_button_selectmode"		: u"Select mode",
	"sfg_button_select"			: u"Selected",
	"sfg_button_selectall"		: u"Select all",
	"sfg_button_selectnone"		: u"Select none",
	"sfg_button_rules"			: u"Rights",
	"sfg_msg_1"					: u"Please enter name for new folder:",
	"sfg_msg_2"					: u"New folder",
	"sfg_msg_3"					: u"Folder name is empty.",
	"sfg_msg_4"					: u"Not allowed in select mode.",
	"sfg_msg_5"					: u"No folder selected.",
	"sfg_msg_6"					: u"Please, enter new name:",
	"sfg_msg_7"					: u"Please, enter name for new group:",
	"sfg_msg_8"					: u"New group.",
	"sfg_msg_9"					: u"Group name is empty.",
	"sfg_msg_10"				: u"No items selected.",
	"sfg_msg_11"				: u"Group is not specified.",

	#Smart Folder contents
	"metafield_type_string"				: u"STRING",
	"btn_edit_folders"					: u"Edit folders",
	"metafield_no_value_title"			: u"No value",
	"no_files_title"					: u"There are no files in this folder",
	"public_link_btn_title"				: u"Public link",
	"download_all_btn_title"			: u"Download all",


	#predefined metafields
	"metafield_created"					: u"Created",
	"metafield_modified"				: u"Modified",
	"metafield_watchers"				: u"Watchers",
	#add metafield dialog
	"dialog_add_metafield_title"		: u"Add metafield",
	"dialog_add_metafield_name_title"	: u"Name:",
	"dialog_add_metafield_type_title"	: u"Type:",
	"dialog_add_metafield_value_title"	: u"Value:",
	#public link dialog
	"dialog_public_link_title"			: u"Public link",
	"dialog_public_link_reset_btn"		: u"Reset",
	"dialog_public_clipboard_btn"		: u"Copy to clipboard",
	#add folder dialog
	"dialog_add_folder_title"			: u"Add folder(s)",



	#Macros
	"add_macros_btn"					: u"Add macros",
	"import_macros_btn"					: u"Import",
	"macros_table_title"				: u"Macros",
	"macros_table_name_title"			: u"Name",
	"macros_table_event_title"			: u"Event",

	#Edit macros
	"edit_macros_area_caption"				: u"Edit macros",
	"edit_macros_check_btn"					: u"Check",
	"edit_macros_export_btn"				: u"Export",
	"edit_macros_name_title"				: u"Name:",
	"edit_macros_event_title"				: u"Event:",
	"edit_macros_body_title"				: u"Body:",
	"edit_macros_button_macros_checkbox"	: u"Button macros",
	"edit_macros_on_board_checkbox"			: u"On board",
	"edit_macros_picture_title"				: u"Select picture:",

	#errors
	"fill_all_fields_error"					: u"Please, fill all fields.",
	"vscript_not_compiled_error"			: u"VScript is not compiled.",
	"type_macros_code_error"				: u"Please, type macros code.",
	"fill_macros_fields_error"				: u"Please, fill macros fields.",
	"macro_not_defined_error"				: u"Macro ID is not defined.",
	"xml_not_correctr_error"				: u"XML is not correct.",




	#Design
	#cnt_login
	"greeting"		: u'Hi, %s %s',
	"login_error"	: u'Incorrect login or password.',
	#header
	"menu_main_title"			: u'<div style="text-align: center">Files</div>',
	"menu_settings_title"		: u'<div style="text-align: center">Settings</div>',
	"menu_smart_folders_title"	: u'<div style="text-align: center">Smart folders</div>',
	#add user to group dialog (container_some)
	"find_usr_title"					: u'Find user',
	"find_grp_title"					: u'Find group',
	"add_usrgrp_diaolg_grp_tab_title"	: u'Add group',
	"add_usrgrp_diaolg_usr_tab_title"	: u'Add user',

	#Settings
	"settings_rules_btn"			: u'Rights management',
	"settings_users_groups_btn"		: u'Users & groups management',
	"settings_remote_control_btn"	: u'Remote control',


	#Remote scheme (Remote Control)
	"current_scheme_local"		: u'Current scheme: Local scheme',
	"current_scheme_remote"		: u'Current scheme: Remote scheme',
	##"remote_scheme_page_title"	: u'Remote management', used "settings_remote_control_btn"
	"radio_btn_local"			: u'Local scheme',
	"radio_btn_remote"			: u'Remote scheme',
	#widget_remote_form
	"socket.gaierror" 			: u'Please, fill the "Server" field.',
	"socket.error" 				: u'Incorrect server address.',
	"faultType" 				: u'Please, check the "Login" and "Password" fields.',
	"connection_error"			: u'Connection error',
	"connection_success"		: u'Connection successful. Please, reload the page and try to login again.',


	#Proadmin_attention
	"proadmin_attention_text"	: u'Application works with the remote scheme. Use ProAdmin application to configure users and groups.',


	#Rules Management
	"rules_acl_cancel_btn"		: u'<div class="acl_cancel">Cancel</div>',
	"rules_acl_apply_btn"		: u'<div class="acl_apply">Apply</div>',
	"cont_rules_title"			: u'<div style="padding-left: 15px;" class="acl_container_title">Rights management</div>',
	"cont_subjects_title"		: u'<div style="padding-left: 30px;" class="acl_container_title">Users and groups</div>',
	"cont_tree_title"			: u'<div class="acl_container_title" style="padding-left: 52px !important;">Objects</div>',
	#rules_simple
	"widgetuser_rights_name"	: u'Name',
	"widgetuser_rights_access"	: u'Access',
	"bttn_apply_to_contents"	: u'Inherit rights',
	"edit_access_rules_title"	: u'Rights management',
	"btn_back_title"			: u'Back',
	#rights keys (set in proadmin_config)
	"a"							: u'Admin',
	"w" 						: u'Modify',
	"r" 						: u'Read',
	"o"							: u'Edit rights',
	"d"							: u'Delete',
	"edit_rights"				: u'Owner',
	"Full"						: u'Full', #title for selecting all available rights options (widget_acl_rules)


	#Users & Groups Management
	"users_groups_management_title"	: u'Users and groups management',
	"create_user_btn_text"			: u'New user',
	"create_group_btn_text"			: u'New group',
	"users_tab_title"				: u'Users',
	"groups_tab_title"				: u'Groups',
	"fullname_column_header"		: u'Full name',
	"groupname_column_header"		: u'Group name',

	#User dialog
	"dialog_edit_user_title"		: u'User settings',
	"info_container_title"			: u'Information',
	"phone"							: u'Phone number',
	"notification_email"			: u'E-mail',
	"country"						: u'Country',
	"key_words"						: u'Key words',
	#Group dialog
	"dialog_edit_group_title"		: u'Group settings',
	"add_usrs_to_grp_btn_title"		: u'Add users',
	"group_name_title"				: u'Name:',
	"add_group"						: u'Add group',
	"find_user"						: u'Find user',
	"find_group"					: u'Find group',
	#Delete user or group dialog
	"delete_usr_grp_dialog_title"	: u'Are you sure you want to delete selected objects?',


	"VEE_AddSmartFolder"			:u'Add smart folder',
	"VEE_DeleteSmartFolder"			:u'Delete smart folder',
	"VEE_EditSmartFolder"			:u'Edit smart folder',
	"VEE_AddFileSmartFolder"		:u'Add file to smart folder',
	"VEE_EditFileSmartFolder"		:u'Edit file in smart folder',
	"VEE_DeleteFileSmartFolder"		:u'Delete file from smart folder',
	"VEE_AddFile"					:u'Add file',
	"VEE_EditFile"					:u'Edit file',
	"VEE_DeleteFile"				:u'Delete file',
	"VEE_DownloadFileFromSmartFolder"	: u"Download file from smart folder",
	"VEE_SmartFolderOpenByPulicLink"	: u"Open smart folder by public link",
	"VEE_AddFolder"					:u"Add folder",
	"VEE_RulesChanged"					:u"Access Change",
	"VEE_EditFolder"				:u"Edit folder",
	"VEE_DeleteFolder"				:u"Delete folder",
	"VEE_AddFolderSmartFolder"		:u"Add folder to smart folder",
	"VEE_EditFolderSmartFolder"		:u"Edit folder in smart folder",
	"VEE_DeleteFolderSmartFolder"	:u"Delete folder from smart folder",


	#log page
	"log_btn_hide_filter"			: u"Hide filter",
	"log_btn_show_filter"			: u"Show filter",
	"log_btn_clear_log"				: u"Clear log",
	"log_btn_refresh_log"			: u"Refresh log",
	"log_filter_text"				: u"Filter setup",
	"log_by_time"					: u"By time",
	"log_by_plugin_macros"			: u"By plugin / macros",
	"log_btn_reset_filter"			: u"Reset",
	"log_btn_apply_filter"			: u"Apply",
	"log_all_messages"				: u"All messages",
	"log_error"						: u"Error",
	"log_invalid_start_date"		: u"Invalid start date format.",
	"log_invalid_end_date"			: u"Invalid end date format.",
	"log_invalid_start_end"			: u"Start date must be less then end date.",


	#Users & Groups Management
		#page titles
			"users_groups_management_title"	: u'Managing users and groups',

		#top bar buttons
			"create_user_btn_text"			: u'Create new user',
			"create_group_btn_text"			: u'Create new group',
			"add_selected_to_group_btn_text": u'Add to group',

		#tableview
			"users_tab_title"				: u'Users',
			"groups_tab_title"				: u'Groups',

		#datatable header
			"fullname_column_header"		: u'Full name',
			"groupname_column_header"		: u'Group name',
			"email_column_header"			: u'E-mail',
			"login_column_header"			: u'Login',
			"group_column_header"			: u'Groups',
			"users_count_column_header"		: u'Number of users',

		#group tab
			"create_new_group_text"			: u'Create new group',
			"create_new_group_btn"			: u'Create',
			"create_new_group_placeholder"	: u'Group name',

		#user dialog
			"dialog_create_user_title"		: u'New user',
			"dialog_edit_user_title"		: u'User settings',
			"login_field_title"				: u'Login',
			"password_field_title"			: u'Password',
			"last_name_field_title"			: u'Last name',
			"first_name_field_title"		: u'First name',
			"email_field_title"				: u'E-mail',
			"cell_phone_field_title"		: u'Phone',
			"country_field_title"			: u'Country',
			"key_words_field_title"			: u'Key words',
			"create_continue_btn"			: u'Create and continue',
			"info_cont_title"				: u'Information',
			"group_cont_title"				: u'Groups',
			"add_groups_btn"				: u'Add group',
			"no_groups_text"				: u'No groups available',
			"gen_password_btn"				: u'Generate password',
			"send_email_checkbox"			: u'Send e-mail to user',
			"select_groups_text"			: u'Select groups:',
			"selected_groups_text"			: u'Number of selected groups:',

		#group dialog
			"dialog_create_group_title"		: u'New group',
			"dialog_edit_group_title"		: u'Edit group',
			"name_field_title"				: u'Name',
			"add_users_btn"					: u'Add user',
			"no_users_text"					: u'There is not registered users',
			"selected_users_text"			: u'Number of selected users:',
			"select_users_text"				: u'Select users:',
			"search_users_text"				: u'User filter',

		#add user/group dialog
			"dialog_add_user_title"			: u'Search users',
			"dialog_add_group_title"		: u'Search groups',
			"search_doesnt_find"			: u'Your search did not match',
			"search_field_title_user"		: u'Enter the first name, last name or e-mail',
			"search_field_title_group"		: u'Enter the name of the group',

		#delete dialog
			"dialog_delete_user_title"		: u'Remove objects',
			"dialog_delete_group_title"		: u'Remove objects',

		#dialog add users to group
			"dialog_add_to_group_title"		: u'Add to group',
			"to_text"						: u'To',
			"create_new_group_text"			: u'Create new group',

		"cancel_btn_title"					: u'Cancel',
		"create_btn_title"					: u'Create',
		"save_btn_title"					: u'Save',
		"delete_selected_btn_title"			: u'Delete selected',
		"add_btn_title"						: u'Add',
		"delete_btn_title"					: u'Delete',
		"dd_all_users"						: u'Show all users',
		"show_on_page_text"					: u'Per page',


		#remote_setting_page
		"settings_remote_page_title" 		: u'Set scheme',
		"text_current_scheme"				: u'Current scheme',
		"radio_btn_local"					: u'Local scheme',
		"radio_btn_remote"					: u'Remote scheme',
		"host"								: u'Host:',
		"apply_btn"							: u'Apply',
		"test_btn"							: u'Test connection',
		"use_settings_btn"					: u'Apply',
		"refresh_btn"						: u'Refresh',
		"last_sync_text"					: u'Last sync: ',
		"syns_state_text"					: u'Sync thread status: ',
		"object_text"						: u'Objects: ',
		"user_text"							: u'Users: ',
		"connect_ip_success"				: u'Connect to ',
		"connect_ip_fail"					: u'Connection to IP address failed',
		"open_session_success"				: u'Open session ',
		"open_session_fail"					: u'Opening session failed: incorrect login or password.',
		"proadmin_connection_fail"			: u'Connection to ProAdmin failed: there is no app on selected IP or login and password are incorrect.',
		"at"								: u' at ',
		"test_sso_btn"						: u'Test SSO',
		"cancel_btn"						: u'Cancel',
		"close_btn"							: u'Close',
		"warning_test_sso"					: u"You will be redirected to ProAdmin. If something goes wrong press back button in your browser.",
		"success_sso"						: u'SSO works.',



		#errors
			"warning_title"					: u'Warning!',
			"error_title"					: u'Error!',
			"select_objects_error"			: u'Select the objects.',
			"fill_group_name_field"			: u'Specify the name of the group.',
			"group_name_already_exists"		: u'A group with this name already exists.',
			"group_doesnt_exist"			: u'Group does not exist.',
			"fill_all_fields_with_star_error" : u'Please, fill out all fields.',
			"user_doesnt_exist_error"		: u'User does not exist. Please, refresh the page.',
			"group_doesnt_exist_error"		: u'Group does not exist. Please, refresh the page.',
			"user_login_already_exist_error": u'A user with such login already exists.',
			"user_email_is_incorrect_error" : u'Invalid e-mail address.',
			"user_phone_illegal_characters"	: u'Invalid phone number.',
			"user_password_is_empty_error"	: u'Please, enter the password.',
	"license" : u"""This software and documentation are the property of VDOM Box International. It is forbidden to translate, decompile, modify, adapt and correct. You may not remove or modify the license information and transmit it to others. The rental and lending of the software are prohibited. You can not use this software on other hardware that comes with it. The author alone is authorized to perform these operations.
If you do one of the above, your rights are automatically terminated and the author may have recourse to justice.
You are allowed to possess for the purpose of backup only copies of the XML file representing the application on other storage media than those included in the hardware running the application. You are not allowed to make copies of paper documentation.
You may install and use the software on one device running the application server VDOM (usually a VDOM Box). The license of this software is associated with a unique user ID stored on the smart card fitted to the VDOM Box, you do not use the license for this software to another user with a unique identifier different.
License transfer. To transfer the license of the software on another single user, it must first be removed from the smart card allows the previous user, this transfer can be done by the distributor of this license.
Using this software, you agree to abide by copyright, and to ensure that others respect them themselves.
This software is protected in France by the laws on intellectual property and abroad by international conventions on copyright (Berne Convention).
Violation of any of the rights of the author of the software is an infringement punishable in France by Article L335-2 of the Code of intellectua property.
The software is provided as is without warranty. The author can not be held liable for damages of any kind whatsoever suffered by the user or third parties arising directly or indirectly from its use, including loss of data, or any financial loss resulting from its use or inability to use, and this even if the author has been advised of the possibility of such damages. In any case, the responsibility of the author may not exceed the amount paid to acquire the license.
If the proposed software is presented as an update, you must already be licensed before the same software to benefit. A full update or replace the license and the previous version of the software. The update and the original license must be regarded as a single product. You are not authorized to sell or give separately.""",

	"license_button" : u"License",

	#license page
	"agree_button"				: u'Agree',
	"disagree_button"			: u'Disagree',
	"close_button"				: u'Close',
	"disagree_warning"			: u'You have to agree with the license to use product',
	"select_operation_mode"		: u'Select the application operating mode:',
	"standalone_mode"			: u'Standalone',
	"proadmin_mode"				: u'ProAdmin connection',
	"proadmin_page_warning"		: u'You can set up ProAdmin connection on special page.',
	"go_button"					: u'Go',
	"password_title"			: u'Set password for administrator account:',
	"password_field"			: u'Password:',
	"confirm_password_field"	: u'Confirm password:',
	"apply_password"			: u'Apply',

	#proadmin_v2
	"system_login_title"			: u'System login',
	"system_account"				: u'System account:',
	"login_btn"						: u'Login',
	"users_container_label"			: u'Users',
	"incorrect_login"				:u'Incorrect login or password',
	"no_vdom"						:u'There is no VDOM',
	"standalone"					:u'Standalone',
	"proadmin_connection"			:u'ProAdmin connection',
	"restart_connectoin_btn"		:u'Restart connection',
	"reset_btn"						:u'Reset',
	"greating_title"				:u'Logged in ProSuite as %s',
	"account_column"				:u'Login',
	"name_column"					:u'Name',
	"login_column"					:u'Login as',
	"standalone_text"				:u'What is standalone connection?',
	"proadmin_text"					:u'What is ProAdmin connection?',
	"logout_hint"					:u'click to log out from ProSuite',
	"user_not_logged_in"			:u'Not logged in...',
	"proadmin_management"			:u'ProAdmin management',
	"user_management"				:u'Users management',

	#log off/start button
	"switch_to"						: u"Switch to",
	"logout"						: u"Log out",
	"logoff_caption"				: u"You have been logged off",
	"logoff_message"				: u"You will be redirected to the login page in a few seconds.",


	#free_space
	"Gb"			:u'Gb',
	"Mb"			:u'Mb',
	"of"			:u' of ',
	"free"			:u' free',

}

lang_rectangle = {
	#'id' 							: 	[ 	left,		top,	width,	height 	]
	"user_and_group_manage"	: {
		#top bar
			"top_bar_create_user_btn"		: 	[	"18", 	"85", 	"74", 	"35" 	],
			"top_bar_delete_selected_btn" 	: 	[ 	"112", 	"85", 	"65", 	"35" 	],
			"top_bar_add_to_group_btn"		: 	[ 	"187", 	"85", 	"62", 	"35" 	],
			"top_Bar_create_group_btn"		:	[	"18",	"85",	"84",	"35"	],

		#add to group dialog
			"add_to_group_to_title_text"	:	[ 	"17",	"155",	"15",	"14"	],

		#create user dialog
			"continue_btn"					:	[	"111",	"582",	"188",	"25"	],
			"add_groups_btn"				:	[	"14",	"27",	"100",	"32"	],
			"del_sel_groups_btn"			:	[	"160",	"27",	"140",	"32"	],

		#add user group dialog
			"add_ug_cancel_btn"				:	[	"218",	"397",	"80",	"33"	],
			"add_ug_add_btn"				:	[	"310",	"397",	"80",	"33"	],

		#create group dialog
			"add_users_btn"					:	[	"17",	"67",	"100",	"32"	],
			"del_sel_users_btn"				:	[	"150",	"67",	"140",	"32"	],
			"selected_users_text"			:	[	"19",	"364",	"150",	"14"	],
			"selected_groups_text"			:	[	"8",	"446",	"160",	"14"	],
			"selected_users_count"			:	[	"175",	"364",	"50",	"14"	],
			"selected_groups_count"			:	[	"175",	"446",	"50",	"14"	],

			"objects_per_page_dropdown"		: 	[	"55",	"1",	"52",	"22"	],
		}
}

]]>
		</Library>
		<Library Name="proadmin_config_default">
<![CDATA[from md5 import md5
import ProAdmin
from class_external_settings import ExternalSettings
from proadmin_ldap_connection import LDAPConnection
from proadmin_ldapconfig import LDAPConfig

def create_default_scheme():
	""" insert here creating of application scheme
	"""
	external_settings = ExternalSettings.get_last()

	scheme = None

	if external_settings:
		scheme = create_external_scheme() if external_settings.active == 'active' else None

	if not scheme:
		scheme = create_local_scheme()

	scheme.set_information( application.name )


	app_guid = application.id
	app_type = ProAdmin.ACLObjectType( "Application", app_guid )
	app_type.set_access_types( { 'a': 'Admin' } )
	scheme.add_aclobjecttype( app_type )

	app_guid =  "0190754a-0843-4138-9b07-9a055c50304f"
	app_type = ProAdmin.ACLObjectType( "RemoteApplication", app_guid )
	app_type.set_access_types( { "a": "Admin", 'r': "Read", 'w': 'Write' } )
	scheme.add_aclobjecttype( app_type )

	# set API guid
	scheme.set_api_guid( '19a67ddc-a792-41fd-bbee-b5190126b6dc' )

	scheme.register( make_default=True )
	app = ProAdmin.application()

	# create admin user and admin group
	root = app.create_root_user()
	admin = app.create_admins_group()


def create_local_scheme():
	server = '127.0.0.1'
	login = 'cn=admin,dc=vdombox,dc=local'
	password = 'passwd'

	ldapconnection = LDAPConnection()
	ldapconnection.bind(  server, login, password )

	scheme = ProAdmin.local_scheme( application.id, ldapconnection )
	base_dn = 'dc=vdombox,dc=local'
	scheme.set_option( 'base_dn', base_dn )
	scheme.set_option( 'root_user', 'root' )
	scheme.set_option( 'admin_group', 'Administrators' )

	return scheme



def create_external_scheme():
	import ProAdmin
	import re
	from proadmin_ldap_connection import LDAPConnection
	from proadmin_external_settings import ProAdminSchemeConfig
	from proadmin_ldapconfig import LDAPConfig

	active_config = ProAdminSchemeConfig.get_active()
	connection_settings= ProAdminSchemeConfig.get_connection_settings()

	active_config[ 'base_dn' ] = connection_settings[ 'base_dn' ]

	server = connection_settings[ 'server' ]
	login =  connection_settings[ 'login'  ]
	password = connection_settings[ 'password' ]

	active_config = LDAPConfig( active_config.attributes, active_config.name )

	# try to connect to active directory by some dn
	def try_bind( dn ):
		return LDAPConnection.try_bind( server, dn, password )

	# if login cantains '=' and ',' symbols - it's some dn string
	if re.search('[=,]', login):
		dn = login
	else:
		user_dn = 'cn=Users'
		dn = "%(uid)s=%(login)s,%(user_dn)s,%(base_dn)s" % {
					"uid"		: active_config.get_attribute( 'user_guid' ),
					"login"		: login,
					"user_dn"	: user_dn,
					"base_dn"	: active_config.get_attribute( 'base_dn' ),
		}

	if not try_bind( dn ):
		dn += ',' + active_config.get_attribute( 'base_dn' )

	user_connection = LDAPConnection()
	user_connection.bind( server, dn, password )

	server = '127.0.0.1'
	login = 'cn=admin,dc=vdombox,dc=local'
	password = 'passwd'

	local_connection = LDAPConnection()
	local_connection.bind(  server, login, password )

	scheme = ProAdmin.external_scheme( application.id, local_connection, user_connection, active_config )
	scheme.set_option( 'base_dn', connection_settings[ 'base_dn' ] )
	scheme.set_option( 'root_user', connection_settings[ 'root_user' ] )
	return scheme

]]>
		</Library>
		<Library Name="VEE_utils">
<![CDATA[from vscript.subtypes import 	array, boolean, date, double, empty, binary, \
								integer, nothing, null, string, v_empty, \
								dictionary, v_nothing, generic

from vscript.primitives import primitive
from vscript.subtypes.date import decode_date, encode_date
from datetime import datetime
from vscript import errors, error
from types import   NoneType, FunctionType, MethodType, UnboundMethodType,\
					BuiltinMethodType, BuiltinFunctionType



class Nothing( object ):

	__instance = None


	def __new__( cls, *args, **kwargs ):
		if Nothing.__instance is None:
			Nothing.__instance = object.__new__( cls, *args, **kwargs )
		return Nothing.__instance


	def __nonzero__( self ):
		return False



nothing_inst = Nothing()



unknowntype = lambda value: value

def method_type( method ):
	raise errors.object_has_no_property( method.__name__ )


unwrappers = {
	null					: lambda value: None,
	empty					: lambda value: None,
	nothing					: lambda value: None,
	integer					: lambda value: value.as_integer,
	double					: lambda value: value.as_double,
	string					: lambda value: value.as_string,
	boolean					: lambda value: value.as_boolean,
	date					: lambda value: datetime( *decode_date( value ) ),
	array					: lambda value: unwrapp_array( value ),
	dictionary				: lambda value: unwrapp_dictionary( value ),
	binary					: lambda value: value.as_binary
}

wrappers = {
	long					: lambda value: integer( value ),
	int						: lambda value: integer( value ),
	float					: lambda value: double( value  ),
	unicode					: lambda value: string( value  ),
	str						: lambda value: string( value  ),
	NoneType				: lambda value: v_empty,
	Nothing 				: lambda value: v_nothing,
	list					: lambda value: wrapp_array( value ),
	tuple					: lambda value: wrapp_array( value ),
	dict 					: lambda value: wrapp_dict( value ),
	bool					: lambda value: boolean( value ),
	FunctionType			: lambda value: method_type( value ),
	MethodType				: lambda value: method_type( value ),
	UnboundMethodType		: lambda value: method_type( value ),
	BuiltinFunctionType		: lambda value: method_type( value ),
	BuiltinMethodType		: lambda value: method_type( value ),
	datetime				: lambda value: date( encode_date( *list( value.timetuple() )[:6] ) ),
}

#unwrapp 			= lambda arg: 	unwrappers.get( type( arg.as_simple if not \
#									hasattr( arg, "as_complex" ) else \
#									arg.as_complex ), unknowntype )( arg )

def unwrapp( arg ):
	obj = arg if not isinstance( arg, primitive ) else \
			   arg.as_complex if hasattr( arg, "as_complex" ) else arg.as_simple
	return unwrappers.get( type( obj ), unknowntype )( obj )

#unwrapp 			= lambda arg: 	unwrappers.get( type( arg if not isinstance( arg, primitive ) else \
#													arg.as_complex if hasattr( arg, "as_complex" ) else arg.as_simple ),
#													unknowntype )( arg )

unwrapp_array 		= lambda args: [ unwrapp( arg )	for arg in args ]
unwrapp_dictionary 	= lambda args: dict( [ (  unwrapp( key ) ,  unwrapp( args( key ) ) )
										   for key in args ] )

unwrapp_kwargs		= lambda kwargs: { key: unwrapp( value )
									   for key, value in kwargs.iteritems() }

wrapp 				= lambda arg: 	wrappers.get( type( arg ), unknowntype )( arg )
wrapp_array			= lambda args: array( [ wrapp( arg ) for arg in args ] )
wrapp_dict			= lambda args: dictionary( {  wrapp( key ) : wrapp( value )
											  for key,value in args.iteritems() } )


def convert( method, args, single = False ):

	if method == unwrapp_kwargs:
		return method( args )

	if single: args = ( args, )
	result = method( args )

	if not single: return result
	elif type( result ) == list: return result[ 0 ]
	else: return result( integer( 0 ) )


convert_input_args 		= lambda args: 		convert( unwrapp_array, 	args   )
convert_input_kwargs 	= lambda kwargs: 	convert( unwrapp_kwargs, 	kwargs )
convert_output_arg 		= lambda arg: 		convert( wrapp_array, arg,  True   )


def AutoCast( method ):
	def wrapper( *args, **kwargs ):
		return convert_output_arg( method( 	*convert_input_args( args ),
											**convert_input_kwargs( kwargs )
										) )
	return wrapper


#######################################
#Cached Property Class
#######################################
class CachedProperty(object):
	def __init__(self, func, autocast = False ):
		self.auto_cast = autocast
		self.func = func

	def __get__(self, instance, cls=None):
		result = instance.__dict__[ self.func.__name__ ] = \
			convert_output_arg( self.func( instance ) ) if self.auto_cast \
			else self.func( instance )

		return result

def AutoCastCachedProperty( func ):
	return CachedProperty( func, True )


#######################################
#VScript decorators
#######################################
def v_PropertySimple( func ):
	def wrapper( *args, **kwargs ):
		if "let" in kwargs:
			return func( value = kwargs[ "let" ], retVal = False, *args )
		elif "set" in kwargs:
			raise errors.object_has_no_property( func.__name__ )
		else:
			return func( value = None, retVal = True, *args )
	return wrapper

def v_PropertyComplex( func ):
	def wrapper( *args, **kwargs ):
		if "set" in kwargs:
			return func( value = kwargs[ "set" ], retVal = False, *args )
		elif "let" in kwargs:
			raise errors.object_has_no_property( func.__name__ )
		else:
			return func( value = None, retVal = True, *args )
	return wrapper

def v_PropertyReadOnly( func ):
	def wrapper( *args, **kwargs ):
		if "let" in kwargs or "set" in kwargs:
			raise errors.object_has_no_property( func.__name__ )
		return func( *args, **kwargs )
	return wrapper


#######################################
#Help functions
#######################################
is_string 			= lambda value: isinstance( value, basestring )
is_byte_string 		= lambda value: isinstance( value, str )
is_unicode_string 	= lambda value: isinstance( value, unicode )
is_array  			= lambda value: isinstance( value, (list, tuple) )
is_dict				= lambda value: isinstance( value, dict )

encodeUTF8 = lambda value: value.encode( "utf8" )
decodeUTF8 = lambda value: value.decode( "utf8" )


#Enums
def enum(*sequential, **named):
	enums = dict(zip(sequential, range(len(sequential))), **named)
	enums[ "enums" ] = enums
	return type('Enum', (), enums)
]]>
		</Library>
		<Library Name="vdom_document_archive">
<![CDATA[#version: 28

import xappy
import threading

from os import path as ospath
from datetime import datetime

# configure - set path to directory for xapian bases
XAPIAN_DIRECTORY = 'xapian'

# locks for archives
XAPIAN_LOCKS = {}


class TimedLock(object):
	"""
	Update of lock that block thread in given timeout (default: 25 sec)
	"""
	def __init__(self):
		self.lock = threading.Lock()
		self.time = datetime.now()

	def acquire(self, timeout=25):
		if self.lock.locked() and (datetime.now() - self.time).total_seconds() > 30:
			self.lock.release()

		self.lock.acquire()
		self.time = datetime.now()

	def release(self):
		self.lock.release()
		self.time = datetime.now()


class ArchiveNotFoundError(Exception):
	"""
	Exception raised when archive not found
	"""
	def __init__(self, archive_id):
		super(ArchiveNotFoundError, self).__init__(u"Archive {} not found".format(archive_id))


class Document(object):
	"""
	Base class for documents which will be indexing
	"""
	def __init__(self, archive_id):
		self.id = None				# id of this document
		self.archive_id	= archive_id # id of archive which contains this document

		self._attributes = {}		# special attributes of this document
		self._summarise	= {}		# summarise of query

		# get archive lock
		self._lock 			= XAPIAN_LOCKS[self.archive_id]

	def _base_archive(self):
		"""
		Get access to Base DocumentArchive instance of this document
		"""
		return DocumentArchive(self.archive_id)

	def fields(self):
		"""
		List of special attributes of this document
		"""
		return self._attributes.keys()

	def get_field(self, name):
		"""
		Return value of attribute
		"""
		value = self._attributes[name]
		if type(value) == list:
			value = value[0]

		codecs = ['utf8', 'cp1252', 'latin1']

		if type(value) != unicode:
			for codec in codecs:
				try:
					value = value.decode(codec, 'ignore')
				except:
					continue

		return value

	def set_field(self, name, value=''):
		"""
		Set value of attribute
		"""
		self._attributes[name] = value

	def set_summarise(self, name, value=''):
		"""
		"""
		self._summarise[name] = value


	def fast_summarise(self, field):
		"""
		"""
		if field not in self.fields():
			return ''

		value = self.get_field(field)

		return value[:400]

	def get_summarise(self, name):
		"""
		"""
		if not name in self._summarise:
			return self.fast_summarise(name)

		value = self._summarise[name]
		if type(value) == list:
			value = value[0]

		codecs = ['utf8', 'cp1252', 'latin1']
		if type(value) != unicode:
			for codec in codecs:
				try:
					value = value.decode(codec, 'ignore')
				except:
					continue

		return value

	def _xapian_field(self, key):
		"""
		Return xapian field object for field key
		"""
		return xappy.Field(key, self.get_field(key))

	def _xapian_fields(self):
		"""
		Return list of xappian fields objects for all attributes of this document
		"""
		return [self._xapian_field(key) for key in self.fields()]

	def _xapian_document(self):
		"""
		Create xapian document object - mapping of this document
		"""
		doc = xappy.UnprocessedDocument()
		doc.id = self.id

		for field in self._xapian_fields():
			doc.fields.append(field)

		return doc

	def _iconn(self):
		"""
		Create IndexerConnection object for document's archive
		"""
		self._lock.acquire()

		path = self.xapian_directory()

		if not application.storage.exists(path):
			application.storage.mkdir(path)
			iconn = xappy.IndexerConnection(application.storage.abs_path(path))

			for key in self.fields():
				iconn.add_field_action(key, xappy.FieldActions.INDEX_FREETEXT)
				iconn.add_field_action(key, xappy.FieldActions.STORE_CONTENT)
				iconn.add_field_action(key, xappy.FieldActions.SORTABLE)

			iconn.flush()
			iconn.close()

		iconn = xappy.IndexerConnection(application.storage.abs_path(path))
		return iconn

	def _close(self, iconn):
		iconn.close()
		self._lock.release()

	def fill_from_xapian_document(self, item, summarise=None):
		""" fill document attributes from xapian document
		"""
		self.id = item.id
		self._attributes = item.data

		summarise = summarise or []

		# get summarise if need
		for key in summarise:
			self.set_summarise(key, item.summarise(key))

		return self

	def ispersistent(self, iconn=None):
		"""
		Return True if this document object saved in index else return False
		"""
		result = False
		need_close = False

		try:
			if not iconn:
				iconn = self._iconn()
				need_close = True

			if self.id in iconn.iterids():
				result = True

		finally:
			if need_close: self._close(iconn)

		return result

	def save(self):
		"""
		Save this document in index, or replace if document exists
		"""
		doc = self._xapian_document()

		iconn = self._iconn()
		try:
			iconn.process(doc)

			# add or replace documetn in index
			if not self.ispersistent(iconn):
				self.id = iconn.add(doc)
			else:
				iconn.replace(doc)
				iconn.flush()
		finally:
			self._close(iconn)

		return self

	def delete(self):
		""" delete this document from index
		"""
		if not self.ispersistent():
			return

		iconn = self._iconn()
		try:
			iconn.delete(self.id)
			iconn.flush()
		finally:
			self._close(iconn)

	def create_index_archive(self):
		"""
		"""
		iconn = self._iconn()
		self._close(iconn)

	def xapian_directory(self):
		"""
		Xapian directory
		"""
		return ospath.join(XAPIAN_DIRECTORY, unicode(self.archive_id))


class DocumentArchive(object):
	"""
	Base class for all document archives
	"""
	def __init__(self, doc_id):
		self.id = doc_id	# id of this archive

		# create lock for this archive
		if doc_id not in XAPIAN_LOCKS:
			XAPIAN_LOCKS[doc_id] = TimedLock()

		self._fields = self.create_document().fields()	# empty document of this archive
		self._summarise = set()

	def fields(self):
		"""
		List of fields of document of this archive
		"""
		return self._fields

	def set_summarise(self, name):
		self._summarise.add( name )

	def create_document(self):
		"""
		Create document object of this archive.
		This methods must be implement in concrete realisation DocumetnArchive and Document.
		"""
		return Document(self.id)

	def _sconn(self):
		"""
		Create SearchConnection for this archive
		"""
		path = self.xapian_directory()

		if not application.storage.exists(path):
			self.create_document().create_index_archive()

		return xappy.SearchConnection(application.storage.abs_path(path))

	def count(self, sconn=None):
		"""
		Count of documents in archive's index
		"""
		need_close = False
		if sconn == None:
			sconn = self._sconn()
			need_close = True

		result = sconn.get_doccount()
		if need_close: sconn.close()

		return result

	def ids(self):
		"""
		Return list of all ids in this archive
		"""
		sconn = self._sconn()

		result = [obj_id for obj_id in sconn.iterids()]
		sconn.close()

		return result

	def id_exists(self, doc_id):
		"""
		Check document existence
		"""
		return doc_id in self.ids()

	def get_by_id(self, doc_id):
		"""
		Get document by single id.
		"""
		docs = self.get_by_ids(doc_id)
		if not docs: return None
		return docs[0]

	def get_by_ids(self, ids):
		"""
		Get document by id or list of ids.
		Return list of documents.
		"""
		if type(ids) != list:
			ids = [ids]

		# remove ids that not in archive
		index_ids = self.ids()
		for obj_id in ids:
			if obj_id not in index_ids:
				# Exception ? object modification during iteration
				ids.remove(obj_id)

		sconn = self._sconn()

		docs = [sconn.get_document(obj_id) for obj_id in ids ]

		result = [self.create_document().fill_from_xapian_document(doc) for doc in docs]
		sconn.close()
		return result

	def _search_routine(self, query, sconn, offset=None, limit=None, sortby=None, get_count=None):
		"""
		Routine method for search by query and convert xapian documents to archive documents
		"""
		if not offset:
			offset = 0

		if not limit:
			limit = sconn.get_doccount()

		if not get_count:
			get_count = False

		# check that offset and limit are integer values
		if type(offset) != int:
			offset = int(offset)

		if type(limit) != int:
			limit = int(limit)

		done = False
		docs = []

		# need to retry search if catched XapianDatabaseModifiedError
		while not done:
			try:
				result = sconn.search(query, offset, offset + limit, sortby=sortby)

				# if need only count of search
				if get_count:
					return len(result)

				docs = [self.create_document().fill_from_xapian_document( item, self._summarise ) for item in result]
				done = True

			except xappy.errors.XapianDatabaseModifiedError:
				done = False
				sconn.reopen()

		return docs

	def get_all(self, offset=None, limit=None, sortby=None, get_count=None):
		"""
		Return all document in this archive
		"""
		sconn = self._sconn()

		query = sconn.query_all()
		result = self._search_routine(query, sconn, offset, limit, sortby=sortby, get_count=get_count)

		sconn.close()
		return result

	def search(self, text, offset=None, limit=None, sortby=None, get_count=None):
		"""
		Fulltext search by all attributes of document
		"""
		if not text:
			return []

		sconn = self._sconn()

		query = sconn.query_parse(text, allow_wildcards=True)
#		raise Exception(query)
		result = self._search_routine(query, sconn, offset, limit, sortby=sortby, get_count=get_count)

		sconn.close()
		return result

	def complex_search(self, **kwargs):
		"""
		Search by concrete attributes values.
			reserved keys:
				operator 		- operator for attributes concatination. default operator - 'and'
								  ex: operator = 'or'
		"""
		sconn = self._sconn()
		operator = sconn.OP_AND

		offset 		= None
		limit 		= None
		sortby 		= None
		get_count	= None

		if 'operator' in kwargs:
			operator = {
                "or":  sconn.OP_OR,
                "and": sconn.OP_AND,
                "le":  sconn.OP_VALUE_LE,
                "ge":  sconn.OP_VALUE_GE
            }.get(kwargs['operator'].lower(), sconn.OP_AND)

		if 'offset' in kwargs:
			offset = int(kwargs.pop('offset'))

		if 'limit' in kwargs:
			limit = int(kwargs.pop('limit'))

		if 'sortby' in kwargs:
			sortby = kwargs.pop('sortby')

		if 'get_count' in kwargs:
			get_count = kwargs.pop('get_count')


		# create field-queries
		queries = [ sconn.query_field(key, kwargs[key]) for key in kwargs]
		query = sconn.query_composite(operator, queries)

		result = self._search_routine(query, sconn, offset, limit, sortby=sortby, get_count=get_count)

		sconn.close()

		return result


	def delete(self):
		""" delete all archive
		"""
		path = self.xapian_directory()
		if application.storage.exists(path):
			application.storage.rmtree(self.xapian_directory())


	def xapian_directory( self ):
		return ospath.join(XAPIAN_DIRECTORY, unicode(self.id))



# ------------------------------------------------------------------------------
#			EXAMPLE OF CONCRETE CLASSES IMPLEMENTATION
# ------------------------------------------------------------------------------

#		class FileDocument( Document ):
#			def __init__( self, archive_id ):
#				super( FileDocument, self).__init__( archive_id ) # !!! it's line very IMPORTANT !!!
#
#				# add specify attributes of this document. all attributes must be - strings!
#				self.set_field( 'file_name' )
#				self.set_field( 'content' )
#				self.set_field( 'author' )
#				self.set_field( 'creation_datetime' )
#
#			# add specify methods/properties etc need for this object
#
#			@property
#			def file_name( self ):
#				return self.get_field( 'file_name' )
#
#			@file_name.setter
#			def file_name( self, value):
#				self.set_field( 'file_name', value )
#
#
#
#			@property
#			def content( self ):
#				return self.get_field( 'content' )
#
#			@content.setter
#			def content( self, value ):
#				self.set_field( 'content', value )
#
#
#
#			@property
#			def author( self ):
#				return self.get_field( 'author' )
#
#			@author.setter
#			def author( self, value ):
#				self.set_field( 'author', value )
#
#
#
#			@property
#			def creation_datetime( self ):
#				return self.get_field( 'creation_datetime' )
#
#			@creation_datetime.setter
#			def creation_datetime( self, value ):
#				self.set_field( 'creation_datetime', value )
#
#
#
#
#
#		class SearchSource( DocumentArchive ):
#			# this method must return concrete document
#			def create_document( self ):
#				return FileDocument( self.id )
#

# ------------------------------------------------------------------------------
#			EXAMPLE OF USING
# ------------------------------------------------------------------------------

# --------- INDEXING  ---------

#		from class_search_source import SearchSource
#
#		archive_id = '4f36af1a-911d-4b05-83c1-e2a6dcf0bf02' # guid of archive
#		source = SearchSource( archive_id )
#
#		# create index
#		doc = source.create_document()
#		doc.author = 'root' # temp value
#		doc.file_name = file[1]
#		doc.content = file[0]
#		doc.save()



# --------- SEARCHING  ---------

#		archive_id = '4f36af1a-911d-4b05-83c1-e2a6dcf0bf02' # guid of archive
#		source = SearchSource( archive_id )
#		documents = source.search( search_text )
#
#		documents = source.complex_search( file_name='doc*', author='root' )
#
#		documents = source.get_all()
#
#		documents = source.get_by_id( 1 )
#		documents = source.get_by_id( [1, 2, 3] )
#
]]>
		</Library>
		<Library Name="class_remote_settings">
<![CDATA[""" It's obsolete class. Use it for capability. """

from proadmin_remote_settings import RemoteSettings]]>
		</Library>
		<Library Name="VEE_urllib">
<![CDATA[import urllib2, cookielib, urllib, mimetools, mimetypes, ssl, httplib, socket
from urllib2 import URLError, HTTPError
from vscript import error
from vscript.subtypes import generic, binary
from VEE_std_lib import v_BaseException
from cStringIO import StringIO
from VEE_utils import is_string, is_array, encodeUTF8, decodeUTF8,\
 AutoCast, CachedProperty, AutoCastCachedProperty, is_byte_string, is_unicode_string, \
 enum, wrapp


v_sslversion = enum( 	v_sslv2  = wrapp( ssl.PROTOCOL_SSLv2  ),
						v_sslv23 = wrapp( ssl.PROTOCOL_SSLv23 ),
						v_sslv3  = wrapp( ssl.PROTOCOL_SSLv3  ),
						v_tlsv1  = wrapp( ssl.PROTOCOL_TLSv1  )
					)

v_sslcert = enum( 	v_certnone 		= wrapp( ssl.CERT_NONE 		),
					v_certoptional 	= wrapp( ssl.CERT_OPTIONAL 	),
					v_certrequired 	= wrapp( ssl.CERT_REQUIRED 	),
				)


ssl_params = { 	"keyfile"	  : None,
				"certfile"	  : None,
				"server_side" : False,
				"cert_reqs"	  : ssl.CERT_NONE,
				"ssl_version" : ssl.PROTOCOL_SSLv23,
				"ca_certs"	  : None,
				"do_handshake_on_connect" : True,
				"suppress_ragged_eofs" : True,
				"ciphers"	  : None }

#######################################
#Response Object
#######################################
class v_response_object( generic ):

	def __init__( self, obj ):
		self.object = obj


	@CachedProperty
	def response( self ):
		return self.object


	@CachedProperty
	def handler( self ):
		return self.object


	@CachedProperty
	def encoding( self ):
		if self.response.headers.has_key('Content-type'):
			encoding = self.response.headers[ 'Content-type' ].split( 'charset=' )
			if len( encoding ) > 1 :
				return encoding[ -1 ]
		return None


	@AutoCastCachedProperty
	def v_encoding( self ):
		return self.encoding


	@AutoCastCachedProperty
	def v_code( self ):
		return self.response.code


	@AutoCastCachedProperty
	def v_url( self ):
		return self.response.url


	@AutoCastCachedProperty
	def v_headers( self ):
		return dict(self.response.headers)


	@AutoCastCachedProperty
	def v_msg( self ):
		return self.response.msg


	@AutoCast
	def v_encode( self, data, encoding = None ):
		if not encoding: encoding = self.encoding
		if encoding and data:
			return data.decode( encoding )
		return data


	@AutoCast
	def v_read( self, size=-1, as_binary = False ):
		return binary(self.response.read( size )) if as_binary else \
				self.response.read( size )


	@AutoCast
	def v_readline( self, size=-1, as_binary = False  ):
		return binary(self.response.readline( size )) if as_binary else \
				self.response.readline( size )


	@CachedProperty
	def handler( self ):
		return self.response



#######################################
#Request Object
#######################################
class v_InvalidURLError( v_BaseException ):
	def __init__( self, message ):
		v_BaseException.__init__( 	self,
							message = message )



@AutoCast
def v_request( url, headers = None ):

	if not url: raise v_InvalidURLError( "URL could not be empty" )
	if url.startswith( "file:", 0 ):
		raise v_InvalidURLError( u"Unsupported URL - {0}".format( url ) )

	return v_request_object(
					urllib2.Request( 	encodeUTF8( url ),
										headers = headers if headers else {} ) )



class v_request_object( generic ):

	def __init__( self, obj ):
		self.object = obj


	@CachedProperty
	def request( self ):
		return self.object


	def encoding( self ):
		return self.request.get_header( 'Content-type', '' ).split( 'charset=' )[-1]


	@AutoCast
	def v_encoding( self ):
		return self.encoding()


	@AutoCast
	def v_method( self ):
		return self.request.get_method()


	@AutoCast
	def v_hasdata( self ):
		return self.request.has_data()


	@AutoCast
	def v_data( self ):
		return decodeUTF8( self.request.get_data() )


	@AutoCast
	def v_adddata( self, data ):
		self.request.add_data( encodeUTF8( data ) if is_unicode_string( data ) else data )


	@AutoCast
	def v_addheader( self, key, value ):
		self.request.add_header( key, value )


	@AutoCast
	def v_addunredirectedheader( self, key, value ):
		self.request.add_unredirected_header( encodeUTF8( key ), encodeUTF8( value ) )


	@AutoCast
	def v_hasheader( self, key ):
		return self.request.has_header( key.title() )


	@AutoCast
	def v_fullurl( self ):
		return self.request.get_full_url()


	@AutoCast
	def v_type( self ):
		return self.request.get_type()


	@AutoCast
	def v_host( self ):
		return self.request.get_host()


	@AutoCast
	def v_selector( self ):
		return self.request.get_selector()


	@AutoCast
	def v_getheader( self, name, default=None ):
		return self.request.get_header( name.title(), default )


	@AutoCast
	def v_headers( self ):
		return dict( self.request.headers )


	def encode_headers( self ):
		request = self.request
		header_items = request.headers.items()
		request.headers.clear()
		for item in header_items: request.add_header( encodeUTF8( item[0] ), encodeUTF8( item[1] ) )



#######################################
#Connection Object
#######################################
class v_URLError( v_BaseException ):
	pass

class CertificateError( ValueError ):
	pass

class SocketError( socket.error ):
	pass

class v_CertificateError( ValueError ):
	pass

class v_SocketError( socket.error ):
	pass



@AutoCast
def v_urlopen( request, opener=None ):

	if opener is None: opener = urllib2.build_opener()
	else: opener = opener.opener

	try:
		if is_string( request ): request = encodeUTF8( request )
		else:
			request.encode_headers()
			request = request.request

		response = opener.open( request )

	except HTTPError, e: response = e
	except URLError, e:  raise  v_URLError( e.reason )
	except CertificateError, e:  raise  v_CertificateError( str(e) )
	except SocketError, e:  raise  v_SocketError( str(e) )

	return v_response_object( response )



class v_connection_object( generic ):

	def __init__( self ):
		self.object = urllib2.build_opener()
		self.cookie = self.multipart = self.proxy = self.auth = self.ssl = False


	@CachedProperty
	def opener( self ):
		return self.object


	@AutoCast
	def v_open( self, request ):
		return v_urlopen( request, self )


	def v_usercookie( self ):
		if not self.cookie:
			self.opener.add_handler( urllib2.HTTPCookieProcessor( cookielib.CookieJar() ) )
			self.cookie = True


	def v_usemultipart( self ):
		if not self.multipart:
			self.opener.add_handler( MultipartPostHandler() )
			self.multipart = True


	@AutoCast
	def v_useproxy( self, proxy_url, proxy_scheme = "http",  ):
		if not self.proxy:
			proxy_handler = urllib2.ProxyHandler( { proxy_scheme: proxy_url } )
			self.opener.add_handler( proxy_handler )
			self.proxy = True


	@AutoCast
	def v_useauthorization( self, proxy_url, proxy_user = "", proxy_pass = "", proxy_realm = None ):
		if not self.auth:
			password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
			password_mgr.add_password( proxy_realm, proxy_url, proxy_user, proxy_pass )
			self.opener.add_handler( urllib2.ProxyBasicAuthHandler( password_mgr )  )
			self.auth = True


	@AutoCast
	def v_usehttps( self, params ):
		if not self.ssl:
			d = { param : params.get( param, ssl_params[ param ] ) for param in ssl_params }

			if d[ "keyfile"  ] is not None: d[ "keyfile"  ] = d[ "keyfile"  ].path
			if d[ "certfile" ] is not None: d[ "certfile" ] = d[ "certfile" ].path
			if d[ "ca_certs" ] is not None: d[ "ca_certs" ] = d[ "ca_certs" ].path

			self.opener.add_handler( HTTPSHandler( **d ) )
			self.ssl = True



v_connection = lambda: v_connection_object()

#######################################
#URLLib utility functions
#######################################
@AutoCast
def v_quote( text, safe = "/" ):
	return urllib.quote( encodeUTF8( text ), safe )

@AutoCast
def v_quoteplus( text, safe = "/" ):
	return urllib.quote_plus( encodeUTF8( text ), safe )

@AutoCast
def v_unquote( text ):
	return urllib.unquote( text )

@AutoCast
def v_unquoteplus( text ):
	return urllib.unquote_plus( text )

@AutoCast
def v_urlencode( query, doseq = True ):
	return urllib.urlencode( { encodeUTF8( k ) : encodeUTF8( v ) for k,v in query.items() }, doseq )



class Callable:
	def __init__(self, anycallable):
		self.__call__ = anycallable

doseq = 1

class MultipartPostHandler(urllib2.BaseHandler):
	handler_order = urllib2.HTTPHandler.handler_order - 10 # needs to run first

	def http_request(self, request):

		data = request.get_data()
		if type(data) == dict:

			files, vars = [], []
#			try:
			for(key, value) in data.iteritems():
				if is_array( value ):
					files.append((key, value))
				else:
					vars.append((key, value))
#			except TypeError:
#				systype, value, traceback = sys.exc_info()
#				raise TypeError, "not a valid non-string sequence or mapping object", traceback

			if len(files) == 0:
				data = urllib.urlencode(vars, doseq)
			else:
				boundary, data = self.multipart_encode( vars, files )
				contenttype = 'multipart/form-data; boundary=%s' % boundary
				request.add_unredirected_header('Content-Type', contenttype)
				data = data.getvalue()

			request.add_data( data )
		return request

	def multipart_encode(vars, files, boundary = None, buffer = None):

		if boundary is None:
			boundary = mimetools.choose_boundary()

		buffer = StringIO()

		for(key, value) in vars:
			buffer.write( '--{0}\r\nContent-Disposition: form-data; name="{1}"\r\n\r\n{2}\r\n'.format(
				boundary, key, value ) )

		for(key,  lt) in files:
			filename, fd = lt[0], lt[1].handler
			fd.seek(0)
			contenttype = mimetypes.guess_type(filename)[0] or 'application/octet-stream' #.encode("utf8") or 'application/octet-stream'
			buffer.write( '--{0}\r\nContent-Disposition: form-data; name="{1}"; filename="{2}"\r\nContent-Type: {3}\r\n\r\n{4}\r\n'.format(
						boundary, key, filename,contenttype, fd.read() ) )

		buffer.write( '--{0}--\r\n\r\n'.format( boundary ) )
		return boundary, buffer

	multipart_encode = Callable(multipart_encode)
	https_request = http_request



# HTTPS

def match_hostname(cert, hostname):
	if not cert:
		raise ValueError("empty or no certificate")
	dnsnames = []
	san = cert.get('subjectAltName', ())
	for key, value in san:
		if key == 'DNS':
			if _dnsname_to_pat(value).match(hostname):
				return
			dnsnames.append(value)
	if not dnsnames:
		for sub in cert.get('subject', ()):
			for key, value in sub:
				if key == 'commonName':
					if _dnsname_to_pat(value).match(hostname):
						return
					dnsnames.append(value)
	if len(dnsnames) > 1:
		raise CertificateError("hostname %r "
			"doesn't match either of %s"
			% (hostname, ', '.join(map(repr, dnsnames))))
	elif len(dnsnames) == 1:
		raise CertificateError("hostname %r "
			"doesn't match %r"
			% (hostname, dnsnames[0]))
	else:
		raise CertificateError("no appropriate commonName or "
			"subjectAltName fields were found")


def _dnsname_to_pat(dn):
	pats = []
	for frag in dn.split(r'.'):
		if frag == '*':
			pats.append('[^.]+')
		else:
			frag = re.escape(frag)
			pats.append(frag.replace(r'\*', '[^.]*'))
	return re.compile(r'\A' + r'\.'.join(pats) + r'\Z', re.IGNORECASE)





class HTTPSConnection( httplib.HTTPSConnection ):

	def __init__( self, host, **kwargs ):
		for param in ssl_params:
			self.__dict__[ param ] = kwargs.pop( param )

		self.checker = match_hostname
		httplib.HTTPSConnection.__init__(self, host, **kwargs)


	def connect( self ):
		args = [ ( self.host, self.port ), self.timeout ]
		if hasattr( self, 'source_address' ):
			args.append( self.source_address )

		sock = socket.create_connection( *args )

		if getattr( self, '_tunnel_host', None ):
			self.sock = sock
			self._tunnel()

		kwargs = {}
		self.sock = ssl.wrap_socket( sock,
										  **{ param : self.__dict__[ param ] for param in ssl_params }
									)

		if self.checker is not None:
			try:
				self.checker( self.sock.getpeercert(), self.host )
			except CertificateError:
				self.sock.shutdown( socket.SHUT_RDWR )
				self.sock.close()
				raise



class HTTPSHandler( urllib2.HTTPSHandler ):

	def __init__( self, *args, **kwargs ):
		urllib2.HTTPSHandler.__init__( self )
		for param in ssl_params:
			self.__dict__[ param ] = kwargs.pop( param )
		self.checker = match_hostname


	def https_open( self, req ):
		return self.do_open( self.getConnection, req )


	def getConnection( self, host, **kwargs ):
		d.update( { param : self.__dict__[ param ] for param in ssl_params } )
		return HTTPSConnection( host, **d )





EXCEPTIONS = (
	v_InvalidURLError,
	v_URLError,
	v_CertificateError,
	v_SocketError
)

import sys
current_module = sys.modules[__name__]
environment = tuple( (  (cls.__name__.lower(), error( cls ) ) for cls in EXCEPTIONS ) ) + \
( ( "v_urllib", 	current_module ), )
]]>
		</Library>
		<Library Name="py_distutils_version">
<![CDATA[#
# distutils/version.py
#
# Implements multiple version numbering conventions for the
# Python Module Distribution Utilities.
#
# $Id$
#

"""Provides classes to represent module version numbers (one class for
each style of version numbering).  There are currently two such classes
implemented: StrictVersion and LooseVersion.

Every version number class implements the following interface:
  * the 'parse' method takes a string and parses it to some internal
    representation; if the string is an invalid version number,
    'parse' raises a ValueError exception
  * the class constructor takes an optional string argument which,
    if supplied, is passed to 'parse'
  * __str__ reconstructs the string that was passed to 'parse' (or
    an equivalent string -- ie. one that will generate an equivalent
    version number instance)
  * __repr__ generates Python code to recreate the version number instance
  * __cmp__ compares the current instance with either another instance
    of the same class or a string (which will be parsed to an instance
    of the same class, thus must follow the same rules)
"""

import string, re
from types import StringType

class Version:
    """Abstract base class for version numbering classes.  Just provides
    constructor (__init__) and reproducer (__repr__), because those
    seem to be the same for all version numbering classes.
    """

    def __init__ (self, vstring=None):
        if vstring:
            self.parse(vstring)

    def __repr__ (self):
        return "%s ('%s')" % (self.__class__.__name__, str(self))


# Interface for version-number classes -- must be implemented
# by the following classes (the concrete ones -- Version should
# be treated as an abstract class).
#    __init__ (string) - create and take same action as 'parse'
#                        (string parameter is optional)
#    parse (string)    - convert a string representation to whatever
#                        internal representation is appropriate for
#                        this style of version numbering
#    __str__ (self)    - convert back to a string; should be very similar
#                        (if not identical to) the string supplied to parse
#    __repr__ (self)   - generate Python code to recreate
#                        the instance
#    __cmp__ (self, other) - compare two version numbers ('other' may
#                        be an unparsed version string, or another
#                        instance of your version class)


class StrictVersion (Version):

    """Version numbering for anal retentives and software idealists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of two or three
    dot-separated numeric components, with an optional "pre-release" tag
    on the end.  The pre-release tag consists of the letter 'a' or 'b'
    followed by a number.  If the numeric components of two version
    numbers are equal, then one with a pre-release tag will always
    be deemed earlier (lesser) than one without.

    The following are valid version numbers (shown in the order that
    would be obtained by sorting according to the supplied cmp function):

        0.4       0.4.0  (these two are equivalent)
        0.4.1
        0.5a1
        0.5b3
        0.5
        0.9.6
        1.0
        1.0.4a3
        1.0.4b1
        1.0.4

    The following are examples of invalid version numbers:

        1
        2.7.2.2
        1.3.a4
        1.3pl1
        1.3c4

    The rationale for this version numbering system will be explained
    in the distutils documentation.
    """

    version_re = re.compile(r'^(\d+) \. (\d+) (\. (\d+))? ([ab](\d+))?$',
                            re.VERBOSE)


    def parse (self, vstring):
        match = self.version_re.match(vstring)
        if not match:
            raise ValueError, "invalid version number '%s'" % vstring

        (major, minor, patch, prerelease, prerelease_num) = \
            match.group(1, 2, 4, 5, 6)

        if patch:
            self.version = tuple(map(string.atoi, [major, minor, patch]))
        else:
            self.version = tuple(map(string.atoi, [major, minor]) + [0])

        if prerelease:
            self.prerelease = (prerelease[0], string.atoi(prerelease_num))
        else:
            self.prerelease = None


    def __str__ (self):

        if self.version[2] == 0:
            vstring = string.join(map(str, self.version[0:2]), '.')
        else:
            vstring = string.join(map(str, self.version), '.')

        if self.prerelease:
            vstring = vstring + self.prerelease[0] + str(self.prerelease[1])

        return vstring


    def __cmp__ (self, other):
        if isinstance(other, StringType):
            other = StrictVersion(other)

        compare = cmp(self.version, other.version)
        if (compare == 0):              # have to compare prerelease

            # case 1: neither has prerelease; they're equal
            # case 2: self has prerelease, other doesn't; other is greater
            # case 3: self doesn't have prerelease, other does: self is greater
            # case 4: both have prerelease: must compare them!

            if (not self.prerelease and not other.prerelease):
                return 0
            elif (self.prerelease and not other.prerelease):
                return -1
            elif (not self.prerelease and other.prerelease):
                return 1
            elif (self.prerelease and other.prerelease):
                return cmp(self.prerelease, other.prerelease)

        else:                           # numeric versions don't match --
            return compare              # prerelease stuff doesn't matter


# end class StrictVersion


# The rules according to Greg Stein:
# 1) a version number has 1 or more numbers separated by a period or by
#    sequences of letters. If only periods, then these are compared
#    left-to-right to determine an ordering.
# 2) sequences of letters are part of the tuple for comparison and are
#    compared lexicographically
# 3) recognize the numeric components may have leading zeroes
#
# The LooseVersion class below implements these rules: a version number
# string is split up into a tuple of integer and string components, and
# comparison is a simple tuple comparison.  This means that version
# numbers behave in a predictable and obvious way, but a way that might
# not necessarily be how people *want* version numbers to behave.  There
# wouldn't be a problem if people could stick to purely numeric version
# numbers: just split on period and compare the numbers as tuples.
# However, people insist on putting letters into their version numbers;
# the most common purpose seems to be:
#   - indicating a "pre-release" version
#     ('alpha', 'beta', 'a', 'b', 'pre', 'p')
#   - indicating a post-release patch ('p', 'pl', 'patch')
# but of course this can't cover all version number schemes, and there's
# no way to know what a programmer means without asking him.
#
# The problem is what to do with letters (and other non-numeric
# characters) in a version number.  The current implementation does the
# obvious and predictable thing: keep them as strings and compare
# lexically within a tuple comparison.  This has the desired effect if
# an appended letter sequence implies something "post-release":
# eg. "0.99" < "0.99pl14" < "1.0", and "5.001" < "5.001m" < "5.002".
#
# However, if letters in a version number imply a pre-release version,
# the "obvious" thing isn't correct.  Eg. you would expect that
# "1.5.1" < "1.5.2a2" < "1.5.2", but under the tuple/lexical comparison
# implemented here, this just isn't so.
#
# Two possible solutions come to mind.  The first is to tie the
# comparison algorithm to a particular set of semantic rules, as has
# been done in the StrictVersion class above.  This works great as long
# as everyone can go along with bondage and discipline.  Hopefully a
# (large) subset of Python module programmers will agree that the
# particular flavour of bondage and discipline provided by StrictVersion
# provides enough benefit to be worth using, and will submit their
# version numbering scheme to its domination.  The free-thinking
# anarchists in the lot will never give in, though, and something needs
# to be done to accommodate them.
#
# Perhaps a "moderately strict" version class could be implemented that
# lets almost anything slide (syntactically), and makes some heuristic
# assumptions about non-digits in version number strings.  This could
# sink into special-case-hell, though; if I was as talented and
# idiosyncratic as Larry Wall, I'd go ahead and implement a class that
# somehow knows that "1.2.1" < "1.2.2a2" < "1.2.2" < "1.2.2pl3", and is
# just as happy dealing with things like "2g6" and "1.13++".  I don't
# think I'm smart enough to do it right though.
#
# In any case, I've coded the test suite for this module (see
# ../test/test_version.py) specifically to fail on things like comparing
# "1.2a2" and "1.2".  That's not because the *code* is doing anything
# wrong, it's because the simple, obvious design doesn't match my
# complicated, hairy expectations for real-world version numbers.  It
# would be a snap to fix the test suite to say, "Yep, LooseVersion does
# the Right Thing" (ie. the code matches the conception).  But I'd rather
# have a conception that matches common notions about version numbers.

class LooseVersion (Version):

    """Version numbering for anarchists and software realists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of a series of numbers,
    separated by either periods or strings of letters.  When comparing
    version numbers, the numeric components will be compared
    numerically, and the alphabetic components lexically.  The following
    are all valid version numbers, in no particular order:

        1.5.1
        1.5.2b2
        161
        3.10a
        8.02
        3.4j
        1996.07.12
        3.2.pl0
        3.1.1.6
        2g6
        11g
        0.960923
        2.2beta29
        1.13++
        5.5.kw
        2.0b1pl0

    In fact, there is no such thing as an invalid version number under
    this scheme; the rules for comparison are simple and predictable,
    but may not always give the results you want (for some definition
    of "want").
    """

    component_re = re.compile(r'(\d+ | [a-z]+ | \.)', re.VERBOSE)

    def __init__ (self, vstring=None):
        if vstring:
            self.parse(vstring)


    def parse (self, vstring):
        # I've given up on thinking I can reconstruct the version string
        # from the parsed tuple -- so I just store the string here for
        # use by __str__
        self.vstring = vstring
        components = filter(lambda x: x and x != '.',
                            self.component_re.split(vstring))
        for i in range(len(components)):
            try:
                components[i] = int(components[i])
            except ValueError:
                pass

        self.version = components


    def __str__ (self):
        return self.vstring


    def __repr__ (self):
        return "LooseVersion ('%s')" % str(self)


    def __cmp__ (self, other):
        if isinstance(other, StringType):
            other = LooseVersion(other)

        return cmp(self.version, other.version)


# end class LooseVersion
]]>
		</Library>
		<Library Name="prosuite_localization_utils">
<![CDATA["""
"""

DEFAULT_LANG_REQ_NAME = "_ln_"
DEFAULT_LANGUAGE = "en_US"


def get_lang():
    """
    """
    lang = DEFAULT_LANGUAGE

    if DEFAULT_LANG_REQ_NAME in request.arguments:
        lang = request.arguments[DEFAULT_LANG_REQ_NAME]

    elif "lang" in session:
        lang = session["lang"]

    elif "HTTP_ACCEPT-LANGUAGE" in request.environment:
        lang = request.environment["HTTP_ACCEPT-LANGUAGE"]

    session["lang"] = lang[:2]
    return session["lang"]


###############################################################################

DEFAULT_LOC_PROPERTIES = [ "title", "label", "text", "value" ]


class LocalizationError(Exception):
    pass


class LocalizationAttrNotFound(LocalizationError):
    def __init__(self, obj_name, prop):
        LocalizationError.__init__(
            self,
            u"Can't find property '{prop}' for object '{obj_name}'".format(
                prop=prop,
                obj_name=obj_name
            )
        )


class LocalizationDefaultAttrNotFound(LocalizationAttrNotFound):
    def __init__(self, obj_name):
        LocalizationAttrNotFound.__init__(
            self,
            obj_name=obj_name,
            prop=u" or ".join(DEFAULT_LOC_PROPERTIES)
        )


def localize_string(localization_source, loc_args):
    """
    """
    loc_key, format_args = (loc_args, None) if isinstance(loc_args, basestring) else loc_args
    loc_text = localization_source[loc_key]
    if format_args:
        loc_text = loc_text.format(**format_args)

    return loc_text


def localize_object(obj, loc_text, prop=None):
    """
    """
    if not prop:
        for default_prop in DEFAULT_LOC_PROPERTIES:
            if hasattr(obj, default_prop):
                prop = default_prop
                break

        else:
            raise LocalizationDefaultAttrNotFound(obj.name)

    elif not hasattr(obj, prop):
        raise LocalizationAttrNotFound(obj.name, prop)

    setattr(obj, prop, loc_text)


def localize(loc_objects, localization_source):
    """Localize objects.
        - @objects is dict like:
        {
            vdom_object | [vdom_object, vdom_object] : localization_key,
            vdom_object | [vdom_object, vdom_object] : {
                property: localization_key
            },
            vdom_object | [vdom_object, vdom_object] : {
                property: [
                    localization_key,
                    dict of named arguments for ".format"
                ]

            },
            vdom_object | [vdom_object, vdom_object] : [
                localization_key,
                dict of named arguments for ".format"
            ]
        }
    """

    # 2 cycles for optimization
    for objects, loc_data in loc_objects.iteritems():
        objects = objects if isinstance(objects, (list, tuple)) else (objects,)

        if isinstance(loc_data, dict):
            for prop, loc_data in loc_data.items():
                text = localize_string(localization_source, loc_data)
                for obj in objects:
                    localize_object(obj, text, prop)


        else:
            text = localize_string(localization_source, loc_data)
            for obj in objects:
                localize_object(obj, text)


class Localization(object):

    def __init__(self, loc_source=None, controls=None):
        self.controls = controls or {}
        self.localization = loc_source

    def localize(self):
        localize(self.controls, self)

    def __getitem__(self, key):
        return self.localization.get(key, key)
]]>
		</Library>
		<Library Name="VEE_resources">
<![CDATA[from VEE_std_lib import v_buffer, v_BaseException
from VEE_utils import AutoCast
from vscript import generic
import os, urllib


def fullpath( fn ):
	def wrapper( *args, **kwargs ):
		arguments = list( args )
		self, path = arguments[:2]
		arguments[1] = os.path.join( self.plugin_path(), os.path.basename( path ) )
		return fn( *arguments, **kwargs )
	return wrapper



TMP_FOLDER = "tmp"
RES_FOLDER = "res"
DB_FOLDER = "db"



class v_res_file( v_buffer ):

	def __init__( self, path, mode="rb", file_obj = None ):
		v_buffer.__init__( self, "" )
		self.mode = "rb"
		self.path = application.storage.abs_path( path )


	def open( self ):
		return application.storage.open( self.path, self.mode )



class StorageManager( object ):

	@classmethod
	def open( self, path, mode = "rb" ):
		if self.exists( path ): return application.storage.open( path, mode )
		else: raise Exception( "Open: no such path: %s" % path )


	@classmethod
	def delete( self, path ):
		if self.exists( path ): return application.storage.delete( path )
		else: raise Exception( "Delete: no such path: %s" % path )


	@classmethod
	def write( self, path, fd ):
		return application.storage.write( path, fd )


	@classmethod
	def getsize( self, path ):
		if self.exists( path ): return application.storage.getsize( path )
		else: raise Exception( "GetSize: no such path: %s" % path )


	@classmethod
	def mkdir( self, path ):
		if not self.exists( path ): application.storage.mkdir( path )
		else: raise Exception( "mkdir: such path already exist: %s" % path )


	@classmethod
	def exists( self, path ):
		return application.storage.exists( path )


	@classmethod
	def isfile( self, path ):
		return application.storage.isfile( path )


	@classmethod
	def isdir( self, path ):
		return application.storage.isdir( path )


	@classmethod
	def listdir( self, path ):
		return application.storage.listdir( path )



_PUBLIC_URL = "/get_plugin_resource?guid={0}&name={1}&type={2}"



class BaseResourceManager( object ):

	def __init__( self, plugin_guid ):
		self._plugin_guid = plugin_guid
		self._path = ""


	plugin_guid	 = property( lambda x: x._plugin_guid )
	path		 = property( lambda x: x._path )


	@fullpath
	def open( self, path, mode="rb" ):
		return StorageManager.open( path, mode )


	@fullpath
	def delete( self, path ):
		StorageManager.delete( path )


	@fullpath
	def write( self, path, fd ):
		StorageManager.write( path, fd )


	@fullpath
	def size( self, path ):
		return StorageManager.getsize( path )


	def mkdir( self, path ):
		pass


	@fullpath
	def exists( self, path ):
		return self._exists( path )


	def _exists( self, path ):
		return StorageManager.exists( path )


	@fullpath
	def isfile( self, path ):
		return StorageManager.isfile( path )


	@fullpath
	def isdir( self, path ):
		return StorageManager.isdir( path )


	@fullpath
	def listdir( self, path ):
		return StorageManager.listdir( path )


	def plugin_path( self ):
		return 	os.path.join( self.plugin_guid, self.path ) \
				if self._path else self.plugin_guid


	def abs_path( self ):
		return application.storage.abs_path( self.plugin_path() )


	def delete_all( self ):
		for res in self.listdir( "." ): self.delete( res )


	def public_link( self, name, res_type ):
		return _PUBLIC_URL.format(
						self.plugin_guid,
						urllib.quote( name ),
						res_type	)



class ResourceManager( BaseResourceManager ):
	"""Class for manage resources.
		All resources are stored in ./res folders
	"""

	def __init__( self, plugin_guid, path ):
		BaseResourceManager.__init__( self, plugin_guid )
		self._path = path


	def abs_path( self, file_name ):
		return os.path.join( BaseResourceManager.abs_path( self ), os.path.basename( file_name ) )

	def public_link( self, name ):
		return super( ResourceManager, self ).public_link( name, self._path )


	resourcelist	= property( lambda x: x.listdir( "." ) )
	import_res 		= BaseResourceManager.write
	export_res		= BaseResourceManager.open
	delete_res		= BaseResourceManager.delete



ResourceFolderManager = lambda guid: ResourceManager( guid, RES_FOLDER )
TemporaryFolderManager = lambda guid: ResourceManager( guid, TMP_FOLDER )



def create_plugin_dir( guid ):
	if not StorageManager.exists( guid ):
		StorageManager.mkdir( guid )
		for p in [ TMP_FOLDER, RES_FOLDER, DB_FOLDER ]:
			StorageManager.mkdir( os.path.join( guid, p ) )



def delete_plugin_dir( guid ):
	if StorageManager.exists( guid ): application.storage.rmtree( guid )



class v_BaseResourceManager( generic ):

	def __init__( self ):
		self.manager = None


	@AutoCast
	def v_resources( self ):
		return self.manager.resourcelist


	@AutoCast
	def v_size( self, name ):
		return self.manager.size( name )


	@AutoCast
	def v_exists( self, name ):
		return self.manager.exists( name )


	@AutoCast
	def v_open( self, name, mode="rb" ):
		return v_res_file( self.manager.abs_path( name ), mode )


	@AutoCast
	def v_write( self, name, fd ):
		self.manager.write( name, fd.handler )


	@AutoCast
	def v_delete( self, name ):
		self.manager.delete( name )


	@AutoCast
	def v_publiclink( self, name ):
		return self.manager.public_link( name )


	def v_delete_all( self ):
		self.manager.delete_all()


	#Obsolete namse
	v_public_link = v_publiclink



class v_ResManager( v_BaseResourceManager ):

	def __init__( self, plugin_guid ):
		v_BaseResourceManager.__init__( self )
		self.manager = ResourceFolderManager( plugin_guid )


	@AutoCast
	def v_open( self, name ):
		return v_BaseResourceManager.v_open( self, name, "rb" )


	@AutoCast
	def v_write( self, name, fd ):
		raise Exception( "This method doesn't support")


	@AutoCast
	def v_delete( self, name ):
		raise Exception( "This method doesn't support")



class v_TempResManager( v_BaseResourceManager ):

	def __init__( self, plugin_guid ):
		v_BaseResourceManager.__init__( self )
		self.manager = TemporaryFolderManager( plugin_guid )



]]>
		</Library>
		<Library Name="ext_peewee">
<![CDATA[# May you do good and not evil
# May you find forgiveness for yourself and forgive others
# May you share freely, never taking more than you give.  -- SQLite source code
#
# As we enjoy great advantages from the inventions of others, we should be glad
# of an opportunity to serve others by an invention of ours, and this we should
# do freely and generously.  -- Ben Franklin
#
#     (\
#     (  \  /(o)\     caw!
#     (   \/  ()/ /)
#      (   `;.))'".)
#       `(/////.-'
#    =====))=))===()
#      ///'
#     //
#    '

import datetime
import decimal
import hashlib
import operator
import re
import sys
import threading
import uuid
from collections import deque
from collections import namedtuple
try:
    from collections import OrderedDict
except ImportError:
    OrderedDict = dict
from copy import deepcopy
from functools import wraps
from inspect import isclass

__version__ = '2.6.3'
__all__ = [
    'BareField',
    'BigIntegerField',
    'BlobField',
    'BooleanField',
    'CharField',
    'Check',
    'Clause',
    'CompositeKey',
    'DatabaseError',
    'DataError',
    'DateField',
    'DateTimeField',
    'DecimalField',
    'DoesNotExist',
    'DoubleField',
    'DQ',
    'Field',
    'FixedCharField',
    'FloatField',
    'fn',
    'ForeignKeyField',
    'ImproperlyConfigured',
    'IntegerField',
    'IntegrityError',
    'InterfaceError',
    'InternalError',
    'JOIN',
    'JOIN_FULL',
    'JOIN_INNER',
    'JOIN_LEFT_OUTER',
    'ManyToManyField',
    'Model',
    'MySQLDatabase',
    'NotSupportedError',
    'OperationalError',
    'Param',
    'PostgresqlDatabase',
    'prefetch',
    'PrimaryKeyField',
    'ProgrammingError',
    'Proxy',
    'R',
    'SqliteDatabase',
    'SQL',
    'TextField',
    'TimeField',
    'Using',
    'UUIDField',
    'Window',
]

# Python 2/3 compatibility helpers. These helpers are used internally and are
# not exported.
def with_metaclass(meta, base=object):
    return meta("NewBase", (base,), {})

PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3
PY26 = sys.version_info[:2] == (2, 6)
if PY3:
    import builtins
    from collections import Callable
    from functools import reduce
    callable = lambda c: isinstance(c, Callable)
    unicode_type = str
    string_type = bytes
    basestring = str
    print_ = getattr(builtins, 'print')
    binary_construct = lambda s: bytes(s.encode('raw_unicode_escape'))
    def reraise(tp, value, tb=None):
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
        raise value
elif PY2:
    unicode_type = unicode
    string_type = basestring
    binary_construct = buffer
    def print_(s):
        sys.stdout.write(s)
        sys.stdout.write('\n')
    exec('def reraise(tp, value, tb=None): raise tp, value, tb')
else:
    raise RuntimeError('Unsupported python version.')

# By default, peewee supports Sqlite, MySQL and Postgresql.
try:
    import sqlite3
except ImportError:
    try:
        from pysqlite2 import dbapi2 as sqlite3
    except ImportError:
        sqlite3 = None
try:
    from psycopg2cffi import compat
    compat.register()
except ImportError:
    pass
try:
    import psycopg2
    from psycopg2 import extensions as pg_extensions
except ImportError:
    psycopg2 = None
try:
    import MySQLdb as mysql  # prefer the C module.
except ImportError:
    try:
        import pymysql as mysql
    except ImportError:
        mysql = None

try:
    from playhouse.speedups import strip_parens
except ImportError:
    def strip_parens(s):
        # Quick sanity check.
        if not s or s[0] != '(':
            return s

        ct = i = 0
        l = len(s)
        while i < l:
            if s[i] == '(' and s[l - 1] == ')':
                ct += 1
                i += 1
                l -= 1
            else:
                break
        if ct:
            # If we ever end up with negatively-balanced parentheses, then we
            # know that one of the outer parentheses was required.
            unbalanced_ct = 0
            required = 0
            for i in range(ct, l - ct):
                if s[i] == '(':
                    unbalanced_ct += 1
                elif s[i] == ')':
                    unbalanced_ct -= 1
                if unbalanced_ct < 0:
                    required += 1
                    unbalanced_ct = 0
                if required == ct:
                    break
            ct -= required
        if ct > 0:
            return s[ct:-ct]
        return s

try:
    from cStringIO import StringIO
except ImportError:
    if sys.version_info[0] == 2:
        from StringIO import StringIO
    else:
        from io import StringIO

try:
    import bz2
except ImportError:
    bz2 = None

try:
    import zlib
except ImportError:
    zlib = None

try:
    from Crypto.Cipher import AES
    from Crypto import Random
except ImportError:
    AES = Random = None


if sqlite3:
    sqlite3.register_adapter(decimal.Decimal, str)
    sqlite3.register_adapter(datetime.date, str)
    sqlite3.register_adapter(datetime.time, str)

DATETIME_PARTS = ['year', 'month', 'day', 'hour', 'minute', 'second']
DATETIME_LOOKUPS = set(DATETIME_PARTS)

# Sqlite does not support the `date_part` SQL function, so we will define an
# implementation in python.
SQLITE_DATETIME_FORMATS = (
    '%Y-%m-%d %H:%M:%S',
    '%Y-%m-%d %H:%M:%S.%f',
    '%Y-%m-%d',
    '%H:%M:%S',
    '%H:%M:%S.%f',
    '%H:%M')

def _sqlite_date_part(lookup_type, datetime_string):
    assert lookup_type in DATETIME_LOOKUPS
    if not datetime_string:
        return
    dt = format_date_time(datetime_string, SQLITE_DATETIME_FORMATS)
    return getattr(dt, lookup_type)

SQLITE_DATE_TRUNC_MAPPING = {
    'year': '%Y',
    'month': '%Y-%m',
    'day': '%Y-%m-%d',
    'hour': '%Y-%m-%d %H',
    'minute': '%Y-%m-%d %H:%M',
    'second': '%Y-%m-%d %H:%M:%S'}
MYSQL_DATE_TRUNC_MAPPING = SQLITE_DATE_TRUNC_MAPPING.copy()
MYSQL_DATE_TRUNC_MAPPING['minute'] = '%Y-%m-%d %H:%i'
MYSQL_DATE_TRUNC_MAPPING['second'] = '%Y-%m-%d %H:%i:%S'

def _sqlite_date_trunc(lookup_type, datetime_string):
    assert lookup_type in SQLITE_DATE_TRUNC_MAPPING
    if not datetime_string:
        return
    dt = format_date_time(datetime_string, SQLITE_DATETIME_FORMATS)
    return dt.strftime(SQLITE_DATE_TRUNC_MAPPING[lookup_type])

def _sqlite_regexp(regex, value):
    return re.search(regex, value, re.I) is not None

class attrdict(dict):
    def __getattr__(self, attr):
        return self[attr]

# Operators used in binary expressions.
OP = attrdict(
    AND='and',
    OR='or',
    ADD='+',
    SUB='-',
    MUL='*',
    DIV='/',
    BIN_AND='&',
    BIN_OR='|',
    XOR='^',
    MOD='%',
    EQ='=',
    LT='<',
    LTE='<=',
    GT='>',
    GTE='>=',
    NE='!=',
    IN='in',
    NOT_IN='not in',
    IS='is',
    IS_NOT='is not',
    LIKE='like',
    ILIKE='ilike',
    BETWEEN='between',
    REGEXP='regexp',
    CONCAT='||',
)

JOIN = attrdict(
    INNER='INNER',
    LEFT_OUTER='LEFT OUTER',
    RIGHT_OUTER='RIGHT OUTER',
    FULL='FULL',
)
JOIN_INNER = JOIN.INNER
JOIN_LEFT_OUTER = JOIN.LEFT_OUTER
JOIN_FULL = JOIN.FULL

# To support "django-style" double-underscore filters, create a mapping between
# operation name and operation code, e.g. "__eq" == OP.EQ.
DJANGO_MAP = {
    'eq': OP.EQ,
    'lt': OP.LT,
    'lte': OP.LTE,
    'gt': OP.GT,
    'gte': OP.GTE,
    'ne': OP.NE,
    'in': OP.IN,
    'is': OP.IS,
    'like': OP.LIKE,
    'ilike': OP.ILIKE,
    'regexp': OP.REGEXP,
}

# Helper functions that are used in various parts of the codebase.
def merge_dict(source, overrides):
    merged = source.copy()
    merged.update(overrides)
    return merged

def returns_clone(func):
    """
    Method decorator that will "clone" the object before applying the given
    method.  This ensures that state is mutated in a more predictable fashion,
    and promotes the use of method-chaining.
    """
    def inner(self, *args, **kwargs):
        clone = self.clone()  # Assumes object implements `clone`.
        func(clone, *args, **kwargs)
        return clone
    inner.call_local = func  # Provide a way to call without cloning.
    return inner

def not_allowed(func):
    """
    Method decorator to indicate a method is not allowed to be called.  Will
    raise a `NotImplementedError`.
    """
    def inner(self, *args, **kwargs):
        raise NotImplementedError('%s is not allowed on %s instances' % (
            func, type(self).__name__))
    return inner

class Proxy(object):
    """
    Proxy class useful for situations when you wish to defer the initialization
    of an object.
    """
    __slots__ = ['obj', '_callbacks']

    def __init__(self):
        self._callbacks = []
        self.initialize(None)

    def initialize(self, obj):
        self.obj = obj
        for callback in self._callbacks:
            callback(obj)

    def attach_callback(self, callback):
        self._callbacks.append(callback)
        return callback

    def __getattr__(self, attr):
        if self.obj is None:
            raise AttributeError('Cannot use uninitialized Proxy.')
        return getattr(self.obj, attr)

    def __setattr__(self, attr, value):
        if attr not in self.__slots__:
            raise AttributeError('Cannot set attribute on proxy.')
        return super(Proxy, self).__setattr__(attr, value)

class _CDescriptor(object):
    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return Entity(instance._alias)
        return self

# Classes representing the query tree.

class Node(object):
    """Base-class for any part of a query which shall be composable."""
    c = _CDescriptor()
    _node_type = 'node'

    def __init__(self):
        self._negated = False
        self._alias = None
        self._bind_to = None
        self._ordering = None  # ASC or DESC.

    @classmethod
    def extend(cls, name=None, clone=False):
        def decorator(method):
            method_name = name or method.__name__
            if clone:
                method = returns_clone(method)
            setattr(cls, method_name, method)
            return method
        return decorator

    def clone_base(self):
        return type(self)()

    def clone(self):
        inst = self.clone_base()
        inst._negated = self._negated
        inst._alias = self._alias
        inst._ordering = self._ordering
        inst._bind_to = self._bind_to
        return inst

    @returns_clone
    def __invert__(self):
        self._negated = not self._negated

    @returns_clone
    def alias(self, a=None):
        self._alias = a

    @returns_clone
    def bind_to(self, bt):
        """
        Bind the results of an expression to a specific model type. Useful
        when adding expressions to a select, where the result of the expression
        should be placed on a joined instance.
        """
        self._bind_to = bt

    @returns_clone
    def asc(self):
        self._ordering = 'ASC'

    @returns_clone
    def desc(self):
        self._ordering = 'DESC'

    def __pos__(self):
        return self.asc()

    def __neg__(self):
        return self.desc()

    def _e(op, inv=False):
        """
        Lightweight factory which returns a method that builds an Expression
        consisting of the left-hand and right-hand operands, using `op`.
        """
        def inner(self, rhs):
            if inv:
                return Expression(rhs, op, self)
            return Expression(self, op, rhs)
        return inner
    __and__ = _e(OP.AND)
    __or__ = _e(OP.OR)

    __add__ = _e(OP.ADD)
    __sub__ = _e(OP.SUB)
    __mul__ = _e(OP.MUL)
    __div__ = __truediv__ = _e(OP.DIV)
    __xor__ = _e(OP.XOR)
    __radd__ = _e(OP.ADD, inv=True)
    __rsub__ = _e(OP.SUB, inv=True)
    __rmul__ = _e(OP.MUL, inv=True)
    __rdiv__ = __rtruediv__ = _e(OP.DIV, inv=True)
    __rand__ = _e(OP.AND, inv=True)
    __ror__ = _e(OP.OR, inv=True)
    __rxor__ = _e(OP.XOR, inv=True)

    def __eq__(self, rhs):
        if rhs is None:
            return Expression(self, OP.IS, None)
        return Expression(self, OP.EQ, rhs)
    def __ne__(self, rhs):
        if rhs is None:
            return Expression(self, OP.IS_NOT, None)
        return Expression(self, OP.NE, rhs)

    __lt__ = _e(OP.LT)
    __le__ = _e(OP.LTE)
    __gt__ = _e(OP.GT)
    __ge__ = _e(OP.GTE)
    __lshift__ = _e(OP.IN)
    __rshift__ = _e(OP.IS)
    __mod__ = _e(OP.LIKE)
    __pow__ = _e(OP.ILIKE)

    bin_and = _e(OP.BIN_AND)
    bin_or = _e(OP.BIN_OR)

    # Special expressions.
    def in_(self, rhs):
        return Expression(self, OP.IN, rhs)
    def not_in(self, rhs):
        return Expression(self, OP.NOT_IN, rhs)
    def is_null(self, is_null=True):
        if is_null:
            return Expression(self, OP.IS, None)
        return Expression(self, OP.IS_NOT, None)
    def contains(self, rhs):
        return Expression(self, OP.ILIKE, '%%%s%%' % rhs)
    def startswith(self, rhs):
        return Expression(self, OP.ILIKE, '%s%%' % rhs)
    def endswith(self, rhs):
        return Expression(self, OP.ILIKE, '%%%s' % rhs)
    def between(self, low, high):
        return Expression(self, OP.BETWEEN, Clause(low, R('AND'), high))
    def regexp(self, expression):
        return Expression(self, OP.REGEXP, expression)
    def concat(self, rhs):
        return Expression(self, OP.CONCAT, rhs)

class SQL(Node):
    """An unescaped SQL string, with optional parameters."""
    _node_type = 'sql'

    def __init__(self, value, *params):
        self.value = value
        self.params = params
        super(SQL, self).__init__()

    def clone_base(self):
        return SQL(self.value, *self.params)
R = SQL  # backwards-compat.

class Entity(Node):
    """A quoted-name or entity, e.g. "table"."column"."""
    _node_type = 'entity'

    def __init__(self, *path):
        super(Entity, self).__init__()
        self.path = path

    def clone_base(self):
        return Entity(*self.path)

    def __getattr__(self, attr):
        return Entity(*filter(None, self.path + (attr,)))

class Func(Node):
    """An arbitrary SQL function call."""
    _node_type = 'func'

    def __init__(self, name, *arguments):
        self.name = name
        self.arguments = arguments
        self._coerce = True
        super(Func, self).__init__()

    @returns_clone
    def coerce(self, coerce=True):
        self._coerce = coerce

    def clone_base(self):
        res = Func(self.name, *self.arguments)
        res._coerce = self._coerce
        return res

    def over(self, partition_by=None, order_by=None, window=None):
        if isinstance(partition_by, Window) and window is None:
            window = partition_by
        if window is None:
            sql = Window(
                partition_by=partition_by, order_by=order_by).__sql__()
        else:
            sql = SQL(window._alias)
        return Clause(self, SQL('OVER'), sql)

    def __getattr__(self, attr):
        def dec(*args, **kwargs):
            return Func(attr, *args, **kwargs)
        return dec

# fn is a factory for creating `Func` objects and supports a more friendly
# API.  So instead of `Func("LOWER", param)`, `fn.LOWER(param)`.
fn = Func(None)

class Expression(Node):
    """A binary expression, e.g `foo + 1` or `bar < 7`."""
    _node_type = 'expression'

    def __init__(self, lhs, op, rhs, flat=False):
        super(Expression, self).__init__()
        self.lhs = lhs
        self.op = op
        self.rhs = rhs
        self.flat = flat

    def clone_base(self):
        return Expression(self.lhs, self.op, self.rhs, self.flat)

class Param(Node):
    """
    Arbitrary parameter passed into a query. Instructs the query compiler to
    specifically treat this value as a parameter, useful for `list` which is
    special-cased for `IN` lookups.
    """
    _node_type = 'param'

    def __init__(self, value, conv=None):
        self.value = value
        self.conv = conv
        super(Param, self).__init__()

    def clone_base(self):
        return Param(self.value, self.conv)

class Passthrough(Param):
    _node_type = 'passthrough'

class Clause(Node):
    """A SQL clause, one or more Node objects joined by spaces."""
    _node_type = 'clause'

    glue = ' '
    parens = False

    def __init__(self, *nodes, **kwargs):
        if 'glue' in kwargs:
            self.glue = kwargs['glue']
        if 'parens' in kwargs:
            self.parens = kwargs['parens']
        super(Clause, self).__init__()
        self.nodes = list(nodes)

    def clone_base(self):
        clone = Clause(*self.nodes)
        clone.glue = self.glue
        clone.parens = self.parens
        return clone

class CommaClause(Clause):
    """One or more Node objects joined by commas, no parens."""
    glue = ', '

class EnclosedClause(CommaClause):
    """One or more Node objects joined by commas and enclosed in parens."""
    parens = True

class Window(Node):
    def __init__(self, partition_by=None, order_by=None):
        super(Window, self).__init__()
        self.partition_by = partition_by
        self.order_by = order_by
        self._alias = self._alias or 'w'

    def __sql__(self):
        over_clauses = []
        if self.partition_by:
            over_clauses.append(Clause(
                SQL('PARTITION BY'),
                CommaClause(*self.partition_by)))
        if self.order_by:
            over_clauses.append(Clause(
                SQL('ORDER BY'),
                CommaClause(*self.order_by)))
        return EnclosedClause(Clause(*over_clauses))

    def clone_base(self):
        return Window(self.partition_by, self.order_by)

class Check(SQL):
    """Check constraint, usage: `Check('price > 10')`."""
    def __init__(self, value):
        super(Check, self).__init__('CHECK (%s)' % value)

class DQ(Node):
    """A "django-style" filter expression, e.g. {'foo__eq': 'x'}."""
    def __init__(self, **query):
        super(DQ, self).__init__()
        self.query = query

    def clone_base(self):
        return DQ(**self.query)

class _StripParens(Node):
    _node_type = 'strip_parens'

    def __init__(self, node):
        super(_StripParens, self).__init__()
        self.node = node

JoinMetadata = namedtuple('JoinMetadata', (
    'src_model',  # Source Model class.
    'dest_model',   # Dest Model class.
    'src',   # Source, may be Model, ModelAlias
    'dest',  # Dest, may be Model, ModelAlias, or SelectQuery.
    'attr',  # Attribute name joined instance(s) should be assigned to.
    'primary_key',  # Primary key being joined on.
    'foreign_key',  # Foreign key being joined from.
    'is_backref',  # Is this a backref, i.e. 1 -> N.
    'alias',  # Explicit alias given to join expression.
    'is_self_join',  # Is this a self-join?
    'is_expression',  # Is the join ON clause an Expression?
))

class Join(namedtuple('_Join', ('src', 'dest', 'join_type', 'on'))):
    def get_foreign_key(self, source, dest, field=None):
        if isinstance(source, SelectQuery) or isinstance(dest, SelectQuery):
            return None, None
        fk_field = source._meta.rel_for_model(dest, field)
        if fk_field is not None:
            return fk_field, False
        reverse_rel = source._meta.reverse_rel_for_model(dest, field)
        if reverse_rel is not None:
            return reverse_rel, True
        return None, None

    def get_join_type(self):
        return self.join_type or JOIN.INNER

    def model_from_alias(self, model_or_alias):
        if isinstance(model_or_alias, ModelAlias):
            return model_or_alias.model_class
        elif isinstance(model_or_alias, SelectQuery):
            return model_or_alias.model_class
        return model_or_alias

    def _join_metadata(self):
        # Get the actual tables being joined.
        src = self.model_from_alias(self.src)
        dest = self.model_from_alias(self.dest)

        join_alias = isinstance(self.on, Node) and self.on._alias or None
        is_expression = isinstance(self.on, (Expression, Func, SQL))

        on_field = isinstance(self.on, (Field, FieldProxy)) and self.on or None
        if on_field:
            fk_field = on_field
            is_backref = on_field.name not in src._meta.fields
        else:
            fk_field, is_backref = self.get_foreign_key(src, dest, self.on)
            if fk_field is None and self.on is not None:
                fk_field, is_backref = self.get_foreign_key(src, dest)

        if fk_field is not None:
            primary_key = fk_field.to_field
        else:
            primary_key = None

        if not join_alias:
            if fk_field is not None:
                if is_backref:
                    target_attr = dest._meta.db_table
                else:
                    target_attr = fk_field.name
            else:
                try:
                    target_attr = self.on.lhs.name
                except AttributeError:
                    target_attr = dest._meta.db_table
        else:
            target_attr = None

        return JoinMetadata(
            src_model=src,
            dest_model=dest,
            src=self.src,
            dest=self.dest,
            attr=join_alias or target_attr,
            primary_key=primary_key,
            foreign_key=fk_field,
            is_backref=is_backref,
            alias=join_alias,
            is_self_join=src is dest,
            is_expression=is_expression)

    @property
    def metadata(self):
        if not hasattr(self, '_cached_metadata'):
            self._cached_metadata = self._join_metadata()
        return self._cached_metadata

class FieldDescriptor(object):
    # Fields are exposed as descriptors in order to control access to the
    # underlying "raw" data.
    def __init__(self, field):
        self.field = field
        self.att_name = self.field.name

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return instance._data.get(self.att_name)
        return self.field

    def __set__(self, instance, value):
        instance._data[self.att_name] = value
        instance._dirty.add(self.att_name)

class Field(Node):
    """A column on a table."""
    _field_counter = 0
    _order = 0
    _node_type = 'field'
    db_field = 'unknown'

    def __init__(self, null=False, index=False, unique=False,
                 verbose_name=None, help_text=None, db_column=None,
                 default=None, choices=None, primary_key=False, sequence=None,
                 constraints=None, schema=None):
        self.null = null
        self.index = index
        self.unique = unique
        self.verbose_name = verbose_name
        self.help_text = help_text
        self.db_column = db_column
        self.default = default
        self.choices = choices  # Used for metadata purposes, not enforced.
        self.primary_key = primary_key
        self.sequence = sequence  # Name of sequence, e.g. foo_id_seq.
        self.constraints = constraints  # List of column constraints.
        self.schema = schema  # Name of schema, e.g. 'public'.

        # Used internally for recovering the order in which Fields were defined
        # on the Model class.
        Field._field_counter += 1
        self._order = Field._field_counter
        self._sort_key = (self.primary_key and 1 or 2), self._order

        self._is_bound = False  # Whether the Field is "bound" to a Model.
        super(Field, self).__init__()

    def clone_base(self, **kwargs):
        inst = type(self)(
            null=self.null,
            index=self.index,
            unique=self.unique,
            verbose_name=self.verbose_name,
            help_text=self.help_text,
            db_column=self.db_column,
            default=self.default,
            choices=self.choices,
            primary_key=self.primary_key,
            sequence=self.sequence,
            constraints=self.constraints,
            schema=self.schema,
            **kwargs)
        if self._is_bound:
            inst.name = self.name
            inst.model_class = self.model_class
        inst._is_bound = self._is_bound
        return inst

    def add_to_class(self, model_class, name):
        """
        Hook that replaces the `Field` attribute on a class with a named
        `FieldDescriptor`. Called by the metaclass during construction of the
        `Model`.
        """
        self.name = name
        self.model_class = model_class
        self.db_column = self.db_column or self.name
        if not self.verbose_name:
            self.verbose_name = re.sub('_+', ' ', name).title()

        model_class._meta.fields[self.name] = self
        model_class._meta.columns[self.db_column] = self

        setattr(model_class, name, FieldDescriptor(self))
        self._is_bound = True

    def get_database(self):
        return self.model_class._meta.database

    def get_column_type(self):
        field_type = self.get_db_field()
        return self.get_database().compiler().get_column_type(field_type)

    def get_db_field(self):
        return self.db_field

    def get_modifiers(self):
        return None

    def coerce(self, value):
        return value

    def db_value(self, value):
        """Convert the python value for storage in the database."""
        return value if value is None else self.coerce(value)

    def python_value(self, value):
        """Convert the database value to a pythonic value."""
        return value if value is None else self.coerce(value)

    def as_entity(self, with_table=False):
        if with_table:
            return Entity(self.model_class._meta.db_table, self.db_column)
        return Entity(self.db_column)

    def __ddl_column__(self, column_type):
        """Return the column type, e.g. VARCHAR(255) or REAL."""
        modifiers = self.get_modifiers()
        if modifiers:
            return SQL(
                '%s(%s)' % (column_type, ', '.join(map(str, modifiers))))
        return SQL(column_type)

    def __ddl__(self, column_type):
        """Return a list of Node instances that defines the column."""
        ddl = [self.as_entity(), self.__ddl_column__(column_type)]
        if not self.null:
            ddl.append(SQL('NOT NULL'))
        if self.primary_key:
            ddl.append(SQL('PRIMARY KEY'))
        if self.sequence:
            ddl.append(SQL("DEFAULT NEXTVAL('%s')" % self.sequence))
        if self.constraints:
            ddl.extend(self.constraints)
        return ddl

    def __hash__(self):
        return hash(self.name + '.' + self.model_class.__name__)

class BareField(Field):
    db_field = 'bare'

class IntegerField(Field):
    db_field = 'int'
    coerce = int

class BigIntegerField(IntegerField):
    db_field = 'bigint'

class PrimaryKeyField(IntegerField):
    db_field = 'primary_key'

    def __init__(self, *args, **kwargs):
        kwargs['primary_key'] = True
        super(PrimaryKeyField, self).__init__(*args, **kwargs)

class FloatField(Field):
    db_field = 'float'
    coerce = float

class DoubleField(FloatField):
    db_field = 'double'

class DecimalField(Field):
    db_field = 'decimal'

    def __init__(self, max_digits=10, decimal_places=5, auto_round=False,
                 rounding=None, *args, **kwargs):
        self.max_digits = max_digits
        self.decimal_places = decimal_places
        self.auto_round = auto_round
        self.rounding = rounding or decimal.DefaultContext.rounding
        super(DecimalField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(DecimalField, self).clone_base(
            max_digits=self.max_digits,
            decimal_places=self.decimal_places,
            auto_round=self.auto_round,
            rounding=self.rounding,
            **kwargs)

    def get_modifiers(self):
        return [self.max_digits, self.decimal_places]

    def db_value(self, value):
        D = decimal.Decimal
        if not value:
            return value if value is None else D(0)
        if self.auto_round:
            exp = D(10) ** (-self.decimal_places)
            rounding = self.rounding
            return D(str(value)).quantize(exp, rounding=rounding)
        return value

    def python_value(self, value):
        if value is not None:
            if isinstance(value, decimal.Decimal):
                return value
            return decimal.Decimal(str(value))

def coerce_to_unicode(s, encoding='utf-8'):
    if isinstance(s, unicode_type):
        return s
    elif isinstance(s, string_type):
        return s.decode(encoding)
    return unicode_type(s)

class CharField(Field):
    db_field = 'string'

    def __init__(self, max_length=255, *args, **kwargs):
        self.max_length = max_length
        super(CharField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(CharField, self).clone_base(
            max_length=self.max_length,
            **kwargs)

    def get_modifiers(self):
        return self.max_length and [self.max_length] or None

    def coerce(self, value):
        return coerce_to_unicode(value or '')

class FixedCharField(CharField):
    db_field = 'fixed_char'

    def python_value(self, value):
        value = super(FixedCharField, self).python_value(value)
        if value:
            value = value.strip()
        return value

class TextField(Field):
    db_field = 'text'

    def coerce(self, value):
        return coerce_to_unicode(value or '')

class BlobField(Field):
    db_field = 'blob'

    def db_value(self, value):
        if isinstance(value, basestring):
            return binary_construct(value)
        return value

class UUIDField(Field):
    db_field = 'uuid'

    def db_value(self, value):
        return None if value is None else str(value)

    def python_value(self, value):
        return None if value is None else uuid.UUID(value)

def format_date_time(value, formats, post_process=None):
    post_process = post_process or (lambda x: x)
    for fmt in formats:
        try:
            return post_process(datetime.datetime.strptime(value, fmt))
        except ValueError:
            pass
    return value

def _date_part(date_part):
    def dec(self):
        return self.model_class._meta.database.extract_date(date_part, self)
    return dec

class _BaseFormattedField(Field):
    formats = None
    def __init__(self, formats=None, *args, **kwargs):
        if formats is not None:
            self.formats = formats
        super(_BaseFormattedField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(_BaseFormattedField, self).clone_base(
            formats=self.formats,
            **kwargs)

class DateTimeField(_BaseFormattedField):
    db_field = 'datetime'
    formats = [
        '%Y-%m-%d %H:%M:%S.%f',
        '%Y-%m-%d %H:%M:%S',
        '%Y-%m-%d',
    ]

    def python_value(self, value):
        if value and isinstance(value, basestring):
            return format_date_time(value, self.formats)
        return value

    year = property(_date_part('year'))
    month = property(_date_part('month'))
    day = property(_date_part('day'))
    hour = property(_date_part('hour'))
    minute = property(_date_part('minute'))
    second = property(_date_part('second'))

class DateField(_BaseFormattedField):
    db_field = 'date'
    formats = [
        '%Y-%m-%d',
        '%Y-%m-%d %H:%M:%S',
        '%Y-%m-%d %H:%M:%S.%f',
    ]

    def python_value(self, value):
        if value and isinstance(value, basestring):
            pp = lambda x: x.date()
            return format_date_time(value, self.formats, pp)
        elif value and isinstance(value, datetime.datetime):
            return value.date()
        return value

    year = property(_date_part('year'))
    month = property(_date_part('month'))
    day = property(_date_part('day'))

class TimeField(_BaseFormattedField):
    db_field = 'time'
    formats = [
        '%H:%M:%S.%f',
        '%H:%M:%S',
        '%H:%M',
        '%Y-%m-%d %H:%M:%S.%f',
        '%Y-%m-%d %H:%M:%S',
    ]

    def python_value(self, value):
        if value:
            if isinstance(value, basestring):
                pp = lambda x: x.time()
                return format_date_time(value, self.formats, pp)
            elif isinstance(value, datetime.datetime):
                return value.time()
        elif value is not None and isinstance(value, datetime.timedelta):
            return (datetime.datetime.min + value).time()
        return value

    hour = property(_date_part('hour'))
    minute = property(_date_part('minute'))
    second = property(_date_part('second'))

class BooleanField(Field):
    db_field = 'bool'
    coerce = bool

class ManyToManyField(Field):
    def __init__(self, rel_model, related_name=None, through_model=None,
                 _is_backref=False):
        self.rel_model = rel_model
        self._related_name = related_name
        self._through_model = through_model
        self._is_backref = _is_backref
        self.primary_key = False
        self.verbose_name = None

    def add_to_class(self, model_class, name):
        if isinstance(self._through_model, Proxy):
            def callback(through_model):
                self._through_model = through_model
                self.add_to_class(model_class, name)
            self._through_model.attach_callback(callback)
            return

        self.name = name
        self.model_class = model_class
        if not self.verbose_name:
            self.verbose_name = re.sub('_+', ' ', name).title()
        setattr(model_class, name, ManyToManyFieldDescriptor(self))

        if not self._is_backref:
            backref = ManyToManyField(
                self.model_class,
                through_model=self._through_model,
                _is_backref=True)
            related_name = self._related_name or model_class._meta.name + 's'
            backref.add_to_class(self.rel_model, related_name)

    def get_models(self):
        return [model for _, model in sorted((
            (self._is_backref, self.model_class),
            (not self._is_backref, self.rel_model)))]

    def get_through_model(self):
        if not self._through_model:
            lhs, rhs = self.get_models()
            tables = [model._meta.db_table for model in (lhs, rhs)]

            class Meta:
                database = self.model_class._meta.database
                db_table = '%s_%s_through' % tuple(tables)
                indexes = (
                    ((lhs._meta.name, rhs._meta.name),
                     True),)
                validate_backrefs = False

            attrs = {
                lhs._meta.name: ForeignKeyField(rel_model=lhs),
                rhs._meta.name: ForeignKeyField(rel_model=rhs)}
            attrs['Meta'] = Meta

            self._through_model = type(
                '%s%sThrough' % (lhs.__name__, rhs.__name__),
                (Model,),
                attrs)

        return self._through_model

class ManyToManyFieldDescriptor(FieldDescriptor):
    def __init__(self, field):
        super(ManyToManyFieldDescriptor, self).__init__(field)
        self.model_class = field.model_class
        self.rel_model = field.rel_model
        self.through_model = field.get_through_model()
        self.src_fk = self.through_model._meta.rel_for_model(self.model_class)
        self.dest_fk = self.through_model._meta.rel_for_model(self.rel_model)

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return (ManyToManyQuery(instance, self, self.rel_model)
                    .select()
                    .join(self.through_model)
                    .join(self.model_class)
                    .where(self.src_fk == instance))
        return self.field

    def __set__(self, instance, value):
        query = self.__get__(instance)
        query.add(value, clear_existing=True)

class CompressedField(BlobField):
    ZLIB = 'zlib'
    BZ2 = 'bz2'
    algorithm_to_import = {
        ZLIB: zlib,
        BZ2: bz2,
    }

    def __init__(self, compression_level=6, algorithm=ZLIB, *args,
                 **kwargs):
        self.compression_level = compression_level
        if algorithm not in self.algorithm_to_import:
            raise ValueError('Unrecognized algorithm %s' % algorithm)
        compress_module = self.algorithm_to_import[algorithm]
        if compress_module is None:
            raise ValueError('Missing library required for %s.' % algorithm)

        self.algorithm = algorithm
        self.compress = compress_module.compress
        self.decompress = compress_module.decompress
        super(CompressedField, self).__init__(*args, **kwargs)

    def db_value(self, value):
        if value is not None:
            return binary_construct(
                self.compress(value, self.compression_level))

    def python_value(self, value):
        if value is not None:
            return self.decompress(value)

class AESEncryptedField(BlobField):
    def __init__(self, key, *args, **kwargs):
        self.key = key
        super(AESEncryptedField, self).__init__(*args, **kwargs)

    def get_cipher(self, key, iv):
        if len(key) > 32:
            raise ValueError('Key length cannot exceed 32 bytes.')
        key = key + ' ' * (32 - len(key))
        return AES.new(key, AES.MODE_CFB, iv)

    def encrypt(self, value):
        iv = Random.get_random_bytes(AES.block_size)
        cipher = self.get_cipher(self.key, iv)
        return iv + cipher.encrypt(value)

    def decrypt(self, value):
        iv = value[:AES.block_size]
        cipher = self.get_cipher(self.key, iv)
        return cipher.decrypt(value[AES.block_size:])

    def db_value(self, value):
        if value is not None:
            return binary_construct(self.encrypt(value))

    def python_value(self, value):
        if value is not None:
            return self.decrypt(value)

class RelationDescriptor(FieldDescriptor):
    """Foreign-key abstraction to replace a related PK with a related model."""
    def __init__(self, field, rel_model):
        self.rel_model = rel_model
        super(RelationDescriptor, self).__init__(field)

    def get_object_or_id(self, instance):
        rel_id = instance._data.get(self.att_name)
        if rel_id is not None or self.att_name in instance._obj_cache:
            if self.att_name not in instance._obj_cache:
                obj = self.rel_model.get(self.field.to_field == rel_id)
                instance._obj_cache[self.att_name] = obj
            return instance._obj_cache[self.att_name]
        elif not self.field.null:
            raise self.rel_model.DoesNotExist
        return rel_id

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return self.get_object_or_id(instance)
        return self.field

    def __set__(self, instance, value):
        if isinstance(value, self.rel_model):
            instance._data[self.att_name] = getattr(
                value, self.field.to_field.name)
            instance._obj_cache[self.att_name] = value
        else:
            orig_value = instance._data.get(self.att_name)
            instance._data[self.att_name] = value
            if orig_value != value and self.att_name in instance._obj_cache:
                del instance._obj_cache[self.att_name]
        instance._dirty.add(self.att_name)

class ReverseRelationDescriptor(object):
    """Back-reference to expose related objects as a `SelectQuery`."""
    def __init__(self, field):
        self.field = field
        self.rel_model = field.model_class

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return self.rel_model.select().where(
                self.field == getattr(instance, self.field.to_field.name))
        return self

class ObjectIdDescriptor(object):
    """Gives direct access to the underlying id"""
    def __init__(self, field):
        self.attr_name = field.name

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return instance._data.get(self.attr_name)

class ForeignKeyField(IntegerField):
    def __init__(self, rel_model, related_name=None, on_delete=None,
                 on_update=None, extra=None, to_field=None, *args, **kwargs):
        if rel_model != 'self' and not isinstance(rel_model, Proxy) and not \
                issubclass(rel_model, Model):
            raise TypeError('Unexpected value for `rel_model`.  Expected '
                            '`Model`, `Proxy` or "self"')
        self.rel_model = rel_model
        self._related_name = related_name
        self.deferred = isinstance(rel_model, Proxy)
        self.on_delete = on_delete
        self.on_update = on_update
        self.extra = extra
        self.to_field = to_field
        super(ForeignKeyField, self).__init__(*args, **kwargs)

    def clone_base(self, **kwargs):
        return super(ForeignKeyField, self).clone_base(
            rel_model=self.rel_model,
            related_name=self.related_name,
            on_delete=self.on_delete,
            on_update=self.on_update,
            extra=self.extra,
            to_field=self.to_field,
            **kwargs)

    def _get_descriptor(self):
        return RelationDescriptor(self, self.rel_model)

    def _get_id_descriptor(self):
        return ObjectIdDescriptor(self)

    def _get_backref_descriptor(self):
        return ReverseRelationDescriptor(self)

    def _get_related_name(self):
        return self._related_name or ('%s_set' % self.model_class._meta.name)

    def add_to_class(self, model_class, name):
        if isinstance(self.rel_model, Proxy):
            def callback(rel_model):
                self.rel_model = rel_model
                self.add_to_class(model_class, name)
            self.rel_model.attach_callback(callback)
            return

        self.name = name
        self.model_class = model_class
        self.db_column = self.db_column or '%s_id' % self.name
        if not self.verbose_name:
            self.verbose_name = re.sub('_+', ' ', name).title()

        model_class._meta.fields[self.name] = self
        model_class._meta.columns[self.db_column] = self

        self.related_name = self._get_related_name()

        if self.rel_model == 'self':
            self.rel_model = self.model_class

        if self.to_field is not None:
            if not isinstance(self.to_field, Field):
                self.to_field = getattr(self.rel_model, self.to_field)
        else:
            self.to_field = self.rel_model._meta.primary_key

        if model_class._meta.validate_backrefs:
            if self.related_name in self.rel_model._meta.fields:
                error = ('Foreign key: %s.%s related name "%s" collision with '
                         'model field of the same name.')
                raise AttributeError(error % (
                    self.model_class._meta.name, self.name, self.related_name))
            if self.related_name in self.rel_model._meta.reverse_rel:
                error = ('Foreign key: %s.%s related name "%s" collision with '
                         'foreign key using same related_name.')
                raise AttributeError(error % (
                    self.model_class._meta.name, self.name, self.related_name))

        setattr(model_class, name, self._get_descriptor())
        setattr(model_class, name + '_id', self._get_id_descriptor())
        setattr(self.rel_model,
                self.related_name,
                self._get_backref_descriptor())
        self._is_bound = True

        model_class._meta.rel[self.name] = self
        self.rel_model._meta.reverse_rel[self.related_name] = self

    def get_db_field(self):
        """
        Overridden to ensure Foreign Keys use same column type as the primary
        key they point to.
        """
        if not isinstance(self.to_field, PrimaryKeyField):
            return self.to_field.get_db_field()
        return super(ForeignKeyField, self).get_db_field()

    def get_modifiers(self):
        if not isinstance(self.to_field, PrimaryKeyField):
            return self.to_field.get_modifiers()
        return super(ForeignKeyField, self).get_modifiers()

    def coerce(self, value):
        return self.to_field.coerce(value)

    def db_value(self, value):
        if isinstance(value, self.rel_model):
            value = value._get_pk_value()
        return self.to_field.db_value(value)


class CompositeKey(object):
    """A primary key composed of multiple columns."""
    sequence = None

    def __init__(self, *field_names):
        self.field_names = field_names

    def add_to_class(self, model_class, name):
        self.name = name
        self.model_class = model_class
        setattr(model_class, name, self)

    def __get__(self, instance, instance_type=None):
        if instance is not None:
            return tuple([getattr(instance, field_name)
                          for field_name in self.field_names])
        return self

    def __set__(self, instance, value):
        pass

    def __eq__(self, other):
        expressions = [(self.model_class._meta.fields[field] == value)
                       for field, value in zip(self.field_names, other)]
        return reduce(operator.and_, expressions)


class AliasMap(object):
    prefix = 't'

    def __init__(self, start=0):
        self._alias_map = {}
        self._counter = start

    def __repr__(self):
        return '<AliasMap: %s>' % self._alias_map

    def add(self, obj, alias=None):
        if obj in self._alias_map:
            return
        self._counter += 1
        self._alias_map[obj] = alias or '%s%s' % (self.prefix, self._counter)

    def __getitem__(self, obj):
        if obj not in self._alias_map:
            self.add(obj)
        return self._alias_map[obj]

    def __contains__(self, obj):
        return obj in self._alias_map

    def update(self, alias_map):
        if alias_map:
            for obj, alias in alias_map._alias_map.items():
                if obj not in self:
                    self._alias_map[obj] = alias
        return self


class QueryCompiler(object):
    # Mapping of `db_type` to actual column type used by database driver.
    # Database classes may provide additional column types or overrides.
    field_map = {
        'bare': '',
        'bigint': 'BIGINT',
        'blob': 'BLOB',
        'bool': 'SMALLINT',
        'date': 'DATE',
        'datetime': 'DATETIME',
        'decimal': 'DECIMAL',
        'double': 'REAL',
        'fixed_char': 'CHAR',
        'float': 'REAL',
        'int': 'INTEGER',
        'primary_key': 'INTEGER',
        'string': 'VARCHAR',
        'text': 'TEXT',
        'time': 'TIME',
    }

    # Mapping of OP. to actual SQL operation.  For most databases this will be
    # the same, but some column types or databases may support additional ops.
    # Like `field_map`, Database classes may extend or override these.
    op_map = {
        OP.EQ: '=',
        OP.LT: '<',
        OP.LTE: '<=',
        OP.GT: '>',
        OP.GTE: '>=',
        OP.NE: '!=',
        OP.IN: 'IN',
        OP.NOT_IN: 'NOT IN',
        OP.IS: 'IS',
        OP.IS_NOT: 'IS NOT',
        OP.BIN_AND: '&',
        OP.BIN_OR: '|',
        OP.LIKE: 'LIKE',
        OP.ILIKE: 'ILIKE',
        OP.BETWEEN: 'BETWEEN',
        OP.ADD: '+',
        OP.SUB: '-',
        OP.MUL: '*',
        OP.DIV: '/',
        OP.XOR: '#',
        OP.AND: 'AND',
        OP.OR: 'OR',
        OP.MOD: '%',
        OP.REGEXP: 'REGEXP',
        OP.CONCAT: '||',
    }

    join_map = {
        JOIN.INNER: 'INNER JOIN',
        JOIN.LEFT_OUTER: 'LEFT OUTER JOIN',
        JOIN.RIGHT_OUTER: 'RIGHT OUTER JOIN',
        JOIN.FULL: 'FULL JOIN',
    }
    alias_map_class = AliasMap

    def __init__(self, quote_char='"', interpolation='?', field_overrides=None,
                 op_overrides=None):
        self.quote_char = quote_char
        self.interpolation = interpolation
        self._field_map = merge_dict(self.field_map, field_overrides or {})
        self._op_map = merge_dict(self.op_map, op_overrides or {})
        self._parse_map = self.get_parse_map()
        self._unknown_types = set(['param'])

    def get_parse_map(self):
        # To avoid O(n) lookups when parsing nodes, use a lookup table for
        # common node types O(1).
        return {
            'expression': self._parse_expression,
            'param': self._parse_param,
            'passthrough': self._parse_param,
            'func': self._parse_func,
            'clause': self._parse_clause,
            'entity': self._parse_entity,
            'field': self._parse_field,
            'sql': self._parse_sql,
            'select_query': self._parse_select_query,
            'compound_select_query': self._parse_compound_select_query,
            'strip_parens': self._parse_strip_parens,
        }

    def quote(self, s):
        return '%s%s%s' % (self.quote_char, s, self.quote_char)

    def get_column_type(self, f):
        return self._field_map[f] if f in self._field_map else f.upper()

    def get_op(self, q):
        return self._op_map[q]

    def _sorted_fields(self, field_dict):
        return sorted(field_dict.items(), key=lambda i: i[0]._sort_key)

    def _parse_default(self, node, alias_map, conv):
        return self.interpolation, [node]

    def _parse_expression(self, node, alias_map, conv):
        if isinstance(node.lhs, Field):
            conv = node.lhs
        lhs, lparams = self.parse_node(node.lhs, alias_map, conv)
        rhs, rparams = self.parse_node(node.rhs, alias_map, conv)
        template = '%s %s %s' if node.flat else '(%s %s %s)'
        sql = template % (lhs, self.get_op(node.op), rhs)
        return sql, lparams + rparams

    def _parse_param(self, node, alias_map, conv):
        if node.conv:
            params = [node.conv(node.value)]
        else:
            params = [node.value]
        return self.interpolation, params

    def _parse_func(self, node, alias_map, conv):
        conv = node._coerce and conv or None
        sql, params = self.parse_node_list(node.arguments, alias_map, conv)
        return '%s(%s)' % (node.name, strip_parens(sql)), params

    def _parse_clause(self, node, alias_map, conv):
        sql, params = self.parse_node_list(
            node.nodes, alias_map, conv, node.glue)
        if node.parens:
            sql = '(%s)' % strip_parens(sql)
        return sql, params

    def _parse_entity(self, node, alias_map, conv):
        return '.'.join(map(self.quote, node.path)), []

    def _parse_sql(self, node, alias_map, conv):
        return node.value, list(node.params)

    def _parse_field(self, node, alias_map, conv):
        if alias_map:
            sql = '.'.join((
                self.quote(alias_map[node.model_class]),
                self.quote(node.db_column)))
        else:
            sql = self.quote(node.db_column)
        return sql, []

    def _parse_compound_select_query(self, node, alias_map, conv):
        csq = 'compound_select_query'
        if node.rhs._node_type == csq and node.lhs._node_type != csq:
            first_q, second_q = node.rhs, node.lhs
            inv = True
        else:
            first_q, second_q = node.lhs, node.rhs
            inv = False

        new_map = self.alias_map_class()
        if first_q._node_type == csq:
            new_map._counter = alias_map._counter

        first, first_p = self.generate_select(first_q, new_map)
        second, second_p = self.generate_select(
            second_q,
            self.calculate_alias_map(second_q, new_map))

        if inv:
            l, lp, r, rp = second, second_p, first, first_p
        else:
            l, lp, r, rp = first, first_p , second, second_p

        # We add outer parentheses in the event the compound query is used in
        # the `from_()` clause, in which case we'll need them.
        if node.database.compound_select_parentheses:
            sql = '((%s) %s (%s))' % (l, node.operator, r)
        else:
            sql = '(%s %s %s)' % (l, node.operator, r)
        return  sql, lp + rp

    def _parse_select_query(self, node, alias_map, conv):
        clone = node.clone()
        if not node._explicit_selection:
            if conv and isinstance(conv, ForeignKeyField):
                select_field = conv.to_field
            else:
                select_field = clone.model_class._meta.primary_key
            clone._select = (select_field,)
        sub, params = self.generate_select(clone, alias_map)
        return '(%s)' % strip_parens(sub), params

    def _parse_strip_parens(self, node, alias_map, conv):
        sql, params = self.parse_node(node.node, alias_map, conv)
        return strip_parens(sql), params

    def _parse(self, node, alias_map, conv):
        # By default treat the incoming node as a raw value that should be
        # parameterized.
        node_type = getattr(node, '_node_type', None)
        unknown = False
        if node_type in self._parse_map:
            sql, params = self._parse_map[node_type](node, alias_map, conv)
            unknown = node_type in self._unknown_types
        elif isinstance(node, (list, tuple)):
            # If you're wondering how to pass a list into your query, simply
            # wrap it in Param().
            sql, params = self.parse_node_list(node, alias_map, conv)
            sql = '(%s)' % sql
        elif isinstance(node, Model):
            sql = self.interpolation
            if conv and isinstance(conv, ForeignKeyField) and \
                    not isinstance(conv.to_field, ForeignKeyField):
                params = [
                    conv.to_field.db_value(getattr(node, conv.to_field.name))]
            else:
                params = [node._get_pk_value()]
        elif (isclass(node) and issubclass(node, Model)) or \
                isinstance(node, ModelAlias):
            entity = node.as_entity().alias(alias_map[node])
            sql, params = self.parse_node(entity, alias_map, conv)
        else:
            sql, params = self._parse_default(node, alias_map, conv)
            unknown = True

        return sql, params, unknown

    def parse_node(self, node, alias_map=None, conv=None):
        sql, params, unknown = self._parse(node, alias_map, conv)
        if unknown and conv and params:
            params = [conv.db_value(i) for i in params]

        if isinstance(node, Node):
            if node._negated:
                sql = 'NOT %s' % sql
            if node._alias:
                sql = ' '.join((sql, 'AS', node._alias))
            if node._ordering:
                sql = ' '.join((sql, node._ordering))
        return sql, params

    def parse_node_list(self, nodes, alias_map, conv=None, glue=', '):
        sql = []
        params = []
        for node in nodes:
            node_sql, node_params = self.parse_node(node, alias_map, conv)
            sql.append(node_sql)
            params.extend(node_params)
        return glue.join(sql), params

    def calculate_alias_map(self, query, alias_map=None):
        new_map = self.alias_map_class()
        if alias_map is not None:
            new_map._counter = alias_map._counter

        new_map.add(query.model_class, query.model_class._meta.table_alias)
        for src_model, joined_models in query._joins.items():
            new_map.add(src_model, src_model._meta.table_alias)
            for join_obj in joined_models:
                if isinstance(join_obj.dest, Node):
                    new_map.add(join_obj.dest, join_obj.dest.alias)
                else:
                    new_map.add(join_obj.dest, join_obj.dest._meta.table_alias)

        return new_map.update(alias_map)

    def build_query(self, clauses, alias_map=None):
        return self.parse_node(Clause(*clauses), alias_map)

    def generate_joins(self, joins, model_class, alias_map):
        # Joins are implemented as an adjancency-list graph. Perform a
        # depth-first search of the graph to generate all the necessary JOINs.
        clauses = []
        seen = set()
        q = [model_class]
        while q:
            curr = q.pop()
            if curr not in joins or curr in seen:
                continue
            seen.add(curr)
            for join in joins[curr]:
                src = curr
                dest = join.dest
                if isinstance(join.on, (Expression, Func, Clause, Entity)):
                    # Clear any alias on the join expression.
                    constraint = join.on.clone().alias()
                else:
                    metadata = join.metadata
                    if metadata.is_backref:
                        fk_model = join.dest
                        pk_model = join.src
                    else:
                        fk_model = join.src
                        pk_model = join.dest

                    fk = metadata.foreign_key
                    if fk:
                        lhs = getattr(fk_model, fk.name)
                        rhs = getattr(pk_model, fk.to_field.name)
                        if metadata.is_backref:
                            lhs, rhs = rhs, lhs
                        constraint = (lhs == rhs)
                    else:
                        raise ValueError('Missing required join predicate.')

                if isinstance(dest, Node):
                    # TODO: ensure alias?
                    dest_n = dest
                else:
                    q.append(dest)
                    dest_n = dest.as_entity().alias(alias_map[dest])

                join_type = join.get_join_type()
                if join_type in self.join_map:
                    join_sql = SQL(self.join_map[join_type])
                else:
                    join_sql = SQL(join_type)
                clauses.append(
                    Clause(join_sql, dest_n, SQL('ON'), constraint))

        return clauses

    def generate_select(self, query, alias_map=None):
        model = query.model_class
        db = model._meta.database

        alias_map = self.calculate_alias_map(query, alias_map)

        if isinstance(query, CompoundSelect):
            clauses = [_StripParens(query)]
        else:
            if not query._distinct:
                clauses = [SQL('SELECT')]
            else:
                clauses = [SQL('SELECT DISTINCT')]
                if query._distinct not in (True, False):
                    clauses += [SQL('ON'), EnclosedClause(*query._distinct)]

            select_clause = Clause(*query._select)
            select_clause.glue = ', '

            clauses.extend((select_clause, SQL('FROM')))
            if query._from is None:
                clauses.append(model.as_entity().alias(alias_map[model]))
            else:
                clauses.append(CommaClause(*query._from))

        if query._windows is not None:
            clauses.append(SQL('WINDOW'))
            clauses.append(CommaClause(*[
                Clause(
                    SQL(window._alias),
                    SQL('AS'),
                    window.__sql__())
                for window in query._windows]))

        join_clauses = self.generate_joins(query._joins, model, alias_map)
        if join_clauses:
            clauses.extend(join_clauses)

        if query._where is not None:
            clauses.extend([SQL('WHERE'), query._where])

        if query._group_by:
            clauses.extend([SQL('GROUP BY'), CommaClause(*query._group_by)])

        if query._having:
            clauses.extend([SQL('HAVING'), query._having])

        if query._order_by:
            clauses.extend([SQL('ORDER BY'), CommaClause(*query._order_by)])

        if query._limit or (query._offset and db.limit_max):
            limit = query._limit or db.limit_max
            clauses.append(SQL('LIMIT %s' % limit))
        if query._offset:
            clauses.append(SQL('OFFSET %s' % query._offset))

        for_update, no_wait = query._for_update
        if for_update:
            stmt = 'FOR UPDATE NOWAIT' if no_wait else 'FOR UPDATE'
            clauses.append(SQL(stmt))

        return self.build_query(clauses, alias_map)

    def generate_update(self, query):
        model = query.model_class
        alias_map = self.alias_map_class()
        alias_map.add(model, model._meta.db_table)
        if query._on_conflict:
            statement = 'UPDATE OR %s' % query._on_conflict
        else:
            statement = 'UPDATE'
        clauses = [SQL(statement), model.as_entity(), SQL('SET')]

        update = []
        for field, value in self._sorted_fields(query._update):
            if not isinstance(value, (Node, Model)):
                value = Param(value, conv=field.db_value)
            update.append(Expression(
                field.as_entity(with_table=False),
                OP.EQ,
                value,
                flat=True))  # No outer parens, no table alias.
        clauses.append(CommaClause(*update))

        if query._where:
            clauses.extend([SQL('WHERE'), query._where])

        if query._returning is not None:
            returning_clause = Clause(*query._returning)
            returning_clause.glue = ', '
            clauses.extend([SQL('RETURNING'), returning_clause])

        return self.build_query(clauses, alias_map)

    def _get_field_clause(self, fields, clause_type=EnclosedClause):
        return clause_type(*[
            field.as_entity(with_table=False) for field in fields])

    def generate_insert(self, query):
        model = query.model_class
        meta = model._meta
        alias_map = self.alias_map_class()
        alias_map.add(model, model._meta.db_table)
        if query._upsert:
            statement = 'INSERT OR REPLACE INTO'
        elif query._on_conflict:
            statement = 'INSERT OR %s INTO' % query._on_conflict
        else:
            statement = 'INSERT INTO'
        clauses = [SQL(statement), model.as_entity()]

        if query._query is not None:
            # This INSERT query is of the form INSERT INTO ... SELECT FROM.
            if query._fields:
                clauses.append(self._get_field_clause(query._fields))
            clauses.append(_StripParens(query._query))

        elif query._rows is not None:
            fields, value_clauses = [], []
            have_fields = False

            for row_dict in query._iter_rows():
                if not have_fields:
                    fields = sorted(
                        row_dict.keys(), key=operator.attrgetter('_sort_key'))
                    have_fields = True

                values = []
                for field in fields:
                    value = row_dict[field]
                    if not isinstance(value, (Node, Model)):
                        value = Param(value, conv=field.db_value)
                    values.append(value)

                value_clauses.append(EnclosedClause(*values))

            if fields:
                clauses.extend([
                    self._get_field_clause(fields),
                    SQL('VALUES'),
                    CommaClause(*value_clauses)])
            elif query.model_class._meta.auto_increment:
                # Bare insert, use default value for primary key.
                clauses.append(query.database.default_insert_clause(
                    query.model_class))

        if query.is_insert_returning:
            clauses.extend([
                SQL('RETURNING'),
                self._get_field_clause(
                    meta.get_primary_key_fields(),
                    clause_type=CommaClause)])
        elif query._returning is not None:
            returning_clause = Clause(*query._returning)
            returning_clause.glue = ', '
            clauses.extend([SQL('RETURNING'), returning_clause])


        return self.build_query(clauses, alias_map)

    def generate_delete(self, query):
        model = query.model_class
        clauses = [SQL('DELETE FROM'), model.as_entity()]
        if query._where:
            clauses.extend([SQL('WHERE'), query._where])
        if query._returning is not None:
            returning_clause = Clause(*query._returning)
            returning_clause.glue = ', '
            clauses.extend([SQL('RETURNING'), returning_clause])
        return self.build_query(clauses)

    def field_definition(self, field):
        column_type = self.get_column_type(field.get_db_field())
        ddl = field.__ddl__(column_type)
        return Clause(*ddl)

    def foreign_key_constraint(self, field):
        ddl = [
            SQL('FOREIGN KEY'),
            EnclosedClause(field.as_entity()),
            SQL('REFERENCES'),
            field.rel_model.as_entity(),
            EnclosedClause(field.to_field.as_entity())]
        if field.on_delete:
            ddl.append(SQL('ON DELETE %s' % field.on_delete))
        if field.on_update:
            ddl.append(SQL('ON UPDATE %s' % field.on_update))
        return Clause(*ddl)

    def return_parsed_node(function_name):
        # TODO: treat all `generate_` functions as returning clauses, instead
        # of SQL/params.
        def inner(self, *args, **kwargs):
            fn = getattr(self, function_name)
            return self.parse_node(fn(*args, **kwargs))
        return inner

    def _create_foreign_key(self, model_class, field, constraint=None):
        constraint = constraint or 'fk_%s_%s_refs_%s' % (
            model_class._meta.db_table,
            field.db_column,
            field.rel_model._meta.db_table)
        fk_clause = self.foreign_key_constraint(field)
        return Clause(
            SQL('ALTER TABLE'),
            model_class.as_entity(),
            SQL('ADD CONSTRAINT'),
            Entity(constraint),
            *fk_clause.nodes)
    create_foreign_key = return_parsed_node('_create_foreign_key')

    def _create_table(self, model_class, safe=False):
        statement = 'CREATE TABLE IF NOT EXISTS' if safe else 'CREATE TABLE'
        meta = model_class._meta

        columns, constraints = [], []
        if meta.composite_key:
            pk_cols = [meta.fields[f].as_entity()
                       for f in meta.primary_key.field_names]
            constraints.append(Clause(
                SQL('PRIMARY KEY'), EnclosedClause(*pk_cols)))
        for field in meta.get_fields():
            columns.append(self.field_definition(field))
            if isinstance(field, ForeignKeyField) and not field.deferred:
                constraints.append(self.foreign_key_constraint(field))

        return Clause(
            SQL(statement),
            model_class.as_entity(),
            EnclosedClause(*(columns + constraints)))
    create_table = return_parsed_node('_create_table')

    def _drop_table(self, model_class, fail_silently=False, cascade=False):
        statement = 'DROP TABLE IF EXISTS' if fail_silently else 'DROP TABLE'
        ddl = [SQL(statement), model_class.as_entity()]
        if cascade:
            ddl.append(SQL('CASCADE'))
        return Clause(*ddl)
    drop_table = return_parsed_node('_drop_table')

    def index_name(self, table, columns):
        index = '%s_%s' % (table, '_'.join(columns))
        if len(index) > 64:
            index_hash = hashlib.md5(index.encode('utf-8')).hexdigest()
            index = '%s_%s' % (table, index_hash)
        return index

    def _create_index(self, model_class, fields, unique, *extra):
        tbl_name = model_class._meta.db_table
        statement = 'CREATE UNIQUE INDEX' if unique else 'CREATE INDEX'
        index_name = self.index_name(tbl_name, [f.db_column for f in fields])
        return Clause(
            SQL(statement),
            Entity(index_name),
            SQL('ON'),
            model_class.as_entity(),
            EnclosedClause(*[field.as_entity() for field in fields]),
            *extra)
    create_index = return_parsed_node('_create_index')

    def _create_sequence(self, sequence_name):
        return Clause(SQL('CREATE SEQUENCE'), Entity(sequence_name))
    create_sequence = return_parsed_node('_create_sequence')

    def _drop_sequence(self, sequence_name):
        return Clause(SQL('DROP SEQUENCE'), Entity(sequence_name))
    drop_sequence = return_parsed_node('_drop_sequence')


class ResultIterator(object):
    def __init__(self, qrw):
        self.qrw = qrw
        self._idx = 0

    def next(self):
        if self._idx < self.qrw._ct:
            obj = self.qrw._result_cache[self._idx]
        elif not self.qrw._populated:
            obj = self.qrw.iterate()
            self.qrw._result_cache.append(obj)
            self.qrw._ct += 1
        else:
            raise StopIteration
        self._idx += 1
        return obj
    __next__ = next


class QueryResultWrapper(object):
    """
    Provides an iterator over the results of a raw Query, additionally doing
    two things:
    - converts rows from the database into python representations
    - ensures that multiple iterations do not result in multiple queries
    """
    def __init__(self, model, cursor, meta=None):
        self.model = model
        self.cursor = cursor

        self._ct = 0
        self._idx = 0

        self._result_cache = []
        self._populated = False
        self._initialized = False

        if meta is not None:
            self.column_meta, self.join_meta = meta
        else:
            self.column_meta = self.join_meta = None

    def __iter__(self):
        if self._populated:
            return iter(self._result_cache)
        else:
            return ResultIterator(self)

    @property
    def count(self):
        self.fill_cache()
        return self._ct

    def process_row(self, row):
        return row

    def iterate(self):
        row = self.cursor.fetchone()
        if not row:
            self._populated = True
            if not getattr(self.cursor, 'name', None):
                self.cursor.close()
            raise StopIteration
        elif not self._initialized:
            self.initialize(self.cursor.description)
            self._initialized = True
        return self.process_row(row)

    def iterator(self):
        while True:
            yield self.iterate()

    def next(self):
        if self._idx < self._ct:
            inst = self._result_cache[self._idx]
            self._idx += 1
            return inst
        elif self._populated:
            raise StopIteration

        obj = self.iterate()
        self._result_cache.append(obj)
        self._ct += 1
        self._idx += 1
        return obj
    __next__ = next

    def fill_cache(self, n=None):
        n = n or float('Inf')
        if n < 0:
            raise ValueError('Negative values are not supported.')
        self._idx = self._ct
        while not self._populated and (n > self._ct):
            try:
                self.next()
            except StopIteration:
                break

class ExtQueryResultWrapper(QueryResultWrapper):
    def initialize(self, description):
        model = self.model
        conv = []
        identity = lambda x: x
        for i in range(len(description)):
            func = identity
            column = description[i][0]
            found = False
            if self.column_meta is not None:
                try:
                    select_column = self.column_meta[i]
                except IndexError:
                    pass
                else:
                    if isinstance(select_column, Field):
                        func = select_column.python_value
                        column = select_column._alias or select_column.name
                        found = True
                    elif (isinstance(select_column, Func) and
                            len(select_column.arguments) and
                            isinstance(select_column.arguments[0], Field)):
                        if select_column._coerce:
                            # Special-case handling aggregations.
                            func = select_column.arguments[0].python_value
                        found = True

            if not found and column in model._meta.columns:
                field_obj = model._meta.columns[column]
                column = field_obj.name
                func = field_obj.python_value

            conv.append((i, column, func))
        self.conv = conv

class TuplesQueryResultWrapper(ExtQueryResultWrapper):
    def process_row(self, row):
        return tuple([self.conv[i][2](col) for i, col in enumerate(row)])

class NaiveQueryResultWrapper(ExtQueryResultWrapper):
    def process_row(self, row):
        instance = self.model()
        for i, column, func in self.conv:
            setattr(instance, column, func(row[i]))
        instance._prepare_instance()
        return instance

class DictQueryResultWrapper(ExtQueryResultWrapper):
    def process_row(self, row):
        res = {}
        for i, column, func in self.conv:
            res[column] = func(row[i])
        return res

class ModelQueryResultWrapper(QueryResultWrapper):
    def initialize(self, description):
        self.column_map, model_set = self.generate_column_map()
        self.join_list = self.generate_join_list(model_set)

    def generate_column_map(self):
        column_map = []
        models = set([self.model])
        for i, node in enumerate(self.column_meta):
            attr = conv = None
            if isinstance(node, Field):
                if isinstance(node, FieldProxy):
                    key = node._model_alias
                    constructor = node.model
                    conv = node.field_instance.python_value
                else:
                    key = constructor = node.model_class
                    conv = node.python_value
                attr = node._alias or node.name
            else:
                if node._bind_to is None:
                    key = constructor = self.model
                else:
                    key = constructor = node._bind_to
                if isinstance(node, Node) and node._alias:
                    attr = node._alias
                elif isinstance(node, Entity):
                    attr = node.path[-1]
            column_map.append((key, constructor, attr, conv))
            models.add(key)

        return column_map, models

    def generate_join_list(self, models):
        join_list = []
        joins = self.join_meta
        stack = [self.model]
        while stack:
            current = stack.pop()
            if current not in joins:
                continue

            for join in joins[current]:
                metadata = join.metadata
                if metadata.dest in models or metadata.dest_model in models:
                    join_list.append(metadata)
                    stack.append(join.dest)

        return join_list

    def process_row(self, row):
        collected = self.construct_instances(row)
        instances = self.follow_joins(collected)
        for i in instances:
            i._prepare_instance()
        return instances[0]

    def construct_instances(self, row, keys=None):
        collected_models = {}
        for i, (key, constructor, attr, conv) in enumerate(self.column_map):
            if keys is not None and key not in keys:
                continue
            value = row[i]
            if key not in collected_models:
                collected_models[key] = constructor()
            instance = collected_models[key]
            if attr is None:
                attr = self.cursor.description[i][0]
            if conv is not None:
                value = conv(value)
            setattr(instance, attr, value)

        return collected_models

    def follow_joins(self, collected):
        prepared = [collected[self.model]]
        for metadata in self.join_list:
            inst = collected[metadata.src]
            try:
                joined_inst = collected[metadata.dest]
            except KeyError:
                joined_inst = collected[metadata.dest_model]

            # Can we populate a value on the joined instance using the current?
            mpk = metadata.primary_key is not None
            can_populate_joined_pk = (
                mpk and
                (metadata.attr in inst._data) and
                (getattr(joined_inst, metadata.primary_key.name) is None))
            if can_populate_joined_pk:
                setattr(
                    joined_inst,
                    metadata.primary_key.name,
                    inst._data[metadata.attr])

            if metadata.is_backref:
                can_populate_joined_fk = (
                    mpk and
                    (metadata.foreign_key is not None) and
                    (getattr(inst, metadata.primary_key.name) is not None) and
                    (joined_inst._data.get(metadata.foreign_key.name) is None))
                if can_populate_joined_fk:
                    setattr(
                        joined_inst,
                        metadata.foreign_key.name,
                        inst)

            setattr(inst, metadata.attr, joined_inst)
            prepared.append(joined_inst)

        return prepared


JoinCache = namedtuple('JoinCache', ('metadata', 'attr'))


class AggregateQueryResultWrapper(ModelQueryResultWrapper):
    def __init__(self, *args, **kwargs):
        self._row = []
        super(AggregateQueryResultWrapper, self).__init__(*args, **kwargs)

    def initialize(self, description):
        super(AggregateQueryResultWrapper, self).initialize(description)

        # Collect the set of all models (and ModelAlias objects) queried.
        self.all_models = set()
        for key, _, _, _ in self.column_map:
            self.all_models.add(key)

        # Prepare data structures for analyzing unique rows. Also cache
        # foreign key and attribute names for joined models.
        self.models_with_aggregate = set()
        self.back_references = {}
        self.source_to_dest = {}
        self.dest_to_source = {}

        for metadata in self.join_list:
            if metadata.is_backref:
                att_name = metadata.foreign_key.related_name
            else:
                att_name = metadata.attr

            is_backref = metadata.is_backref or metadata.is_self_join
            if is_backref:
                self.models_with_aggregate.add(metadata.src)
            else:
                self.dest_to_source.setdefault(metadata.dest, set())
                self.dest_to_source[metadata.dest].add(metadata.src)

            self.source_to_dest.setdefault(metadata.src, {})
            self.source_to_dest[metadata.src][metadata.dest] = JoinCache(
                metadata=metadata,
                attr=metadata.alias or att_name)

        # Determine which columns could contain "duplicate" data, e.g. if
        # getting Users and their Tweets, this would be the User columns.
        self.columns_to_compare = {}
        key_to_columns = {}
        for idx, (key, model_class, col_name, _) in enumerate(self.column_map):
            if key in self.models_with_aggregate:
                self.columns_to_compare.setdefault(key, [])
                self.columns_to_compare[key].append((idx, col_name))

            key_to_columns.setdefault(key, [])
            key_to_columns[key].append((idx, col_name))

        # Also compare columns for joins -> many-related model.
        for model_or_alias in self.models_with_aggregate:
            if model_or_alias not in self.columns_to_compare:
                continue
            sources = self.dest_to_source.get(model_or_alias, ())
            for joined_model in sources:
                self.columns_to_compare[model_or_alias].extend(
                    key_to_columns[joined_model])

    def read_model_data(self, row):
        models = {}
        for model_class, column_data in self.columns_to_compare.items():
            models[model_class] = []
            for idx, col_name in column_data:
                models[model_class].append(row[idx])
        return models

    def iterate(self):
        if self._row:
            row = self._row.pop()
        else:
            row = self.cursor.fetchone()

        if not row:
            self._populated = True
            if not getattr(self.cursor, 'name', None):
                self.cursor.close()
            raise StopIteration
        elif not self._initialized:
            self.initialize(self.cursor.description)
            self._initialized = True

        def _get_pk(instance):
            if instance._meta.composite_key:
                return tuple([
                    instance._data[field_name]
                    for field_name in instance._meta.primary_key.field_names])
            return instance._get_pk_value()

        identity_map = {}
        _constructed = self.construct_instances(row)
        primary_instance = _constructed[self.model]
        for model_or_alias, instance in _constructed.items():
            identity_map[model_or_alias] = OrderedDict()
            identity_map[model_or_alias][_get_pk(instance)] = instance

        model_data = self.read_model_data(row)
        while True:
            cur_row = self.cursor.fetchone()
            if cur_row is None:
                break

            duplicate_models = set()
            cur_row_data = self.read_model_data(cur_row)
            for model_class, data in cur_row_data.items():
                if model_data[model_class] == data:
                    duplicate_models.add(model_class)

            if not duplicate_models:
                self._row.append(cur_row)
                break

            different_models = self.all_models - duplicate_models

            new_instances = self.construct_instances(cur_row, different_models)
            for model_or_alias, instance in new_instances.items():
                # Do not include any instances which are comprised solely of
                # NULL values.
                all_none = True
                for value in instance._data.values():
                    if value is not None:
                        all_none = False
                if not all_none:
                    identity_map[model_or_alias][_get_pk(instance)] = instance

        stack = [self.model]
        instances = [primary_instance]
        while stack:
            current = stack.pop()
            if current not in self.join_meta:
                continue

            for join in self.join_meta[current]:
                try:
                    metadata, attr = self.source_to_dest[current][join.dest]
                except KeyError:
                    continue

                if metadata.is_backref or metadata.is_self_join:
                    for instance in identity_map[current].values():
                        setattr(instance, attr, [])

                    if join.dest not in identity_map:
                        continue

                    for pk, inst in identity_map[join.dest].items():
                        if pk is None:
                            continue
                        try:
                            # XXX: if no FK exists, unable to join.
                            joined_inst = identity_map[current][
                                inst._data[metadata.foreign_key.name]]
                        except KeyError:
                            continue

                        getattr(joined_inst, attr).append(inst)
                        instances.append(inst)
                elif attr:
                    if join.dest not in identity_map:
                        continue

                    for pk, instance in identity_map[current].items():
                        # XXX: if no FK exists, unable to join.
                        joined_inst = identity_map[join.dest][
                            instance._data[metadata.foreign_key.name]]
                        setattr(
                            instance,
                            metadata.foreign_key.name,
                            joined_inst)
                        instances.append(joined_inst)

                stack.append(join.dest)

        for instance in instances:
            instance._prepare_instance()

        return primary_instance


class Query(Node):
    """Base class representing a database query on one or more tables."""
    require_commit = True

    def __init__(self, model_class):
        super(Query, self).__init__()

        self.model_class = model_class
        self.database = model_class._meta.database

        self._dirty = True
        self._query_ctx = model_class
        self._joins = {self.model_class: []}  # Join graph as adjacency list.
        self._where = None

    def __repr__(self):
        sql, params = self.sql()
        return '%s %s %s' % (self.model_class, sql, params)

    def clone(self):
        query = type(self)(self.model_class)
        query.database = self.database
        return self._clone_attributes(query)

    def _clone_attributes(self, query):
        if self._where is not None:
            query._where = self._where.clone()
        query._joins = self._clone_joins()
        query._query_ctx = self._query_ctx
        return query

    def _clone_joins(self):
        return dict(
            (mc, list(j)) for mc, j in self._joins.items())

    def _add_query_clauses(self, initial, expressions, conjunction=None):
        reduced = reduce(operator.and_, expressions)
        if initial is None:
            return reduced
        conjunction = conjunction or operator.and_
        return conjunction(initial, reduced)

    def _model_shorthand(self, args):
        accum = []
        for arg in args:
            if isinstance(arg, Node):
                accum.append(arg)
            elif isinstance(arg, Query):
                accum.append(arg)
            elif isinstance(arg, ModelAlias):
                accum.extend(arg.get_proxy_fields())
            elif isclass(arg) and issubclass(arg, Model):
                accum.extend(arg._meta.get_fields())
        return accum

    @returns_clone
    def where(self, *expressions):
        self._where = self._add_query_clauses(self._where, expressions)

    @returns_clone
    def orwhere(self, *expressions):
        self._where = self._add_query_clauses(
            self._where, expressions, operator.or_)

    @returns_clone
    def join(self, dest, join_type=None, on=None):
        src = self._query_ctx
        if not on:
            require_join_condition = (
                isinstance(dest, SelectQuery) or
                (isclass(dest) and not src._meta.rel_exists(dest)))
            if require_join_condition:
                raise ValueError('A join condition must be specified.')
        elif isinstance(on, basestring):
            on = src._meta.fields[on]
        self._joins.setdefault(src, [])
        self._joins[src].append(Join(src, dest, join_type, on))
        if not isinstance(dest, SelectQuery):
            self._query_ctx = dest

    @returns_clone
    def switch(self, model_class=None):
        """Change or reset the query context."""
        self._query_ctx = model_class or self.model_class

    def ensure_join(self, lm, rm, on=None):
        ctx = self._query_ctx
        for join in self._joins.get(lm, []):
            if join.dest == rm:
                return self
        return self.switch(lm).join(rm, on=on).switch(ctx)

    def convert_dict_to_node(self, qdict):
        accum = []
        joins = []
        relationship = (ForeignKeyField, ReverseRelationDescriptor)
        for key, value in sorted(qdict.items()):
            curr = self.model_class
            if '__' in key and key.rsplit('__', 1)[1] in DJANGO_MAP:
                key, op = key.rsplit('__', 1)
                op = DJANGO_MAP[op]
            else:
                op = OP.EQ
            for piece in key.split('__'):
                model_attr = getattr(curr, piece)
                if isinstance(model_attr, relationship):
                    curr = model_attr.rel_model
                    joins.append(model_attr)
            accum.append(Expression(model_attr, op, value))
        return accum, joins

    def filter(self, *args, **kwargs):
        # normalize args and kwargs into a new expression
        dq_node = Node()
        if args:
            dq_node &= reduce(operator.and_, [a.clone() for a in args])
        if kwargs:
            dq_node &= DQ(**kwargs)

        # dq_node should now be an Expression, lhs = Node(), rhs = ...
        q = deque([dq_node])
        dq_joins = set()
        while q:
            curr = q.popleft()
            if not isinstance(curr, Expression):
                continue
            for side, piece in (('lhs', curr.lhs), ('rhs', curr.rhs)):
                if isinstance(piece, DQ):
                    query, joins = self.convert_dict_to_node(piece.query)
                    dq_joins.update(joins)
                    expression = reduce(operator.and_, query)
                    # Apply values from the DQ object.
                    expression._negated = piece._negated
                    expression._alias = piece._alias
                    setattr(curr, side, expression)
                else:
                    q.append(piece)

        dq_node = dq_node.rhs

        query = self.clone()
        for field in dq_joins:
            if isinstance(field, ForeignKeyField):
                lm, rm = field.model_class, field.rel_model
                field_obj = field
            elif isinstance(field, ReverseRelationDescriptor):
                lm, rm = field.field.rel_model, field.rel_model
                field_obj = field.field
            query = query.ensure_join(lm, rm, field_obj)
        return query.where(dq_node)

    def compiler(self):
        return self.database.compiler()

    def sql(self):
        raise NotImplementedError

    def _execute(self):
        sql, params = self.sql()
        return self.database.execute_sql(sql, params, self.require_commit)

    def execute(self):
        raise NotImplementedError

    def scalar(self, as_tuple=False, convert=False):
        if convert:
            row = self.tuples().first()
        else:
            row = self._execute().fetchone()
        if row and not as_tuple:
            return row[0]
        else:
            return row

class RawQuery(Query):
    """
    Execute a SQL query, returning a standard iterable interface that returns
    model instances.
    """
    def __init__(self, model, query, *params):
        self._sql = query
        self._params = list(params)
        self._qr = None
        self._tuples = False
        self._dicts = False
        super(RawQuery, self).__init__(model)

    def clone(self):
        query = RawQuery(self.model_class, self._sql, *self._params)
        query._tuples = self._tuples
        query._dicts = self._dicts
        return query

    join = not_allowed('joining')
    where = not_allowed('where')
    switch = not_allowed('switch')

    @returns_clone
    def tuples(self, tuples=True):
        self._tuples = tuples

    @returns_clone
    def dicts(self, dicts=True):
        self._dicts = dicts

    def sql(self):
        return self._sql, self._params

    def execute(self):
        if self._qr is None:
            if self._tuples:
                ResultWrapper = TuplesQueryResultWrapper
            elif self._dicts:
                ResultWrapper = DictQueryResultWrapper
            else:
                ResultWrapper = NaiveQueryResultWrapper
            self._qr = ResultWrapper(self.model_class, self._execute(), None)
        return self._qr

    def __iter__(self):
        return iter(self.execute())

class SelectQuery(Query):
    _node_type = 'select_query'

    def __init__(self, model_class, *selection):
        super(SelectQuery, self).__init__(model_class)
        self.require_commit = self.database.commit_select
        self.__select(*selection)
        self._from = None
        self._group_by = None
        self._having = None
        self._order_by = None
        self._windows = None
        self._limit = None
        self._offset = None
        self._distinct = False
        self._for_update = (False, False)
        self._naive = False
        self._tuples = False
        self._dicts = False
        self._aggregate_rows = False
        self._alias = None
        self._qr = None

    def _clone_attributes(self, query):
        query = super(SelectQuery, self)._clone_attributes(query)
        query._explicit_selection = self._explicit_selection
        query._select = list(self._select)
        if self._from is not None:
            query._from = []
            for f in self._from:
                if isinstance(f, Node):
                    query._from.append(f.clone())
                else:
                    query._from.append(f)
        if self._group_by is not None:
            query._group_by = list(self._group_by)
        if self._having:
            query._having = self._having.clone()
        if self._order_by is not None:
            query._order_by = list(self._order_by)
        if self._windows is not None:
            query._windows = list(self._windows)
        query._limit = self._limit
        query._offset = self._offset
        query._distinct = self._distinct
        query._for_update = self._for_update
        query._naive = self._naive
        query._tuples = self._tuples
        query._dicts = self._dicts
        query._aggregate_rows = self._aggregate_rows
        query._alias = self._alias
        return query

    def compound_op(operator):
        def inner(self, other):
            supported_ops = self.model_class._meta.database.compound_operations
            if operator not in supported_ops:
                raise ValueError(
                    'Your database does not support %s' % operator)
            return CompoundSelect(self.model_class, self, operator, other)
        return inner
    _compound_op_static = staticmethod(compound_op)
    __or__ = compound_op('UNION')
    __and__ = compound_op('INTERSECT')
    __sub__ = compound_op('EXCEPT')

    def __xor__(self, rhs):
        # Symmetric difference, should just be (self | rhs) - (self & rhs)...
        wrapped_rhs = self.model_class.select(SQL('*')).from_(
            EnclosedClause((self & rhs)).alias('_')).order_by()
        return (self | rhs) - wrapped_rhs

    def union_all(self, rhs):
        return SelectQuery._compound_op_static('UNION ALL')(self, rhs)

    def __select(self, *selection):
        self._explicit_selection = len(selection) > 0
        selection = selection or self.model_class._meta.get_fields()
        self._select = self._model_shorthand(selection)
    select = returns_clone(__select)

    @returns_clone
    def from_(self, *args):
        self._from = None
        if args:
            self._from = list(args)

    @returns_clone
    def group_by(self, *args):
        self._group_by = self._model_shorthand(args)

    @returns_clone
    def having(self, *expressions):
        self._having = self._add_query_clauses(self._having, expressions)

    @returns_clone
    def order_by(self, *args):
        self._order_by = list(args)

    @returns_clone
    def window(self, *windows):
        self._windows = list(windows)

    @returns_clone
    def limit(self, lim):
        self._limit = lim

    @returns_clone
    def offset(self, off):
        self._offset = off

    @returns_clone
    def paginate(self, page, paginate_by=20):
        if page > 0:
            page -= 1
        self._limit = paginate_by
        self._offset = page * paginate_by

    @returns_clone
    def distinct(self, is_distinct=True):
        self._distinct = is_distinct

    @returns_clone
    def for_update(self, for_update=True, nowait=False):
        self._for_update = (for_update, nowait)

    @returns_clone
    def naive(self, naive=True):
        self._naive = naive

    @returns_clone
    def tuples(self, tuples=True):
        self._tuples = tuples

    @returns_clone
    def dicts(self, dicts=True):
        self._dicts = dicts

    @returns_clone
    def aggregate_rows(self, aggregate_rows=True):
        self._aggregate_rows = aggregate_rows

    @returns_clone
    def alias(self, alias=None):
        self._alias = alias

    def annotate(self, rel_model, annotation=None):
        if annotation is None:
            annotation = fn.Count(rel_model._meta.primary_key).alias('count')
        if self._query_ctx == rel_model:
            query = self.switch(self.model_class)
        else:
            query = self.clone()
        query = query.ensure_join(query._query_ctx, rel_model)
        if not query._group_by:
            query._group_by = [x.alias() for x in query._select]
        query._select = tuple(query._select) + (annotation,)
        return query

    def _aggregate(self, aggregation=None):
        if aggregation is None:
            aggregation = fn.Count(SQL('*'))
        query = self.order_by()
        query._select = [aggregation]
        return query

    def aggregate(self, aggregation=None, convert=True):
        return self._aggregate(aggregation).scalar(convert=convert)

    def count(self, clear_limit=False):
        if self._distinct or self._group_by or self._limit or self._offset:
            return self.wrapped_count(clear_limit=clear_limit)

        # defaults to a count() of the primary key
        return self.aggregate(convert=False) or 0

    def wrapped_count(self, clear_limit=False):
        clone = self.order_by()
        if clear_limit:
            clone._limit = clone._offset = None

        sql, params = clone.sql()
        wrapped = 'SELECT COUNT(1) FROM (%s) AS wrapped_select' % sql
        rq = self.model_class.raw(wrapped, *params)
        return rq.scalar() or 0

    def exists(self):
        clone = self.paginate(1, 1)
        clone._select = [SQL('1')]
        return bool(clone.scalar())

    def get(self):
        clone = self.paginate(1, 1)
        try:
            return clone.execute().next()
        except StopIteration:
            raise self.model_class.DoesNotExist(
                'Instance matching query does not exist:\nSQL: %s\nPARAMS: %s'
                % self.sql())

    def first(self):
        res = self.execute()
        res.fill_cache(1)
        try:
            return res._result_cache[0]
        except IndexError:
            pass

    def sql(self):
        return self.compiler().generate_select(self)

    def verify_naive(self):
        model_class = self.model_class
        for node in self._select:
            if isinstance(node, Field) and node.model_class != model_class:
                return False
            elif isinstance(node, Node) and node._bind_to is not None:
                if node._bind_to != model_class:
                    return False
        return True

    def get_query_meta(self):
        return (self._select, self._joins)

    def _get_result_wrapper(self):
        if self._tuples:
            return TuplesQueryResultWrapper
        elif self._dicts:
            return DictQueryResultWrapper
        elif self._naive or not self._joins or self.verify_naive():
            return NaiveQueryResultWrapper
        elif self._aggregate_rows:
            return AggregateQueryResultWrapper
        else:
            return ModelQueryResultWrapper

    def execute(self):
        if self._dirty or self._qr is None:
            model_class = self.model_class
            query_meta = self.get_query_meta()
            ResultWrapper = self._get_result_wrapper()
            self._qr = ResultWrapper(model_class, self._execute(), query_meta)
            self._dirty = False
            return self._qr
        else:
            return self._qr

    def __iter__(self):
        return iter(self.execute())

    def iterator(self):
        return iter(self.execute().iterator())

    def __getitem__(self, value):
        res = self.execute()
        if isinstance(value, slice):
            index = value.stop
        else:
            index = value
        if index is not None and index >= 0:
            index += 1
        res.fill_cache(index)
        return res._result_cache[value]

    if PY3:
        def __hash__(self):
            return id(self)

class ManyToManyQuery(SelectQuery):
    def __init__(self, instance, field_descriptor, *args, **kwargs):
        self._instance = instance
        self._field_descriptor = field_descriptor
        super(ManyToManyQuery, self).__init__(*args, **kwargs)

    def clone(self):
        query = ManyToManyQuery(
            self._instance,
            self._field_descriptor,
            self.model_class)
        query.database = self.database
        return self._clone_attributes(query)

    def add(self, value, clear_existing=False):
        if clear_existing:
            self.clear()

        fd = self._field_descriptor
        if isinstance(value, SelectQuery):
            query = value.select(
                SQL(str(self._instance.get_id())),
                fd.rel_model._meta.primary_key)
            fd.through_model.insert_from(
                fields=[fd.src_fk, fd.dest_fk],
                query=query).execute()
        else:
            if not isinstance(value, (list, tuple)):
                value = [value]
            inserts = [{
                fd.src_fk.name: self._instance.get_id(),
                fd.dest_fk.name: rel_instance.get_id()}
                for rel_instance in value]
            fd.through_model.insert_many(inserts).execute()

    def remove(self, value):
        fd = self._field_descriptor
        if isinstance(value, SelectQuery):
            subquery = value.select(value.model_class._meta.primary_key)
            return (fd.through_model
                    .delete()
                    .where(
                        (fd.dest_fk << subquery) &
                        (fd.src_fk == self._instance.get_id()))
                    .execute())
        else:
            if not isinstance(value, (list, tuple)):
                value = [value]
            primary_keys = [rel_instance.get_id() for rel_instance in value]
            return (fd.through_model
                    .delete()
                    .where(
                        (fd.dest_fk << primary_keys) &
                        (fd.src_fk == self._instance.get_id()))
                    .execute())

    def clear(self):
        return (self._field_descriptor.through_model
                .delete()
                .where(self._field_descriptor.src_fk == self._instance)
                .execute())

class CompoundSelect(SelectQuery):
    _node_type = 'compound_select_query'

    def __init__(self, model_class, lhs=None, operator=None, rhs=None):
        self.lhs = lhs
        self.operator = operator
        self.rhs = rhs
        super(CompoundSelect, self).__init__(model_class, [])

    def _clone_attributes(self, query):
        query = super(CompoundSelect, self)._clone_attributes(query)
        query.lhs = self.lhs
        query.operator = self.operator
        query.rhs = self.rhs
        return query

    def get_query_meta(self):
        return self.lhs.get_query_meta()

    def verify_naive(self):
        return self.lhs.verify_naive() and self.rhs.verify_naive()

    def _get_result_wrapper(self):
        if self._tuples:
            return TuplesQueryResultWrapper
        elif self._dicts:
            return DictQueryResultWrapper
        elif self._aggregate_rows:
            return AggregateQueryResultWrapper

        has_joins = self.lhs._joins or self.rhs._joins
        is_naive = self.lhs._naive or self.rhs._naive or self._naive
        if is_naive or not has_joins or self.verify_naive():
            return NaiveQueryResultWrapper
        else:
            return ModelQueryResultWrapper

class _WriteQuery(Query):
    def __init__(self, model_class):
        self._returning = None
        self._tuples = False
        self._dicts = False
        self._qr = None
        super(_WriteQuery, self).__init__(model_class)

    def _clone_attributes(self, query):
        query = super(_WriteQuery, self)._clone_attributes(query)
        if self._returning:
            query._returning = list(self._returning)
            query._tuples = self._tuples
            query._dicts = self._dicts
        return query

    def requires_returning(method):
        def inner(self, *args, **kwargs):
            db = self.model_class._meta.database
            if not db.returning_clause:
                raise ValueError('RETURNING is not supported by your '
                                 'database: %s' % type(db))
            return method(self, *args, **kwargs)
        return inner

    @requires_returning
    @returns_clone
    def returning(self, *selection):
        if len(selection) == 1 and selection[0] is None:
            self._returning = None
        else:
            if not selection:
                selection = self.model_class._meta.get_fields()
            self._returning = self._model_shorthand(selection)

    @requires_returning
    @returns_clone
    def tuples(self, tuples=True):
        self._tuples = tuples

    @requires_returning
    @returns_clone
    def dicts(self, dicts=True):
        self._dicts = dicts

    def get_result_wrapper(self):
        if self._returning is not None:
            if self._tuples:
                return TuplesQueryResultWrapper
            elif self._dicts:
                return DictQueryResultWrapper
        return NaiveQueryResultWrapper

    def _execute_with_result_wrapper(self):
        ResultWrapper = self.get_result_wrapper()
        meta = (self._returning, {self.model_class: []})
        self._qr = ResultWrapper(self.model_class, self._execute(), meta)
        return self._qr


class UpdateQuery(_WriteQuery):
    def __init__(self, model_class, update=None):
        self._update = update
        self._on_conflict = None
        super(UpdateQuery, self).__init__(model_class)

    def _clone_attributes(self, query):
        query = super(UpdateQuery, self)._clone_attributes(query)
        query._update = dict(self._update)
        query._on_conflict = self._on_conflict
        return query

    @returns_clone
    def on_conflict(self, action=None):
        self._on_conflict = action

    join = not_allowed('joining')

    def sql(self):
        return self.compiler().generate_update(self)

    def execute(self):
        if self._returning is not None and self._qr is None:
            return self._execute_with_result_wrapper()
        elif self._qr is not None:
            return self._qr
        else:
            return self.database.rows_affected(self._execute())

    def __iter__(self):
        if not self.model_class._meta.database.returning_clause:
            raise ValueError('UPDATE queries cannot be iterated over unless '
                             'they specify a RETURNING clause, which is not '
                             'supported by your database.')
        return iter(self.execute())

    def iterator(self):
        return iter(self.execute().iterator())

class InsertQuery(_WriteQuery):
    def __init__(self, model_class, field_dict=None, rows=None,
                 fields=None, query=None):
        super(InsertQuery, self).__init__(model_class)

        self._upsert = False
        self._is_multi_row_insert = rows is not None or query is not None
        self._return_id_list = False
        if rows is not None:
            self._rows = rows
        else:
            self._rows = [field_dict or {}]

        self._fields = fields
        self._query = query
        self._on_conflict = None

    def _iter_rows(self):
        model_meta = self.model_class._meta
        valid_fields = (set(model_meta.fields.keys()) |
                        set(model_meta.fields.values()))
        def validate_field(field):
            if field not in valid_fields:
                raise KeyError('"%s" is not a recognized field.' % field)

        defaults = model_meta._default_dict
        callables = model_meta._default_callables

        for row_dict in self._rows:
            field_row = defaults.copy()
            seen = set()
            for key in row_dict:
                validate_field(key)
                if key in model_meta.fields:
                    field = model_meta.fields[key]
                else:
                    field = key
                field_row[field] = row_dict[key]
                seen.add(field)
            if callables:
                for field in callables:
                    if field not in seen:
                        field_row[field] = callables[field]()
            yield field_row

    def _clone_attributes(self, query):
        query = super(InsertQuery, self)._clone_attributes(query)
        query._rows = self._rows
        query._upsert = self._upsert
        query._is_multi_row_insert = self._is_multi_row_insert
        query._fields = self._fields
        query._query = self._query
        query._return_id_list = self._return_id_list
        query._on_conflict = self._on_conflict
        return query

    join = not_allowed('joining')
    where = not_allowed('where clause')

    @returns_clone
    def upsert(self, upsert=True):
        self._upsert = upsert

    @returns_clone
    def on_conflict(self, action=None):
        self._on_conflict = action

    @returns_clone
    def return_id_list(self, return_id_list=True):
        self._return_id_list = return_id_list

    @property
    def is_insert_returning(self):
        if self.database.insert_returning:
            if not self._is_multi_row_insert or self._return_id_list:
                return True
        return False

    def sql(self):
        return self.compiler().generate_insert(self)

    def _insert_with_loop(self):
        id_list = []
        last_id = None
        return_id_list = self._return_id_list
        for row in self._rows:
            last_id = (InsertQuery(self.model_class, row)
                       .upsert(self._upsert)
                       .execute())
            if return_id_list:
                id_list.append(last_id)

        if return_id_list:
            return id_list
        else:
            return last_id

    def execute(self):
        insert_with_loop = (
            self._is_multi_row_insert and
            self._query is None and
            self._returning is None and
            not self.database.insert_many)
        if insert_with_loop:
            return self._insert_with_loop()

        if self._returning is not None and self._qr is None:
            return self._execute_with_result_wrapper()
        elif self._qr is not None:
            return self._qr
        else:
            cursor = self._execute()
            if not self._is_multi_row_insert:
                if self.database.insert_returning:
                    pk_row = cursor.fetchone()
                    meta = self.model_class._meta
                    clean_data = [
                        field.python_value(column)
                        for field, column
                        in zip(meta.get_primary_key_fields(), pk_row)]
                    if self.model_class._meta.composite_key:
                        return clean_data
                    return clean_data[0]
                return self.database.last_insert_id(cursor, self.model_class)
            elif self._return_id_list:
                return map(operator.itemgetter(0), cursor.fetchall())
            else:
                return True

class DeleteQuery(_WriteQuery):
    join = not_allowed('joining')

    def sql(self):
        return self.compiler().generate_delete(self)

    def execute(self):
        if self._returning is not None and self._qr is None:
            return self._execute_with_result_wrapper()
        elif self._qr is not None:
            return self._qr
        else:
            return self.database.rows_affected(self._execute())


IndexMetadata = namedtuple(
    'IndexMetadata',
    ('name', 'sql', 'columns', 'unique', 'table'))
ColumnMetadata = namedtuple(
    'ColumnMetadata',
    ('name', 'data_type', 'null', 'primary_key', 'table'))
ForeignKeyMetadata = namedtuple(
    'ForeignKeyMetadata',
    ('column', 'dest_table', 'dest_column', 'table'))


class PeeweeException(Exception): pass
class ImproperlyConfigured(PeeweeException): pass
class DatabaseError(PeeweeException): pass
class DataError(DatabaseError): pass
class IntegrityError(DatabaseError): pass
class InterfaceError(PeeweeException): pass
class InternalError(DatabaseError): pass
class NotSupportedError(DatabaseError): pass
class OperationalError(DatabaseError): pass
class ProgrammingError(DatabaseError): pass


class ExceptionWrapper(object):
    __slots__ = ['exceptions']

    def __init__(self, exceptions):
        self.exceptions = exceptions

    def __enter__(self): pass
    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            return
        if exc_type.__name__ in self.exceptions:
            new_type = self.exceptions[exc_type.__name__]
            if PY26:
                exc_args = exc_value
            else:
                exc_args = exc_value.args
            reraise(new_type, new_type(*exc_args), traceback)

class _BaseConnectionLocal(object):
    def __init__(self, **kwargs):
        super(_BaseConnectionLocal, self).__init__(**kwargs)
        self.autocommit = None
        self.closed = True
        self.conn = None
        self.context_stack = []
        self.transactions = []

class _ConnectionLocal(_BaseConnectionLocal, threading.local):
    pass

class Database(object):
    commit_select = False
    compiler_class = QueryCompiler
    compound_operations = ['UNION', 'INTERSECT', 'EXCEPT', 'UNION ALL']
    compound_select_parentheses = False
    distinct_on = False
    drop_cascade = False
    field_overrides = {}
    foreign_keys = True
    for_update = False
    for_update_nowait = False
    insert_many = True
    insert_returning = False
    interpolation = '?'
    limit_max = None
    logger = None
    op_overrides = {}
    quote_char = '"'
    reserved_tables = []
    returning_clause = False
    savepoints = True
    sequences = False
    subquery_delete_same_table = True
    window_functions = False

    exceptions = {
        'ConstraintError': IntegrityError,
        'DatabaseError': DatabaseError,
        'DataError': DataError,
        'IntegrityError': IntegrityError,
        'InterfaceError': InterfaceError,
        'InternalError': InternalError,
        'NotSupportedError': NotSupportedError,
        'OperationalError': OperationalError,
        'ProgrammingError': ProgrammingError}

    def __init__(self, database, threadlocals=True, autocommit=True,
                 fields=None, ops=None, autorollback=False, **connect_kwargs):
        self.init(database, **connect_kwargs)

        if threadlocals:
            self.__local = _ConnectionLocal()
        else:
            self.__local = _BaseConnectionLocal()

        self._conn_lock = threading.Lock()
        self.autocommit = autocommit
        self.autorollback = autorollback

        self.field_overrides = merge_dict(self.field_overrides, fields or {})
        self.op_overrides = merge_dict(self.op_overrides, ops or {})

    def init(self, database, **connect_kwargs):
        self.deferred = database is None
        self.database = database
        self.connect_kwargs = connect_kwargs

    def exception_wrapper(self):
        return ExceptionWrapper(self.exceptions)

    def connect(self):
        with self._conn_lock:
            if self.deferred:
                raise Exception('Error, database not properly initialized '
                                'before opening connection')
            with self.exception_wrapper():
                self.__local.conn = self._connect(
                    self.database,
                    **self.connect_kwargs)
                self.__local.closed = False
                self.initialize_connection(self.__local.conn)

    def initialize_connection(self, conn):
        pass

    def close(self):
        with self._conn_lock:
            if self.deferred:
                raise Exception('Error, database not properly initialized '
                                'before closing connection')
            with self.exception_wrapper():
                self._close(self.__local.conn)
                self.__local.closed = True

    def get_conn(self):
        if self.__local.context_stack:
            conn = self.__local.context_stack[-1].connection
            if conn is not None:
                return conn
        if self.__local.closed:
            self.connect()
        return self.__local.conn

    def is_closed(self):
        return self.__local.closed

    def get_cursor(self):
        return self.get_conn().cursor()

    def _close(self, conn):
        conn.close()

    def _connect(self, database, **kwargs):
        raise NotImplementedError

    @classmethod
    def register_fields(cls, fields):
        cls.field_overrides = merge_dict(cls.field_overrides, fields)

    @classmethod
    def register_ops(cls, ops):
        cls.op_overrides = merge_dict(cls.op_overrides, ops)

    def last_insert_id(self, cursor, model):
        if model._meta.auto_increment:
            return cursor.lastrowid

    def rows_affected(self, cursor):
        return cursor.rowcount

    def sql_error_handler(self, exception, sql, params, require_commit):
        return True

    def compiler(self):
        return self.compiler_class(
            self.quote_char, self.interpolation, self.field_overrides,
            self.op_overrides)

    def execute_sql(self, sql, params=None, require_commit=True):
        if self.__class__.logger:
            self.__class__.logger.debug((sql, params))

        with self.exception_wrapper():
            cursor = self.get_cursor()
            try:
                cursor.execute(sql, params or ())
            except Exception as exc:
                if self.get_autocommit() and self.autorollback:
                    self.rollback()
                if self.sql_error_handler(exc, sql, params, require_commit):
                    raise
            else:
                if require_commit and self.get_autocommit():
                    self.commit()
        return cursor

    def begin(self):
        pass

    def commit(self):
        self.get_conn().commit()

    def rollback(self):
        self.get_conn().rollback()

    def set_autocommit(self, autocommit):
        self.__local.autocommit = autocommit

    def get_autocommit(self):
        if self.__local.autocommit is None:
            self.set_autocommit(self.autocommit)
        return self.__local.autocommit

    def push_execution_context(self, transaction):
        self.__local.context_stack.append(transaction)

    def pop_execution_context(self):
        self.__local.context_stack.pop()

    def execution_context_depth(self):
        return len(self.__local.context_stack)

    def execution_context(self, with_transaction=True):
        return ExecutionContext(self, with_transaction=with_transaction)

    def push_transaction(self, transaction):
        self.__local.transactions.append(transaction)

    def pop_transaction(self):
        self.__local.transactions.pop()

    def transaction_depth(self):
        return len(self.__local.transactions)

    def transaction(self):
        return transaction(self)

    def commit_on_success(self, func):
        @wraps(func)
        def inner(*args, **kwargs):
            with self.transaction():
                return func(*args, **kwargs)
        return inner

    def savepoint(self, sid=None):
        if not self.savepoints:
            raise NotImplementedError
        return savepoint(self, sid)

    def atomic(self):
        return _atomic(self)

    def get_tables(self, schema=None):
        raise NotImplementedError

    def get_indexes(self, table, schema=None):
        raise NotImplementedError

    def get_columns(self, table, schema=None):
        raise NotImplementedError

    def get_primary_keys(self, table, schema=None):
        raise NotImplementedError

    def get_foreign_keys(self, table, schema=None):
        raise NotImplementedError

    def sequence_exists(self, seq):
        raise NotImplementedError

    def create_table(self, model_class, safe=False):
        qc = self.compiler()
        return self.execute_sql(*qc.create_table(model_class, safe))

    def create_tables(self, models, safe=False):
        create_model_tables(models, fail_silently=safe)

    def create_index(self, model_class, fields, unique=False):
        qc = self.compiler()
        if not isinstance(fields, (list, tuple)):
            raise ValueError('Fields passed to "create_index" must be a list '
                             'or tuple: "%s"' % fields)
        fobjs = [
            model_class._meta.fields[f] if isinstance(f, basestring) else f
            for f in fields]
        return self.execute_sql(*qc.create_index(model_class, fobjs, unique))

    def create_foreign_key(self, model_class, field, constraint=None):
        qc = self.compiler()
        return self.execute_sql(*qc.create_foreign_key(
            model_class, field, constraint))

    def create_sequence(self, seq):
        if self.sequences:
            qc = self.compiler()
            return self.execute_sql(*qc.create_sequence(seq))

    def drop_table(self, model_class, fail_silently=False, cascade=False):
        qc = self.compiler()
        return self.execute_sql(*qc.drop_table(
            model_class, fail_silently, cascade))

    def drop_tables(self, models, safe=False, cascade=False):
        drop_model_tables(models, fail_silently=safe, cascade=cascade)

    def drop_sequence(self, seq):
        if self.sequences:
            qc = self.compiler()
            return self.execute_sql(*qc.drop_sequence(seq))

    def extract_date(self, date_part, date_field):
        return fn.EXTRACT(Clause(date_part, R('FROM'), date_field))

    def truncate_date(self, date_part, date_field):
        return fn.DATE_TRUNC(SQL(date_part), date_field)

    def default_insert_clause(self, model_class):
        return SQL('DEFAULT VALUES')

class SqliteDatabase(Database):
    foreign_keys = False
    insert_many = sqlite3 and sqlite3.sqlite_version_info >= (3, 7, 11, 0)
    limit_max = -1
    op_overrides = {
        OP.LIKE: 'GLOB',
        OP.ILIKE: 'LIKE',
    }

    def __init__(self, database, pragmas=None, *args, **kwargs):
        self._pragmas = pragmas or []
        journal_mode = kwargs.pop('journal_mode', None)  # Backwards-compat.
        if journal_mode:
            self._pragmas.append(('journal_mode', journal_mode))

        super(SqliteDatabase, self).__init__(database, *args, **kwargs)
        if not self.database:
            self.database = ':memory:'

    def _connect(self, database, **kwargs):
        conn = sqlite3.connect(database, **kwargs)
        conn.isolation_level = None
        self._add_conn_hooks(conn)
        return conn

    def _add_conn_hooks(self, conn):
        self._set_pragmas(conn)
        conn.create_function('date_part', 2, _sqlite_date_part)
        conn.create_function('date_trunc', 2, _sqlite_date_trunc)
        conn.create_function('regexp', 2, _sqlite_regexp)

    def _set_pragmas(self, conn):
        if self._pragmas:
            cursor = conn.cursor()
            for pragma, value in self._pragmas:
                cursor.execute('PRAGMA %s = %s;' % (pragma, value))
            cursor.close()

    def begin(self, lock_type='DEFERRED'):
        self.execute_sql('BEGIN %s' % lock_type, require_commit=False)

    def get_tables(self, schema=None):
        cursor = self.execute_sql('SELECT name FROM sqlite_master WHERE '
                                  'type = ? ORDER BY name;', ('table',))
        return [row[0] for row in cursor.fetchall()]

    def get_indexes(self, table, schema=None):
        query = ('SELECT name, sql FROM sqlite_master '
                 'WHERE tbl_name = ? AND type = ? ORDER BY name')
        cursor = self.execute_sql(query, (table, 'index'))
        index_to_sql = dict(cursor.fetchall())

        # Determine which indexes have a unique constraint.
        unique_indexes = set()
        cursor = self.execute_sql('PRAGMA index_list("%s")' % table)
        for row in cursor.fetchall():
            name = row[1]
            is_unique = int(row[2]) == 1
            if is_unique:
                unique_indexes.add(name)

        # Retrieve the indexed columns.
        index_columns = {}
        for index_name in sorted(index_to_sql):
            cursor = self.execute_sql('PRAGMA index_info("%s")' % index_name)
            index_columns[index_name] = [row[2] for row in cursor.fetchall()]

        return [
            IndexMetadata(
                name,
                index_to_sql[name],
                index_columns[name],
                name in unique_indexes,
                table)
            for name in sorted(index_to_sql)]

    def get_columns(self, table, schema=None):
        cursor = self.execute_sql('PRAGMA table_info("%s")' % table)
        return [ColumnMetadata(row[1], row[2], not row[3], bool(row[5]), table)
                for row in cursor.fetchall()]

    def get_primary_keys(self, table, schema=None):
        cursor = self.execute_sql('PRAGMA table_info("%s")' % table)
        return [row[1] for row in cursor.fetchall() if row[-1]]

    def get_foreign_keys(self, table, schema=None):
        cursor = self.execute_sql('PRAGMA foreign_key_list("%s")' % table)
        return [ForeignKeyMetadata(row[3], row[2], row[4], table)
                for row in cursor.fetchall()]

    def savepoint(self, sid=None):
        return savepoint_sqlite(self, sid)

    def extract_date(self, date_part, date_field):
        return fn.date_part(date_part, date_field)

    def truncate_date(self, date_part, date_field):
        return fn.strftime(SQLITE_DATE_TRUNC_MAPPING[date_part], date_field)

class PostgresqlDatabase(Database):
    commit_select = True
    compound_select_parentheses = True
    distinct_on = True
    drop_cascade = True
    field_overrides = {
        'blob': 'BYTEA',
        'bool': 'BOOLEAN',
        'datetime': 'TIMESTAMP',
        'decimal': 'NUMERIC',
        'double': 'DOUBLE PRECISION',
        'primary_key': 'SERIAL',
        'uuid': 'UUID',
    }
    for_update = True
    for_update_nowait = True
    insert_returning = True
    interpolation = '%s'
    op_overrides = {
        OP.REGEXP: '~',
    }
    reserved_tables = ['user']
    returning_clause = True
    sequences = True
    window_functions = True

    register_unicode = True

    def _connect(self, database, encoding=None, **kwargs):
        if not psycopg2:
            raise ImproperlyConfigured('psycopg2 must be installed.')
        conn = psycopg2.connect(database=database, **kwargs)
        if self.register_unicode:
            pg_extensions.register_type(pg_extensions.UNICODE, conn)
            pg_extensions.register_type(pg_extensions.UNICODEARRAY, conn)
        if encoding:
            conn.set_client_encoding(encoding)
        return conn

    def _get_pk_sequence(self, model):
        meta = model._meta
        if meta.primary_key.sequence:
            return meta.primary_key.sequence
        elif meta.auto_increment:
            return '%s_%s_seq' % (meta.db_table, meta.primary_key.db_column)

    def last_insert_id(self, cursor, model):
        sequence = self._get_pk_sequence(model)
        if not sequence:
            return

        meta = model._meta
        if meta.schema:
            schema = '%s.' % meta.schema
        else:
            schema = ''

        cursor.execute("SELECT CURRVAL('%s\"%s\"')" % (schema, sequence))
        result = cursor.fetchone()[0]
        if self.get_autocommit():
            self.commit()
        return result

    def get_tables(self, schema='public'):
        query = ('SELECT tablename FROM pg_catalog.pg_tables '
                 'WHERE schemaname = %s ORDER BY tablename')
        return [r for r, in self.execute_sql(query, (schema,)).fetchall()]

    def get_indexes(self, table, schema='public'):
        query = """
            SELECT
                i.relname, idxs.indexdef, idx.indisunique,
                array_to_string(array_agg(cols.attname), ',')
            FROM pg_catalog.pg_class AS t
            INNER JOIN pg_catalog.pg_index AS idx ON t.oid = idx.indrelid
            INNER JOIN pg_catalog.pg_class AS i ON idx.indexrelid = i.oid
            INNER JOIN pg_catalog.pg_indexes AS idxs ON
                (idxs.tablename = t.relname AND idxs.indexname = i.relname)
            LEFT OUTER JOIN pg_catalog.pg_attribute AS cols ON
                (cols.attrelid = t.oid AND cols.attnum = ANY(idx.indkey))
            WHERE t.relname = %s AND t.relkind = %s AND idxs.schemaname = %s
            GROUP BY i.relname, idxs.indexdef, idx.indisunique
            ORDER BY idx.indisunique DESC, i.relname;"""
        cursor = self.execute_sql(query, (table, 'r', schema))
        return [IndexMetadata(row[0], row[1], row[3].split(','), row[2], table)
                for row in cursor.fetchall()]

    def get_columns(self, table, schema='public'):
        query = """
            SELECT column_name, is_nullable, data_type
            FROM information_schema.columns
            WHERE table_name = %s AND table_schema = %s
            ORDER BY ordinal_position"""
        cursor = self.execute_sql(query, (table, schema))
        pks = set(self.get_primary_keys(table, schema))
        return [ColumnMetadata(name, dt, null == 'YES', name in pks, table)
                for name, null, dt in cursor.fetchall()]

    def get_primary_keys(self, table, schema='public'):
        query = """
            SELECT kc.column_name
            FROM information_schema.table_constraints AS tc
            INNER JOIN information_schema.key_column_usage AS kc ON (
                tc.table_name = kc.table_name AND
                tc.table_schema = kc.table_schema AND
                tc.constraint_name = kc.constraint_name)
            WHERE
                tc.constraint_type = %s AND
                tc.table_name = %s AND
                tc.table_schema = %s"""
        cursor = self.execute_sql(query, ('PRIMARY KEY', table, schema))
        return [row for row, in cursor.fetchall()]

    def get_foreign_keys(self, table, schema='public'):
        sql = """
            SELECT
                kcu.column_name, ccu.table_name, ccu.column_name
            FROM information_schema.table_constraints AS tc
            JOIN information_schema.key_column_usage AS kcu
                ON (tc.constraint_name = kcu.constraint_name AND
                    tc.constraint_schema = kcu.constraint_schema)
            JOIN information_schema.constraint_column_usage AS ccu
                ON (ccu.constraint_name = tc.constraint_name AND
                    ccu.constraint_schema = tc.constraint_schema)
            WHERE
                tc.constraint_type = 'FOREIGN KEY' AND
                tc.table_name = %s AND
                tc.table_schema = %s"""
        cursor = self.execute_sql(sql, (table, schema))
        return [ForeignKeyMetadata(row[0], row[1], row[2], table)
                for row in cursor.fetchall()]

    def sequence_exists(self, sequence):
        res = self.execute_sql("""
            SELECT COUNT(*) FROM pg_class, pg_namespace
            WHERE relkind='S'
                AND pg_class.relnamespace = pg_namespace.oid
                AND relname=%s""", (sequence,))
        return bool(res.fetchone()[0])

    def set_search_path(self, *search_path):
        path_params = ','.join(['%s'] * len(search_path))
        self.execute_sql('SET search_path TO %s' % path_params, search_path)

class MySQLDatabase(Database):
    commit_select = True
    compound_operations = ['UNION', 'UNION ALL']
    field_overrides = {
        'bool': 'BOOL',
        'decimal': 'NUMERIC',
        'double': 'DOUBLE PRECISION',
        'float': 'FLOAT',
        'primary_key': 'INTEGER AUTO_INCREMENT',
        'text': 'LONGTEXT',
    }
    for_update = True
    interpolation = '%s'
    limit_max = 2 ** 64 - 1  # MySQL quirk
    op_overrides = {
        OP.LIKE: 'LIKE BINARY',
        OP.ILIKE: 'LIKE',
        OP.XOR: 'XOR',
    }
    quote_char = '`'
    subquery_delete_same_table = False

    def _connect(self, database, **kwargs):
        if not mysql:
            raise ImproperlyConfigured('MySQLdb or PyMySQL must be installed.')
        conn_kwargs = {
            'charset': 'utf8',
            'use_unicode': True,
        }
        conn_kwargs.update(kwargs)
        if 'password' in conn_kwargs:
            conn_kwargs['passwd'] = conn_kwargs.pop('password')
        return mysql.connect(db=database, **conn_kwargs)

    def get_tables(self, schema=None):
        return [row for row, in self.execute_sql('SHOW TABLES')]

    def get_indexes(self, table, schema=None):
        cursor = self.execute_sql('SHOW INDEX FROM `%s`' % table)
        unique = set()
        indexes = {}
        for row in cursor.fetchall():
            if not row[1]:
                unique.add(row[2])
            indexes.setdefault(row[2], [])
            indexes[row[2]].append(row[4])
        return [IndexMetadata(name, None, indexes[name], name in unique, table)
                for name in indexes]

    def get_columns(self, table, schema=None):
        sql = """
            SELECT column_name, is_nullable, data_type
            FROM information_schema.columns
            WHERE table_name = %s AND table_schema = DATABASE()"""
        cursor = self.execute_sql(sql, (table,))
        pks = set(self.get_primary_keys(table))
        return [ColumnMetadata(name, dt, null == 'YES', name in pks, table)
                for name, null, dt in cursor.fetchall()]

    def get_primary_keys(self, table, schema=None):
        cursor = self.execute_sql('SHOW INDEX FROM `%s`' % table)
        return [row[4] for row in cursor.fetchall() if row[2] == 'PRIMARY']

    def get_foreign_keys(self, table, schema=None):
        query = """
            SELECT column_name, referenced_table_name, referenced_column_name
            FROM information_schema.key_column_usage
            WHERE table_name = %s
                AND table_schema = DATABASE()
                AND referenced_table_name IS NOT NULL
                AND referenced_column_name IS NOT NULL"""
        cursor = self.execute_sql(query, (table,))
        return [
            ForeignKeyMetadata(column, dest_table, dest_column, table)
            for column, dest_table, dest_column in cursor.fetchall()]

    def extract_date(self, date_part, date_field):
        return fn.EXTRACT(Clause(R(date_part), R('FROM'), date_field))

    def truncate_date(self, date_part, date_field):
        return fn.DATE_FORMAT(date_field, MYSQL_DATE_TRUNC_MAPPING[date_part])

    def default_insert_clause(self, model_class):
        return Clause(
            EnclosedClause(model_class._meta.primary_key),
            SQL('VALUES (DEFAULT)'))


class _callable_context_manager(object):
    def __call__(self, fn):
        @wraps(fn)
        def inner(*args, **kwargs):
            with self:
                return fn(*args, **kwargs)
        return inner

class ExecutionContext(_callable_context_manager):
    def __init__(self, database, with_transaction=True):
        self.database = database
        self.with_transaction = with_transaction
        self.connection = None

    def __enter__(self):
        with self.database._conn_lock:
            self.database.push_execution_context(self)
            self.connection = self.database._connect(
                self.database.database,
                **self.database.connect_kwargs)
            if self.with_transaction:
                self.txn = self.database.transaction()
                self.txn.__enter__()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        with self.database._conn_lock:
            if self.connection is None:
                self.database.pop_execution_context()
            else:
                try:
                    if self.with_transaction:
                        if not exc_type:
                            self.txn.commit(False)
                        self.txn.__exit__(exc_type, exc_val, exc_tb)
                finally:
                    self.database.pop_execution_context()
                    self.database._close(self.connection)

class Using(ExecutionContext):
    def __init__(self, database, models, with_transaction=True):
        super(Using, self).__init__(database, with_transaction)
        self.models = models

    def __enter__(self):
        self._orig = []
        for model in self.models:
            self._orig.append(model._meta.database)
            model._meta.database = self.database
        return super(Using, self).__enter__()

    def __exit__(self, exc_type, exc_val, exc_tb):
        super(Using, self).__exit__(exc_type, exc_val, exc_tb)
        for i, model in enumerate(self.models):
            model._meta.database = self._orig[i]

class _atomic(_callable_context_manager):
    def __init__(self, db):
        self.db = db

    def __enter__(self):
        if self.db.transaction_depth() == 0:
            self._helper = self.db.transaction()
        else:
            self._helper = self.db.savepoint()
        return self._helper.__enter__()

    def __exit__(self, exc_type, exc_val, exc_tb):
        return self._helper.__exit__(exc_type, exc_val, exc_tb)

class transaction(_callable_context_manager):
    def __init__(self, db):
        self.db = db

    def _begin(self):
        self.db.begin()

    def commit(self, begin=True):
        self.db.commit()
        if begin:
            self._begin()

    def rollback(self, begin=True):
        self.db.rollback()
        if begin:
            self._begin()

    def __enter__(self):
        self._orig = self.db.get_autocommit()
        self.db.set_autocommit(False)
        if self.db.transaction_depth() == 0:
            self._begin()
        self.db.push_transaction(self)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        try:
            if exc_type:
                self.rollback(False)
            elif self.db.transaction_depth() == 1:
                try:
                    self.commit(False)
                except:
                    self.rollback(False)
                    raise
        finally:
            self.db.set_autocommit(self._orig)
            self.db.pop_transaction()

class savepoint(_callable_context_manager):
    def __init__(self, db, sid=None):
        self.db = db
        _compiler = db.compiler()
        self.sid = sid or 's' + uuid.uuid4().hex
        self.quoted_sid = _compiler.quote(self.sid)

    def _execute(self, query):
        self.db.execute_sql(query, require_commit=False)

    def commit(self):
        self._execute('RELEASE SAVEPOINT %s;' % self.quoted_sid)

    def rollback(self):
        self._execute('ROLLBACK TO SAVEPOINT %s;' % self.quoted_sid)

    def __enter__(self):
        self._orig_autocommit = self.db.get_autocommit()
        self.db.set_autocommit(False)
        self._execute('SAVEPOINT %s;' % self.quoted_sid)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        try:
            if exc_type:
                self.rollback()
            else:
                try:
                    self.commit()
                except:
                    self.rollback()
                    raise
        finally:
            self.db.set_autocommit(self._orig_autocommit)

class savepoint_sqlite(savepoint):
    def __enter__(self):
        conn = self.db.get_conn()
        # For sqlite, the connection's isolation_level *must* be set to None.
        # The act of setting it, though, will break any existing savepoints,
        # so only write to it if necessary.
        if conn.isolation_level is not None:
            self._orig_isolation_level = conn.isolation_level
            conn.isolation_level = None
        else:
            self._orig_isolation_level = None
        return super(savepoint_sqlite, self).__enter__()

    def __exit__(self, exc_type, exc_val, exc_tb):
        try:
            return super(savepoint_sqlite, self).__exit__(
                exc_type, exc_val, exc_tb)
        finally:
            if self._orig_isolation_level is not None:
                self.db.get_conn().isolation_level = self._orig_isolation_level

class FieldProxy(Field):
    def __init__(self, alias, field_instance):
        self._model_alias = alias
        self.model = self._model_alias.model_class
        self.field_instance = field_instance

    def clone_base(self):
        return FieldProxy(self._model_alias, self.field_instance)

    def coerce(self, value):
        return self.field_instance.coerce(value)

    def python_value(self, value):
        return self.field_instance.python_value(value)

    def db_value(self, value):
        return self.field_instance.db_value(value)

    def __getattr__(self, attr):
        if attr == 'model_class':
            return self._model_alias
        return getattr(self.field_instance, attr)

class ModelAlias(object):
    def __init__(self, model_class):
        self.__dict__['model_class'] = model_class

    def __getattr__(self, attr):
        model_attr = getattr(self.model_class, attr)
        if isinstance(model_attr, Field):
            return FieldProxy(self, model_attr)
        return model_attr

    def __setattr__(self, attr, value):
        raise AttributeError('Cannot set attributes on ModelAlias instances')

    def get_proxy_fields(self):
        return [
            FieldProxy(self, f) for f in self.model_class._meta.get_fields()]

    def select(self, *selection):
        if not selection:
            selection = self.get_proxy_fields()
        query = SelectQuery(self, *selection)
        if self._meta.order_by:
            query = query.order_by(*self._meta.order_by)
        return query

    def __call__(self, **kwargs):
        return self.model_class(**kwargs)


class DoesNotExist(Exception): pass

if sqlite3:
    default_database = SqliteDatabase('peewee.db')
else:
    default_database = None

class ModelOptions(object):
    def __init__(self, cls, database=None, db_table=None, db_table_func=None,
                 indexes=None, order_by=None, primary_key=None,
                 table_alias=None, constraints=None, schema=None,
                 validate_backrefs=True, **kwargs):
        self.model_class = cls
        self.name = cls.__name__.lower()
        self.fields = {}
        self.columns = {}
        self.defaults = {}
        self._default_by_name = {}
        self._default_dict = {}
        self._default_callables = {}

        self.database = database or default_database
        self.db_table = db_table
        self.db_table_func = db_table_func
        self.indexes = list(indexes or [])
        self.order_by = order_by
        self.primary_key = primary_key
        self.table_alias = table_alias
        self.constraints = constraints
        self.schema = schema
        self.validate_backrefs = validate_backrefs

        self.auto_increment = None
        self.composite_key = False
        self.rel = {}
        self.reverse_rel = {}

        for key, value in kwargs.items():
            setattr(self, key, value)
        self._additional_keys = set(kwargs.keys())

        if self.db_table_func and not self.db_table:
            self.db_table = self.db_table_func(cls)

    def prepared(self):
        for field in self.fields.values():
            if field.default is not None:
                self.defaults[field] = field.default
                if callable(field.default):
                    self._default_callables[field] = field.default
                else:
                    self._default_dict[field] = field.default
                    self._default_by_name[field.name] = field.default

        if self.order_by:
            norm_order_by = []
            for item in self.order_by:
                if isinstance(item, Field):
                    prefix = '-' if item._ordering == 'DESC' else ''
                    item = prefix + item.name
                field = self.fields[item.lstrip('-')]
                if item.startswith('-'):
                    norm_order_by.append(field.desc())
                else:
                    norm_order_by.append(field.asc())
            self.order_by = norm_order_by

    def get_default_dict(self):
        dd = self._default_by_name.copy()
        if self._default_callables:
            for field, default in self._default_callables.items():
                dd[field.name] = default()
        return dd

    def get_sorted_fields(self):
        key = lambda i: i[1]._sort_key
        return sorted(self.fields.items(), key=key)

    def get_field_names(self):
        return [f[0] for f in self.get_sorted_fields()]

    def get_fields(self):
        return [f[1] for f in self.get_sorted_fields()]

    def get_field_index(self, field):
        for i, (field_name, field_obj) in enumerate(self.get_sorted_fields()):
            if field_name == field.name:
                return i
        return -1

    def get_primary_key_fields(self):
        if self.composite_key:
            return [
                self.fields[field_name]
                for field_name in self.primary_key.field_names]
        return [self.primary_key]

    def rel_for_model(self, model, field_obj=None):
        is_field = isinstance(field_obj, Field)
        is_node = not is_field and isinstance(field_obj, Node)
        for field in self.get_fields():
            if isinstance(field, ForeignKeyField) and field.rel_model == model:
                is_match = (
                    (field_obj is None) or
                    (is_field and field_obj.name == field.name) or
                    (is_node and field_obj._alias == field.name))
                if is_match:
                    return field

    def reverse_rel_for_model(self, model, field_obj=None):
        return model._meta.rel_for_model(self.model_class, field_obj)

    def rel_exists(self, model):
        return self.rel_for_model(model) or self.reverse_rel_for_model(model)

    def related_models(self, backrefs=False):
        models = []
        stack = [self.model_class]
        while stack:
            model = stack.pop()
            if model in models:
                continue
            models.append(model)
            for fk in model._meta.rel.values():
                stack.append(fk.rel_model)
            if backrefs:
                for fk in model._meta.reverse_rel.values():
                    stack.append(fk.model_class)
        return models


class BaseModel(type):
    inheritable = set([
        'constraints', 'database', 'db_table_func', 'indexes', 'order_by',
        'primary_key', 'schema', 'validate_backrefs'])

    def __new__(cls, name, bases, attrs):
        if not bases:
            return super(BaseModel, cls).__new__(cls, name, bases, attrs)

        meta_options = {}
        meta = attrs.pop('Meta', None)
        if meta:
            for k, v in meta.__dict__.items():
                if not k.startswith('_'):
                    meta_options[k] = v

        model_pk = getattr(meta, 'primary_key', None)
        parent_pk = None

        # inherit any field descriptors by deep copying the underlying field
        # into the attrs of the new model, additionally see if the bases define
        # inheritable model options and swipe them
        for b in bases:
            if not hasattr(b, '_meta'):
                continue

            base_meta = getattr(b, '_meta')
            if parent_pk is None:
                parent_pk = deepcopy(base_meta.primary_key)
            all_inheritable = cls.inheritable | base_meta._additional_keys
            for (k, v) in base_meta.__dict__.items():
                if k in all_inheritable and k not in meta_options:
                    meta_options[k] = v

            for (k, v) in b.__dict__.items():
                if k in attrs:
                    continue
                if isinstance(v, FieldDescriptor):
                    if not v.field.primary_key:
                        attrs[k] = deepcopy(v.field)

        # initialize the new class and set the magic attributes
        cls = super(BaseModel, cls).__new__(cls, name, bases, attrs)
        cls._meta = ModelOptions(cls, **meta_options)
        cls._data = None
        cls._meta.indexes = list(cls._meta.indexes)

        if not cls._meta.db_table:
            cls._meta.db_table = re.sub('[^\w]+', '_', cls.__name__.lower())

        # replace fields with field descriptors, calling the add_to_class hook
        fields = []
        for name, attr in cls.__dict__.items():
            if isinstance(attr, Field):
                if attr.primary_key and model_pk:
                    raise ValueError('primary key is overdetermined.')
                elif attr.primary_key:
                    model_pk, pk_name = attr, name
                else:
                    fields.append((attr, name))

        composite_key = False
        if model_pk is None:
            if parent_pk:
                model_pk, pk_name = parent_pk, parent_pk.name
            else:
                model_pk, pk_name = PrimaryKeyField(primary_key=True), 'id'
        elif isinstance(model_pk, CompositeKey):
            pk_name = '_composite_key'
            composite_key = True

        if model_pk is not False:
            model_pk.add_to_class(cls, pk_name)
            cls._meta.primary_key = model_pk
            cls._meta.auto_increment = (
                isinstance(model_pk, PrimaryKeyField) or
                bool(model_pk.sequence))
            cls._meta.composite_key = composite_key

        for field, name in fields:
            field.add_to_class(cls, name)

        # create a repr and error class before finalizing
        if hasattr(cls, '__unicode__'):
            setattr(cls, '__repr__', lambda self: '<%s: %r>' % (
                cls.__name__, self.__unicode__()))

        exc_name = '%sDoesNotExist' % cls.__name__
        exception_class = type(exc_name, (DoesNotExist,), {})
        cls.DoesNotExist = exception_class
        cls._meta.prepared()

        return cls

    def __iter__(self):
        return iter(self.select())

    def add_to_class(cls, name, value):
        setattr(cls, name, value)


class Model(with_metaclass(BaseModel)):
    def __init__(self, *args, **kwargs):
        self._data = self._meta.get_default_dict()
        self._dirty = set()
        self._obj_cache = {}

        for k, v in kwargs.items():
            try:
                setattr(self, k, v)
            except Exception as e:
                raise Exception(str(k) + '--' + str(v))

    @classmethod
    def alias(cls):
        return ModelAlias(cls)

    @classmethod
    def select(cls, *selection):
        query = SelectQuery(cls, *selection)
        if cls._meta.order_by:
            query = query.order_by(*cls._meta.order_by)
        return query

    @classmethod
    def update(cls, **update):
        fdict = dict((cls._meta.fields[f], v) for f, v in update.items())
        return UpdateQuery(cls, fdict)

    @classmethod
    def insert(cls, **insert):
        return InsertQuery(cls, insert)

    @classmethod
    def insert_many(cls, rows):
        return InsertQuery(cls, rows=rows)

    @classmethod
    def insert_from(cls, fields, query):
        return InsertQuery(cls, fields=fields, query=query)

    @classmethod
    def delete(cls):
        return DeleteQuery(cls)

    @classmethod
    def raw(cls, sql, *params):
        return RawQuery(cls, sql, *params)

    @classmethod
    def create(cls, **query):
        inst = cls(**query)
        inst.save(force_insert=True)
        inst._prepare_instance()
        return inst

    @classmethod
    def get(cls, *query, **kwargs):
        sq = cls.select().naive()
        if query:
            sq = sq.where(*query)
        if kwargs:
            sq = sq.filter(**kwargs)
        return sq.get()

    @classmethod
    def get_or_create(cls, **kwargs):
        defaults = kwargs.pop('defaults', {})
        sq = cls.select().filter(**kwargs)
        try:
            return sq.get(), False
        except cls.DoesNotExist:
            try:
                params = dict((k, v) for k, v in kwargs.items()
                              if '__' not in k)
                params.update(defaults)
                with cls._meta.database.atomic():
                    return cls.create(**params), True
            except IntegrityError as exc:
                try:
                    return sq.get(), False
                except cls.DoesNotExist:
                    raise exc

    @classmethod
    def create_or_get(cls, **kwargs):
        try:
            with cls._meta.database.atomic():
                return cls.create(**kwargs), True
        except IntegrityError:
            query = []  # TODO: multi-column unique constraints.
            for field_name, value in kwargs.items():
                field = cls._meta.fields[field_name]
                if field.unique or field.primary_key:
                    query.append(field == value)
            return cls.get(*query), False

    @classmethod
    def filter(cls, *dq, **query):
        return cls.select().filter(*dq, **query)

    @classmethod
    def table_exists(cls):
        kwargs = {}
        if cls._meta.schema:
            kwargs['schema'] = cls._meta.schema
        return cls._meta.db_table in cls._meta.database.get_tables(**kwargs)

    @classmethod
    def create_table(cls, fail_silently=False):
        if fail_silently and cls.table_exists():
            return

        db = cls._meta.database
        pk = cls._meta.primary_key
        if db.sequences and pk.sequence:
            if not db.sequence_exists(pk.sequence):
                db.create_sequence(pk.sequence)

        db.create_table(cls)
        cls._create_indexes()

    @classmethod
    def _fields_to_index(cls):
        fields = []
        for field in cls._meta.fields.values():
            if field.primary_key:
                continue
            requires_index = any((
                field.index,
                field.unique,
                isinstance(field, ForeignKeyField)))
            if requires_index:
                fields.append(field)
        return fields

    @classmethod
    def _create_indexes(cls):
        db = cls._meta.database
        for field in cls._fields_to_index():
            db.create_index(cls, [field], field.unique)

        if cls._meta.indexes:
            for fields, unique in cls._meta.indexes:
                db.create_index(cls, fields, unique)

    @classmethod
    def get_all(cls):
        return cls.select()

    @classmethod
    def sqlall(cls):
        queries = []
        compiler = cls._meta.database.compiler()
        pk = cls._meta.primary_key
        if cls._meta.database.sequences and pk.sequence:
            queries.append(compiler.create_sequence(pk.sequence))
        queries.append(compiler.create_table(cls))
        for field in cls._fields_to_index():
            queries.append(compiler.create_index(cls, [field], field.unique))
        if cls._meta.indexes:
            for field_names, unique in cls._meta.indexes:
                fields = [cls._meta.fields[f] for f in field_names]
                queries.append(compiler.create_index(cls, fields, unique))
        return [sql for sql, _ in queries]

    @classmethod
    def drop_table(cls, fail_silently=False, cascade=False):
        cls._meta.database.drop_table(cls, fail_silently, cascade)

    @classmethod
    def as_entity(cls):
        if cls._meta.schema:
            return Entity(cls._meta.schema, cls._meta.db_table)
        return Entity(cls._meta.db_table)

    def _get_pk_value(self):
        return getattr(self, self._meta.primary_key.name)
    get_id = _get_pk_value  # Backwards-compatibility.

    def _set_pk_value(self, value):
        if not self._meta.composite_key:
            setattr(self, self._meta.primary_key.name, value)
    set_id = _set_pk_value  # Backwards-compatibility.

    def _pk_expr(self):
        return self._meta.primary_key == self._get_pk_value()

    def _prepare_instance(self):
        self._dirty.clear()
        self.prepared()

    def prepared(self):
        pass

    def _prune_fields(self, field_dict, only):
        new_data = {}
        for field in only:
            if field.name in field_dict:
                new_data[field.name] = field_dict[field.name]
        return new_data

    def _populate_unsaved_relations(self, field_dict):
        for key in self._meta.rel:
            conditions = (
                key in self._dirty and
                key in field_dict and
                field_dict[key] is None and
                self._obj_cache.get(key) is not None)
            if conditions:
                setattr(self, key, getattr(self, key))
                field_dict[key] = self._data[key]

    def save(self, force_insert=False, only=None):
        field_dict = dict(self._data)
        pk_field = self._meta.primary_key
        pk_value = self._get_pk_value()
        if only:
            field_dict = self._prune_fields(field_dict, only)
        self._populate_unsaved_relations(field_dict)
        if pk_value is not None and not force_insert:
            if self._meta.composite_key:
                for pk_part_name in pk_field.field_names:
                    field_dict.pop(pk_part_name, None)
            else:
                field_dict.pop(pk_field.name, None)
            rows = self.update(**field_dict).where(self._pk_expr()).execute()
        else:
            pk_from_cursor = self.insert(**field_dict).execute()
            if pk_from_cursor is not None:
                pk_value = pk_from_cursor
            self._set_pk_value(pk_value)
            rows = 1
        self._dirty.clear()
        return rows

    def is_dirty(self):
        return bool(self._dirty)

    @property
    def dirty_fields(self):
        return [f for f in self._meta.get_fields() if f.name in self._dirty]

    def dependencies(self, search_nullable=False):
        model_class = type(self)
        query = self.select().where(self._pk_expr())
        stack = [(type(self), query)]
        seen = set()

        while stack:
            klass, query = stack.pop()
            if klass in seen:
                continue
            seen.add(klass)
            for rel_name, fk in klass._meta.reverse_rel.items():
                rel_model = fk.model_class
                if fk.rel_model is model_class:
                    node = (fk == self._data[fk.to_field.name])
                    subquery = rel_model.select().where(node)
                else:
                    node = fk << query
                    subquery = rel_model.select().where(node)
                if not fk.null or search_nullable:
                    stack.append((rel_model, subquery))
                yield (node, fk)

    def delete_instance(self, recursive=False, delete_nullable=False):
        if recursive:
            dependencies = self.dependencies(delete_nullable)
            for query, fk in reversed(list(dependencies)):
                model = fk.model_class
                if fk.null and not delete_nullable:
                    model.update(**{fk.name: None}).where(query).execute()
                else:
                    model.delete().where(query).execute()
        return self.delete().where(self._pk_expr()).execute()

    def __eq__(self, other):
        return (
            other.__class__ == self.__class__ and
            self._get_pk_value() is not None and
            other._get_pk_value() == self._get_pk_value())

    def __ne__(self, other):
        return not self == other


def prefetch_add_subquery(sq, subqueries):
    fixed_queries = [PrefetchResult(sq)]
    for i, subquery in enumerate(subqueries):
        if not isinstance(subquery, Query) and issubclass(subquery, Model):
            subquery = subquery.select()
        subquery_model = subquery.model_class
        fkf = backref = None
        for j in reversed(range(i + 1)):
            last_query = fixed_queries[j][0]
            last_model = last_query.model_class
            foreign_key = subquery_model._meta.rel_for_model(last_model)
            if foreign_key:
                fkf = getattr(subquery_model, foreign_key.name)
                to_field = getattr(last_model, foreign_key.to_field.name)
            else:
                backref = last_model._meta.rel_for_model(subquery_model)

            if fkf or backref:
                break

        if not (fkf or backref):
            raise AttributeError('Error: unable to find foreign key for '
                                 'query: %s' % subquery)

        if fkf:
            inner_query = last_query.select(to_field)
            fixed_queries.append(
                PrefetchResult(subquery.where(fkf << inner_query), fkf, False))
        elif backref:
            q = subquery.where(backref.to_field << last_query.select(backref))
            fixed_queries.append(PrefetchResult(q, backref, True))

    return fixed_queries

__prefetched = namedtuple('__prefetched', (
    'query', 'field', 'backref', 'rel_model', 'foreign_key_attr', 'model'))

class PrefetchResult(__prefetched):
    def __new__(cls, query, field=None, backref=None, rel_model=None,
                foreign_key_attr=None, model=None):
        if field:
            if backref:
                rel_model = field.model_class
                foreign_key_attr = field.to_field.name
            else:
                rel_model = field.rel_model
                foreign_key_attr = field.name
        model = query.model_class
        return super(PrefetchResult, cls).__new__(
            cls, query, field, backref, rel_model, foreign_key_attr, model)

    def populate_instance(self, instance, id_map):
        if self.backref:
            identifier = instance._data[self.field.name]
            if identifier in id_map:
                setattr(instance, self.field.name, id_map[identifier])
        else:
            identifier = instance._data[self.field.to_field.name]
            rel_instances = id_map.get(identifier, [])
            attname = self.foreign_key_attr
            dest = '%s_prefetch' % self.field.related_name
            for inst in rel_instances:
                setattr(inst, attname, instance)
            setattr(instance, dest, rel_instances)

    def store_instance(self, instance, id_map):
        identity = self.field.to_field.python_value(
            instance._data[self.foreign_key_attr])
        if self.backref:
            id_map[identity] = instance
        else:
            id_map.setdefault(identity, [])
            id_map[identity].append(instance)


def prefetch(sq, *subqueries):
    if not subqueries:
        return sq
    fixed_queries = prefetch_add_subquery(sq, subqueries)

    deps = {}
    rel_map = {}
    for prefetch_result in reversed(fixed_queries):
        query_model = prefetch_result.model
        if prefetch_result.field:
            rel_map.setdefault(prefetch_result.rel_model, [])
            rel_map[prefetch_result.rel_model].append(prefetch_result)

        deps[query_model] = {}
        id_map = deps[query_model]
        has_relations = bool(rel_map.get(query_model))

        for instance in prefetch_result.query:
            if prefetch_result.field:
                prefetch_result.store_instance(instance, id_map)

            if has_relations:
                for rel in rel_map[query_model]:
                    rel.populate_instance(instance, deps[rel.model])

    return prefetch_result.query

def create_model_tables(models, **create_table_kwargs):
    """Create tables for all given models (in the right order)."""
    for m in sort_models_topologically(models):
        m.create_table(**create_table_kwargs)

def drop_model_tables(models, **drop_table_kwargs):
    """Drop tables for all given models (in the right order)."""
    for m in reversed(sort_models_topologically(models)):
        m.drop_table(**drop_table_kwargs)

def sort_models_topologically(models):
    """Sort models topologically so that parents will precede children."""
    models = set(models)
    seen = set()
    ordering = []
    def dfs(model):
        if model in models and model not in seen:
            seen.add(model)
            for foreign_key in model._meta.reverse_rel.values():
                dfs(foreign_key.model_class)
            ordering.append(model)  # parent will follow descendants
    # order models by name and table initially to guarantee a total ordering
    names = lambda m: (m._meta.name, m._meta.db_table)
    for m in sorted(models, key=names, reverse=True):
        dfs(m)
    return list(reversed(ordering))  # want parents first in output ordering
]]>
		</Library>
		<Library Name="prosuite_orm">
<![CDATA["""
ProSuite ORM Base Classes
"""

import os

from ext_peewee import CharField, Model, SqliteDatabase
from uuid import uuid4

from prosuite_logging import app_logger as root_logger
from prosuite_settings import settings

################################
#
# Helper functions
#
################################
def generate_uuid():
    """
    Return UUID string
    """
    return uuid4().hex


################################
#
# Custom Fields
#
################################
class UUIDField(CharField):
    """
    Class represents UUID field
    """
    def __init__(self, *args, **kwargs):
        super(UUIDField, self).__init__(
            default=generate_uuid,
            max_length=32,
            unique=True,
            index=True,
            *args, **kwargs
        )


def EnumField(enum_obj, base_field):
    """
    Create DB Field for Enum based on basic field
    """
    class _Enum(base_field):

        def db_value(self, value):
            return value.value

        def python_value(self, value):
            return enum_obj(value)

    return _Enum


################################
#
# Custom SQlite Database class
#
################################
class SqliteFKDatabase(SqliteDatabase):
    """
    Allow to use Foreign keys in database
    """
    foreign_keys = True
    logger = root_logger.getChild("Databases")

    def init(self, database, **connect_kwargs):
        database = os.path.join(
            application.storage.abs_path(settings.databases["path"]),
            database
        )

        database_dir = os.path.dirname(database)
        try:
            os.stat(database_dir)
        except Exception as ex:
            os.makedirs(database_dir)

        super(SqliteFKDatabase, self).init(database, **connect_kwargs)

    def initialize_connection(self, conn):
        self.execute_sql("PRAGMA foreign_keys=ON;")


################################
#
# Models
#
################################
class ProSuiteBaseModel(Model):

    _uuid = UUIDField(db_column="uuid")

    @property
    def uuid(self):
        return self._uuid

    @classmethod
    def get_by_uuid(cls, uuid):
        """
        Get object by UUID
        """
        try:
            return cls.get(cls._uuid == uuid)

        except cls.DoesNotExist:
            return None
]]>
		</Library>
		<Library Name="api_error_code">
<![CDATA[error_code = {
	"errScriptError"	: (0,"Script Error"),
	"errBadJSONFormat"  : (1,"Bad JSON format"),
	"errNotLoggedIn"	: (2,"You are not logged in"),
	"errBadObjectFormat": (3,"Bad Object Format"),
	"errObjNotExists"	: (4,"Object doesn't exists"),
	"errNotNeededRules"	: (5,"You have not needed rules"),
	"errEmptyPassword"  : (6,"Empty login or password"),
	"errLoginError"		: (7,"Invalid login or password"),
	"errFolderAlreadyExist"  : (8,"Folder with same name already exist"),
	"errCouldNotDeleteRootDir" : (9,"You could not delete the ROOT directory"),
	"errCouldNotRenameRootDir" : (10,"You could not rename the ROOT directory"),
	"errB64DecodeError" : (11,"Error during B64 data decoding" ),
	"errOperationFinishWithError" : ( 12, "Operation finished with error" ),
}

]]>
		</Library>
		<Library Name="promail_orm">
<![CDATA["""
ProMail Models
"""
import colorsys
import json
import random
import re
import struct
import time

from ext_peewee import *
from ext_enum import Enum

from promail_database import database
from promail_tasks import tasks, logger as tasks_logger
from prosuite_orm import (
    EnumField,
    ProSuiteBaseModel,
    UUIDField,
)


pop3_logger = tasks_logger.getChild("POP3_Task")

################################
#
# Global constants
#
################################

RE_HEX_COLOR = re.compile(r'^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')


################################
#
# Helper functions
#
################################

def get_proper_text_color(color):
    """
    Get proper text color - white or black
    """
    if len(color) == 3:
        color = "".join([char * 2 for char in color])

    rgb = struct.unpack('BBB', color.decode('hex'))
    hls = colorsys.rgb_to_hls(rgb[0], rgb[1], rgb[2])
    return "000000" if hls[1] >= 175 else "FFFFFF"


def generate_hex_color():
    """
    Get random HEX color
    """
    return "%06x" % random.randint(0, 0xFFFFFF)


def is_list(data):
    """
    Check is data list or tuple
    """
    return isinstance(data, (tuple, list))


################################
#
# Proxy objects
#
################################

MailboxProxy = Proxy()
ArchiveProxy = Proxy()
MessageProxy = Proxy()


################################
#
# Exceptions
#
################################

class ClsDocError(Exception):
    """Exception message will be show from class docstring"""
    def __init__(self):
        super(ClsDocError, self).__init__(self.__doc__)


class MailboxError(ClsDocError):
    """Basic exception class for mailbox related exceptions"""

class MailboxInvalidConnectionError(MailboxError):
    """Invalid object was passed to 'mailbox.connection', must be Connectivity instance or None"""

class MailboxEmptyPropertiesError(MailboxError):
    """Not all required properties were filled. Required for real mailbox - name, login, connection. For virtual mailbox - name"""


class ArchiveError(ClsDocError):
    """Basic exception class for archive related exceptions"""


class InvalidColorValueError(ClsDocError):
    """Invalid color. Must be in HEX format like FED or FFAA00"""



################################
#
# Models
#
################################

class BaseModel(ProSuiteBaseModel):

    class Meta:
        database = database

    _is_deleted = BooleanField(default=False, db_column="deleted")

    def is_deleted(self):
        return self._is_deleted

    def remove(self, full=False):
        """
        Mark instance as deleted if not @full else delete all
        """
        if not full:
            self._is_deleted = True
            self.save()

        else:
            self.delete_instance()

    @classmethod
    def get_select(cls):
        return cls.select()

    @classmethod
    def get_all(cls, uuid=None):
        """
        Get all objects
        """
        query = cls.get_select()
        if uuid is not None:
            query = query.where((cls._uuid << uuid) if is_list(uuid) else (cls._uuid == uuid))

        return query

    @classmethod
    def get_available(cls, uuid=None):
        """
        Get not deleted objects
        """
        return cls.get_all(uuid).where(cls._is_deleted == False)


class Connectivity(BaseModel):

    class CONNECTION_E(Enum):
        NONE = 'none'
        POP3 = 'pop3'
        SMTP = 'smtp'
        IMAP = 'imap'


    class SECURITY_E(Enum):
        NONE = 'none'
        # AUTO = 'auto'
        STARTTLS  = 'starttls'
        SSL  = 'ssl'


    class ConnectionSettings(object):

        __slots__ = ("_obj", "_prefix")

        ATTRS = ("ctype", "host", "login", "passwd", "port", "secure")

        def __init__(self, obj, prefix):
            object.__setattr__(self, "_obj", obj)
            object.__setattr__(self, "_prefix", prefix)

        def __getattr__(self, key):
            if key not in self.ATTRS:
                raise AttributeError(key)

            return getattr(self._obj, "%s_%s" % (self._prefix, key))


    _is_enabled = BooleanField(default=False, db_column="enabled")
    _in_ctype = EnumField(CONNECTION_E, CharField)(max_length=5, default=CONNECTION_E.NONE, db_column="in_ctype")
    _out_ctype = EnumField(CONNECTION_E, CharField)(max_length=5, default=CONNECTION_E.NONE, db_column="out_ctype")
    name = CharField()
    in_host = CharField()
    in_login = CharField(default='')
    in_passwd = CharField(default='')
    in_port = IntegerField()
    in_secure = EnumField(SECURITY_E, CharField)(max_length=5, default=SECURITY_E.NONE)
    out_host = CharField()
    out_login = CharField(default='')
    out_passwd = CharField(default='')
    out_port = IntegerField()
    out_secure = EnumField(SECURITY_E, CharField)(max_length=5, default=SECURITY_E.NONE)


    def __init__(self, *args, **kwargs):
        super(Connectivity, self).__init__(*args, **kwargs)
        self._incoming = self.ConnectionSettings(self, "in")
        self._outgoing = self.ConnectionSettings(self, "out")

    @property
    def incoming(self):
        return self._incoming

    @property
    def outgoing(self):
        return self._outgoing

    def is_enabled(self):
        return self._is_enabled

    @property
    def in_ctype(self):
        return self._in_ctype

    @property
    def out_ctype(self):
        return self._out_ctype

    def setup_incoming(self, host, port, secure=SECURITY_E.NONE, login="", passwd="", ctype=CONNECTION_E.NONE):
        self._in_ctype = ctype
        self.in_host = host
        self.in_port = port
        self.in_login = login
        self.in_passwd = passwd
        self.in_secure = secure

    def setup_outgoing(self, host, port, secure=SECURITY_E.NONE, login="", passwd="", ctype=CONNECTION_E.NONE):
        self._out_ctype = ctype
        self.out_host = host
        self.out_port = port
        self.out_login = login
        self.out_passwd = passwd
        self.out_secure = secure

    def setup_pop3(self, *args, **kwargs):
        """
        Setup POP3 connection settings
        """
        kwargs['ctype'] = self.CONNECTION_E.POP3
        self.setup_incoming(*args, **kwargs)

    def setup_smtp(self, *args, **kwargs):
        """
        Setup SMTP connection settings
        """
        kwargs['ctype'] = self.CONNECTION_E.SMTP
        self.setup_outgoing(*args, **kwargs)

    def enable(self):
        """
        Make Connectivity settings available for use
        """
        self._is_enabled = True
        self.save()

    def disable(self):
        """
        Make Connectivity settings unavailable for use
        """
        self._is_enabled = False
        self.save()

    def to_json(self):
        return {
            "name": self.name,
            "uuid": self.uuid,
            "enabled": self.is_enabled(),

            "in": {
                "host": self.in_host,
                "port": self.in_port,
                "login": self.in_login,
                "passwd": self.in_passwd,
                "type": self.in_ctype.value,
                "secure": self.in_secure.value,
            },

            "out": {
                "host": self.out_host,
                "port": self.out_port,
                "login": self.out_login,
                "passwd": self.out_passwd,
                "type": self.out_ctype.value,
                "secure": self.out_secure.value,
            }
        }

    @classmethod
    def get_select(cls):
        return cls.select()

    @classmethod
    def get_available(cls, disabled=False, sort=False, *args, **kwargs):
        query = super(Connectivity, cls).get_available(*args, **kwargs)
        if not disabled:
            query = query.where(cls._is_enabled == True)

        if sort:
            query = query.order_by(cls.name)

        return query


class Label(BaseModel):

    name = CharField(max_length=64)
    _color = CharField(default=generate_hex_color, db_column="color")
    _text_color = CharField(max_length=6, db_column="text_color", default="000000")

    @property
    def color(self):
        return self._color

    @color.setter
    def color(self, value):
        if not RE_HEX_COLOR.match(value):
            raise InvalidColorValueError

        self._color = value
        if self._color:
            self._text_color = get_proper_text_color(self._color)

    @property
    def text_color(self):
        return self._text_color

    @property
    def messages(self):
        return self._messages


class Attachment(BaseModel):

    _mailbox = ForeignKeyField(MailboxProxy, on_delete='CASCADE')
    _message = ForeignKeyField(MessageProxy, on_delete='CASCADE')

    name = CharField()
    ftype = CharField()
    charset = CharField()
    desc  = CharField()
    sanitized = CharField()

    @property
    def mailbox(self):
        return self._mailbox

    @property
    def message(self):
        return self._message



class Message(BaseModel):

    _mailbox = ForeignKeyField(MailboxProxy, on_delete='CASCADE')
    _archive = ForeignKeyField(ArchiveProxy, on_delete='CASCADE')
    _labels  = ManyToManyField(Label, related_name="messages")

    uidl = CharField(null=False, index=True)
    subject = TextField(null=True)
    body    = TextField(null=True)
    datetime = DateTimeField(index=True)
    from_email = TextField(index=True)
    to_email = TextField(index=True)
    cc_email = TextField(null=True, index=True)
    priority = CharField(null=True, index=True)
    is_read  = BooleanField(default=False, index=True)
    is_eac   = BooleanField(default=False)
    eac_token = TextField(null=True)
    eac_body  = TextField(null=True)

    @property
    def mailbox(self):
        return self._mailbox

    @property
    def archive(self):
        return self._archive

    @property
    def labels(self):
        return self._labels


class Archive(BaseModel):
    """
    Archives implementation

    General usage:

    >> archive = mailbox.create_archive(name='test archive', color='FFF')

    archive color
    >> archive.color

    archive name
    >> archive.name

    archive type
    >> archive.type

    archive.uuid
    >> archive.uuid

    check archive type
    >> archive.type == archive.TYPE_E.INBOX

    check is deleted or not
    >> archive.is_deleted()

    save changes
    >> archive.save()

    """
    class TYPE_E(Enum):
        INBOX = 'inbox'
        OUTBOX = 'outbox'
        DELETED = 'deleted'
        DRAFT   = 'draft'
        USERDEF = 'userdef'

    _color = CharField(default=generate_hex_color, db_column="color")
    _mailbox = ForeignKeyField(MailboxProxy, on_delete='CASCADE', db_column="mailbox")
    _type = EnumField(TYPE_E, CharField)(max_length=5, default=TYPE_E.USERDEF, db_column="type")
    name = CharField()

    @property
    def color(self):
        return self._color

    @color.setter
    def color(self, value):
        if not RE_HEX_COLOR.match(value):
            raise InvalidColorValueError

        self._color = value

    @property
    def mailbox(self):
        return self._mailbox

    @property
    def type(self):
        return self._type

    def unread_msg_count(self):
        return self.message_set.where(Message.is_read==False).count()




class ArchivesList(object):
    """
    Archives list implementation

    General usage:

    >> archives = mailbox.archives()
    >> archives = mailbox.archives(order=Archive.name.desc())
    >> archives = mailbox.archives(order=Archive.name.asc())

    list of arcvhies
    >> archives.archives

    deleted mails archive
    >> archives.deleted

    find in archives list by UUID
    >> archives.find(uuid='uuid_here')

    find in acrhives list by name
    >> archives.find(name='archive name')

    inbox archive
    >> archives.inbox

    related mailbox
    >> archives.mailbox

    outbox archive
    >> archives.outbox

    archives created by user
    >> archives.userdefined

    slicing
    >> archives[1:3:2]

    index access
    >> archives[1]

    """
    __slots__ = (
        "_archives",
        "_archives_map",
        "_archives_set",
        "_mailbox",
    )

    def __init__(self, mailbox, archives_set):
        self._archives = None
        self._archives_map = None
        self._archives_set = archives_set
        self._mailbox = mailbox

    def __getitem__(self, key):
        return self.archives[key]

    def __iter__(self):
        for archive in self.archives:
            yield archive

    def _generate_archives(self):
        archives = []
        for archive in self._archives_set:
            archive._mailbox = self._mailbox
            archives.append(archive)

        return archives

    @property
    def archives(self):
        if self._archives is None:
            self._archives = self._generate_archives()

        return self._archives

    @property
    def archives_map(self):
        if self._archives_map is None:
            self._archives_map = {archive.type: archive for archive in self.archives}
            self._archives_map[Archive.TYPE_E.USERDEF] = None

        return self._archives_map

    @property
    def deleted(self):
        return self.archives_map.get(Archive.TYPE_E.DELETED, None)

    def find(self, uuid=None, name=None, lower=False):
        """
        Find archive by UUID or name
        """
        filter_func = (lambda archive: uuid == archive.uuid) if uuid else \
                      (lambda archive: name == archive.name.lower()) if name and lower else \
                      (lambda archive: name == archive.name) if name else \
                      None

        if not filter_func:
            return []

        name = name.lower() if name and lower else name
        return filter(filter_func, self.archives)

    @property
    def inbox(self):
        return self.archives_map.get(Archive.TYPE_E.INBOX, None)

    @property
    def mailbox(self):
        return self._mailbox

    @property
    def outbox(self):
        return self.archives_map.get(Archive.TYPE_E.OUTBOX, None)

    @property
    def draft(self):
        return self.archives_map.get(Archive.TYPE_E.DRAFT, None)

    @property
    def userdefined(self):
        if self.archives_map.get(Archive.TYPE_E.USERDEF, None) is None:
            self.archives_map[Archive.TYPE_E.USERDEF] = \
                [archive for archive in self.archives if archive.type == archive.TYPE_E.USERDEF]

        return self.archives_map[Archive.TYPE_E.USERDEF]


class Mailbox(BaseModel):
    """
    Mailbox implementation

    General usage:

    >> Mailbox.create(  name='test',
                        connection=coonectivity_instance,
                        login='test',
                        passwd='passwd',
                        color='F5F5F5'
                    )

    >> mailbox = Mailbox(  name='test',
                           connection=coonectivity_instance,
                           login='test',
                           passwd='passwd',
                           color='F5F5F5'
                        )

    mailbox color
    >> mailbox.color

    mailbox connection settings to mail server
    >> mailbox.connection

    check is it virtual or not
    >> mailbox.is_virtual()

    mailbox last access via reciever
    >> mailbox.last_reciever_access

    mailbox last access via transmitter
    >> mailbox.last_transmitter_access

    mailbox login
    >> mailbox.login

    mailbox name
    >> mailbox.name

    mailbox password
    >> mailbox.passwd

    mailbox text color
    >> mailbox.text_color

    mailbox uuid
    >> mailbox.uuid

    save changes
    >> mailbox.save()

    """
    _color = CharField(max_length=6, db_column="color", default="FFFFFF")
    _connection = ForeignKeyField(Connectivity, on_delete="SET NULL", null=True, db_column="connection")
    _creator_name = CharField(db_column="creatorname", default='')
    _creator_uuid = CharField(db_column="creatoruuid", default='')
    _is_virtual = BooleanField(default=False, db_column="virtual")
    _last_incoming_access = DoubleField(db_column="rt_access_t", default=0.0)
    _last_outgoing_access = DoubleField(db_column="tr_access_t", default=0.0)
    _task_pop3_uuid = CharField(db_column="pop3taskuuid", default='')
    _task_smtp_uuid = CharField(db_column="smtptaskuuid", default='')
    _text_color = CharField(max_length=6, db_column="text_color", default="000000")

    login = CharField(default='')
    passwd = CharField(default='')
    name = CharField()

    def __create_default_archives(self):
        """
        Create Inbox, Outbox and Deleted archives
        """
        default = {
            Archive.TYPE_E.INBOX: 'inbox',
            Archive.TYPE_E.OUTBOX: 'outbox',
            Archive.TYPE_E.DELETED: 'deleted',
            Archive.TYPE_E.DRAFT: 'draft',
        }
        with self._meta.database.atomic():
            for archive_type, archive_name in default.items():
                self.create_archive(name=archive_name, _type=archive_type)

    def archives(self, order=None, listcls=ArchivesList):
        """
        Get archives list
        """
        archives = self.archive_set.where(Archive._is_deleted == False)
        if order is not None:
            archives = archives.order_by(order)

        return listcls(self, archives) if listcls else archives

    @property
    def color(self):
        return self._color

    @color.setter
    def color(self, value):
        if not RE_HEX_COLOR.match(value):
            raise InvalidColorValueError

        self._color = value
        if self._color:
            self._text_color = get_proper_text_color(self._color)

    @property
    def connection(self):
        return self._connection

    @connection.setter
    def connection(self, value):
        if value and not isinstance(value, Connectivity):
            raise MailboxInvalidConnectionError

        self._connection = value

    @property
    def creator_name(self):
        return self._creator_name

    @property
    def creator_uuid(self):
        return self._creator_uuid

    def create_archive(self, *args, **kwargs):
        """
        Create archive
        """
        return Archive.create(_mailbox=self, *args, **kwargs)

    def get_archive(self, uuid='', name=''):
        """
        Get archive by name or UUID
        """
        expr = Archive.get_available().where(Archive._mailbox == self)

        if uuid:
            expr = expr.where(Archive._uuid == uuid)

        elif name:
            expr = expr.where(Archive.name == name)

        try:
            return expr.get()
        except Archive.DoesNotExist:
            return None

    def is_new(self):
        return True if self._get_pk_value() is None else False

    def is_virtual(self):
        return self._is_virtual

    @property
    def last_incoming_access(self):
        return self._last_incoming_access

    @property
    def last_outgoing_access(self):
        return self._last_outgoing_access

    def make_real(self, save=True):
        """
        Turn virtual mailbox to real
        """
        self._is_virtual = False
        self._start_pop3_client()
        if save:
            self.save()

    def make_virtual(self, save=True):
        """
        Make mailbox virtual
        """
        self._is_virtual = True
        self._stop_pop3_client()
        if save:
            self.save()

    def save(self, *args, **kwargs):
        """
        Check if all fields filled or not
        """
        # name is required
        if not self.name:
            raise MailboxEmptyPropertiesError

        if not self.is_virtual():
            if not self.login:
                raise MailboxEmptyPropertiesError

        if not self.color:
            self.color = generate_hex_color()

        is_new = self.is_new()

        super(Mailbox, self).save(*args, **kwargs)

        if is_new:
            self.__create_default_archives()

    @property
    def text_color(self):
        return self._text_color

    def touch_incoming_access(self):
        self._last_incoming_access = time.time()
        self.save()
        return self._last_incoming_access

    def touch_outgoing_access(self):
        self._last_outgoing_access = time.time()
        self.save()
        return self._last_outgoing_access

    def unread_msg_count(self):
        return self.message_set.where((Message.is_read==False) & (Message._is_deleted==False)).count()

    def _start_pop3_client(self):
        task = start_pop3_task(self.uuid)
        if not isinstance(task, type(True)):
            pop3_logger.info(u"Client for mailbox[%s ]created", self.uuid)
            self._task_pop3_uuid = task.uuid
        else:
            pop3_logger.info(u"Client for mailbox[%s] exists", self.uuid)

    def _stop_pop3_client(self):
        stop_pop3_task(self.uuid)

    def remove(self, full):
        self._stop_pop3_client()
        super(Mailbox, self).remove(full)

POP3_INTERVAL = 10

@tasks.background_other
def stop_pop3_task(mailbox_uuid):
    mailbox = Mailbox.get(Mailbox._uuid==mailbox_uuid)
    if not mailbox:
        pop3_logger.error(u"Can't find mailbox[%s]", mailbox_uuid)
        return

    if not mailbox._task_pop3_uuid:
        pop3_logger.error(u"POP3 task for mailbox[%s] doesn't exists", mailbox_uuid)
        return

    while not tasks.stop_task(mailbox._task_pop3_uuid):
        time.sleep(5)

    task = tasks.search_task(mailbox._task_pop3_uuid)
    if task:
        task.remove()

    pop3_logger.info(u"POP3 task[%s] for mailbox[%s] deleted", mailbox._task_pop3_uuid, mailbox_uuid)

    mailbox._task_pop3_uuid = ''
    mailbox.save()




@tasks.background_other(unique=True, repeat_every=POP3_INTERVAL, repeat_times=-1)
def start_pop3_task(mailbox_uuid):

    mailbox = Mailbox.get(Mailbox._uuid==mailbox_uuid)
    if not mailbox:
        pop3_logger.error(u"Can't find mailbox[%s]", mailbox_uuid)
        return

    from promail_pop3_client import POP3Client

    client = POP3Client(mailbox)
    client.setup_logger(pop3_logger)
    client.connect()
    client.fetch_mails()
    client.disconnect()





# Initialize proxy objects
MailboxProxy.initialize(Mailbox)
ArchiveProxy.initialize(Archive)
MessageProxy.initialize(Message)

# connect to DB
database.connect()
database.create_tables([Mailbox], safe=True)
database.create_tables([Archive, Connectivity], safe=True)
database.create_tables([Message], safe=True)
database.create_tables([Message._labels.get_through_model()], safe=True)
database.create_tables([Label], safe=True)
database.create_tables([Attachment], safe=True)
database.close()
]]>
		</Library>
		<Library Name="promail_storage">
<![CDATA["""
"""

from prosuite_storage import ProSuiteFileStorage


class ProSuiteFileStorage(ProSuiteFileStorage):

    root = ProSuiteFileStorage.add_child('promail')
]]>
		</Library>
		<Library Name="ProSuiteMacrosWidget">
<![CDATA[import json
from collections import OrderedDict
from class_plugins import Plugins

DEFAULT_MACRO_IMG  = "<img src='/b41299d0-b0bc-4d31-a320-ed5eb62568ca.png'/>"
DEFAULT_PLUGIN_IMG = "<img src='/abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png'/>"
DEFAULT_VDOM_CLASS_ID = "07460cb5-772f-48e1-95ab-be6c07b63f69"

CONFIG_MACRO_NAME = "config"


class ProSuiteMacrosWidget(object):

    def __init__( self ):
        self.pictures = []
        self.buttons = []

    def fetch_data( self, page_name ):

        plugins = Plugins.get_all()

        for plugin in plugins:
            plg_button_added = False

            for macros in plugin.get_macros():

                if macros.is_button_macros == "1" and \
                   macros.page == page_name and \
                   macros.name != CONFIG_MACRO_NAME:

                    if macros.on_board == "1":
                        self.pictures.append( ('/get_image?id=%s' % macros.macros_picture) if macros.macros_picture else "/b41299d0-b0bc-4d31-a320-ed5eb62568ca.png" )
                        self.buttons.append({
                            "guid": "m_" + macros.guid,
                            "data": json.dumps({
                                "name": macros.name,
                                "picture": "<img src='/get_image?id=%s'/>" % macros.macros_picture if macros.macros_picture else DEFAULT_MACRO_IMG
                            }),
                            "position"  : macros.zindex,
                        })

                    elif macros.on_board == "2" and not plg_button_added:
                        plg_button_added = True
                        self.buttons.append({
                            "guid": "p_" + plugin.guid,
                            "data": json.dumps({
                                "name": plugin.name,
                                "picture": "<img src='/get_image?id=%s'/>" % plugin.picture if plugin.picture else DEFAULT_PLUGIN_IMG
                            }),
                            "position": plugin.zindex,
                        })

    def get_data( self ):
        return OrderedDict( [ ( item['guid'], item['data'] ) \
                            for item in sorted( self.buttons, key = lambda k: k['position'] ) ] )


    def set_img( self ):
        from cStringIO import StringIO
        html_buffer = StringIO()
        html_buffer.write( "<div class='img-grid'>" )
        html_buffer.writelines( [ "<img src='%s'/>" % pic_guid for pic_guid in self.pictures[:4] ] )
        html_buffer.write( "</div>" )
        return html_buffer.getvalue()



    def render(self, objectview, img_holder=None, header_button=None, page_name=None):
        self.fetch_data( page_name )
        if self.buttons:
            objectview.vdomclassid = DEFAULT_VDOM_CLASS_ID
            objectview.data = json.dumps( self.get_data() )
            if img_holder:	img_holder.htmlcode = self.set_img()
        else:
            header_button.visible = "0"


CONFIG_MACRO_NAME = "config"
class ProSuiteMacrosDatatableWidget( object ):

    def __init__( self, plugin_guid, page_name = None  ):
        self.page_name 		= page_name
        self.plugin_guid 	= plugin_guid

    def render( self, datatable, dialog ):

        plugin = Plugins.get_by_guid( self.plugin_guid )
        if not plugin:
            raise Exception( "Plugin with GUID={guid} doesn't exists".format( \
                                        guid = self.plugin_guid ) )

        data = []
        for macro in plugin.get_macros():
            if 	macro.on_board == "2" and \
                    macro.is_button_macros == "1" and \
                    macro.page == self.page_name and \
                    macro.name != CONFIG_MACRO_NAME:

                data.append( (
                    macro.guid,
                    "<img src='/get_image?id=%s'/>"%macro.macros_picture if macro.macros_picture else "",
                    macro.name
                ) )

        datatable.data 	= json.dumps( data )
        dialog.title = plugin.name


DEFAULT_MAILCOMPOSER_IMG  = "/94b78792-463f-4dbc-b5b0-377f42700dbd.png"
DEFAULT_MACRO_IMG_1  = "/b41299d0-b0bc-4d31-a320-ed5eb62568ca.png"

MAILCOMPOSER_TMPLT = u"""<div class="mailcomposer">
  <div class="image"><img src="{src}"></img></div>
  <div class="title cut-out-text" title="{name}">{name}</div>
</div>"""

class ProSuiteMailComposerListWidget(object):

    def fetch_data( self ):

        result = OrderedDict()
        result["default"] = MAILCOMPOSER_TMPLT.format(
            src=DEFAULT_MAILCOMPOSER_IMG,
            name="Default"
        )

        plugins = Plugins.get_all()

        for plugin in plugins:
            for macros in plugin.get_macros():

                if macros.is_button_macros == "1" and \
                   macros.on_board == "3" and \
                   macros.name != CONFIG_MACRO_NAME:

                    result[macros.guid] = MAILCOMPOSER_TMPLT.format(
                        src=("/get_image?id=%s" % macros.macros_picture) if macros.macros_picture else DEFAULT_MACRO_IMG_1,
                        name=macros.name
                    )

        return result

    def render(self, vdomlist):
        vdomlist.data = json.dumps(self.fetch_data())

    def set_default_composer(self, image, title):
        title.value = "New mail"
        image.htmlcode = image.htmlcode.format(DEFAULT_MAILCOMPOSER_IMG)
        image.value = ""

    def set_composer(self, macros, image, title):
        title.value = macros.name
        image.htmlcode = image.htmlcode.format(
            ("/get_image?id=%s" % macros.macros_picture) if macros.macros_picture else \
            DEFAULT_MACRO_IMG_1
        )


]]>
		</Library>
		<Library Name="class_custom_event">
<![CDATA[from class_db import Database
from VEE_core import engine
from utils.uuid import uuid4

class CustomEvent:
	def __init__(self):
		self.id 			= None
		self.name 			= None
		self.guid	 		= None
		self.plugin_guid	= None


	def __fill_from_row(self, row):
		self.id 			= row[0]
		self.name 			= row[1]
		self.guid	 		= row[2]
		self.plugin_guid	= row[3]

		return self

	@classmethod
	def get_by_id(self, id):
		db_row = Database.macrosdb().fetch_one(	"""
			SELECT
				custom_event.id,
				custom_event.name,
				custom_event.guid,
				custom_event.plugin_guid
			FROM `custom_event`
			WHERE custom_event.id=?""", (id, ))

		return self().__fill_from_row(db_row) if db_row else None

	@classmethod
	def register_custom_event_by_guid( self, guid ):
		custom_event = self.get_custom_event_by_guid( guid )
		if custom_event: custom_event.register()


	def __internal_name( self ):
		return "{0}:{1}".format( self.plugin_guid, self.name ).encode( "utf-8" ).lower()


	def register( self ):
		pass
		#engine.add_timer( self.__internal_name(), self.period, self.guid )

	def unregister( self ):
		pass
		#engine.delete_timer( self.__internal_name() )

	def update_custom_event( self ):
		pass
		#engine.update_timer( self.__internal_name(), self.period, self.guid )


	@classmethod
	def get_custom_event_by_plugin_guid(self, plugin_guid):
		db_rows = Database.macrosdb().fetch_all(	"""
			SELECT
				custom_event.id,
				custom_event.name,
				custom_event.guid,
				custom_event.plugin_guid
			FROM `custom_event`
			WHERE custom_event.plugin_guid=?""", (plugin_guid, ) )
		return [self().__fill_from_row(row) for row in db_rows]

	@classmethod
	def get_custom_event_by_guid(self, guid):
		db_row = Database.macrosdb().fetch_one(	"""
			SELECT
				custom_event.id,
				custom_event.name,
				custom_event.guid,
				custom_event.plugin_guid
			FROM `custom_event`
			WHERE custom_event.guid=?""", (guid, ))

		return self().__fill_from_row(db_row) if db_row else None


	def save(self):
		return self.__update() if self.id else self.__insert()

	def __insert(self):
		self.guid = str(uuid4()) if self.guid is None else self.guid
		#raise Exception(self.guid, self.name)
		self.id = Database.macrosdb().commit(
			"""INSERT INTO custom_event (name, guid, plugin_guid) VALUES (?,?,?)""",
			 (self.name, self.guid, self.plugin_guid ) )

		self.register()
		return self

	def __update(self):
		Database.macrosdb().commit(
			"""UPDATE custom_event
				SET
					name=?,
					guid=?,
					plugin_guid=?
					WHERE id=?""",
			 (self.name, self.guid, self.plugin_guid, self.id))
		self.update_custom_event()
		return self

	def delete(self):
		from class_macro import Macros

		macros_list = Macros.get_macros_by_custom_event_guid(self.guid)
		for macros in macros_list:
			macros.class_name = "NULL"
			macros.custom_event = "NULL"
			macros.is_button_macros = "1"
			macros.on_board = "0"
			macros.save()

		self.unregister()
		Database.macrosdb().commit("""DELETE FROM custom_event WHERE id=?""", (self.id,))


	def get_xmlnode(self):
		from class_xml_custom_event import XMLCustomEvent
		import base64
		xml = XMLCustomEvent()
		xml.name 			= self.name
		xml.guid 			= self.guid

		return xml

	def generate_xml(self):
		return self.get_xmlnode().toprettyxml().encode("utf8")

	def fill_from_xml(self, xml, plugin_guid):
		self.name 				= xml.name
		self.guid	 			= xml.guid
		self.plugin_guid		= plugin_guid
		self.save()
]]>
		</Library>
		<Library Name="VEE_vmacro_dispatcher">
<![CDATA[#23.01.2013
#clean library

from VEE_core import engine
#from VEE_logs import PluginMessage, PluginMessageError
from VEE_tools import 	compile, execute, PythonCompilationError, VScriptComlipationError,\
						PythonExecutionError, VScriptExecutionError, StopExecutionError

from VEE_events import VEE_TimerEvent
from VEE_sqlite3 import v_DatabaseManager
from VEE_resources import v_ResManager, v_TempResManager

from functools import partial
import VEE_std_lib, VEE_proadmin, VEE_system, VEE_urllib, VEE_server


vscript_wrappers_name="wrappers"

EXECUTION_FAILED = 1
COMPILATION_FAILED = 2
EXECUTION_SUCCESS = 3
COMPILATION_SUCCESS = 4


STD_ENV_DICT = 	VEE_std_lib.environment + VEE_proadmin.environment \
				+ VEE_system.environment + VEE_urllib.environment + VEE_server.environment

APP_ENV_DICT = 	tuple()

WHOLE_ENV_DICT = (
					(	"v_wholeconnection"				, vscript_wrappers_name ),
					(	"v_wholeapplication"			, vscript_wrappers_name ),
					(	"v_wholeerror"					, vscript_wrappers_name ),
					(	"v_wholeconnectionerror"		, vscript_wrappers_name ),
					(	"v_wholenoconnectionerror"		, vscript_wrappers_name ),
					(	"v_wholeremotecallerror"		, vscript_wrappers_name ),
					(	"v_wholeincorrectresponse"		, vscript_wrappers_name ),
					(	"v_wholenoapierror"				, vscript_wrappers_name ),
					(	"v_wholenoapplication"			, vscript_wrappers_name ),
				)



class VEE_vmacro_dispatcher:

	def __init__( self, macros ):
		self.code 		= macros.code
		self.name 		= macros.name
		self.lib_code   = self.insert_libraries(macros)
		self.namespace 	= macros.plugin_guid
		self.guid		= macros.guid
		self.debug 		= True
		self.cache		= macros.bytecode
		self.logger     = engine.plugin_logger.getChild(macros.get_plugin().name).getChild(self.name)


	def __hash__( self ):
		return hash( self.guid )


	def __str__( self ):
		return u"{0}:{1}".format( self.namespace, self.name ).encode( "utf8" )


	def __repr__( self ):
		return u"{0}:{1}".format( self.namespace, self.name ).encode( "utf8" )


	def __call__( self, event = None, env_mask = 0b1011, custom_env = None, safe = True ):
		return self.__execute_script( self.environment(event, env_mask, custom_env), safe )

	def environment(self, event = None, env_mask = 0b1011, custom_env = None):
#		env_mask values:
#			0b0001 		- WHOLE_ENV
#			0b0010 		- STD_ENV + APP_ENV
#			0b0011		- STD_ENV + WHOLE_ENV + APP_ENV
#			0b0100		- CUSTOM_ENV
#			0b0111		- CUSTOM_ENV + STD_ENV + WHOLE_ENV + APP_ENV
#			0b1000		- !!!only for EVENT MACROS - initialize v_event variable

		env = []

		if env_mask & 0b0001:
			env += WHOLE_ENV_DICT

		if env_mask & 0b0010:

			v_plugin = VEE_std_lib.v_plugin( self.namespace )
			v_macros = VEE_std_lib.v_macros( self.guid, self.name )

			env += 	STD_ENV_DICT + (
							(	"v_dbdictionary"  			, VEE_std_lib.v_dbdictionary( self.namespace ) 					),
							(	"v_logger"					, partial( VEE_system.v_system.log, disp = self )				),
							(	"v_log"						, partial( VEE_system.v_system.log, disp = self )				), #need to delete
							( 	"v_clearlog"				, partial( VEE_system.v_system.v_clearlog, disp = self )		),
							(	"v_activatetimer"			, partial( VEE_std_lib.v_engine.v_activatetimer, disp = self ) 	),
							(	"v_deactivatetimer"			, partial( VEE_std_lib.v_engine.v_deactivatetimer, disp = self )),
							( 	"v_gettimer"				, partial( VEE_std_lib.v_engine.v_gettimer, disp = self ) 		),
							( 	"v_database"				, v_DatabaseManager( self.namespace ) 							),
							(	"v_resources"				, v_ResManager( self.namespace ) 								),
							(	"v_tempresources"			, v_TempResManager( self.namespace ) 							),
							( 	"v_customevent"				, VEE_std_lib.v_customevent 									),
							(	"v_raiseevent"				, partial( VEE_std_lib.v_raiseevent, disp = self ) 				),
							(	"v_plugin"					, v_plugin														),
							( 	"v_macros"					, v_macros														),
						) + APP_ENV_DICT

			VEE_system.v_system.debug 			= partial( VEE_system.v_system.debug, disp = self )


		if env_mask & 0b0100:
			env += custom_env if custom_env else []
		else:
			env +=(#Empty wrappers to register names in namespace
			( "v_page_status", None),
			( "v_currentpage", None),
			( "v_xml_dialog", None),
			( "v_xmldialog", None),
			( "v_sessiondictionary", None),
			( "v_showgrowl", None),
			( "v_response", None),
										)

		if env_mask & 0b1000:
			env += ( ( "v_timerevent", event.timer ) \
							if isinstance( event, VEE_TimerEvent ) else \
					 ( "v_event", VEE_std_lib.v_event( event ) ), )
		return dict( env )



	def insert_libraries(self, macros):
		self.libraries, line, libs = [], 1, u""

		for lib in macros.libraries():
			next_line = line + lib.code.count("\n") + 1
			self.libraries.append( ( lib.name, (line, next_line - 1)))
			line = next_line
			libs += lib.code + u"\n"

		return libs


	def parse_error(self, error, title):
		error_line, lib_name = error.line, ""

		if self.libraries:
			max_line = 0
			for lib in self.libraries:
				max_line = max_line if max_line >= lib[1][1] else lib[1][1]
				if lib[1][0] <= error_line <= lib[1][1]:
					lib_name = lib[0]
					error_line = error_line - lib[1][0] + 1
					break

			if not lib_name:
				error_line = error_line - max_line

		if lib_name: lib_name = u"Library '{0}', ".format(lib_name)

		self.error( u"{title} ({lib}Line {line}): {msg}".format(
							title = title,
							lib = lib_name,
							line = error_line,
							msg  = error.message ) )


	def compile( self):

		env = self.environment()
		try:
			self.info( u"VScript Compiler Start" )
			self.cache, self.code = compile( self.lib_code + self.code , environment = env )
			self.lib_code = None
			self.info( u"VScript Compiler Finish" )
			return COMPILATION_SUCCESS

		except VScriptComlipationError as error:
			self.parse_error(error, "VScript Compilation Error")
			return COMPILATION_FAILED

		except PythonCompilationError as error:
			self.error( u"Python Compilation Error: {msg}".format(
							msg  = error.message ) )

			return COMPILATION_FAILED


	def __execute_script( self, env, safe ):
		if not self.code:
			return EXECUTION_SUCCESS

		if not self.cache:
		#	if self.__compile( env ) == COMPILATION_FAILED:
			return COMPILATION_FAILED

		self.info( u"VScript initializing" )

		status = EXECUTION_SUCCESS
		#self.info( "Exec env:" +str(dict( env )))
		try:
			execute( self.cache, self.code, env, safe = safe )

		except VScriptExecutionError as error:
			self.parse_error(error, "VScript Execution Error")
			status = EXECUTION_FAILED

		except StopExecutionError as error:
			status = EXECUTION_SUCCESS

		except PythonExecutionError as error:
			from vdom_trace import Trace
			msg = [ u"Python Execution Error:" ]
			msg.extend( Trace.print_traceback() )
			msg.append( u"Exception: {0}".format( error.message ) )
			self.error( u" --> ".join( msg ) )
			status = EXECUTION_FAILED

		self.info( u"VScript executed" )
		return status


	def info( self, msg ):
		self.logger.info(msg)


	def error( self, msg ):
		self.logger.error(msg)


	def clear_log( self ):
		pass


	def activate_timer( self, timer_name ):
		engine.activate_timer( "{0}:{1}".format( self.namespace, timer_name ).lower(), True )


	def deactivate_timer( self, timer_name ):
		engine.activate_timer( "{0}:{1}".format( self.namespace, timer_name ).lower(), False )


	def get_timer_by_name ( self, timer_name ):
		return engine.get_timer_by_name( "{0}:{1}".format( self.namespace, timer_name ).lower() )



class InvokeDispatcher( object ):

	def __init__( self ):
		self.macros 		= None
		self.xmldialog 		= None
		self.vdomdynobj 	= None
		self.page			= None
		self.growl 			= None
		self.env			= []
		self.current_page 	= None
		self.no_action 		= False

	def add_env_var( self, name, value ):
		self.env.append( ( name, value ) )

	def run( self ):

		from VEE_events import VEE_ButtonEvent

		dispatcher = engine.get_dispatcher_by_event( VEE_ButtonEvent( self.macros.namespace, self.macros.guid ) )
		if not dispatcher:
			#self.growl.action("show", ["Error", "No such macros %s:%s" % ( self.macros.namespace, self.macros.guid ) ] )
			self.growl.action("show", ["Error", "No such macros" ] )
			return

		session_dictionary 	= VEE_std_lib.v_session_dictionary( self.macros.namespace )
		growl = VEE_std_lib.v_growl()
		args = request.arguments
		xml_dialog 					= VEE_std_lib.v_xmldialog()
		xml_dialog.container_guid 	= self.xmldialog.id
		xml_dialog.arguments 		= { k : args.get( k ) for k in args }
		xml_dialog.macros_id		= self.macros.guid

		vdom_dyn_obj = None
		if self.vdomdynobj:
			self.vdomdynobj.visible = "1"
			vdom_dyn_obj = VEE_std_lib.v_dynamicvdom(self.vdomdynobj)

		if self.current_page is not None:
			self.add_env_var( "v_page_status", self.current_page )
			self.add_env_var( "v_currentpage", self.current_page )

		result = dispatcher( event 		= None,
							 env_mask 	= 0b111,
							 custom_env = (
											(	"v_xml_dialog"	, 		xml_dialog			), #obsolete
											( 	"v_xmldialog"	,		xml_dialog			),
											( 	"v_sessiondictionary",	session_dictionary 	),
											(	"v_showgrowl"		, 	growl				),
											(	"v_dynamicvdom",		vdom_dyn_obj 		),
										) + tuple( self.env ),
							safe = False
									)
		if self.vdomdynobj:
			self.vdomdynobj.vdomxml = ""
			self.vdomdynobj.vdomactions = ""
			self.vdomdynobj.visible = "0"

		if result == EXECUTION_SUCCESS:

			if self.current_page is not None and self.current_page.redirect_url:
				if self.no_action:
					response.redirect( self.current_page.redirect_url )
				else:
					self.page.action( "goTo", [ self.current_page.redirect_url ] )

			else:
				if growl.message and growl.title:
					if self.no_action:
						self.growl.title = growl.title
						self.growl.text  = growl.message
						self.growl.active = "1"

					else:
						self.growl.action( "show", [ growl.title, growl.message ] )

				if not self.no_action and xml_dialog.actions:
					for action_data in xml_dialog.actions:
						self.xmldialog.action('executeCallback', action_data)

				if xml_dialog.xml:
					if self.no_action:
						self.xmldialog.width = xml_dialog.width
						self.xmldialog.height = xml_dialog.height
						self.xmldialog.xmldata = xml_dialog.xml
						self.xmldialog.show = "1"

					else:
						self.xmldialog.action( "show", [] )
						self.xmldialog.action( "resizeTo", [ xml_dialog.width, xml_dialog.height ] )
						self.xmldialog.action( "loadData", [ xml_dialog.xml ] )

				elif not xml_dialog.visible:
					self.xmldialog.action( "hide", [] )

		elif result == COMPILATION_FAILED:
			self.growl.action("show", ["Compilation error", "Please, check macros code"])

		elif result == EXECUTION_FAILED:
			self.growl.action("show", ["Execution error", "Please, check macros code"])

		else:
			self.growl.action("show", ["Error", "Please, check macros code"])
]]>
		</Library>
		<Library Name="ProSuiteRemoteUsersAndGroupsPage">
<![CDATA["""
"""

from functools import wraps

import ProAdmin

from prosuite_web import ProSuiteBasicPage, administrator_only, error_handler,\
                         authenticated


def remote_scheme(method):
    """
    """
    @wraps(method)
    def wrapper(page_controller, *args, **kwargs):
        """
        """
        if ProAdmin.scheme().is_remote():
            return method(page_controller, *args, **kwargs)

        page_controller.redirect(page_controller.get_home_url())

    return wrapper 


class ProSuiteRemoteUsersAndGroupsPage(ProSuiteBasicPage):

    @error_handler
    @remote_scheme
    @authenticated
    @administrator_only
    def live(self, action="onload"):
        self._live(action)

    def onload(self, page_controller):
        """
        """
        pass

    def get_page_title(self):
        return self.app_settings.localization["page_title"].format(
            app_name=self.app_settings.info["name"],
            page_name=self.localization["usgrremote.title"]
        )

    def get_localization_data(self):
        return {
            self.vdom_objects["usgrremote.attention"]: "usgrremote.attention"
        }]]>
		</Library>
		<Library Name="proadmin_acl_object">
<![CDATA[from proadmin_ldap_connection import LDAPConnection
from proadmin_ldap_object import LDAPObject

import uuid as uuid
import cgi

class ACLObject( object ):

	def __init__( self, ldapobject, scheme ):
		self.ldapobject 	= ldapobject
		self.scheme			= scheme


	def _scalar( self, atr_name, default_value=None ):
		""" return scalar LDAP attribute value
		"""
		vector = self._vector( atr_name, [] )
		return vector[0] if vector else default_value

	def _vector( self, atr_name, default_value=[] ):
		""" return vector LDAP attribute value
		"""
		attr = self.ldapobject.attributes
		return attr[ atr_name ] if atr_name in attr else default_value

	def _set_attribute( self, name, value ):
		if not value: value = []
		else:
			if type( value ) != list:
				value = [ value ]

		self.ldapobject.attributes[ name ] = value



	# -----------------------------
	#		dirty-bit methods
	# -----------------------------

	def _get_dirty_bit( self ):
		value = self._scalar( 'documentVersion', 0 )
		if not value:
			value = 0

		return int( value )


	def _set_dirty_bit( self ):
		dirty_bit = self._get_dirty_bit()
		value = '0' if dirty_bit < 0 else '1'
		self._set_attribute( 'documentVersion', value )


	def is_dirty( self ):
		dirty_bit = self._get_dirty_bit()
		return True if dirty_bit > 0 else False


	def clear_dirty_bit( self ):
		self._set_attribute( 'documentVersion', '-1' )





	def get_type( self ):
		return self._scalar( 'cn' )


	def get_guid( self ):
		return self._scalar( 'documentIdentifier' )

	def set_guid( self, guid ):
		# modify attributes
		self._set_attribute( 'documentIdentifier', guid )

		# modify dn
		if guid and type(guid) in [str, unicode]:
			baseDN = self.ldapobject.parent_dn
			self.ldapobject.dn = "documentIdentifier=" + guid + ',' + baseDN
			self.ldapobject.rdn = "documentIdentifier=" + guid



	def get_name( self ):
		return self._scalar( 'documentTitle', '' )

	def set_name( self, value ):
		value = cgi.escape( value )
		self._set_attribute( 'documentTitle', value )




	def get_rules_tuples( self ):
		"""
		"""
		result = []

		strings = self._vector( 'description' )
		for s in strings:
			s_guid 		= s.split(',')[0]
			s_access	= s.split(',')[1]

			result.append( (s_guid, s_access) )

		return result


	def get_parent( self ):
		ldapconnection 	= self.scheme.connection
		ldapobject 		= ldapconnection.get_by_dn(self.ldapobject.parent_dn)

		acl_object = ACLObject( ldapobject, self.scheme )
		if acl_object.type == 'Application':
			return ACLApplication( ldapobject, self.scheme )

		return acl_object


	type 	= property( get_type )
	guid 	= property( get_guid, set_guid )
	name 	= property( get_name, set_name )
	parent 	= property( get_parent )



	def delete( self, parent_dirty=True ):
		# mark dirty-bit in parent object
		if parent_dirty and self.parent:
			self.parent.save()

		# remove ldap-object
		ldapconnection = self.scheme.connection
		ldapconnection.delete( self.ldapobject )


	def create_child( self, type, name, guid = '' ):

		baseDN = self.ldapobject.dn

		if not guid:
			guid = str( uuid.uuid4() )

		ldapconnection = self.scheme.connection

		child = ldapconnection.create_object(
					[ "documentIdentifier=" + guid, baseDN ],
					{
						'objectClass': [ 'top', 'document' ],
						'cn': [ type ],
						'documentIdentifier' : [ guid ],
						'documentTitle': [ name ]
					} )

		return ACLObject( child, self.scheme )




	def get_by_guid( self, guid ):
		""" search ACL object by guid in subtree include this object
		"""
		if not guid: return None
		if guid == self.guid:
			return self

		objects = self.child_objects( guid=guid, recursive=True )
		if objects:
			return objects[ 0 ]

		return None



	def child_objects(self, guid=None, type=None, name=None, recursive=None):
		""" return list of child objects
		"""

		if not guid: guid = ''
		if not type: type = ''
		if not name: name = ''
		if not recursive: recursive = False

		filter = ''

		if type:
			filter += "(cn=%s)" % type
		if guid:
			filter += "(documentIdentifier=%s)" % guid
		if name:
			filter += "(documentTitle=%s)" % name

		if not( type and guid and name ):
			filter += "(documentIdentifier=*)"

		filter = '(&' + filter + ')'

		ldapconnection = self.scheme.connection
		child_list = ldapconnection.search(self.ldapobject.dn, filter, recursive)

		result = []
		for child in child_list:
			if self.ldapobject.dn != child.dn:
				result.append( ACLObject( child, self.scheme ))

		result.sort( cmp=lambda a,b: cmp(a.name, b.name) )
		return result



	def rules( self, subject=None, access=None ):
		""" return list of rules of this object
		"""
		from proadmin_rule import Rule
		return Rule.get_rules( object=self, subject=subject, access=access )



	def child_rules( self, objecttype=None, subject=None, access=None, recursive=False ):
		"""
		"""

		if not objecttype	: objecttype 	= ''
		if not recursive	: recursive 	= ''
		if not subject		: subject 		= []
		if not access		: access		= []

		#get all need child objects
		childs = self.child_objects( type=objecttype, recursive=recursive )

		#get all need rules for it's objects
		result = []
		for c in childs:
			result += c.rules( subject=subject, access=access )

		return result



	def fast_rules( self, *args, **kwargs ):
		from proadmin_rule import Rule
		return Rule.fast_rules( self, *args, **kwargs )



	def add_rule( self, subject, access ):
		if "description" not in self.ldapobject.attributes:
			self.ldapobject.attributes["description"] = []

		rule = subject.guid + "," + access
		if rule not in self.ldapobject.attributes["description"]:
			self.ldapobject.attributes["description"].append( rule )


	def remove_rule( self, subject, access ):
		""" remove rules but can't remove admins rights
		"""
		return self.force_remove_rule( subject, access, force=False )


	def force_remove_rule( self, subject, access, force=True ):
		""" can remove rights for root!
		"""
		if not subject: return

		if "description" not in self.ldapobject.attributes:
			self.ldapobject.attributes["description"] = []

		rule = subject.guid + "," + access
		if rule in self.ldapobject.attributes["description"]:
			self.ldapobject.attributes["description"].remove( rule )






	@classmethod
	def application( self, name, guid, scheme ):
		ldapconnection = scheme.connection

		# create organization unit
		baseDN = "dc=vdombox,dc=local"
		baseou = ldapconnection.create_object(
					["ou=" + guid, baseDN],
					{
						'objectClass': ['top', 'organizationalUnit'],
						'ou': [ guid ]
					})

		ldapconnection.save( baseou )
		

		# create application document object
		userou = ldapconnection.create_object(
					["ou=users,ou=" + guid, baseDN],
					{
						'objectClass': ['top', 'organizationalUnit'],
						'ou': ['users', guid]
					})

		ldapconnection.save( userou )


		# get application document or create
		dn = "documentIdentifier={0},ou={0},{1}".format( guid, baseDN )
		document = ldapconnection.get_by_dn( dn )

		if not document:
			document = ldapconnection.create_object(

					["documentIdentifier=" + guid + ",ou=" + guid, baseDN],
					{
						'objectClass': ['top', 'document'],
						'documentIdentifier': [ guid ],
						'cn': ['Application'],
						'documentTitle': [ name ]
					})

		ldapconnection.save( document )

		return ACLApplication( document, scheme )




	def _exist( self ):
		objects = self.scheme.application.get_by_guid( guid = self.guid )
		return True if objects else False


	def save( self ):
		# set dirty-bit
		self._set_dirty_bit()

		ldapconnection = self.scheme.connection
		if self._exist():
			ldapconnection.update( self.ldapobject )
		else:
			ldapconnection.insert( self.ldapobject )
		return self


	def __eq__( self, other ):
		if not other: return False
		return self.ldapobject == other.ldapobject

	def __hash__( self ):
		return hash( self.guid )

	def __str__( self ):
		return "ACLObject: (Type: " + self.type + ", Name: " + self.name + ")"






class ACLApplication( ACLObject ):
	""" class represent ACLApplication
	"""
	def get_parent(self):
		return None

	parent = property(get_parent)

	def delete(self):
		import ProAdmin
		ldapconnection = self.scheme.connection
		ldapconnection.delete( ldapconnection.get_by_dn(self.ldapobject.parent_dn) )
		ProAdmin.unregister_default_scheme()


	def refresh( self ):
		""" refresh ldapobject
		"""
		dn = self.ldapobject.dn
		self.ldapobject = self.scheme.connection.get_by_dn( dn )


	def get_subjects( self, guid=None ):
		users = self.get_users( guid=guid )
		groups = self.get_groups( guid=guid )
		return users + groups

	def get_subject( self, guid ):
		result = self.get_subjects( guid=guid )
		return result[0] if result else None


	def create_user(self, email=''):
		""" create new application user
		"""
		users = self.get_users( email = email )
		if users: return users[0]

		user = self.scheme.create_user()
		user.email = email

		return user


	def create_root_user( self, password='root' ):
		""" create root user if not exists. root-is default password
		"""
		root = self.scheme.create_root_user()
		if not self.rules( root, 'a' ):
			self.add_rule( root, 'a' )
			self.save()


	def get_users( self, email=None, guid=None ):
		""" get application users
		"""
		return self.scheme.get_users( email = email, guid = guid )



	def create_group( self, name ):
		""" create new application group
		"""
		groups = self.get_groups( name = name )
		if groups: return groups[0]

		group = self.scheme.create_group( name = name )
		#group.name = name

		return group



	def create_admins_group( self ):
		""" create admin group if not exists
		"""
		admins = self.scheme.create_admins_group()
		if not self.rules( admins, 'a' ):
			self.add_rule( admins, 'a' )
			self.save()




	def get_groups( self, name=None, guid=None, user=None ):
		""" get application groups
		"""
		return self.scheme.get_groups( name=name, guid=guid, user=user )


	def get_admin( self ):
		"""get application admin user
		"""
		return self.scheme.get_admin()



	def force_remove_rule( self, subject, access, force=True ):
		""" special remove for application.
		"""
		if not subject: return

		if subject.is_admin() and access == 'a' and not force:
			return

		ACLObject.force_remove_rule( self, subject, access, force )
]]>
		</Library>
		<Library Name="VEE_logs">
<![CDATA[from datetime import datetime



class LogMessage( object ):

	def __init__( self, name, message  ):
		self.__message 	= message
		self.date	 	= datetime.now()
		self.name 		= name


	message = property( lambda self: self.__message )


	def displayed_message( self ):
		return u"[{name}] :: {msg}".format( name = self.name, msg = self.message )



class EngineMessage( LogMessage ):

	def __init__( self, message ):
		LogMessage.__init__( self, u"Engine", message )


class CompilerMessage( LogMessage ):

	def __init__( self,  name, message, plugin_guid, macros_guid ):
		LogMessage.__init__( self, "Compiler: "+name, message )
		self.plugin_guid 	= plugin_guid
		self.macros_guid 	= macros_guid
		

class PluginMessage( LogMessage ):

	def __init__( self,  name, message, plugin_guid, macros_guid ):
		LogMessage.__init__( self, name, message )
		self.plugin_guid 	= plugin_guid
		self.macros_guid 	= macros_guid



class PluginMessageError( PluginMessage ):
	pass]]>
		</Library>
		<Library Name="prosuite_plugins">
<![CDATA["""
"""

import time
import uuid

from datetime import datetime

from prosuite_db_connection import ProSuitePluginsDBObject



class SourceCodeObject(ProSuitePluginsDBObject):

    __slots__ = (
        "_guid",
        "_plugin_guid",
        "_mtime",
        "_ctime",
        "_modification_date",
        "_creation_date",
        "name",
        "description",
    )

    def __init__(self, plugin_guid=None):
        super(SourceCodeObject, self).__init__()
        self._guid = None
        self._plugin_guid = plugin_guid
        self._ctime = None
        self._mtime = None
        self._creation_date = None
        self._modification_date = None
        self.name = ""
        self.description = ""

    @property
    def guid(self):
        return self._guid

    @property
    def plugin_guid(self):
        return self._plugin_guid

    @property
    def mtime(self):
        return self._mtime

    @property
    def ctime(self):
        return self._ctime

    @property
    def creation_date(self):
        if not self._creation_date and self.ctime:
            self._creation_date = datetime.fromtimestamp(self.ctime)

        return self._creation_date

    @property
    def modification_date(self):
        if not self._modification_date and self.mtime:
            self._modification_date = datetime.fromtimestamp(self.mtime)

        return self._modification_date

    def _insert(self):
        """
        Insert object record to database
        """
        self._ctime = self.__mtime = int(time.time())
        self._guid = str(uuid.uuid4())
        super(SourceCodeObject, self)._insert()

    def _update(self):
        """
        Update object record in database
        """
        self._mtime = int(time.time())
        super(SourceCodeObject, self)._update()

    ######################
    @classmethod
    def get_by_plugin_guid(cls, plugin_guid, sorted=False):
        order_clause = "" if not sorted else "name ASC"
        return cls.fetch("plugin_guid=?", order_clause=order_clause, arguments=[plugin_guid])

    @classmethod
    def get_by_guid(cls, guid, plugin_guid):
        objects = cls.fetch("guid=? AND plugin_guid=?", limit=1, arguments=[guid, plugin_guid])
        return objects[0] if objects else None




class Library(SourceCodeObject):

    DB_TABLE = "library"
    DB_COLS = (
        "guid",
        "plugin_guid",
        "name",
        "description",
        "ctime",
        "mtime"
    )

    @classmethod
    def _fill_from_row(cls, row):
        inst = cls(row[2])
        inst._id = row[0]
        inst._guid = row[1]
        inst.name = row[3]
        inst.description = row[4]
        inst._ctime = row[5]
        inst._mtime = row[6]

        return inst


class Macros(SourceCodeObject):

    __slots__ = (
        "picture_guid",
        "code",
        "bytecode",
        "type",
    )

    DB_TABLE = "macros"
    DB_COLS = (
        "guid",
        "plugin_guid",
        "name",
        "description",
        "ctime",
        "mtime",
        "picture_guid",
        "code",
        "bytecode",
        "type",
    )

    def __init__(self, plugin_guid=None):
        super(SourceCodeObject, self).__init__(plugin_guid)
        self.picture_guid = ""
        self.code = ""
        self.bytecode = None
        self.type = None

    @classmethod
    def _fill_from_row(cls, row):
        inst = cls(row[2])
        inst._id = row[0]
        inst.__guid = row[1]
        inst.name = row[3]
        inst.description = row[4]
        inst.__ctime = row[5]
        inst.__mtime = row[6]
        inst.picture_guid = row[7]
        inst.code = row[8]
        inst.bytecode = row[9]
        inst.type = row[10]
        return inst


class CustomEvent(ProSuitePluginsDBObject):

    __slots__ = (
        "_guid",
        "_plugin_guid",
        "name"
    )

    DB_TABLE = "custom_event"
    DB_COLS = (
        "guid",
        "plugin_guid",
        "name"
    )

    def __init__(self, plugin_guid=None):
        super(CustomEvent, self).__init__()
        self._guid = None
        self._plugin_guid = plugin_guid
        self.name = ""

    @property
    def guid(self):
        return self._guid

    @property
    def plugin_guid(self):
        return self._plugin_guid

    def _insert(self):
        """
        Insert object record to database
        """
        self._guid = str(uuid.uuid4())
        super(CustomEvent, self)._insert()

    @classmethod
    def _fill_from_row(cls, row):
        inst = cls(row[2])
        inst._id = row[0]
        inst._guid = row[1]
        inst.name = row[3]
        return inst

    ######################
    @classmethod
    def get_by_plugin_guid(cls, plugin_guid, sorted=False):
        order_clause = "" if not sorted else "name ASC"
        return cls.fetch("plugin_guid=?", order_clause=order_clause, arguments=[plugin_guid])

    @classmethod
    def get_by_guid(cls, guid, plugin_guid):
        objects = cls.fetch("guid=? AND plugin_guid=?", limit=1, arguments=[guid, plugin_guid])
        return objects[0] if objects else None



class Timer(ProSuitePluginsDBObject):

    __slots__ = (
        "_guid",
        "_plugin_guid",
        "name",
        "interval"
    )

    DB_TABLE = "timer"
    DB_COLS = (
        "guid",
        "plugin_guid",
        "name",
        "interval"
    )

    def __init__(self, plugin_guid=None):
        super(Timer, self).__init__()
        self._guid = None
        self._plugin_guid = plugin_guid
        self.name = ""
        self.interval = ""

    @property
    def guid(self):
        return self._guid

    @property
    def plugin_guid(self):
        return self._plugin_guid

    def _insert(self):
        """
        Insert object record to database
        """
        self._guid = str(uuid.uuid4())
        super(Timer, self)._insert()

    @classmethod
    def _fill_from_row(cls, row):
        inst = cls(row[2])
        inst._id = row[0]
        inst._guid = row[1]
        inst.name = row[3]
        inst.interval = row[4]
        return inst

    ######################
    @classmethod
    def get_by_plugin_guid(cls, plugin_guid, sorted=False):
        order_clause = "" if not sorted else "name ASC"
        return cls.fetch("plugin_guid=?", order_clause=order_clause, arguments=[plugin_guid])

    @classmethod
    def get_by_guid(cls, guid, plugin_guid):
        objects = cls.fetch("guid=? AND plugin_guid=?", limit=1, arguments=[guid, plugin_guid])
        return objects[0] if objects else None


class Resource(object):

    def __init__(self, plugin_guid=None):
        self.__guid = None
        self.__plugin_guid = plugin_guid
        self.name = ""

    @property
    def guid(self):
        return self.__guid

    @property
    def plugin_guid(self):
        return self.__plugin_guid


class Database(Resource):
    pass


class Plugin(ProSuitePluginsDBObject):

    __slots__ = (
        "__guid",
        "__protected",
        "__creation_date",
        "__modification_date"
        "__ctime",
        "__mtime",
        "name",
        "description",
        "author",
        "picture_guid",
        "version",
    )

    DB_TABLE = "plugin"
    DB_COLS = (
        "guid",
        "protected",
        "name",
        "description",
        "author",
        "picture_guid",
        "version",
        "ctime",
        "mtime"
    )

    def __init__(self, name=""):
        super(Plugin, self).__init__()
        self.__guid = ""
        self.__protected = False
        self.__creation_date = None
        self.__modification_date = None
        self.__ctime = None
        self.__mtime = None
        self.name = name
        self.description = ""
        self.author = ""
        self.picture_guid = ""
        self.version = ""

    ######################
    @property
    def guid(self):
        return self.__guid

    @property
    def protected(self):
        return self.__protected

    @property
    def mtime(self):
        return self.__mtime

    @property
    def ctime(self):
        return self.__ctime

    @property
    def creation_date(self):
        if not self.__creation_date and self.ctime:
            self.__creation_date = datetime.fromtimestamp(self.ctime)

        return self.__creation_date

    @property
    def modification_date(self):
        if not self.__modification_date and self.mtime:
            self.__modification_date = datetime.fromtimestamp(self.mtime)

        return self.__modification_date


    def _insert(self):
        """
        Insert object record to database
        """
        self.__ctime = self.__mtime = int(time.time())
        self.__guid = str(uuid.uuid4())
        super(Plugin, self)._insert()

    def _update(self):
        """
        Update object record in database
        """
        self.__mtime = int(time.time())
        super(Plugin, self)._update()

    @classmethod
    def _fill_from_row(cls, row):
        inst = cls(row[3])
        inst._id = row[0]
        inst.__guid = row[1]
        inst.__protected = bool(row[2])
        inst.description = row[4]
        inst.author = row[5]
        inst.picture_guid = row[6]
        inst.version = row[7]
        inst.__ctime = row[8]
        inst.__mtime = row[9]
        return inst

    ######################
    def to_xml(self):
        pass

    def from_xml(self):
        pass

    ######################
    def macroses(self):
        pass

    def libraries(self, sorted=False):
        return Library.get_by_plugin_guid(self.guid, sorted=sorted)

    def resources(self):
        pass

    def databases(self):
        pass

    def timers(self, sorted=False):
        return Timer.get_by_plugin_guid(self.guid, sorted=sorted)

    def custom_events(self, sorted=False):
        return CustomEvent.get_by_plugin_guid(self.guid, sorted=sorted)

    ######################
    def create_macros(self):
        pass

    def create_library(self):
        return Library(self.guid)

    def create_resource(self):
        pass

    def create_database(self):
        pass

    def create_timer(self):
        return Timer(self.guid)

    def create_custom_event(self):
        return CustomEvent(self.guid)

    ######################
    def get_macros(self):
        pass

    def get_library(self, guid):
        return Library.get_by_guid(guid=guid, plugin_guid=self.guid)

    def get_resource(self):
        pass

    def get_database(self):
        pass

    def get_timer(self, guid):
        return Timer.get_by_guid(guid=guid, plugin_guid=self.guid)

    def get_custom_event(self, guid):
        return CustomEvent.get_by_guid(guid=guid, plugin_guid=self.guid)

    ######################
    @classmethod
    def get_by_guid(cls, plugin_guid):
        objects = cls.fetch("guid=?", limit=1, arguments=[plugin_guid])
        return objects[0] if objects else None

    @classmethod
    def exists(self, guid):
        pass

    @classmethod
    def get_all(cls, sorted=False):
        order_clause = "" if not sorted else "name ASC"
        return cls.fetch(order_clause=order_clause)
]]>
		</Library>
		<Library Name="proadmin_ldapconfig">
<![CDATA[

CONFIG_IDs = {
	'active_directory' 		: '-1',
	'vdombox.ru' 			: '-2',
	'local'					: '0',
	'create new config..' 	: '-3'
}


class LDAPConfig( object ):
	def __init__( self, attributes = {}, config = '' ):
		self.id = CONFIG_IDs.get( config, '' )
		self.name = config
		if config and not attributes:
			self.attributes = self.create_config( config = config ).attributes
		else:
			self.attributes = attributes

	@classmethod
	def create_config( self, config = 'local' ):
		""" config can be 'local', 'vdombox.ru', 'active_directory' """
		attributes = {
				"first_name"		: "",
				"last_name"			: "",
				"email"				: "",
				"phone"				: "",
				"notification_email": "",
				"cell_phone"		: "",
				"country"			: "",
				"keywords"			: "",
				"password"			: "",
				"user_dn"			: "",
				"group_dn"			: "",
				"user_guid"			: "",
				"group_guid"		: "",
				"base_dn"			: "",
				"groups_in_user"	: '',
				"users_in_group"	: "",
				"user_class"		: [''],
				"group_class"		: [''],
				"group_name"		: '',
				}

		if config == 'local':
			attributes = {
				"first_name"		: "givenName",
				"last_name"			: "sn",
				"email"				: "uid",
				"phone"				: "telephoneNumber",
				"notification_email": "mail",
				"cell_phone"		: "mobile",
				"country"			: "homePostalAddress",
				"keywords"			: "description",
				"password"			: "userPassword",
				"user_dn"			: "ou=users,ou=%s" % application.id,
				"group_dn"			: "ou=users,ou=%s" % application.id,
				"user_guid"			: "cn",
				"group_guid"		: "cn",
				"base_dn"			: "dc=vdombox,dc=local",
				"groups_in_user"	: '',
				"users_in_group"	: "member",
				"user_class"		: [ 'top', 'person', 'organizationalPerson', 'inetOrgPerson' ],
				"group_class"		: [ 'groupOfNames' ],
				"crypt"				: 'md5',
				"group_name"		: 'o',
				}

		elif config == 'vdombox.ru':
			attributes = {
				"first_name"		: "cn",
				"last_name"			: "sn",
				"email"				: "uid",
				"phone"				: "telephoneNumber",
				"password"			: "userPassword",
				"user_dn"			: "ou=developers",
				"group_dn"			: "ou=groups",
				"user_guid"			: "uid",
				"group_guid"		: "cn",
				"group_name"		: "cn",
				"base_dn"			: "dc=vdombox,dc=ru",
				"groups_in_user"	: '',
				"users_in_group"	: "member",
				"user_class"		: [ 'top', 'person', 'organizationalPerson', 'inetOrgPerson' ],
				"group_class"		: [ 'groupOfNames' ],
				"crypt"				: 'base64_sha',
				}

		elif config == 'active_directory':
			attributes = {
				"first_name"		: "givenName",
				"last_name"			: "sn",
				"email"				: "sAMAccountName",
				"phone"				: "telephoneNumber",
				# "password"			: "userPassword",
				# "user_dn"			: "cn=Users",
				# "group_dn"			: "cn=Groups",
				"user_guid"			: "cn",
				"group_guid"		: "cn",
				"group_name"		: "cn",
				# "base_dn"			: "dc=ad,dc=vdombox,dc=local",
				"groups_in_user"	: "",
				"users_in_group"	: "member",
				"user_class"		: [ "User" ],
				"group_class"		: [ "Group" ],
				"crypt"				: "md5",
				"notification_email": "mail",
				"keywords"			: "description",
				"country"			: "co",
				"cell_phone"		: "mobile",
			}

		return LDAPConfig( attributes = attributes, config = config )



	def __getitem__( self, key ):
		return self.attributes.get( key, '' )

	def __setitem__( self, key, value ):
		self.attributes[ key ] = value

	def __delitem__( self, key ):
		if key in self.attributes:
			del self.attributes[ key ]



	def get_attribute( self, attribute_name, default = '' ):
		return self.attributes.get( attribute_name, default )

	def add_attribute( self, name, value ):
		self.attributes[ name ] = value

	def set_attribute( self, name, value ):
		self.attributes[ name ] = value



	def get_login( self, username ):
		if not username: return ''

		uid = self.get_attribute( 'user_guid' )
		user_dn = self.get_attribute( 'user_dn' )
		base_dn = self.get_attribute( 'base_dn' )

		dn = "%(uid)s=%(login)s,%(user_dn)s,%(base_dn)s" % {
			"uid"		: uid,
			"login"		: username,
			"user_dn"	: user_dn,
			"base_dn"	: base_dn,
		}

		return dn


	def get_group_dn( self, guid, base_dn ):
		if not guid: return ''

		guid_attr = self.get_attribute( 'group_guid' )
		group_dn = self.get_attribute( 'group_dn' )

		dn = "%(guid_attr)s=%(guid)s,%(group_dn)s,%(base_dn)s" % {
			"guid_attr"	: guid_attr,
			"guid"		: guid,
			"group_dn"	: group_dn,
			"base_dn"	: base_dn,
		}

		return dn


	def get_user_dn( self, guid, base_dn ):
		if not guid: return ''

		guid_attr = self.get_attribute( 'user_guid' )
		user_dn = self.get_attribute( 'user_dn' )

		dn = "%(guid_attr)s=%(guid)s,%(user_dn)s,%(base_dn)s" % {
			"guid_attr"	: guid_attr,
			"guid"		: guid,
			"user_dn"	: user_dn,
			"base_dn"	: base_dn,
		}

		return dn


	def get_user_guid( self ):
		guid = self.attributes.get( 'user_guid' )
		for k, v in self.attributes.items():
			if v == guid:
				return k
		return 'dn'


	def get_group_guid( self ):
		guid = self.attributes.get( 'group_guid' )
		for k, v in self.attributes.items():
			if v == guid:
				return k
		return 'dn'



	################################################################
########	db_config
	################################################################



	@classmethod
	def get_by_id( self, id ):
		from class_db import Database

		for config_name, config_id in CONFIG_IDs.items():
			if str( config_id ) == str( id ):
				return LDAPConfig( config = config_name )

		query = """
			SELECT
				email,
				phone,
				password,
				group_dn,
				user_dn,
				user_guid,
				group_guid,
				base_dn,
				groups_in_user,
				users_in_group,
				user_class,
				group_class,
				group_name,
				first_name,
				last_name,
				config_name,
				id
			FROM subject_config WHERE id = ?
			"""
		values = (id,)

		db_row = Database.maindb().fetch_one( query, values )
		return LDAPConfig().__fill_from_row( db_row ) if db_row else None


	def __fill_from_row( self, row ):
		from class_db import Database

		# define order of attributes
		keys = [
			'email',
			'phone',
			'password',
			'group_dn',
			'user_dn',
			'user_guid',
			'group_guid',
			'base_dn',
			'groups_in_user',
			'users_in_group',
			'user_class',
			'group_class',
			'group_name',
			'first_name',
			'last_name'
		]

		# fill attrbutes
		self.attributes.clear()

		for i in range( len(keys) ):
			key = keys[i]
			value = row[i] if row[i] != u'NULL' else u''

			if key in [ 'group_class', 'user_class' ]:
				value = [ value ]

			self[ key ] = value

		self.name 	= row[15]
		self.id 	= row[16]

		return self


	def save( self ):
		id = self._exist()
		if not id:
			id = self._insert()
		else:
			self._update( id )
		return id


	def _insert( self ):
		from class_db import Database

		query = """
			INSERT INTO subject_config
				(email,
				phone,
				password,
				group_dn,
				user_dn,
				user_guid,
				group_guid,
				group_name,
				base_dn,
				groups_in_user,
				users_in_group,
				user_class,
				group_class,
				first_name,
				last_name,
				config_name)
			VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			"""

		values = (
			self[ 'email' ],
			self[ 'phone' ],
			self[ 'password' ],
			self[ 'group_dn' ],
			self[ 'user_dn' ],
			self[ 'user_guid' ],
			self[ 'group_guid' ],
			self[ 'group_name' ],
			self[ 'base_dn' ],
			self[ 'groups_in_user' ],
			self[ 'users_in_group' ],
			self[ 'user_class' ][-1],
			self[ 'group_class' ][-1],
			self[ 'first_name' ],
			self[ 'last_name' ],
			self.name,
		)

		self.id = Database.maindb().commit( query, values )
		return id


	def _update( self, id ):
		from class_db import Database

		if self.id in CONFIG_IDs.values():
			return
		self.id = id
		query = """
			UPDATE subject_config SET email = ?,
				phone = ?,
				password = ?,
				group_dn = ?,
				user_dn = ?,
				user_guid = ?,
				group_guid = ?,
				group_name = ?,
				base_dn = ?,
				groups_in_user = ?,
				users_in_group = ?,
				user_class = ?,
				group_class = ?,
				first_name = ?,
				last_name = ?,
				config_name = ?
			WHERE id = ?"""

		values = (
			self[ 'email' ],
			self[ 'phone' ],
			self[ 'password' ],
			self[ 'group_dn' ],
			self[ 'user_dn' ],
			self[ 'user_guid' ],
			self[ 'group_guid' ],
			self[ 'group_name' ],
			self[ 'base_dn' ],
			self[ 'groups_in_user' ],
			self[ 'users_in_group' ],
			self[ 'user_class' ][-1],
			self[ 'group_class' ][-1],
			self[ 'first_name' ],
			self[ 'last_name' ],
			self.name,
			self.id,
		)

		Database.maindb().commit( query, values )



	def _exist( self ):
		from class_db import Database

		if self.id: return self.id
		if self.name in CONFIG_IDs:	return CONFIG_IDs[ name ]

		query = """
			SELECT id
			FROM subject_config
			WHERE
				user_dn = ?
				AND group_dn = ?
				AND user_guid = ?
				AND group_guid = ?
				AND users_in_group = ?
				AND groups_in_user = ?
			"""

		values = (
			self[ 'user_dn' ],
			self[ 'group_dn' ],
			self[ 'user_guid' ],
			self[ 'group_guid' ],
			self.get_attribute( 'users_in_group', 'NULL' ),
			self.get_attribute( 'groups_in_user', 'NULL' ),
		)

		id = Database.maindb().fetch_one( query, values )
		id = id[0] if id else None

		return id



	def delete( self ):
		from class_db import Database

		if self.id in CONFIG_IDs:
			return
		query = """DELETE FROM subject_config WHERE id = ?"""
		values = ( self.id, )
		Database.maindb().commit( query, values )



	@classmethod
	def get_name_list( self ):
		from class_db import Database

		rows = Database.maindb().fetch_all("""SELECT id, config_name FROM subject_config""")

		result = [ [ id, name ] for name, id in CONFIG_IDs.iteritems() ]
		result.reverse()

		for row in rows:
			result.append( [row[0], row[1]] )

		return result
]]>
		</Library>
		<Library Name="class_plugins">
<![CDATA[from class_db import Database
from utils.uuid import uuid4
import base64

class Plugins:
	def __init__(self):
		self.id 			= None
		self.name 			= None
		self.description 	= None
		self.author 		= None
		self.picture 		= None
		self.guid 			= None
		self.zindex			= None
		self.version		= None
		self.protected		= None
		self.__macros		= []
		self.__timer		= []
		self.__custom_event = []


	def __fill_from_row(self, row):
		self.id 			= row[0]
		self.name 			= row[1]
		self.description 	= row[2]
		self.author 		= row[3]
		self.picture 		= row[4]
		self.guid	 		= row[5]
		self.zindex	 		= row[6]
		self.version 		= row[7]
		self.protected 		= row[8]

		return self


	@classmethod
	def get_all(self):
		db_rows = Database.macrosdb().fetch_all(	"""
			SELECT
				plugin.id,
				plugin.name,
				plugin.description,
				plugin.author,
				plugin.picture,
				plugin.guid,
				plugin.zindex,
				plugin.version,
				plugin.protected
			FROM `plugin`""", )

		return [self().__fill_from_row(row) for row in db_rows]

	def get_macros(self):
		from class_macro import Macros
		self.__macros = Macros.get_macros_by_plugin_guid(self.guid)
		return self.__macros

	def get_timer(self):
		from class_timer import Timer
		self.__timer = Timer.get_timer_by_plugin_guid(self.guid)
		return self.__timer

	def get_custom_event(self):
		from class_custom_event import CustomEvent
		self.__custom_event = CustomEvent.get_custom_event_by_plugin_guid(self.guid)
		return self.__custom_event

	@classmethod
	def get_by_id(self, id):
		db_row = Database.macrosdb().fetch_one(	"""
			SELECT
				plugin.id,
				plugin.name,
				plugin.description,
				plugin.author,
				plugin.picture,
				plugin.guid,
				plugin.zindex,
				plugin.version,
				plugin.protected
			FROM `plugin`
			WHERE id=?""", (id,))

		return self().__fill_from_row(db_row) if db_row else None

	@classmethod
	def get_by_guid(self, guid):
		db_row = Database.macrosdb().fetch_one(	"""
			SELECT
				plugin.id,
				plugin.name,
				plugin.description,
				plugin.author,
				plugin.picture,
				plugin.guid,
				plugin.zindex,
				plugin.version,
				plugin.protected
			FROM `plugin`
			WHERE guid=?""", (guid,))

		return self().__fill_from_row(db_row) if db_row else None


	def save(self):
		return self.__update() if self.id else self.__insert()

	def __insert(self):
		self.id = Database.macrosdb().commit(
			"""INSERT INTO plugin (name, description, author, picture, guid, zindex, version, protected) VALUES (?,?,?,?,?,?,?,?)""",
			 (self.name, self.description, self.author, self.picture, self.guid, self.zindex, self.version, self.protected))
		return self

	def __update(self):
		Database.macrosdb().commit(
		"""UPDATE plugin
			SET
				name=?,
				description=?,
				author=?,
				picture=?,
				guid=?,
				zindex=?,
				version=?,
				protected=?
			WHERE id=?""",
		 (self.name, self.description, self.author, self.picture, self.guid, self.zindex, self.version, self.protected, self.id))

		return self

	def delete(self,keep_storage=False):
		macros_list = self.get_macros()
		for macro in macros_list:
			macro.delete()
		timer_list = self.get_timer()
		for timer in timer_list:
			timer.delete()
		custom_event_list = self.get_custom_event()
		for cevent in custom_event_list:
			cevent.delete()

		Database.macrosdb().commit("""DELETE FROM plugin WHERE id=?""", (self.id,))
		if not keep_storage:
			Database.macrosdb().commit("""DELETE FROM kv_macro_storage WHERE namespace=?""", (self.guid,))

	def export(self):
		from StringIO import StringIO
		import base64

		from class_xml_plugin import XMLPlugin
		xml_plugin = XMLPlugin()

		xml_plugin.picture = base64.b64encode(application.storage.readall(self.picture)) if self.picture else ''
		xml_plugin.description = self.description if self.description else ''
		xml_plugin.name = self.name if self.name else ''
		xml_plugin.version = self.version if self.version else ''
		xml_plugin.author = self.author if self.author else ''
		xml_plugin.guid = self.guid


		#raise Exception(name, description, author)
		#outp.write(xml_plugin"<plugin guid='" + self.guid + "' name='" + name + "' description='" + description + "' picture='" + picture + "' author='" + author + "' version='"+ version +"'>")

		timers = self.get_timer()
		for timer in timers:
			from class_timer import Timer
			t = Timer.get_by_id(timer.id)
			xml_plugin.append_child( t.get_xmlnode() )

		custom_events = self.get_custom_event()
		for cevent in custom_events:
			from class_custom_event import CustomEvent
			ce = CustomEvent.get_by_id(cevent.id)
			xml_plugin.append_child( ce.get_xmlnode() )

		from VEE_sqlite3 import DatabaseManager
		from VEE_resources import ResourceFolderManager

		db_list = DatabaseManager(self.guid).databaselist
		for db in db_list:
			from class_plugin_db import PluginDB
			plugin_db = PluginDB(db, DatabaseManager(self.guid).export_db(db))
			xml_plugin.append_child( plugin_db.get_xmlnode() )

		res_list = ResourceFolderManager(self.guid).resourcelist
		for res in res_list:
			from class_resource import Resource
			resource = Resource(res, ResourceFolderManager(self.guid).export_res(res))
			xml_plugin.append_child( resource.get_xmlnode() )

		macros = self.get_macros()
		for macro in macros:
			from class_macro import Macros
			m = Macros.get_by_id(macro.id)
			xml_plugin.append_child( m.get_xmlnode() )

		outp = StringIO()
		outp.write( xml_plugin.toprettyxml().encode( 'utf8' ) )
		return outp

	def fill_from_xml(self, xml):
		self.name = xml.name
		self.description = xml.description
		self.guid = xml.guid
		self.version = xml.version
		self.author = xml.author
		self.protected = xml.protected

		plugin_picture_name = ""
		self.picture = ""
		if xml.picture:
			self.picture = plugin_picture_name = str(uuid4())
			application.storage.write(plugin_picture_name, base64.b64decode(xml.picture))
		self.save()

	def get_md5(self):
		import md5
		return md5.md5(self.export().getvalue()).hexdigest()
]]>
		</Library>
		<Library Name="ProSuiteLoginPage">
<![CDATA["""
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 23:35 (RTZ +5)"

import ProAdmin

from proadmin_sso import ClientLoginHelper
from prosuite_web import ProSuiteBasicPage, callback


class ProSuiteLoginPage(ProSuiteBasicPage):

    def login_as(self):
        """
        Login as root everytime
        """
        # FIXME: add comment
        # get user
        users = ProAdmin.application().get_users(email=self.app_settings.system["login_as"])
        if not users:
            return

        session['current_user'] = users[0]

    def process_user_login(self):
        """
        Try login to application
        """
        login_helper = ClientLoginHelper(
            request,
            response,
            self.get_argument("back_url", "") or self.get_home_url()
        )

        try:
            login_helper.login_by_token()
            login_helper.login_by_proadmin()
            login_helper.login_by_password()

        except ProAdmin.ProAdminEmptyPasswordError, ex:
            self.show_error_growl(
                self.localization["prosuite.login.empty_login_passwd_error"],
                self.localization["prosuite.login.login_error_title"],
            )

        except ProAdmin.ProAdminEmptyLoginError, ex:
            self.show_error_growl(
                self.localization["prosuite.login.empty_login_passwd_error"],
                self.localization["prosuite.login.login_error_title"],
            )

        except ProAdmin.ProAdminLoginError, ex:
            self.show_error_growl(
                self.localization["prosuite.login.invalid_login_passwd_error"],
                self.localization["prosuite.login.login_error_title"],
            )

    @callback("onload", 2)
    def onload(self, *args, **kwargs):
        """
        On page onload
        """
        self.vdom_objects["version.label"].value = self.get_application_version()
        self.vdom_objects["version.label"].hint = self.get_application_full_version()

        # FIXME: add comment
        if self.app_settings.system["login_as"]:
            self.login_as()

        self.process_user_login()

    def get_page_title(self):
        return self.localization["prosuite.login.title"]

    def get_application_version(self):
        return u"v. {version}".format(
            version=self.app_settings.info["version"]
        )

    def get_application_full_version(self):
        return u"{app_version}.{app_commit} -==- {template_version}.{template_commit}".format(
            app_version=self.app_settings.info["version"],
            app_commit=self.app_settings.info["commit"],
            template_version=self.app_settings.info["template_version"],
            template_commit=self.app_settings.info["template_commit"],
        )

    def get_localization_data(self):
        return {
            self.vdom_objects["login.label"]: "prosuite.login.login.label",
            self.vdom_objects["password.label"]: "prosuite.login.password.label",
        }
]]>
		</Library>
		<Library Name="ext_tasks">
<![CDATA["""
"""

import json
import os
import sys
import time
import traceback

from datetime import datetime, timedelta
from hashlib import sha1
from StringIO import StringIO


import ext_peewee as models

from ext_signals import Signal


def cls(inst):
    """
    Return class instance
    """
    return inst.__class__


# Signals
task_created_sig = Signal()
task_error_sig = Signal()
task_scheduled_sig = Signal()
task_rescheduled_sig = Signal()
task_failed_sig = Signal()
task_successful_sig = Signal()



# Task DB model
class Task(models.Model):

    # the "name" of the task/function to be run
    name = models.CharField(max_length=255, index=True)

    # the json encoded parameters to pass to the task
    func_args = models.TextField(null=True)

    # a sha1 hash of the name and params, to lookup already scheduled tasks
    hash = models.CharField(max_length=40, index=True)

    # task output
    output = models.TextField(null=True)

    # what priority the task has
    priority = models.IntegerField(default=0, index=True)

    # when the task should be run
    run_at = models.DateTimeField(index=True)

    # when the task last failed
    failed_at = models.DateTimeField(index=True, null=True)

    # when the task should be run
    finished_at = models.DateTimeField(null=True)

    # how many times the task has been tried
    attempts = models.IntegerField(default=0)

    # how many times the task can be re-scheduled
    max_attempts = models.IntegerField(default=0)

    # details of the error that occurred
    last_error = models.TextField(null=True)

    # details of who's trying to run the task at the moment
    locked_by = models.CharField(max_length=64, index=True, null=True)
    locked_at = models.DateTimeField(index=True, null=True)

    # repeat task every N seconds
    repeat_every = models.IntegerField(default=0)

    # repeat task N times
    repeat_times = models.IntegerField(default=0)


    manager = None


    def params(self):
        args, kwargs = json.loads(self.func_args)
        # need to coerce kwargs keys to str
        kwargs = dict((str(k), v) for k, v in kwargs.items())
        return args, kwargs

    def lock(self, locked_by):
        now = datetime.now()
        unlocked = list(cls(self).manager.unlocked(now).where(cls(self).id == self.id))
        if not unlocked:
            return None

        unlocked = unlocked[0]
        unlocked.locked_by = locked_by
        unlocked.locked_at = now
        unlocked.save()
        return unlocked

    def unlock(self):
        self.locked_by = None
        self.locked_at = None

    def _extract_error(self, type, err, tb):
        file = StringIO()
        traceback.print_exception(type, err, tb, None, file)
        return file.getvalue()

    def reschedule(self, type, err, traceback):
        self.last_error = self._extract_error(type, err, traceback)
        signal = None

        if self.attempts >= self.max_attempts:
            self.failed_at = datetime.now()
            signal = task_failed_sig

        else:
            self.attempts += 1
            backoff = timedelta(seconds=20)#(self.attempts ** 4) + 5)
            self.run_at = datetime.now() + backoff
            signal = task_rescheduled_sig

        self.unlock()
        self.save()

        # emit signal
        signal(task=self)

    def is_repeated(self):
        return self.repeat_times != 0

    def schedule_next_run(self):
        self.run_at = datetime.now()
        if self.repeat_every:
            self.run_at += timedelta(seconds=self.repeat_every)

        if self.repeat_times:
            self.repeat_times -= 1

    def save(self, *arg, **kw):
        # force NULL rather than empty string
        self.locked_by = self.locked_by or None
        return super(Task, self).save(*arg, **kw)

    def __unicode__(self):
        return u'%s(%s, id=%d, priority=%d, repeat_every=%d, repeat_times=%d, attempts=%d)' % (
            self.__class__.__name__,
            self.name,
            self.id,
            self.priority,
            self.repeat_every,
            self.repeat_times,
            self.attempts
        )

    def remove(self):
        self.delete_instance()



class TaskManager(object):

    def __init__(self, task_cls):
        self.task_cls = task_cls

    @property
    def max_run_time(self):
        return 100 #seconds

    def unlocked(self, now):
        expires_at = now - timedelta(seconds=self.max_run_time)
        return (self.task_cls.select()
                             .where(self.task_cls.finished_at == None)
                             .where((self.task_cls.locked_by == None) | (self.task_cls.locked_at < expires_at)))


    def find_available(self):
        now = datetime.now()
        return (self.unlocked(now)
                    .where(self.task_cls.run_at <= now)
                    .where(self.task_cls.failed_at == None)
                    .order_by(-self.task_cls.priority, self.task_cls.run_at))

    def new_task(self, name,
                       args=None,
                       kwargs=None,
                       run_at=None,
                       priority=0,
                       *targs,
                       **tkwargs):

        args = args or ()
        kwargs = kwargs or {}
        if run_at is None:
            run_at = datetime.now()

        func_args = json.dumps((args, kwargs))

        return self.task_cls(
            name=name,
            func_args=func_args,
            hash=sha1(name + func_args).hexdigest(),
            priority=priority,
            run_at=run_at,
            *targs,
            **tkwargs
        )




class TaskSchedule(object):

    SCHEDULE = 0

    def __init__(self, run_at=None, priority=None, action=None):
        self._run_at = run_at
        self._priority = priority
        self._action = action

    @classmethod
    def create(self, schedule):
        if isinstance(schedule, TaskSchedule):
            return schedule

        priority = None
        run_at = None
        action = None

        if schedule:
            if isinstance(schedule, (int, timedelta, datetime)):
                run_at = schedule
            else:
                run_at = schedule.get('run_at', None)
                priority = schedule.get('priority', None)
                action = schedule.get('action', None)

        return TaskSchedule(run_at=run_at, priority=priority, action=action)

    def merge(self, schedule):
        params = {}
        for name in ['run_at', 'priority', 'action']:
            attr_name = '_%s' % name
            value = getattr(self, attr_name, None)
            if value is None:
                params[name] = getattr(schedule, attr_name, None)
            else:
                params[name] = value

        return TaskSchedule(**params)

    @property
    def run_at(self):
        run_at = self._run_at or datetime.now()
        if isinstance(run_at, int):
            run_at = datetime.now() + timedelta(seconds=run_at)

        if isinstance(run_at, timedelta):
            run_at = datetime.now() + run_at
        return run_at

    @property
    def priority(self):
        return self._priority or 0

    @property
    def action(self):
        return self._action or TaskSchedule.SCHEDULE

    def __repr__(self):
        return 'TaskSchedule(run_at=%s, priority=%s)' % (self._run_at,
                                                         self._priority)

    def __eq__(self, other):
        return self._run_at == other._run_at \
           and self._priority == other._priority \
           and self._action == other._action



class DBTaskRunner(object):
    """
    Encapsulate the model related logic in here, in case
    we want to support different queues in the future
    """
    def __init__(self, task_cls):
        self.worker_name = str(os.getpid())
        self.task_cls = task_cls

    def schedule(self, name,
                       args,
                       kwargs,
                       run_at=None,
                       priority=0,
                       action=TaskSchedule.SCHEDULE,
                       *targs,
                       **tkwargs):
        """
        Simply create a task object in the database
        """
        unique = tkwargs.pop('unique', False)
        task = self.task_cls.manager.new_task(
            name,
            args,
            kwargs,
            run_at,
            priority,
            *targs,
            **tkwargs
        )

        if unique:
            try:
                same = self.task_cls.get(self.task_cls.hash == task.hash)
            except self.task_cls.DoesNotExist:
                pass
            else:
                return False

        task.save()
        task_created_sig(task=task)
        return task

    def get_task_to_run(self):
        tasks = self.task_cls.manager.find_available()[:5]
        for task in tasks:
            # try to lock task
            locked_task = task.lock(self.worker_name)
            if locked_task:
                return locked_task

        return None

    def run_task(self, tasks, task):
        signal = None
        args, kwargs = task.params()

        try:
            task.output = tasks.run_task(task.name, args, kwargs)

        except Exception:
            t, e, traceback = sys.exc_info()
            task.reschedule(t, e, traceback)
            del traceback

            signal = task_error_sig

        else:
            if task.is_repeated():
                task.schedule_next_run()
                signal = task_scheduled_sig

            else:
                task.finished_at = datetime.now()
                signal = task_successful_sig

            task.unlock()
            task.save()

        # emit signal
        signal(task=task)

    def run_next_task(self, tasks):
        task = self.get_task_to_run()
        if task:
            self.run_task(tasks, task)
            return True
        else:
            return False

    def search_task(self, uuid):
        cls = self.task_cls
        try:
            return cls.get(cls._uuid == uuid)

        except cls.DoesNotExist:
            return None


class TaskProxy(object):

    def __init__(self, name, function, schedule, runner, *args, **kwargs):
        self.targs = args
        self.tkwargs = kwargs
        self.name = name
        self.function = function
        self.runner = runner
        self.schedule = TaskSchedule.create(schedule)

    def __call__(self, *args, **kwargs):
        schedule = kwargs.pop('schedule', None)
        schedule = TaskSchedule.create(schedule).merge(self.schedule)
        run_at = schedule.run_at

        tkwargs = self.tkwargs.copy()
        targs   = self.targs[:]

        priority = tkwargs.pop('priority', None) or schedule.priority
        action = schedule.action

        return self.runner.schedule(
            self.name,
            args,
            kwargs,
            run_at,
            priority,
            action,
            *targs,
            **tkwargs
        )

    def __unicode__(self):
        return u'TaskProxy(%s)' % self.name



class Tasks(object):

    def __init__(self, runner):
        self._tasks = {}
        self._runner = runner

    def background(self, name=None, schedule=None, *args, **kwargs):
        """
        Decorator to turn a regular function into
        something that gets run asynchronously in
        the background, at a later time
        """

        # see if used as simple decorator
        # where first arg is the function to be decorated
        fn = None
        if name and callable(name):
            fn = name
            name = None

        def _decorator(fn):
            _name = name
            if not _name:
                _name = '%s.%s' % (fn.__module__, fn.__name__)

            proxy = TaskProxy(_name, fn, schedule, self._runner, *args, **kwargs)
            self._tasks[_name] = proxy
            return proxy

        if fn:
            return _decorator(fn)

        return _decorator

    def run_task(self, task_name, args, kwargs):
        if task_name in self._tasks:
            task = self._tasks[task_name]
        else:
            task = self._tasks[str(task_name)]
        return task.function(*args, **kwargs)

    def execute_task(self, task):
        self._runner.run_task(self, task)

    def run_next_task(self):
        return self._runner.run_next_task(self)

    def search_task(self, uuid):
        return self._runner.search_task(uuid)

    def stop_task(self, uuid):
        task = self.search_task(uuid)
        if not task or task.locked_by:
            return False

        task.finished_at = datetime.now()
        task.save()
        return True
]]>
		</Library>
		<Library Name="db_connection">
<![CDATA["""
"""

import threading


class Database(object):
    """
    """

    __slots__ = ("vdom_db", "name")
    _thread_local = threading.local()

    @classmethod
    def get_database(cls, db_name):
        """
        """
        if getattr(cls._thread_local, db_name, None) is None:
            vdom_db = getattr(application.databases, db_name)
            db = Database(vdom_db, db_name)
            setattr(cls._thread_local, db_name, db)

        return getattr(cls._thread_local, db_name)

    def __init__(self, db, name):
        self.vdom_db = db
        self.name = name

    def fetch_one(self, sqlquery, arguments=None):
        """
        """
        if arguments is None:
            arguments = []

        return self.vdom_db.fetchone(sqlquery, arguments)

    def fetch_all(self, sqlquery, arguments=None):
        """
        """
        if arguments is None:
            arguments = []
        return self.vdom_db.fetchall(sqlquery, arguments)

    def execute(self, sqlquery, arguments=None):
        """
        """
        if arguments is None:
            arguments = []
        return self.vdom_db.execute(sqlquery, arguments)

    def commit(self, sqlquery, arguments=None):
        """
        """
        if arguments is None:
            arguments = []
        self.vdom_db.execute(sqlquery, arguments)
        (lastrowid, count) = self.vdom_db.commit()

        return lastrowid


class DBObject(object):
    """
    """
    __slots__ = ("_id", )

    DB_TABLE = None
    DB_COLS = None

    def __init__(self):
        self._id = None

    @property
    def id(self):
        return self._id

    def is_new(self):
        """
        """
        return self._id is None

    def save(self):
        """
        """
        (self._insert if self.is_new() else self._update)()

    @classmethod
    def get_db_connection(cls):
        """
        """
        raise NotImplementedError

    def _pack_to_list(self, with_id=False):
        """
        """
        packed = [getattr(self, attr) for attr in self.DB_COLS]
        if with_id:
            packed.append(self.id)

        return packed

    def _insert(self):
        """
        """
        sql_query = u"""INSERT INTO {name}({cols}) VALUES({vals})""".format(
            name=self.DB_TABLE,
            cols=",".join(self.DB_COLS),
            vals=",".join(list("?" * len(self.DB_COLS)))
        )
        self._id = self.get_db_connection().commit(sql_query, self._pack_to_list(with_id=False))

    def _update(self):
        """
        """
        sql_query = u"""UPDATE {name} SET {cols} WHERE id=?""".format(
            name=self.DB_TABLE,
            cols=",".join(["%s=?" % col for col in self.DB_COLS])
        )
        self.get_db_connection().commit(sql_query, self._pack_to_list(with_id=True))

    def delete(self):
        """
        """
        sql_query = u"""DELETE FROM {name} WHERE id=?""".format(
            name=self.DB_TABLE
        )
        self.get_db_connection().commit(sql_query, arguments=[self.id])

    @classmethod
    def _fill_from_row(cls, row):
        """
        """
        raise NotImplementedError

    @classmethod
    def fetch(cls, where_clause='', group_clause='', order_clause='',
                   join_clause='', cols=None,
                   limit=None, offset=None, arguments=None):
        """
        """
        if join_clause:
            join_clause = u" " + join_clause

        if where_clause:
            where_clause = u" WHERE {}".format(where_clause)

        if group_clause:
            group_clause = u" GROUP BY {}".format(group_clause)

        if order_clause:
            order_clause = u" ORDER BY {}".format(order_clause)

        limit_clause = ''
        if limit is not None:
            limit_clause = u" LIMIT %d" % limit

            if offset is not None:
                limit_clause += u" OFFSET %d" % offset

        query = u"""SELECT id,{cols} FROM {name}{join_clause}{where_clause}{group_clause}{order_clause}{limit_clause}""".format(
            cols=",".join(cols if cols else cls.DB_COLS),
            name=cls.DB_TABLE,
            join_clause=join_clause,
            where_clause=where_clause,
            group_clause=group_clause,
            order_clause=order_clause,
            limit_clause=limit_clause,
        )
        return map(cls._fill_from_row, cls.get_db_connection().fetch_all(query, arguments))
]]>
		</Library>
		<Library Name="proadmin_ldap_object">
<![CDATA[import ldif
from StringIO import StringIO


class LDAPIncorrectDN( Exception ):
	""" Exception in dn data in init of ldap object
	"""
	def __init__( self ):
		Exception.__init__( self, 'Incorrect DN data' )


class LDAPObject:
	def __init__(self, dn, attributes):
		"""
		"""
		# tree nodes of this LDAP object
		self._nodes = []
		self.set_dn( dn )

		# object attributes
		self.attributes = attributes


	def get_dn( self ):
		""" get dn-string of this LDAP object
		"""
		return unicode( ",".join( self._nodes ) )

	def set_dn( self, dn ):
		""" set dn. It can be list of nodes, or string.
		"""
		# fill nodes from dn
		if type( dn ) in [ unicode ]:
			self._nodes = dn.split( ',' )
		elif type( dn ) in [ str ]:
			self._nodes = dn.decode( 'utf8' ).split( ',' )
		elif type( dn ) in [ list, tuple ]:
			self._nodes = ",".join( dn ).split( "," )
		else:
			raise LDAPIncorrectDN()


	def get_rdn( self ):
		return unicode( ",".join( self._nodes[:1] ) )

	def set_rdn( self, value ):
		"""
		"""
		self._nodes[0] = value


	def get_parent_dn(self):
		return unicode( ",".join( self._nodes[1:] ) )


	def get_ldif( self, mod_attrs=None ):
		""" get ldif of ldap object
		"""
		output = StringIO()

		if not mod_attrs:
			mod_attrs = self.attributes

		writer = ldif.LDIFWriter( output )
		writer.unparse( self.dn, mod_attrs )

		result = output.getvalue()
		output.close()

		return result


	dn 			= property( get_dn, set_dn )
	rdn 		= property( get_rdn, set_rdn )
	parent_dn 	= property( get_parent_dn )


	def __eq__( self, other ):
		if not other: return False
		return 	self.attributes == other.attributes	and self.dn == other.dn

	def __str__( self ):
		return str( self.dn ) + str( self.attributes )
]]>
		</Library>
		<Library Name="widget_custom_event">
<![CDATA[import json
import localization

class WidgetCustomEvent:
	def __init__(self):
		self.__datatable = None
		self.__custom_event_list = None

	def set_data(self, data):
		custom_event = []
		for ce in data:
			custom_event.append({"id" : ce.id,
					"Picture" : "<img src='/e574b9ce-9582-4962-ad7b-b11820dacc3d.png' />",
					"Name" : "<h1>" + ce.name + "</h1><p></p>",
					"Edit" : "<a href=''><img src='/910e3e46-f9cf-4aa7-9147-04ec354078c8.res'/>Edit custom event</a>",
					"Delete" : "<a href=''>Delete</a>"})
		self.__custom_event_list = json.dumps(custom_event)

	def render(self, datatable):
		self.__datatable = datatable
		self.__datatable.data = self.__custom_event_list

]]>
		</Library>
		<Library Name="promail_eac_new">
<![CDATA["""
"""

import json
import md5

from xml.dom.minidom import  parseString


import ProAdmin
from prosuite_utils import CachedProperty
from vdom_remote_api import VDOMService


def getText(nodelist):
    """
    Get data from node
    """
    rc = []
    for node in nodelist:
        if isData(node):
            rc.append(node.data)
    return ''.join(rc)


def isData(node):
    """
    Is it Node with data or not
    """
    return node.nodeType in (node.TEXT_NODE, node.CDATA_SECTION_NODE)


class EACParseException(Exception):
    pass


class CantParseRawWholeXMLError(EACParseException):
    pass


class InvalidWholeXMLError(EACParseException):
    pass


class InvalidAPIMethodPatternError(EACParseException):
    pass


class EACContent(object):

    def __init__(self):
        self.rawdata = {}

    @CachedProperty
    def __global_data(self):
        return self.rawdata.get('global', {})

    @CachedProperty
    def __api_data(self):
        return self.rawdata.get('api', {})

    @property
    def vdomxml(self):
        return self.rawdata.get('vdom', '')

    @property
    def events(self):
        return self.rawdata.get('events', {})

    @property
    def content_type(self):
        return self.__global_data.get('Content', 'static').lower()

    @property
    def auth_type(self):
        return self.__global_data.get('AuthType', 'external').lower()

    @property
    def api_server(self):
        return self.__api_data.get('server', '').lower()

    @property
    def api_methods(self):
        return self.__api_data.get('methods', {})

    @property
    def api_login_method(self):
        return self.api_methods.get('login', {})

    @property
    def api_get_method(self):
        return self.api_methods.get('login', {})

    @property
    def api_post_method(self):
        return self.api_methods.get('login', {})

    def is_static_content(self):
        return self.content_type == "static"

    def is_internal_auth(self):
        return self.auth_type == "internal"

    def has_api_login_method(self):
        return bool(self.api_methods.get('login', ''))

    def has_api_post_method(self):
        return bool(self.api_methods.get('post', ''))

    def has_api_get_method(self):
        return bool(self.api_methods.get('get', ''))

    def get_api_attr(self, key):
        return self.__api_data.get(key, '')


    @classmethod
    def parse_wholexml(cls, wholexml):
        """
        Parse WHOLE XML from EAC
        """
        try:
            dom = parseString(wholexml)

        except Exception as ex:
            raise CantParseRawWholeXMLError

        eacdata = cls()

        whole_elem = dom.getElementsByTagName("WHOLEXML")
        if whole_elem and whole_elem[0].tagName.lower() != "wholexml":
            raise InvalidWholeXMLError

        whole_elem = whole_elem[0]
        eacdata.rawdata['global'] = dict(whole_elem.attributes.items())

        api_elem = whole_elem.getElementsByTagName("API")
        if api_elem:
            eacdata.rawdata['api'] = cls._parse_api_section(api_elem[0])

        events_elem = whole_elem.getElementsByTagName("EVENTS")
        if events_elem:
            eacdata.rawdata['events'] = getText(events_elem[0].childNodes)

        vdomxml_elem = whole_elem.getElementsByTagName("VDOMXML")
        if vdomxml_elem:
            eacdata.rawdata['vdom'] = getText(vdomxml_elem[0].childNodes).replace("]]", "]]")

        return eacdata

    @classmethod
    def _parse_api_section(self, api):
        """
        Parse API section
        """
        result = dict(api.attributes.items())
        result['methods'] = {}

        for child in api.childNodes:
            if isData(child):
                continue

            name = child.tagName.lower()
            result['methods'][name] = dict(child.attributes.items())
            result['methods'][name]['pattern'] = ""

            pattern_el = child.getElementsByTagName("PATTERN")
            if not pattern_el:
                continue

            pattern = getText(pattern_el[0].childNodes)
            if pattern:
                try:
                    pattern = json.loads(pattern)
                except:
                    raise InvalidAPIMethodPattern

            result['methods'][name]['pattern'] = pattern

        return result





class EACConnectError(Exception):
    pass


class EACAPIError(EACConnectError):
    pass


class EACLoginError(EACAPIError):
    pass


class EACGetError(EACAPIError):
    pass


class EACPostError(EACAPIError):
    pass


class EACAttemptError(Exception):
    pass


class EACAttemptsFailedError(Exception):

    def __init__(self, attempts):
        Exception.__init__(self)
        self.attempts = attempts


def try_and_wait(attempts):
    """
    """
    def decorator(func):
        """
        """
        def wrapper(*args, **kwargs):
            """
            """
            last_error = None
            for attempt in range(attempts)
                try:
                    return func(*args, **kwargs)

                except Exception as ex:
                    if isinstance(ex, EACAttemptError):
                        continue

            raise EACAttemptsFailedError(attempts)

        return wrapper

    return decorator


class EACConnector(object):
    """
    Default EAC Connector
    """

    def __init__(self, eac_data):
        self.eac_data = eac_data

    def get_request_data(self):
        """
        Return Request Data for GET Method
        """
        pass

    def login_request_data(self):
        """
        Return Request Data for LOGIN Method
        """
        pass

    def post_request_data(self):
        """
        Return Request Data for POST Meothd
        """
        pass

    def get(self):
        """
        Call API GET Method
        """
        pass

    def post(self, data):
        """
        Call API POST Method
        """
        pass

    def login(self):
        """
        Call API LOGIN method
        """
        pass


class VdomEacConnector(EACConnector):
    """
    Default VDOM EAC connector
    """

    PROSUITE_LOGIN = "prosuite"
    PROSUITE_PASS = md5.new("prosuite").hexdigest()

    @CachedProperty
    def vdom_connector(self):
        return VDOMService.connect(
            self.eac_data.api_server,
            self.PROSUITE_LOGIN,
            self.PROSUITE_PASS,
            self.eac_data.get_api_attr('appID')
        )

    def get_request_data(self):
        """
        Return Request Data for GET Method
        """
        pass

    def login_request_data(self):
        """
        Return Request Data for LOGIN Method
        """
        pass

    def post_request_data(self):
        """
        Return Request Data for POST Meothd
        """
        pass

    @try_and_wait(attempts=3)
    def get(self):
        """
        Call API GET Method
        """
        pass

    @try_and_wait(attempts=3)
    def post(self, data):
        """
        Call API POST Method
        """
        pass

    @try_and_wait(attempts=3)
    def login(self):
        """
        Call API LOGIN method
        """
        if not self.eac_data.has_api_login_method():
            return True

        root_user = ProAdmin.application().get_users(email='root')[0]
        method = self.eac_data.api_login_method
        return self.vdom_connector.call(
            method['container'],
            method['action'],
            json.dumps({
                "login": root_user.email,
                "password": "root"
            })
        )






class EACConnector(object):

    def __init__(self, wholexml):
        self.wholedata = EACContent(wholexml.encode("utf8")).wholedata

    def is_static(self):
        return self.wholedata['global']['Content'].lower() == "static"

    def get_content(self):
        if self.wholedata['vdom']:
            return self.wholedata['vdom']

        return self.get_remote_content(self)

    def remote_login(self):
        root_user = ProAdmin.application().get_users(email='root')[0]

        method = self.wholedata['api']['methods']['login']
        return self.vdom_connector.call(
            method['container'],
            method['action'],
            json.dumps({
                "login": root_user.email,
                "password": "root"
            })
        )

    def get_remote_content(self):
        if 'login' in self.wholedata['api']['methods']:
            self.remote_login()

        if 'get' in self.wholedata['api']['methods']:
            method = self.wholedata['api']['methods']['get']

            pattern = ""
            if "pattern" in method:
                pattern = method["pattern"]
                pattern["data"] = {
                    "sessionToken": self.wholedata['global']["SessionToken"],
                    "required": {
                        "user.guid": ProAdmin.current_user().guid
                    }
                }
                pattern = json.dumps(pattern)


            response = self.vdom_connector.call(
                method['container'],
                method['action'],
                pattern
            )

            if response:
                response = json.loads(response)
                self.wholedata = EACContent(response[1].encode("utf8")).wholedata
                return self.wholedata

        return {}

    def post_to_remote(self, data):
        """
        """
        if 'login' in self.wholedata['api']['methods']:
            self.remote_login()

        if 'post' in self.wholedata['api']['methods']:
            method = self.wholedata['api']['methods']['post']

            pattern = ""
            if "pattern" in method:
                pattern = method["pattern"]
                pattern["data"] = {
                    "sessionToken": self.wholedata['global']["SessionToken"],
                    "required": {
                        "user.guid": ProAdmin.current_user().guid
                    },
                    "trigger": data
                }
                pattern = json.dumps(pattern)

            response = self.vdom_connector.call(
                method['container'],
                method['action'],
                pattern
            )

            if response:
                response = json.loads(response)
                self.wholedata = EACContent(response[1].encode("utf8")).wholedata
                return self.wholedata

        return {}
]]>
		</Library>
		<Library Name="ProSuiteRulesPage">
<![CDATA["""
ProSuite Rules Page
"""

__version__ = "1.0.1"
__lastmod__ = "10/30/2015 16:13 (RTZ +5)"


import json

from collections import defaultdict

import ProAdmin

from prosuite_errors import ProSuiteBaseError
from prosuite_utils import CachedProperty, escape_w_quote
from prosuite_web import ProSuiteBasicPage, administrator_only,\
                         authenticated, callback

from prosuite_widgets import Widget


########################################
#
# HTML TEMPLATES
#
########################################
RULES_TITLE_TMPLT = u'<div style="padding-left: 15px;" class="acl_container_title">{}</div>'
SUBJECTS_TITLE_TMPLT = u'<div class="acl_container_title" style="padding-left: 52px !important;">{}</div>'
OBJECTS_TITLE_TMPLT = u'<div style="padding-left: 15px;" class="acl_container_title">{}</div>'
APPLY_BUTTON_TMPLT = u'<div class="acl_apply">{}</div>'
CANCEL_BUTTON_TMPLT = u'<div class="acl_apply">{}</div>'

NODE_HTML_TMPLT = u"""<span title="{objtype}">{objname}</span>"""
TREE_HTML_TMPLT = u"""<ul>
    <li id="{guid}" data="isLazy: true, activate: true">
        <div>
            <span class="name"><span class='acl_app_object_icon'></span>{name}</span>
        </div>
        <ul></ul>
    </li>
</ul>"""

SUBJECT_ROW_TMPLT = u'<div class="acl_container_group">{name} ({rights})</div>'
ACCESS_ROW_TMPLT = u'<span title="{access}">{title}</span>'
STRIKE_ROW_TMPLT = u'<div class="strike"><span>{}</span></div>'



########################################
#
# Contstants
#
########################################
SELECTED_OBJECT_KEY = "object.selected.key"
SELECTED_SUBJECT_KEY = "subject.selected.key"
INHERITED_RULES_KEY = "subject.rules.inherited"


########################################
#
# Exceptions
#
########################################
class ObjectNotFoundError(ProSuiteBaseError): pass


class SubjectNotFoundError(ProSuiteBaseError): pass


class NoChildObjectsError(ProSuiteBaseError): pass



########################################
#
# Widgets
#
########################################
class ProAdminHelper(Widget):

    @CachedProperty
    def application(self):
        return ProAdmin.application()

    def find_object(self, guid):
        """
        Search ProAdmin object
        """
        pa_obj = self.application.get_by_guid(guid)
        if pa_obj:
            return pa_obj

        raise ObjectNotFoundError

    def find_subject(self, guid):
        """
        Search ProAdmin subject
        """
        pa_subj = self.application.get_subject(guid)
        if pa_subj:
            return pa_subj

        raise SubjectNotFoundError

    def get_access_types(self, pa_obj):
        """
        """
        return filter(
            lambda obj_type: obj_type.name == pa_obj.type,
            ProAdmin.scheme().get_aclobjecttypes()
        )[0].access_types

    def get_localized_access_types(self, pa_obj):
        loc_key = "global.proadmin.rules.{}.".format(pa_obj.type.lower())
        return {val: self.delegate.localization[loc_key + name.lower()] for val, name in self.get_access_types(pa_obj).items()}



class ObjectsTree(Widget):

    @property
    def selected_object(self):
        if not hasattr(self, "_selected_object"):
            guid = self.delegate.shared_vars.get(SELECTED_OBJECT_KEY, '') or "unknownobject"
            setattr(self, "_selected_object", self.delegate.proadmin.find_object(guid))

        return self._selected_object

    @selected_object.setter
    def selected_object(self, value):
        if isinstance(value, basestring):
            value = self.delegate.proadmin.find_object(value)

        setattr(self, "_selected_object", value)
        self.delegate.shared_vars[SELECTED_OBJECT_KEY] = value.guid

    @selected_object.deleter
    def selected_object(self):
        self.delegate.shared_vars[SELECTED_OBJECT_KEY] = ""
        try:
            delattr(self, "_selected_object")
        except:
            pass


    def onload_render(self):
        """
        Onload render
        """
        app = self.selected_object = self.delegate.proadmin.application

        # render root of the tree
        self.delegate.vdom_objects["objects.tree"].data = \
            TREE_HTML_TMPLT.format(guid=app.guid, name=escape_w_quote(app.name))

    def expand(self, parent_guid):
        """
        Fetch and show child objects
        """
        # fetch parent object
        parent = self.delegate.proadmin.find_object(parent_guid)

        # fetch object childs
        childs = [
            {
                "title": NODE_HTML_TMPLT.format(objtype=escape_w_quote(child.type), objname=escape_w_quote(child.name)),
                "key": child.guid,
                "isLazy": True
            } for child in parent.child_objects()
        ]

        if childs:
            self.delegate.vdom_objects["objects.tree"].action(
                "addNode",
                [
                    parent_guid,
                    json.dumps(childs)
                ]
            )

        else:
            raise NoChildObjectsError



class SubjectsList(Widget):

    @property
    def selected_subject(self):
        if not hasattr(self, "_selected_subject"):
            guid = self.delegate.shared_vars.get(SELECTED_SUBJECT_KEY, '') or "unknownobject"
            setattr(self, "_selected_subject", self.delegate.proadmin.find_subject(guid))

        return self._selected_subject

    @selected_subject.setter
    def selected_subject(self, value):
        if isinstance(value, basestring):
            value = self.delegate.proadmin.find_subject(value)

        setattr(self, "_selected_object", value)
        self.delegate.shared_vars[SELECTED_SUBJECT_KEY] = value.guid

    @selected_subject.deleter
    def selected_subject(self):
        self.delegate.shared_vars[SELECTED_SUBJECT_KEY] = ''
        try:
            delattr(self, "_selected_subject")
        except:
            pass

    @property
    def inherited_flag(self):
        return self.delegate.shared_vars.get(INHERITED_RULES_KEY, False)

    @inherited_flag.setter
    def inherited_flag(self, value):
         self.delegate.shared_vars[INHERITED_RULES_KEY] = value


    def show(self):
        """
        Show object's subjects
        """
        pa_obj = self.delegate.objects_tree.selected_object
        access_types = self.delegate.proadmin.get_localized_access_types(pa_obj)
        groups = self.delegate.proadmin.application.get_groups()
        users  = self.delegate.proadmin.application.get_users()
        inherited = self.inherited_flag

        rules_cache  = defaultdict(set)
        for obj, subj, access in pa_obj.fast_rules(for_myself=True):
            rules_cache[subj].add(access)

        output = [("",STRIKE_ROW_TMPLT.format(self.delegate.localization["prosuite.rules.subjects.groups"]),"")]
        output_append = output.append

        # render groups
        for group in sorted(groups, key=lambda g: g.name.lower()):

            rules = rules_cache.pop(group.guid, [])
            if inherited and rules:
                for user in group.get_users():
                    rules_cache[user.guid].update(rules)

            output.append((
                group.guid,
                SUBJECT_ROW_TMPLT.format(
                    name=escape_w_quote(group.name),
                    rights=escape_w_quote(", ".join([access_types.get(right, right) for right in rules]))
                ),
                ""
            ))

        # render users
        output.append(("",STRIKE_ROW_TMPLT.format(self.delegate.localization["prosuite.rules.subjects.users"]),""))
        for user in sorted(users, key=lambda u: u.name.lower()):
            output.append((
                user.guid,
                SUBJECT_ROW_TMPLT.format(
                    name=escape_w_quote(user.name),
                    rights=escape_w_quote(", ".join([access_types.get(right, right) for right in rules_cache.pop(user.guid, [])]))
                ),
                ""
            ))

        subjects_table = self.delegate.vdom_objects["subjects.list"]
        subjects_table.showheader      = "0"
        subjects_table.title           = ""
        subjects_table.selectionmode   = "0" # single
        subjects_table.hiddenfields    = json.dumps(["guid"])
        subjects_table.key             = "guid"
        subjects_table.header          = json.dumps(["guid", "name","arrow"])
        subjects_table.data            = json.dumps(output)

    def refresh(self):
        self.show()



class RulesList(Widget):

    @CachedProperty
    def rules_table(self):
        return self.delegate.vdom_objects["rules.list"]

    def erase(self):
        """
        Erase existing table data
        """
        self.rules_table.showheader = "0"
        self.rules_table.selectionmode = "1"
        self.rules_table.data = json.dumps([])

        self.delegate.shared_vars[SELECTED_SUBJECT_KEY] = ''

    def show(self):
        """
        Show subject's rules
        """
        pa_obj = self.delegate.objects_tree.selected_object
        pa_subj = self.delegate.subjects_list.selected_subject
        access_types = self.delegate.proadmin.get_localized_access_types(pa_obj)

        output = [(
                value,
                ACCESS_ROW_TMPLT.format(
                    access=escape_w_quote(value),
                    title=escape_w_quote(title))
            ) for value, title in access_types.items()]

        header = ACCESS_ROW_TMPLT.format(
            access="f",
            title=self.delegate.localization["global.proadmin.rules.default.full"]
        )

        rights = [rule.access for rule in pa_obj.rules(subject=pa_subj) if rule.subject == pa_subj]

        self.rules_table.showheader     = "1"
        self.rules_table.title          = ""
        self.rules_table.selectionmode  = "1"
        self.rules_table.hiddenfields   = json.dumps(["access"])
        self.rules_table.key            = "access"
        self.rules_table.header         = json.dumps(["access", header])
        self.rules_table.data           = json.dumps(output)
        self.rules_table.selectedrows   = json.dumps(rights)

    def reset(self):
        self.show()

    def apply_rights(self, rights):
        """
        Apply rights to subject and object
        """
        pa_obj = self.delegate.objects_tree.selected_object
        pa_subj = self.delegate.subjects_list.selected_subject
        access  = self.delegate.proadmin.get_access_types(pa_obj).keys()

        rights = set(rights) & set(access)
        obj_rules = set([r.access for r in pa_obj.rules(subject=pa_subj) if r.subject == pa_subj])

        # remove rules
        for rule in obj_rules - rights:
            pa_obj.remove_rule(pa_subj, rule)

        # add rules
        for rule in rights - obj_rules:
            pa_obj.add_rule(pa_subj, rule)

        pa_obj.save()







################################
#
# Page Controller
#
################################

class ProSuiteRulesPage(ProSuiteBasicPage):


    ################################
    #
    # Cached properties
    #
    ################################

    @CachedProperty
    def proadmin(self):
        return ProAdminHelper(self)

    @CachedProperty
    def objects_tree(self):
        return ObjectsTree(self)

    @CachedProperty
    def subjects_list(self):
        return SubjectsList(self)

    @CachedProperty
    def rules_list(self):
        return RulesList(self)


    ################################
    #
    # Localization
    #
    ################################

    def get_page_title(self):
        return self.localization["prosuite.rules.title"]

    def localize_page(self):
        super(ProSuiteRulesPage, self).localize_page()

        self.vdom_objects["rules.title"].title = \
            RULES_TITLE_TMPLT.format(self.localization["prosuite.rules.rules_col.title"])

        self.vdom_objects["subjects.title"].title = \
            SUBJECTS_TITLE_TMPLT.format(self.localization["prosuite.rules.subjects_col.title"])

        self.vdom_objects["objects.title"].title = \
            OBJECTS_TITLE_TMPLT.format(self.localization["prosuite.rules.objects_col.title"])

        self.vdom_objects["rules.apply"].text = \
            APPLY_BUTTON_TMPLT.format(self.localization["prosuite.rules.apply_button"])

        self.vdom_objects["rules.cancel"].text = \
            CANCEL_BUTTON_TMPLT.format(self.localization["prosuite.rules.cancel_button"])

    def get_localization_data(self):
        return {
            self.vdom_objects["subjects.inherited.checkbox"]: "prosuite.rules.subjects.inherited"
        }


    ################################
    #
    # Callback functions
    #
    ################################

    @callback('request_start', 2)
    @authenticated
    @administrator_only
    def on_request_start(self, *args, **kwargs):
        pass

    @callback('request_failed', 2)
    def errors_catch(self, exc):
        if isinstance(exc, ObjectNotFoundError):
            self.show_error_growl(
                self.localization["prosuite.rules.object_not_found_error.text"],
                self.localization["prosuite.rules.object_not_found_error.title"],
            )

        if isinstance(exc, SubjectNotFoundError):
            self.show_error_growl(
                self.localization["prosuite.rules.subject_not_found_error.text"],
                self.localization["prosuite.rules.subject_not_found_error.title"],
            )

        if isinstance(exc, NoChildObjectsError):
            self.show_info_growl(
                self.localization["prosuite.rules.no_child_objects_error.text"],
                self.localization["prosuite.rules.no_child_objects_error.title"],
            )

    @callback('onload', 2)
    def onload(self, *args, **kwargs):
        """
        On page load
        """
        self.objects_tree.onload_render()
        self.subjects_list.show()
        self.rules_list.erase()

    @callback
    def show_child_objects(self, *args, **kwargs):
        """
        Show child objects
        """
        self.objects_tree.expand(self.get_argument("nodeKey"))

    @callback
    def object_clicked(self, *args, **kwargs):
        """
        Show object's subjects
        """
        self.objects_tree.selected_object = self.get_argument("key")
        self.subjects_list.show()
        self.rules_list.erase()

    @callback
    def subject_clicked(self, *args, **kwargs):
        """
        Show subject's rules
        """
        subject_key = json.loads(self.get_argument("keyList"))[0]
        if subject_key:
            self.subjects_list.selected_subject = subject_key
            self.rules_list.show()

        else:
            self.rules_list.erase()

    @callback
    def reset_rights(self, *args, **kwargs):
        """
        Reset rules to default
        """
        self.rules_list.reset()

    @callback
    def apply_rights(self, *args, **kwargs):
        """
        Apply rights to object and subject
        """
        self.rules_list.apply_rights(self.shared_vars.get("selectedRules", []))
        self.subjects_list.refresh()

        self.show_info_growl(
            self.localization["prosuite.rules.rights_applied.text"],
            self.localization["prosuite.rules.rights_applied.title"],
        )

    @callback
    def show_hide_inherited(self, *args, **kwargs):
        """
        Show inherited or real rights
        """
        self.subjects_list.inherited_flag = self.get_argument("Value", "") == "1"
        self.subjects_list.refresh()
]]>
		</Library>
		<Library Name="prosuite_localization">
<![CDATA[import prosuite_localization_bg
import prosuite_localization_en
import prosuite_localization_ru
import prosuite_localization_fr

from prosuite_localization_utils import Localization, get_lang


LOCALIZATIONS = {
    "bg": prosuite_localization_bg,
    "en": prosuite_localization_en,
    "fr": prosuite_localization_fr,
    "ru": prosuite_localization_ru,
}


def get_localization():
    """
    """
    return Localization(loc_source=LOCALIZATIONS["en"].localization)
    return Localization(loc_source=LOCALIZATIONS[get_lang()].localization)
]]>
		</Library>
		<Library Name="proadmin_remote_settings">
<![CDATA[import ProAdmin
from class_db import Database


class RemoteSettings( object ):
	""" save settings for remote connection to ProAdmin
	"""

	# version of remote settings database
	__version__ = 2

	def __init__( self, login = None, password = None , server = None ):
		self._attributes 	= {}

		self[ 'server' ]	= server
		self[ 'login' ] 	= login
		self[ 'password' ]	= password



	def __getitem__( self, key ):
		return self._attributes.get( key, None )

	def __setitem__( self, key, value ):
		self._attributes[ key ] = value

	def __delitem__( self, key ):
		if key in self._attributes:
			del self._attributes[ key ]

	def keys( self ):
		return self._attributes.keys()



	def _fill_from_row( self, row ):
		self[ 'id' ] = row[0]
		self[ 'server' ] = row[1]
		self[ 'login' ] = row[2]
		self[ 'password' ] = row[3]

		#for key in row.keys():
		#	self[ key ] = row[ key ]

		return self



	def _ispersistent( self ):
		# check by id
		query = """
			SELECT id from remote_settings
			WHERE id = ?
		"""

		args = ( self.id, )
		row = Database.maindb().fetch_one( query, args )
		if row: return True


		# check by content
		query = """
			SELECT id from remote_settings
			WHERE server = ? AND login = ? and password = ?
		"""

		args = ( self.server, self.login, self.password )
		row = Database.maindb().fetch_one( query, args )
		if row: return True

		return False





	def _update( self ):
		if self.id is None:
			return self

		query = """
			UPDATE remote_settings
			SET
				server = ?,
				login = ?,
				password = ?

			WHERE id = ?
		"""

		args = ( self.server, self.login. self.password, self.id, )
		Database.maindb().commit( query, args )

		return self



	def _insert( self ):
		query = """
			INSERT INTO remote_settings (server, login, password)
			VALUES (?, ?, ?)
		"""

		args = ( self.server, self.login, self.password, )

		self.id = Database.maindb().commit( query, args )

		return self



	def _check_proadmin_host( self ):
		""" check that entered correct proadmin host
		"""
		return True
		# import urllib2

		# f = None
		# try:
		# 	url = self.server + '/sso_auth?test'

		# 	if not 'http://' in url:
		# 		url = 'http://' + url

		# 	f = urllib2.urlopen( url )
		# 	data = f.read()

		# 	if data.strip() != 'success':
		# 		raise Exception()

		# except:
		# 	return False

		# finally:
		# 	if f: f.close()

		# return True



	def _check_server_connection( self ):
		""" check that entered correct server connection settings
		"""
		from md5 import md5
		from vdom_remote_api import VDOMService

		service = VDOMService( self.server, self.login, md5( self.password ).hexdigest(), ProAdmin.PROADMIN_APPLICATION_GUID )

		try:
			service = service.open_session()
		except:
			return False

		return True





	def _check( self ):
		return self._check_server_connection() and self._check_proadmin_host()



	def save( self ):
		""" save data tot database
		"""

		if not self._check():
			return None

		# delete all old settings
		self.delete()

		if self._ispersistent():
			return self._update()
		else:
			return self._insert()

		return self




	@property
	def id( self ):
		return self[ 'id' ]

	@id.setter
	def id( self, value ):
		self[ 'id' ] = value


	@property
	def server( self ):
		return self[ 'server' ]

	@server.setter
	def server( self, value ):
		self[ 'server' ] = value


	@property
	def login( self ):
		return self[ 'login' ]

	@login.setter
	def login( self, value ):
		self[ 'login' ] = value


	@property
	def password( self ):
		return self[ 'password' ]

	@password.setter
	def password( self, value ):
		self[ 'password' ] = value




	@classmethod
	def get_remote_settings( self ):
		""" get remote settings from database
		"""
		query = """
			SELECT
				id as id,
				server as server,
				login as login,
				password as password

			FROM `remote_settings`
		"""

		row = Database.maindb().fetch_one( query )
		return self()._fill_from_row( row ) if row else None

	@classmethod
	def get_remote_setting( self ):
		""" alias for compatibility
		"""
		return self.get_remote_settings()


	@classmethod
	def get_all( self ):
		query = """
			SELECT
				id as id,
				server as server,
				login as login,
				password as password

			FROM `remote_settings`
		"""

		rows = Database.maindb().fetch_all( query )
		return [ self()._fill_from_row( row ) for row in rows ]



	@classmethod
	def delete( self ):
		Database.maindb().commit( 'DELETE FROM remote_settings' )




	# -------------------------------------------------
	#		Database modifications
	# -------------------------------------------------

	# TODO: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	@property
	def _version( self ):
		if not self._ispersistent():
			return None

		query = """
			SELECT version as version
			FROM remote_settings
			WHERE id = ?
		"""

		args = ( self.id, )

		row = Database.maindb().fetch_one( query, args )
		return int( row[ 'version' ] ) if row else 1


	@_version.setter
	def _version( self, value ):
		if not self._ispersistent():
			return

		query = """
			UPDATE remote_settings
			SET version = ?
			WHERE id = ?
		"""

		args = ( value, self.id, )
		Database.maindb().commit( query, args )



	def _update_database( self ):
		if self._version is None:
			return

		if self._version < RemoteSettings.__version__:
			self._update_2()



	def _update_2( self ):
		if self._version != 1:
			return

		# create `version` column
		query = """
			ALTER TABLE remote_settings
			ADD COLUMN version
		"""
		Database.maindb().commit( query )

		self._version = 2






]]>
		</Library>
		<Library Name="proadmin_db_aclobject">
<![CDATA[# from proadmin_ldap_connection import LDAPConnection
# from proadmin_ldap_object import LDAPObject
from proadmin_rule import Rule

import uuid as uuid
import cgi


_pack_scheme = ['object_type', 'guid', 'name', 'parent_guid', 'is_dirty']

class DbACLObject( object ):

	def __init__( self, db_tuple, scheme, is_new = None ):
		#is_new = None meaning Unknown state, need db check
		self.init_from_tuple(db_tuple)

		self.scheme	= scheme
		self.connection = scheme.connection

		self.is_new = is_new

		self._rules_cache = [] if self.is_new else None



	@classmethod
	def get_aclobjects( self, scheme, guid = None ):
		filter_dict = {}
		if guid: filter_dict["guid"] = guid

		raw_result = scheme.connection.select_cmd('aclobject', _pack_scheme, filter_dict)
		return [DbACLObject(child_tuple, scheme, is_new=False) for child_tuple in raw_result]

	def init_from_tuple(self, db_tuple):
		self._type_guid, self._guid, self._name, self._parent_guid, self.dirty = db_tuple


	def as_tuple(self):
		return (self._type_guid, self._guid, self._name, self._parent_guid, self.dirty)


	def is_dirty( self ):
		return self.dirty > 0

	def clear_dirty_bit( self ):
		self.dirty = -1

	def get_type( self ):
		return self._type_guid


	def get_guid( self ):
		return self._guid

	def set_guid( self, guid ):
		self._guid = guid

	def get_name( self ):
		return self._name

	def set_name( self, value ):
		#value = cgi.escape( value )
		self._name = value

	def get_parent( self ):
		return DbACLObject( self.connection.select_cmd('aclobject', _pack_scheme, {'guid': self._parent_guid} )[0], self.scheme, is_new=False )


	type 	= property( get_type )
	guid 	= property( get_guid, set_guid )
	name 	= property( get_name, set_name )
	parent 	= property( get_parent )


	def refresh( self ):
		self.init_from_tuple( self.connection.select_cmd('aclobject', _pack_scheme, {'guid': self.guid} )[0] )


	def delete( self, parent_dirty=True ):
		# mark dirty-bit in parent object
		if parent_dirty and self.parent:
			self.parent.save()

		self.connection.delete_cmd('rule', {'aclobject_guid': self.guid} )
		self.connection.delete_cmd('aclobject', {'guid': self.guid} )

	def create_child( self, type, name, guid = '' ):

		if not guid:
			guid = str( uuid.uuid4() )

		child_tuple = (type, guid, name, self.guid, 1);

		return DbACLObject( child_tuple, self.scheme, is_new=True )




	def get_by_guid( self, guid ):
		""" search ACL object by guid in subtree include this object
		"""
		if not guid:
			return None

		if guid == self.guid:
			return self

		objects = self.child_objects( guid=guid, recursive=True )
		return objects[0] if objects else None


	def child_objects(self, guid=None, type=None, name=None, recursive=False):
		""" return list of child objects
		"""
		object_type_list = self.listify(type)
		guid_list = self.listify(guid)
		name_list = self.listify(name)

		condition1 = [ ('parent_guid = ?', self.guid) ]
		condition2 = [ ('object_type = ?', item) for item in object_type_list]
		condition3 = { 'guid': guid_list }
		condition4 = [ ('name = ?', item) for item in name_list]

		raw_result = self.connection.select_cmd('aclobject', _pack_scheme, [condition1, condition2, condition3, condition4])

		result = [DbACLObject(child_tuple, self.scheme, is_new=False) for child_tuple in raw_result]
		result.sort( cmp=lambda a,b: cmp(a.name, b.name) )


		#recursive query
		if recursive:
			child_results = [child.child_objects(guid, type, name, recursive) for child in self.child_objects()]
			for ch in child_results:
				result += ch

		return result


	def listify(self, scalar_or_list):
		if scalar_or_list is None: return []

		if isinstance( scalar_or_list, list ) or isinstance( scalar_or_list, tuple ) : return list(scalar_or_list)

		return [scalar_or_list]

	def create_rules(self, rule_tuples):
		from proadmin_db_user import DbUser
		from proadmin_db_group import DbGroup
		#TODO: refactor here, very slow
		subject_cache = {}
		aclobject_cache = {}

		result = []
		for aclobject_guid, subject_guid, access in rule_tuples:
			#subject and objects are localy cached not to fetch db every time
			if aclobject_guid not in aclobject_cache:
				aclobject = self if aclobject_guid == self.guid else DbACLObject.get_aclobjects(scheme = self.scheme, guid = aclobject_guid)[0]
				aclobject_cache[aclobject_guid] = aclobject
			else:
				aclobject = aclobject_cache[aclobject_guid]

			if subject_guid not in subject_cache:
				subject = (DbUser.get_users(scheme = self.scheme, guid = subject_guid) or DbGroup.get_groups(scheme = self.scheme, guid = subject_guid))[0]
				subject_cache[subject_guid] = subject
			else:
				subject = subject_cache[subject_guid]


			result.append(Rule(aclobject, subject, access))
		return result

	def rules_cache(self):
		if self._rules_cache is None:
			self._rules_cache = self.create_rules( self.fast_rules(for_myself = True) )
		return self._rules_cache

	def get_rules_tuples( self ):
		return [ (r.subject, r.access) for r in self.rules_cache() ]

	def set_rules_tuples( self, subject_access_list ):
		self._rules_cache = [] #empty cache
		for (s, a) in subject_access_list:
			self.add_rule(s, a)

	def rules( self, subject=None, access=None ):
		subject_list = self.listify(subject)
		access_list = self.listify(access)

		guid_list = reduce(lambda a,b: a+b, [s.get_guid_list() for s in subject_list],[])

		rules = self.rules_cache()
		if subject_list:
			rules = filter( lambda x: x.subject.guid in guid_list, rules)
		if access_list:
			rules = filter( lambda x: x.access in access_list, rules)
		return rules


	def child_rules( self, objecttype=None, subject=None, access=None, recursive=False ):
		return self.create_rules( self.fast_rules(objecttype, subject, access, recursive) )


	def fast_rules( self, objecttype=None, subject=None, access=None, recursive=False, get_empty=False, for_myself=False):
		""" fast implementation for rules retreive. return rule like tuple of guids: (obj, subj, access)
		"""
		objecttype_list = self.listify(objecttype)
		subject_list = self.listify(subject)
		access_list	= self.listify(access)

		subject_guid_list = reduce(lambda a,b: a+b, [s.get_guid_list() for s in subject_list],[])


		condition1 = [ ('aclobject.parent_guid = ?', self.guid) ] if not for_myself else [ ('aclobject_guid = ?', self.guid) ]
		condition2 = { 'subject_guid': [ s_guid for s_guid in subject_guid_list] }
		condition3 = { 'access': access_list }
		condition4 = { 'aclobject.object_type': objecttype_list }

		where_clause, parameters = self.connection.build_complex_where_clause( [condition1, condition2, condition3, condition4] )
		query = '''SELECT aclobject_guid, subject_guid, access
			FROM rule ''' + 	(''' JOIN aclobject ON rule.aclobject_guid = aclobject.guid''' if not for_myself or objecttype_list else "")	+ ''' WHERE ''' + where_clause

		result = self.connection.fetch_all(query, parameters)

		#recursive query
		if recursive:
			child_results = [child.fast_rules(objecttype, subject, access, recursive, get_empty, for_myself) for child in self.child_objects()]
			for ch in child_results:
				result += ch

		return result




	def add_rule( self, subject, access ):
		r = Rule(subject=subject, object=self, access=access)
		if r not in self.rules_cache():
				self._rules_cache.append(r)


	def remove_rule( self, subject, access ):
		self.rules_cache() # ensure lazy-initialize
		self._rules_cache.remove( Rule(subject=subject, object=self, access=access) )


	def force_remove_rule( self, subject, access, force=True ):
		self.remove_rule(subject, access)
		self.connection.delete_cmd('rule', {"aclobject_guid": self.guid, "subject_guid": subject.guid, "access": access})



	def inherit_rules(self):
		rt = self.get_rules_tuples() #save for future

		query = """WITH RECURSIVE child(guid) AS (
			VALUES(?)
			UNION
				SELECT aclobject.guid
				FROM aclobject, child
				WHERE aclobject.parent_guid = child.guid
			)
			DELETE FROM rule WHERE aclobject_guid in child"""

		self.connection.execute( query, (self.guid,) )

		query = """WITH RECURSIVE child(guid) AS (
			VALUES(?)
			UNION
				SELECT aclobject.guid
				FROM aclobject, child
				WHERE aclobject.parent_guid = child.guid
			)
			INSERT INTO rule (aclobject_guid, subject_guid, access) SELECT child.guid, request_rule.subject, request_rule.access FROM child JOIN ({}) as request_rule""".format(" UNION ".join(["SELECT ? as subject,? as access"]*len(rt)))

		self.connection.execute( query, [self.guid ] + reduce( list.__add__, map(lambda x: [x[0].guid, x[1]], rt), []) )


	def _exist( self ):
		if self.is_new is None: #do not know the state of object, check in DB
			return len(self.connection.select_cmd('aclobject', _pack_scheme, {'guid': self.guid} )) > 0

		return not self.is_new #skip request if is_new is forced

	def save( self ):
		self.dirty = 1 if self.dirty != -1 else 0 #force clean in dirty == -1

		if self._exist():
			self.connection.update_cmd('aclobject', dict(zip(_pack_scheme, self.as_tuple())), {"guid": self.guid}) #todo: update only changed fields
		else:
			self.connection.insert_cmd('aclobject', _pack_scheme, self.as_tuple()  )

		if self._rules_cache is not None:

			self.connection.delete_cmd( 'rule', {"aclobject_guid": self.guid} )
			self.connection.insertmany_cmd( 'rule', ('aclobject_guid', 'subject_guid', 'access'), [(rule.object.guid,rule.subject.guid,rule.access) for rule in self.rules_cache()])

		self.is_new = False
		return self






	@classmethod
	def application( self, name, guid, scheme ):
		application_tuple = ("Application", guid, name, None, 0)

		app = DbACLApplication(application_tuple, scheme)
		if not app._exist():
			app.save()

		return app






	def __eq__( self, other ):
		if not other: return False
		return self.as_tuple() == other.as_tuple()

	def __hash__( self ):
		return hash( self.guid )

	def __str__( self ):
		return "DbACLObject: (Type: " + self.type + ", Name: " + self.name + ")"






class DbACLApplication( DbACLObject ):

	def get_parent(self):
		return None

	parent = property(get_parent)

	def delete(self):
		import ProAdmin
		super(DbACLApplication, self).delete()
		ProAdmin.unregister_default_scheme()



	def get_subjects( self, guid=None ):
		users = self.get_users( guid=guid )
		groups = self.get_groups( guid=guid )
		return users + groups

	def get_subject( self, guid ):
		result = self.get_subjects( guid=guid )
		return result[0] if result else None


	def create_user(self, email=''):
		""" create new application user
		"""
		users = self.get_users( email = email )
		if users: return users[0]

		user = self.scheme.create_user()
		user.email = email

		return user


	def create_root_user( self, password='root' ):
		""" create root user if not exists. root-is default password
		"""
		root = self.scheme.create_root_user(password)
		if not self.rules( root, 'a' ):
			self.add_rule( root, 'a' )
			self.save()


	def get_users( self, email=None, guid=None ):
		""" get application users
		"""
		return self.scheme.get_users( email = email, guid = guid )



	def create_group( self, name ):
		""" create new application group
		"""
		groups = self.get_groups( name = name )
		if groups: return groups[0]

		group = self.scheme.create_group( name = name )
		#group.name = name

		return group



	def create_admins_group( self ):
		""" create admin group if not exists
		"""
		admins = self.scheme.create_admins_group()
		if not self.rules( admins, 'a' ):
			self.add_rule( admins, 'a' )
			self.save()




	def get_groups( self, name=None, guid=None, user=None ):
		""" get application groups
		"""
		return self.scheme.get_groups( name=name, guid=guid, user=user )


	def get_admin( self ):
		"""get application admin user
		"""
		return self.scheme.get_admin()



	def force_remove_rule( self, subject, access, force=True ):
		""" special remove for application.
		"""
		if not subject: return

		if subject.is_admin() and access == 'a' and not force:
			return

		ACLObject.force_remove_rule( self, subject, access, force )


	def child_objects(self, guid=None, type=None, name=None, recursive=False):
		""" return list of child objects
		"""
		if not recursive: return super(DbACLApplication, self).child_objects(guid, type, name, recursive)


		object_type_list = self.listify(type)
		guid_list = self.listify(guid)
		name_list = self.listify(name)

		condition1 = [ ('guid != ?', self.guid) ] #Not inclued myself
		condition2 = [ ('object_type = ?', item) for item in object_type_list]
		condition3 = {'guid': guid_list}
		condition4 = [ ('name = ?', item) for item in name_list]

		raw_result = self.connection.select_cmd('aclobject', _pack_scheme, [condition1, condition2, condition3, condition4])

		result = [DbACLObject(child_tuple, self.scheme, is_new=False) for child_tuple in raw_result]
		result.sort( cmp=lambda a,b: cmp(a.name, b.name) )

		return result

]]>
		</Library>
		<Library Name="prosuite_database">
<![CDATA["""
"""

from prosuite_logging import root_logger
from prosuite_orm import SqliteFKDatabase


class ProSuiteDatabase(SqliteFKDatabase):

    logger = None#SqliteFKDatabase.logger.getChild("ProSuite")


ProSuiteDatabase = ProSuiteDatabase(
    "prosuite/prosuite.sqlite",
    threadlocals=True,
    journal_mode="WAL"
)
]]>
		</Library>
		<Library Name="class_xml_plugin_db">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLPluginDB( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'database' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, obj, recursive=False, comparer=None ):
		result = Node.find( self, obj, recursive, comparer )

		if type(obj) not in [ str, unicode ]:
			return result

		if not result:
			result = self.create_child( obj )

		return result


	@property
	def name( self ):
		return self.find( 'name' ).text

	@name.setter
	def name( self, value ):
		self.find( 'name' ).text = value

	@property
	def db_source( self ):
		return self.find( 'db_source' ).text

	@db_source.setter
	def db_source( self, value ):
		self.find( 'db_source' ).text = value
]]>
		</Library>
		<Library Name="VEE_promail_lib">
<![CDATA[
		]]>
		</Library>
		<Library Name="prosuite_utils">
<![CDATA["""
"""

import cgi


class CachedProperty(object):

    def __init__(self, func):
        self.func = func

    def __get__(self, instance, cls=None):
        result = instance.__dict__[self.func.__name__] = self.func(instance)
        return result


def to_list(data):
    """
    """
    if not isinstance(data, (list, tuple)):
        data = [data]

    return data


def escape_w_quote(data):
    """
    """
    return cgi.escape(data, True)
]]>
		</Library>
		<Library Name="proadmin_config">
<![CDATA[import ProAdmin


def create_default_scheme():
	""" insert here creating of application scheme
	"""
	from proadmin_remote_settings import RemoteSettings
	remote = RemoteSettings.get_remote_setting()

	if remote:
		scheme = create_remote_scheme()
	else:
		scheme = create_local_scheme()

	scheme.set_information( application.name )


	# set scheme options
	scheme.set_option( 'api_guid', '5073ff75-da99-44fb-a5d7-e44e5ab28598' ) # API
	scheme.set_option( 'subjects_limit', None ) # subjects limitation

	app_guid = application.id #"26d94c75-ce3d-4019-8475-daf6206db7e3"
	app_type = ProAdmin.ACLObjectType("Application", app_guid)
	app_type.set_access_types( {"a": "Admin"} )
	scheme.add_aclobjecttype( app_type )

	# create Mailbox ACL Type
	mailbox_guid = '24d8c50b-1de8-4c25-995f-eb127d51f154'
	mailbox_type = ProAdmin.ACLObjectType( 'Mailbox', mailbox_guid )
	mailbox_type.set_access_types({
		"d": "Delete",
		"o": "Owner",
		"r": "Read",
		"w": "Write",
	})
	scheme.add_aclobjecttype( mailbox_type )

	# create Archive ACL Type
	archive_guid = '34d8c50b-1de8-4c25-995f-eb127d51f154'
	archive_type = ProAdmin.ACLObjectType( 'Archive', archive_guid )
	archive_type.set_access_types({
		"d": "Delete",
		"r": "Read",
		"w": "Write",
	})
	scheme.add_aclobjecttype( archive_type )

	# create Archive ACL Type
	label_guid = '44d8c50b-1de8-4c25-995f-eb127d51f154'
	label_type = ProAdmin.ACLObjectType( 'Label', label_guid )
	label_type.set_access_types({
		"s": "Shared",
		"o": "Owner",
	})
	scheme.add_aclobjecttype( label_type )


	scheme.register()

	# create admins group and admin user
	app = ProAdmin.application()
	app.create_root_user( password='root' )
	app.create_admins_group()

	if not app.child_objects(name='Mailboxes', type='Mailbox'):
		app.create_child(
			type='Mailbox',
			name='Mailboxes',
		).save()

	if not app.child_objects(name='Labels', type='Label'):
		app.create_child(
			type='Label',
			name='Labels',
		).save()



def create_local_scheme():
	""" create local scheme
	"""
	import os
	import ProAdmin
	from proadmin_db_scheme import DbApplicationScheme
	from proadmin_db_connection import DbConnection

	from prosuite_settings import settings

	database_dir = os.path.join(
		application.storage.abs_path(settings.databases["path"]),
		"proadmin"
	)

	try:
		os.stat(database_dir)
	except Exception as ex:
		os.makedirs(database_dir)

	db_path = os.path.join(database_dir, "proadmin.sqlite")
	connection = DbConnection(db_path)

	# create application scheme
	scheme = DbApplicationScheme( application.id, connection )
	return scheme



def create_memory_scheme():
	""" create local scheme memory
	"""
	import ProAdmin
	from proadmin_db_scheme import DbApplicationScheme
	from proadmin_db_connection import DbConnection

	connection = DbConnection()

	# create application scheme
	scheme = DbApplicationScheme( application.id, connection )
	return scheme



def create_remote_scheme():
	""" insert here creating of application scheme
	"""
	import ProAdmin
	from vdom_remote_api import VDOMService
	from md5 import md5
	from proadmin_remote_sync import RemoteSync

	from proadmin_remote_application_scheme import RemoteApplicationScheme
	from proadmin_db_connection import DbConnection

	from class_remote_settings import RemoteSettings

	# create connection to ProAdmin
	remote = RemoteSettings.get_remote_setting()

	server 		= remote.server
	login		= remote.login
	password	= md5( remote.password ).hexdigest()
	app_id		= '491d4c93-4089-4517-93d3-82326298da44'

	# create ldap connection


	import os

	db_path = application.storage.abs_path('test_db.sqlite')
	if not os.path.exists(application.storage.abs_path('')):
		os.makedirs(application.storage.abs_path(''))
	connection = DbConnection(db_path)


	try:
		service = VDOMService( server, login, password, app_id ).open_session()

		# create application scheme
		scheme = RemoteApplicationScheme( application.id, connection )
		scheme.set_sync_service( service )

	except Exception,ex:
		RemoteSettings.delete()
		scheme = create_local_scheme()

	return scheme
]]>
		</Library>
		<Library Name="proadmin_rule">
<![CDATA[class Rule( object ):
	""" class for represent ACL Rule
	"""
	def __init__( self, object=None, subject=None, access=None):
		self.object 	= object
		self.subject 	= subject
		self.access 	= access


	def delete( self ):
		""" delete rule with admins protection
		"""
		return self.force_delete( force=False )


	def force_delete( self, force=True ):
		""" delete rule for admins too
		"""
		if self.object and self.subject:
			self.object.force_remove_rule( self.subject, self.access, force )
			self.object.save()



	def __eq__( self, other ):
		if not other: return False
		return self.object.guid == other.object.guid and self.subject.guid == other.subject.guid and self.access == other.access



	def __hash__( self ):
		return hash( self.object.guid + self.subject.guid + self.access )



	def __str__( self ):
		obj_name 	= self.object.guid
		subj_name 	= self.subject.guid
		access_text = self.access if self.access else ''

		return "Rule: (" + obj_name + ', ' + subj_name + ", '" + access_text + "')"

	def __repr__(self):
		return self.__str__()


	# -------------------------------------------------------------------
	# 		Retreive methods
	# -------------------------------------------------------------------

	@classmethod
	def get_rules( self, object, subject=None, access=None ):
		""" retreive rules for object
		"""
		if not object:
			return []

		if not subject: subject = []
		if not access:	access 	= []

		# make lists from arguments
		if not isinstance( subject, list ):
			subject = [ subject ]

		if not isinstance( access, list ):
			access	= [ access ]

		# get subject guids list
		guids = []
		for s in subject:
			guids += s.get_guid_list()
		guids = list( set(guids) )

		app 		= object.scheme.application
		tuples 		= object.get_rules_tuples()

		# create result rules
		result = []

		for guid, rule in tuples:
			if ( guid in guids or not guids ) and ( rule in access or not access ):
				subject = app.get_subject( guid = guid )
				if subject:
					result.append( Rule( object, subject, rule ) )

		return result



	@classmethod
	def fast_rules( self, object=None, subject=None, access=None, recursive=False, get_empty=False ):
		""" fast implementation for rules retreive. return rule like tuple of guids: (obj, subj, access)
		"""
		import ProAdmin

		if not object: object = ProAdmin.application()
		if not subject: subject = []
		if not access:	access 	= []

		# make lists from arguments
		if not isinstance( subject, list ):
			subject = [ subject ]

		if not isinstance( access, list ):
			access	= [ access ]

		# get subject guids list
		subjects = []
		for s in subject:
			subjects += s.get_guid_list()
		subjects = list( set(subjects) )


		result = []

		# check root object
		rules_tuples = object.get_rules_tuples()
		for subj, right in rules_tuples:
			if ( subj in subjects or not subjects ) and ( right in access or not access ):
				rule = ( object.guid, subj, right )
				result.append( rule )

		if get_empty and not rules_tuples:
			rule = ( object.guid, None, None )
			result.append( rule )

		if not recursive:
			return result


		# fix for dubling
		result = []


		# filter for get only objects
		filter = '(|(objectClass=document)(objectClass=organizationalUnit))'

		# generate subjects-access filter
		subj_filter = ''

		for guid in subjects:
			if not access:
				subj_filter += '(description=%s,%s)' % (guid, '*')
				continue

			for a in access:
				subj_filter += '(description=%s,%s)' % (guid, a)

		if subj_filter:
			filter += '(|%s)' % subj_filter
			filter = '(&%s)' % filter


		# execute query
		connection = object.scheme.connection
		objects = connection.search( object.ldapobject.dn, filter, recursive=recursive )

		for o in objects:
			o_guid = o.attributes.get('documentIdentifier', [''])[0]

			# if no rules for this ACL object but need all
			if get_empty and o.attributes.get('description', None) is None:
				rule = ( o_guid, None, None )
				result.append( rule )
				continue

			# process rules for this ACL object
			for description in o.attributes.get('description', []):
				if ',' not in description:
					description += ','

				s_guid, a_letter = description.split( ',' )
				if subjects and s_guid not in subjects: continue
				if access and a_letter not in access: continue

				rule = ( o_guid, s_guid, a_letter )
				result.append( rule )

		return result

]]>
		</Library>
		<Library Name="VEE_core">
<![CDATA[from collections import deque
from VEE_events import VEE_StopEngineEvent, VEE_TimerEvent, VEE_StartEngineEvent
from VEE_timer import VEE_timer
from VEE_logs import EngineMessage
from VEE_utils import encodeUTF8
from datetime import datetime
import Queue
import logging
from prosuite_logging import DequeMemoryHandler, app_logger as root_logger


MAX_LOG_LEN = 200

disable = getattr(application, 'ENV_DISABLE_VSCRIPT', False)

workflow_queue  = Queue.Queue()
compiler_queue  = Queue.Queue()
queue_thread = None
compiler_thread = None

class VdomEventEngine:
    def __init__( self ):
        self.listeners          = {}
        self.timers             = {}
        self.setup_logging()
        self.engine_start()

    def setup_logging(self):
        '''
        '''
        memory_hdlr = DequeMemoryHandler(capacity=MAX_LOG_LEN)
        self.logs = memory_hdlr

        self.engine_logger = root_logger.getChild('Engine')
        self.engine_logger.addHandler(memory_hdlr)
        self.engine_logger.setLevel(logging.DEBUG)
        self.engine_logger.info('Engine logger initialized!')

        self.plugin_logger = root_logger.getChild('Plugin')
        self.plugin_logger.addHandler(memory_hdlr)
        self.plugin_logger.setLevel(logging.DEBUG)
        self.plugin_logger.info('Plugin logger initialized!')

    def engine_start( self ):
        if disable:
            return

        from VEE_time_trigger import engineTimeTrigger
        from VEE_compiler_trigger import compilerTimeTrigger
        self.put_event( VEE_StartEngineEvent() )

        self.engine_logger.info("Starting engine thread...")
        engineTimeTrigger().start()

        self.engine_logger.info("Starting compiler thread...")
        compilerTimeTrigger().start()

        self.engine_logger.info(  u"Engine started." )


    def engine_stop( self ):
        self.engine_logger.info(  u"Engine stopped." )
        if queue_thread:
            queue_thread.stop()
        if compiler_thread:
            compiler_thread.stop()
        self.clear_all()


    def load_listeners( self ):
        from class_macro import register_all_event_macro
        register_all_event_macro()


    def put_event( self, event ):
        workflow_queue.put( event )


    def process_queue( self ):
        event = None
        try:
            event = workflow_queue.get( True, 20 )
        except Queue.Empty:
            self.check_timers()
            return 2.0

        if isinstance( event, VEE_TimerEvent ):
            self.engine_logger.info(  u"Recieved event of class '{timeClass}' with mame '{timerName}'".format(
                        timeClass = event.__class__.__name__[ 4: ],
                        timerName = event.timer.timer.name.split( ":", 1 )[ 1 ] ) )

        else:
#           self.info( ( u"Recieved event of class '{className}' ({cls}:{hash})".format(
#                       className = event.__class__.__name__[ 4: ],
#                       cls = event.__class__.__name__,
#                       hash = hash( event ) ) ) )
            self.engine_logger.info( ( u"Recieved event of class '{className}'".format(
                        className = event.__class__.__name__[ 4: ]  ) ) )


            if isinstance( event, VEE_StopEngineEvent ):
                self.engine_stop()
                return

            elif isinstance( event, VEE_StartEngineEvent ):
                self.load_listeners()
                return

        key = ( event.__class__, hash( event ) )
        if key in self.listeners:
            dispatchers = self.listeners[ key ]
            self.engine_logger.info(  u"Event '{className}' has {dispatchersCount} dispatchers".format(
                        className = event.__class__.__name__[4:],
                        dispatchersCount = len( dispatchers ) ) )

            for dispatcher in dispatchers.itervalues():
                dispatcher( event )

        else:
            self.engine_logger.info(  u"No dispatcher for given event '{className}'".format(
                        className = event.__class__.__name__[4:] ) )

        #check for webdav activity
        try:
            from webdav_server.vdom_dav_provider import get_properties
            if (datetime.now() - get_properties.last_access()).total_seconds()<30:
                return 10.0
        except Exception as e:
            return 1.0

    def get_dispatcher_by_event( self, event ):
        key = ( event.__class__, hash( event ) )
        if key in self.listeners:
            return self.listeners[ key ].values()[ 0 ]

        return None

    def do_compile(self):
        task = None
        try:
            task = compiler_queue.get( True, 20 )
        except Queue.Empty:
            return

        macro, event_class, key, dispatcher =  task
        self.engine_logger.debug("%s[%s] - start compiling", macro.name, macro.guid)
        ret = dispatcher.compile()
        if ret == COMPILATION_SUCCESS:
            self.compile_done(macro, event_class, key, dispatcher)
            self.engine_logger.debug("%s[%s] - compiling done", macro.name, macro.guid)
            # self.engine_logger.info("Compiling done" )
        else:
            self.engine_logger.debug("%s[%s] - compiling failing", macro.name, macro.guid)
            # self.engine_logger.info("Compiling failed" )
        #cache, code = compile( source , environment = env )

    def compile_done(self, macro, event_class, key, dispatcher):
        macro.bytecode = dispatcher.cache
        macro.save_after_compile()
        self.register_dispatcher(event_class, key, dispatcher)

    def compile_and_register(self, macro, event_class, key):
        try:
            dispatcher = VEE_vmacro_dispatcher(macro)
            if macro.bytecode:
                self.engine_logger.debug("%s[%s] - bytecode exists", macro.name, macro.guid)
                self.register_dispatcher(event_class, key, dispatcher)
                return COMPILATION_SUCCESS

            self.engine_logger.debug("%s[%s] - put macro in compile queue", macro.name, macro.guid)
            compiler_queue.put((macro, event_class, key, dispatcher))

        except Exception as e:
            self.engine_logger.exception("@@@@@@@@@Error while vscript compilation." )


    def register_dispatcher( self, event_class, event_key, dispatcher ):
        key = ( event_class, event_key )
        disp_hash = hash( dispatcher.guid )
#       self.info(  u"Register dispatcher '{dispatcherName}' for event '{eventName}' ({cls}:{hash})".format(
#                       dispatcherName = dispatcher.name,
#                       eventName = event_class.__name__[ 4: ],
#                       cls = event_class.__name__,
#                       hash = event_key ) )

        self.engine_logger.info(  u"Register dispatcher '{dispatcherName}' for event '{eventName}'".format(
                        dispatcherName = dispatcher.name,
                        eventName = event_class.__name__[ 4: ] ) )


        if key not in self.listeners:
            self.listeners[ key ] = {}

        self.listeners[ key ][ disp_hash ] = dispatcher


    def unregister_dispatcher( self, event_class, event_key, disp_guid ):
        key = ( event_class, event_key )
        if key in self.listeners:
            dispatchers = self.listeners[ key ]
            disp_hash = hash( disp_guid )

            if disp_hash in dispatchers:
                dispatcher = dispatchers[ disp_hash  ]
                del dispatchers[ disp_hash ]

                self.engine_logger.info(  u"Unregister dispatcher '{dispatcherName}' for event '{eventName}'".format(
                                dispatcherName = dispatcher.name,
                                eventName = event_class.__name__[ 4: ] ) )


            if len( dispatchers ) == 0:
                del self.listeners[ key ]


    def clear_all(self):
        self.clear_log()
        self.listeners = {}
        self.timers = {}
        try:
            while True:
                workflow_queue.get_nowait()
        except Queue.Empty:
            pass


    def add_timer( self, name, delay, hash_value ):
        """Add timer with defined name and delay"""
        if name not in self.timers:
            self.timers[ name ] = VEE_timer( name, delay, hash_value )


    def update_timer( self, name, delay, hash_value ):
        """Replace timer with defined name and delay"""
        self.timers[name] = VEE_timer( name, delay, hash_value )


    def delete_timer( self, name ):
        """Removing timer. If there is no with such name - no exception rising"""
        try:
            del self.timers[ name ]
        except Exception:
            pass


    def activate_timer( self, name, state ):
        """Timer change state to active. If there is no with such name - exception raised"""
        try:
            self.timers[ name ].active = state
        except Exception:
            raise Exception( "No timer with such name" )


    def check_timers(self):
        for timer_name in self.timers:
            if self.timers[ timer_name ].check():
                self.put_event( VEE_TimerEvent( self.timers[ timer_name ] ) )


    def get_timer_by_name( self, name ):
        return self.timers.get( name, None )


engine = VdomEventEngine()
from VEE_vmacro_dispatcher import VEE_vmacro_dispatcher,  COMPILATION_SUCCESS
]]>
		</Library>
		<Library Name="class_plugin_db">
<![CDATA[import base64

class PluginDB:
	def __init__(self, db_name, db_source):
		self.name 			= db_name
		self.db_source 		= db_source

	def get_xmlnode(self):
		from class_xml_plugin_db import XMLPluginDB
		import base64
		xml = XMLPluginDB()
		xml.name 			= self.name
		xml.db_source 		= base64.b64encode(self.db_source.read())

		return xml
]]>
		</Library>
		<Library Name="prosuite_settings">
<![CDATA["""
"""

import logging


DEBUG = True


default_settings = {
    "pages": {
        "cleaner": "/cleaner",
        "home": "/home",
        "local_ug": "/users_and_groups",
        "login": "/login",
        "logoff": "/logoff",
        "logs": "/logs",
        "plugins": "/plugins",
        "plugin_details": "/plugin_details",
        "plugin_source": "/macros_source",
        "rules": "/rules",
        "remote_scheme": "/remote_scheme",
        "remote_ug": "/remote_users_and_groups",
        "server500": "/server500",
        "settings": "/settings",
    },
    "system": {
        "debug": DEBUG,
        "login_as": DEBUG and 'root',
        "root_god_mode": DEBUG,
    },
    "logging": {
        "level": logging.DEBUG if DEBUG else logging.INFO,
        "file": "logs/app_log", # path to logs
        "max_size": 1048576, # in bytes
        "parts": 10, # max files
        "max_mem_records": 512,
    },
    "app_info": {
        "name": u"ProMail",
        "version": u"1.10.0",
        "commit": u"e123e2134",
        "template_version": u"1.0.0",
        "template_commit": u"e423r445",
        "id": application.id
    },
    "localization": {
        "page_title": u"{page_name} - {app_name}",
    },
    "background_tasks_manager": {
        "max_run_time": 3600,
        "max_attempts": 5,
    },
    "databases": {
        "path": "databases",
    }
}


class Settings(object):

    pages = default_settings["pages"]
    system = default_settings["system"]
    info = default_settings["app_info"]
    localization = default_settings["localization"]
    logging = default_settings["logging"]
    tasks_manager = default_settings["background_tasks_manager"]
    databases = default_settings["databases"]


settings = Settings
]]>
		</Library>
		<Library Name="class_xml_custom_event">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLCustomEvent( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'custom_event' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, obj, recursive=False, comparer=None ):
		result = Node.find( self, obj, recursive, comparer )

		if type(obj) not in [ str, unicode ]:
			return result

		if not result:
			result = self.create_child( obj )

		return result


	@property
	def name( self ):
		return self.find( 'name' ).text

	@name.setter
	def name( self, value ):
		self.find( 'name' ).text = value

	@property
	def guid( self ):
		return self.find( 'guid' ).text

	@guid.setter
	def guid( self, value ):
		self.find( 'guid' ).text = value

	@property
	def plugin_guid( self ):
		return self.find( 'plugin_guid' ).text

	@plugin_guid.setter
	def plugin_guid( self, value ):
		self.find( 'plugin_guid' ).text = value
]]>
		</Library>
		<Library Name="proadmin_remote_application_scheme">
<![CDATA[from proadmin_db_scheme import DbApplicationScheme
from proadmin_remote_sync import RemoteSyncClient
from datetime import datetime


class RemoteApplicationScheme( DbApplicationScheme ):
	def __init__( self, guid, connection ):
		DbApplicationScheme.__init__( self, guid, connection )

		self.type = 'remote'
		
		self.remote_sync = None
		self.real_objects_discovery = None	# it's function

		self.sync_datetime = None



	def touch( self ):
		""" touch this scheme - update sync datetime
		"""
		self.sync_datetime = datetime.now()

	def is_sync_active( self ):
		if self.sync_datetime is None: return False
		return (datetime.now() - self.sync_datetime).total_seconds() < 60



	@property
	def prepare_synchronize( self ):
		""" obsolete. this field renamed to 'real_objects_discovery'
		"""
		return self.real_objects_discovery

	@prepare_synchronize.setter
	def prepare_synchronize( self, value ):
		""" obsolete. this field renamed to 'real_objects_discovery'
		"""
		self.real_objects_discovery = value



	def is_remote( self ):
		return True


	def proadmin_version( self, details=False ):
		if self.remote_sync:
			return self.remote_sync.proadmin_version( details )

		return None


	def set_sync_service( self, service ):
		self.remote_sync = RemoteSyncClient( service )


	def update( self ):
		self.update_subjects()
		self.update_objects()

		self.touch()


	def update_subjects( self ):
		if self.remote_sync:
			self.remote_sync.update_subjects()

			self.touch()


	def update_objects( self ):
		if self.remote_sync:
			self.remote_sync.update_objects()

			self.touch()


	def commit( self ):
		if self.remote_sync:
			self.remote_sync.commit_objects()

			self.touch()


	def remove_acl_zombie( self ):
		import ProAdmin

		# get real objects
		objects = {}
		if self.real_objects_discovery:
			objects = self.real_objects_discovery()
		else: return

		# need guids only
		objects = objects.keys() if isinstance( objects, dict ) else objects

		# get acls guids
		acls = [ o.guid for o in ProAdmin.application().child_objects( recursive=True ) ]

		# define list of acl zombie
		acl_zombie = list( set(acls) - set(objects) )
			
		# delete acl objects if not exists
		for guid in acl_zombie:
			obj = ProAdmin.application().get_by_guid( guid )
			if not obj: continue
			
			obj.delete( parent_dirty=True )

			
		# add dirty-bit to application - for commit it to ProAdmin
		ProAdmin.application().save()


	def register( self, make_default=None ):
		import ProAdmin

		DbApplicationScheme.register( self )
		if self.remote_sync:
			data = self.remote_sync.register() or {}

			# try to define proadmin host throw API get_registered_applications
			
			hosts = []

			# find Proadmin
			apps = self.get_registred_applications()
			for name in apps:
				app = apps[ name ]
				if app[ 'guid' ] != ProAdmin.PROADMIN_APPLICATION_GUID:	continue

				hosts = app.get( 'hosts', [] )
				break

			# define one host from server response
			host = data.get( 'proadmin_host', hosts[0] if hosts else '' )

			# save option in remote sheme options
			self.set_option( 'proadmin_hosts', hosts )
			self.set_option( 'proadmin_host', host  )
			
			# flag for register_syn completeon
			self.set_option( 'register_sync', False )

			# update subjects
			self.remote_sync.update_subjects()


		ProAdmin.start_sync()
		# ProAdmin.sync()




	def sync( self ):
		# firstly start register sync
		if not self.get_option( 'register_sync', False ):
			self.remote_sync.register_sync()
			self.remove_acl_zombie()

			self.set_option( 'register_sync', True )
			return 5 # next sync after 5 sec

		# update
		self.update_subjects()
		self.update_objects()

		# commit
		self.commit()

		return 20 # timeout for next sync






	def get_registered_applications( self ):
		apps = {}
		
		if self.remote_sync:
			apps = self.remote_sync.get_registred_applications()

		return apps

	def get_registred_applications( self, *args, **kwargs ):
		""" obsolete, method for compatibility.
		"""
		return self.get_registered_applications( *args, **kwargs )
						
			
	def check_password( self, user, password ):
		if self.remote_sync:
			try:
				result = self.remote_sync.check_password( user.email, password )
				if result:
					user.password = password
					user.save()
				
				return True if result else False
			except:
				pass
				
		return user.check_local_password( password )				



	def create_root_user( self, password = 'root' ):
		return DbApplicationScheme.create_root_user( self, password=password )


	def create_admin_group( self ):
		return


			
			
			

]]>
		</Library>
		<Library Name="vdom_xml_node">
<![CDATA[class InvalidDomError( Exception ):
	def __init__( self ):
		Exception.__init__( self, 'Incorrect argument. Wait link to DOM model of xml' )


class Node( object ):
	""" class represent node of xml and have hard link to dom model
	"""
	# --------------------------------------------------
	#		PYTHON OPERATORS
	# --------------------------------------------------

	def __init__( self, dom ):
		if not dom:
			raise InvalidDomError()

		# get dom structure from node element
		if isinstance( dom, Node ):
			dom = dom.dom

		# check may be node is document
		if dom.nodeType == dom.DOCUMENT_NODE:
			dom = dom.firstChild

		# save link to dom model
		self._dom = dom



	def __str__( self ):
		return 'Node( %s )' % self.tag



	def __del__( self ):
		""" remove this node and all subnodes
		"""
		return
		self.dom.parentNode.removeChild( self.dom )



	def __getitem__( self, key ):
		""" get attribute value by key
		"""
		# check type of key
		if type( key ) not in [ str, unicode ]:
			return None

		# find key,
		for k in self.keys():
			if k.lower() == key.lower():
				key = k
				break

		# return attribute by key
		attr = self.dom.getAttribute( key )
		return attr



	def __setitem__( self, key, value ):
		""" set attribute
		"""
		if type( value ) not in [ str, unicode ]:
			value = str( value )

		if type( key ) not in [ str, unicode ]:
			return

		self.dom.setAttribute( key, value )



	def __delitem__( self, key ):
		""" delete attribute
		"""
		if type( key ) not in [ str, unicode ]:
			return

		self.dom.removeAttribute( key )


	def __hash__( self ):
		s = ''
		s += self.tag.lower() + ':' + str( len( self.childs ) )
		s += ','.join( ['%s=%s' % (key.lower(), self[key],) for key in self.keys()] )
		s += self.value

		return hash( s )



	def isequal( self, other ):
		""" compare for equaling
		"""
		if not other: return False

		# check by dom objects - easyst way
		if self.dom.isSameNode( other.dom ): return True


		def compare_nodes( this, node ):
			""" compare self node and other
			"""
			return hash( this ) == hash( node )

		def compare_childs( this, node ):
			""" recursive comparing of lists of childs
			"""
			n = len( this.childs )

			this.childs.sort()
			node.childs.sort()

			# fast flat comparing
			index = range( n )
			for i in range( n ):
				obj1 = this.childs[ i ]

				for j in range( n ):
					if j not in index: continue
					obj2 = node.childs[ j ]

					if compare_nodes( obj1, obj2 ):
						index.remove( j )

			if index: return False

			# detailed comparing
			index = range( n )
			for i in range( n ):
				obj1 = this.childs[ i ]

				for j in range( n ):
					if j not in index: continue
					obj2 = node.childs[ j ]

					if obj1 == obj2:
						index.remove( j )

			if index: return False

			return True



		if not compare_nodes( self, other ):
			return False

		if not compare_childs( self, other ):
			return False


		return True






	def __eq__( self, other ):
		""" compare to equal
		"""
		return self.isequal( other )








	# --------------------------------------------------
	#		PROPERTIES
	# --------------------------------------------------

	# --- LINKS ---

	@property
	def dom( self ):
		""" property for read only dom link
		"""
		if not self._dom: return None
		return self._dom



	@property
	def document( self ):
		""" get hight document node of xml
		"""
		if self.dom.nodeType == self.dom.DOCUMENT_NODE:
			return self

		return self.dom.ownerDocument



	@property
	def root( self ):
		""" get root-node (top level container)
		"""
		return Node( self.document.firstChild )



	@property
	def parent( self ):
		""" return parent node structure
		"""
		parent = self.dom.parentNode

		if not parent:
			return None

		if parent == self.document:
			return None

		return self.create( parent )



	@property
	def path( self ):
		""" return list of nodes - path from root-node to this node
		"""
		path = []

		# go from self to root
		node = self
		while node:
			path.append( node )
			node = node.parent

		path.reverse()
		return path






	# --- NODE VALUES ---

	@property
	def tag( self ):
		""" return tag-name of this node
		"""
		ignore_node_types = [ self.dom.DOCUMENT_NODE, self.dom.TEXT_NODE, self.dom.CDATA_SECTION_NODE ]

		if self.dom.nodeType in ignore_node_types:
			return u''

		name = self.dom.tagName.strip()
		return name

	@tag.setter
	def tag( self, value ):
		if not value: return
		self.dom.tagName = value



	@property
	def text( self ):
		""" get text-value of this node
		"""
		data_dom = self.dom.firstChild

		if not data_dom:
			return u''

		if data_dom.nodeType != self.dom.TEXT_NODE:
			return u''

		return data_dom.nodeValue.strip()

	@text.setter
	def text( self, value ):
		""" set text-value of this node
		"""
		data_dom = self.dom.firstChild

		if data_dom and data_dom.nodeType == self.dom.CDATA_SECTION_NODE:
			self.dom.removeChild( data_dom )

		data_dom = self.dom.firstChild

		if not data_dom:
			data_dom = self.dom.appendChild( self._create_text_node_dom() )

		data_dom.nodeValue = value



	@property
	def cdata( self ):
		""" property get text node data
		"""
		data_dom = self.dom.firstChild
		if not data_dom:
			return u''

		if data_dom.nodeType != self.dom.CDATA_SECTION_NODE:
			return u''

		return data_dom.nodeValue

	@cdata.setter
	def cdata( self, value ):
		""" set text-node data
		"""
		data_dom = self.dom.firstChild

		if data_dom and data_dom.nodeType == self.dom.TEXT_NODE:
			self.dom.removeChild( data_dom )

		data_dom = self.dom.firstChild

		if not data_dom:
			data_dom = self.dom.appendChild( self._create_cdata_node_dom() )

		data_dom.nodeValue = value



	@property
	def value( self ):
		text = self.text
		if text: return text

		cdata = self.cdata
		if cdata: return cdata

		return u''

	@value.setter
	def value( self, value ):
		data_dom = self.dom.firstChild
		if data_dom and data_dom.nodeType == self.dom.CDATA_SECTION_NODE:
			self.cdata = value
			return

		self.text = value









	@property
	def childs( self ):
		""" return list of subnodes or empty list
		"""
		# node types that ignore like childs
		ignore_node_types = [ self.dom.TEXT_NODE, self.dom.CDATA_SECTION_NODE ]
		result = []

		for node in self.dom.childNodes:
			if node.nodeType in ignore_node_types:
				continue
			result.append( self.create( node ) )

		return result






	# --------------------------------------------------
	#		METHODS
	# --------------------------------------------------

	def save( self, writer ):
		""" save changes to file
		"""
		self.dom.writexml( writer )



	def delete( self ):
		""" remove this node from tree
		"""
		if not self.parent:
			return None

		if self.parent:
			self.parent.remove_child( self )

		return self



	def _add_prefix_indent( self ):
		"""
		"""
		# add indend
		indent = '\n' + '\t' * len( self.path )
		self.dom.appendChild( self._create_text_node_dom( indent ) )



	def append_child( self, node ):
		""" add node to subnodes
		"""
		self._add_prefix_indent()

		# add child
		self.dom.appendChild( node.dom )

		return node



	def _remove_prefix_indent( self, node ):
		""" remove indent-text-node from xml
		"""
		# check index bound
		bound = lambda index: index >= 0 and index < len( self.dom.childNodes )

		index = self.dom.childNodes.index( node.dom )
		if bound( index ):
			index -= 1 # get index of prefix node

		if bound( index ):
			indent = self.dom.childNodes[ index ]
			if indent and indent.nodeType == self.dom.TEXT_NODE:
				self.dom.removeChild( indent )



	def remove_child( self, node ):
		""" remove child node from subnodes
		"""
		self._remove_prefix_indent( node )
		self.dom.removeChild( node.dom )
		return node



	def keys( self ):
		""" attributes keys
		"""
		keys = self.dom.attributes.keys()
		keys.sort()
		return keys



	# --------------------------------------------------
	#		FIND-METHODS
	# --------------------------------------------------

	def find( self, obj, recursive=False, comparer=None ):
		""" find one in childs combaine
		"""
		if not obj: return None

		result = self.find_all( obj, recursive, one=True, comparer=comparer )
		if not result: return None

		return self.create( result[ 0 ] )



	def find_all( self, obj, recursive=False, one=False, comparer=None ):
		""" find all in childs
			recursive - enable finding in tree deep
			one - try to find single resultat
			comparer - function with two arguments. determine compare rules for node and other objects. return True or False
		"""
		if not obj: return []

		# define default comparers for different objects
		def tag_comparer( node, tag ):
			""" compare tag name
			"""
			return node.tag == tag

		def node_comparer( node1, node2 ):
			""" compare nodes
			"""
			return node1.isequal( node2 )


		# set default comparer if comparer not setted
		if not comparer:
			# text
			if type( obj ) in [ str, unicode ]:
				comparer = tag_comparer

			# node
			if isinstance( obj, Node ):
				comparer = node_comparer


		# get results
		result = []

		for node in self.childs:
			if comparer( node, obj ):
				result.append( node )

			if one and result:
				return result

			if recursive:
				result += node.find_all( obj, recursive, one, comparer )

		return [ self.create( n ) for n in result ]



	def find_in_dom( self, dom, comparer=None ):
		""" find this structure in another dom
		"""
		node = Node( dom )
		result = node.find( self, recursive=True, comparer=comparer )

		# modify type of result
		return self.create( result )









	# --------------------------------------------------
	#		CREATE-METHODS
	# --------------------------------------------------

	def create_empty_node( self, tag='' ):
		""" create empty node
		"""
		dom = self.document.createElement( tag )

#		# create separator
#		text = self._create_text_node_dom()
#		text.nodeValue = '\n'
#		dom.apeendChild( text )

		return Node( dom )



	def _create_cdata_node_dom( self, value='' ):
		return self.document.createCDATASection( value )

	def _create_text_node_dom( self, value='' ):
		return self.document.createTextNode( value )




	def clone( self, deep=True ):
		""" clone this node
		"""
		dom = self.dom.cloneNode( deep )
		return self.create( dom )



	def clear( self ):
		""" clear attributes, value, childs, etc
		"""
		#clear tag
		self.tag = ' '

		# clear attributes
		for key in self.keys():
			del self[ key ]

		# clear childs
		for node in self.childs:
			self.remove_child( node )

		return self



	def create_child( self, tag ):
		""" create new child node
		"""
		child = self.childs[0].clone(False) if self.childs else self.create_empty_node()
		child.clear()

		child.tag = tag
		self.append_child( child )

		return child



	def base_node( self ):
		""" create instance of base node from self
		"""
		return Node( self )



	@classmethod
	def create( self, obj ):
		""" create new instance from dom or node.
			Need in child classes
		"""
		if not obj: return None
		return Node( obj )









	# --------------------------------------------------
	#		PRINT-METHODS
	# --------------------------------------------------

	def toxml( self ):
		""" return string representation of xml
		"""
		return self.dom.toxml()

	def toprettyxml( self ):
		""" return pretty representation with tabs and whitespaces
		"""
		return self.dom.toprettyxml()
]]>
		</Library>
		<Library Name="proadmin_sso">
<![CDATA[import ProAdmin

import json
import base64
import urllib2
import urllib
import copy
import string
import random
import md5
import os
import threading

from Crypto.PublicKey import RSA
from proadmin_remote_settings import RemoteSettings
from utils import uuid
from managers import virtual_hosts


# ==============================================================================
#					CRYPTO
# ==============================================================================

class SSOCrypto( object ):
	""" class implements crypt routines
	"""

	# -----------------------------------------
	#		CONSTS
	# -----------------------------------------

	# alphabet
	ALPHABET = string.digits + string.letters + string.punctuation

	# TODO: generate keys-pairs for each application !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	server_private_key 	= '-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgQCwyaGooifV5+HsSoxfXaUC3txofCAeKoxQkDG6YAtYB+oF1dMC\nZUmdsgH70fhv82rhHqQhGYBSujvHs0y9Y6D1fI9Xpxdnl1UIo2y9EknmasWuTaVv\nVuYieHSPTRwZ03eE3LDRwvtXpzJ7uY2mx1YB9xx/fVvyurX463d1pfY2DwIDAQAB\nAoGAIYhtaH4xjipouRg+3gv2M8AwEIWS1gX+DX38YLy9ChqeMjMnzimGOCo+pBRk\nyl9io4bbXQfoRkja8/s3kCjoq7aMZqmmmh/P47kMY+2dCBEpG0WPFK+mWbz1vNO8\nELag6G0PC2e3IuKv9b2fJKlaVTRoUcOXv/Q8PTVsNq1qIFkCQQC9J4uLI50TW9DR\ni3NbORXIfk4DXqzPRl6k2oUY3qlIbJopHAWlk71l7HWVUnOKrZL3Yx3CJ5MnQ2Ah\ncfYbfY01AkEA70NHxe1UTJ4PNdwpHX/c140Tqv9l0pWVbDDp3L1buq8Bj6f7J+Av\nz1T3V+Hw+hQlyzMQ9vT0Qzs2FzKod9vSswJACPhrIboapORhzs4yNk1KvyteP8Kp\np1rK+j5yuW81z/12giSWD/glr0O7f81dNWJt6dWFf8Oost/7GxrwdPVLUQJAOcyv\nEgl7S+cDFafR5uZ0mz3henWoS28HYdOPK1wzRK3yWpnh+ogWBKgp+HkEleU4HBaC\nCqayO2uabZA3Un0wMQJAP1tLvFACcwW4LqZg3Uk5+vnKKraF2l2VtBTF5GuiXfbv\nCqwvBjcXDw+jRp8/Wnjvmtk1rlsOAzuo7jHnBhedCQ==\n-----END RSA PRIVATE KEY-----'
	server_public_key 	= '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwyaGooifV5+HsSoxfXaUC3txo\nfCAeKoxQkDG6YAtYB+oF1dMCZUmdsgH70fhv82rhHqQhGYBSujvHs0y9Y6D1fI9X\npxdnl1UIo2y9EknmasWuTaVvVuYieHSPTRwZ03eE3LDRwvtXpzJ7uY2mx1YB9xx/\nfVvyurX463d1pfY2DwIDAQAB\n-----END PUBLIC KEY-----'

	client_private_key	= '-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDleLlPj/Ha0YRLjF1meV8fu70x8aY979dWx58/lvYjY2UU8xpR\nnYhG0hGuEfFTWnk3dWv2IGPU18Ll7PnohXZUsYLRcVzj7Asp+H9Yg2RYHbRG5Xe2\nyY4sYFKX8QyvlvPAOomPHwpQneK6nTv5MdciUzxk+NkF7yFm6Ik2bX4msQIDAQAB\nAoGAJZAlhYiippc1eMh5YZTspV0uE0bjV7AzJ9l1kAs+L3zNxygkXsfSzwUEL+Jw\nBp0AyrtF+PxEW0sWdFzea9mtDNC7rD2GMF9pNGE1dqBRdaD6d5jLp0mv0/m0dGXr\nMGOXBnCL5ew4xndfwZfTCgX7JmzIHsMchMGb9q6MyGACZqECQQDqCgYZb8+xXWsE\nHX5y2kj60AI6Tqpt8LbMgO/vzuLkleWSYjov8sTyvdoFCMq1VMgORfYlBor0NYbl\n8W7L5C3PAkEA+wD62X2kavB4pR0hg9edTONMzK58rAGMQho+kfSIkuG4HR739i+5\n3QMQhWGG2YvK50Op7haiu4ZO3UjFm54DfwJBAMTDlqsuGQS6UK3OCjCPmwnbdfQF\njT4PQfCfepo4awPZjoBKuzbyuWiH+1N+N8bKN8PgR/iLDqoQkpCiMg+TkHsCQBmK\nvvwU0f9j2xMKRNfSwBoL40vM0bj7K1eqrgVSOfegaojkFt2Be8tmvW6lPwCyPgKM\nmyU0PnkQsMPJ3Pn5+WcCQGS44GfQA9ds8Ib9wvdNG8xgYpEvkTmh3i8Fc9n7/2rJ\ndN+KEXe4CU5EuJ7XqTSyTq8qtpmbz8B2Mr4lB6q6VP0=\n-----END RSA PRIVATE KEY-----'
	client_public_key	= '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDleLlPj/Ha0YRLjF1meV8fu70x\n8aY979dWx58/lvYjY2UU8xpRnYhG0hGuEfFTWnk3dWv2IGPU18Ll7PnohXZUsYLR\ncVzj7Asp+H9Yg2RYHbRG5Xe2yY4sYFKX8QyvlvPAOomPHwpQneK6nTv5MdciUzxk\n+NkF7yFm6Ik2bX4msQIDAQAB\n-----END PUBLIC KEY-----'




	# -----------------------------------------
	#		SELF-METHODS
	# -----------------------------------------

	def __init__( self, crypto_pair ):
		self._crypto = crypto_pair


	def keysize( self ):
		return ( self._crypto.size() + 1 ) / 8


	def encrypt( self, text ):
		""" encrypt text
		"""
		# get length of key
		n = self.keysize()

		# split text by n-length parts
		parts = [ text[ i:i+n ] for i in xrange( 0, len(text), n) ]

		# encrypt parts
		encrypt = lambda a: self._crypto.encrypt( a, None )[0]
		encrypted_parts = [ encrypt(s) for s in parts ]

		result = ''.join( encrypted_parts )
		if not result:
			return None

		return result


	def decrypt( self, code ):
		""" decrypt code
		"""
		# get length of key
		n = self.keysize()

		# split text by n-length parts
		encrypted_parts = [ code[ i:i+n ] for i in xrange( 0, len(code), n) ]

		# decrypt parts
		decrypt = lambda a: self._crypto.decrypt( a )
		parts = [ decrypt(s) for s in encrypted_parts ]

		result = ''.join( parts )
		return result






	# -----------------------------------------
	#		STATIC METHODS
	# -----------------------------------------

	@classmethod
	def salt( self, n ):
		""" create solt-string with n-length
		"""
		return ''.join( [ random.choice( SSOCrypto.ALPHABET ) for i in xrange( n ) ] )


	@classmethod
	def urandom( self, n ):
		""" create random solt-string using system os urandom
		"""
		return os.urandom( n )


	@classmethod
	def md5( self, text ):
		""" return md5-hexdigest of text
		"""
		return md5.md5( text ).hexdigest()


	@classmethod
	def generate_crypto_pair( self, bits=2048 ):
		""" generate RSA crypto keys-pair
		"""
		return RSA.generate( bits, self.urandom )




	@classmethod
	def server( self ):
		""" create server crypto-service
		"""
		server_pair = RSA.importKey( SSOCrypto.server_private_key + SSOCrypto.server_public_key )
		return self( server_pair )


	@classmethod
	def client( self ):
		""" create client crypto-service
		"""
		client_pair = RSA.importKey( SSOCrypto.client_private_key + SSOCrypto.client_public_key )
		return self( client_pair )



# alias for SSOCrypt class
Crypto = SSOCrypto











# ==============================================================================
#					URL
# ==============================================================================
class SSOUrl( object ):
	""" class for creating and parsing SSO-urls
	"""
	def __init__( self, url='' ):
		self._host = ''
		self.arguments = {}

		self._fill_from_url( url )

	def __str__( self ):
		return self.build()


	def _fill_from_url( self, url ):
		""" fill object from url string
		"""

		parts = url.split( '?' )

		# get host
		self.host = ''.join( parts[:1] ) if parts else url

		# get args
		args_str = ''.join( parts[1:] )

		# parse args
		args = args_str.split( '&' )
		for arg in args:
			item = arg.split( '=' )

			key = item[0] if item else None
			value = item[1] if len(item) > 1 else ''

			if key:
				self.arguments[ key ] = value

		return self


	def _args( self ):
		""" create get-arguments
		"""
		# create arguments string
		args = '&'.join( [ '%s=%s' % (key,value,) for (key,value) in self.arguments.iteritems() ] )
		return args if args else ''



	@property
	def host( self ):
		return self._host

	@host.setter
	def host( self, value ):
		self._host = value



	@property
	def cont_url( self ):
		cont = self.arguments.get( 'continue', '' )
		return urllib.unquote( cont )

	@cont_url.setter
	def cont_url( self, value ):
		self.arguments[ 'continue' ] = urllib.quote( value )



	@property
	def session_id( self ):
		sid = self.arguments.get( 'session_id', '' )
		return sid

	@session_id.setter
	def session_id( self, value ):
		self.arguments[ 'session_id' ] = value



	@property
	def auth_token( self ):
		token = self.arguments.get( 'auth_token' )
		return token

	@auth_token.setter
	def auth_token( self, value ):
		self.arguments[ 'auth_token' ] = value






	def build( self ):
		""" create url-link
		"""
		# create arguments string
		result = self.host
		args = self._args()
		if args: result += '?' + args
		return result


	def loads( self, url ):
		self._fill_from_url( url )





	@classmethod
	def is_ip( self, host ):
		""" define that host is ip address
		"""
		if not host: return False

		if host.lower() == 'localhost': return True

		parts = host.split( '.' )
		for p in parts:
			if not p.isdigit(): return False

		return True



	def catch_exception( fn ):
		def wrapper( *args, **kwargs ):
			try:
				return fn( *args, **kwargs )
			except:
				return None

		return wrapper


	@classmethod
	@catch_exception
	def current_protocol( self ):
		if request.environment.get( 'SERVER_PORT', '80' ) == '443':
			return 'https'

		return request.protocol.name.lower()


	@classmethod
	@catch_exception
	def current_host( self ):
		return request.server.host


	@classmethod
	@catch_exception
	def current_page( self ):
		try:
			return request.environment.get( 'SCRIPT_NAME', '' )
		except:
			return None


	@classmethod
	@catch_exception
	def current_query( self ):
		try:
			return request.environment.get( 'QUERY_STRING', '' )
		except:
			return None


	@classmethod
	@catch_exception
	def current_url( self ):
		""" get current url
		"""
		return self.current_protocol() + '://' + self.current_host() + self.current_page() + '?' + self.current_query()


	@classmethod
	@catch_exception
	def current( self ):
		""" create Url-object from current request-url
		"""
		return self.parse( self.current_url() )


	@classmethod
	def parse( self, url ):
		""" parse url to Url-instance
		"""
		return self()._fill_from_url( url )


	@classmethod
	def sort_hosts_by_current( self, hosts ):
		""" sort hosts by samesess with current host
		"""
		if not hosts: return hosts

		current = SSOUrl.current_host()
		if not current: return hosts

		current = list( current.lower() )
		current.reverse()

		def distance( host ):
			""" calculate value of sameness any host with current
			"""
			if not host: return 0

			host = list( host.lower() )
			host.reverse()

			n = min( len(current), len(host) )
			for i in xrange( n ):
				if current[i] != host[i]:
					return i

			return n

		hosts.sort( cmp=lambda a,b: cmp(distance(a), distance(b)), reverse=True )
		return hosts




	@classmethod
	def proadmin_internal_url( self, page='' ):
		remote = RemoteSettings.get_remote_settings()
		host = remote.server

		if self.is_ip( host ):
			host += '/' + ProAdmin.PROADMIN_APPLICATION_GUID

		# check protocol
		if '://' not in host:
			host = SSOUrl.current_protocol() + '://' + host

		# check page
		if '/' in page[:1]:
			page = page[1:]

		host = '%(host)s%(page)s' % {
			'host'		: host,
			'page'		: '/' + page if page else '',
		}

		return self( host )



	@classmethod
	def proadmin_url( self, page='' ):
		""" get proadmin url from settings
		"""
		scheme = ProAdmin.scheme()

		hosts = scheme.get_option( 'proadmin_hosts', [ scheme.get_option( 'proadmin_host', '' ) ] )
		hosts = SSOUrl.sort_hosts_by_current( hosts )

		host = hosts[0] if hosts else ''

		# return internal url in bad situation
		if not host: return self.proadmin_internal_url( page )

		# complete host for normal situation
		# check protocol
		if '://' not in host:
			host = SSOUrl.current_protocol() + '://' + host

		# check page
		if '/' in page[:1]:
			page = page[1:]

		host = '%(host)s%(page)s' % {
			'host'		: host,
			'page'		: '/' + page if page else '',
		}

		return self( host )




	@classmethod
	def proadmin_sso_auth_url( self ):
		"""
		"""
		return self.proadmin_url( 'sso_auth' )

	@classmethod
	def proadmin_internal_sso_auth_url( self ):
		""" sso auth url for internal use
		"""
		return self.proadmin_internal_url( 'sso_auth' )










# ==============================================================================
#					SSO TOKEN
# ==============================================================================
class SerializationError( Exception ):
	""" serialization routines error
	"""
	pass



class SSOToken( object ):
	""" implement sso-routines user
	"""

	def __init__( self ):
		self.attributes = {}


	def _fill_from_token( self, token ):
		self.attributes = copy.copy( token.attributes )



	def _serialize( self, crypto=None ):
		""" serialize token. if exists crypto - crypt it
		"""
		try:
			# json - serialization
			js_attribs = json.dumps( self.attributes )

			# crypt token
			if crypto:
				crypted_attribs = crypto.encrypt( js_attribs )

			# base64
			result = base64.urlsafe_b64encode( crypted_attribs )
			return unicode( result )
		except:
			raise SerializationError()


	def _deserialize( self, b64_code, crypto=None ):
		try:
			# unbase64
			crypted_attribs = base64.urlsafe_b64decode( b64_code.encode( 'utf8' ) )

			# decrypt
			if crypto:
				js_attribs = crypto.decrypt( crypted_attribs )

			# deserialize json
			self.attributes = json.loads( js_attribs )
			return self
		except:
			raise SerializationError()




	def pack( self, crypto=None ):
		""" exception-safe serialization method
		"""
		try:
			return self._serialize( crypto )
		except SerializationError:
			return ''


	@classmethod
	def unpack( self, pack, crypto=None ):
		""" exception-safe deserialization method
		"""
		try:
			return self()._deserialize( pack, crypto )
		except SerializationError:
			pass




	# -----------------------------------------
	#		PROPERTIES
	# -----------------------------------------

	@property
	def user_guid( self ):
		return self.attributes.get( 'uid', '' )

	@user_guid.setter
	def user_guid( self, value ):
		self.attributes[ 'uid' ] = value




	@property
	def session_id( self ):
		return self.attributes.get( 'sid', '' )

	@session_id.setter
	def session_id( self, value ):
		self.attributes[ 'sid' ] = value





	@property
	def access_token( self ):
		value = self.attributes.get( 'tok', '' )
		if not value: return None

		return SSOAccessToken( value )


	@access_token.setter
	def access_token( self, token ):
		if type( token ) == SSOAccessToken:
			value = token.value
		else:
			value = token

		self.attributes[ 'tok' ] = value




	# -----------------------------------------
	#		COOKIES
	# -----------------------------------------

	TOKEN_KEY = '_token'
	GROUP_KEY = '_group'

	@classmethod
	def clear_auth_group_key( self ):
		"""
		"""
		if SSOToken.GROUP_KEY in response.cookies:
			response.cookies[ SSOToken.GROUP_KEY ]['max-age'] = 0
			response.cookies[ SSOToken.GROUP_KEY ] = ''


	@classmethod
	def auth_group_key( self ):
		"""
		"""
		def generate_key():
			return SSOCrypto.md5( SSOCrypto.salt( 32 ))[:8]

		def save_auth_group( value ):
			response.cookies[ SSOToken.GROUP_KEY ] = value
			response.cookies[ SSOToken.GROUP_KEY ][ 'max-age' ] = 15 * 60 * 1000 # 15min to ms

		# try to get from cookies
		cook = response.cookies.get( SSOToken.GROUP_KEY, None )

		if cook:
			result = cook.value
		else:
			result = generate_key()

		# update cookie
		save_auth_group( result )
		return result




	def save( self ):
		""" save current token in browser cookies
		"""
		# need to save only user_guid
		token = SSOToken()
		token.user_guid = self.user_guid

		# save to browser
		response.cookies[ SSOToken.TOKEN_KEY ] = token.pack( SSOCrypto.server() )
		response.cookies[ SSOToken.TOKEN_KEY ]['max-age'] = 15 * 60 * 1000 # 15min to ms


	@classmethod
	def current( self ):
		cook = response.cookies.get( SSOToken.TOKEN_KEY, None )
		result = None

		try:
			result = self()._deserialize( cook.value, SSOCrypto.server() ) if cook else None

		except SerializationError:
			self.clear()

		return result


	@classmethod
	def clear( self ):
		if SSOToken.TOKEN_KEY in response.cookies:
			response.cookies[ SSOToken.TOKEN_KEY ]['max-age'] = 0
			response.cookies[ SSOToken.TOKEN_KEY ] = ''

		# clear auth group
		self.clear_auth_group_key()














# ==============================================================================
#					ACCESS TOKEN
# ==============================================================================

class AccessTokenUsedError( Exception ):
	""" error that access token now using in ProAdmin for other token
	"""
	pass

class AuthorizeError( Exception ):
	""" error that
	"""


class SSOAccessToken( object ):
	""" class for auth_token routines
	"""

	_local = threading.local()

	@classmethod
	def _local_saveresult( self, data ):
		SSOAccessToken._local.checked_token = data

	@classmethod
	def _local_ischecked( self, data ):
		value = getattr( SSOAccessToken._local, 'checked_token', '' )
		return data == value




	def __init__( self, token=None ):
		self._data 	= token if token else self._create_token_key()


	@property
	def data( self ):
		return self._data if self._data else '-'


	@property
	def key( self ):
		"""
		"""
		return self.data.split( '-' )[0]

	def _set_key( self, key ):
		self._data = '%(key)s-%(value)s' % {
			'key'	: key,
			'value'	: self.value,
		}



	@property
	def value( self ):
		""" property for get token-value
		"""
		return self.data.split( '-' )[1]




	@classmethod
	def _create_token_key( self ):
		""" create new token value
		"""
		generate = lambda: SSOCrypto.md5( SSOCrypto.salt( random.randint(200, 1000) ) )
		tok = generate() + generate()
		return '-%s' % tok



	def check( self ):
		""" check this token in ProAdmin
		"""
		import ProAdmin
		# TODO: use a local ProAdmin Agent-Server !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		# not need to check rights in local scheme
		if not ProAdmin.scheme().is_remote():
			return True

		# --------------------------------------------------------------------- Fake
		keys = [ 'fc2221b2', '794b4c40', '991f6c7c', '2f61dbc2' ]
		if self.key in keys:
			return True
		# ---------------------------------------------------------------------

		# check saved result in threading.local()
		if self._local_ischecked( self.data ):
			return True

		url = SSOUrl.proadmin_internal_sso_auth_url()
		url.arguments[ 'check_token' ] = '1'
		url.arguments[ 'access_token' ] = self.data

		# HTTP GET Request
		f = urllib2.urlopen( url.build() )
		result = f.read()
		f.close()

		if result.strip() != 'success':
			return False

		# save result in threading.local()
		self._local_saveresult( self.data )
		return True


	# ----------------------------------------------------------------------------------
	@classmethod
	def get_sudo_accesstoken( self, user ):
		access_token = self()
		keys = [ 'fc2221b2', '794b4c40', '991f6c7c', '2f61dbc2' ]
		import random
		key = random.choice( keys )
		access_token._set_key( key )
		return access_token




	# ----------------------------------------------------------------------------------
	def __fake_prosearch_login( self ):
		keys = [ 'fc2221b2', '794b4c40', '991f6c7c', '2f61dbc2' ]
		if self.key not in keys:
			return False

		ssn = ProAdmin.session()
		ssn[ 'access_token' ] = self
		ssn[ 'current_user' ] = ProAdmin.application().get_users( 'root' )[0]

		self._local_saveresult( self.data )
		return True



	def login( self ):
		""" login by this access token
		"""
		if not ProAdmin.scheme().is_remote():
			return

		# temp fake login for prosearch only -------------------------------------------
		if self.__fake_prosearch_login():
			return
		# ------------------------------------------------------------------------------

		url = SSOUrl.proadmin_internal_sso_auth_url()

		# set session and token
		url.arguments[ 'session_id' ] = ProAdmin.session().id
		url.arguments[ 'login_access_token' ] = '1'
		url.arguments[ 'access_token' ] = self.data

		# HTTP GET Request
		f = urllib2.urlopen( url.build() )
		result = f.read()
		f.close()

		result = result.strip()

		if result == 'error':
			return

		ProAdmin.login_token( result )


	def authorize( self, token ):
		""" authorize this access token to user
		"""
		if not token:
			raise AuthorizeError()

		# check that access_token not used in ProAdmin
		if self.is_authorized():
			raise AccessTokenUsedError()

		# modify auth_group_key in access_token
		key = token.auth_group_key()
		self._set_key( token.auth_group_key() )

		# save token as authorized in memory
		if key not in ProAdmin.authorized_tokens:
			ProAdmin.authorized_tokens[ key ] = {}

		# append this access token to group of tokens
		ProAdmin.authorized_tokens[ key ][ self.value ] = token
		token.access_token = self.data



	def create_auth_token( self, session_id ):
		""" create new auth_token eq for this access token
		"""
		import copy

		if not self.is_authorized():
			return None

		# get user
		token = copy.deepcopy( self.get_token() )
		if not token: return None

		# modify session_id
		token.session_id = session_id

		# create new access_token for new auth
		access_token = SSOAccessToken()
		access_token._set_key( self.key )
		access_token.authorize( token )

		return token.pack( SSOCrypto.client() )




	def get_token( self ):
		"""
		"""
		if not self.is_authorized():
			return None

		return ProAdmin.authorized_tokens.get( self.key, {} ).get( self.value, None )



	def is_authorized( self ):
		""" check that this token authorized in ProAdmin
		"""
		# get auth group key
		key = self.key

		# check that it valid
		if self.value not in ProAdmin.authorized_tokens.get( key, {} ):
			return False

		return True



	@classmethod
	def from_url( self, url=None, name=None ):
		"""
		"""
		if not url: url = SSOUrl.current()
		if not name: name = 'access_token'

		token = url.arguments.get( name )
		if not token: token = url.arguments.get( 'token' ) # for old version capability

		if not token: return None
		return self( token )



	@classmethod
	def is_access_token( self, token ):
		if type( token ) == self:
			return True

		if len( token.split('-') ) != 2: return False
		if len( token ) > 100: return False


		return True







# ==============================================================================
#					SSO Helpers
# ==============================================================================


class SSOLoginBase( object ):
	""" implements various login mechanisms
	"""
	def __init__( self, request, response, back_url=None ):
		self.request = request
		self.response = response
		self._default_back_url = back_url or '/home'

		self.vdom_page = None


	def set_action_mode( self, vdom_page ):
		self.vdom_page = vdom_page

	def is_action_mode( self ):
		return self.vdom_page is not None


	def redirect( self, url ):
		# onload mode
		if self.vdom_page is None:
			self.response.redirect( url )
			return

		# action mode
		self.vdom_page.action( 'goTo', [ url ] )
		return


	def login( self ):
		pass


	@property
	def back_url( self ):
		""" get back_url
		"""
		back_url = self.request.arguments.get( "back_url", '' )
		back_url = urllib.unquote( back_url )

		if not back_url: back_url = self._default_back_url
		return back_url


	def get_language( self ):
		return ProAdmin.session().get( 'lang', None )


	def login_by_password( self ):
		""" login user in local scheme by entered user name and password
		"""
		if 'login' not in self.request.arguments:
			return

		# get login and password
		login 		= self.request.arguments.get( 'login', '' )
		password 	= self.request.arguments.get( 'password', '' )

		# check login
		if not login:
			raise ProAdmin.ProAdminEmptyLoginError()

		# try to login in application
		ProAdmin.login( login, password )


	def check_current_user( self ):
		""" check that current user exists
		"""
		if not ProAdmin.current_user():
			return

		self.redirect( self.back_url )


# obsolete name
LoginHelper = SSOLoginBase





class SSOClient( SSOLoginBase ):
	"""
	"""
	def __init__( self, request, response, back_url=None ):
		LoginHelper.__init__( self, request, response, back_url )


	def login_by_password( self ):
		LoginHelper.login_by_password( self )

		if ProAdmin.current_user():
			self.redirect( self.back_url )


	def login_by_token( self ):
		""" login user by auth_token returned from ProAdmin /login page
		"""
		if not ProAdmin.scheme().is_remote():
			return

		if 'auth_token' not in self.request.arguments:
			return

		# get auth_token
		auth_token = self.request.arguments.get( 'auth_token', '' )
		token = SSOToken.unpack( auth_token, SSOCrypto.client() )

		# auth_token can't unpack
		if not token:
			self.redirect( '/login?back_url=%s' % self.back_url )

		# login user by token
		try:
			ProAdmin.login_token( token )
		except ProAdmin.TokenSessionExpiredError:
			self.redirect( '/login?back_url=%s' % self.back_url )

		# go to back url
		self.redirect( self.back_url )



	def login_by_proadmin( self ):
		""" ask auth_token from ProAdmin
		"""
		if not ProAdmin.scheme().is_remote():
			return

		cont_url = SSOUrl.current()
		cont_url.arguments[ 'back_url' ] = urllib.quote( self.back_url )

		# check server
		url = SSOUrl.proadmin_sso_auth_url()
		url.session_id = ProAdmin.session().id
		url.cont_url = cont_url.build()

		self.redirect( url.build() )



	def test_sso( self, url='', check=False, get_url=False ):
		""" test sso redirects
		"""
		# check response from ProAdmin
		if check:
			result = self.request.arguments.get( 'test_sso', None )
			return result == 'success'

		# define back url
		back_url = SSOUrl.current_url()
		if self.is_action_mode():
			back_url = SSOUrl.current_protocol() + '://' + SSOUrl.current_host() + '/' + self.vdom_page.name + '?' + SSOUrl.current_query()

		# send request to proadmin
		if not url:
			url = SSOUrl.proadmin_url().build()

		if SSOUrl.is_ip( url ):
			url = SSOUrl.proadmin_internal_url().build()

		if not '://' in url:
			url = SSOUrl.current_protocol() + '://' + url

		url = SSOUrl( url + '/sso_auth' )

		url.arguments[ 'test_sso' ] = 1
		url.arguments[ 'continue' ] = back_url

		if get_url:
			return url.build()

		self.redirect( url.build() )



# obsolete name
ClientLoginHelper = SSOClient




class SSOServer( SSOLoginBase ):
	"""
	"""
	def __init__( self, request, response ):
		LoginHelper.__init__( self, request, response )


	def login_by_access_token( self ):
		try:
			access_token = SSOAccessToken.from_url()
			if not access_token: raise Exception()

			session_id = self.request.arguments.get( 'session_id' )

			auth_token = access_token.create_auth_token( session_id )

			self.response.write( auth_token, True )

		except Exception as er:
			self.response.write( 'error', True )


	def check_token( self ):
		try:
			# create user object
			access_token = SSOAccessToken.from_url( SSOUrl.current() )

			# check that user authorized
			if not access_token.is_authorized():
				raise Exception()

			response.write( 'success', True )

		except Exception as ex:
			self.response.write( 'error', True )



	def login_by_browser_token( self, token ):
		""" login user by token, saved in browser
		"""
		if not token:
			return

		# modify token for browser session
		token.session_id = ProAdmin.session().id
		ProAdmin.login_token( token )



	def sso_redirect( self ):
		user = ProAdmin.current_user()

		if user and 'continue' in self.request.arguments:
			url			= self.request.arguments.get( 'continue', '' )
			session_id 	= self.request.arguments.get( 'session_id', '' )

			# create cont_url
			cont_url = SSOUrl.parse( url )

			# set language
			ln = self.get_language()
			if ln: cont_url.arguments[ 'ln' ] = ln

			# create login token
			token = SSOToken()
			token.user_guid = user.guid

			# save in browser cookies
			token.save()

			# modify token for user session
			token.session_id = session_id

			# create access token
			access_token = SSOAccessToken()
			access_token.authorize( token )

			token.access_token = access_token.data

			cont_url.auth_token = token.pack( SSOCrypto.client() )
			self.redirect( cont_url.build() )



	def test_sso( self ):
		""" test sso redirects
		"""
		if 'test_sso' not in self.request.arguments:
			return

		url = SSOUrl( self.request.arguments.get( 'continue' ) )
		url.arguments[ 'test_sso' ] = 'success'

		self.redirect( url.build() )




# obsolete name
ServerLoginHelper = SSOServer

]]>
		</Library>
		<Library Name="proadmin_db_user">
<![CDATA[from proadmin_subject import User
import uuid
from md5 import md5
import base64




_pack_scheme = ['guid',
			'email',
			'first_name',
			'last_name',
			'phone',
			'password_hash',
			'notification_email',
			'cell_phone',
			'country',
			'keywords_string',
			]

class DbUser( User ):



	@classmethod
	def get_users( self, scheme, email = None, guid = None ):
		global _pack_scheme


		filter_dict = {}
		if email: filter_dict["email"] = email
		if guid: filter_dict["guid"] = guid

		raw_result = scheme.connection.select_cmd('proadmin_user', _pack_scheme, filter_dict)
		return [DbUser(scheme).init_from_db_tuple(db_tuple) for db_tuple in raw_result]



	@classmethod
	def get_in_group( self, scheme, group ):
		raw_result = scheme.connection.fetch_all(
			'''SELECT %s 
			FROM proadmin_user 
			JOIN user_in_group ON user_guid = guid
			WHERE group_guid = ? ''' % (', '.join(_pack_scheme),), [group.guid])

		return [DbUser(scheme).init_from_db_tuple(db_tuple) for db_tuple in raw_result]


	def __init__( self, scheme ):
		User.__init__( self, scheme )
		self.connection = scheme.connection

		self._guid = str(uuid.uuid4())
		self.keywords_string=""


	def init_from_db_tuple(self, db_tuple):
		global _pack_scheme
		for k, v in zip(_pack_scheme, db_tuple):
			setattr(self, k, v)
		return self



	def _packed_list(self, pscheme = None):
		global _pack_scheme
		if not pscheme: pscheme = _pack_scheme
		return [getattr(self, attr) for attr in pscheme]

	def _packed_dict(self, pscheme = None):
		global _pack_scheme
		if not pscheme: pscheme = _pack_scheme
		return dict([(attr, getattr(self, attr)) for attr in pscheme])
		
	
	def save( self ):
		global _pack_scheme

		exists = len(self.connection.select_cmd('proadmin_user', _pack_scheme, {'guid': self.guid})) > 0

		if exists:
			self.connection.update_cmd('proadmin_user', self._packed_dict(), {'guid': self.guid} )
		else:
			self.connection.insert_cmd('proadmin_user', _pack_scheme, self._packed_list())
		return self

	
	def force_delete( self, force=True ):
		self.connection.delete_cmd( 'user_in_group', {"user_guid": self.guid})
		self.connection.delete_cmd( 'rule', {"subject_guid": self.guid})
		self.connection.delete_cmd( 'proadmin_user', {"guid": self.guid})



	def get_groups( self ):
		from proadmin_db_group import DbGroup
		return User.get_groups(self) + DbGroup.get_user_groups(self.scheme, self)



	def _get_hash(self, value):
		return base64.b64encode( md5( value.encode('utf8') + self.guid ).digest() )

	def remove_group(self, group):
		group.remove_user(self)
		

	def add_group(self, group):
		group.add_user(self)
		

	@property
	def password_hash( self ):
		return self._password

	@password_hash.setter
	def password_hash( self, value ):
		self._password = value 
		
	def set_password_hash( self, value ):
		self.password_hash = value


	@property
	def password( self ):
		return self._password

	@password.setter
	def password( self, value ):
		if not value: return ""
		self._password = self._get_hash( value )
	
	def check_local_password( self, password ):
		return self.password == self._get_hash( password )


	@property
	def keywords(self):
		return self.keywords_string.split(',')

	@keywords.setter
	def keywords(self, value):
		self.keywords_string = ",".join(value)

	def __repr__(self):
		return str(self.email)
]]>
		</Library>
		<Library Name="promail_triggers">
<![CDATA["""
"""

import time
import threading

from prosuite_threading import ProSuiteDaemon


def stop_matched_threads(tname, logger):
    """
    Stop all threads with name started
    with @tname
    """
    stop_flag = False
    i = 0
    while not stop_flag:

        logger.debug("Search threads with name like '%s'...", tname)

        stop_flag = True
        time.sleep(1)

        # enumerate over existing threads
        for thread in threading.enumerate():

            # check name and
            # thread is instance of VDOM_thread
            if not thread.name.startswith(tname):
                continue

            stop_flag = False

            args = (
                thread.getName(),
                thread.ident,
                thread.__class__.__name__
            )
            logger.debug(
                "Thread %s:%s (%s class) was found! Trying stop it...",
                *args
            )
            try:
                thread.stop()

            except Exception as ex:
                logger.debug(
                    "Can't stop thread %s:%s (%s class)!",
                    *args
                )
        i += 1
        if i > 10:
            break


class POP3Daemon(ProSuiteDaemon):
    """
    """
    DEFAULT_TIMEOUT = 30.0
    DEFAULT_NAME = "POP3Daemon"

    def kill_existing_instance(self):
        """
        """
        stop_matched_threads(self.name, self.logger)

    def process(self):
        """
        Write your code here to run in thread
        """
        import promail_pop3_core  as pop3
        pop3.pop3_core.run()

    def save_thread(self):
        """
        """
        try:
            import promail_pop3_core  as pop3
            pop3.DAEMON_THREAD = self

        except Exception as ex:
            self.logger.exception("Exception in 'save_thread'")


class SMTPDaemon(ProSuiteDaemon):
    """
    """
    DEFAULT_TIMEOUT = 30.0
    DEFAULT_NAME = "SMTPDaemon"

    def kill_existing_instance(self):
        """
        """
        stop_matched_threads(self.name, self.logger)

    def process(self):
        """
        Write your code here to run in thread
        """
        pass

    def save_thread(self):
        """
        """
        try:
           import promail_smtp_client as smtp
           smtp.DAEMON_THREAD = self

        except Exception as ex:
            self.logger.exception("Exception in 'save_thread'")


class EACDaemon(ProSuiteDaemon):
    """
    """
    DEFAULT_TIMEOUT = 5.0
    DEFAULT_NAME = "EACDaemon"

    def kill_existing_instance(self):
        """
        """
        stop_matched_threads(self.name, self.logger)

    def process(self):
        """
        Write your code here to run in thread
        """
        import promail_eac_core as eac
        eac.eac_core.run()

    def save_thread(self):
        """
        """
        try:
           import promail_eac_core as eac
           eac.DAEMON_THREAD = self

        except Exception as ex:
            self.logger.exception("Exception in 'save_thread'")

]]>
		</Library>
		<Library Name="pyzmail_utils">
<![CDATA[#
# pyzmail/utils.py
# (c) Alain Spineux <alain.spineux@gmail.com>
# http://www.magiksys.net/pyzmail
# Released under LGPL

"""
Various functions used by other modules
@var invalid_chars_in_filename: a mix of characters not permitted in most used filesystems
@var invalid_windows_name: a list of unauthorized filenames under Windows
"""

import sys

invalid_chars_in_filename=b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f' \
                          b'\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f' \
                          b'<>:"/\\|?*\%\''

invalid_windows_name=[b'CON', b'PRN', b'AUX', b'NUL', b'COM1', b'COM2', b'COM3',
                      b'COM4', b'COM5', b'COM6', b'COM7', b'COM8', b'COM9',
                      b'LPT1', b'LPT2', b'LPT3', b'LPT4', b'LPT5', b'LPT6', b'LPT7',
                      b'LPT8', b'LPT9' ]

def sanitize_filename(filename, alt_name, alt_ext):
    """
    Convert the given filename into a name that should work on all
    platform. Remove non us-ascii characters, and drop invalid filename.
    Use the I{alternative} filename if needed.

    @type filename: unicode or None
    @param filename: the originale filename or None. Can be unicode.
    @type alt_name: str
    @param alt_name: the alternative filename if filename is None or useless
    @type alt_ext: str
    @param alt_ext: the alternative filename extension (including the '.')

    @rtype: str
    @returns: a valid filename.

    >>> sanitize_filename('document.txt', 'file', '.txt')
    'document.txt'
    >>> sanitize_filename('number1.txt', 'file', '.txt')
    'number1.txt'
    >>> sanitize_filename(None, 'file', '.txt')
    'file.txt'
    >>> sanitize_filename(u'R\\xe9pertoir.txt', 'file', '.txt')
    'Rpertoir.txt'
    >>> # the '\\xe9' has been removed
    >>> sanitize_filename(u'\\xe9\\xe6.html', 'file', '.txt')
    'file.html'
    >>> # all non us-ascii characters have been removed, the alternative name
    >>> # has been used the replace empty string. The originale extention
    >>> # is still valid
    >>> sanitize_filename(u'COM1.txt', 'file', '.txt')
    'COM1A.txt'
    >>> # if name match an invalid name or assimilated then a A is added
    """

    if not filename:
        return alt_name+alt_ext

    if ((sys.version_info<(3, 0) and isinstance(filename, unicode)) or \
        (sys.version_info>=(3, 0) and isinstance(filename, str))):
        filename=filename.encode('ascii', 'ignore')

    filename=filename.translate(None, invalid_chars_in_filename)
    filename=filename.strip()

    upper=filename.upper()
    for name in invalid_windows_name:
        if upper==name:
            filename=filename+b'A'
            break
        if upper.startswith(name+b'.'):
            filename=filename[:len(name)]+b'A'+filename[len(name):]
            break

    if sys.version_info>=(3, 0):
        # back to string
        filename=filename.decode('us-ascii')

    if filename.rfind('.')==0:
        filename=alt_name+filename

    return filename

def handle_filename_collision(filename, filenames):
    """
    Avoid filename collision, add a sequence number to the name when required.
    'file.txt' will be renamed into 'file-01.txt' then 'file-02.txt' ...
    until their is no more collision. The file is not added to the list.

    Windows don't make the difference between lower and upper case. To avoid
    "case" collision, the function compare C{filename.lower()} to the list.
    If you provide a list in lower case only, then any collisions will be avoided.

    @type filename: str
    @param filename: the filename
    @type filenames: list or set
    @param filenames: a list of filenames.

    @rtype: str
    @returns: the I{filename} or the appropriately I{indexed} I{filename}

    >>> handle_filename_collision('file.txt', [ ])
    'file.txt'
    >>> handle_filename_collision('file.txt', [ 'file.txt' ])
    'file-01.txt'
    >>> handle_filename_collision('file.txt', [ 'file.txt', 'file-01.txt',])
    'file-02.txt'
    >>> handle_filename_collision('foo', [ 'foo',])
    'foo-01'
    >>> handle_filename_collision('foo', [ 'foo', 'foo-01',])
    'foo-02'
    >>> handle_filename_collision('FOO', [ 'foo', 'foo-01',])
    'FOO-02'
    """
    if filename.lower() in filenames:
        try:
            basename, ext=filename.rsplit('.', 1)
            ext='.'+ext
        except ValueError:
            basename, ext=filename, ''

        i=1
        while True:
            filename='%s-%02d%s' % (basename, i, ext)
            if filename.lower() not in filenames:
                break
            i+=1

    return filename

def is_usascii(value):
    """"
    test if string contains us-ascii characters only

    >>> is_usascii('foo')
    True
    >>> is_usascii(u'foo')
    True
    >>> is_usascii(u'Fran\xe7ais')
    False
    >>> is_usascii('bad\x81')
    False
    """
    try:
        # if value is byte string, it will be decoded first using us-ascii
        # and will generate UnicodeEncodeError, this is fine too
        value.encode('us-ascii')
    except UnicodeError:
        return False

    return True
]]>
		</Library>
		<Library Name="ProMailServersPage">
<![CDATA["""
"""

import json
import re

from collections import OrderedDict

import ProMail

from prosuite_utils import escape_w_quote
from prosuite_web import ProSuiteBasicPage, administrator_only,\
                         authenticated, callback



HIDDEN_HEADER_TMPLT = u"""<span style="display: none">{}</span>"""
EDIT_HIDDEN_HEADER = HIDDEN_HEADER_TMPLT.format("edit")
STATUS_HIDDEN_HEADER = HIDDEN_HEADER_TMPLT.format("status")

DISABLED_ICON_RES = u"/1d50c132-3610-402c-a337-d020d0f955b4.res"
ENABLED_ICON_RES = u"/43773d0d-1048-448e-8524-81b9de128b2e.res"

ICON_TMPLT = u"""<img src="{1}" height="16px" width="16px" alt="{0}" title="{0}"></img>"""

EDIT_CELL_TMPLT = u"<div class='server-edit-cell' title='{}'></div>"

HOSTNAME_REGEXP = re.compile("^([\w\.]+)\.([a-z]{2,6}\.?)(\/[\w\.]*)*$")

IP_REGEXP = re.compile("([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])(\.([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])){3}")


# Shared Variables
SELECTED_ROWS_SV = "servers.table.selected"

CHECK_TASK_TIMER_INTERVAL = 2000
CHECK_TASK_UUID_KEY = "servers.checktest.task.uuid"



class AsyncTaskOutputDialog(object):

    def __init__(self, delegate):
        self.delegate = delegate
        self.datasource = None

    def set_dialog_title(self, title):
        self.delegate.vdom_objects["dialog.checktask"].action("setTitle", [title])


    def start_task_monitoring(self, task_uuid):
        # saving task UUID
        self.delegate.shared_vars[CHECK_TASK_UUID_KEY] = task_uuid

        # starting refresh timer
        self.delegate.vdom_objects["dialog.checktask.timer"].action("start", [CHECK_TASK_TIMER_INTERVAL])

        # show data and dialog
        self.delegate.vdom_objects["dialog.checktask.output"].action("setValue", [
            self.delegate.localization["promail.servers.dialog.checktask.loading"]
        ])
        self.delegate.vdom_objects["dialog.checktask"].action("show", [""])


    def check_task_status(self):

        uuid = self.delegate.shared_vars.get(CHECK_TASK_UUID_KEY, '')
        task = None
        if uuid:
            task = ProMail.tasks.search_task(uuid)

        if not task:
            self.delegate.vdom_objects["dialog.checktask.timer"].action("stop", [""])
            self.delegate.vdom_objects["dialog.checktask.output"].action("setValue", [
                self.delegate.localization["promail.servers.dialog.checktask.error.invalid_task"]
            ])

            return self.delegate.show_error_growl(
                self.delegate.localization["promail.servers.dialog.checktask.error.invalid_task"],
                self.delegate.localization["global.error.title"]
            )

        if not (task.finished_at or task.failed_at):
            return

        self.delegate.vdom_objects["dialog.checktask.timer"].action("stop", [""])

        if task.finished_at:
            self.delegate.show_info_growl(
                self.delegate.localization["promail.servers.dialog.checktask.success.task_done"],
                self.delegate.localization["global.success.title"]
            )
            self.delegate.vdom_objects["dialog.checktask.output"].action("setValue", [
                self.datasource.process_task_output(task.output)
            ])

        else:
            self.delegate.show_error_growl(
                self.delegate.localization["promail.servers.dialog.checktask.success.task_failed"],
                self.delegate.localization["global.error.title"]
            )
            self.delegate.vdom_objects["dialog.checktask.output"].action("setValue", [
                u"{} {}\n\n{}".format(
                    self.delegate.localization["promail.servers.dialog.checktask.success.task_failed"],
                    self.delegate.localization["promail.servers.dialog.checktask.success.task_failed.traceback"],
                    task.last_error
                )
            ])



class ProMailServersPage(ProSuiteBasicPage):

    def get_page_title(self):
        return self.localization["promail.servers.title"]

    def get_localization_data(self):
        return {
            self.vdom_objects["dialog.new.checkconn"]: "promail.servers.dialog.checkconn",
            self.vdom_objects["dialog.new.disabled"]: "promail.servers.dialog.disabled",
            self.vdom_objects["dialog.new.incoming.text"]: "promail.servers.dialog.incoming.title",
            self.vdom_objects["dialog.new.outgoing.text"]: "promail.servers.dialog.outgoing.title",

            ( self.vdom_objects["dialog.new.inlogin.label"],
              self.vdom_objects["dialog.new.outlogin.label"]): "promail.servers.dialog.login.label",

            ( self.vdom_objects["dialog.new.inpasswd.label"],
              self.vdom_objects["dialog.new.outpasswd.label"]): "promail.servers.dialog.passwd.label",

            ( self.vdom_objects["dialog.new.inport.label"],
              self.vdom_objects["dialog.new.outport.label"]): "promail.servers.dialog.port.label",

            ( self.vdom_objects["dialog.new.inserver.label"],
              self.vdom_objects["dialog.new.outserver.label"]): "promail.servers.dialog.server.label",

            ( self.vdom_objects["dialog.new.inssl.label"],
              self.vdom_objects["dialog.new.outssl.label"]): "promail.servers.dialog.ssl.label",

            self.vdom_objects["dialog.new.cancel"]: "global.form.buttons.cancel",
            self.vdom_objects["dialog.new.reset"]: "global.form.buttons.reset",
            self.vdom_objects["dialog.new.servername.label"]: "promail.servers.dialog.servername",
            self.vdom_objects["dialog.new.submit"]: "global.form.buttons.submit",

            self.vdom_objects["dialog.delete"]: "promail.servers.dialog.delete.title",
            self.vdom_objects["dialog.delete.submit"]: "global.form.buttons.delete",
            self.vdom_objects["dialog.delete.cancel"]: "global.form.buttons.cancel",

            self.vdom_objects["dialog.checktask"]: "promail.servers.dialog.checktask.title",
            self.vdom_objects["dialog.checktask.close"]: "global.form.buttons.close",

            self.vdom_objects["servers.table.attention"]: "promail.servers.table.attention",
            self.vdom_objects["servers.title"]: "promail.servers.pagetitle",

            self.vdom_objects["toolbar.buttons.add"]: "promail.servers.toolbar.buttons.add",
            self.vdom_objects["toolbar.buttons.delete"]: "promail.servers.toolbar.buttons.delete",
        }

    def selected_settings(self):
        uuids = self.shared_vars.get(SELECTED_ROWS_SV, '')
        return list(ProMail.Connectivity.get_available(uuid=uuids, disabled=True, sort=True)) if uuids else []


    def format_connection_settings(self, cs):
        return u"""{host}<b>:</b>{port} ({encryption})""".format(
            host=cs.host,
            port=cs.port,
            encryption=self.localization["promail.servers.ssltypes." + cs.secure.value]
        )


    @callback('request_start', 2)
    @authenticated
    @administrator_only
    def on_request_start(self, *args, **kwargs):
        pass


    @callback('onload', 2)
    def onload(self, *args, **kwargs):
        pass


    @callback('onload', 3)
    def preload_servers_form(self, *args, **kwargs):
        """
        Load data to drop down lists
        """
        ssl_types = ProMail.Connectivity.SECURITY_E

        inssl = self.vdom_objects['dialog.new.inssl']
        outssl = self.vdom_objects['dialog.new.outssl']

        inssl.value = outssl.value = json.dumps({t.value: self.localization["promail.servers.ssltypes." + t.value] for t in ssl_types})
        inssl.selectedvalue = outssl.selectedvalue = ssl_types.NONE.value

        # load predefined settings list
        predef = OrderedDict([
            ('selectpredefined', self.localization["promail.servers.predefined.selectpredefined"]),
            ('empty', u"")
        ])

        for key, data in ProMail.PredefinedServers.items():
            predef[key] = data['title']

        vdom_list = self.vdom_objects['dialog.new.predefined']
        vdom_list.value = json.dumps(predef)
        vdom_list.selectedvalue = "selectpredefined"
        vdom_list.disabledvalue = "selectpredefined"

    @callback('onload', 4)
    def preload_ui_localization(self, *args, **kwargs):
        self.shared_vars['localization'] = {
            'dialog.new.title': self.localization["promail.servers.dialog.server.new.title"]
        }

    @callback('onload', 5)
    @callback('update_table', 1)
    def render_table(self, *args, **kwargs):

        settings = ProMail.Connectivity.get_available(disabled=True, sort=True)
        settings_count = settings.count()

        if not settings_count:
            self.hide_object(self.vdom_objects["servers.table"])
            # self.hide_object(self.vdom_objects["servers.table.paginator"])
            self.show_object(self.vdom_objects["servers.table.attention"])
            return

        self.hide_object(self.vdom_objects["servers.table.attention"])

        icon_enabled = ICON_TMPLT.format(self.localization["promail.servers.table.cell.enabled"], ENABLED_ICON_RES)
        icon_disabled = ICON_TMPLT.format(self.localization["promail.servers.table.cell.disabled"], DISABLED_ICON_RES)
        edit_cell = EDIT_CELL_TMPLT.format(self.localization["promail.servers.table.cell.edit"])

        table = self.vdom_objects["servers.table"]
        table.header = json.dumps([
            "uuid",
            EDIT_HIDDEN_HEADER,
            STATUS_HIDDEN_HEADER,
            self.localization["promail.servers.table.header.name"],
            self.localization["promail.servers.table.header.incoming"],
            self.localization["promail.servers.table.header.outgoing"],
        ])

        table.selectedrows = json.dumps(self.shared_vars[SELECTED_ROWS_SV]) if self.shared_vars.get(SELECTED_ROWS_SV, '') else u""

        table.data = json.dumps([(
            cs.uuid,
            edit_cell,
            icon_enabled if cs.is_enabled() else icon_disabled,
            escape_w_quote(cs.name),

            self.format_connection_settings(cs.incoming),
            self.format_connection_settings(cs.outgoing),

        ) for cs in settings])


    @callback
    def load_predefined(self, *args, **kwargs):
        """
        Load predefined settings
        """
        key = self.get_argument('itemValue')
        if key not in ProMail.PredefinedServers:
            return

        settings = ProMail.PredefinedServers[key]
        incoming = settings['incoming']
        outgoing = settings['outgoing']

        self.vdom_objects['dialog.new.inserver'].action('setValue', [incoming['server']])
        self.vdom_objects['dialog.new.inport'].action('setValue', [incoming['port']])
        self.vdom_objects['dialog.new.inssl'].action('selectItem', [incoming['ssl'].value])
        self.vdom_objects['dialog.new.inlogin'].action('setValue', [incoming['login']])
        self.vdom_objects['dialog.new.inpasswd'].action('setValue', [incoming['passwd']])

        self.vdom_objects['dialog.new.outserver'].action('setValue', [outgoing['server']])
        self.vdom_objects['dialog.new.outport'].action('setValue', [outgoing['port']])
        self.vdom_objects['dialog.new.outssl'].action('selectItem', [outgoing['ssl'].value])
        self.vdom_objects['dialog.new.outlogin'].action('setValue', [outgoing['login']])
        self.vdom_objects['dialog.new.outpasswd'].action('setValue', [outgoing['passwd']])


    @callback
    def submit_server(self, *args, **kwargs):

        uuid = self.get_argument("uuid", "")
        settings = list(ProMail.Connectivity.get_available(disabled=True, uuid=uuid).paginate(1,1)) if uuid else \
                   ProMail.Connectivity()

        if not settings:
            return self.show_error_growl(
                self.localization["promail.servers.error.no_such_server"],
                self.localization["global.form.submit.failed.title"]
            )

        elif isinstance(settings, list):
            settings = settings[0]

        name = self.get_argument('servername', '')
        if not name:
            return self.show_error_growl(
                self.localization["promail.servers.form.error.fill_name"],
                self.localization["global.form.submit.failed.title"]
            )

        try:
            inserver = self.get_argument('inserver', '')
            inport = int(self.get_argument('inport', ''))
            inssl = ProMail.Connectivity.SECURITY_E(self.get_argument('inssl', ''))

            if not (inserver and inport):
                raise Exception

        except:
            return self.show_error_growl(
                self.localization["promail.servers.form.error.check_incoming"],
                self.localization["global.form.submit.failed.title"]
            )

        try:
            outserver = self.get_argument('outserver', '')
            outport = int(self.get_argument('outport', ''))
            outssl = ProMail.Connectivity.SECURITY_E(self.get_argument('outssl', ''))

            if not (outserver and outport):
                raise Exception

        except:
            return self.show_error_growl(
                self.localization["promail.servers.form.error.check_outcoming"],
                self.localization["global.form.submit.failed.title"]
            )

        if not (HOSTNAME_REGEXP.match(inserver) or IP_REGEXP.match(inserver)):
            return self.show_error_growl(
                self.localization["promail.servers.form.error.invalid_in_hostname"],
                self.localization["global.form.submit.failed.title"]
            )

        if not (HOSTNAME_REGEXP.match(outserver) or IP_REGEXP.match(outserver)):
            return self.show_error_growl(
                self.localization["promail.servers.form.error.invalid_out_hostname"],
                self.localization["global.form.submit.failed.title"]
            )


        settings.name = name

        settings.setup_pop3(
            host=inserver,
            port=inport,
            secure=inssl,
            login=self.get_argument('inlogin', ''),
            passwd=self.get_argument('inpasswd', ''),
        )

        settings.setup_smtp(
            host=outserver,
            port=outport,
            secure=outssl,
            login=self.get_argument('outlogin', ''),
            passwd=self.get_argument('outpasswd', ''),
        )

        if self.get_argument("checkconn", "") == "1":
            self.check_connection_to_server(settings)
            return

        # check is settings disabled or not
        if self.get_argument("disablesettings", "0") == "1":
            settings.disable()

        else:
            settings.enable()

        # hide dialog and show success message
        self.vdom_objects['dialog.new'].action('hide', [''])
        self.show_info_growl(
            self.localization["promail.servers.form.success.server_created"],
            self.localization["global.form.submit.success.title"]
        )

        # update servers table
        self.execute_callbacks('update_table')

    @callback('table_cell_click', 2)
    def table_cell_click(self, *args, **kwargs):

        uuid = self.get_argument("keyField", "")
        if not uuid or self.get_argument("headerData") != EDIT_HIDDEN_HEADER:
            return

        settings = list(ProMail.Connectivity.get_available(disabled=True, uuid=uuid).paginate(1,1))
        if not settings:
            return self.show_error_growl(
                self.localization["promail.servers.error.no_such_server"],
                self.localization["global.form.submit.failed.title"]
            )

        settings = settings[0]
        incoming = settings.incoming
        outgoing = settings.outgoing

        self.vdom_objects['dialog.new'].action('setTitle', [self.localization["promail.servers.dialog.server.edit.title"]])
        self.vdom_objects['dialog.new.uuid'].action('setValue', [settings.uuid])
        self.vdom_objects['dialog.new.disabled'].action(('unselect' if settings.is_enabled() else 'select'), [''])
        self.vdom_objects['dialog.new.servername'].action('setValue', [settings.name])

        self.vdom_objects['dialog.new.inserver'].action('setValue', [incoming.host])
        self.vdom_objects['dialog.new.inport'].action('setValue', [incoming.port])
        self.vdom_objects['dialog.new.inssl'].action('selectItem', [incoming.secure.value])
        self.vdom_objects['dialog.new.inlogin'].action('setValue', [incoming.login])
        self.vdom_objects['dialog.new.inpasswd'].action('setValue', [incoming.passwd])

        self.vdom_objects['dialog.new.outserver'].action('setValue', [outgoing.host])
        self.vdom_objects['dialog.new.outport'].action('setValue', [outgoing.port])
        self.vdom_objects['dialog.new.outssl'].action('selectItem', [outgoing.secure.value])
        self.vdom_objects['dialog.new.outlogin'].action('setValue', [outgoing.login])
        self.vdom_objects['dialog.new.outpasswd'].action('setValue', [outgoing.passwd])

        self.vdom_objects['dialog.new'].action('show', [''])


    @callback('delete_selected_start')
    def delete_selected_start(self, *args, **kwargs):

        selected_settings = self.selected_settings()
        if not selected_settings:
            del self.shared_vars[SELECTED_ROWS_SV]
            return

        self.vdom_objects["dialog.delete.hpt"].htmlcode = self.vdom_objects["dialog.delete.hpt"].htmlcode.format(
            "".join([u"<li><b>{}</b></li>".format(escape_w_quote(cs.name)) for cs in selected_settings])
        )

        self.vdom_objects["dialog.delete"].action("show", [""])


    @callback('delete_selected_submit')
    def delete_selected_submit(self, *args, **kwargs):

        selected_settings = self.selected_settings()
        if not selected_settings:
            del self.shared_vars[SELECTED_ROWS_SV]
            return

        for item in selected_settings:
            item.remove(True)

        self.vdom_objects["dialog.delete"].action("hide", [""])
        self.show_info_growl(
            self.localization["promail.servers.form.success.servers_deleted"],
            self.localization["global.form.submit.success.title"]
        )

        # update servers table
        self.execute_callbacks('update_table')

    @callback('update_checktest_output')
    def update_checktest_output(self, *args, **kwargs):

        # check task status
        dialog = AsyncTaskOutputDialog(self)
        dialog.datasource = self
        dialog.check_task_status()

    def check_connection_to_server(self, server_settings):
        # starting new task
        dialog = AsyncTaskOutputDialog(self)
        dialog.datasource = self
        dialog.start_task_monitoring(ProMail.test_server_connection(server_settings.to_json()).uuid)

    def process_task_output(self, output):
        output = json.loads(output)

        has_errors = False
        stat_out = []

        i = 1

        for task_set in output["stat"]:

            j = 1

            for task_name, ret in task_set:
                has_errors |= ret

                ret = (self.localization["promail.servers.dialog.checktask.success.test_failed"] if ret else
                      self.localization["promail.servers.dialog.checktask.success.test_passed"])

                stat_out.append(u"{}.{} {} - {}!".format(
                    i, j,
                    self.localization["promail.servers.dialog.checktask.tasks." + task_name],
                    ret
                ))

                j += 1

            i += 1

        stat_out.append('')
        stat_out.append(self.localization["promail.servers.dialog.checktask.success.tests_failed"] if has_errors else
                        self.localization["promail.servers.dialog.checktask.success.tests_passed"])

        return u"\n".join(stat_out) + output["output"]






]]>
		</Library>
		<Library Name="prosuite_db_connection">
<![CDATA["""
"""

from db_connection import Database, DBObject

class ProSuiteDatabases(Database):

    @classmethod
    def plugins(cls):
        """
        """
        return cls.get_database("dbschema_macros")



class ProSuitePluginsDBObject(DBObject):
    """
    """

    @classmethod
    def get_db_connection(cls):
        """
        """
        return ProSuiteDatabases.plugins()
]]>
		</Library>
		<Library Name="prosuite_tasks">
<![CDATA["""
"""

from datetime import datetime, timedelta

import ext_peewee as models

from ext_tasks import (
    task_created_sig,
    task_error_sig,
    task_scheduled_sig,
    task_rescheduled_sig,
    task_failed_sig,
    task_successful_sig,
    Task,
    TaskManager,
    DBTaskRunner,
    Tasks

)

from prosuite_database import ProSuiteDatabase
from prosuite_logging import app_logger
from prosuite_orm import ProSuiteBaseModel
from prosuite_settings import settings
from prosuite_threading import ProSuiteDaemon


logger = app_logger.getChild("Tasks")
plogger = logger.getChild("ProSuite")

daemon = None


def task_created_handler(task):
    """
    New task created
    """
    logger.debug(u"%s was created", unicode(task))


def task_error_handler(task):
    """
    Task execution ends with error
    """
    logger.debug(u"%s execution ends with error: %s", unicode(task), task.last_error)


def task_scheduled_handler(task):
    """
    Task scheduled
    """
    logger.debug(u"%s was scheduled - %s", unicode(task), task.run_at)


def task_rescheduled_handler(task):
    """
    Task re-scheduled
    """
    logger.debug(u"%s was re-scheduled - %s", unicode(task), task.run_at)


def task_failed_handler(task):
    """
    Task was marked as failed
    """
    logger.debug(u"%s marked as failed", unicode(task))


def task_completed_handler(task):
    """
    Task was marked as completed
    """
    logger.debug(u"%s marked as completed", unicode(task))


# connect signals and slots
task_created_sig.connect(task_created_handler)
task_error_sig.connect(task_error_handler)
task_scheduled_sig.connect(task_scheduled_handler)
task_rescheduled_sig.connect(task_rescheduled_handler)
task_failed_sig.connect(task_failed_handler)
task_successful_sig.connect(task_completed_handler)


class ProSuiteTask(Task, ProSuiteBaseModel):

    class Meta:
        database = ProSuiteDatabase
        db_table = 'background_task'


# create model
ProSuiteDatabase.connect()
ProSuiteDatabase.create_tables([ProSuiteTask], safe=True)
ProSuiteDatabase.close()


class ProSuiteTaskManager(TaskManager):

    @property
    def max_run_time(self):
        return settings.tasks_manager['max_run_time']


class ProSuiteTasks(Tasks):

    def __init__(self, *args, **kwargs):
        super(ProSuiteTasks, self).__init__(*args, **kwargs)
        self._start_daemon()

    def background(self, *args, **kwargs):
        max_attempts = kwargs.pop('max_attempts', None)
        if max_attempts is None:
            kwargs['max_attempts'] = settings.tasks_manager['max_attempts']

        return super(ProSuiteTasks, self).background(*args, **kwargs)

    def _start_daemon(self):
        """
        Start daemon thread
        """
        daemon = ProSuiteTasksDaemon()
        daemon.setup_logger(None, logger=plogger)
        daemon.kill_existing_instance()
        daemon.start()


class ProSuiteTasksDaemon(ProSuiteDaemon):

    MAX_TASKS = 10
    DEFAULT_TIMEOUT = 2.0
    DEFAULT_NAME = "Daemons.ProSuiteTaskDaemon"

    def process(self):
        """
        Write your code here to run in thread
        """
        i = 0
        while i < self.MAX_TASKS:
            if not tasks.run_next_task():
                break

            i+= 1

        if i:
            self.logger.info("%d task(s) were executed", i)

    def save_thread(self):
        global daemon
        try:
            daemon = self

        except Exception as ex:
            self.logger.exception("Exception in 'save_thread'")


# setup tasks manager
ProSuiteTask.manager = ProSuiteTaskManager(ProSuiteTask)

# setup tasks instance
tasks = ProSuiteTasks(DBTaskRunner(ProSuiteTask))



#######################################
# Cleaner task - remove finished and failed tasks
# unique task (it means it will have only single record for given set of params)
# repeat it every 20 minutes

TASK_TIMEOUT = 60 * 20


@tasks.background(unique=True, repeat_every=TASK_TIMEOUT, repeat_times=-1)
def clean_dead_tasks():

    expires_at = datetime.now() - timedelta(seconds=TASK_TIMEOUT)
    i = 0

    for task in ProSuiteTask.select().where((ProSuiteTask.finished_at <= expires_at) | (ProSuiteTask.failed_at <= expires_at)):
        task.remove()
        i += 1

    plogger.info(u"Dead and Finished tasks cleaner report - %d tasks were deleted", i)


if not clean_dead_tasks():
    plogger.debug(u"Dead and Finished tasks cleaner already registered!")

]]>
		</Library>
		<Library Name="localization_fr">
<![CDATA[# -*- coding: utf-8 -*-


localization_dict = {

	#page titles
	"login_page_title"						: u'Login - ProShare',
	"home_page_title"						: u'Fichiers - ProShare',
	"smart_folders_page_title"				: u'Gestion des dossiers intelligents - ProShare',
	"smart_contents_page_title"				: u'Contenu des Dossiers intelligents - ProShare', #smart folder contents page title (private)
	"public_contents_page_title"			: u'Contenu des Dossiers intelligents - ProShare', #smart folder contents page title (public)
	"macros_page_title"						: u'Macros - ProShare',
	"edit_macros_page_title"				: u'Editer les macros - ProShare',
	"settings_page_title"					: u'Paramètres - ProShare',
	"rules_management_page_title"			: u'Gestion des règles - ProShare',
	"users_groups_management_page_title"	: u'Utilisateurs & Groupes - ProShare',
	"remote_control_page_title"				: u'Contrôler par ProAdmin - ProShare',
	"proadmin_attention_page_title"			: u'Attention - ProShare',
	"clear_page_title"						: u'Effacé - ProShare',



	#common dialogs and forms strings
	"login" 					: u'Utilisateur :',
	"password" 					: u'Mot de passe :',
	"last_name"					: u'Nom de famille',
	"first_name"				: u'Prénom',
	"dialog_add_btn"			: u'Ajouter',
	"dialog_apply_btn"			: u'Appliquer',
	"dialog_cancel_btn" 		: u'Annuler',
	"dialog_close_btn"			: u'Fermer',
	"dialog_delete_btn"			: u'Supprimer',
	"dialog_download_btn"		: u'Téléchargement',
	"dialog_edit_btn"			: u'Editer',
	"dialog_ok_btn"				: u'Ok',
	"dialog_save_btn" 			: u'Enregistrer',
	"dialog_title_confirm"		: u'Confirmer',
	"server"					: u'Serveur :',
	"dialog_upload_btn"			: u'Télécharger',
	"email_column_header"		: u'E-mail',
	"error"						: u'Erreur',
	"invalid_data_error_title"	: u'Date invalide',
	"check_fields_error"		: u'Vérifier les champs',
	"check_name_field_error"	: u'Vérifier le champ "Nom"',
	"btn_delete_selected"		: u"Supprimer la sélection",
	"growl_title_warning"		: u"Attention",
	"growl_title_message"		: u"Message",




	#Errors, messages and warnings
	"unknown_error"								: u"Unknown error occured. Please, try to reload the page or relogin the system. If it repeats, please, contact your administrator.",
	"empty_name_error"							: u"Entrez le nom.",
	"empty_login_error"							: u"Remplissez le champ login.",
	"empty_password_error"						: u"Le mot de passe ne peut pas être vide.",
	"invalid_login_or_password_error"			: u"Mot de passe ou login incorrect",
	"files_ignored_warning"						: u"Les fichiers ont été ignorés.",
	"nodes_not_exists_warning"					: u"Certains des fichiers ou répertoires n'existent plus, veuiller recharger la page.",
	"sf_not_exists_warning"						: u"Certains des dossiers intelligents où groupes de dossiers ont été supprimé, veuillez recharger la page.",
	"already_contained_warning"					: u"%s se trouve déjà dans %s",
	"subfolders_ignored_warning"				: u"Sous-répertoires ignorés.",
	"folders_added_message"						: u"{0} répertoire(s) ont été ajoutés avec succès dans {1}",
	"nothing_added_message"						: u"Rien n'a été ajouté",
	"fields_updated_message"					: u"Champs mis à jour avec succès",
	"IllegalCharactersInNameError"				: u"Un nom ne peut contenir l`un de ces caratères: *?:\\|/\"&lt&gt",
	"SFAlreadyExistsError"						: u"Un dossier intelligent avec le même nom existe déjà.",
	"MetaAlreadyExistsError"					: u"Un champ de méta données existe déjà avec le même nom.",
	"FolderAlreadyContainedError"				: u"Ce répertoire existe déjà dans le Dossier Intelligent.",
	"AccessDeniedError"							: u"Vous n'avez pas les droits nécessaires pour effectuer cette action.",
	"SessionExpiredError"						: u"La session a expiré.",
	"AuthorisationError"						: u"Aucun utilisateur n'est connecté.",
	"RemoteApplicationDisconnected"				: u"Application déconnectée. ID : %s.",
	"EmptyNameError"							: u"le champ du nom est vide.",
	"DirectoryAlreadyExistsError"				: u"Le répertoire existe déjà.",
	"NothingSelectedError"						: u"La sélection courante est vide.",
	"FileAlreadyExistsError"					: u"La destination contient déjà des fichiers avec le même nom.",
	"FolderAlreadyExistsError"					: u"La destination contient déjà des répertoires avec le même nom.",
	"rules_saved_message"						: u"Droits mis à jour avec succès.",
	"rules_inherited_message"					: u"Droits hérités avec succès.",
	"inaccessable_rules_warning"				: u"Vous ne pouvez pas modifier les droits pour ce contenu:%s",
	"LongNameError"								: u"Nom trop long",
	"no_such_directory"							: u"Répertoire invalide",
	"fill_all_star_fields_error"				: u"Remplissez tous les champs marqués d'un astérisque.",
	"phone_illegal_characters"					: u"Le numéro de téléphone contient des caractères incorrects.",
	"file_not_exist"							: u"Ce fichier n'existe plus.",
	"deleting_no_acces_files_warning"			: u"Vous n'avez pas les droits suffisants sur certains des fichiers que vous tentez de supprimer, il ne le seront donc pas.",
	"sf_not_exists_error"						: u"Le dossier intelligent n'existe pas.",
	"downloads_not_linked_to_sf"				: u"Vous tentez de télécharger un fichier qui ne se trouve pas dans ce dossier intelligent.",
	"folders_and_files_not_found"				: u"Les fichiers ou les répertoires n'ont pas pu être trouvé.",
	"wrong_public_key"							: u"La clef public de ce dossier intelligent n'est pas valide ou périmée.",
	"downloading_error"							: u"Une erreur interne s'est produite, vous ne pouvez pas télécharger ce fichier ou répertoire.",
	"common_error_message"						: u"Une erreur est survenue, si elle se reproduit, veuillez contacter le support pour la signaler.",
	"deleting_no_acces_sfolers_warning"			: u"There are Smart Folders and Groups to which you have no access. These Smart Folders and Groups have not been deleted.",





	#Home
	#top bar buttons
	"btn_upload_files"			: u"Télécharger",
	"btn_new_folder"			: u"Nouveau dossier",
	"btn_download_selected"		: u"Télécharger la sélection",
	"btn_edit_selected"			: u"Renommer",
	"btn_edit_rights"			: u"Editer les droits",
	"btn_add_to_smart_folder"	: u"Ajouter aux dossiers intelligents",
	"btn_macros"				: u"Macros",
	"macro_menu_label"			: u"<p>Plugin</p>",
	#contents table
	"contents_tbl_name_title"		: u"Nom",
	"contents_tbl_Type_title"		: u"Type",
	"contents_tbl_Size_title"		: u"Taille",
	"contents_tbl_modified_title"	: u"Modifié le",
	"contents_tbl_uploaded_title"	: u"Chargé",
	"node_type_folder"				: u"Dossier",
	"no_contents_title"				: u"Pas de fichiers ou dossiers dans ce dossier",
	"unknown_type"					: u"unknown",
	#upload dialog
	"dialog_upload_title"					: u"Ajouter un fichier",
	"dialog_upload_file_uploader_title"		: u"Fichier à télécharger :",
	"dialog_upload_destination_title"		: u"Destination :",
	"dialog_upload_uploader_title"			: u"Choisir le fichier...",
	#new folder/edit folder dialog
	"dialog_new_folder_title"			: u"Nouveau dossier",
	"dialog_rename_title"				: u"Renommer",
	"dialog_folder_name_title"			: u"Nom :",
	"dialog_edit_folder_rules_title"	: u"Règles d'accès :",
	#delete selected dialog
	"dialog_delete_selected_title"		: u"Supprimer la sélection",
	#add to Smart Folder dialog
	"dialog_add_to_sf_title"				: u"Ajouter aux dossiers intelligents",
	"dialog_dialog_add_to_sf_list_title"	: u"Vers :",
	"dialog_dialog_add_to_sf_list_new"		: u"Créer un nouveau",
	#rules dialog
	"dialog_rules_title"					: u'Editer la gestion des accès',
	"inherit_checkbox_title"				: u'Appliquer aux sous-dossiers',
	"processing_rules_in_bg_message"		: u'La gestion des droits se font en tâche de fond, ce processus peut prendre quelques minutes',



	#Smart Folders
	"smart_folders_groups_title"		:u"Gestion des dossiers intelligents",
	#top bar buttons
	"btn_new_smart_folder"		: u"Nouveau dossier",
	#delete and edit titles used from page home
	#smart folders table
	"smart_folders_tbl_title"			: u"Dossiers Intelligents",
	"smart_folders_tbl_name_title"		: u"Nom",
	"smart_folders_tbl_objs_title"		: u"Objets",
	"smart_folders_tbl_modified_title"	: u"Modifié le",

	"sfg_button_edit"			: u"Editer",
	"sfg_button_add"			: u"Ajouter un dossier intelligent",
	"sfg_button_delete"			: u"Supprimer",
	"sfg_button_group"			: u"Grouper",
	"sfg_button_ungroup"		: u"Dégrouper",
	"sfg_button_selectmode"		: u"Mode : Sélection",
	"sfg_button_select"			: u"Sélection",
	"sfg_button_selectall"		: u"Tous",
	"sfg_button_selectnone"		: u"Aucun",
	"sfg_button_rules"			: u"Droits",
	"sfg_msg_1"					: u"Veuillez saisir le nom du nouveau fichier :",
	"sfg_msg_2"					: u"Nouveau fichier",
	"sfg_msg_3"					: u"Le nom du fichier est vide",
	"sfg_msg_4"					: u"Cette opération n'est pas permiser dans le mode sélection.",
	"sfg_msg_5"					: u"Aucun répertoire n'a été sélectionné",
	"sfg_msg_6"					: u"Veuillez saisir un nouveau nom :",
	"sfg_msg_7"					: u"Veuillez saisir un nouveau nom pour le groupe :",
	"sfg_msg_8"					: u"Nouveau groupe",
	"sfg_msg_9"					: u"Le nom du groupe est vide",
	"sfg_msg_10"				: u"Aucun élément sélectionné.",
	"sfg_msg_11"				: u"Aucun groupe spécifié.",

	#Smart Folder contents
	"metafield_type_string"				: u"CHAINE",
	"btn_edit_folders"					: u"Editer",
	"metafield_no_value_title"			: u"Aucune valeur",
	"no_files_title"					: u"Il n'y a aucun fichier dans ce répertoire",
	"public_link_btn_title"				: u"Lien public",
	"download_all_btn_title"			: u"Tout télécharger",

	#predefined metafields
	"metafield_created"					: u"Créé",
	"metafield_modified"				: u"Modifié",
	"metafield_watchers"				: u"Notification",
	#add metafield dialog
	"dialog_add_metafield_title"		: u"Ajout de métadonnées",
	"dialog_add_metafield_name_title"	: u"Nom :",
	"dialog_add_metafield_type_title"	: u"Type :",
	"dialog_add_metafield_value_title"	: u"Valeur :",
	#public link dialog
	"dialog_public_link_title"			: u"Lien public",
	"dialog_public_link_reset_btn"		: u"RAZ",
	"dialog_public_clipboard_btn"		: u"Copier dans presse papier",
	#add folder dialog
	"dialog_add_folder_title"			: u"Ajouter un champ(s)",



	#Macros
	"add_macros_btn"					: u"Ajouter une macro",
	"import_macros_btn"					: u"Importer",
	"macros_table_title"				: u"Macros",
	"macros_table_name_title"			: u"Nom",
	"macros_table_event_title"			: u"Evènement",

	#Ecit macros
	"edit_macros_area_caption"				: u"Editer une macro",
	"edit_macros_check_btn"					: u"Vérifier",
	"edit_macros_export_btn"				: u"Exporter",
	"edit_macros_name_title"				: u"Nom :",
	"edit_macros_event_title"				: u"Evènement :",
	"edit_macros_body_title"				: u"Corps :",
	"edit_macros_button_macros_checkbox"	: u"Bouton macro",
	"edit_macros_on_board_checkbox"			: u"Dans le menu",
	"edit_macros_picture_title"				: u"Sélectionner une image :",

	#errors
	"fill_all_fields_error"					: u"Remplissez tous les champs.",
	"vscript_not_compiled_error"			: u"VScript non complilé",
	"type_macros_code_error"				: u"Votre macro ne contient aucun code.",
	"fill_macros_fields_error"				: u"Remplissez les champs de la macro.",
	"macro_not_defined_error"				: u"L'identifiant de la macro n'existe pas.",
	"xml_not_correctr_error"				: u"Le source XML de votre plugin est incorrect.",

	#Design
	#cnt_login
	"greeting"		: u'Bonjour, %s %s',
	"login_error"	: u'Mot de passe ou login incorrect',
	#header
	"menu_main_title"			: u'<div style="text-align: center">Fichiers</div>',
	"menu_settings_title"		: u'<div style="text-align: center">Paramètres</div>',
	"menu_smart_folders_title"	: u'<div style="text-align: center">Dossiers Intelligents</div>',
	#add user to group dialog (container_some)
	"find_usr_title"					: u'Trouver un utilisateur',
	"find_grp_title"					: u'Trouver un groupe',
	"add_usrgrp_diaolg_grp_tab_title"	: u'Ajouter un groupe',
	"add_usrgrp_diaolg_usr_tab_title"	: u'Ajouter un utilisateur',

	#Settings 												"settings_proshare_mngmnt_btn"	: u'Gestion des partages',
	"settings_rules_btn"			: u'Gestion des règles',
	"settings_users_groups_btn"		: u'Utilisateurs & Groupes',
	"settings_remote_control_btn"	: u'Gestion des droits',


	#Remote scheme (Remote Control)
	"current_scheme_local"		: u'Méthode active : Local',
	"current_scheme_remote"		: u'Méthode active : ProAdmin',
	##"remote_scheme_page_title"	: u'Remote Control', used "settings_remote_control_btn"
	"radio_btn_local"			: u'Gestion locale',
	"radio_btn_remote"			: u'Gestion via ProAdmin',
	#widget_remote_form
	"socket.gaierror" 			: u'Veuiller renseigner le champ "Serveur"',
	"socket.error" 				: u'Adresse du serveur incorrecte',
	"faultType" 				: u'Vérifiez les champs "Login" et "Mot de passe".',
	"connection_error"			: u'Erreur de connexion',
	"connection_success"		: u'Connexion réussie. Recharger la page et essayer de vous identifier à nouveau.',


	#Proadmin_attention
	"proadmin_attention_text"	: u"L'application est gérée par ProAdmin, veuillez utiliser ce logiciel pour configurer les utilisateurs et les groupes.",


	#Rules Management
	"rules_acl_cancel_btn"		: u'<div class="acl_cancel">Annuler</div>',
	"rules_acl_apply_btn"		: u'<div class="acl_apply">Appliquer</div>',
	"cont_rules_title"			: u'<div style="padding-left: 15px;" class="acl_container_title">Gestion des droits</div>',
	"cont_subjects_title"		: u'<div style="padding-left: 30px;" class="acl_container_title">Utilisateurs et groupes</div>',
	"cont_tree_title"			: u'<div class="acl_container_title" style="padding-left: 52px !important;">Objets</div>',
	#rules_simple
	"widgetuser_rights_name"	: u'Nom',
	"widgetuser_rights_access"	: u'Accès',
	"bttn_apply_to_contents"	: u"Héritage des droits",
	"edit_access_rules_title"	: u"Gestion des règles",
	"btn_back_title"			: u"Retour",
	#rights keys (set in proadmin_config)
	"a"							: u'Administration',
	"w" 						: u'Modification',
	"r" 						: u'Lecture',
	"o"							: u'Editer les droits',
	"d"							: u'Suppression',
	"edit_rights"				: u'Propriétaire',
	"Full"						: u'Tous', #title for selecting all available rights options (widget_acl_rules)


	#Users & Groups Management
	"usr_grp_management_page_title"	: u'Gestion des utlisateurs et des groupes',
	"create_user_btn_text"			: u'Créer un utilisateur',
	"create_group_btn_text"			: u'Créer un groupe',
	"users_tab_title"				: u'Utilisateurs',
	"groups_tab_title"				: u'Groupes',
	"fullname_column_header"		: u'Nom et prénom',
	"groupname_column_header"		: u'Nom du groupe',

	#User dialog
	"dialog_edit_user_title"		: u"Modifier l'utilisateur",
	"info_container_title"			: u'Informations',
	"phone"							: u'Tel. Portable',#NEEDED
	"notification_email"			: u'E-mail',#NEEDED
	"country"						: u'Pays',#NEEDED
	"key_words"						: u'Mots clefs',#NEEDED
	#Group dialog
	"dialog_edit_group_title"		: u'Modifier le groupe',
	"add_usrs_to_grp_btn_title"		: u'Ajouter des utilisateurs',
	"group_name_title"				: u'Nom :',
	"add_group"						: u'Ajouter un groupe',
	"find_user"						: u'Trouver un utilisateur',
	"find_group"					: u'Trouver un groupe',
	#Delete user or group dialog
	"delete_usr_grp_dialog_title"	: u'Supprimer un utilisateur ou un groupe ?',


	"VEE_AddSmartFolder"			:u"Ajout d'un dossier intelligent",
	"VEE_DeleteSmartFolder"			:u"Suppression d'un dossier intelligent",
	"VEE_EditSmartFolder"			:u"Edition d'un dossier intelligent",
	"VEE_AddFileSmartFolder"		:u"Ajout d'un fichier à un dossier intelligent",
	"VEE_EditFileSmartFolder"		:u"Editer un fichier dans un dossier intelligent",
	"VEE_DeleteFileSmartFolder"		:u"Suppression d'un fichier dans un dossier intelligent",
	"VEE_AddFile"					:u"Ajout d'un fichier",
	"VEE_EditFile"					:u"Edition d'un fichier",
	"VEE_DeleteFile"				:u"Suppression d'un fichier",
	"VEE_DownloadFileFromSmartFolder"	: u"Téléchargement d'un fichier depuis un dossier intelligent",
	"VEE_SmartFolderOpenByPulicLink"	: u"Ouverture d'un dossier intelligent depuis un lien public",
	"VEE_AddFolder"					:u"Ajout d'un répertoire",
	"VEE_RulesChanged"					:u"Access Change",
	"VEE_EditFolder"				:u"Edition d'un répertoire",
	"VEE_DeleteFolder"				:u"Suppression d'un répertoire",
	"VEE_AddFolderSmartFolder"		:u"Ajout d'un répertorie à un dossier intelligent",
	"VEE_EditFolderSmartFolder"		:u"Edition d'un répertoire dans un dossier intelligent",
	"VEE_DeleteFolderSmartFolder"	:u"Suppression d'un répertoire depuis un dossier intelliegent",


	#log page
	"log_btn_hide_filter"			: u"Masquer filtre",
	"log_btn_show_filter"			: u"Afficher filtre",
	"log_btn_clear_log"				: u"Effacer",
	"log_btn_refresh_log"			: u"Actualiser journal",
	"log_filter_text"				: u"Filtre de configuration",
	"log_by_time"					: u"En temps",
	"log_by_plugin_macros"			: u"En plugin / macros",
	"log_btn_reset_filter"			: u"Reset",
	"log_btn_apply_filter"			: u"Appliquer",
	"log_all_messages"				: u"Tous les messages",
	"log_error"						: u"Erreur",
	"log_invalid_start_date"		: u"Invalid date de début",
	"log_invalid_end_date"			: u"Date de fin incorrecte",
	"log_invalid_start_end"			: u"Date de début doit être inférieure à la date de fin",


	#Users & Groups Management
		#page titles
			"users_groups_management_title"	: u'Gestion des utilisateurs et des groupes',

		#top bar buttons
			"create_user_btn_text"			: u'Créer un utilisateur',
			"create_group_btn_text"			: u'Créer un groupe',
			"add_selected_to_group_btn_text": u'Ajouter au groupe',

		#tableview
			"users_tab_title"				: u'Utilisateurs',
			"groups_tab_title"				: u'Groupes',

		#datatable header
			"fullname_column_header"		: u'Nom et prénom',
			"groupname_column_header"		: u'Nom du groupe',
			"email_column_header"			: u'E-mail',
			"login_column_header"			: u'Login',
			"group_column_header"			: u'Groupe',
			"users_count_column_header"		: u"Le nombre d'utilisateurs",

		#group tab
			"create_new_group_text"			: u'Créer un nouveau groupe',
			"create_new_group_btn"			: u'Créer',
			"create_new_group_placeholder"	: u'Nom du groupe',

		#user dialog
			"dialog_create_user_title"		: u'Nouvel utilisateur',
			"dialog_edit_user_title"		: u"Modifier l'utilisateur",
			"login_field_title"				: u'Login',
			"password_field_title"			: u'Mot de passe',
			"last_name_field_title"			: u'Nom de famille',
			"first_name_field_title"		: u'Prénom',
			"email_field_title"				: u'E-mail',
			"cell_phone_field_title"		: u'Téléphone',
			"country_field_title"			: u'Pays',
			"key_words_field_title"			: u'Mots clés',
			"create_continue_btn"			: u'Créer et continuer',
			"info_cont_title"				: u'Informations',
			"group_cont_title"				: u'Groupes',
			"add_groups_btn"				: u'Ajouter un groupe',
			"no_groups_text"				: u"Pas de groupes disponibles",
			"gen_password_btn"				: u'Générer mot de passe',
			"send_email_checkbox"			: u"Envoyer un e-mail à l'utilisateur",
			"select_groups_text"			: u'Sélectionnez les groupes :',
			"selected_groups_text"			: u'Plusieurs groupes choisis :',

		#group dialog
			"dialog_create_group_title"		: u'Nouveau groupe',
			"dialog_edit_group_title"		: u'Modifier le groupe',
			"name_field_title"				: u'Nom',
			"add_users_btn"					: u'Ajouter un utilisateur',
			"no_users_text"					: u"Il n'y a pas les utilisateurs enregistrés",
			"selected_users_text"			: u"Nombre d'utilisateurs sélectionnés :",
			"select_users_text"				: u'Sélectionnez les utilisateurs :',
			"search_users_text"				: u'Filtre utilisateur',

		#add user/group dialog
			"dialog_add_user_title"			: u'Rechercher des utilisateurs',
			"dialog_add_group_title"		: u'Rechercher des groupes',
			"search_doesnt_find"			: u'Votre recherche ne correspond à',
			"search_field_title_user"		: u'Entrez le nom, prénom ou adresse e-mail',
			"search_field_title_group"		: u'Entrez le nom du groupe',

		#delete dialog
			"dialog_delete_user_title"		: u'Enlevez les objets',
			"dialog_delete_group_title"		: u'Enlevez les objets',

		#dialog add users to group
			"dialog_add_to_group_title"		: u'Ajouter au groupe',
			"to_text"						: u'à',
			"create_new_group_text"			: u'Créer un nouveau groupe',

		"cancel_btn_title"					: u'Annuler',
		"create_btn_title"					: u'Créer',
		"save_btn_title"					: u'Sauver',
		"delete_selected_btn_title"			: u'Supprimer la sélection',
		"add_btn_title"						: u'Ajouter',
		"delete_btn_title"					: u'Effacer',
		"dd_all_users"						: u'Tous les utilisateurs',
		"show_on_page_text"					: u'Afficher par',


		#remote_setting_page
		"settings_remote_page_title" 		: u'Sélectionnez une méthode',
		"text_current_scheme"				: u'Méthode active',
		"radio_btn_local"					: u'Gestion locale',
		"radio_btn_remote"					: u'Gestion par ProAdmin',
		"host"								: u'Hôte :',
		"apply_btn"							: u'Appliquer',
		"test_btn"							: u'Tester la connection',
		"use_settings_btn"					: u'Activer',
		"refresh_btn"						: u'Rafrechir',
		"last_sync_text"					: u'Dernière sync. :',
		"syns_state_text"					: u'Statut de la sync. :',
		"object_text"						: u'Objets :',
		"user_text"							: u'Utilisateurs :',
		"connect_ip_success"				: u'Connecté à',
		"connect_ip_fail"					: u"La connexion à l'adresse IP a échoué",
		"open_session_success"				: u'Ouverture de session OK ',
		"open_session_fail"					: u"Echec de l'ouverture de session : Login ou mot de passe incorrect",
		"proadmin_connection_fail"			: u"La connexion à ProAdmin a échoué: Cette application n'existe pas sur le serveur ou l'identification est incorrecte ",
		"at"								: u'à',
		"test_sso_btn"						: u'Tester le SSO',
		"cancel_btn"						: u'Annuler',
		"close_btn"							: u'Fermer',
		"warning_test_sso"					: u"Vous allez être redirigé vers ProAdmin. Si un problèmre survient pressez le bouton retour de votre navigateur.",
		"success_sso"						: u'SSO est OK.',



		#errors
			"warning_title"					: u'Attention!',
			"error_title"					: u'Erreur!',
			"select_objects_error"			: u'Sélectionnez les objets',
			"fill_group_name_field"			: u'Spécifiez le nom du groupe',
			"group_name_already_exists"		: u'Un groupe portant ce nom existe déjà',
			"group_doesnt_exist"			: u"Le groupe n'existe pas",
			"fill_all_fields_with_star_error" : u"S'il vous plaît remplir tous les champs",
			"user_doesnt_exist_error"		: u"L'utilisateur n'existe pas. Actualisez la page.",
			"group_doesnt_exist_error"		: u"Le groupe n'existe pas. Actualisez la page.",
			"user_login_already_exist_error": u'Un utilisateur avec cet identifiant existe déjà',
			"user_email_is_incorrect_error" : u'Erreur adresse e-mail',
			"user_phone_illegal_characters"	: u'Numéro de téléphone incorrect',
			"user_password_is_empty_error"	: u'Entrez le mot de passe',
	"license" : 	u"""Veuillez lire et accepter ce contrat de licence avant d’installer et d’utiliser le software. Si vous êtes une personne physique, vous devez être majeure ou avoir une autorisation parentale. Si vous l’achetez pour le compte d'une entreprise, vous devez disposer des pouvoirs notariaux complets afin de légaliser ce contrat au nom de l'entreprise. En cliquant sur le bouton « Accepter » (ou équivalent) placé plus bas, vous accepterez ce contrat.
En exécutant {0}, vous acceptez implicitement les termes et les conditions du présent document, et également que vous connaissez {0} et que vous l’exécutez sous votre propre responsabilité.
VDOM Box International se réserve le droit de mettre à jour et de modifier la Licence de logiciel et tous documents de référence joints, le cas échéant.
Droits d’auteur\n
Ce logiciel et sa documentation sont la propriété de VDOM Box International. Il est interdit de les traduire, décompiler, modifier, adapter et corriger, ce qui inclut l’utilisation de toute technologie actuelle ou future. Il vous est interdit de supprimer ou modifier les informations de licence et de le transmettre à des tiers. La location et le prêt du logiciel sont interdits. Vous ne pouvez pas utiliser ce logiciel sur un autre matériel que celui fourni avec celui-ci. Seul l’auteur est habilité à effectuer ces opérations.\n
Le non-respect de l’un des termes et conditions de cette Licence sera interprété comme un non-respect de ce Contrat.\n
Garanties et responsabilités

Vous devez utiliser {0} conformément aux termes et aux conditions du présent document. VDOM Box International déclinera toute responsabilité concernant les dommages émanant de votre utilisation de {0} de manière contraire à cette Licence de logiciel.
À l’exception des responsabilités réglementaires établies par les lois de protection du consommateur, vous exemptez VDOM Box International de toute responsabilité émanant de l’exécution inadéquate de {0} ou du fonctionnement incorrect de {0} lié à votre manière d’exécuter le logiciel. Cette exemption de responsabilité s’étendra également aux employés et à la direction de VDOM Box International.
VDOM Box International stipule que cette Licence qui permet d’utiliser {0} n’enfreint aucun contrat préalable ou législation actuelle.
VDOM Box International garantit que {0} n’est pas un programme espion ou de publicité. VDOM Box International garantit également que {0} ne montre pas de publicités émergentes et ne compile pas non plus les données personnelles des utilisateurs.
VDOM Box International ne garantit pas la disponibilité, la continuité ni le fonctionnement à l’abri des fausses manœuvres de {0}. Par conséquent, dans la mesure où la législation le permet, cette garantie n’inclut pas les dommages émanant du manque de responsabilité ou fonctionnement ininterrompu de {0} et de tout service facilité à travers celui-ci.
VDOM Box International n’assume pas la responsabilité en cas de circonstance imprévisible ou de force majeure. De même, VDOM Box International ne sera pas responsable des causes hors du contrôle raisonnable telles que les virus et les interférences de tiers.
Vous exempterez VDOM Box International de toute responsabilité pour les droits de propriété intellectuelle, les droits de distribution, l’intégrité, la qualité et l’exécution du logiciel informatique téléchargé avec {0}.
Vous affirmez avoir pris connaissance du fait que VDOM Box International peut n’avoir aucun rapport avec les propriétaires des programmes informatiques que vous téléchargez. Vous exempterez VDOM Box International de toute responsabilité concernant toutes actions en justice intentées contre vous, liées à votre utilisation ou possession de produits téléchargés avec {0}, comprenant, mais sans se limiter à cela, les réclamations pour calomnies, violations de droits de protection des données ou publicité, droits de propriété intellectuelle, droits de nom commercial et toute autre action ou plainte se référant au contenu, à la qualité et au fonctionnement de ce logiciel.
Si vous effectuez une des opérations ci-dessus, vos droits d’utilisation sont automatiquement résiliés et l’auteur pourra ester en justice pour obtenir des dommages et intérêts.\n
Vous n’êtes pas autorisé à posséder des copies du fichier XML (généré par le serveur VDOM après l'installation du logiciel) représentant l’application sur d’autres supports de stockage que ceux inclus dans le matériel exécutant l’application. Vous n’êtes pas autorisé à faire de copies de la documentation papier.\n
Transfert de licence. Pour transférer la licence de ce logiciel sur un autre utilisateur unique, celle-ci doit d’abord être supprimée de la carte à puce du précédent utilisateur, ce transfert ne peut se faire que par le distributeur de cette licence.\n
En utilisant ce logiciel, vous vous engagez à respecter les droits d’auteur, et à veiller à ce que les autres utilisateurs les respectent aussi.\n
Ce logiciel est protégé en France par les lois sur la propriété intellectuelle ainsi qu’à l’étranger par les conventions internationales sur le droit d’auteur (convention de Berne).\n
La violation de l'un des droits de l'auteur du logiciel est un délit de contrefaçon sanctionnée en France par l'article L335-2 du code de la propriété intellectuelle.\n
Le logiciel est fourni tel quel, sans aucune garantie. L'auteur ne saurait voir sa responsabilité engagée en cas de dommages de quelque nature que ce soit subis par l'utilisateur ou des tiers et résultant directement ou indirectement de son utilisation, notamment la perte de données, ou toute perte financière résultant de son utilisation ou de l’impossibilité de l’utiliser, et ceci même si l’auteur a été prévenu de la possibilité de tels dommages. En tout état de cause, la responsabilité de l’auteur ne pourra excéder le montant payé pour l’acquisition ou l’utilisation de la licence.\n
Si le logiciel proposé est présenté comme étant une mise à jour, vous devez être déjà titulaire d’une licence antérieure du même logiciel pour pouvoir en bénéficier. Une mise à jour complète ou remplace la licence et la version antérieure du logiciel. La mise à jour et la licence originale doivent être considérées comme un produit unique. Vous n’êtes donc pas autorisé à les céder ou donner séparément.""",

	"license_button" : u"License",

	#license page
	"agree_button"				: u'Accepter',
	"disagree_button"			: u'Rfuser',
	"close_button"				: u'Fermer',
	"disagree_warning"			: u'Vous devez accepter cette licence pour utiliser le produit.',
	"select_operation_mode"		: u'Choisissez le mode de gestions des drotis :',
	"standalone_mode"			: u'Autonomme',
	"proadmin_mode"				: u'Via ProAdmin',
	"proadmin_page_warning"		: u'ProAdmin peut aussi être configuré dans le logiciel.',
	"go_button"					: u'Suivant',
	"password_title"			: u'Veuillez saisir le mot de passe administrateur :',
	"password_field"			: u'Mot de passe :',
	"confirm_password_field"	: u'Confirmer le mot de passe :',
	"apply_password"			: u'Appliquer',

	#proadmin_v2
	"system_login_title"			: u'Système login',
	"system_account"				: u'Compte système :',
	"login_btn"						: u'Login',
	"users_container_label"			: u'Utilisateur',
	"incorrect_login"				:u'Login ou mot de passe incorrecte',
	"no_vdom"						:u"Le serveur auquel vous vous connecté n'est pas de type VDOM",
	"standalone"					:u'Autonome',
	"proadmin_connection"			:u'Connecté à ProAdmin',
	"restart_connectoin_btn"		:u'Restart connection',
	"reset_btn"						:u'RAZ',
	"greating_title"				:u'Connecté en tant que %s',
	"account_column"				:u'Login',
	"name_column"					:u'Nom',
	"login_column"					:u'Se connecter en tant que',
	"standalone_text"				:u"Votre logiciel n'utilisera pas ProAdmin pour la gestion des droits, il fonctionnera en mode autonome",
	"proadmin_text"					:u"Votre logiciel utilisera ProAdmin pour la gestion des droits, celle-ci sera ainsi centralisée.",
	"logout_hint"					:u'Veuillez cliquer pour vous déconnecter',
	"user_not_logged_in"			:u"Vous n'êtes pas connecté...",
	"proadmin_management"			:u'Gestion ProAdmin',
	"user_management"				:u'Gestion des utilisateurs',


	#log off/start button
	"switch_to"						: u"Aller vers",
	"logout"						: u"Deconnexion",
	"logoff_caption"				: u"Deconnexion.",
	"logoff_message"				: u"Vous allez être redirigé vers la page de login dans quelques secondes.",

	#free_space
	"Gb"			:u'Go',
	"Mb"			:u'Mo',
	"of"			:u' de ',
	"free"			:u' Libre',
}

lang_rectangle = {
	#'id' 							: 	[ 	left,		top,	width,	height 	]
	"user_and_group_manage"	: {
		#top bar
			"top_bar_create_user_btn"		: 	[	"18", 	"85", 	"90", 	"35" 	],
			"top_bar_delete_selected_btn" 	: 	[ 	"118", 	"85", 	"98", 	"35" 	],
			"top_bar_add_to_group_btn"		: 	[ 	"226", 	"85", 	"84", 	"35" 	],
			"top_Bar_create_group_btn"		:	[	"18",	"85",	"88",	"35"	],

		#add to group dialog
			"add_to_group_to_title_text"	:	[ 	"17",	"155",	"15",	"14"	],

		#create user dialog
			"continue_btn"					:	[	"111",	"582",	"188",	"25"	],
			"add_groups_btn"				:	[	"14",	"27",	"140",	"32"	],
			"del_sel_groups_btn"			:	[	"160",	"27",	"170",	"32"	],

		#add user group dialog
			"add_ug_cancel_btn"				:	[	"218",	"397",	"80",	"33"	],
			"add_ug_add_btn"				:	[	"310",	"397",	"80",	"33"	],
			"selected_users_text"			:	[	"19",	"364",	"190",	"14"	],
			"selected_groups_text"			:	[	"8",	"446",	"140",	"14"	],
			"selected_users_count"			:	[	"215",	"364",	"50",	"14"	],
			"selected_groups_count"			:	[	"155",	"446",	"50",	"14"	],

			"objects_per_page_dropdown"		: 	[	"70",	"1",	"52",	"22"	],
		}
}
]]>
		</Library>
		<Library Name="promail_email_archive">
<![CDATA["""
"""

import json
import utils.uuid as uuid

from vdom_document_archive import Document, DocumentArchive


def from_json(method):
    """
    """
    def wrapper(*args, **kwargs):
        """
        """
        val = method(*args, **kwargs)
        if val:
            val = json.loads(val)

        return val

    return wrapper


def to_json(method):
    """
    """
    def wrapper(self, val):
        """
        """
        if val or isinstance(val, (list, tuple, dict)):
            val = json.dumps(val)

        method(self, val)

    return wrapper


class EmailDocument(Document):

    class STATE(object):
        UNREAD = "unread"
        READ = "read"
        DRAFT = "draft"

    def __init__(self, mailbox_id):
        super(EmailDocument, self).__init__(mailbox_id)

        self.set_field('subject')
        self.set_field('from_email')
        self.set_field('to_email')
        self.set_field('cc_email')
        self.set_field('attachindex')
        self.set_field('attachguids')
        self.set_field('body')
        self.set_field('datetime')
        self.set_field('timestamp')
        self.set_field('state')
        self.set_field('location')
        self.set_field('priority')
        self.set_field('eactoken')
        self.set_field('eacbody')
        self.set_field('uid')

    @property
    def EACToken( self ):
        return self.get_field('eactoken')

    @EACToken.setter
    def EACToken(self, value):
        self.set_field('eactoken', value)

    @property
    def EACBody( self ):
        return self.get_field('eacbody')

    @EACBody.setter
    def EACBody(self, value):
        self.set_field('eacbody', value)

    @property
    def subject( self ):
        return self.get_field('subject')

    @subject.setter
    def subject(self, value):
        self.set_field('subject', value)

    @property
    @from_json
    def from_email(self):
        return self.get_field('from_email')

    @from_email.setter
    @to_json
    def from_email(self, value):
        self.set_field('from_email', value)

    @property
    @from_json
    def to_email(self):
        return self.get_field('to_email')

    @to_email.setter
    @to_json
    def to_email(self, value):
        self.set_field('to_email', value)

    @property
    @from_json
    def cc_email(self):
        return self.get_field('cc_email')

    @cc_email.setter
    @to_json
    def cc_email(self, value):
        self.set_field('cc_email', value)

    @property
    def attachindex( self ):
        return self.get_field('attachindex')

    @attachindex.setter
    def attachindex( self, value):
        self.set_field('attachindex', value)

    @property
    @from_json
    def attachguids( self ):
        return self.get_field('attachguids')

    @attachguids.setter
    @to_json
    def attachguids( self, value):
        self.set_field('attachguids', value)

    @property
    @from_json
    def body(self):
        return self.get_field('body')

    @body.setter
    @to_json
    def body(self, value):
        self.set_field('body', value)

    @property
    def timestamp(self):
        return self.get_field('timestamp')

    @timestamp.setter
    def timestamp(self, value):
        self.set_field('timestamp', value)

    @property
    def datetime(self):
        return self.get_field('datetime')

    @datetime.setter
    def datetime(self, value):
        self.set_field('datetime', value)

    @property
    def state(self):
        return self.get_field('state')

    @state.setter
    def state(self, value):
        self.set_field('state', value)

    @property
    def location(self):
        return self.get_field('location')

    @location.setter
    def location(self, value):
        self.set_field( 'location', value )

    @property
    def priority(self):
        return self.get_field('priority')

    @priority.setter
    def priority(self, value):
        self.set_field('priority', value)

    @property
    def uid(self):
        return self.get_field('uid')

    @uid.setter
    def uid(self, value):
        return self.set_field('uid', value)

    def save(self):
        """
        """
        if not self.id:
            self.id = str(uuid.uuid4())

        super(EmailDocument, self).save()


class MailBoxSource(DocumentArchive):
    def create_document(self):
        return EmailDocument(self.id)
]]>
		</Library>
		<Library Name="ProSuitePluginIdePage">
<![CDATA["""
"""

import json
import urllib

from collections import OrderedDict

import ProAdmin

from prosuite_plugins import Plugin
from prosuite_web import ProSuiteBasicPage, administrator_only, error_handler,\
                         authenticated, callback
from prosuite_utils import CachedProperty



################
# CONSTANTS
################
SELECTED_PLUGIN_SV_KEY = "plugin.selected.guid"

NEW_SOURCE_KEY = \
NEW_LIBRARY_KEY = "new"

NEW_SOURCE_TMPLT = NEW_LIBRARY_TMPLT = u"""Create new"""


OBJ_VIEW_TEMPLATES = {
    "timers": u"""<VDOMCLASS name="timervdomclass" classname="ov-plugin-timer" top="202" height="69" left="486" visible="1">
  <IMAGE name="timerico" top="10" value="2b1b03fb-a2ac-4d2a-b78f-1663e341b510" left="17"/>
  <TEXT name="timername" top="18" value="Timer name" width="108" left="82"/>
  <TEXT name="timerinterval" top="38" value="00:00:00:00" width="108" left="82"/>
</VDOMCLASS>""",

    "events": u"""<VDOMCLASS name="eventvdomclass" classname="ov-plugin-event" top="202" height="69" left="486" visible="1">
  <IMAGE name="eventico" top="10" value="2b1b03fb-a2ac-4d2a-b78f-1663e341b510" left="17"/>
  <TEXT name="eventname" top="28" value="Timer name" width="108" left="82"/>
</VDOMCLASS>""",
}

OBJ_VIEW_BINDINGS = {
    "timers": {
        "name": "timername.value",
        "interval": "timerinterval.value",
    },

    "events": {
        "name": "eventname.value",
    }
}


class BaseObjectView(object):

    def __init__(self, delegate):
        self.delegate = delegate

    def get_data(self):
        raise NotImplementedError

    def remove_items(self, guids):
        raise NotImplementedError

    def render(self):

        objview = self.delegate.vdom_objects["resobjectview"]
        objview.template = json.dumps(OBJ_VIEW_TEMPLATES)
        objview.bindings = json.dumps(OBJ_VIEW_BINDINGS)
        objview.data = json.dumps(self.get_data())
        objview.height = self.delegate.get_shared_var("resobjview.height", "400")
        objview.width = self.delegate.get_shared_var("resobjview.width", "400")


class TimersObjectView(BaseObjectView):

    def get_data(self):
        return OrderedDict([(timer.guid, {
            "name": timer.name,
            "interval": timer.interval,
            "vdomclass": "timers"
        }) for timer in self.delegate.selected_plugin.timers(sorted=True)])

    def remove_items(self, guids):
        for guid in guids:
            timer = self.delegate.selected_plugin.get_timer(guid)
            if timer:
                timer.delete()



class EventsObjectView(BaseObjectView):

    def get_data(self):
        return OrderedDict([(event.guid, {
            "name": event.name,
            "vdomclass": "events"
        }) for event in self.delegate.selected_plugin.custom_events(sorted=True)])

    def remove_items(self, guids):
        for guid in guids:
            event = self.delegate.selected_plugin.get_custom_event(guid)
            if event:
                event.delete()


class Sidebar(object):

    def __init__(self, delegate):
        self.delegate = delegate

    @CachedProperty
    def item_funcs(self):
        return {
            self.delegate.vdom_objects["sidebar.libraries"].id: self.show_editor_view,
            self.delegate.vdom_objects["sidebar.sources"].id: self.show_editor_view,
            self.delegate.vdom_objects["sidebar.resources"].id: self.show_resources_view,
            self.delegate.vdom_objects["sidebar.timers"].id: self.show_timers_view,
            self.delegate.vdom_objects["sidebar.events"].id: self.show_events_view,
            self.delegate.vdom_objects["sidebar.databases"].id: self.show_databases_view,
        }

    @CachedProperty
    def form_funcs(self):
        return {
            self.delegate.vdom_objects["sidebar.libraries"].id: self.delegate.library_dialog,
            self.delegate.vdom_objects["sidebar.sources"].id: None,
            self.delegate.vdom_objects["sidebar.resources"].id: None,
            self.delegate.vdom_objects["sidebar.timers"].id: self.delegate.timer_dialog,
            self.delegate.vdom_objects["sidebar.events"].id: self.delegate.event_dialog,
            self.delegate.vdom_objects["sidebar.databases"].id: None
        }

    def show_editor_view(self):
        raise Exception("show editor view")

    def show_databases_view(self):
        raise Exception("show databases view")

    def show_resources_view(self):
        raise Exception("show resources view")

    def show_timers_view(self):
        return TimersObjectView(self.delegate)

    def show_events_view(self):
        return EventsObjectView(self.delegate)

    def render_sources_list(self):
        pass
        # self.delegate.vdom_objects["sidebar.sources.list"].data = json.dumps(result)

    def render_libraries_list(self):
        result = OrderedDict()
        result[NEW_LIBRARY_KEY] = NEW_LIBRARY_TMPLT

        for library in self.delegate.selected_plugin.libraries(sorted=True):
            result[library.guid] = library.name

        self.delegate.vdom_objects["sidebar.libraries.list"].data = json.dumps(result)

    def render_resources_list(self):
        pass

    def render_databases_list(self):
        pass

    def render_events_list(self):
        pass

    def render_timers_list(self):
        pass

    def render(self):
        self.render_sources_list()
        self.render_libraries_list()
        self.render_resources_list()
        self.render_databases_list()
        self.render_events_list()
        self.render_timers_list()



class LibraryInfoDialog(object):

    def __init__(self, delegate):
        self.delegate = delegate

    def show_empty_dialog(self):
        self.delegate.vdom_objects["dialog.library.edit.guid"].action("setValue", [""])
        self.delegate.vdom_objects["dialog.library.edit.name"].action("setValue", [""])
        self.delegate.vdom_objects["dialog.library.edit.desc"].action("setValue", [""])
        self.delegate.vdom_objects["dialog.library.edit.submit"].action("setLabel", ["Create"])
        self.delegate.vdom_objects["dialog.library.edit"].action("setTitle", ["Create library"])
        self.delegate.vdom_objects["dialog.library.edit"].action("show", [""])

    def show_library_info(self, itemid):
        library = self.delegate.selected_plugin.get_library(itemid)
        if not library:
            self.delegate.show_error_growl(
                "Library not exists",
                "Error"
            )
            return

        self.delegate.vdom_objects["dialog.library.edit.guid"].action("setValue", [library.guid])
        self.delegate.vdom_objects["dialog.library.edit.name"].action("setValue", [library.name])
        self.delegate.vdom_objects["dialog.library.edit.desc"].action("setValue", [library.description])
        self.delegate.vdom_objects["dialog.library.edit.submit"].action("setLabel", ["Submit"])
        self.delegate.vdom_objects["dialog.library.edit"].action("setTitle", ["Edit library"])
        self.delegate.vdom_objects["dialog.library.edit"].action("show", [""])

    def submit(self):
        guid = self.delegate.get_argument("libguid", "")
        name = self.delegate.get_argument("libname", "")
        desc = self.delegate.get_argument("description", "")

        library = self.delegate.selected_plugin.get_library(guid) if guid else \
                  self.delegate.selected_plugin.create_library()

        if not (library and name):
            self.delegate.show_error_growl(
                "Fill 'Name' field",
                "Error"
            )
            return False

        library.name = name
        library.description = desc
        library.save()

        self.delegate.vdom_objects["dialog.library.edit"].action("hide", [""])

        return True


class TimerInfoDialog(object):

    def __init__(self, delegate):
        self.delegate = delegate

    def show_obj_info(self, itemid):
        timer = self.delegate.selected_plugin.get_timer(itemid)
        if not timer:
            self.delegate.show_error_growl(
                "Timer not exists",
                "Error"
            )
            return

        self.delegate.vdom_objects["dialog.timer.edit.guid"].action("setValue", [timer.guid])
        self.delegate.vdom_objects["dialog.timer.edit.name"].action("setValue", [timer.name])
        self.delegate.vdom_objects["dialog.timer.edit.interval"].action("setValue", [timer.interval])
        self.delegate.vdom_objects["dialog.timer.edit"].action("setTitle", ["Edit timer"])
        self.delegate.vdom_objects["dialog.timer.edit"].action("show", [""])

    def submit(self):
        guid = self.delegate.get_argument("timerguid", "")
        name = self.delegate.get_argument("timername", "")
        interval = self.delegate.get_argument("timerinterval", "")

        timer = self.delegate.selected_plugin.get_timer(guid) if guid else \
                  self.delegate.selected_plugin.create_timer()

        if not (timer and name):
            self.delegate.show_error_growl(
                "Fill 'Name' field",
                "Error"
            )
            return False

        try:
            map(int, interval.split(":"))
        except:
            self.delegate.show_error_growl(
                "Invalid interval value, must be like dd:hh:mm:ss",
                "Error"
            )
            return False


        timer.name = name
        timer.interval = interval
        timer.save()

        self.delegate.vdom_objects["dialog.timer.edit"].action("hide", [""])

        return True


class EventInfoDialog(object):

    def __init__(self, delegate):
        self.delegate = delegate

    def show_obj_info(self, itemid):
        event = self.delegate.selected_plugin.get_custom_event(itemid)
        if not event:
            self.delegate.show_error_growl(
                "Event not exists",
                "Error"
            )
            return

        self.delegate.vdom_objects["dialog.event.edit.guid"].action("setValue", [event.guid])
        self.delegate.vdom_objects["dialog.event.edit.name"].action("setValue", [event.name])
        self.delegate.vdom_objects["dialog.event.edit"].action("setTitle", ["Edit event"])
        self.delegate.vdom_objects["dialog.event.edit"].action("show", [""])

    def submit(self):
        guid = self.delegate.get_argument("eventguid", "")
        name = self.delegate.get_argument("eventname", "")

        event = self.delegate.selected_plugin.get_custom_event(guid) if guid else \
                  self.delegate.selected_plugin.create_custom_event()

        if not (event and name):
            self.delegate.show_error_growl(
                "Fill 'Name' field",
                "Error"
            )
            return False

        event.name = name
        event.save()

        self.delegate.vdom_objects["dialog.event.edit"].action("hide", [""])

        return True


class ProSuitePluginIdePage(ProSuiteBasicPage):

    @error_handler
    @authenticated
    @administrator_only
    def live(self, action="onload"):
        if not self.selected_plugin:
            self.show_no_such_plugin_error()

        else:
            self.set_shared_var(SELECTED_PLUGIN_SV_KEY, self.selected_plugin.guid)
            self._live(action)

    def onload(self, page_controller):
        """
        """
        self.sidebar.render()

    def get_page_title(self):
        return self.app_settings.localization["page_title"].format(
            app_name=self.app_settings.info["name"],
            page_name=self.localization["pluginide.title"]
        )

    def get_localization_data(self):
        return {}

    @CachedProperty
    def selected_plugin(self):
        plugin = self.get_argument("guid", "") if not self.is_action else \
               self.get_shared_var(SELECTED_PLUGIN_SV_KEY, "")

        if plugin:
            plugin = Plugin.get_by_guid(plugin)

        return plugin

    def show_no_such_plugin_error(self):
        if self.is_action:
            self.show_error_growl(
                "Plugin not exists in system any more. Please, reload page",
                "Fatal error"
            )

        else:
            self.redirect(self.app_settings.pages["plugins"])

    @CachedProperty
    def sidebar(self):
        return Sidebar(self)

    @CachedProperty
    def library_dialog(self):
        return LibraryInfoDialog(self)

    @CachedProperty
    def timer_dialog(self):
        return TimerInfoDialog(self)

    @CachedProperty
    def event_dialog(self):
        return EventInfoDialog(self)

    @callback
    def library_list_click(self, page_controller):
        itemid = self.get_argument("itemid", "")
        if not itemid:
            return

        if itemid == NEW_LIBRARY_KEY:
            self.library_dialog.show_empty_dialog()

        else:
            self.library_dialog.show_library_info(itemid)

    @callback
    def source_list_click(self, page_controller):
        pass

    @callback
    def library_dialog_submit(self, page_controller):
        if self.library_dialog.submit():
            self.sidebar.render_libraries_list()

    @callback
    def sidebar_item_click(self, page_controller):
        itemid = self.get_argument("id").replace("_", "-")
        func = self.sidebar.item_funcs.get(itemid, None)
        if func:
            self.set_shared_var("sidebar.item.active", itemid)
            func().render()

    @callback
    def timer_dialog_submit(self, page_controller):
        if self.timer_dialog.submit():
            self.sidebar.show_timers_view().render()

    @callback
    def event_dialog_submit(self, page_controller):
        if self.event_dialog.submit():
            self.sidebar.show_events_view().render()

    @callback
    def show_delete_selected_res_objects(self, page_controller):
        if self.get_shared_var('resObjView.selected.guids', ''):
            self.vdom_objects["dialog.deletesel"].action("show", [""])

    @callback
    def submit_delete_selected_res_objects(self, page_controller):
        self.vdom_objects["dialog.deletesel"].action("hide", [""])
        guids = self.get_shared_var('resObjView.selected.guids', '')
        active = self.get_shared_var("sidebar.item.active", '')
        func = self.sidebar.item_funcs.get(active, None)
        if not (guids and func):
            return

        view = func()
        view.remove_items(guids)
        view.render()

    @callback
    def res_object_view_double_click(self, page_controller):
        itemid = self.get_argument("itemid", "")
        active = self.get_shared_var("sidebar.item.active", '')
        form = self.sidebar.form_funcs.get(active, None)

        if not (itemid and form):
            return

        form.show_obj_info(itemid)
]]>
		</Library>
		<Library Name="class_resource">
<![CDATA[import base64

class Resource:
	def __init__(self, res_name, res_source):
		self.name 			= res_name
		self.res_source 	= res_source

	def get_xmlnode(self):
		from class_xml_resource import XMLResource
		import base64
		xml = XMLResource()
		xml.name 			= self.name
		xml.res_source 		= base64.b64encode(self.res_source.read())

		return xml
]]>
		</Library>
		<Library Name="class_macro">
<![CDATA[from class_db import Database
from utils.uuid import uuid4
from collections import OrderedDict
import base64
import re
import marshal
from sqlite3 import Binary
_SQL_TABLE_NAME = "macros"
_SQL_SELECT_HEADER = """
            SELECT
                id,
                code,
                name,
                class_name,
                is_button_macros,
                on_board,
                picture,
                guid,
                page,
                description,
                zindex,
                timer_guid,
                plugin_guid,
                namespace,
                page,
                custom_event_guid,
                type,
                bytecode
            FROM `{0}` """.format( _SQL_TABLE_NAME )


LIB_NAME_REGEXP = re.compile(r"^'#include\((\w+)\)", flags=re.MULTILINE)


class Macros ( object ):

    class MacrosType(object):
        BUTTON = "button"
        EVENT  = "event"
        LIBRARY= "library"
        UNKNOWN= "unknown"

    def __init__( self ):
        self.id                 = None
        self.name               = None
        self.code               = ""
        self.class_name         = None
        self.is_button_macros   = None
        self.on_board           = None
        self.macros_picture     = None
        self.guid               = None
        self.page               = None
        self.description        = None
        self.zindex             = None
        self.timer_guid         = None
        self.namespace          = None
        self.plugin_guid        = None
        self.page               = None
        self.custom_event_guid  = None
        self.type               = self.MacrosType.UNKNOWN
        self.bytecode            = None

    def get_plugin(self):
        from class_plugins import Plugins
        return Plugins.get_by_guid(self.plugin_guid)

    def get_plugin_guid( self ):
        return self.__plugin_guid

    def set_plugin_guid( self, value ):
        self.__plugin_guid = self.namespace = value

    plugin_guid = property( get_plugin_guid, set_plugin_guid )

    def __fill_from_row( self, row ):
        self.id                 = row[0]
        self.code               = row[1] or ""
        self.name               = row[2]
        self.class_name         = row[3]
        self.is_button_macros   = row[4]
        self.on_board           = row[5]
        self.macros_picture     = row[6]
        self.guid               = row[7]
        self.page               = row[8]
        self.description        = row[9]
        self.zindex             = row[10]
        self.timer_guid         = row[11]
        self.plugin_guid        = row[12]
        self.namespace          = row[13]
        self.page               = row[14]
        self.custom_event_guid  = row[15]
        self.type               = row[16]
        try:
        	self.bytecode           = marshal.loads(row[17]) if row[17] and len(row[17])> 0 else None
        except EOFError:
        	self.bytecode = None


        if not self.type or self.type == self.MacrosType.UNKNOWN:
            self.type = self.MacrosType.BUTTON if self.is_button_macros == "1" else \
                        self.MacrosType.EVENT


        return self


    def register_macro( self ):
        register_macro( self )


    def unregister_macro( self ):
        unregister_macro( self )


    def save( self):
        self.bytecode = None
        (self.__update if self.id else self.__insert)()
#        self.unregister_macro()
        self.register_macro()
        return self

    def save_after_compile(self):
        self.__update()

    def __insert(self):
        self.guid = str( uuid4() ) if self.guid is None else self.guid
        bytecode = Binary(marshal.dumps(self.bytecode)) if self.bytecode else None
        self.id = Database.macrosdb().commit(
            "INSERT INTO macros (name, code, class_name, is_button_macros,"
            "on_board, picture, guid, page, description, zindex, timer_guid,"
            "plugin_guid, namespace, page, custom_event_guid,type,bytecode) VALUES"
            "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""",
             ( self.name, self.code, self.class_name, self.is_button_macros,
             self.on_board, self.macros_picture, self.guid, self.page,
             self.description, self.zindex, self.timer_guid,
             self.plugin_guid, self.plugin_guid, self.page,
             self.custom_event_guid, self.type, bytecode) )
        return self


    def delete( self ):
        Database.macrosdb().commit("""DELETE FROM macros WHERE id=?""", (self.id,))
        self.unregister_macro( )
        self.id = None


    def __update(self):
        bytecode = Binary(marshal.dumps(self.bytecode)) if self.bytecode else None
        Database.macrosdb().commit(
            """UPDATE macros
                SET
                    name=?,
                    code=?,
                    class_name=?,
                    is_button_macros=?,
                    on_board=?,
                    picture=?,
                    guid=?,
                    page=?,
                    description=?,
                    zindex=?,
                    timer_guid=?,
                    plugin_guid=?,
                    namespace=?,
                    page=?,
                    custom_event_guid=?,
                    type=?,
                    bytecode = ?
                    WHERE id=?""",
             (self.name, self.code, self.class_name, self.is_button_macros,
             self.on_board, self.macros_picture, self.guid, self.page,
             self.description, self.zindex, self.timer_guid, self.plugin_guid,
             self.namespace, self.page, self.custom_event_guid,
             self.type,bytecode,self.id))
        return self


    @classmethod
    def get_all(self):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER, )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []

    @classmethod
    def get_all_event_macros(self):
        db_rows = Database.macrosdb().fetch_all(    _SQL_SELECT_HEADER +
            "WHERE class_name<>''", )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []


    @classmethod
    def get_all_on_board(self):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE on_board='1'", )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []

    @classmethod
    def get_all_button(self):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE is_button_macros='1' AND on_board='0'", )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []

    @classmethod
    def get_all_non_event(self):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE is_button_macros='1'", )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []


    @classmethod
    def get_all_non_library(self):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE type<>?", (self.MacrosType.LIBRARY,) )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []



    @classmethod
    def get_by_id(self, id):
        db_row = Database.macrosdb().fetch_one( _SQL_SELECT_HEADER +
            "WHERE id=?", (id, ))

        return self().__fill_from_row(db_row) if db_row else None

    @classmethod
    def get_by_guid(self, guid):
        db_row = Database.macrosdb().fetch_one( _SQL_SELECT_HEADER +
            "WHERE guid=?", (guid, ))

        return self().__fill_from_row(db_row) if db_row else None

    @classmethod
    def get_macros_by_plugin_guid(self, plugin_guid):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE plugin_guid=?", ( plugin_guid, ) )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []


    @classmethod
    def get_macros_by_timer_guid(self, timer_guid):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE timer_guid=?", ( timer_guid, ) )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []

    @classmethod
    def get_macros_by_custom_event_guid(self, custom_event_guid):
        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE custom_event_guid=?", ( custom_event_guid, ) )

        return [self().__fill_from_row(row) for row in db_rows] if db_rows else []



    @classmethod
    def get_config_macro(self, plugin_guid):
        db_row = Database.macrosdb().fetch_one( _SQL_SELECT_HEADER +
            "WHERE plugin_guid=? AND name='config'", ( plugin_guid, ) )

        return self().__fill_from_row(db_row) if db_row else None

    @classmethod
    def export(self, id_list):
        from StringIO import StringIO

        outp = StringIO()
        outp.write("<macros>\n")
        for id in id_list:
             macros = self.get_by_id(id)

             outp.write(macros.generate_xml())

        outp.write("</macros>")
        return outp


    def get_xmlnode(self):
        from class_xml_macro import XMLMacros
        import base64
        xml = XMLMacros()
        xml.name            = self.name
        xml.source          = self.code
        xml.class_name      = self.class_name
        xml.is_button       = self.is_button_macros if self.is_button_macros else "0"
        xml.on_board        = self.on_board if self.on_board else "0"
        xml.macros_picture  = base64.b64encode(application.storage.readall(self.macros_picture)) if self.macros_picture else ""
        xml.description     = self.description
        xml.guid            = self.guid
        xml.timer_guid      = self.timer_guid
        xml.custom_event_guid = self.custom_event_guid
        xml.page            = self.page

        if not self.type or self.type == self.MacrosType.UNKNOWN:
            self.type = self.MacrosType.BUTTON if self.is_button_macros == "1" else \
                        self.MacrosType.EVENT

        xml.type            = self.type

        return xml
        #xml.save()

    def generate_xml(self):
        return self.get_xmlnode().toprettyxml().encode("utf8")


    def fill_from_xml(self, xml, plugin_guid):
        self.name           = xml.name
        self.code           = xml.source
        self.class_name     = xml.class_name
        self.is_button_macros = xml.is_button
        self.on_board       = xml.on_board
        self.guid               = xml.guid
        self.timer_guid         = xml.timer_guid
        self.custom_event_guid  = xml.custom_event_guid
        self.description        = xml.description
        self.plugin_guid        = plugin_guid
        self.page               = xml.page
        self.type               = xml.type
        self.bytecode           = None
        if not self.type or self.type == self.MacrosType.UNKNOWN:
            self.type = self.MacrosType.BUTTON if self.is_button_macros == "1" else \
                        self.MacrosType.EVENT


        picture_name = ""
        self.macros_picture = ""
        if xml.macros_picture:
            self.macros_picture = picture_name = str(uuid4())
            application.storage.write(picture_name, base64.b64decode(xml.macros_picture))

        self.save()


    def libraries(self):
        lib_names = LIB_NAME_REGEXP.findall(self.code)
        if not lib_names: return []

        lib_names = OrderedDict.fromkeys([n.lower() for n in lib_names])

        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            "WHERE plugin_guid=? and type=?", (self.plugin_guid, self.MacrosType.LIBRARY) )

        libraries = [Macros().__fill_from_row(row) for row in db_rows] if db_rows else []

        for lib in libraries:
            if lib.name.lower() in lib_names:
                lib_names[lib.name.lower()] = lib

        return [lib for lib in lib_names.values() if lib is not None]



    @classmethod
    def update_all_macro_with_library(cls, library):

        db_rows = Database.macrosdb().fetch_all( _SQL_SELECT_HEADER +
            """WHERE plugin_guid=? and code LIKE "%'#include("||?||")%" """, (library.plugin_guid, library.name) )

        for macro in [cls().__fill_from_row(row) for row in db_rows] if db_rows else []:
            macro.bytecode = None
            register_macro(macro)


def register_all_event_macro( ):
    map( register_macro, Macros.get_all_non_library() )



def register_macro( macro ):
    import VEE_events

    if macro.type == macro.MacrosType.LIBRARY:
        Macros.update_all_macro_with_library(macro)
        return

    event_class = VEE_events.VEE_ButtonEvent if macro.type == macro.MacrosType.BUTTON else \
                  getattr(VEE_events, macro.class_name, None)

    if not event_class:
        return

    if event_class == VEE_events.VEE_TimerEvent:
        from class_timer import Timer
        Timer.register_timer_by_guid( macro.timer_guid )
        data = (macro.timer_guid,)

    elif event_class == VEE_events.VEE_CustomEvent:
        from class_custom_event import CustomEvent
        custom_event = CustomEvent.get_custom_event_by_guid(macro.custom_event_guid)
        data = (custom_event.plugin_guid, custom_event.name)

    elif event_class == VEE_events.VEE_ButtonEvent:
        data = (macro.namespace, macro.guid)

    else:
        data = (None,)

    key = event_class.get_key(*data)

    from VEE_core import engine
    engine.compile_and_register(macro, event_class, key)
    #from VEE_vmacro_dispatcher import VEE_vmacro_dispatcher

    #dispatcher = VEE_vmacro_dispatcher(macro)
    #engine.register_dispatcher(event_class, key, dispatcher)



def unregister_macro(macro):
    import VEE_events

    if macro.type == macro.MacrosType.LIBRARY:
        #Macros.update_all_macro_with_library(macro)
        #TODO: how invalidation should be made for macros that are using library we just deleted?
        return

    event_class =   VEE_events.VEE_ButtonEvent if macro.type == macro.MacrosType.BUTTON else \
                    getattr( VEE_events, macro.class_name, None )

    if not event_class:
        return

    if event_class == VEE_events.VEE_TimerEvent:
        from class_timer import Timer
        Timer.register_timer_by_guid( macro.timer_guid )
        data = (macro.timer_guid,)

    elif event_class == VEE_events.VEE_CustomEvent:
        from class_custom_event import CustomEvent
        custom_event = CustomEvent.get_custom_event_by_guid( macro.custom_event_guid )
        data = (custom_event.plugin_guid, custom_event.name)

    elif event_class == VEE_events.VEE_ButtonEvent:
        data = (macro.namespace, macro.guid)

    else:
        data = (None,)

    key = event_class.get_key(*data)

    from VEE_core import engine
    engine.unregister_dispatcher(event_class, key, macro.guid)
]]>
		</Library>
		<Library Name="config">
<![CDATA[proshare_config = {
	"version"			: application.itself.information_element.get_child_by_name( 'version' ).value,
	"plugin_page_dict"	: {"home":"home"},
	"app_name"			: application.name #used in VScript DO NOT DELETE
}
##need for VScript STD Lib
config = proshare_config
]]>
		</Library>
		<Library Name="promail_db_objects">
<![CDATA["""
"""

import colorsys
import time
import struct
import uuid

from promail_db_connection import ProMailDBObject
from promail_email_archive import MailBoxSource, EmailDocument


class ServerType(object):

    __slots__ = (
        "host",
        "keyfile",
        "certfile",
        "secure",
        "port",
        "login",
        "passwd"
    )

    def __init__(self, host=None,
                       port=None,
                       keyfile=None,
                       certfile=None,
                       secure=False,
                       login=None,
                       passwd=None):

        self.host = host
        self.port = port
        self.keyfile = keyfile
        self.certfile = certfile
        self.secure = secure
        self.login = login
        self.passwd = passwd


class POP3Server(ServerType):

    __slots__ = (
        "delete_mails",
    )

    def __init__(self, *args, **kwargs):
        self.delete_mails = kwargs.pop("delete_mails", False)
        super(POP3Server, self).__init__(*args, **kwargs)


class SMTPServer(ServerType):

    __slots__ = (
        "local_hostname",
    )

    def __init__(self, *args, **kwargs):
        self.local_hostname = kwargs.pop("local_hostname", False)
        super(SMTPServer, self).__init__(*args, **kwargs)


class MailServer(ProMailDBObject):

    __slots__ = (
        "name",
        "pop3",
        "smtp",
        "_guid",
        "_published",
    )

    DB_TABLE = "server"
    DB_COLS = (
        "guid",
        "name",
        "pop3_host",
        "pop3_port",
        "pop3_keyfile",
        "pop3_certfile",
        "pop3_secure",
        "pop3_login",
        "pop3_passwd",
        "pop3_delete_mails",
        "published",
        "smtp_host",
        "smtp_port",
        "smtp_keyfile",
        "smtp_certfile",
        "smtp_secure",
        "smtp_login",
        "smtp_passwd",
        "smtp_local_hostname",
    )

    def __init__(self, name='', pop3=None, smtp=None):
        super(MailServer, self).__init__()
        self.name = name
        self.pop3 = pop3
        self.smtp = smtp
        self._guid = None
        self._published = False

    def set_smtp_settings(self, *args, **kwargs):
        """
        Fill SMTP server settings
        """
        self.smtp = SMTPServer(*args, **kwargs)

    def set_pop3_settings(self, *args, **kwargs):
        """
        Fill POP3 server settings
        """
        self.pop3 = POP3Server(*args, **kwargs)

    def publish(self):
        self._published = True

    ####################################
    #
    # Properties / Start
    #
    ####################################

    @property
    def guid(self):
        """
        @_guid getter
        """
        return self._guid

    @property
    def published(self):
        """
        @_published getter
        """
        return self._published

    ####################################
    #
    # Properties / End
    #
    # ProMailDBObject Override / Start
    #
    ####################################

    def _pack_to_list(self, with_id=False):
        """
        Pack object to list
        """
        packed_list = []
        for attr in self.DB_COLS:
            if "_" in attr:
                prop1, prop2 = attr.split("_", 1)
                packed_list.append(getattr(getattr(self, prop1), prop2))

            else:
                packed_list.append(getattr(self, attr))

        if with_id:
            packed_list.append(self._id)

        return packed_list

    def _insert(self):
        """
        Insert object record to database
        """
        self._guid = str(uuid.uuid4())
        super(MailServer, self)._insert()

    ####################################
    #
    # ProMailDBObject Override / End
    #
    # Class methods / Start
    #
    ####################################

    @classmethod
    def _fill_from_row(cls, row):
        """
        Set object properties from db @row
        """
        inst = cls(name=row[2])

        inst.set_pop3_settings(
            host=row[3],
            port=row[4],
            keyfile=row[5],
            certfile=row[6],
            secure=bool(row[7]),
            login=row[8],
            passwd=row[9],
            delete_mails=bool(row[10])
        )

        inst.set_smtp_settings(
            host=row[12],
            port=row[13],
            keyfile=row[14],
            certfile=row[15],
            secure=bool(row[16]),
            login=row[17],
            passwd=row[18],
            local_hostname=row[19]
        )

        inst._guid = row[1]
        inst._id = row[0]
        inst._published = row[11]

        return inst

    @classmethod
    def get_by_id(cls, server_id):
        """
        Get object by @server_id
        """
        objects = cls.fetch("id=?", arguments=[server_id])
        return objects[0] if objects else None

    @classmethod
    def get_by_guid(cls, server_guid):
        """
        Get object by @server_guid
        """
        objects = cls.fetch("guid=?", limit=1, arguments=[server_guid])
        return objects[0] if objects else None

    @classmethod
    def available_servers(cls, guid=None):
        """
        Get all published servers ordered by name
        """
        where_clause = "published=1"
        if guid:
            where_clause += " AND guid=?"

        return cls.fetch(
            where_clause,
            order_clause="name ASC",
            arguments=[guid] if guid else None
        )


class Archive(ProMailDBObject):

    __slots__ = (
        "name",
        "_display_order"
        "_guid",
        "_is_deleted",
        "_mailbox",
        "_mailbox_id",
        "_type",
    )

    DB_TABLE = "archive"
    DB_COLS = (
        "display_order",
        "guid",
        "mailbox_id",
        "name",
        "type",
        "is_deleted",
    )

    class Type(object):
        """
        Archive types
        """
        Inbox = "inbox"
        Outbox = "outbox"
        Draft = "draft"
        Custom = "custom"

    def __init__(self, name='', atype=Type.Custom, mailbox=None):
        super(Archive, self).__init__()
        self.name = name
        self._display_order = 99
        self._guid = ''
        self._is_deleted = False
        self._mailbox = mailbox
        self._mailbox_id = None
        self._type = atype

        if self._mailbox:
            self._mailbox_id = self._mailbox.id

    ####################################
    #
    # Properties / Start
    #
    ####################################

    @property
    def display_order(self):
        """
        @_display_order getter
        """
        return self._display_order

    @property
    def guid(self):
        """
        @_guid getter
        """
        return self._guid

    @property
    def is_deleted(self):
        return self._is_deleted

    @property
    def mailbox(self):
        """
        @_mailbox getter
        """
        if not self._mailbox and self.mailbox_id:
            self._mailbox = MailBox.get_by_id(self.mailbox_id)

        return self._mailbox

    @property
    def mailbox_id(self):
        """
        @_mailbox_id getter
        """
        return self._mailbox_id

    @property
    def type(self):
        """
        @_type getter
        """
        return self._type

    ####################################
    #
    # Properties / End
    #
    # ProMailDBObject Override / Start
    #
    ####################################

    def _insert(self):
        """
        Insert object record to database
        """
        self._guid = str(uuid.uuid4())
        super(Archive, self)._insert()

    def mark_as_deleted(self):
        """
        """
        self._is_deleted = True
        self.save()

    @classmethod
    def _fill_from_row(cls, row):
        """
        Fill object from db @row
        """
        inst = cls(
            name=row[4],
            atype=row[5]
        )

        inst._display_order = row[1]
        inst._guid = row[2]
        inst._id = row[0]
        inst._is_deleted = bool(row[6])
        inst._mailbox_id = row[3]

        return inst

    ####################################
    #
    # ProMailDBObject Override / End
    #
    # Class Methods / Start
    #
    ####################################

    @classmethod
    def get_by_mailbox_id(cls, mailbox_id):
        """
        Get all archives by @mailbox_id
        """
        return cls.fetch(
            "mailbox_id=? AND is_deleted=0",
            order_clause="display_order ASC",
            arguments=[mailbox_id]
        )

    @classmethod
    def get_by_guid_and_mailbox_id(cls, guid, mailbox_id):
        """
        Get archive by @guid and @mailbox_id
        """
        archives = cls.fetch(
            "guid=? AND mailbox_id=? AND is_deleted=0",
            limit=1,
            arguments=[guid, mailbox_id]
        )
        return archives[0] if archives else None

    @classmethod
    def get_by_type_and_mailbox_id(cls, atype, mailbox_id):
        """
        Get archive by @type and @mailbox_id
        """
        return cls.fetch(
            "type=? AND mailbox_id=? AND is_deleted=0",
            arguments=[atype, mailbox_id]
        )


class Attachment(ProMailDBObject):

    __slots__ = (
        "_charset",
        "_content_desc",
        "_filename",
        "_guid",
        "_mailbox",
        "_mailbox_id",
        "_sanitized_filename",
        "_type",
    )

    DB_TABLE = "attachment"
    DB_COLS = (
        "charset",
        "content_desc",
        "filename",
        "guid",
        "mailbox_id",
        "sanitized_filename",
        "type",
    )

    def __init__(self, charset='',
                       content_desc='',
                       filename='',
                       mailbox=None,
                       sanitized_filename='',
                       atype=''):

        super(Attachment, self).__init__()
        self._charset = charset
        self._content_desc = content_desc
        self._filename = filename
        self._guid = ""
        self._mailbox = mailbox
        self._mailbox_id = None
        self._sanitized_filename = sanitized_filename
        self._type = atype

        if self._mailbox:
            self._mailbox_id = self._mailbox.id

    ####################################
    #
    # Properties / Start
    #
    ####################################

    @property
    def charset(self):
        """
        @_charset getter
        """
        return self._charset

    @property
    def content_desc(self):
        """
        @_content_desc getter
        """
        return self._content_desc

    @property
    def filename(self):
        """
        @_filename getter
        """
        return self._filename

    @property
    def guid(self):
        """
        @_guid getter
        """
        return self._guid

    @property
    def mailbox(self):
        """
        @_mailbox getter
        """
        if not self._mailbox and self.mailbox_id:
            return MailBox.get_by_id(self.mailbox_id)

        return self._mailbox

    @property
    def mailbox_id(self):
        """
        @_mailbox_id getter
        """
        return self._mailbox_id

    @property
    def sanitized_filename(self):
        """
        @_sanitized_filename getter
        """
        return self._sanitized_filename

    @property
    def type(self):
        """
        @_type getter
        """
        return self._type

    ####################################
    #
    # Properties / End
    #
    # ProMailDBObject Override / Start
    #
    ####################################

    def _insert(self):
        """
        Insert object record to database
        """
        self._guid = str(uuid.uuid4())
        super(Attachment, self)._insert()

    @classmethod
    def _fill_from_row(cls, row):
        """
        Fill object from db row
        """
        inst = cls(
            charset=row[1],
            content_desc=row[2],
            filename=row[3],
            sanitized_filename=row[6],
            atype=row[7]
        )

        inst._mailbox_id=row[5]
        inst._guid = row[4]
        inst._id = row[0]

        return inst


DEFAULT_ARCHIVES = (
    ('Inbox', Archive.Type.Inbox),
    ('Outbox', Archive.Type.Outbox),
    ('Drafts', Archive.Type.Draft),
)


class MailBox(ProMailDBObject):

    __slots__ = (
        "email",
        "login",
        "name",
        "passwd",
        "_archives"
        "_color",
        "_creator_guid",
        "_creator_name",
        "_guid",
        "_is_deleted",
        "_last_pop3_access",
        "_search_source",
        "_server",
        "_server_id",
        "_text_color",
    )

    DB_TABLE = "account"
    DB_COLS = (
        "color",
        "email",
        "guid",
        "last_pop3_access",
        "login",
        "name",
        "passwd",
        "server_id",
        "text_color",
        "creator_guid",
        "creator_name",
        "is_deleted",
    )

    def __init__(self, color='',
                       email='',
                       login='',
                       name='',
                       passwd='',
                       server=None):

        super(MailBox, self).__init__()
        self.email = email
        self.login = login
        self.name = name
        self.passwd = passwd
        self._archives = []
        self._color = color
        self._creator_guid = ''
        self._creator_name = ''
        self._guid = ''
        self._is_deleted = False
        self._last_pop3_access = 0.0
        self._search_source = None
        self._server = server
        self._server_id = None
        self._text_color = ''

        if self._server:
            self._server_id = self._server.id

    def __eq__(self, other):
        return isinstance(other, MailBox) and self.guid == other.guid

    ####################################
    #
    # Properties / Start
    #
    ####################################

    @property
    def archives(self):
        """
        @_archives getter
        """
        return self._archives

    @property
    def color(self):
        """
        @_color getter
        """
        return self._color

    @color.setter
    def color(self, value):
        """
        @_color setter
        """
        self._color = value
        if self._color:
            self.update_text_color()

    @property
    def creator_guid(self):
        """
        @_creator_guid getter
        """
        return self._creator_guid

    @property
    def creator_name(self):
        """
        @_creator_name getter
        """
        return self._creator_name

    @property
    def guid(self):
        """
        @_guid getter
        """
        return self._guid

    @property
    def is_deleted(self):
        """
        @_is_deleted getter
        """
        return self._is_deleted

    @property
    def last_pop3_access(self):
        """
        @_last_pop3_access getter
        """
        return self._last_pop3_access

    @property
    def server(self):
        """
        @_server getter
        """
        if not self._server and self.server_id:
            self._server = MailServer.get_by_id(self.server_id)

        return self._server

    @server.setter
    def server(self, value):
        """
        @_server setter
        """
        self._server = value
        self._server_id = self._server.id if self._server else None

    @property
    def server_id(self):
        """
        @_server_id getter
        """
        return self._server_id

    @property
    def text_color(self):
        """
        @_text_color getter
        """
        return self._text_color

    ####################################
    #
    # Properties / END
    #
    # Instance Methods / Start
    #
    ####################################

    def archives(self):
        """
        Get list of archives
        """
        if not self._archives:
            self._archives = Archive.get_by_mailbox_id(self.id)

        return self._archives

    def create_archive(self, archive_name):
        """
        Create new archive
        """
        archive = Archive(
            name=archive_name,
            atype=Archive.Type.Custom,
            mailbox=self
        )
        archive.save()
        self._archives = []

        return archive

    def delete_archive(self, archive=None, guid=None):
        """
        """
        if not archive:
            archive = self.get_archive(guid)

        if archive:
            archive.mark_as_deleted()

        self._archives = []

    def create_attachment(self, filename,
                                charset='',
                                content_desc='',
                                sanitized_filename='',
                                atype=''):
        """
        Create attachment
        """
        return Attachment(
            charset=charset,
            content_desc=content_desc,
            filename=filename,
            mailbox=self,
            sanitized_filename=sanitized_filename,
            atype=atype
        )

    def create_basic_archives(self):
        """
        Create default archives:
        - Inbox
        - Outbox
        - Draft
        """
        for i in range(len(DEFAULT_ARCHIVES)):
            args = DEFAULT_ARCHIVES[i]

            archive = Archive(
                name=args[0],
                atype=args[1],
                mailbox=self
            )

            archive._display_order = i
            archive.save()

    def get_archive(self, guid):
        """
        Get archive by GUID
        """
        for archive in self.archives():
            if archive.guid == guid:
                return archive

        return Archive.get_by_guid_and_mailbox_id(guid, self.id)

    def get_inbox_archive(self):
        """
        Get Inbox archive
        """
        for archive in self.archives():
            if archive.type == Archive.Type.Inbox:
                return archive

        archives = Archive.get_by_type_and_mailbox_id(
            Archive.Type.Inbox,
            self.id
        )

        return archives[0] if archives else None

    def mark_as_deleted(self):
        """
        Mark mailbox as deleted
        """
        self._is_deleted = True
        self.save()

    def search_source(self):
        """
        Get search source
        """
        if not self._search_source:
            self._search_source = MailBoxSource(self.guid)

        return self._search_source

    def search_unread_messages(self, archive=None, get_count=False):
        """
        """
        kwargs = dict(state=EmailDocument.STATE.UNREAD)
        if archive:
            kwargs["location"] = archive.guid

        return self.search_source().complex_search(
            get_count=get_count,
            **kwargs
        )

    def update_text_color(self):
        """
        Calculate @_text_color based on @_color
        i.e. if @_color is 'black' - @_text_color will be 'white'
        """
        rgb = struct.unpack('BBB',self.color[1:].decode('hex'))
        hls = colorsys.rgb_to_hls(rgb[0],rgb[1],rgb[2])
        self._text_color = "#000" if hls[1] >= 175 else "#FFF"

    def update_pop3_access(self):
        """
        Update @_last_pop3_access time
        """
        self._last_pop3_access = time.time()

    def search_mails(self,
                     location=None,
                     query='',
                     offset=None,
                     limit=None,
                     guid=None,
                     greater_than=None,
                     less_than=None,
                     get_all=False):
        """
        """

        source = self.search_source()

        if guid:
            return source.get_by_ids(guid)

        sconn = source._sconn()
        queries = []

        if location:
            queries.append(sconn.query_field("location", location))

        if query:
            queries.append(sconn.query_parse(query))

        if get_all:
            queries.append(sconn.query_all())

        if greater_than or less_than:
            queries.append(sconn.query_range("timestamp", greater_than, less_than))
#            raise Exception(sconn.query_composite(sconn.OP_AND, queries))

        queries = sconn.query_composite(sconn.OP_AND, queries)
#        raise Exception(queries, get_all)
        try:
            return source._search_routine(
                queries,
                sconn,
                offset=offset,
                limit=limit,
                sortby="-timestamp"
            )
        finally:
            sconn.close()



    ####################################
    #
    # Instance Methods / END
    #
    # Class Methods / Start
    #
    ####################################

    @classmethod
    def _fill_from_row(cls, row):
        """
        Fill object from db @row
        """
        inst = cls(
            color=row[1],
            email=row[2],
            login=row[5],
            name=row[6],
            passwd=row[7]
        )

        inst._guid = row[3]
        inst._id = row[0]
        inst._last_pop3_access = row[4]
        inst._server_id = row[8]
        inst._text_color = row[9]
        inst._creator_guid = row[10]
        inst._creator_name = row[11]
        inst._is_deleted = bool(row[12])

        return inst

    @classmethod
    def get_by_id(cls, mailbox_id):
        """
        Get mailbox by @mailbox_id
        """
        objects = cls.fetch("id=?", limit=1, arguments=[mailbox_id])
        return objects[0] if objects else None

    @classmethod
    def get_by_guid(cls, mailbox_guid):
        """
        Get mailbox by @mailbox_guid
        """
        objects = cls.fetch("guid=?", limit=1, arguments=[mailbox_guid])
        return objects[0] if objects else None

    @classmethod
    def get_available_by_guids(cls, mailbox_guids, *args, **kwargs):
        """
        Get available mailboxes by GUIDs
        """
        return cls.fetch(
            where_clause="is_deleted=0 AND guid IN (%s)" % ",".join(["?"] * len(mailbox_guids)),
            arguments=mailbox_guids,
            *args,
            **kwargs
        )

    @classmethod
    def get_available_by_guid(cls, mailbox_guid, *args, **kwargs):
        """
        Get available mailbox by GUID
        """
        objects = cls.fetch(
            where_clause="is_deleted=0 AND guid=?",
            arguments=[mailbox_guid],
            *args,
            **kwargs
        )
        return objects[0] if objects else None

    @classmethod
    def get_available(cls, *args, **kwargs):
        """
        Get available mailbox by GUID
        """
        return cls.fetch(
            where_clause="is_deleted=0",
            order_clause="last_pop3_access ASC",
            *args,
            **kwargs
        )
]]>
		</Library>
		<Library Name="promail_eac">
<![CDATA["""
"""

import json
import md5

from xml.dom.minidom import  parseString


import ProAdmin
from prosuite_utils import CachedProperty
from vdom_remote_api import VDOMService


def getText(nodelist):
    rc = []
    for node in nodelist:
        if isData(node):
            rc.append(node.data)
    return ''.join(rc)

def isData(node):
    return node.nodeType in (node.TEXT_NODE, node.CDATA_SECTION_NODE)


class EACContent(object):

    class EACParseException(Exception):
        pass

    class CantParseRawWholeXMLError(EACParseException):
        pass

    class InvalidWholeXMLError(EACParseException):
        pass

    class InvalidAPIMethodPattern(EACParseException):
        pass

    class InvalidEventsDefinition(EACParseException):
        pass


    def __init__(self, wholexml):
        self.wholexml = wholexml
        self.wholedata = self.parse_wholexml()

    def _parse_api_section(self, api):
        """
        """
        result = dict(api.attributes.items())
        result['methods'] = {}

        for child in api.childNodes:
            if isData(child):
                continue

            name = child.tagName.lower()
            result['methods'][name] = dict(child.attributes.items())
            result['methods'][name]['pattern'] = ""

            pattern_el = child.getElementsByTagName("PATTERN")
            if not pattern_el:
                continue

            pattern = getText(pattern_el[0].childNodes)
            if pattern:
                try:
                    pattern = json.loads(pattern)
                except:
                    raise self.InvalidAPIMethodPattern

            result['methods'][name]['pattern'] = pattern

        return result

    def parse_wholexml(self):

        try:
            dom = parseString(self.wholexml)
        except Exception:
            raise
            raise self.CantParseRawWholeXMLError

        result_whole = {
            'global': '',
            'api': '',
            'events': '',
            'vdom': ''
        }

        whole_el = dom.getElementsByTagName("WHOLEXML")

        if whole_el and whole_el[0].tagName.lower() != "wholexml":
            raise self.InvalidWholeXMLError

        whole_el = whole_el[0]
        result_whole['global'] = dict(whole_el.attributes.items())

        api_el = whole_el.getElementsByTagName("API")
        if api_el:
            result_whole['api'] = self._parse_api_section(api_el[0])

        events_el = whole_el.getElementsByTagName("EVENTS")
        if events_el:
            result_whole['events'] = getText(events_el[0].childNodes)

        vdomxml_el = whole_el.getElementsByTagName("VDOMXML")
        if vdomxml_el:
            result_whole['vdom'] = getText(vdomxml_el[0].childNodes).replace("]]", "]]")

        return result_whole


PROSUITE_LOGIN = "prosuite"
PROSUOTE_PATH = md5.new("prosuite").hexdigest()


class EACConnector(object):

    def __init__(self, wholexml):
        self.wholedata = EACContent(wholexml.encode("utf8")).wholedata

    def is_static(self):
        return self.wholedata['global']['Content'].lower() == "static"

    def get_content(self):
        if self.wholedata['vdom']:
            return self.wholedata['vdom']

        return self.get_remote_content(self)

    def remote_login(self):
        root_user = ProAdmin.application().get_users(email='root')[0]

        method = self.wholedata['api']['methods']['login']
        return self.vdom_connector.call(
            method['container'],
            method['action'],
            json.dumps({
                "login": root_user.email,
                "password": "root"
            })
        )

    def get_remote_content(self):
        if 'login' in self.wholedata['api']['methods']:
            self.remote_login()

        if 'get' in self.wholedata['api']['methods']:
            method = self.wholedata['api']['methods']['get']

            pattern = ""
            if "pattern" in method:
                pattern = method["pattern"]
                additional_data = pattern.get('data', '')
                pattern["data"] = {
                    "sessionToken": self.wholedata['global']["SessionToken"],
                    "required": {
                        "user.guid": ProAdmin.current_user().guid
                    },
                    "additional": additional_data
                }
                pattern = json.dumps(pattern)


            response = self.vdom_connector.call(
                method['container'],
                method['action'],
                pattern
            )

            if response:
                response = json.loads(response)
                if response[0] == "error":
                    raise Exception(response)

                self.wholedata = EACContent(response[1].encode("utf8")).wholedata
                return self.wholedata

        return {}

    def post_to_remote(self, data):
        """
        """
        if 'login' in self.wholedata['api']['methods']:
            self.remote_login()

        if 'post' in self.wholedata['api']['methods']:
            method = self.wholedata['api']['methods']['post']

            pattern = ""
            if "pattern" in method:
                pattern = method["pattern"]
                additional_data = pattern.get('data', '')
                pattern["data"] = {
                    "sessionToken": self.wholedata['global']["SessionToken"],
                    "required": {
                        "user.guid": ProAdmin.current_user().guid
                    },
                    "trigger": data,
                    "additional": additional_data
                }
                pattern = json.dumps(pattern)

            response = self.vdom_connector.call(
                method['container'],
                method['action'],
                pattern
            )

            if response:
                response = json.loads(response)
                if response[0] == "error":
                    raise Exception(response)
                self.wholedata = EACContent(response[1].encode("utf8")).wholedata
                return self.wholedata

        return {}

    @CachedProperty
    def vdom_connector(self):
        return VDOMService.connect(self.wholedata['api']['server'], PROSUITE_LOGIN, PROSUOTE_PATH, self.wholedata['api']['appID'])
]]>
		</Library>
		<Library Name="proadmin_ldap_connection">
<![CDATA[import ldap
import ldap.modlist as modlist
import shlex
from subprocess import Popen, PIPE
from proadmin_ldap_object import LDAPObject


class LDAPConnection( object ):
	""" wraper for LDAP routines
	"""
	def __init__( self, editable = True ):
		self.editable = editable

		self.host 		= ''
		self.user_dn 	= ''
		self.passwd		= ''
		self.port 		= 389

		self.connection = None



	def bind( self, host, dn, passwd ):
		""" connect to ldap server
		"""
		self.host 		= host
		self.user_dn 	= dn
		self.passwd		= passwd

		self.rebind()



	def rebind( self ):
		try:
			self.unbind()
		except:
			pass

		self.connection = ldap.open( self._encode(self.host), port=self.port )
		self.connection.simple_bind_s( self._encode(self.user_dn), self._encode(self.passwd) )



	def unbind( self ):
		""" close connection
		"""
		if self.connection:
			self.connection.unbind()



	@classmethod
	def try_bind( self, host, user_dn, password ):
		""" try connect to LDAP server
		"""
		conn = None

		try:
			conn = self()
			conn.bind( host, user_dn, password )
			return True

		except:
			pass

		finally:
			if conn: conn.unbind()

		return False



	def exists( self, ldap_object ):
		""" check that ldap object exists in LDAP base
		"""
		return False if not self.search( basedn = ldap_object.parent_dn, filter = ldap_object.rdn, recursive = True ) else True



	def save( self, ldapobject ):
		""" save node - insert or update if node exists
		"""
		if not self.editable:
			return
		if not self.exists( ldapobject ):
			self.insert( ldapobject = ldapobject )
		else: # self.exists( ldapobject ):
			self.update( ldapobject = ldapobject )



	def insert( self, ldapobject ):
		""" insert to LDAP tree
		"""
		if not self.editable:
			return

		dn 			= self._encode( ldapobject.dn )
		attributes 	= self._encode( ldapobject.attributes )

		ldif = modlist.addModlist( attributes )

		self.connection.add_s( dn, ldif )




	def update( self, ldapobject ):
		""" update node in LDAP tree
		"""
		if not self.editable:
			return
		dn 			= self._encode( ldapobject.dn )
		attributes 	= self._encode( ldapobject.attributes )

		mod_attrs = []
		for attr_name, attr_value in attributes.iteritems():
			mod_attrs.append((ldap.MOD_REPLACE, attr_name, attr_value))

		object = self.get_by_dn( dn )
		if not object:
			return

		for attr_name, attr_value in object.attributes.iteritems():
			if attr_name not in ldapobject.attributes:
				mod_attrs.append((ldap.MOD_DELETE, attr_name, None))

		self.connection.modify_s( dn, mod_attrs )



	def _ldapmodify( self, ldif ):
		""" implementation of ldap_modify function with using system command
		"""
		cmd = """/usr/local/bin/ldapmodify -h 127.0.0.1 -x -D 'cn=admin,dc=vdombox,dc=local' -w 'passwd'"""

		# create subproccess and call ldapmodify
		p = Popen( shlex.split( cmd.encode( 'utf8' ) ), stdin=PIPE, stdout=PIPE, stderr=PIPE, bufsize=-1, close_fds=True )
		result = p.communicate( input=ldif )

		del result
		del p



	def search( self, basedn, filter, recursive = False ):
		""" search in LDAP tree
		"""
		basedn 	= self._encode( basedn )
		filter	= self._encode( filter )

		searchScope = ldap.SCOPE_SUBTREE if recursive else ldap.SCOPE_ONELEVEL
		retrieveAttributes = None

		result_set = []
		try:
			
			# try to get result, if some exception rebind to ldap and try search again
			ldap_result_id = None
			try:
				ldap_result_id = self.connection.search( basedn, searchScope, filter, retrieveAttributes )
			except:
				self.rebind()
				ldap_result_id = self.connection.search( basedn, searchScope, filter, retrieveAttributes )


			result_type, result_data = self.connection.result( ldap_result_id, 1 )		
			result_data = result_data or []

			for item in result_data:
				dn 			= self._decode( item[0] )
				attributes	= self._decode( item[1] )

				ldap_object = LDAPObject( dn, attributes )
				result_set.append( ldap_object )


			# result_type, result_data = self.connection.result( ldap_result_id, 0 )

			# while result_data:
			# 	if result_type == ldap.RES_SEARCH_ENTRY:

			# 		dn 			= self._decode( result_data[0][0] )
			# 		attributes	= self._decode( result_data[0][1] )

			# 		ldap_object = LDAPObject( dn, attributes )
			# 		result_set.append( ldap_object )

			# 	result_type, result_data = self.connection.result( ldap_result_id, 0 )


			return result_set

		except ldap.LDAPError, e:
			return result_set



	def delete( self, ldapobject ):
		""" delete ldap object
		"""
		if not self.editable:
			return

		dn = self._encode( ldapobject.dn )

		result = self.search( dn, "objectClass=*", True )
		sorted_result = sorted( result, cmp=lambda x,y: cmp(len(y.dn.split(',')), len(x.dn.split(','))))

		for o in sorted_result:
			o_dn = self._encode( o.dn )
			self.connection.delete_s( o_dn )


	def create_object( self, dn, attributes ):
		return LDAPObject( dn, attributes )



	def get_by_dn( self, dn ):
		""" get ldap object by DN
		"""
		obj = LDAPObject( dn, None )
		result = self.search( obj.parent_dn, obj.rdn, recursive=False )
		return result[0] if result else None




	def _encode( self, obj ):
		""" encode structure to utf-8
		"""
		if type( obj ) == unicode:
			return obj.encode( 'utf8' )

		elif type( obj ) == list:
			return [ self._encode( o ) for o in obj ]

		elif type( obj ) == dict:
			result = {}
			for k in obj:
				try:
					result[ self._encode(k) ] = self._encode( obj[ k ] )
				except:
					continue
			return result


		else:
			return obj


	def _decode( self, obj ):
		""" decode structure to unicode
		"""
		if type( obj ) == str:
			return obj.decode( 'utf8' )

		elif type( obj ) == list:
			return [ self._decode( o ) for o in obj ]

		elif type( obj ) == dict:
			result = {}
			for k in obj:
				try:
					result[ self._decode(k) ] = self._decode( obj[ k ] )
				except:
					continue
			return result

		else:
			return obj
]]>
		</Library>
		<Library Name="proadmin_db_connection">
<![CDATA[import sqlite3, os, threading




class DbConnection( object ):
	def __init__(self, dbfile=None):
		if not dbfile:
			dbfile = ":memory:"
		self.dbfile = dbfile

	__localdb = threading.local()


	@property
	def connection(self):
		is_new = (self.dbfile == ":memory:") or (not os.path.exists(self.dbfile))
		if getattr( self.__localdb, "current_db", None ) is None:
			self.__localdb.current_db =  sqlite3.connect(self.dbfile)
			if is_new:
				self.recreate()

		return self.__localdb.current_db



	def recreate(self):
		cursor = self.connection.cursor();
		cursor.execute('''DROP TABLE IF EXISTS aclobject''')
		cursor.execute('''DROP TABLE IF EXISTS proadmin_user''')
		cursor.execute('''DROP TABLE IF EXISTS proadmin_group''')
		cursor.execute('''DROP TABLE IF EXISTS user_in_group''')
		cursor.execute('''DROP TABLE IF EXISTS rule''')
		self.connection.commit()

		
		cursor = self.connection.cursor();
		cursor.execute('''PRAGMA journal_mode=WAL;''') # WAL corrupting the DB
		cursor.execute('''PRAGMA foreign_keys = ON;''')
		self.connection.commit()


		cursor = self.connection.cursor();

		cursor.execute('''
			CREATE TABLE aclobject (
				guid CHAR(32) PRIMARY KEY,
				object_type CHAR(32),
				parent_guid char(32),
				name TEXT,
				is_dirty INT,
				FOREIGN KEY(parent_guid) REFERENCES aclobject(guid) ON DELETE CASCADE

				)''')

		cursor.execute('''
			CREATE TABLE proadmin_user (
				guid CHAR(32) PRIMARY KEY,
				email VARCHAR(255),
				last_name VARCHAR(255),
				first_name VARCHAR(255),
				password_hash VARCHAR(255),
				phone VARCHAR(255),
				notification_email VARCHAR(255),
				cell_phone VARCHAR(255),
				country VARCHAR(255),
				keywords_string TEXT
				)''')

		cursor.execute('''
			CREATE TABLE proadmin_group (
				guid CHAR(32) PRIMARY KEY,
				name VARCHAR(255)		
				)''')


		cursor.execute('''
			CREATE TABLE user_in_group (
				user_guid CHAR(32),
				group_guid char(32)
				)''')


		cursor.execute('''
			CREATE TABLE rule (
				subject_guid CHAR(32),
				aclobject_guid CHAR(32),
				access CHAR(1),

				FOREIGN KEY(aclobject_guid) REFERENCES aclobject(guid) ON DELETE CASCADE

				
				)''')
		
		"""
		

		cursor.execute('''
			CREATE INDEX subject_guid_index ON rule (subject_guid);
			''')

		cursor.execute('''
			CREATE INDEX aclobject_guid_index ON rule (aclobject_guid);
			''')

		cursor.execute('''
			CREATE INDEX aclobject_subject_guid_index ON rule (subject_guid, aclobject_guid);
			''')		
		cursor.execute('''
			CREATE INDEX user_guid_index ON user_in_group (user_guid);
			''')
		cursor.execute('''
			CREATE INDEX group_guid_index ON user_in_group (group_guid);
			''')
		"""



		# FOREIGN KEY(group_guid) REFERENCES `group`(`guid`),
		# FOREIGN KEY(aclobject_guid) REFERENCES aclobject(guid),

		self.connection.commit()


	def fetch_one(self, sqlquery, arguments = None):
		if arguments is None:
			arguments = []
		cursor = self.connection.cursor()
		cursor.execute(sqlquery, arguments);
		return cursor.fetchone()

	def fetch_all(self, sqlquery, arguments = None):
		try:
			if arguments is None:
				arguments = []
			cursor = self.connection.cursor();
			cursor.execute(sqlquery, arguments)
			return cursor.fetchall()
		except:
			print sqlquery
			raise

	def execute(self, sqlquery, arguments = None):
		if arguments is None:
			arguments = []
		self.connection.cursor().execute(sqlquery, arguments)
		self.connection.commit()
	def executemany(self, sqlquery, arguments = None):
		try:
			if arguments is None:
				arguments = []
			self.connection.cursor().executemany(sqlquery, arguments)
			self.connection.commit()
		except:
			print sqlquery, arguments
			raise



	def build_or_list(self, list_or_dict):
		if isinstance( list_or_dict, list ):
			return " OR ".join( [condition_tuple[0] for condition_tuple in list_or_dict] ), [condition_tuple[1] for condition_tuple in list_or_dict]
		
		if isinstance( list_or_dict, dict ):
			ziped = [("%s IN (%s)"%(k, ",".join(['?']*len(v))), v) for (k, v) in list_or_dict.iteritems() if v]

			return " OR ".join( [condition_tuple[0] for condition_tuple in ziped] ), reduce( lambda a,b: a+b, [condition_tuple[1] for condition_tuple in ziped], [])



	def build_complex_where_clause(self, and_or_condition_value_list):
		"""
		INPUT:
		[ {'some1': [1,2,3], "some2":[1,2,3]},[ ('some1 = ?', 1), ('some2 = ?', 2) ], [('other1 = ?',3), ('other2 = ?', 4)], [('one = ?',5)] ] 
		ANSWERS:
		("(some1 IN (?,?,?)  OR some2 IN (?,?,?)) AND (some1 = ? OR some2 = ?) AND (other1 = ? OR other2 = ?)", [1,2,3,1,2,3,1,2,3,4,5]
		"""
		or_condition_value = [ self.build_or_list(l) for l in and_or_condition_value_list]
		return " AND ". join( [ '(' + or_list[0] + ')' for or_list in or_condition_value if or_list[0] ]  ), reduce(lambda a,b:a+b, [e[1] for e in or_condition_value],[])


	def build_simple_where_clause(self, filter_dict):
		if filter_dict:
			filter_tuples = [ ("%s = ?" % (k,), filter_dict[k]) for k in filter_dict ]
			return " AND ". join([query for (query, value) in filter_tuples]), [value for (query, value) in filter_tuples]
		else:
			return "", []

	def build_where_clause(self, filter_dict_or_list):
		if isinstance(filter_dict_or_list, list): return self.build_complex_where_clause(filter_dict_or_list)
		if isinstance(filter_dict_or_list, dict): return self.build_simple_where_clause(filter_dict_or_list)
		return ""


	def build_update_clause(self, update_dict):
		if update_dict:
			filter_tuples = [ ("%s = ?" % (k,), update_dict[k]) for k in update_dict ]
			return  ", ". join([query for (query, value) in filter_tuples]), [value for (query, value) in filter_tuples]
		else:
			return "", []



	def delete_cmd(self, table_name, filter_dict):
		if filter_dict is None: filter_dict = {}

		where_clause, parameters = self.build_where_clause(filter_dict)
		query = '''DELETE FROM %s %s'''%(table_name, 'WHERE ' + where_clause if where_clause else '')

		return self.execute( query, parameters )

	def update_cmd(self, table_name, update_dict, filter_dict):
		if filter_dict is None: filter_dict = {}
		if update_dict is None: update_dict = {}

		where_clause, where_parameters = self.build_where_clause(filter_dict)
		update_clause, update_parameters = self.build_update_clause(update_dict)
		return self.execute( '''UPDATE %s SET %s %s''' % (table_name, update_clause, 'WHERE ' + where_clause if where_clause else ''), update_parameters + where_parameters)


	def select_cmd(self, table_name, select_list, filter_dict):
		if filter_dict is None: filter_dict = {}

		where_clause, where_parameters = self.build_where_clause(filter_dict)
		select_clause = ', '.join(select_list)
		query = '''SELECT %s FROM %s %s''' % (select_clause, table_name, 'WHERE ' + where_clause if where_clause else '')
		#print query
		return self.fetch_all( query, where_parameters)


	def insert_cmd(self, table_name, select_list, values_list):
		select_clause = ', '.join(select_list)
		values_clause = ', '.join( ["?"] * len(values_list) )
		return self.execute( '''INSERT INTO %s (%s) VALUES (%s)''' % (table_name, select_clause, values_clause), values_list)


	def insertmany_cmd(self, table_name, select_list, values_list):
		if not values_list:
			return
		select_clause = ', '.join(select_list)
		values_clause = ', '.join( ["?"] * len(values_list[0]) )
		return self.executemany( '''INSERT INTO %s (%s) VALUES (%s)''' % (table_name, select_clause, values_clause), values_list)		

]]>
		</Library>
		<Library Name="class_db">
<![CDATA[import threading

class Database( object ):

	#__maindb = None
	__maindb = threading.local()
	__macrosdb = threading.local()

	@classmethod
	def maindb(self):

		application.databases.get_list() # need as a trigger for database init

		if getattr( self.__maindb, "current_db", None ) is None:
			self.__maindb.current_db =  Database(application.databases.dbschema, "dbschema")

		return self.__maindb.current_db

	@classmethod
	def macrosdb(self):

		application.databases.get_list() # need as a trigger for database init
		#if getattr( self.__maindb, "current_db", None ) is None:
		self.__macrosdb.current_db =  Database(application.databases.dbschema_macros, "dbschema_macros")

		return self.__macrosdb.current_db

	@classmethod
	def set_maindb(self,name = ""):

		if name == "dbschema_test":
			self.__maindb.current_db = Database(application.databases.dbschema_test, "dbschema_test")

		return self.__maindb.current_db

	def clean(self):
		if self.name == "dbschema_macros":
			self.commit("""DELETE FROM macros""",)
			self.commit("""DELETE FROM timer""",)
			self.commit("""DELETE FROM plugin""",)
			self.commit("""DELETE FROM custom_event""",)
			self.commit("""DELETE FROM kv_macro_storage""",)
		else:
			self.commit("""DELETE FROM node""",)
			self.commit("""DELETE FROM smart_folder_content""",)
			self.commit("""DELETE FROM smart_folder""",)
			self.commit("""DELETE FROM smart_group_content""",)
			self.commit("""DELETE FROM smart_group""",)
			self.commit("""DELETE FROM remote_settings""",)


	def __init__(self, db=None, name = None):
		self.__db = db
		self.name = name

	def fetch_one(self, sqlquery, arguments = None):
		if arguments is None:
			arguments = []

		return self.__db.fetchone(sqlquery, arguments)

	def fetch_all(self, sqlquery, arguments = None):
		if arguments is None:
			arguments = []
		return self.__db.fetchall(sqlquery, arguments)

	def execute(self, sqlquery, arguments = None):
		if arguments is None:
			arguments = []
		return self.__db.execute(sqlquery, arguments)

	def commit(self, sqlquery, arguments = None):
		if arguments is None:
			arguments = []
		self.__db.execute(sqlquery, arguments)
		(lastrowid, count) = self.__db.commit()
		return lastrowid

	def create(self, tablename, arguments=None ):
		if arguments:
			return self.__db.create( tablename, arguments )
		else:
			return self.__db.create( tablename )

	def get_objects_by_name(self):
		return self.__db.get_objects_by_name()

	def get_table(self, id, name):
		return self.__db.get_table( id, name )

	def interrupt( self ):
		return self.__db._VDOM_database__conn.interrupt()
]]>
		</Library>
		<Library Name="VEE_events">
<![CDATA[#23.01.2013
#refactor events structure
#23.05.2013
# added set_folder to VEE_DeleteFolderSmartFolder
from VEE_utils import AutoCast, AutoCastCachedProperty
from VEE_std_lib import v_timer
from VEE_proadmin import v_proadmin



#Base class for all events
class VEE_AbstractEvent( object ):

	def activate( self ):
		from VEE_core import engine
		engine.put_event( self )
#		engine.info( "Event '{className}' has occured".format(
#						className = self.__class__.__name__[4:] ) )


	@classmethod
	def get_key( self, key = None):
		return hash( self.__name__ if not key else key )


	@AutoCastCachedProperty
	def v_name( self ):
		return self.__class__.__name__[4:]


	def __hash__( self ):
		return hash( self.__class__.__name__ )



class VEE_TimerEvent( VEE_AbstractEvent ):

	def __init__( self, timer ):
		self.timer = v_timer( timer )


	def __hash__( self ):
		return hash( self.timer.timer.hash_value )



class VEE_ButtonEvent( VEE_AbstractEvent ):

	def __init__( self, namespace, macros_guid ):
		self.namespace = namespace
		self.macros_guid = macros_guid


	def activate( self ):
		raise NotImplementedError


	def __hash__( self ):
		return self.get_key( self.namespace, self.macros_guid )


	@classmethod
	def get_key( self, namespace, macros_guid ):
		return hash( "{0}:{1}".format( namespace, macros_guid ) )



class VEE_StartEngineEvent( VEE_AbstractEvent ):
	pass



class VEE_StopEngineEvent( VEE_AbstractEvent ):
	pass



#Base class for applications events (except TimerEvent)
class VEE_BaseAbstractEvent( VEE_AbstractEvent ):

	def __init__( self ):
		self._user = v_proadmin.v_currentuser()


	def get_user( self ):
		return self._user


	user = property( get_user )




class VEE_CustomEvent( VEE_AbstractEvent ):

	def __init__( self, plugin_guid = None, name = None ):
		VEE_AbstractEvent.__init__( self )
		self.name = ""
		self.plugin_guid = ""
		self.data = None


	def __hash__( self ):
		return self.get_key( self.plugin_guid, self.name )


	@classmethod
	def get_key( self, plugin_guid, name ):
		return hash( "{0}:{1}".format( plugin_guid, name ) )




event_map = {

}
]]>
		</Library>
		<Library Name="proadmin_subject">
<![CDATA[from abc import abstractmethod
from md5 import md5

import copy
import cgi
import re
import base64

import uuid

import ProAdmin


# ----------------------------------------------------------------
#		Subject
# ----------------------------------------------------------------

class Subject( object ):
	""" Base class for subject structures
	"""
	def __init__( self, scheme ):
		self._guid = ''
		self.scheme = scheme


	def fill_guid_list( self ):
		pass


	def get_guid_list( self ):
		return [ self.guid ]


	@abstractmethod
	def save( self ):
		""" save subject changes
		"""
		return self


	def delete( self, force=False ):
		""" delete subject
		"""
		self.force_delete( force=force )


	@abstractmethod
	def force_delete( self, force=True ):
		raise Exception('Subclass resposibility')


	@classmethod
	def _escape( self, value ):
		""" escape string values
		"""
		if not value:
			value = ''

		return cgi.escape( value )


	@classmethod
	def _modify_dn( self, dn ):
		""" This method get attribute value from dn string.
			Example: dn = 'Cn=Users'. In this case the method returnes 'Users'. ###
		"""
		if type( dn ) == list:
			dn = dn[0]

		dn = self._escape( dn ).split( '=' )

		if len( dn ) == 1:
			return dn[0]

		result = ''
		dn = dn[1:]
		for i in dn:
			result += i

		return result


	@classmethod
	def _scalar( self, value ):
		if not value: value = ''
		if type( value ) == list:
			return self._scalar( value[0] )

		return value.strip()


	def is_admin( self ):
		""" get answer for subject is admin: user-root, group-admin
		"""
		return False

	def is_user( self ):
		""" get answer that subject is user
		"""
		return False

	def is_group( self ):
		""" get answer that subject is group
		"""
		return False


	def is_persistent( self ):
		""" get answer that subject persistent or non persistent
		"""
		pass


	@property
	def guid( self ):
		""" return guid of subject
		"""
		return self._guid

	@guid.setter
	def guid( self, value ):
		""" set guid for subject
		"""
		self._guid = self._scalar( value )


	def __hash__( self ):
		return hash( self.guid )


	def _is_addled_instance( self ):
		""" check, maybe this instance is addled
		"""
		try:
			import ProAdmin
		except ImportError:
			return True

		return False






# ----------------------------------------------------------------
#		User
# ----------------------------------------------------------------

class User( Subject ):
	""" Base class for users
	"""
	def __init__( self, scheme ):
		Subject.__init__( self, scheme )

		# addition attributes
		self._email 		= ''
		self._phone 		= ''
		self._first_name 	= ''
		self._last_name 	= ''
		self._password 		= ''

		self._notification_email = ''
		self._cell_phone	= ''
		self._country		= ''
		self._keywords		= ''

		# save user-group relationship
		self.group_guid_list = []


	def is_user( self ):
		return True

	def is_group( self ):
		return False


	@property
	def email( self ):
		return self._email

	@email.setter
	def email( self, value ):
		self._email = self._scalar( value )


	@property
	def phone( self ):
		return self._phone

	@phone.setter
	def phone( self, value ):
		self._phone = self._scalar( value )


	@property
	def first_name( self ):
		return self._first_name

	@first_name.setter
	def first_name( self, value ):
		self._first_name = self._scalar( value )


	@property
	def last_name( self ):
		return self._last_name

	@last_name.setter
	def last_name( self, value ):
		self._last_name = self._scalar( value )


	@property
	def name( self ):
		name = '%s %s' % (self.first_name, self.last_name,)
		name = name.strip()
		name = name if name else self.email
		return name


	@property
	def password( self ):
		return self._password

	@password.setter
	def password(self, value ):
		self._password = value



	@property
	def notification_email( self ):
		return self._notification_email

	@notification_email.setter
	def notification_email( self, value ):
		self._notification_email = value


	@property
	def cell_phone( self ):
		return self._cell_phone

	@cell_phone.setter
	def cell_phone( self, value ):
		self._cell_phone = value


	@property
	def country( self ):
		return self._country

	@country.setter
	def country( self, value ):
		self._country = value


	@property
	def keywords( self ):
		return self._keywords

	@keywords.setter
	def keywords( self, value ):
		self._keywords = value




	def get_groups( self ):
		""" return list of groups which contains user
		"""
		return [ Everyone( self.scheme ) ]


	@classmethod
	def get_users( self, scheme, email, guid ):
		return []


	def get_name( self ):
		""" OBSOLETE. need for capability.
		"""
		return self.name


	def check_local_password( self, password ):
		return False

	def get_guid_list( self ):
		groups = self.get_groups()
		return [ group.guid for group in groups ] + [ self.guid ]


	def __pack( self ):
		attributes = {
			'guid'					: self.guid,
			'email'					: self.email,
			'first_name'			: self.first_name,
			'last_name'				: self.last_name,
			'phone'					: self.phone,
			'password'				: self.password,
			'notification_email'	: self.notification_email,
			'cell_phone'			: self.cell_phone,
			'country'				: self.country,
			'keywords'				: self.keywords,
			'root'					: self.is_root(),
		}

		return attributes

	def is_root(self):
		return False


	def __eq__( self, other ):
		if not other: return False
		if not other.is_user(): return False
		return self.__pack() == other.__pack()



	def check_password( self, password ):
		"""
		"""
		return self.scheme.check_password( self, password )

	def set_password_hash(self, hash_p):
		raise Exception("should be implemented in subclass")

# ----------------------------------------------------------------
#		Group
# ----------------------------------------------------------------

class Group( Subject ):
	""" Base class for groups
	"""
	def __init__( self, scheme ):
		Subject.__init__( self, scheme )

		# addition fields
		self._name 	= ''
		self._guid 	= ''

		# save group-user relationship
		self.user_guid_list = []


	def is_user( self ):
		return False

	def is_group( self ):
		return True


	def add_user( self, user ):
		raise Exception('Subclass resposibility')

	def remove_user( self, user ):
		raise Exception('Subclass resposibility')

	def delete_user( self, user, force=False ):
		raise Exception('Subclass resposibility')


	@abstractmethod
	def get_users( self ):
		raise Exception('Subclass resposibility')


	@classmethod
	def get_groups( self, scheme, name=None, guid=None ):
		return Everyone.get_groups( scheme, name, guid )


	@classmethod
	def create( self, scheme, name ):
		raise Exception('Subclass resposibility')



	@property
	def name( self ):
		return self._name

	@name.setter
	def name( self, value ):
		self._name = self._scalar( value )


	@property
	def guid( self ):
		return self._guid

	@guid.setter
	def guid( self, value ):
		self._guid = self._scalar( value )

	
	def _is_everyone_group( self ):
		return self.guid == Everyone.GUID


	def __pack( self ):
		# get group's users guids
		#members = list(set( [ user.guid for user in group.get_users() ] ))

		attributes = {
			'guid'		: self.guid,
			'name'		: self.name,
			#'members'	: members,
		}

		return attributes


	def __eq__( self, other ):
		if not isinstance( other, Group ): return False
		return self.__pack() == other.__pack()





class Everyone( Group ):
	""" Special group contains all users
	"""
	GUID = u'all-0e88aeaa-9384-43a4-b068-96bfc54c9d7b'
	NAME = u'Everyone'

	def __init__( self, scheme ):
		Group.__init__( self, scheme )
		self.guid = Everyone.GUID
		self.name = Everyone.NAME

	def get_users( self ):
		import ProAdmin
		return ProAdmin.application().get_users()

	@classmethod
	def get_groups( self, scheme, name=None, guid=None ):
		if guid and guid == Everyone.GUID:
			return [ Everyone(scheme) ]

		if not guid and name and name == Everyone.NAME:
			return [ Everyone(scheme) ]

		if not name and not guid:	
			return [ Everyone(scheme) ]

		return []

	def force_delete( self, force=True ):
		pass


	def __eq__( self, other ):
		if not isinstance( other, Everyone ): return False
		return True


	def add_user( self, user ):
		pass
		
	def remove_user( self, user ):
		pass

	def delete_user( self, user, force=False ):
		pass



# ----------------------------------------------------------------
#		LDAP User
# ----------------------------------------------------------------

class LDAPUser( User ):
	""" implementation of User for LDAP base
	"""

	# marker that group attribute of ldap object are empty
	_EMPTY_GROUP_VALUE = 'dc=vdombox'



	def __init__( self, scheme, ldapobject = None ):
		User.__init__( self, scheme )

		# create ldap object
		self._ldapobject = self.create( email = '' ).ldapobject if not ldapobject else ldapobject



	def _fill_ldapobject( self ):
		""" fill ldap object
		"""
		from proadmin_ldap_object import LDAPObject

		config = self.scheme.config
		dn = self.scheme.get_option( 'base_dn' )

		# filled by config settings
		attributes = {
			'objectClass'						: config.get_attribute( 'user_class' ),
			config.get_attribute( 'user_guid' )	: '',	#  self.guid,
			config.get_attribute( 'email' )		: '', 	#  self.email,
			config.get_attribute( 'last_name' )	: '', 	#  self.last_name or self.email,
			config.get_attribute( 'first_name')	: '', 	#  self.first_name or self.email,
			config.get_attribute( 'password' )	: '', 	#  self.password,
			config.get_attribute( 'phone' )		: '', 	#  self.phone,

			config.get_attribute( 'notification_email' ): '',	#  self.notification_email
			config.get_attribute( 'cell_phone' )		: '',	#  self.cell_phone
			config.get_attribute( 'country' )			: '',	#  self.country
			config.get_attribute( 'keywords' )			: '',	#  self.keywords
		}

		return LDAPObject( dn, attributes )



	def _set_ldap_attribute( self, key, value ):
		if not value: value = [ ' ' ]
		if not isinstance( value, list ): value = [ value ]

		ldap_attribute = self.scheme.config.get_attribute( key )
		self.ldapobject.attributes[ ldap_attribute ] = value


	def _get_ldap_attribute( self, key ):
		ldap_attribute = self.scheme.config.get_attribute( key )
		value = self.ldapobject.attributes.get( ldap_attribute, '' )

		return self._scalar( value )





	@property
	def ldapobject( self ):
		return self._ldapobject

	@ldapobject.setter
	def ldapobject( self, value ):
		self._ldapobject = value




	@property
	def guid( self ):
		return self._get_ldap_attribute( 'user_guid' )

	@guid.setter
	def guid( self, value ):
		value = self._scalar( value )
		self.ldapobject.dn = self.scheme.config.get_user_dn( value, self.scheme.get_option( 'base_dn' ) )
		self._set_ldap_attribute( 'user_guid', value )



	@property
	def email( self ):
		return self._get_ldap_attribute( 'email' )

	@email.setter
	def email( self, value ):
		value = self._scalar( value )
		self._set_ldap_attribute( 'email', value )



	@property
	def phone( self ):
		return self._get_ldap_attribute( 'phone' ) or '0'

	@phone.setter
	def phone( self, value ):
		value = self.modify_phone( value )
		self._set_ldap_attribute( 'phone', value )

	def modify_phone( self, value ):
		value = self._scalar( value )
		new_value = ''
		available = ' +1(234)567-890'
		for i in str(value):
			new_value += unicode( i ) if i in available else ''
		return new_value if new_value else '0'



	@property
	def first_name( self ):
		return self._get_ldap_attribute( 'first_name' )

	@first_name.setter
	def first_name( self, value ):
		value = self._scalar( value )
		self._set_ldap_attribute( 'first_name', value )



	@property
	def last_name( self ):
		return self._get_ldap_attribute( 'last_name' )

	@last_name.setter
	def last_name( self, value ):
		value = self._scalar( value )
		self._set_ldap_attribute( 'last_name', value )



	@property
	def password( self ):
		return self._get_ldap_attribute( 'password' )

	@password.setter
	def password( self, value ):
		if not value: return

		value = self._get_hash( self._scalar( value ) )
		self._set_ldap_attribute( 'password', value )



	@property
	def notification_email( self ):
		return self._get_ldap_attribute( 'notification_email' )

	@notification_email.setter
	def notification_email( self, value ):
		value = self._scalar( value )
		self._set_ldap_attribute( 'notification_email', value )


	@property
	def cell_phone( self ):
		return self._get_ldap_attribute( 'cell_phone' )

	@cell_phone.setter
	def cell_phone( self, value ):
		value = self.modify_phone( value )
		self._set_ldap_attribute( 'phone', value )
		self._set_ldap_attribute( 'cell_phone', value )


	@property
	def country( self ):
		return self._get_ldap_attribute( 'country' )

	@country.setter
	def country( self, value ):
		value = self._scalar( value )
		self._set_ldap_attribute( 'country', value )


	@property
	def keywords( self ):
		ldap_attr = self.scheme.config[ 'keywords' ]
		value = self.ldapobject.attributes.get( ldap_attr, [] )

		# remove duplicated values
		value = list( set(value) )
		self.ldapobject.attributes[ ldap_attr ] = value

		return value

	@keywords.setter
	def keywords( self, value ):
		if not value: value = []

		if not isinstance( value, list ):
			value = [ value ]

		# remove duplicated values
		value = list( set(value) )

		ldap_attr = self.scheme.config[ 'keywords' ]
		self.ldapobject.attributes[ ldap_attr ] = value



	def get_dn( self ):
		""" get user's DN, according to LDAP config
		"""
		config = self.scheme.config
		base_dn = scheme.get_option( 'base_dn' )
		user_dn = config.get_attribute( 'user_dn' )
		user_guid = config.get_attribute( 'user_guid' ) + '=' + self.guid
		return user_guid + ',' + user_dn + ',' + base_dn



	# NEED TO REIMPLEMENT IT
	def is_admin( self ):
		""" obsolete. need for old versions support.
		"""
		return self.is_root()

	def is_root( self ):
		root_user_email = self.scheme.get_option( 'root_user' )
		return True if self.email == root_user_email else False



	@classmethod
	def create( self, scheme, email = '' ):
		""" create user
		"""
		ldapconnection 	= scheme.userconnection()
		config = scheme.config

		baseDN			= scheme.get_option( 'base_dn' )
		user_dn 		= config[ 'user_dn' ]

		# create guid for new user
		guid = str(uuid.uuid4())

		ldap_attributes = {
			'objectClass'					: config[ 'user_class' ],
			config[ 'user_guid' ]			: [ guid ],
			config[ 'email'	]				: [ email ],
			config[ 'password' ]			: [ ' ' ],
			config[ 'first_name' ]			: [ ' ' ],
			config[ 'last_name' ]			: [ ' ' ],
			config[ 'phone' ]				: [ '0' ],

			config[ 'notification_email' ]	: [ ' ' ],
			config[ 'cell_phone' ]			: [ '0' ],
			config[ 'country' ]				: [ ' ' ],
			config[ 'keywords' ]			: [ ' ' ],

		}

		# modify ldap attributes for support 'groups in user' attribute
		groups_in_user = config[ 'groups_in_user' ]
		if groups_in_user:
			ldap_attributes[ groups_in_user ] = [ self._EMPTY_GROUP_VALUE ]

		# create ldap object
		ldap_user = ldapconnection.create_object(
				["%s=%s" % ( config[ 'user_guid' ], guid, ), "%s," % user_dn + baseDN],
				ldap_attributes
		)

		# create nonpersistent LDAPUser
		return LDAPUser( scheme, ldapobject = ldap_user )





	def _exist( self ):
		users = self.scheme.get_users( guid = self.guid )
		return True if users else False



	def save( self ):
		ldapconnection = self.scheme.userconnection()
		if self._exist():
			ldapconnection.update( self.ldapobject )
		else:
			ldapconnection.insert( self.ldapobject )
		return self



	def add_group( self, group, debug = False ):
		if not group: return
		group.add_user( self )
		return self



	def remove_group( self, group ):
		if not group: return
		group.remove_user( self )
		return self



	@classmethod
	def get_users( self, scheme, email = None, guid = None ):
		""" get scheme users
		"""
		config = scheme.config
		filter = '(objectClass=%s)' % config.get_attribute( 'user_class' )[-1]

		if email:
			filter += '(%s=%s)' % ( config.get_attribute( 'email'), email )
		if guid:
			filter += '(%s=%s)' % ( config.get_attribute( 'user_guid' ), self._modify_dn( guid ) )

		filter = '(&' + filter + ')'

		user_dn = config.get_attribute( 'user_dn' )

		if user_dn:
			search_location = '%s,'% user_dn + scheme.get_option( 'base_dn' )

		else:
			search_location = '%s'% scheme.get_option( 'base_dn' )

		ldapobjects = scheme.userconnection().search( search_location, filter, True )


		users = [ LDAPUser( scheme, ldapobject = ldapobject ) for ldapobject in ldapobjects ]


		try:
			users.sort( cmp=lambda a,b: cmp( a.name.lower(), b.name.lower() ) )
		except:
			pass

		return users




	def get_groups( self ):
		""" get scheme groups
		"""
		config = self.scheme.config

		# group.users
		users_in_group = config.get_attribute( 'users_in_group' )
		if users_in_group:
			groups = LDAPGroup.get_groups( self.scheme )
			result = []
			for group in groups:
				if group._is_everyone_group(): continue

				user_dns = group.ldapobject.attributes.get( users_in_group, [] )
				for dn in user_dns:
					if dn == self.ldapobject.dn:
						result.append( group )

			# we experimenting with limited ldap attributes mapping
			try:
				result.sort( cmp=lambda a,b: cmp( a.name.lower(), b.name.lower() ) )
			except:
				pass

			return User.get_groups( self ) + result

		# user.groups
		groups_in_user = config.get_attribute( 'groups_in_user' )
		if groups_in_user:
			group_dns = self.ldapobject.attributes.get( groups_in_user, [] )
			result = []
			for dn in group_dns:
				ldapobject = connection.get_by_dn( dn )
				result.append( LDAPGroup( self.scheme, ldapobject = ldapobject ) )

			# we experimenting with limited ldap attributes mapping
			try:
				result.sort( cmp=lambda a,b: cmp( a.name.lower(), b.name.lower() ) )
			except:
				pass

			return User.get_groups( self ) + result

		return [ Everyone(self.scheme) ]



	def force_delete( self, force = True ):
		if self.is_admin() and not force:
			return
		rules = self.scheme.application.child_rules( subject = self, recursive = True )
		for rule in rules:
			rule.delete()
		users_in_group = self.scheme.config.get_attribute( 'users_in_group' )
		if users_in_group:
			groups = self.get_groups()
			for group in groups:
				group.delete_user( self, force )
		self.scheme.userconnection().delete( self.ldapobject )



	def delete_from_group( self, group, force = False ):
		if self.is_admin() and not force:
			return
		# user.groups
		groups_in_user = self.scheme.config.get_attribute( 'groups_in_user' ) # user.groups
		if groups_in_user:
			self.ldapobject.attributes[ groups_in_user ].remove( group.ldapobject.dn )
			self.save()
			return self

		# group.users
		users_in_group = self.scheme.config.get_attribute( 'users_in_group' ) # group.users
		if users_in_group:
			group.delete_user( user = self, force = force )
			group.save()
		return self



	def _get_hash( self, text ):
		return '{MD5}' + base64.b64encode( md5( text.encode('utf8') ).digest() )


	def set_password_hash( self, hash ):
		self._password = self._scalar( hash )
		if self.ldapobject:
			password_attribute = self.scheme.config.get_attribute( 'password' )
			self.ldapobject.attributes[ password_attribute ] = hash


	def check_password( self, password ):
		"""
		"""
		return self.scheme.check_password( self, password )


	def check_local_password( self, password ):
		hash = self._get_hash( password )
		return hash == self.password



	def __eq__( self, other ):
		if not isinstance( other, LDAPUser ): return False
		return self.ldapobject == other.ldapobject



# ----------------------------------------------------------------
#		LDAP Group
# ----------------------------------------------------------------

class LDAPGroup( Group ):
	""" Group implementation for LDAP base
	"""
	# hack - need for required parameter 'member' in class groupOfNames in LDAP
	# it's value represent empty group.
	_EMPTY_GROUP_VALUE = 'dc=vdombox'


	def __init__( self, scheme, ldapobject = None ):
		Group.__init__( self, scheme )
		self._ldapobject = ldapobject if ldapobject else self.create( name = '' ).ldapobject



	@property
	def ldapobject( self ):
		return self._ldapobject

	@ldapobject.setter
	def ldapobject( self, value ):
		self._ldapobject = value



	@property
	def name( self ):
		name = self._scalar( self.ldapobject.attributes.get( self.scheme.config.get_attribute( 'group_name' ) ) )
		return name or self.guid

	@name.setter
	def name( self, value ):
		value = self._scalar( value )
		if self.ldapobject:
			self.ldapobject.attributes[ self.scheme.config.get_attribute( 'group_name' ) ] = value



	@property
	def guid( self ):
		return self._scalar( self.ldapobject.attributes[ self.scheme.config.get_attribute( 'group_guid' ) ] )

	@guid.setter
	def guid( self, value ):
		value = self._scalar( value )
		self.ldapobject.dn = self.scheme.config.get_user_dn( value, self.scheme.get_option( 'base_dn' ) )
		self.ldapobject.attributes[ self.scheme.config.get_attribute( 'group_guid' ) ] = [ value ]



	def _exist( self ):
		groups = self.scheme.get_groups( guid = self.guid )
		return True if groups else False

	def save( self ):
		self.add_empty_user()
		ldapconnection = self.scheme.userconnection()
		if self._exist():
			ldapconnection.update( self.ldapobject )
		else:
			ldapconnection.insert( self.ldapobject )
		return self



	def is_admin( self ):
		root_group_name = self.scheme.get_option( 'admin_group' )
		return True if self.name == root_group_name else False



	@classmethod
	def create( self, scheme, name='Administrators' ):
		""" create user
		"""
		name = self._scalar( name )

		ldapconnection 	= scheme.userconnection()
		config = scheme.config

		baseDN = config.get_attribute( "base_dn" )
		group_dn = config.get_attribute( 'group_dn' )
		object_class = config.get_attribute( 'group_class' )

		guid_attr_name = config.get_attribute( 'group_guid' )
		name_attr_name = config.get_attribute( 'group_name' )
		user_in_group_attr = config.get_attribute( 'users_in_group' )

		# set default parameters
		guid = str( uuid.uuid4() )
		name = name if name else self.name

		if user_in_group_attr:
			ldap_group = ldapconnection.create_object(
					[ "%s=%s" % ( guid_attr_name, guid ), "%s," % group_dn + baseDN ],
					{
						'objectClass'		: object_class,
						guid_attr_name		: [ guid ],
						name_attr_name		: [ name ],
						user_in_group_attr	: [ self._EMPTY_GROUP_VALUE ],
					})
		else:
			ldap_group = ldapconnection.create_object(
					["%s=%s" % ( guid_attr_name, guid ), "%s," % group_dn + baseDN],
					{
						'objectClass'		: object_class,
						guid_attr_name		: [ guid ],
						name_attr_name		: [ name ],
					})

		return LDAPGroup( scheme, ldapobject = ldap_group )



	def _get_members_dns( self ):
		# vector method was changed
		return self._scalar( 'member' )



	def add_user( self, user ):
		""" add user to group
		"""
		# group.users
		users_in_group = self.scheme.config.get_attribute( 'users_in_group' )
		if users_in_group:
			if user.ldapobject.dn not in self.ldapobject.attributes[ users_in_group ]:
				self.ldapobject.attributes[ users_in_group ].append( user.ldapobject.dn )
				self.save()
			return self

		groups_in_user = self.scheme.config.get_attribute( 'groups_in_user' )
		if groups_in_user:
			if self._scalar( self.ldapobject.dn ) not in user.ldapobject.attributes[ groups_in_user ]:
				user.ldapobject.attributes[ groups_in_user ].append( self._scalar( self.ldapobject.dn ) )
				user.save()
			return self



	def remove_user( self, user ):
		""" remove user from group
		"""
		# group.users
		users_in_group = self.scheme.config.get_attribute( 'users_in_group' )
		if users_in_group:
			self.ldapobject.attributes[ users_in_group ].remove( user.ldapobject.dn )
			self.save()
			return self

		groups_in_user = self.scheme.config.get_attribute( 'groups_in_user' )
		if groups_in_user:
			user.ldapobject.attributes[ groups_in_user ].remove( self.ldapobject.dn )
			self.scheme.userconnection().save( user.ldapobject )
			return self

		return self.force_remove_user( user, force=False )



	def force_remove_user( self, user, force=True ):
		""" remove user from group
		"""

		if self.is_admin() and user.is_admin() and not force:
			return

		user.delete_from_group( group = self, force = force )
#
#		if user in self.users:
#			self.users.remove( user )

#		members = self._get_members_dns()
#
#		#remove default entry
#		if user.ldapobject.dn in members:
#			members.remove( user.ldapobject.dn )
#
#		if not members:
#			members = [ self._EMPTY_GROUP_VALUE ]
#
#		self._set_attribute( 'member', members )
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# ||| || ||| || ||| || ||| || ||| || ||| || ||| || ||| || ||| || ||| || ||| || |
# ==============================================================================


	@classmethod
	def get_groups( self, scheme, name = None, guid = None ):
		"""
		"""
		config = scheme.config

		filter = '(objectClass=%s)' % config.get_attribute( 'group_class' )[-1]

		users_in_group = config.get_attribute( 'users_in_group' )

		if name:
			filter += '(%s=%s)' %( config.get_attribute( 'group_name'), name )
		if guid:
			filter += '(%s=%s)' %( config.get_attribute( 'group_guid' ), self._modify_dn( guid ) )

		filter = '(&' + filter + ')'


		group_dn = config.get_attribute( 'group_dn' )

		if group_dn:
			search_location = '%s,'% group_dn + scheme.get_option( 'base_dn' )
		else:
			search_location = '%s'% scheme.get_option( 'base_dn' )

		groups = scheme.userconnection().search( search_location, filter, True )

		result = [ LDAPGroup( scheme, ldapobject = group ) for group in groups ]

		# we experimenting with limited ldap attributes mapping
		try:
			result.sort( cmp=lambda a,b: cmp( a.name.lower(), b.name.lower() ) )
		except:
			pass

		return Group.get_groups( scheme, name, guid ) + result


	def get_users( self ):
		"""
		"""
		# get users if user_dn stores in group object
		config = self.scheme.config

		#group.users
		users_in_group = config.get_attribute( 'users_in_group' )
		if users_in_group:
			result = []
			user_dns = self.ldapobject.attributes.get( users_in_group, [] )
			for dn in user_dns:
				if self._scalar( dn ) != self._EMPTY_GROUP_VALUE:
					ldapuser = self.scheme.userconnection().get_by_dn( self._scalar( dn ) )
					if ldapuser:
						user = LDAPUser( scheme = self.scheme, ldapobject = ldapuser )
						result.append( user )

			# we experimenting with limited ldap attributes mapping
			try:
				result.sort( cmp=lambda a,b: cmp(a.email.lower(), b.email.lower()) )
			except:
				pass

			return result

		# if group_dn stores in user object: get all users and check if each user belongs this group ( self )
		groups_in_user = config.get_attribute( 'groups_in_user' )
		if groups_in_user:
			users = LDAPUser.get_users( self.scheme )
			result = []
			for user in users:
				group_dns = user.ldapobject.attributes.get( groups_in_user, [] )
				for dn in group_dns:
					if dn == self.ldapobject.dn:
						result.append( user )

			# we experimenting with limited ldap attributes mapping
			try:
				result.sort( cmp=lambda a,b: cmp(a.email.lower(), b.email.lower()) )
			except:
				pass

			return result

		return []



	def delete_user( self, user, force = False ):
		if self.is_admin() and not force:
			return

		# group.users
		users_in_group = self.scheme.config.get_attribute( 'users_in_group' ) # group.users
		if users_in_group:
			if self._scalar( user.ldapobject.dn ) != self._EMPTY_GROUP_VALUE:
				self.ldapobject.attributes[ users_in_group ].remove( self._scalar( user.ldapobject.dn ) )
				self.save()
			return self

		# user.groups
		groups_in_user = self.scheme.config.get_attribute( 'groups_in_user' )
		if groups_in_user:
			users = self.get_users()
			for user in users:
				user.delete_from_group( group = self, force = force )
			return self


	def add_empty_user( self ):
		users_in_group = self.scheme.config.get_attribute( 'users_in_group' )
		if users_in_group not in self.ldapobject.attributes:
			self.ldapobject.attributes[ users_in_group ] = []
		if not self.ldapobject.attributes[ users_in_group ]:
			self.ldapobject.attributes[ users_in_group ].append( self._EMPTY_GROUP_VALUE )

	def force_delete( self, force = True ):
		""" delete user
		"""
		if self.is_admin() and not force:
			return
		rules = self.scheme.application.child_rules( subject = self, recursive = True )
		for rule in rules:
			rule.delete()
		groups_in_user = self.scheme.config.get_attribute( 'groups_in_user' )
		if groups_in_user:
			users = self.get_users()
			for user in users:
				user.delete_from_group( group = self, force = force )
		self.scheme.userconnection().delete( self.ldapobject )


	def __eq__( self, other ):
		if not isinstance( other, LDAPGroup ): return False
		return self.ldapobject == other.ldapobject



]]>
		</Library>
		<Library Name="promail_pop3_client">
<![CDATA["""
"""

import email
import logging
import os
import poplib

import pyzmail

from promail_indexers import get_indexer
from promail_xapian import Message as XapianMessage
from promail_xapian import parse_msg_date
from prosuite_threading import ProSuiteBaseThread
from promail_orm import Message


MAX_MAILS_PER_CONNECTION = 20


class LoggerAdapter(logging.LoggerAdapter):

    def process(self, msg, kwargs):
        return "[%s:%d][%s] %s" % (
            self.extra["host"],
            self.extra["port"],
            self.extra["login"],
            msg ), kwargs


class POP3Connector(object):

    __slots__ = (
        "conn",
        "connect_settings",
    )

    def __init__(self, connect_settings):
        self.conn = None
        self.connect_settings = connect_settings

    def connect(self):
        """
        Connect to POP3 server
        """
        conn_cls = poplib.POP3_SSL if self.connect_settings.incoming.secure == self.connect_settings.SECURITY_E.SSL else\
                   poplib.POP3

        self.conn = conn_cls(
            self.connect_settings.incoming.host,
            self.connect_settings.incoming.port
        )

        self.conn.user(self.connect_settings.incoming.login.encode("utf8"))
        self.conn.pass_(self.connect_settings.incoming.passwd.encode("utf8"))

    def disconnect(self):
        """
        Disconnect from POP3 server
        """
        self.conn.quit()

    def total_mails(self):
        """
        Return total mails count
        """
        return self.conn.stat()[0]

    def get_mail(self, mail_id):
        """
        Get mail by mail id
        """
        return '\n'.join(self.conn.retr(mail_id)[1])

    def get_mail_uidl(self, mail_id):
        """
        Get mail UIDL by mail id
        """
        return self.conn.uidl(mail_id).split()[2]

    def delete_mail(self, mail_id):
        """
        Remove mail by id
        """
        return self.conn.dele(mail_id)


class POP3Client(object):

    __slots__ = (
        "mailbox",
        "conn",
        "_logger",
    )

    def __init__(self, mailbox):
        self.mailbox = mailbox
        self.mailbox.connection.in_login = self.mailbox.login
        self.mailbox.connection.in_passwd = self.mailbox.passwd
        self.conn = POP3Connector(self.mailbox.connection)
        self._logger = None

    def setup_logger(self, parent_logger):
        """
        Setup logger using LoggerAdapter
        """
        self._logger = LoggerAdapter(
            parent_logger,
            {
                "host": self.mailbox.connection.incoming.host,
                "port": self.mailbox.connection.incoming.port,
                "login": self.mailbox.login
            }
        )

    @property
    def logger(self):
        return self._logger

    def connect(self, ret_exception=False):
        """
        Try to connect and login
        """
        self.logger.debug("Trying to connect and login...")
#        self.logger.debug("!!! inc login '" + self.mailbox.connection.incoming.login.encode("utf8") + "'")
#        self.logger.debug("!!! inc passwd '" + self.mailbox.connection.incoming.passwd.encode("utf8") + "'")
#        self.logger.debug("!!! inc host '" + self.mailbox.connection.incoming.host.encode("utf8") + "'")
#        self.logger.debug("!!! inc port '" + str(self.mailbox.connection.incoming.port) + "'")
#        self.logger.debug("!!! out login '" + self.mailbox.connection.outgoing.login.encode("utf8") + "'")
#        self.logger.debug("!!! out passwd '" + self.mailbox.connection.outgoing.passwd.encode("utf8") + "'")
#        self.logger.debug("!!! out host '" + self.mailbox.connection.outgoing.host.encode("utf8") + "'")
#        self.logger.debug("!!! out port '" + str(self.mailbox.connection.outgoing.port) + "'")
#        self.logger.debug("!!! box login '" + self.mailbox.login.encode("utf8") + "'")
#        self.logger.debug("!!! box passwd '" + self.mailbox.passwd.encode("utf8") + "'")
        try:
            self.conn.connect()

        except Exception as ex:
            self.logger.exception("Connection or login failed!...")
            if ret_exception:
                return ex

            return False

        else:
            self.logger.debug("Successfully connected!")
            return True

    def disconnect(self):
        """
        Disconnect from server
        """
        try:
            self.conn.disconnect()

        except Exception as ex:
            self.logger.exception("Disconnect exception...")

    def fetch_mails(self):
        """
        Fetch mails from mailbox and save to DB
        """
        self.logger.info("Fetching mails")

        total_mails = self.conn.total_mails()
        self.logger.debug("Total mails reported by POP3 - %s mails", total_mails)

        if not total_mails:
            return

        processed_mails = 0


        for msg_index in range(1, total_mails + 1):

            try:
                mail_uid = self.conn.get_mail_uidl(msg_index)
                self.logger.debug("mail %d uidl %s", msg_index, mail_uid)

            except poplib.error_proto:
                self.logger.exception("Can't retrieve UIDL for index %d", msg_index)
                continue

            except Exception:
                self.logger.exception("Unknown exception")
                break

            q = XapianMessage.search(XapianMessage.uuid.__eq__(mail_uid))
            if q.count() > 0:
                self.logger.debug("Mail with UIDL %s already in DB", mail_uid)
                continue

            self.logger.debug("Parsing mail with UIDL %s...", mail_uid)
            try:
                pyzmsg = pyzmail.PyzMessage.factory(self.conn.get_mail(msg_index))

            except Exception as ex:
                self.logger.exception("Can't parse mail with UIDL %s...", mail_uid)
                continue

            self.logger.debug("Saving mail with UIDL %s...", mail_uid)
            try:
                self.save_email(pyzmsg, mail_uid)
            except Exception as ex:
                self.logger.exception("Can't save mail with UIDL %s...", mail_uid)

#            if self.account.server.pop3.delete_mails:
#                self.logger.debug("Delete mail with UIDL %s and index %d from server", mail_uid, msg_index)
#                self.conn.delete_mail(msg_index)

            processed_mails += 1

            if processed_mails >= MAX_MAILS_PER_CONNECTION:
                break

        self.logger.debug("%d mails were processed", processed_mails)

    def save_email(self, msg, msg_uid):
        """
        """
        xapian_message = XapianMessage.create(
                subject=msg.get_subject(),
                date=parse_msg_date(msg),
                sender=msg.get_addresses("from")[0],
                to=msg.get_addresses("to"),
                cc=msg.get_addresses("cc"),
                bcc=msg.get_addresses("bcc"),
                uuid=msg_uid
            )

        msg_timestamp, msg_datetime = self.parse_msg_date(msg)
        msg_eac_token = msg.get_decoded_header("EAC-Token", "")

        message = Message.create(
                _mailbox=self.mailbox,
                _archive=self.mailbox.get_archive(name="inbox"),
                #_labels
                uidl=msg_uid,
                subject=msg.get_subject(),
                body=u"Test mail",
                datetime=msg_datetime,
                from_email=msg.get_address("from"),
                to_email=msg.get_addresses("to"),
                cc_email=msg.get_addresses("cc"),
                priority=msg.get_decoded_header("Priority") or \
                         msg.get_decoded_header("X-Priority"),
                is_read=False,
                is_eac=bool(msg_eac_token),
                eac_token=msg_eac_token
                #eac_body
            )

#        doc = self.search_source.create_document()
#
#        doc.uid = msg_uid
#        doc.subject = msg.get_subject()
#        doc.from_email = msg.get_address("from")
#        doc.to_email = msg.get_addresses("to")
#        doc.cc_email = msg.get_addresses("cc")
#
#        doc.priority = msg.get_decoded_header("Priority") or \
#                       msg.get_decoded_header("X-Priority")
#
#        doc.timestamp, doc.datetime = self.parse_msg_date(msg)
#        doc.state = doc.STATE.UNREAD
#        doc.location = self.inbox_archive.guid
#
#        doc.EACToken = msg.get_decoded_header("EAC-Token", "")
#
#        eac_method = msg.get_decoded_header("EAC-Method", "").lower()
#
#        if eac_method in ("delete", "update"):
#
#            for existing_doc in self.search_source.complex_search(eactoken=doc.EACToken):
#                existing_doc.delete()
#
#        if eac_method in ("", "new", "update"):
#
#            self.save_attachments(msg, doc, eac=bool(doc.EACToken))
#            doc.save()

    def parse_msg_date(self, msg):
        """
        """
        date_str = msg.get_decoded_header("Date")
        date = None

        if date_str:
            date = email.utils.parsedate_tz(date_str)

        if not date:
            for hname, hvalue in msg.items():
                if "Received" in hname:
                    date_str = hvalue.rsplit(";",1)[1]
                    date = email.utils.parsedate_tz(date_str)

                if date:
                    break

        return (str(email.utils.mktime_tz(date)), date_str) if date else ('', '')

    def get_attachments_folder(self):
        """
        """
        # make as settings value
        path = application.storage.abs_path("attachments")
        try:
            os.stat(path)
        except Exception as ex:
            application.storage.mkdir(path)

        return path

    def save_attachments(self, msg, doc, eac=False):
        """
        """
        body = ['', '']
        eacbody = ""
        attachments = {}
        attachments_dir = self.get_attachments_folder()

        for mailpart in msg.mailparts:
            if mailpart.is_body and body[0] != "text/html":
                body[1] = pyzmail.decode_text(mailpart.get_payload(), mailpart.charset, None)[0]
                body[0] = mailpart.type

            else:
                if eac and "wholexml" in mailpart.type.lower():
                    eacbody = pyzmail.decode_text(mailpart.get_payload(), mailpart.charset, None)[0]

                else:
                    attachment = self.account.create_attachment(
                        filename=mailpart.filename or '',
                        charset=mailpart.charset,
                        content_desc=mailpart.part.get('Content-Description'),
                        sanitized_filename=mailpart.sanitized_filename,
                        atype=mailpart.type
                    )
                    attachment.save()

                    path = os.path.join(attachments_dir, attachment.guid)
                    application.storage.write(path, mailpart.get_payload())

                    indexer = get_indexer(attachment.filename or '')
                    attachments[attachment.guid] = u"".join([
                        attachment.filename or '',
                        attachment.sanitized_filename or '',
                        indexer(path)
                    ])

        doc.body = body
        doc.attachindex =  u"".join(attachments.values())
        doc.attachguids =  attachments.keys()
        doc.EACBody = eacbody
]]>
		</Library>
		<Library Name="class_xml_timer">
<![CDATA[from xml.dom.minidom import Document
from vdom_xml_node import Node

class XMLTimer( Node ):
	def __init__( self, dom=None ):

		if dom == None:
			dom = Document()
			m = dom.createElement( 'timer' )
			dom.appendChild( m )

		Node.__init__( self, dom )


	def find( self, obj, recursive=False, comparer=None ):
		result = Node.find( self, obj, recursive, comparer )

		if type(obj) not in [ str, unicode ]:
			return result

		if not result:
			result = self.create_child( obj )

		return result


	@property
	def name( self ):
		return self.find( 'name' ).text

	@name.setter
	def name( self, value ):
		self.find( 'name' ).text = value

	@property
	def guid( self ):
		return self.find( 'guid' ).text

	@guid.setter
	def guid( self, value ):
		self.find( 'guid' ).text = value

	@property
	def period( self ):
		return self.find( 'period' ).text

	@period.setter
	def period( self, value ):
		self.find( 'period' ).text = value

	@property
	def plugin_guid( self ):
		return self.find( 'plugin_guid' ).text

	@plugin_guid.setter
	def plugin_guid( self, value ):
		self.find( 'plugin_guid' ).text = value
]]>
		</Library>
		<Library Name="prosuite_localization_en">
<![CDATA[localization = {

#######################################
# <<<<<<<<<<<<<< Global >>>>>>>>>>>>> #
#######################################

"global.datetime_format": "%m/%d/%Y %H:%M:%S",
"global.invalid_request.title": u"Invalid request",
"global.invalid_request.text": u"We are unable to complete your request. Please, contact your Administrator",
"global.invalid_request_session.text": u"Looks like your request session expired! Please, refresh page...",
"global.invalid_request_session.title": u"Request error!",
"global.form.submit.failed.title": u"Error!",
"global.form.submit.success.title": u"Success!",
"global.form.submit.warning.title": u"Warning!",

"global.form.buttons.addanother": u"Save & add another",
"global.form.buttons.apply": u"Apply",
"global.form.buttons.cancel": u"Cancel",
"global.form.buttons.clear": u"Clear",
"global.form.buttons.close": u"Close",
"global.form.buttons.continue": u"Continue",
"global.form.buttons.create": u"Create",
"global.form.buttons.delete": u"Delete",
"global.form.buttons.reset": u"Reset",
"global.form.buttons.submit": u"Submit",

"global.error.title": u"Error!",
"global.success.title": u"Success!",
"global.error.permission_denied": u"Access denied! You have no rights!",

#######################################
# <<<<<<<<<<<<<< ProAdmin >>>>>>>>>>> #
#######################################

"global.proadmin.rules.default.full": u"Full",
"global.proadmin.rules.application.admin": u"Administrator",
"global.proadmin.rules.mailbox.read": u"Read",
"global.proadmin.rules.mailbox.write": u"Write",
"global.proadmin.rules.mailbox.delete": u"Delete",
"global.proadmin.rules.mailbox.owner": u"Owner",
"global.proadmin.rules.archive.read": u"Read",
"global.proadmin.rules.archive.write": u"Write",
"global.proadmin.rules.archive.delete": u"Delete",
"global.proadmin.rules.label.shared": u"Shared",
"global.proadmin.rules.label.owner": u"Owner",

#######################################
# <<<<<<<<<<<< Header Page >>>>>>>>>> #
#######################################

"prosuite.header.logout_label": u"Log Out",
"prosuite.header.home_page": u"Home",
"prosuite.header.plugins_page": u"Plugins",
"prosuite.header.settings_page": u"Settings",
"prosuite.header.logs_page": u"Logs",
"prosuite.header.switch_to_app": u"Switch to",

#######################################
# <<<<<<<<<<<< Login Page >>>>>>>>>>> #
#######################################

"prosuite.login.title": u"Login",
"prosuite.login.login.label": u"Login",
"prosuite.login.password.label": u"Password",
"prosuite.login.login_error_title": u"Login error",
"prosuite.login.invalid_login_passwd_error": u"Invalid login or password",
"prosuite.login.empty_login_passwd_error": u"Empty login or password",
"prosuite.login.unknown_runtime_error": u"Unknown error. Please, ask Administrator",

#######################################
# <<<<<<<<<<<< Logoff Page >>>>>>>>>> #
#######################################

"prosuite.logoff.title": u"Logoff",
"prosuite.logoff.dialog.caption": u"You have been logged off",
"prosuite.logoff.dialog.message": u"You will be redirected to the login page in few seconds",

#######################################
# <<<<<<<<<< Server 500 Page >>>>>>>> #
#######################################

"prosuite.500error.title": u"Server Internal Error",
"prosuite.500error.dialog.caption": u"Internal Server Error",
"prosuite.500error.dialog.message": u"""Send to Administrator following error ID - {eid}.<br><br><a href="{back_url}">Go back</a> or <a href="{logout_page}">Log out</a>""",

#######################################
# <<<<<<<<<<<<< Logs Page >>>>>>>>>>> #
#######################################
"prosuite.logs.title": u"Logs",
"prosuite.logs.table.header.date": u"Date",
"prosuite.logs.table.header.msg": u"Mesage",
"prosuite.logs.table.header.name": u"From",
"prosuite.logs.table.header.lvl": u"Level",
"prosuite.logs.table.msg.error.cantformat": u"Format error: can't format log record... Log message must be string!",
"prosuite.logs.header.app_logs": u"Switch to application logs",
"prosuite.logs.header.plugins_logs": u"Switch to plug-in logs",
"prosuite.logs.header.download_logs": u"Download log files",
"prosuite.logs.header.autoupdate.button": u" Automatically update logs table",
"prosuite.logs.download_logs.title": u"Download application logs",
"prosuite.logs.download_logs.close": u"Close",
"prosuite.logs.popup.loglevel.reset": u"Reset",
"prosuite.logs.popup.loglevel.hide": u"Hide",
"prosuite.logs.popup.loglevel.submit": u"Apply",
"prosuite.logs.popup.loggers.reset": u"Reset",
"prosuite.logs.popup.loggers.hide": u"Hide",
"prosuite.logs.popup.loggers.submit": u"Apply",

#######################################
# <<<<<<<<<<<< Rules Page >>>>>>>>>>> #
#######################################

"prosuite.rules.title": u"Rights Management",
"prosuite.rules.rules_col.title": u"Rights management (real rights, not inherited from groups)",
"prosuite.rules.subjects_col.title": u"Users and Groups",
"prosuite.rules.objects_col.title": u"Objects",
"prosuite.rules.apply_button": u"Apply",
"prosuite.rules.cancel_button": u"Cancel",
"prosuite.rules.object_not_found_error.text": u"Object not found. Please, refresh page.",
"prosuite.rules.object_not_found_error.title": u"Error",
"prosuite.rules.no_child_objects_error.text": u"No child objects were found",
"prosuite.rules.no_child_objects_error.title": u"Request done",
"prosuite.rules.access.full": u"Full",
"prosuite.rules.subject_not_found_error.text": u"Error",
"prosuite.rules.subject_not_found_error.title": u"Subject not found. Please, refresh page.",
"prosuite.rules.rights_applied.text": u"Rights successully updated",
"prosuite.rules.rights_applied.title": u"Success",
"prosuite.rules.subjects.groups": u"Groups",
"prosuite.rules.subjects.users": u"Users",
"prosuite.rules.subjects.inherited": u"Inherited from groups",

#######################################
# <<<<<<<<<<< Settings Page >>>>>>>>> #
#######################################

"prosuite.settings.title": u"Application Settings",
"prosuite.settings.plugins.title": u"Plugins",
"prosuite.settings.remote_control.title": u"Remote scheme",
"prosuite.settings.users_and_groups.title": u"Users & Groups management",
"prosuite.settings.rules.title": u"Rights management",
"prosuite.settings.cleaner.title": u"Application cleaner",
"prosuite.settings.servers.title": u"Mail Servers",
"prosuite.settings.pagetitle": u"Application Settings",
"prosuite.settings.header.proadmin": u"ProAdmin",
"prosuite.settings.header.plugins": u"Plugins",
"prosuite.settings.header.general": u"General",

#######################################
# <<<<<<<<<<< Clear Page >>>>>>>>> #
#######################################
"clear.title": u"Clear Application",
"clear.options.title": u"Select options:",
"clear.password.title": u"Enter password to submit changes:",
"clear.form.submt": u"Submit",
"clear.form.storage": u"Remove all files from storage",
"clear.form.app_db": u"Remove all data from application database",
"clear.form.plugin_db": u"Remove all plug-ins",
"clear.form.vee_engine": u"Remove all dispatchers from VScript Engine",
"clear.form.reset_config": u"Reset settings to defaults",
"clear.empty_passwd_error.text": u"Please, enter password",
"clear.empty_passwd_error.title": u"Error",
"clear.wrong_passwd_error.text": u"Please, check password and enter it again",
"clear.wrong_passwd_error.title": u"Wrong password",
"clear.change_applied.text": u"Changes successully applied",
"clear.change_applied.title": u"Success",

#######################################
# <<<<<<< Remote Scheme Page >>>>>>>> #
#######################################
"remotescheme.title": u"Remote scheme",
"remotescheme.currentscheme.title": u"Current scheme",
"remotescheme.selectscheme.title": u"Set scheme",
"remotescheme.selectscheme.standalone.title": u"Standalone",
"remotescheme.selectscheme.standalone.button": u"Apply",
"remotescheme.selectscheme.proadmin.title": u"ProAdmin connection",
"remotescheme.selectscheme.proadmin.host": u"Host",
"remotescheme.selectscheme.proadmin.login": u"Login",
"remotescheme.selectscheme.proadmin.password": u"Password",
"remotescheme.selectscheme.proadmin.testconnection": u"Test connection",
"remotescheme.selectscheme.proadmin.testsso": u"Test SSO",
"remotescheme.selectscheme.proadmin.reset": u"Reset",
"remotescheme.selectscheme.proadmin.apply": u"Apply",
"remotescheme.not_all_params_filled.text": u"Please, fill all fields",
"remotescheme.not_all_params_filled.title": u"Error",
"remotescheme.proadmin_check.resolv_erro": u"Can't resolve host",
"remotescheme.proadmin_check.host_resolved": u"Host resolved",
"remotescheme.proadmin_check.ping_erro": u"Can't ping IP address",
"remotescheme.proadmin_check.ping_done": u"IP address reachable",
"remotescheme.proadmin_check.vdom_error": u"Can't open session - VDOM Server not found",
"remotescheme.proadmin_check.vdom_done": u"Found VDOM Server",
"remotescheme.proadmin_check.login_error": u"Incorrect login or password",
"remotescheme.proadmin_check.login_done": u"Session opened",
"remotescheme.proadmin_check.proadmin_error": u"Connection failed: there is no app on selected IP or login and password are incorrect.",
"remotescheme.proadmin_check.proadmin_done": u"Connection established",
"remotescheme.proadmin_check.title": u"Logs",
"remotescheme.proadmin_check.success.text": u"Connection successfully established",
"remotescheme.proadmin_check.success.title": u"Test passed!",
"remotescheme.proadmin_check.error.text": u"Attempt to connection failed! Please, see test logs",
"remotescheme.proadmin_check.error.title": u"Test failed!",
"remotescheme.sso_dialog.success": u"SSO works! Click on 'Close' button to close window.",
"remotescheme.sso_dialog.close": u"Close",
"remotescheme.sso_dialog.warning": u"You will be redirected to SSO gateway in new window",
"remotescheme.sso_dialog.apply": u"Start test",
"remotescheme.sso_dialog.cancel": u"Close",
"remotescheme.apply_remote_error.text": u"Can't apply remote connection settings. See logs...",
"remotescheme.apply_remote_error.title": u"Error",
"remotescheme.remotescheme.host_at": u"at",
"remotescheme.remotescheme.last_sync": u"Last sync",
"remotescheme.remotescheme.sync_state": u"Sync state",
"remotescheme.remotescheme.sync_state.ok": u"Ok",
"remotescheme.remotescheme.sync_state.fail": u"Failed",
"remotescheme.remotescheme.objects": u"Objects",
"remotescheme.remotescheme.users": u"Users",
"remotescheme_state.restart": u"Restart connection",
"remotescheme_state.testsso": u"Test SSO",
"remotescheme_state.refresh": u"Refresh",
"remotescheme.reset_proadmin_conn_error.text": u"Caught error during connection restart. See logs...",
"remotescheme.reset_proadmin_conn_error.title": u"Error",
"remotescheme.reset_proadmin_conn.text": u"Connection successfully restarted!",
"remotescheme.reset_proadmin_conn.title": u"Done",

#######################################
# <<<< Users & Groups Remote Pag >>>> #
#######################################
"prosuite.usergroups.title": u"Users and Groups",
"usgrremote.title": u"Users and Groups",
"usgrremote.attention": u"Application works in remote scheme. Use ProAdmin application to configure Users and Groups.",
"ug.userstable.header.login": u"Login",
"ug.userstable.header.fullname": u"Full Name",
"ug.userstable.row.edit": u"Edit",
"ug.groupstable.header.name": u"Name",
"ug.groupstable.row.edit": u"Edit",
"ug.search.placeholder": u"Enter search query",
"ug.search.title": u"Search",
"ug.delete_dialog.attention": u"Are you sure want to delete?",
"ug.delete_dialog.cancel": u"Cancel",
"ug.delete_dialog.submit": u"Delete",
"ug.delete_dialog.no_selected_error.text": u"No selected objects!",
"ug.delete_dialog.no_selected_error.title": u"Error",
"ug.delete_dialog.delete_success.text": u"Objects successfully deleted",
"ug.delete_dialog.delete_success.title": u"Success",
"ug.toolbar.delete_selected": u"Delete selected",
"ug.add_to_group_dialog.create_new": u"Create new group",
"ug.add_to_group_dialog.no_selected_error.text": u"No selected objects!",
"ug.add_to_group_dialog.no_selected_error.title": u"Error",
"ug.add_to_group_dialog.groupname.placeholder": u"Enter group name",
"ug.add_to_group_dialog.groupname.title": u"Group name",
"ug.add_to_group_dialog.no_group_name.text": u"Enter group name",
"ug.add_to_group_dialog.no_group_name.title": u"Error",
"ug.add_to_group_dialog.group_name_exists.text": u"Group with such name exists",
"ug.add_to_group_dialog.group_name_exists.title": u"Error",
"ug.add_to_group_dialog.add_success.text": u"Users successfully added to group",
"ug.add_to_group_dialog.add_success.title": u"Success",
"ug.add_to_group_dialog": u"Add users to group",
"ug.add_to_group_dialog.submit": u"Submit",
"ug.add_to_group_dialog.cancel": u"Cancel",
"ug.add_to_group_dialog.to": u"to",
"ug.add_to_group_dialog.no_group_in_proadmin.text": u"Group with such name not exists",
"ug.add_to_group_dialog.no_group_in_proadmin.title": u"Error",
"ug.table.attention.no_objects": u"No objects found",
"ug.table.attention.no_objects_match_query": u"No objects match your search query",
"ug.toolbar.create_user": u"Create",
"ug.toolbar.create_group": u"Create",
"ug.toolbar.add_to_group": u"Add to group",
"ug.groups.list.all": u"All",
"ug.form.group.search.attention.no_objects": u"No objects found",
"ug.form.group.search.attention.no_objects_match_query": u"No objects match your search query",
"ug.group.form.groupname.input.placeholder": u"Enter group name",
"ug.group.form.search.input.placeholder": u"Enter search query",
"ug.group.form.create": u"Create",
"ug.group.form.cancel": u"Cancel",
"ug.group.form.save": u"Save",
"ug.group.form.title.edit": u"Edit group",
"ug.group.form.title.new": u"New group",
"ug.group.form.groupname.input.title": u"Group name",
"ug.group.form.search.input.title": u"Select users",
"ug.group.form.search.title": u"Users search",
"ug.form.object_not_exists.text": u"Object not exists. Please, reload page",
"ug.form.object_not_exists.title": u"Error",
"ug.user.no_user_login.text": u"Enter user login",
"ug.user.no_user_login.title": u"Error",
"ug.user.user_login_exists.text": u"User with such login exists already",
"ug.user.user_login_exists.title": u"Error",
"ug.user.no_user_in_proadmin.text": u"User with such name not exists",
"ug.user.no_user_in_proadmin.title": u"Error",
"ug.user.invalid_password.text": u"Enter valid password (6 or more symbols)",
"ug.user.invalid_password.title": u"Error",
"ug.user_dialog.form.keywords.input": u"Enter splitted keywords",
"ug.user_dialog.form.login.input": u"Enter user login",
"ug.user_dialog.form.email.input": u"Enter user E-mail",
"ug.user_dialog.form.firstname.input": u"Enter first name",
"ug.user_dialog.form.lastname.input": u"Enter last name",
"ug.user_dialog.form.phone.input": u"Enter phone number",
"ug.user_dialog.create": u"Create",
"ug.user_dialog.cancel": u"Cancel",
"ug.user_dialog.save": u"Save",
"ug.user_dialog.title.edit": u"Edit user",
"ug.user_dialog.title.new": u"New user",
"ug.user_dialog.to_groups": u"Groups",
"ug.user_dialog.to_info": u"Info",
"ug.user_dialog.groups.select.title": "Select groups",
"ug.user_dialog.form.generate_passwd": u"Generate password",
"ug.user_dialog.form.keywords.title": u"Keywords",
"ug.user_dialog.form.login.title": u"Login",
"ug.user_dialog.form.password.title": u"Password",
"ug.user_dialog.form.email.title": u"E-mail address",
"ug.user_dialog.form.firstname.title": u"First name",
"ug.user_dialog.form.lastname.title": u"Last name",
"ug.user_dialog.form.phone.title": u"Phone",




#######################################
# <<<<<< ProMail Localization >>>>>>> #
#######################################

#######################################
# <<<<<<<<<< Servers Page >>>>>>>>>>> #
#######################################
"promail.servers.title": u"Mail Servers",
"promail.servers.dialog.server.new.title": u"Create new settings",
"promail.servers.dialog.server.edit.title": u"Edit settings",
"promail.servers.ssltypes.auto": u"Auto",
"promail.servers.ssltypes.none": u"No encryption",
"promail.servers.ssltypes.starttls": u"STARTTLS",
"promail.servers.ssltypes.ssl": u"SSL",
"promail.servers.predefined.selectpredefined": u"Select from...",
"promail.servers.error.no_such_server": u"No such settings... Please, refresh page!",
"promail.servers.form.error.fill_name": u"Please, fill 'Name' field!",
"promail.servers.form.error.check_incoming": u"Please, check 'Incoming' settings!",
"promail.servers.form.error.check_outcoming": u"Please, check 'Outcoming' settings!",
"promail.servers.form.error.invalid_in_hostname": u"Invalid 'Incoming' server host name or IP address",
"promail.servers.form.error.invalid_out_hostname": u"Invalid 'Outcoming' server host name or IP address",
"promail.servers.form.success.server_created": u"Settings successfully saved!",
"promail.servers.form.success.servers_deleted": u"Items successfully deleted!",
"promail.servers.dialog.checktask.loading": u"Executing task. Please wait...",
"promail.servers.dialog.checktask.error.invalid_task": u"Can't find task in database. Please, try again...",
"promail.servers.dialog.checktask.success.task_done": u"Task done!",
"promail.servers.dialog.checktask.success.task_failed": u"Task failed!",
"promail.servers.dialog.checktask.success.task_failed.traceback": u"Detailed error information:",
"promail.servers.dialog.checktask.success.tests_failed": u"One or more test(s) failed! Please, check data in form or ask administrator...",
"promail.servers.dialog.checktask.success.tests_passed": u"All tests passed!",
"promail.servers.dialog.checktask.success.test_failed": u"failed",
"promail.servers.dialog.checktask.success.test_passed": u"pass",
"promail.servers.dialog.checktask.tasks.pop3_ping": u"Ping POP3 host",
"promail.servers.dialog.checktask.tasks.pop3_conn": u"Connect to POP3 server",
"promail.servers.dialog.checktask.tasks.smtp_ping": u"Ping SMTP host",
"promail.servers.dialog.checktask.tasks.smtp_conn": u"Connect to SMTP server",
"promail.servers.dialog.checktask.title": u"Test connection to server",
"promail.servers.dialog.disabled": u"Disable settings",
"promail.servers.dialog.incoming.title": u"Incoming",
"promail.servers.dialog.login.label": u"Login",
"promail.servers.dialog.passwd.label": u"Password",
"promail.servers.dialog.port.label": u"Port",
"promail.servers.dialog.server.label": u"Host",
"promail.servers.dialog.ssl.label": u"Encryption",
"promail.servers.dialog.outgoing.title": u"Outgoing",
"promail.servers.dialog.servername": u"Name",
"promail.servers.dialog.checkconn": u"Check connection",
"promail.servers.dialog.delete.title": u"Delete selected items?",
"promail.servers.table.attention": u"No Connection Settings found...",
"promail.servers.pagetitle": u"Connection Settings",
"promail.servers.table.header.name": u"Name",
"promail.servers.table.header.incoming": u"Incoming",
"promail.servers.table.header.outgoing": u"Outgoing",
"promail.servers.toolbar.buttons.add": u"Create new",
"promail.servers.toolbar.buttons.delete": u"Delete selected",
"promail.servers.table.cell.enabled": u"Enabled",
"promail.servers.table.cell.disabled": u"Disabled",
"promail.servers.table.cell.edit": u"Edit",

#######################################
# <<<<<<<<<< Home Page >>>>>>>>>>> #
#######################################

"promail.home.title": u"Home",
"promail.home.errors.mailbox.doesntexists": u"Mailbox not found! Page refreshed!",
"promail.home.errors.archive.doesntexists": u"Archive not found! Page refreshed!",
"promail.home.errors.label.doesntexists": u"Label not found! Page refreshed!",
"promail.home.errors.permission_denied": u"Access denied! You have no rights!",
"promail.home.dialogs.archiveinfo.create.title": u"New archive",
"promail.home.dialogs.archiveinfo.edit.title": u"Edit archive",
"promail.home.dialogs.archiveinfo.shared.label": u"Shared with",
"promail.home.dialogs.archiveinfo.shared.nobody": u"Shared with: nobody was selected",
"promail.home.dialogs.archiveinfo.archname.label": u"Archive name",
"promail.home.dialogs.archiveinfo.or_label": u"or",
"promail.home.dialogs.archiveinfo.rights.button": u"Rights management",
"promail.home.dialogs.archiveinfo.rights.sources.selectsource": u"Select rights sources",
"promail.home.dialogs.archiveinfo.rights.sources.mailbox": u"From mailbox",
"promail.home.dialogs.archiveinfo.rights.sources.selectlater": u"Setup later",
"promail.home.dialogs.archiveinfo.rights.failed": u"Can't copy rights because of source object doesn't exists or you have no access to it! Try do it manually via 'Edit' dialog.",
"promail.home.dialogs.archiveinfo.rights.success": u"Rights were successfully copied to archive!",
"promail.home.dialogs.archiveinfo.submit.error.access": u"You have no access to this mailbox!",
"promail.home.dialogs.archiveinfo.submit.error.archive": u"You have no access to this archive!",
"promail.home.dialogs.archiveinfo.submit.error.name": u"Fill 'Name' field",
"promail.home.dialogs.archiveinfo.submit.error.rights": u"Select rights sources!",
"promail.home.dialogs.archiveinfo.submit.success": u"Archive created!",
"promail.home.dialogs.archiveinfo.update.success": u"Archive updated!",
"promail.home.dialogs.archivedelete.title": u"Delete archive",
"promail.home.dialogs.archivedelete.checkbox.delete_archive": u"Delete archive from ProMail",
"promail.home.dialogs.archivedelete.checkbox.delete_mails": u"Delete all mails from archive",
"promail.home.dialogs.archivedelete.archive.success": u"Archive deleted!",
"promail.home.dialogs.archivedelete.mails.success": u"Mails were moved to trash",
"promail.home.dialogs.mailboxinfo.create.title": u"New mailbox",
"promail.home.dialogs.mailboxinfo.edit.title": u"Edit mailbox",
"promail.home.dialogs.mailboxinfo.servers.selectfrom": u"Select mail server",
"promail.home.dialogs.mailboxinfo.addinfo.cantshare": u"You can't share mailbox until create it...",
"promail.home.dialogs.mailboxinfo.addinfo.creator": u"Created by",
"promail.home.dialogs.mailboxinfo.addinfo.shared.users": u"Shared with",
"promail.home.dialogs.mailboxinfo.addinfo.shared.nobody": u"Shared with: nobody was selected",
"promail.home.dialogs.mailboxinfo.boxname.label": u"Mailbox name",
"promail.home.dialogs.mailboxinfo.rights": u"Rights management",
"promail.home.dialogs.mailboxinfo.color.label": u"Color",
"promail.home.dialogs.mailboxinfo.login.label": u"Login",
"promail.home.dialogs.mailboxinfo.passwd.label": u"Password",
"promail.home.dialogs.mailboxinfo.server.label": u"Connection settings",
"promail.home.dialogs.mailboxinfo.submit.label": u"Submit",
"promail.home.dialogs.mailboxinfo.cancel.label": u"Cancel",
"promail.home.dialogs.mailboxinfo.checkconn.label": u"Check connection",
"promail.home.dialogs.mailboxinfo.addinfo.label": u"Additional information",
"promail.home.dialogs.mailboxinfo.boxtype.label": u"Type",
"promail.home.dialogs.mailboxinfo.boxtype.fake": u"Virtual mailbox",
"promail.home.dialogs.mailboxinfo.submit.error.name": u"Fill 'Name' field",
"promail.home.dialogs.mailboxinfo.submit.error.color": u"Fill 'Color' field",
"promail.home.dialogs.mailboxinfo.submit.error.invalid_color": u"Invalid 'Color' value",
"promail.home.dialogs.mailboxinfo.submit.error.login": u"Fill 'Login' field",
"promail.home.dialogs.mailboxinfo.submit.error.passwd": u"Fill 'Password' field",
"promail.home.dialogs.mailboxinfo.submit.error.server": u"Select server",
"promail.home.dialogs.mailboxinfo.submit.error.mailbox": u"You have no access to this mailbox!",
"promail.home.dialogs.mailboxinfo.submit.success": u"Mailbox created!",
"promail.home.dialogs.mailboxinfo.update.success": u"Mailbox updated!",
"promail.home.dialogs.mailboxdelete.message.real": u"Are you sure want to delete this mailbox from ProMail?",
"promail.home.dialogs.mailboxdelete.message.fake": u"Are you sure want to remove this mailbox from your mailboxes list?",
"promail.home.dialogs.mailboxdelete.title": u"Delete mailbox",
"promail.home.dialogs.mailboxdelete.success": u"Mailbox was deleted!",
"promail.home.dialogs.checktask.loading": u"Executing task. Please wait...",
"promail.home.dialogs.checktask.error.invalid_task": u"Can't find task in database. Please, try again...",
"promail.home.dialogs.checktask.success.task_done": u"Task done!",
"promail.home.dialogs.checktask.success.task_failed": u"Task failed!",
"promail.home.dialogs.checktask.success.task_failed.traceback": u"Detailed error information:",
"promail.home.dialogs.checktask.success.tests_failed": u"One or more test(s) failed! Please, check data in form or ask administrator...",
"promail.home.dialogs.checktask.success.tests_passed": u"All tests passed!",
"promail.home.dialogs.checktask.success.test_failed": u"failed",
"promail.home.dialogs.checktask.success.test_passed": u"pass",
"promail.home.dialogs.checktask.tasks.pop3_ping": u"Ping POP3 host",
"promail.home.dialogs.checktask.tasks.pop3_auth": u"Connect and login to POP3 server",
"promail.home.dialogs.checktask.tasks.smtp_ping": u"Ping SMTP host",
"promail.home.dialogs.checktask.tasks.smtp_auth": u"Connect and login to SMTP server",
"promail.home.dialogs.checktask.title.check_account_access": u"Check account connection",
"promail.home.sidebar.mailboxes.select_mailbox": u"Select mailbox",
"promail.home.sidebar.mailboxes.no_selected_mailbox": u"No selected mailbox",
"promail.home.sidebar.mailboxes.virtual_mailbox": u"It is virtual mailbox",
"promail.home.sidebar.mailboxes.options.edit": u"Edit",
"promail.home.sidebar.mailboxes.options.rules": u"Rights",
"promail.home.sidebar.mailboxes.options.delete": u"Delete",
"promail.home.sidebar.mailboxes.unread.title": u"Unread Mailboxes",
"promail.home.sidebar.mailboxes.unread.message.no_mails": u"You have no unread mails",
"promail.home.sidebar.mailboxes.unread.message.no_mailboxes": u"You have no mailboxes",
"promail.home.sidebar.mailboxes.create_new": u"Create new",
"promail.home.sidebar.archives.no_available": u"No available archives",
"promail.home.sidebar.archives.create_new": u"Create new",
"promail.home.sidebar.archives.inbox": u"Inbox",
"promail.home.sidebar.archives.outbox": u"Outbox",
"promail.home.sidebar.archives.draft": u"Draft",
"promail.home.sidebar.archives.deleted": u"Trash",
"promail.home.dialogs.rightsmgmt.mailbox.title": u"Mailbox Rights Management",
"promail.home.dialogs.rightsmgmt.mailbox.access.read": u"Read",
"promail.home.dialogs.rightsmgmt.mailbox.access.read_write": u"Read/Write",
"promail.home.dialogs.rightsmgmt.mailbox.access.read_write_delete": u"Read/Write/Delete",
"promail.home.dialogs.rightsmgmt.mailbox.access.owner": u"Owner",
"promail.home.dialogs.rightsmgmt.archive.title": u"Archive Rights Management",
"promail.home.dialogs.rightsmgmt.archive.access.read": u"Read",
"promail.home.dialogs.rightsmgmt.archive.access.read_write": u"Read/Write",
"promail.home.dialogs.rightsmgmt.archive.access.read_write_delete": u"Read/Write/Delete",
"promail.home.dialogs.rightsmgmt.label.title": u"Label Rights Management",
"promail.home.dialogs.rightsmgmt.label.access.shared": u"Shared",
"promail.home.dialogs.rightsmgmt.label.access.owner": u"Owner",
"promail.home.dialogs.rightsmgmt.select": u"-- Select access --",
"promail.home.dialogs.rightsmgmt.inherited.label": u"Show inherited rules",
"promail.home.dialogs.rightsmgmt.rights.message": u"Access rights are not specified",
"promail.home.dialogs.rightsmgmt.clear": u"Clear",
"promail.home.dialogs.rightsmgmt.apply": u"Apply",
"promail.home.dialogs.rightsmgmt.rights.label": u"Rights",
"promail.home.dialogs.rightsmgmt.query.placeholder": u"Enter search query",
"promail.home.dialogs.rightsmgmt.subjects.label": u"Search user and groups",
"promail.home.dialogs.rightsmgmt.submit.invalid_request": u"Please select user(s) and rights before submit!",
"promail.home.dialogs.rightsmgmt.submit.invalid_subject": u"Can't find subject! Data refreshed...",
"promail.home.topbar.labels.popup.query.label": u"Search",
"promail.home.topbar.labels.popup.buttons.create": u"Create",
"promail.home.topbar.labels.popup.buttons.manage": u"Manage",
"promail.home.topbar.labels.popup.list.new": u"create",
"promail.home.topbar.labels.popup.message": u"No labels",
"promail.home.dialogs.labelinfo.rights": u"Rights management",
"promail.home.dialogs.labelinfo.color.label": u"Color",
"promail.home.dialogs.labelinfo.shortcut.label": u"Label name",
"promail.home.dialogs.labelinfo.shared.label": u"Shared with",
"promail.home.dialogs.labelinfo.shared.nobody": u"Shared with: nobody was selected",
"promail.home.dialogs.labelinfo.new.title": u"New label",
"promail.home.dialogs.labelinfo.edit.title": u"Edit label",
"promail.home.dialogs.labelinfo.submit.error.label": u"You have no access to this label!",
"promail.home.dialogs.labelinfo.submit.error.name": u"Fill 'Name' field",
"promail.home.dialogs.labelinfo.submit.error.color": u"Fill 'Color' field",
"promail.home.dialogs.labelinfo.submit.error.invalid_color": u"Invalid 'Color' value",
"promail.home.dialogs.labelinfo.submit.success": u"Label created!",
"promail.home.dialogs.labelinfo.update.success": u"Label updated!",
"promail.home.dialogs.labelsmgmt": u"Labels management",
"promail.home.dialogs.labelsmgmt.message": u"You have no created or shared lables",
"promail.home.dialogs.labeldelete.message.fake": u"Are you sure want to delete this label from your list?",
"promail.home.dialogs.labeldelete.message.real": u"Are you sure want to delete this label from ProMail?",
"promail.home.dialogs.labeldelete.title": u"Delete label",
"promail.home.dialogs.labeldelete.success": u"Label was deleted!",

}
]]>
		</Library>
		<Library Name="ext_signals">
<![CDATA[""" A signal/slot implementation

File:    signal.py
Author:  Thiago Marcos P. Santos
Author:  Christopher S. Case
Author:  David H. Bronke
Created: August 28, 2008
Updated: December 12, 2011
License: MIT

"""


import inspect
from weakref import WeakSet, WeakKeyDictionary


class Signal(object):
    def __init__(self):
        self._functions = WeakSet()
        self._methods = WeakKeyDictionary()

    def __call__(self, *args, **kargs):
        # Call handler functions
        for func in self._functions:
            func(*args, **kargs)

        # Call handler methods
        for obj, funcs in self._methods.items():
            for func in funcs:
                func(obj, *args, **kargs)

    def connect(self, slot):
        if inspect.ismethod(slot):
            if slot.__self__ not in self._methods:
                self._methods[slot.__self__] = set()

            self._methods[slot.__self__].add(slot.__func__)

        else:
            self._functions.add(slot)

    def disconnect(self, slot):
        if inspect.ismethod(slot):
            if slot.__self__ in self._methods:
                self._methods[slot.__self__].remove(slot.__func__)
        else:
            if slot in self._functions:
                self._functions.remove(slot)

    def clear(self):
        self._functions.clear()
        self._methods.clear()
]]>
		</Library>
		<Library Name="ProSuiteClearPage">
<![CDATA["""
"""

from prosuite_app_cleaner import ApplicationCleaner
from prosuite_web import ProSuiteBasicPage, administrator_only, error_handler,\
                         authenticated, callback


class ProSuiteClearPage(ProSuiteBasicPage):

    @error_handler
    @authenticated
    @administrator_only
    def live(self, action="onload"):
        self._live(action)

    def onload(self, page_controller):
        """
        """
        pass

    @callback
    def submit_changes(self, page_controller):
        """
        """
        passwd = self.get_argument("passwd", "")
        if not passwd:
            self.show_error_growl(
                self.localization["clear.empty_passwd_error.text"],
                self.localization["clear.empty_passwd_error.title"]
            )
            return

        if not self.current_user.user.check_password(passwd):
            self.show_error_growl(
                self.localization["clear.wrong_passwd_error.text"],
                self.localization["clear.wrong_passwd_error.title"]
            )
            return

        app_cleaner = ApplicationCleaner()
        app_cleaner.clean_main_db = self.get_argument("clear_main_db", False)
        app_cleaner.clean_plugins_db = self.get_argument("clear_plugins_db", False)
        app_cleaner.clean_storage = self.get_argument("clear_storage", False)
        app_cleaner.clean_config = self.get_argument("clear_config", False)
        app_cleaner.clean_vee_engine = self.get_argument("clear_vee_engine", False)
        app_cleaner.submit()

        self.vdom_objects["clear.form.passwd"].action("setValue", [""])
        self.show_info_growl(
                self.localization["clear.change_applied.text"],
                self.localization["clear.change_applied.title"]
        )


    def get_page_title(self):
        return self.app_settings.localization["page_title"].format(
            app_name=self.app_settings.info["name"],
            page_name=self.localization["clear.title"]
        )

    def get_localization_data(self):
        return {
            self.vdom_objects["clear.options_title"]: "clear.options.title",
            self.vdom_objects["clear.password_title"]: "clear.password.title",
            self.vdom_objects["clear.form.submit"]: "clear.form.submt",
            self.vdom_objects["clear.form.storage"]: "clear.form.storage",
            self.vdom_objects["clear.form.app_db"]: "clear.form.app_db",
            self.vdom_objects["clear.form.plugin_db"]: "clear.form.plugin_db",
            self.vdom_objects["clear.form.vee_engine"]: "clear.form.vee_engine",
            self.vdom_objects["clear.form.reset_config"]: "clear.form.reset_config"
        }]]>
		</Library>
		<Library Name="vdom_remote_api">
<![CDATA[# version:	5

import SOAPpy, md5, re, sys
from SOAPpy import WSDL
from soap.soaputils import VDOM_session_protector
import threading

call_counter = {}

def reset_counter():
	global call_counter
	call_counter = {}


session_id_re = re.compile("\<SessionId\>\<\!\[CDATA\[(\S+)\]\]\>\<\/SessionId\>")
session_key_re = re.compile("\<SessionKey\>\<\!\[CDATA\[(\S+)\]\]\>\<\/SessionKey\>")
hash_string_re = re.compile("\<HashString\>\<\!\[CDATA\[(\S+)\]\]\>\<\/HashString\>")
key_re = re.compile("\<Key\>(\S+)_\d+\<\/Key\>")


class VDOMServiceSingleThread:
	def __init__(self, url, login, md5hexpass, application_id):
		self._url 			= url
		self._login 			= login
		self._md5hexpass 		= md5hexpass
		self._application_id 		= application_id

		self._request_num 		= 0
		self._skey 			= None
		self._sid 			= None
		self._skey 			= None

		self._server 	= SOAPpy.SOAPProxy(url + '/SOAP', namespace="http://services.vdom.net/VDOMServices")
		self._protector = None



	@classmethod
	def connect(self, url, login, md5_hexpass, application_id):
		service = VDOMService(url, login, md5_hexpass, application_id)
		return service.open_session()



	def open_session(self):
		login_result = self._server.open_session(self._login, self._md5hexpass)

		self._request_num = 0

		self._sid = str(session_id_re.search(login_result, 1).group(1))
		skey = str(session_key_re.search(login_result, 1).group(1))
		hash_string = str(hash_string_re.search(login_result, 1).group(1))

		self._protector = VDOM_session_protector(hash_string)
		self._skey = self._protector.next_session_key(skey)

		return self


	def call(self, container_id, action_name, xml_data):
		"""
		"""
		xml_param = "<Arguments><CallType>server_action</CallType></Arguments>"
		global call_counter
		if action_name in call_counter:
			call_counter[ action_name ] += 1
		else:
			call_counter[ action_name ] = 1
		ret = None
		try:
			ret = self._server.remote_call(self._sid,"%s_%i"%(self._skey,self._request_num),self._application_id, container_id, action_name, xml_param, xml_data)
			server_skey = str(key_re.search(ret, 1).group(1))
		except Exception, ex:
			if ret:
				raise VDOMServiceCallError( str(ret) )
			else:
				raise VDOMServiceCallError( ex.message  )

		self._skey = self._protector.next_session_key(self._skey)
		self._request_num += 1

		return ret.replace("\n<Key>%s_%s</Key>" % (server_skey, str(self._request_num-1)), "")



class VDOMServiceCallError(Exception):
	pass

class VDOMServiceMultiThread(VDOMServiceSingleThread):
	def __init__(self, url, login, md5hexpass, application_id):
		VDOMServiceSingleThread.__init__(self, url, login, md5hexpass, application_id)

		self.__thread = threading.local()


	def api(self):
		#raise Exception(str(self.__thread).replace("<", "&lt"))
		#raise Exception (self._url)
		if getattr( self.__thread, "api", None ) is None:
			self.__thread.api = VDOMServiceSingleThread(self._url, self._login, self._md5hexpass, self._application_id)
			self.__thread.api.open_session()
		return self.__thread.api

	def open_session( self ):
		return self.api().open_session()

	def call( self, container_id, action_name, xml_data ):
		return self.api().call( container_id, action_name, xml_data )

VDOMService = VDOMServiceMultiThread
VDOM_service = VDOMServiceMultiThread


# ------------------------------------------------------------------------------
#			Example of usage
# ------------------------------------------------------------------------------

#	service = VDOMService.connect( 'http://remote_server', login, md5Pass, app_id )
#	ret1 = service.call( container_id, action_name_1, xml_with_data_1 )
#	ret2 = service.call( container_id, action_name_2, xml_with_data_2 )






]]>
		</Library>
		<Library Name="promail_eac_client">
<![CDATA[
		]]>
		</Library>
		<Library Name="VEE_time_trigger">
<![CDATA[from utils.threads import VDOM_thread


appId = application.id

class engineTimeTrigger( VDOM_thread ):
	# default wait timeout
	DEFAULT_TIMEOUT = 10

	def __init__( self ):
		VDOM_thread.__init__( self )


	def work( self ):
		import VEE_core
#		VEE_core.engine.engine_logger.debug("Engine thread work...")
		try:
			#debug("------------>>>> Trying to start engine: ")
			application.set_app_id( appId )
			self.save_thread()
			return VEE_core.engine.process_queue()
		except Exception as e:
#			from vdom_trace import Trace
#			VEE_core.engine.log("@@@@@@@@@Error while vscript execution." )
#			VEE_core.engine.log( Trace.exception_trace() )

			try:
				VEE_core.engine.info( str( e ) )
			except: pass
			#debug("------------>>>> Exception: %s"%e)
			try:
				return engineTimeTrigger.DEFAULT_TIMEOUT
			except:
				self.stop()


	def save_thread( self ):
		try:
			import VEE_core
			#VEE_core.VEE_core = self
			VEE_core.queue_thread = self
		except:
			pass
]]>
		</Library>
		<Library Name="proadmin_db_group">
<![CDATA[from proadmin_subject import Group
import uuid


_pack_scheme = ['guid', 'name']

class DbGroup( Group ):

	@classmethod
	def get_groups( self, scheme, name = None, guid = None ):
		global _pack_scheme

		filter_dict = {}
		if name: filter_dict["name"] = name
		if guid: filter_dict["guid"] = guid

		raw_result = scheme.connection.select_cmd('proadmin_group', _pack_scheme, filter_dict)
		return Group.get_groups( scheme, name, guid ) + [DbGroup(scheme).init_from_db_tuple(db_tuple) for db_tuple in raw_result]



	@classmethod
	def get_user_groups( self, scheme, user ):
		raw_result = scheme.connection.fetch_all(
			'''SELECT %s 
			FROM proadmin_group 
			JOIN user_in_group ON group_guid = guid
			WHERE user_guid = ? ''' % (', '.join(_pack_scheme),), [user.guid])

		return [DbGroup(scheme).init_from_db_tuple(db_tuple) for db_tuple in raw_result]



	def delete(self):
		self.force_delete()
	
	def force_delete( self, force=True ):
		self.connection.delete_cmd( 'user_in_group', {"group_guid": self.guid})
		self.connection.delete_cmd( 'rule', {"subject_guid": self.guid})
		self.connection.delete_cmd( 'proadmin_group', {"guid": self.guid})


	def __init__( self, scheme ):
		Group.__init__( self, scheme )
		self.connection = scheme.connection

		self._guid = str(uuid.uuid4())
		self.user_guid_list = None


	def init_from_db_tuple(self, db_tuple):
		global _pack_scheme
		for k, v in zip(_pack_scheme, db_tuple):
			setattr(self, k, v)
		return self



	def _packed_list(self, pscheme = None):
		global _pack_scheme
		if not pscheme: pscheme = _pack_scheme
		return [getattr(self, attr) for attr in pscheme]

	def _packed_dict(self, pscheme = None):
		global _pack_scheme
		if not pscheme: pscheme = _pack_scheme
		return dict([(attr, getattr(self, attr)) for attr in pscheme])
		
	
	def save( self ):
		global _pack_scheme

		exists = len(self.connection.select_cmd('proadmin_group', _pack_scheme, {'guid': self.guid})) > 0

		if exists:
			self.connection.update_cmd('proadmin_group', self._packed_dict(), {'guid': self.guid} )
		else:
			self.connection.insert_cmd('proadmin_group', _pack_scheme, self._packed_list())


		if self.user_guid_list is not None:
			self.connection.delete_cmd( 'user_in_group', {'group_guid': self.guid} )
			for user_guid in self.user_guid_list:
				self.connection.insert_cmd( 'user_in_group', ['user_guid', 'group_guid'], (user_guid, self.guid) )


		return self



	def add_user(self, user):
		if self.user_guid_list is None: self.get_users()
		if user.guid not in self.user_guid_list:
			self.user_guid_list.append(user.guid)
			self.save()
		
	def remove_user(self, user):
		if self.user_guid_list is None: self.get_users()
		if user.guid in self.user_guid_list:
			self.user_guid_list.remove(user.guid)
			self.save()

	def get_users( self ):
		from proadmin_db_user import DbUser
		myusers = DbUser.get_in_group(self.scheme, self)
		self.user_guid_list = [user.guid for user in myusers]
		return myusers



	def __repr__(self):
		return str(self.name)
]]>
		</Library>
		<Library Name="widget_macro">
<![CDATA[import json
import cgi
import localization

class WidgetMacros:
	def __init__(self):
		self.__datatable = None
		self.__macros_list = None

	def set_data(self, data):
		macros = []
		for m in data:
			if m.name == "config":
				macros.append({ "id" : m.id,
					"Picture" : "<img src='/get_image?id="+m.macros_picture+"'/>" if m.macros_picture else "<img src='/b41299d0-b0bc-4d31-a320-ed5eb62568ca.png' />",
					"Macros_info" : "<h1>" + m.name + "</h1><p class='clearfix'></p><p>" + m.description + "</p><p></p>",
					"Edit_info" : "<div class='disabled_button'><a href=''><img src='/910e3e46-f9cf-4aa7-9147-04ec354078c8.res'/>Edit info</a></div>",
					"Edit_source" : "<a href=''><img src='/19a4bd25-b567-4c32-b8c8-919ad382f99b.res'/>Edit source</a>",
					"Delete" : "<a href=''>Delete</a>"

				   })
			else:
				macros.append({ "id" : m.id,
					"Picture" : "<img src='/get_image?id="+m.macros_picture+"'/>" if m.macros_picture else "<img src='/b41299d0-b0bc-4d31-a320-ed5eb62568ca.png' />",
					"Macros_info" : "<h1>" + m.name + "</h1><p class='clearfix'></p><p>" + m.description + "</p><p></p>",
					"Edit_info" : "<a href=''><img src='/910e3e46-f9cf-4aa7-9147-04ec354078c8.res'/>Edit info</a>",
					"Edit_source" : "<a href=''><img src='/19a4bd25-b567-4c32-b8c8-919ad382f99b.res'/>Edit source</a>",
					"Delete" : "<a href=''>Delete</a>"

				   })


		self.__macros_list = json.dumps(macros)

	def render(self, datatable):
		self.__datatable = datatable
		self.__datatable.data = self.__macros_list
]]>
		</Library>
		<Library Name="api_helper">
<![CDATA[from api_error_code import error_code


def api_response_pair(success, value):
	return { "success" if success else "error": value}



class APICallFailedException( Exception ):
	def __init__(self, message, additional_info = None ):
		Exception.__init__( self, message )
		self.info = additional_info



#used for API methods
def _write_response( data ):
	import json
	session[ 'response' ] = json.dumps( data )


def write_response( data = None ):
	_write_response( [ 'success', data ] if data is not None else [ 'success' ] )


def write_error( error_type, error_msg ):
	_write_response( [ 'error', error_type, error_msg ] )


def authenticated( method ):
	def wrapper( *args, **kwargs ):
		import ProAdmin
		if ProAdmin.current_user() is None:
			write_error( *error_code[ 'errNotLoggedIn' ] )
		else:
			return method()
	return wrapper


def license_confirmed( method ):
	def wrapper( *args, **kwargs ):
		from class_license import License
		if not License().confirmed:
			write_error( *error_code[ 'errNoLicense' ] )
		else:
			return method()
	return wrapper


def error_handler( method ):
	def wrapper( *args, **kwargs ):
		try:
			return method()
		except APICallFailedException, cfex:
			err = error_code[ cfex.message ]
			write_error( err[ 0 ], err[ 1 ] + ( ( ": " + cfex.info ) if cfex.info else "" )  )

		except:
			from vdom_trace import Trace
			write_error( error_code[ 'errScriptError' ][0], Trace.exception_trace() )

	return wrapper


def parse_json( method ):
	def wrapper( *args, **kwargs ):
		import json
		try: data = json.loads( request.arguments.get( 'xml_data' ) )
		except Exception, ex: raise APICallFailedException( "errBadJSONFormat" )
		return method( data, *args, **kwargs )
	return wrapper
]]>
		</Library>
	</Libraries>
	<Resources>
		<Resource ID="255375a9-4979-4785-a942-de2d233f03df" Type="png" Name="rs-check.png">iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAYAAABy6+R8AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAPBJREFUeNpi/P//PwOpgIVYhSU7ZA2A1HwgLmQiRkPxVpmC/3//nwfiB0B8gRGf8wo3SgkAqX4gTgDiC0Ds2O//7ANO5+WvkQBp2A/EBjANE0NefADJMWYvFQUJ1gNx45SoVyBJhpxlYsgaQAodYXJgTZnzhdYD6QCYi4B4AZIGEEiclvB2AbIrGNNmCgigKQKZLABlb5iZ9j4Q3elMQMEP/379cwTiC0DMAMQCUBoknojNv+Agn53z8cPf338dgfgCEDNAcSNIHJsmlCBP6OaGOVVgQelXRVwhixK5QIUf/v/95wjEifgim5GctAcQYAD4jH114USynQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="3f8f2000-c4ba-46c5-8db6-2aad7f9d8324" Type="png" Name="top-bar-full.png">iVBORw0KGgoAAAANSUhEUgAAAD4AAACECAIAAABH8g8AAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAANlJREFUeNrs2zsKhFAMQFEd3P/+rP1/ntoINuI0s4UBHzl3BacIIU3K+76LPCuP40BHD0Hf9x0dHR39T/Rt29DR0d9NTymho4egr+uKjh6CviwLOnoI+jzP6Ogh6NM0oaOHoI/jiI4egj4MAzp6CHrf9+joIehd16Gjh6C3bYuOHoLeNA06Ovqrq57nyZT+KbINHT0K3YZBDzPr13XlesNk/Jd0nic6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OvqPXtd1pvSvAAMAGWJczxVikiQAAAAASUVORK5CYII=</Resource>
		<Resource ID="2dd2e369-4aed-440c-afd6-4b455bdbdb1a" Type="png" Name="acl-cancel.png">iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkRCMjRFNUM3RkJBOTExRTA5QTNCQUZDMzM4RkQyMTQ1IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkRCMjRFNUM4RkJBOTExRTA5QTNCQUZDMzM4RkQyMTQ1Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6REIyNEU1QzVGQkE5MTFFMDlBM0JBRkMzMzhGRDIxNDUiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6REIyNEU1QzZGQkE5MTFFMDlBM0JBRkMzMzhGRDIxNDUiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4LrWgWAAAAhklEQVR42oyQUQ3AIAxE22Ym8IEN1IAMFGADGyjAADIY7VbC+Fi4hORyvPQK2HsH51yHRwhfSZ5zRmLTWgPv/bxQiDO+Y5FOCiGssECcaQtytbV2TokxilmhUgpcbIwxs6/WCnu2Vsu08ShIKclhv+5MO/TW4Q7rjr/fM3ZEAU9EcKhbgAEAB5xAgXFzcJgAAAAASUVORK5CYII=</Resource>
		<Resource ID="89057ac9-124c-43de-8938-d92b6686bc53" Type="png" Name="plugins.png">iVBORw0KGgoAAAANSUhEUgAAAMgAAABQCAIAAADTD63nAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzBFQTEwQzZBRjk4MTFFMTlBN0Q4QjZDRjhCRDMxRkIiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzBFQTEwQzVBRjk4MTFFMTlBN0Q4QjZDRjhCRDMxRkIiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmRpZDowQTA1NDkyNzk4QUZFMTExQTcxN0UwQUFBQkZFN0NGNiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDowQTA1NDkyNzk4QUZFMTExQTcxN0UwQUFBQkZFN0NGNiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PlKOGQQAAAquSURBVHja7J15bBzVHcffe/Nmdte7a+9hr+11IAmQKElDoKUtJSWmJRRKaAiqSClEICJBaUVRE5XSAxVoqZBQaQQNtBSoBLRSORIQUBqgqJSGkhSUtCG3c2HI5WN3vd5zZt7RGe+a+Nhdr48/8Ozvq5E8fvPe2Nr56Pv7vd+8mcVSSgQCTbUIfAQgAAsEYIEALBAIwAIBWCAACwQCsEDTQBQKpCBwLBCABQKwQCAACwRggQAsEAjAAgFYIAALBAKwQJ92wS0dEDgWCMACAVggEIAFArBAABYINMWi8BFMMwkhjnTjxnrcUIcMxrYdZi+/z17bgRXF8KATeme38SEmREEqQqULSVarQMiDURiJsGCWtfDq/jJuaNCWXeq+7ltkRtvYnTnncLGmi4yn3zY3bhVH4zjoVebPUK9ZTC+cZ7WbG7bq925UsJpkPR/rHSmelEgqWClNptVf1ZoFn8lyVg82zv8B+3y+h3+jtn95jG6MMbhg00Lmc1v0+14Y0aiuvMB15zetHb61w1jzJ5nXe1mXxVZOpFWsjbzY1kkw5oQEiNLK9RA3TIQnUB/HHrfvyT/Qz38OcqxpL5nIGA++WoK254u0KV+aS9deTrEWUBuDtJFilY8yI8vGBMYqxlGWC06UKvs8uXzmttulrgNY017srV0yq5dzMva37bZ7XbNYLGhRkdbiOqOBhrlkcniaZZHkEXwG072Cy4lSVYyn3T353z0OYE178f8cqJR7PfI6YnaurKw8X0rpwb4wbfGRgM2WFAMx0LYrREgdUUKSTyC1KvFHn39RZnMA1jSfC+49VunosTh7Z589yb9wntQIkjxEWyLaaQqiAnE8EAFNQn0Eh7EoO10c77/U1c13fABgTfMcK5Yew9I222DhkA/PbhJIaNgdVJqCtEnBlEtuuZakquVVYTNfKDdMTYDesx/AmuZgZfSBiFZ2Y2/uHLiemLQGrahnBcE6xR/VztSIL4uE1SPKrGkgQxiLiucZ18b3lgULCqTTQ+77V0mzUl6E3cXigjyjlW3uMKWkRHUroYiMctNUeCLCmBthE2M0dQvwxNHOsmDBQr9pIeXSRWO7WuFSzvCaMmnN+aw5oMJRq+51oVC/amDCuMRTe7X5yYTIZrHHA45VAwhGqJJ6TypMcpeWqvf1Ua3eq7WdJxViSDHFNpKjIp5R2gCsWgCrrRmRDDbz7ozX3efCjLmSJBCIqLsesi0ta0wu+InUigdk3hy0LIRiWdQGOVYNCDc14YYAPam7sn7NSquslIpn3D3HuZSYEuRzTW4SgZRsHokhvtfTD8l7bYDldiuRKD0UJ7rXLrbbuTrBqbSMrtKjbczrtTwMTSYiimHFCtHZowBYtRELFVo/S8tlKGeDFSti7aj9Ce6pY6pmkyanqpKF5Mk+cKxakRZqU8092LYrXHAxe5NMTcS4x2MGQpZjYTHR5VIjHOtYHMCqFdFQAA/eIhyUZVpY0dOu3etdCp5MjpX/4dP87T2nGrrKOBbUsRyYZgV8pW7bDPjWlt0yEpSqKu1KqRzNzWBHbG+juerqE4e6hrX0ZUU6h71ucKwaUHOwnJfRpWsRUbNtp5tBOyCiSduKjKVQPINGgQX3Ch0o2eArf5AgwbR4TEmnpaJY88XJ5nM3XIQb/ZBj1YaCFcFCnGb61IRmTRIlVey70hP1Le22y+nqr0DyXktguVSkm6OPsCN/liG/veYPobpRiZTkPH/Vr8dcolOkau036PVLBoZJM96nhoNDZ44QCh0aCv2eMoaFkcGQeWqTjJ/a9h1HnqpK8+qtlxWpQuj4j9ZtX35t1yub9BNdwjAyezt23bwGG4YBV8JpEpIuvAkfLLXo1Mqyi3mVPW1kvkA+0sx9fsxMuz6QN4fdrilH1Zor1BvaC/s9dz66f+OTnOsEK9Tv1yJN2UNHIBQ61bLk6GlaUZn8kF+4ks5TQXjEyrMIrq4cryyZX6BK9mX673mq8/UXciLrsh81wyyVtrZijgV1LAfK8qR6T1X9JNfivUKlejhiF6+qeHpZ+fq5BWbyv9pw+I2XUiymYRUjDMl7bXhWY6BkIcE49izyaCOmgRRjqhB7sdbxhL5qfeGBn7JhdvCus9k+K/1yn217lj2VmnyCnKiwv3R7Q53NDRNDNm5zxu118fYrIU4PVz4xf/Zdeajb2vEvb2/4wjkKViWUG2rIsSKli++ab3mpZiaJmmuZYYTDGBcelCibIMlkVj7yD7zu29Z+/fnnJd//b+koC9fAmWpqGE9vjAVzxWNqZqAcjyuU4yX2eZRzZhV/Mcxy/cCxnOpYgfF0t7ImQfJJLe7mbrdQNSxK3KIm55+l3XQJbgvJ5vpCS+zv/yxJ6Vm/+AmA5VCND6zCTFKqyYSgNNcatXwLm+ZQ6yJzWl0PrUbqqeWiB352b+5Iice/5t5/d2TFMgCrtnKsMXxLmloywXx+019vszVkTR9d9tkCVZlDh9K79nc982L/9h2jTxG6uN2iCkKhc+Vz2zXSYeXQ6nzL1LXebqFS5vXjoetqNLXwc/+P78ns3De6cFXQad+9sQgiFEid6Vj+OtkcxIdPjBcsuy6VSapJn9Tckir2QuQCISYroEI0VzmqtJZI3dwzi93gGjhTfo8M109oJCFSaLFuNdGLMJFkJCGYlGXGM/M04nZDucHRsvLuxoaJjbSSLcLzWiJO0yn7tVqkWkiEbgy1PpBDo+HpkQlTaT9ElstqPV3EMOzKlp3ZF1HRu3rKDcsePMyS/QCW08FqDU1itAUGo6kk7e/DzLTi3yelh1l3fD+y4nKslHhMlacziXe2AlhOVzQ8ufEKFtwV61HSaUEpe3dfobXpkovn3H/PomeecDWXcMSPH/mjHFgiAWA517FmNk/uBDYbip529/bSTJpvPWiu+yv6KIZMmxvf2QvO/svjrmjLiDG5wx923H4XgjqWw3OsOhfK6mNk3F89V1y9RHo9ZRZjCYyp6vEQRZOZvOhJkiZ/oVJqUdV89ZUf/faxEQN6N70p8jqA5VywZjXLGU2442glqr44z9x0XzXJfElQXG3Rkv3jb20GsJxccZCLZlcGS156XnFPNyt620CNlBBpZfFC4kBdoTX9we5yAwAsJ0ss/gzZsLkSWIM1KuXhl+gDz5XvyCWSRqjVaGwkFy1Uf7nSTqc+Otr72ptlwYJbOg4Wv/ICesfjFZYay5mRAgB4bydKVHicUGIktP5Okc7Lle2FIR///gkzlqiU+YMcm2a1NfKV7WUPa9TK3Ith8/DJsbIsgrmu9fehA8WlMtEbr6ubPxfAqlGxu65H9XWlD33vykIRFR/tIdsPVJHB2+V49Zk35Kv2V/d4585Z+OTD3kULSvfO5XLw6Ts8id/TqX7nQbKtY1iUXLXUfPQHiNqFA/rzp+gDz1d3MhNhakSicv2tcrntdpLzPbesTf77vchVV4SWLlEbw0ZPrHvDywBWjRgXV17ZircdxOmsDDeIxQvE0sEgmEhpC2/B8VSV84GBGaKbzZydWn+d52v2pJL19yf/tzM8/KsxAazanjb2p1Mrf6rv2C+rfZ2R/Y1PRAg/Deouqt232nPtZRAKQZ9k9ZLn8/F/bTm67rHUsWMSoepfkyWwBaGcHSez+tyMusjdq9HNy4a8EqKo/wswAGmZeYrKjZ/VAAAAAElFTkSuQmCC</Resource>
		<Resource ID="ae10a574-929b-4bcc-9f09-cc356a65e12c" Type="png" Name="vdom-logo.png">iVBORw0KGgoAAAANSUhEUgAAAHQAAAAfCAIAAAC5y37pAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkU1RDNDMjZFQ0UyMTExRTA5MzE5QkUwREMyMTg0ODYyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkU1RDNDMjZGQ0UyMTExRTA5MzE5QkUwREMyMTg0ODYyIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RTVEM0MyNkNDRTIxMTFFMDkzMTlCRTBEQzIxODQ4NjIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RTVEM0MyNkRDRTIxMTFFMDkzMTlCRTBEQzIxODQ4NjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6n6O8XAAAK4klEQVR42uyZeVDV1xXHBcEnIqDggoIiKArqCGI1YAlqzdRJp3VpqknTOiA1M+l0GrWN03QmrdQ66dTaKLWNtUvQdNpM4zRK0VZnyhiVTZAdpSDKKo8dHvJAHls/73fo9Ze3IH80f/WdcZ73d+9Zv+fc87v3h9vY2NgUF3025O6CwAWuC1wXfZo85L+UlBR+N2vkkK+kpOTSpUsyjo6Orqur6+npmVj1wYMHZ82apR4/0WhiEfiTkpJESlxSZPPozLclS5bgG8zVx95VDL5rVgYkbPSc5etQvLf0bufN3CFTb+BXtvlGrWr5+9XesnteIcEBCXEzQhbB0F/f2PSnC55+vqHf3T+x/1Y9PaaB+kbGwXtfnjKmEXgJamOOqLu7Oy0t7YhGDEBNdF2/fl3Pc/HiRX1u0MakLO3cuVPNEz9KiouLWaqtrWXMjFpFA/OosvGbGYe+oeHkyZPiGwNU6aOwdJuM6f/MfvHl9NlLy3/0jl7QYuqtPPHrf4SuZRUe/ZK5rqHqp79EpOiNt2BjpmT/oQxDEL9jTgiRgt3fevir31d8/0jOCy8VfC2Zf+Pg4pbEgK/2yIKmFDVlpZCFHJrR44taxCVzQkDgMHl6HnAUK/rCx7RDQeaVb5IkZO05c98++vHWL9//OF0em3PzM3a+krF9T1thsTO86q5cQyTz2wcsfWYe6z/828VlMXfePmbDZnncd+9smjUN3SYeBVbB113ViwzU/lJ06tQp9p2MDxw4oLa2vhj1pPIEpaenHzp0SIlTpA53NyCiWb/NxQomVFHbOya+0QRkvGnTJhnv2LHDhm24v3/UbYpXUODsiBU8thWVlJ75nU9YyLYP0+bGRDvb4yFf+uKS7S9azObm7BweF7/y1Ziz7xqrq0rP/lHxtBYW3/3gzwtf2Lw29WfSdoL37u7X2kJAQuzT6pMwZFcqAo7N/yUKirrWg+gs53rU1BikxpwTHUbfGVQy9BvFpjPggPINcfaE/X4aNpu7bmWVHf5B1en3+hoaZKboO2/kJ+83/btq7FnUdCkdzsqf/0LNtGTl5Ca/xkx/fX316d8Ys3IcCkoVP3VFhSGN0t57wVqFKk3TYRN0WAjO+O3BVdWKKqQcdgagVL6JZkmJSuFIX1/nubTmn6R0XrgwYjYrQdPljNrdLz06/ObYJAgNMPOrn+y5cvnhnt21yUmWtraJxZ8exRITE/Ub8Ny5c2xq1Q3E9Rs3bqiS1HdJPTncv/J+m+A9q2xBcg5ZohFS9p0B35QnVIBolk5Ccxg/Y3p7+ycm8W+Kj0/Vj1Oqj5/oLrZ2p/6hkR5vP/eN8c88SNFMmvILYTY8F6smO4pLO1vap7/6zdYpnpXvnR3uH5jUOVeFQZx0PRUt7qr2+syGCy6pqan2PUF/HrAneiV4KU4RVCbUAOWXNDp//rwqCEFW4W5zlDSEhPhv2xZ+NKW9s6vw9Bm655D3zA43j9am5meCe/f9820DFsPzCd4REdastLUXnEgdNJvDkpMW7NgefvjNlkZj9tF3hszmSV0iJAwQBCBVPqpdgLj+7eFQ3b59+xQPPURVa51GzvKxa9cudWpmvwunMqG2lGwdlTwYaBRqfoL9ZDa29jQa+7p63DwNgZ+PG7QM1/7rk46yCmegDPWZ844dhycw4fnI5ESOwOVHj9f85aPo1/cHxW8UHv+I5c+99b3HN/NufeM1GBwrsml8+HdER6r/6o9rDk9szNgfudRLRmpKr02IdqmXIh/Kip5ZeIBSHWltfFMMNvqNGdcKD/zwYlh05s5XH12/Od40q+5n7vj65aj4mt+m2b6Iekw1Z95n6Wbi6213rK284YO/coA1lVQ47KrMX50fmbk81iGDm81XMX3pqXam7kiqQGwO+WxqtVWl1qSmqEcUqqpkH6BTtQsOUvpWK+8osYJdfS6lyfZoJA6QBn3b2bJli7wbvhAa3pJxjfFAfRMFxd1Mf9fSk9zEYPNPiF20d49cw3jUrnNxXNXg4ZqHOKsTdA8ueHcPp3jO8vvcR3+wWXJzfXJ0fbhxgesiF7gucF3gOr8UtLa2ToazpaWlqalpMpy8eCsrKz/18bSz88mTJ5P3amhoqL29fWBgwNmJ24ZZfW/634BrsVjGL+YjIzz29fUNDw8zkEfsySMDPTMDHkdHR+Wxt7f38ePHwqn/oM6kMJt1V5rBwUGsKDb5iqhMQAo+Nze3RYsWiSHh52Td0dEhnphMJhHv7+8XEeUDJoQNzdXV1V5eXvPmzbPeuDRSVpRXMCPo7u5OIHo/yaWMkcJnJYhp7HZ1ddmDO1X/DZAiQjXe37lzh0jycnNHRkcNBgOXi2XLlhUVFWEgMDAwMzOTX2IzaMRFYOHChZTVjBkzysrKiJylpUuXoq2hoYESZvXq1auWQUtpWemTJ4NVVVVz585FUBy9d+8ev9QUMaOKWibOqVOn3r9/H9dxOiAgQNxDOTHn5OQwaf3AWl9PDlCen5/f1taGdWxduXIF327fvo2SR48e+fn54Tb81AcmEAkKCpJdVVFR0dzczGGZQWNjI0vz588HfRxgjFoGkk7cy8vLAxmyOH369IKCApbQ/PDhQ6q7WSN0grikzTG45AcmHx8fsoGi2bNnAzQR4jrGsEHM3t7eYEckuIujFBROUw6oZgzz2rVrCYwB2tavX8+q9SZjMsXFxZGb5cuXEw+Tnp6eUl9IbdiwAdexwuS6devI04oVK7BCkEixkVFOMkiVt0arVq2iDAkvPDwcOAAFFNjsGGUmNDQUwfj4eDHNzcXf359UcTHBFtCDNUuRkZEhISEkbNq0aWvWrCFtEvLixYspC0DAhID74MEDUIuKigIBrCAID+7hVUREBCBQ6TExMWSIsdO2MHPmTGIwGo3ET0jUFwgSPzI4gaUFCxaUlpbyKHscX5HCIVJHzNjw9bV+MEYQfEmy9Q7u7w+yrDImDNngcJaXlwMWIc2ZM4dJSY8gjhKSSv5EP2FQfaSKRzQwzypjfGOAJ1gnfrDGIr84Bo9EhEJSRQKkaWCXX+rdw8ODSLHOPFKMUYVytLF78IQyEuvWz2PDwyDDAARYIl68RY+nRtbPQwYDziAyUc8FAgxQvAyoMjSigpqi3AACjeSTEggLCyP5eEbAZBuTTAqm0t1IDxpIj7QwAoZTvJQIsUJloZaxbFKSgTlho9nxSBhgxGDlypVbt24lgGGNCGP8Q7imDeW0LLYLvqlJ6bZ4COgkLzY2lrGqBpAFX9zjlxl5WzCgVHGGvUJ1q1cIbKAvPZ08UXawSbNGjzgjzPw+47RA2HQANppUBwNUAys166ZRcHAwKOArMzQdqoYxETIJG+jQr8k/bOCbnZ2NTnxliQFgwTxNIzGHcqCkjbKjV69eDShZWVk4QJBAxk6UopN6l9xTLNQIv+SSpJIhuvatW7dIMz4QMJyyaWDGNBu5sLAQK0BJwsAFZ+gebB3m6TCISI1Tkgzo4BQEfQMcwZSdSp9hy/OmwX/6AJsYQboNjx4aYYi4JEanX8Uk5zghL33JBt7IW1gY8E82o/VPnmYziZWBZI+sUiwii56amhoRNGt/C4AZNkyokwZjXoC84lArRhlTDkiJQlElxOSQRiyRRX7lwxivF4zyyJKUkjLHDBUAA1tN+OXMY/3c1dAAZAxQpUoeBnzGJfwRbeIAGkjz+Jc2o7FB+4sRBTGikTijIHL6VcxFrhuaC9z/e/qPAAMASWqGwylwlOkAAAAASUVORK5CYII=</Resource>
		<Resource ID="cfacba0a-6c7c-4b8c-8a9c-7c18991d53cd" Type="png" Name="keywords-icon.png">iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAK5JREFUeNpi/P//PwM1AMvTDQLEqJsPxAlYxC8AsaN0wIcPTGQaMgGIDwCxARAXgF1EpiGFQAzyynuYIBMZ3gmAugRFjoVEQ0BAAYjPowsykWgITsBEDUPQDSLHkAvQwAeHESj090MDkFRDwGkI5qIEcg0B4g/IXgM5bQElhiCHUSKRhmE1BD2wCRmG0xBs0Y/LMLyG4EqQ6IYRNARfFkmE0gbEGAICjNQq2AACDAB+wzImj1CUngAAAABJRU5ErkJggg==</Resource>
		<Resource ID="87b918b7-0b35-472a-a525-7c65bc41fc47" Type="png" Name="ug-subjects-table-thead.png">iVBORw0KGgoAAAANSUhEUgAAAAcAAAAbCAIAAAA/JAJkAAAAXklEQVR42o3KtxHAIADAQHv/Uck5gwewClT+6T3nPL9e1r33ta61QOecoGOMa+29g7bWQGutoKUU0JwzaEoJNMYIGkIA9d6DOudArbWgxphr1VqDKqVApZTXKoS4fT86dk2k+FpeSgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="bd6db48e-3dba-4588-a1b6-4d54db9ae0ed" Type="res" Name="1447603476_checkbox-partial.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAANElEQVR4Xu2TMQoAIBDDUvH/Xz5nV7OccHlAaKENUBikoBYSLdgPlaITjOCm5w7yVwV95wPWUAUe/arBgwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="39b62c94-a3bc-4932-a7dd-1857bf3ff872" Type="res" Name="delete-16x16.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQEAYAAABPYyMiAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAABIAAAASABGyWs+AAAACXZwQWcAAAAQAAAAEABcxq3DAAAD0klEQVRIx82Uf0xVZRjHP88593ZQBEwMzDHiGlFYl3JuzqYUYIzKEQ4p2xgRtRVpEHOrNjada2tzaf7YSp2VLm2iDG22sVpOg5WGc41Sl9EPNM0ofih4la7ce87TH7xeEdL8q/VsZ99z3ue83+/3fd7nfYWbjIeD2ZULltjPUx2u8zXW7ecY2dz+6tsclyD+8Eu6kRxOLauNTrAOWxc/ajwU+Pm3xst69N94JSawO/BFWdv0ezRPCmVu8Xp5hAwSUjaTiItf0xEytH78AZQ/2V+6FQgTlzoDARToBrxTft0HPLV3QCpAaqI7iZCoXbKTILN18PQLskNzJeXjhS39J8ubwqetqwbmBX4oK299kb9kPk7uk/gQbJl31SLKZWM6/A9LcQ1GAcc8ceZ/D7Cx6fPex6aWwI47W/d1Lm5aW1HgixFEgWPZK/Drj0h/nRldOkomYvCPEbOGwwbAb3CqGbVi5l1AWYYrMygPKgBrwTeCvFrnPneBBPyMsz4jgSjIMkBRJo8i7DOYYnDIYL/BVIODCIIQYggftr5Lj74h7YOfAAuu6YHYVhyZtrrMX1SAsp2SwiKUIRx7JYqL6DwsBNUAYOFJCuABScPF1u/xAGQIQYDXiODgaBF7qKTywMHWNZ1Lm/KaryzomgoMx+ts0i1zavDwZFtdMZf0EL1bTpAlVXQl19LFeTKfKKBNW7h7+wATJB9ffB9BIpwr7eYObsXZUUIPXxNxHqWLVEKLhnQRG9jgDhulOSZnjTHg4uGxHQUsd4CQZGB/sIszWFq892lc+rnU9xAPSA6RhjaSiRDas5yJhEi+sI11jJPmhve0gdvI3dVOFEXclUTx8Ng8Wm6sgZEhnCGVqdzvVSAcJ94tA4awvA78RHF1E5M4x6AuxiaC7b0p0/iOTDeLEMIE70PDc+J6Ej5uLjzT5znm+5jBKQYd4zgNDxtP4sz9kG/y/usR37gC/0H8bw2YksaO6TBG6DRvZ83mnTf5K3dkNwL49CiCBRw0eXcU7w0MhBAsJuGhIFX6qbZgOSsI47LqlkI6gWQ7qMvx6Pbn8xNhvvKnD8+1VmsHA1rrbKRdjxBxHjOsLxNPIjB/tNyYJtRv6KHnzHTJJRnRmXKfPEh//RrCOPJs4jrSgKTJZ2UrSbivNBDkXmaN66WPwwwmzWKO9vBW7TMSlnimOI+TTgaJOlFWUQRnS4FvR+qNuQnz6gMlC5PSL+rnvCMZ62fTK/lkFXYQwEPtJSiAfmmm+wFB6EZRVF0UC6QK+BXPHU+m7uau1plk8jtpteHW+pPVTTW/xCrxN1WnYlXs2UkMAAAAAElFTkSuQmCC</Resource>
		<Resource ID="ecd1a950-8086-42f1-aa3d-e426acfdf68b" Type="res" Name="c016ef5e-c636-586d-9841-f3ff499831aa.png">iVBORw0KGgoAAAANSUhEUgAAAAIAAAAaCAIAAAASURqFAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkZBOEM3OUM0MTk5RDExRTFCOTFEQzE0MUJBRjVERjM5IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkZBOEM3OUM1MTk5RDExRTFCOTFEQzE0MUJBRjVERjM5Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RkE4Qzc5QzIxOTlEMTFFMUI5MURDMTQxQkFGNURGMzkiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RkE4Qzc5QzMxOTlEMTFFMUI5MURDMTQxQkFGNURGMzkiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4XuEDdAAAAIElEQVR42mL8//8/AwMDC1bq379/hHhUpYiwFkIBBBgAKWVN6CHpGjUAAAAASUVORK5CYII=</Resource>
		<Resource ID="cd7a9373-1f59-4ea0-b117-2039ae746080" Type="res" Name="3827f2ea-edca-491a-bc5f-a765776dd109.res">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MTA0MTg2QzFBQkM2MTFFMUE4OUU4NTE4RkZFMEZEMzIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MTA0MTg2QzJBQkM2MTFFMUE4OUU4NTE4RkZFMEZEMzIiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDoxMDQxODZCRkFCQzYxMUUxQTg5RTg1MThGRkUwRkQzMiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDoxMDQxODZDMEFCQzYxMUUxQTg5RTg1MThGRkUwRkQzMiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pi/Jk84AAAGJSURBVHjaYvz//z8DJYCJgULAgswpKSmRAlLzgNgZiH8A8T90DT09PfxYDQBqZgRKPps9e3YxIyPjyr9//2oBvceIxdJKIG7H8AJQMygwGFNTU6/y8vIG//79+zMTExMDOgYCdnxhAA7R06dPxz1+/Jjzz58/pIUB1CsBQKpKQECAgZmZmeRAVANSU3h4eBiEhYXJikYLNjY2aTExMbgAHx/fIw8Pj+lAF90jxgBlDg4OBhYWiMOAXvjp7Oy8Vk5O7gwwVmJ+/vz5jZABXKysrHCOhITEJVFR0ddA5trIyMjjQDoMmj5wBuJDaFSBgba29jkgdQmIPwLDhwkY1VuB7CsYLgAlIih/z79//17DJDk5OUG2nYXJT58+HWThQ6xe2LVrF8iGG0D/18HiH2gYSOMPUCJzc3NjAMbOf3RvM8FS4cuXLxlBhpSWls4AhkMbKFF9//6dA6QG5AKgHIO4uPh/WGLD8EJsbOxfqBgoOVfLysqmf/v2jePZs2e8IEF9fX1s+YIBIMAAS+2I+SsfjLYAAAAASUVORK5CYII=</Resource>
		<Resource ID="068664fb-3f24-4761-ac3a-ae57eda025bb" Type="png" Name="proadmin.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAvVJREFUeNrUVT1oFFEQnnlvb2/PS8xduEM8iVaKpViIRFEJwSKFnY1YiCJapBESEBGMNgpiKxIw2AULK40iKEREBFEMFkoKxUJQNJEkl9zd7r4347y7zU8RdAlc4R2z+3Z23ve9983MW8XM0E5T0OZf2wm89ZyP3m9PRgSEC3K3Yugcgdiw2EuxydUZuDI6tqf6b4K1E5VgMkRixjn2i11rEfAhJ4ASCARfHvXGJEL3xzwwlt3jppZX0DAQfxGQvQRGrQuXIgeOwu4G7DjKmI0E3BFEDF0VAD3Qet5wkgWcoxFF9U+Sj0EJryd+IVIVeTehuOHk2rkBAqd/Y1RxfMVg6QVhcBnZBIlEcqePBstXGYODipZc0netTfbfCVAkBjqjqX7WqPKYVcUjSL8/AIR+CwQ18myNEUdiVekHyJY018dFMj8VgQjT4XHtBqv8NIB/XtM8KP61JhyzADFo+i4e+5xUYUiB2YtIx1MRKKBejVRiFdxUaGOFDUiS+UZMVgq3W8mPQItJOY0K55yG+GSqRlNo+pCdFGpSKkiAMtJynuuFWUE7sRqXlXfsRKuJaq+EYF86iZi3JsmsLpehghyslqQD1eLLJl1ObtaMXDanIrDgfSbBktOw1DoVSQCDVvE0wZxAHeKX9TfjnFGPZTWTisCw98wIA1szQCT1JJihyUDDVCAyZRlvk3ERrPjdQsS6yUa9hjKvUxEQ6bcx+V9sXBsyrAqR9cCZC7fUJavNCah0ifHBkAfWxBdNbAPD2XvpdmApiiE/GEXxFhMuPrDsFRFx5YRdzgVLvxhjz8X1ueEQ8hOG9ON0ObAsK1VPjC5catSqfdHizymy4WmB7BGinJRlgckesI35+42FH3ci8qcs5E5ZNzFNmTajXOaUf5297q9hfe6WXfp2V+kMoMosyS4CMpF2kZmgc8zPdF6Q8QKn/eCsMrEDHNfZ7ocWav1hWD/MVN8hO6hqz3/nB7mnKpOdbi5mnXMoKXn+v7/JbSf4I8AA5w+cScr6Fo4AAAAASUVORK5CYII=</Resource>
		<Resource ID="43773d0d-1048-448e-8524-81b9de128b2e" Type="gif" Name="enabled-16x16.gif">R0lGODlhEAAQAOYAAOXl5f39/fPz8/v7+93d3efn54+Pj/z8/H19fXh4eFrDNePj49vb27m5ubq6un7sU1rVPGXdQ0XBMm7ZVZWVlYHLZZ3/aG1tbYjbeSyyGzeWNzWQNdXyykK2LVeMVFXPPVHOOCuzGmLaQXbnTiawGZ/dm3rMZEK7JJ60l2jeRV93X3DkS0q7MfHx8XnpUGbdQ3zrUmN3YHa8cr+/v/Ly8m/iSXbpUFPPNobbd3zsU1TROEa+J57dm0THLW/PZnTnTlnUO6HhmWG8Vby8vJOTk+Tk5KThmkLBMNLwyrTYsG9vb3HPZ5LciD6rKWXcQ1DQN3boT2jKXE6aQxagExefFImsiZPfhEK8I5Lfg3PTZEXILmXWSkawLpvMiMfhvKenp7PrnoTxWGHaQWrKXWWqUUW+JZr/Z2/ZVCWvGJXcjYfSaFPQN2XWToXyWXXVZ/7+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAQABAAAAeogHCCg4SFhnBviW+HgxxqCgoVXgIBh2BlUTwlYztdBQOFSFdLaUZBTD4nKAWVgyYSbhhWWDhZR2QzAoQsPR9sZxNbIFpcFACEHU9AYhEvIhBrTQgEhEI3TjVQIyspOlLThEkhPzlhbQ82GTFEx4MCMmguZhYwJB5KQ7qDAQBVGlRTNqi48AVAq0EDADgwkCCBgQZFQBk6QGMBAwYLWhxgJEjRIo4gBQUCADs=</Resource>
		<Resource ID="8ae9ed10-d910-4aec-8316-5e9cfb2da6d3" Type="png" Name="logout.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAQ1JREFUeNpi+v//PwMtMRMDjcGoBQQBCzKH8dABHiC1AIjFgPgtEL8ioL/gv53Dd6ItAAIhIA4mwYFlQPx98AQRGugAer+SkAHAYHUEUr+Bao/QygcaQLwEaFE0qT5AdmUXkBIH4i9oUr+BWB+I5YF4KlCdApCeCPTNF5IsAIIMIOYloIYfiJuB2ASIA0m14BXUtf/RxP8BMScQ80D514C4k+QgAgJvIGYD4j9o4l+hvgMl151AnAwMnhckWwDUdBNP/FyHuroVqO4bKZEsAdRsTMDuC0B8A4hPYjMcmwXvgPgOEKsAcQIU4wMCQINPE52TocnrBa1z8iZoaiAG/CKYh0DV2miFM7wtAAgwAH6Hjtc30rKwAAAAAElFTkSuQmCC</Resource>
		<Resource ID="dda2055a-a74a-4f6f-b944-0791bd3b8efb" Type="res" Name="7290f241-3f46-4d68-91d6-d04b6dace9d3_png_ico-reply">iVBORw0KGgoAAAANSUhEUgAAABwAAAARCAYAAADOk8xKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjU2MDY3Njc4Q0Q2RDExRTBCN0MyQ0YxQjJDQUU3REY0IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjU2MDY3Njc5Q0Q2RDExRTBCN0MyQ0YxQjJDQUU3REY0Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NTYwNjc2NzZDRDZEMTFFMEI3QzJDRjFCMkNBRTdERjQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NTYwNjc2NzdDRDZEMTFFMEI3QzJDRjFCMkNBRTdERjQiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5DxWJHAAACiklEQVR42ryVTWgTURDH/2+Tbmxca0xM0mpsgrakjSAYsV4EQQRB7a2oJ72J9STizUtuHhRBBAse/MCLCF6MIHpujVJLKRSsiDEFkXaT7CalJSW7mziz9qBl23wUfDD7HvNm5vdmdvatqNfr+J/D7aQ8n0oN07SnzZi/XqZS6ZaAlmXtvTI8PHZ0YAD+rq6mKNrSEibn5vAonR7dzE5yBJqmOEKwzOws1FIJZq22qbAN27IP+7YMNE1T2qkoOByP48PMDFRd3xhGe2zDtuzDvq0DDUOyqJm6KEBycBAT09NQNQ2mZf0jrOM9tmFb9mHftoB8eoOC7mBoIoHxqSksFou2joXXrIv3haEb32ydnfUa8OIz4WoaaDCQTls1TVs6PB5EIhFMEGChULCF1z+lV7iTOYQHk8fxvfAZ7MO+BIsLAdMJ6tilRrUqWWsZVg0DhXIZkXAYuyjbDIFU8xPKngmsuMaRPAHMfwWyxUlUrBJ8A2/PdG7HPRJoKs5SuNeNgWsZrqyuokgdGPD5ICQJcqcEXXmDL/pjxPYDwQDA10aHB3iXuwm3DPQN4VS4lw4xZ4dSms3QVSHYQj6P3X4/JJcLVctA6n0MoX1A4hi9C4k/nz/2rGP5e9RrLXz4JU2Ts7kcYtEoZFm2dR9/PIG/G+iOAVRtWzYafFsul+1lZv2ecLpLlf7+q5LX27tePzSSPd17cDnZcwDY5nUGVZYBdR5YWcL9F5fr15sCCiE4LZ9TBc7dxSUliNv+HiBAt62g0i7mqCoqE2HQcwoCDwn23Cl70c7fgtrdT9MtapYboSiVTwfKeVwjyFgjX7GV3xOBR2gadblxkhooRMB8QycGblUuPEWwWdvfAgwAAui4vSnXF+sAAAAASUVORK5CYII=</Resource>
		<Resource ID="48cb6738-97ef-4fea-9f4e-a74452a23f10" Type="png" Name="proshare.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAntJREFUeNrsVbtuE0EUPXdmH7bj2MQEQoJ49Eh0lDQUKAUSFd9ATcVfoAiJggZFQiCBBBSIH6BLERSBBGWMeEhEiZwY2V7veudyd9dr79hOUkU0Wa3tedy55z7OGStmxkl+FE74OQU49nGsWbTzGuGPswDF6ZyNhq5/gL/yCKp8TDwsL4+nRMnXBMDey3v4+1EG7vCAEZ+lW1i6/x3zN98cjUAmc1oAnMpAiWMnSSBZNllEHAL775/JwkOQp/ODRSdpIE79OZzza+AseXhLMzLQcxJ8LQNInFPuIKqh9erG2DnZABCnemEb7vIaTATUb8vahUMy0JV02cSx2MapWJI4GOWR66zUXCi3iMr4vSQe3VgFla8d0mQpMbNCGAzQ+tmS3zzWyYjJGjMP4M97TuP63SpVruTGnaTOFgAzIQoi7DYPoPyLWLzUFz4FBYCZzZVzBo7v3HGDrc8cbImxUcK6t9RYfWADxAadvTbCfhmXr/ahup+Q3iYCfCSGks2Qq/GvjWpiR0kNSytfBMAuUSx17+z3UD2zDB18QxwJO0jBZs4ssOE+eemYSW0o59z6VA+ioI8odLE4HyDu7GTRJ3SlongwwaThqLjn1h6b4LeodAKg1+7CK9XgDZow/V5KVx4qcujFUmpOAC7iKucrHHon5ZhmUb/LmKsQTLsp/Rik4rQjt4GYCmtpn4TSbukJh4PeTCVrp4ZytDmM3h0LLTHOQVJ/k3TNe0DbcPQLMmZ0L1kA1XoN6k8b7CXXhR4ZEVHRyYxLzsgrCtb+U2HoAcxglKUF4Os92VcS/MKhnE8BSNmNFqGRiXdZldYzYhRUzsUr9vQf7X8A/BNgAO26OO6ZnT2WAAAAAElFTkSuQmCC</Resource>
		<Resource ID="a8276920-8ecd-480d-9ad4-c7c51c158544" Type="png" Name="add-new.png">iVBORw0KGgoAAAANSUhEUgAAAAkAAAAJCAYAAADgkQYQAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjlDOEI3NEMxRUE3MTExRTA4OTgyOTU5MjdDN0UxN0VBIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjlDOEI3NEMyRUE3MTExRTA4OTgyOTU5MjdDN0UxN0VBIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6OUM4Qjc0QkZFQTcxMTFFMDg5ODI5NTkyN0M3RTE3RUEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6OUM4Qjc0QzBFQTcxMTFFMDg5ODI5NTkyN0M3RTE3RUEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5GY/NMAAAAiElEQVR42mIsWi/HgASEgFgRiC8A8V+YIBOU5gHipUD8FojPAPE3IK5GVzQTiKNAjN6AhyCKDYhbgDgZpkgapgALAJvGAsRySCYwILOLN8hLwxTdBOJfQAE2mAIgG6b+Gsy6d0A8EYd1ZcgOB3HSgfgy0JRfQPoIEDsA8W6YdTAwC4oxAECAAQA84CB8G47b/wAAAABJRU5ErkJggg==</Resource>
		<Resource ID="94b78792-463f-4dbc-b5b0-377f42700dbd" Type="png" Name="new.png">iVBORw0KGgoAAAANSUhEUgAAABwAAAARCAYAAADOk8xKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAKdJREFUeNpi/P//PwM9ARMDnQELOZqyjtnCg2Wa1WFGuvgwyCCMvkH68/dP+lr449cP+lr47ed3svQxEsoWyAkEBoQ5RRlkeOUYnnx+xPD2+2sMPfgSElGpVIVPE0Ps649vDIKsImCMDO58uk55tkA3hIuJh4GfRYjh4593DN/+faFukOIKZr7/IgyfGN/QLx9++/F1aKTSoZMP+cQ4aJMPh3z1BBBgANezQmnvLOJ8AAAAAElFTkSuQmCC</Resource>
		<Resource ID="fd001b70-e066-44d9-8436-e841b42b32e3" Type="png" Name="logs.png">iVBORw0KGgoAAAANSUhEUgAAAD8AAAApCAYAAACC0PFZAAAABHNCSVQICAgIfAhkiAAAAGJ6VFh0UmF3IHByb2ZpbGUgdHlwZSBBUFAxAAB4nFXIsQ2AMAwAwd5TeIR3HBwyDkIBRUKAsn9BAQ1XnuztbKOveo9r60cTVVVVz5JrrmkBZl4GbhgJKF8t/ExEDQ8rHgYgD0i2FMl6UPBzAAAMfElEQVRogb2ZbWyk11XHf+fe52XGY8/YY69fdtdrx7vpRvYuNBJNldKSbT4hVfnGFqFIiA8R0HxACoUKkFC8IECqVFqECiIqggZQpF3xBRCloS9p04ooFVKhsbtJs9ndJll71+v124xn5nmeew8fZsYev60dnPhII925b8/5n3vOueeeIxyS1s78xqTLF/4V1QmA6N4iJmlQHz4OCKBEyysk3THJ+jcQCTYXq74RqP5Ob7b6zTfD3r+6JcETNdVfHf2p/88pZpPO7ygIPCsAwiW/c6z5MQE9KO/m/wu6TS4qjOC1q/0/Kfe3gG+SOEfXu28jO/nymTGOKPID6pPTuHI//O3cWPC4dvDWBHfRwKzsAty8BBbgvQCH9wH8QUitJVxbp3TvIYL8z2GiMcTkQVB1TgEyEZdHGRM/dAL3lZfHzz/RXn9lg88rO4BfAbkAXmA3bbgvHRq8NZqB7iHxZrcKuHyeyrCABNj4IYLCY4TdjxN0TYIbEZE48IBBGcSfGPfZX74yfu6XAT4NDq74zpNtA7/Y3P49AwcI9p9yeFJjqI6P46ovQhqAhBg7gNiyBPaEYEsadHV7l13DJzdRoCCMTvjs8z86dS46/9PX/mE78JfAXNx24h22z3aB7EZHoPaCqNL9k9eRLGt2aYrP5nD110xS+YaFG2iQ8xBurPKAETl1nOyPro9O/lq7v0PV3XbgV1pjHND2j8TmkbYe7tBGVRGPa4jx3opsHVfAi4z3iL90b/TDn5lhMgK0deKdmiBtv/DpplCOBrxTMSD3tTEVszs7glfvm6cnavcyVRU5pUHuc3dOBU/ItuusDfwiaNM3HJwOb/PqZR/se8tGUbFW5OYrtdXSo99FifEKIpv2KqBoTrKw4Qy927don/hBbHw7HRq8irZUcB8B7KGI4r0FKM588avAV/fe4Or27cxLYC7s7fT2DXgODT4Qo26vm67NkDR9kOiOMKdHRR5eHHtkwRY+XvDZ9UZWm9kYDJMw6LnbK9bllFy+cXPozvz4zVevt4bNhSa4LSbQDIZAtsUEu/J+EICHJmnrhm7vHwUuqZFLGAUxiLWgkKvkKSyVEG8Bj1O/2tfzsefg1d9VLtrWvb8doMCkwKUD2f6RgPeB507/Ki5Qol3G1a+SVr6GOINVQ9dSkbiap6m9LX/ovaBqmyu2BjwATYGAcCk7KF+H9vaZerHY+84RNdgk2NsA2xaKUJrvJ64W2H5di8ukZT87YvhN4FeO1tu7ytdMim1atSg9iyVyaz1s1UhPo5wH2eXcO/xkVIsxWchujlu894jsANcGvkvcLx+4w/sfQg2IOB6fYTAeJesxrGgnjwJaR9Z/QOwcncqmxhM2IvKr3az1L2+yvStpVJz5YR+bswQes83mjrj/aGJ7EfGpZnqjcZWKW+RE/CHytgevDm064xTlB6DfQrWOelWj3nhDbrWb7qWC8UYsZVRUt9trsGEPsAa8uvFdUPjOrvZ90AjvfXF4giAiLLg7VGprnIzO0B+eRPB41SXxMm2ciTz0e4MxmfHFpV4J1wuACt5bo5opaAffAXgLgQeXgfHAKeWxURDbFIpos98p2NZpZ+8I3335yMC3yWJp+DpvNV5jzS1yIneWSPLVIKhdrVq+4Jyeza3nTPdSKW+yKA+uAVRE1HhBVbTFk/QAORWMC+uNIMmtgk+AHNge0CJI6xWkKZgKaB3Ig30JOBrwTlU6rwxp/ZtP36WarXEyPmN6or5B8faR7pXSWH6ljKBz4K8DQyDnwSC2iNiAlpd/BeQqKrW1keS0SeQjgjTtXcmWu/P/dH1wwK/7tVp5Vcc/Orv+UWC0JYwxBXOQcPfQ4C3WqOx0MFYCKlR4vf5DRvVMNr5SvhutrJ0EteD/A/yf1Qu1JxvdtWcB1DVQHzuIngf9PFAXVDRbSrOQJ1X5YyAT1edqNvjD2lr1eNZIE7nLInR9BuT3QHrBrRyU90Pf84rcx7kYRB0kd0iOjUtSOtb2RQ3wyz7wtTTnAEtYz3ubxtdAfwu0D8zfQfCyD4KPS4W/Lt499vzA22PX+t+59ttnXx/52C/+KPrH46v++0GgT4D8GHgTPD4qAM8eiPdDn/xEVfx8Dl3vTMrS1LkSMJH7WQIsWS4iOzVOdq+b/K1bgagWUIkBSrf7AVLQ/xK+XVEevwRcaG6mv0mXvLUeLT8f1sO66GQA8hcgZ43qvXv59LPfGltMQMaaFnNPSjf/zXIUmZzhesD5So6TvozBoK1Nh9VzJnqAKBxS1ItxTkSVpP8YldOnIe54nW4azc6rS6WgVrrTnFtZ61+7DccMUARdG16Lf+XcTf3Eg0vdT04sx18fTQcZiSdsfnLiQPf84TM5QQ5X/hBDxYc5GZ8lB4xpxmg8gY0m8Ii04l/RbBHSBVxY15WxomTFnChQyTVYihOW43REeSxYjpOZ5TitLOdSqmpm171czbz5SFKo/jx8pwH220B+ZD3+myHKvzS66m+NZkPvDvae40T0gJ+cPVhS49Bqnw2fR4M8oBwLR+gjw/gqEk10TPIe0/Bp9fuICRHvJXKymln+OVQ0Gbi7ck/s0C2xT9Uxn4hY/n1P8U2FwSg1X9FQSiXk6eOkJ5eOn32071blKej6X9BBkO9BrLXh44NqDeK8wuTRBDnOxBbd9PdBOLpjjhr1qNF2iltFTqeBftI4/YlHv67GuDLugbxq1y2C55el9CXIvhk6Kklgf0Ewv66iD4sXzSL9+9Xh6peK89GLIDWQc+sj43+aFXo+Jd6he6bRPwDwiNH9o8kQxI5ExU9ZdUt4t/BJTW8/klGr0HJMCmFeKIzjCovIn9wm+GzDkhkoi0hB1QFOxPNgI679ebVkFworRZeUBvqSgf6eZkJJACkdlPXDp7FwKsgeb4mmUEzQeFvRL2hy/UHsgAmis0L0UOjSa8bX31AJhqx3K+q1UbUoQxB14+27EpgVxKOaKLE3plRApKiGsN6nUWh6JBkYTgVSvPMgIar/vb2k9YGB3y+NZdCSau4pJHvL1X48j7VkBN7aAbADEnY/LmJiqz7xrv6Wc+kNAAqqcsY07B0stwlUo94kis7Neey8qBMCMdfj60TJqzpQgQYQi9EkDaoHec6+L+D3I0VKqvI5hDdUpIGKgsNltyG7jWvMiAmPS5D/GVUTaFuBnCAgMoRqHmfXVVcd5l96Z7/4vfeLtw8+jSUiKvSL8Cgiu6axlQxFELO9BCB4oAelqFldkHngud1OtlXVFbYVNO5Hh7/q1Msuof0WEkzT0e+Z3/cbM3ejJhKfIrLSmrUbcOQ9Fi0OHeSIl2C/is2+5bMNn7HLNq1UhkmNGDFbDktBLm/W5o++aGEMNQcNAVBV2gU37fCCSjPjgWzt35wgqLYSPx3LLCLO0LXSTZT2ZncLS9XOVZt1+52S/cByeKq6cURrj/zBVa3W/l3gwyB2E1zztacIXgwG7WC08yWognoBVJvJe5pW4iWoR1JYLBImuVBzeu2d9M0XL1++bAFmvvxlmQGmBgeVy5c38nbTIjLVmfO+D23XswOVd5955pl8sVgUmpI3y8vLxhhjisWiaffVajWTz+c3/gPGOSeNBiYInECEtW7j+845tdZqlmUaBIECXlV9C8RGW1V9FEVueRnf28vG+OrqqmZZ5ufn5/Xpp5/2CwsLeuXKFSYnJ3V6elqBtlJu4BNVlenpaZmampKZmRmZnZ01w8PDUi6XLWDq9bo1xgTd3d3B+vp6EGRZ6LwPbVdXmKZpFIZhlGVZpKpxEASR9z723kfW2sg5FxljQlUNgUBErDYLD0bbOXjRViVanDbDuExEUu99aq1NnHOJqknC0DSyLEtEpJGmaRLHcSPLslRVE2ttmqZpaq1N6/W6KxaLWbVadYVCwQH+woULfmFhQWdmZrYIYovDu3DhAgDlcnnjROr1+lbtyOVwQSDee7HWSpIkYowRY4x470WNioiIFxFjjHSSqopu/mv9Wi3dbEtrrW+1rQXvvRAEGGMkn8/jnJMo2loHiKJIisUiAENDQ6yurgrACy+8sKtDlu3ttslOT08LQFsj5ubmZGRkRG7cuGHK5bJYa02hUJC22vf29hrApGlqASPNZJ7pbGdZJiJi2ow711R7a622VT/LMo3j2Lf6fL1e96rqgyBwhULBVyoVD/goilxb5berfV9fn46MjOjU1NSO096i9rtJZB/aWLNdUACzs7Ny8eJFAGZmZrbsPzc3956/NzIyssHs1NTURntmZmaj3QYHGwDhAL7r/wColAy3QxjMBAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="03fc3a90-cd95-4699-b639-e5761723d52e" Type="png" Name="triangle-mask.png">iVBORw0KGgoAAAANSUhEUgAAAA8AAAAYCAYAAAAlBadpAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAGBJREFUeNq8lDkKwDAMBCcp/H4/Jv9THHCVTjvghW1UDELHUlVsj+WnGuLnFgADwAAwAAwAA8AAMAAMAAO4vkKgsTxvjEzbxwYWryo+kvg848eIXzIOgziG4gBsR+8rwABj8XFtqIB3sQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="cbe09105-1e0a-4b3a-bd4b-fefe1ac5e21c" Type="png" Name="application-favicon.png">iVBORw0KGgoAAAANSUhEUgAAADcAAAA3CAYAAACo29JGAAAHQUlEQVR42u2Z6VMURxiH86/kg2BMEEXkkEPBG/BAE5VCQERFAS+IB6IigsohojHGJH9OPiSRQ+5zQeSe3eUSZ6/ZmX7zm2HEXXZhexHUSm1XPUXvzPTxdL/d01N8800gBVIgBVIgBVIgBVIgfclk6TxUo4zeNzDjYwPNVBlottKTyVoDmeo+H1OPl+jHY62f8mhZs6O3YL1vua4ToqVtPzmHS4gZa4imq4hmFzEDzE9A3dozWevZvspUjdY/eeQe2bqzaebf6Gs+5RxvK0R7fz6JLYkkDV4mJqiVVXoRrP48cjPeB1ftl3OohCztR+ndq3Caaz7oW85uKBbl8WckjZSS2LqT7H2niE1+EFyEuVafwbWi1rPNGbXdGgz8zyQ276a5pjiy9yPffZVH7gbknhAz/6GhmF6S2LYXYXqTmEmv3LWxqWpdcpWZrnZvB8uDGatIHi0le08W2frOoX9/kiI8hygmovsyr1wtCv6+gH2gALOYgEry0cAjCIJZFyZVwcerhzpgrvVPqWH4iOThW2RtT6V39eH64L+EHKJs8A7kLvLIXYMcFqv5twUIgs5hVNCaiBHLIGWigtiUS+OqrLlaC5dPZtJdTF0SDO1Jg0X0vnkXvW+KJ2VcDc0XGkyoI+dgCVm78zk2FEORqIyru+Gvi3gBqSos4CSydh0iZewuGn+4yoLV7lGBvDJeRo7+PJprjELbB7A0nuK55wswoZacb27xyhWK8yPzi1eYsQ5b73Gsw92Y1Ye6oM70B8GVoO6CLnUhz0wPydaTgd0wDBGDjU3rwzM3mFADuWLIneeRuwI5VG5+ugzPyDGQS9KbXHTgATryYJFglf+o5RbqgJixAmusGOtrC0lDhbqM56tCeyW8uQG5czxy+ZC7xxViysQ9hMo+snamIHzw0p+uQOcgOqkOziN+ph5q5dhkBeopxcCdp7mGSETHfp8zzoQKyBVC7gyPXB7ksJ7MlVww4wOE6Y/oyE5sOlex0UBwBqghy4M6ELPYoMzlWMe3EYbpmK3N+JuGa5U+B4YJZdhQrkDuNI9crqjOApkfcMOAo/80dtPtGPUcdLZcF+QoPzM/GPIIQqvjgCYmDebp8hU+YcJdyF2E3CkeubOQK0bB+35Sjpm7pL0PmQkzPwPBaR+dU58BTMBLuHmHtiPKY9f0+sq4YMJtyOVDLpNH7jTkrqNg6YpQy1o6k7Aeb853fqrcu9g0pKbv47k7mO2z2lGPGUtc6rrLBROKIXcecuk8ctmQK0LB2yvG1n0EazBBm0nmTRC/2VSZtgnZetO0UGQe9ZRwwYTrkDsHuTQeuUzIXUFBjLy5eEUwUzHWYMb8GnyTjRlCCE3qgvjLEE7yKGa4I1kTcwxkeWnvJhdMKIJcDuSO88ilQU5d0IUrxtq1HeF2AfkirKEC7XVh6dyHfBGkc3CSj9DWmCJc0p53jmRiQLzVddUnTCiAXCbkUnnkjkEuFwXVhi/7jWLMI7thL5Hp4zUmYDfrPIBzYRROG6HIJ0PG5b5J3e22a3/d67vkEybkQe4kyh/kkTsKuTMomA8K/EIRzpDYvkX/7V6emfIRosfxgZnu9b61Ow4zHoPnLuj3vJHnARPOQS4N5VN45FIhl42C5/1CEbLJ0rYZH457lnnuwpL3mCmXrD1xCN9I5M+63MtdFibkQO4Y5JJ45A6KylgGwuoMN8rESeyOodgYEI7ms36VdYUBW288BLfitZCtX89ZFiZkQe4o5PZxyPUlQe4EkTGLg1M4MqlfCCEIOXWdneIstzQM2Psg2BGGjp/EtcxlYRPpOFsexjreySHXu0uURw6j4mM+gFTLdzgq7dLyvp/3H3tfLHZYtS8/LYkydoSkgf2Q287xJd6bIMrDKRiRVHBkSZxv9+CTJ3HZZ1YDsXUD3onJen88UUYPQW4P5OI45HriRXloH7ExfPWOHfSKczARsxa85P1P44AbDsM2siBC5OG9+J2iX09ZQBlJJqk/EXLRPHIxovx2N0ZkP0jyQBrAemgJQjju8Hp/LZgXDEa0JOr9+ogqLfXvIGs7j1x3tKjOjDICwZE9bkhqI83BCMd4j3try24IRqHtIGwe8Xrf5pGHdpGEDcjaHsEh1xUpOgdwfBpKdMPRGzFf+UCsx701520CQB/6IsnyOkgb5PlrCSQjgqTeGLK2hvuWs7VtEaWeaJINsQtYmlBhTyTyMW7X/aZvJcQsIpakznByAPW3s3cbSR2RZG3axCHXEiZKOCXI3dEa9tZQcnZFLPz+/ER5xdK4jhztYehbNDlat5K1nkeuebMotW8lJwRtLSGYtWAt/7Uh4QxraQwie8smP+SaNovqw/bXP5C1cT0qCSdnR8SXQR3kZXC0QbAhiGxNIZDbyCHXGCpaGzeQtSEYIxJGUuuWrxp78yay1AeR+Pc633Lv/wkesLzCaDSEgI06IV8n9SqIsFffk/mvbzMC/xcPpEAKpEAKpED6n6T/AADf4IISliWQAAAAAElFTkSuQmCC</Resource>
		<Resource ID="82a97fba-18cb-4097-a553-92798a287543" Type="res" Name="690302ab-f3e2-476e-ac6d-a69dc2f0734e.res">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RUIzNzUzMzlBQkM1MTFFMUI0M0VGRjM1MEQ0MjdFOTkiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RUIzNzUzM0FBQkM1MTFFMUI0M0VGRjM1MEQ0MjdFOTkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpFQjM3NTMzN0FCQzUxMUUxQjQzRUZGMzUwRDQyN0U5OSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpFQjM3NTMzOEFCQzUxMUUxQjQzRUZGMzUwRDQyN0U5OSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PivqEdQAAAIMSURBVHjaYvj//z8DPlxcXOwAxPdxyTOCCGygpKREAEjNB+IATk5OBi0trctnz57t6+npWYCsDqsBUM3nmZiYFCQkJBh4eHjA4l++fGH4/fv3mdevX7sCDfqA0wAQaG1tNZOSkloH1CCNLgfU84idnd0sISHhJRMDDlBdXX1KU1PTiY+P7ziID3TJBbizGRnlWFhYdgKZHMxAZwns2rXrOBBLAvEFNze3HzCFMjIyb3V0dJa+e/eOxcvL6+qDBw/uff/+3RAkB3SZhKCg4CuQCwKAfjWQl5evFxcXvw4yFc0xP1xdXSuB9Irg4OBkoGHPYRJPnjzxBhmgAAokoJ8Y1NXVXwD5GTh8dQNEvHnzZhbQdrDAr1+/OMBhwMrKChbg4uL6CKQeMOAH8p8+fYJzQAZ8gHFevHihjszHARxgFgJd/gFkwIa/f/+CBb59+yaxY8eOLGhaCMBhgCEwUe0EuvYFMIBvgNNBTU3NFjk5OW+Yip8/f259+PChNzBQ1798+TIJlmiQACigLYBYAxwGP378iAFqeg2TBQaoNygF8vPzByooKJwDJSr0mAHiA0A8A54SFyxYIM7MzHwEGM8qWFLeW319fSsLC4tb6HLoSZnj8OHDXa9evXJ9+/atBkhAWFj4hru7+0ZggIGieAbUdhTTsWGNSZMmvbp27doCILsBiCOAmAObWoAAAwBHQyQ2jB7mTQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="281eb169-1e7f-4f8f-9e8d-63f46a441fb9" Type="res" Name="1e0c09a6-325b-4ad0-9e04-ce25404b2a21_png_ico-reply-all">iVBORw0KGgoAAAANSUhEUgAAABwAAAARCAYAAADOk8xKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVCMkI5NDlGQ0Q2RDExRTA4Mzc3QzMzNzJFMTYzOEYxIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVCMkI5NEEwQ0Q2RDExRTA4Mzc3QzMzNzJFMTYzOEYxIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NUIyQjk0OURDRDZEMTFFMDgzNzdDMzM3MkUxNjM4RjEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NUIyQjk0OUVDRDZEMTFFMDgzNzdDMzM3MkUxNjM4RjEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7Bt4MuAAACuElEQVR42ryV30uTURjHv++clK8rbWPLOXTTppmQQfTDroywmwKhEpbdGOhF+Qd4G1EXYRDURRkVFLsR8qKboBVZgmG6aOqFzh+lk5wsXW1uOt+9e9+350wHa2z5guGBhwPnPef5ns/zPee8nKIo2MmmwQ43bbbB9q6um80NDW02sxkcxyGzCqmxucVF9Pb3P3va2XljW4LGoiL+iN1uiayuorqsLOvCqfl50Bz0j4zw2yZMJBIwGwx4NTCAuUAAFaWlf5Gy76ytCQJaGhuvvRkaalFLmlUwLggaiXqzXo/DlZVgpFXl5blIdUSqU0ua9dAIosjFiSa+Sfre48FbtxvTCwuY8fuTPYsJnw8SzVuK+HG63tRBpD+Y/6k8l19weaoExXhcE5ckhKNRpJMqNGan8lZZLMk4ZLViJNiNu4N1eDl7kdcbVy3M/02xg+RCIlNUk8PD/Bj5I7PyppGG19bwxetFTBQx8L0Xt1xnMfjrDo42ALoiICxOIsT1VZDI7YJCePcZk+nOb+nhJCX9ODwcXAoGeSItSJFWk4+eqTE8eNeG8agTtlrAZgDYUcrfBfSMd0BrwSULie8ny33eZDrdloRul8vZ0tTU6na7+9JJY6KAx2On4C9wovbkBpWU2AgT3Z6aY4C9DiixsrtKG5FVHhopFPqsRCKvA8vLvk3SGPPUNd4NfQkltAGyzEqfO6jqiIaT6QZVP22ZpCdsV1HDt2PaQ8lWcgut/Aa+jVJV1nG/p1WZ3dLDdFLW1zsc5xhpIc8r1vx2rPN7d38dvafTmwFDKZWPth2YA0I/qYwKJ3OcMkTLHpGYMzMnp+ZvkVdcXC9LkiH9UdVb5T3HrwgO4wH5gok8ixLVxAftw09PCp2pjWZr3HZ/T3QFmqm7nqfFGTo8JqJa+ucCJvg/wvEcRjXz/ggwABY6vi40qHQRAAAAAElFTkSuQmCC</Resource>
		<Resource ID="bab96962-287a-4289-8959-5dba05400565" Type="png" Name="mail_edit.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAMHSURBVHjaZJNNaFxVHMV/97478+bNzMtXZUIMCaZSJdiUptVSuysULLVUEb9AKLgQwa3QvXu3rl3rooIg0WpFoeLGhUKIxaAtkjaZZBrnI5n33r3/e6+LiAs92wOHw/lQWzt7KMAHj3OCE0Gco3KOysqiOPeG8/5qCOEDnZhvk7LP6O5tdr5fJ975EcN/oJQySZJcTEK4HqO9WpTVlLWWZjO7qbV+FfjGh0g603nPaD33r4DWul4zybuVtW//NRiu9gdDiqIkxHjk0PvJianpz0Bfm0zThfY7Nz7aHR7eNgA60Xm/P/j0jz+3LhdlhRNBHYkCEIFKhN5g1H4ybH/51HzdbNxb+3qrHd80SoFS6nzWaFx+uNNlvz9gZmqKNE2pGYPWGqVAYsLjo01OZNv1gdQZp3Mfdy69sq8ednsoxfvtVvNDEeHmF1/x62+/k+c5WSOl0cjQacbTpseFyT26Q89PZoW8s3g/retTOsRIhNMiQt5qcf21l3nu9El6vR693iPuP9ghf7TBuXaXzQd9bo0WMPkxptv1+elWs2NCCFopfRLAOkfWSHn9pRdpt5p8fus7Vo95rj1RJ5gcffYKL8wu0koNlXNdEeka70NHKXXch4APASdCzSRcuXSRzmSb2d0fMI2E9NxbLOczFIdjDsYF4uRuiPHAiJcTSjHhxJNoj1YKgJoxzExNoFoXaCw9g69l2INDKufw3hNi/CXEiHHiV5RSaCckWpMkGiWeGCNzC0sktTpWHFIWOBGsE5x4xPufYwTtRFbj0RYIIVBUFuvkqHwio9EQZy3WOsp/OCc+iPh17z2mXqudr6yjLC01Y8iyFK0USiliPMrkYFzQqNcQ8VTW4cTvhhDuAZjtvf0bwPOtZuNMU7FsXLJYKGWcCDGCE6GsLMPDMXkzw/uAdW4zxjgAMCGENZMkazFGQoiZc7IUiStWqdUY4hnxftk5mR+XlRodjJmZzPEhrIt4gP+9sQA2YmQD4ic+BER8Xjl3XLw/VZTVWevk2fnZx+4kWqOU4u8BANBuupx8mKuwAAAAAElFTkSuQmCC</Resource>
		<Resource ID="bd5929c9-2fcb-4244-a0b2-a15980f01e1a" Type="png" Name="ug-group-icon.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAATCAYAAACKsM07AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAQlJREFUeNrUVdERwiAMpb0O4AbiBOIE1gkcQR3BCdRJdIVOYDewIzACG2Dipb1cDixyx4fccWlp8l5IHrTy3quSo1aFR5PqWJ3UFcwBpobpYJ79XT1m41JKBOAGzCvwaQUkNnsHANyCQYA24qLB52OBqE8mgKAFZaxpKVYKJL5QDCayASKX0mTDwMf30Fjz3YT8UlVkS8sUSzaItZ7WswgGkXVHU31Zs4EkwgTUKCey3Qq3vQC0ssHBcwBqOFJwywBMpBxO+GAiHT+AEwEAowqepIZhRj2xso4xWK4dHsJayEyzzMyPgjGsrBNWI5p0o+dlpio5ho3eRVQunUMg76bq7/8HxQneAgwA6CpS2FHlV0sAAAAASUVORK5CYII=</Resource>
		<Resource ID="3522e59d-ee17-42a7-8ac6-422fabc7644d" Type="res" Name="fcff8f3b-2492-4278-b298-5438f7ef744a.png">iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAVxJREFUeNrslMtKw0AUhs/EZlIjNXQhdqN7MTtBaBUXvkI3voC48V18AvEF7CO4ELRecGFFCK4E3WkXrZdeEpPxP3WUIC02gYCLDnycYU7mz885MyOUUpTFMCijMRHOXjg3KtGuVjlsgT2wqYIPT/WCQU7kTRJmbhnTI7Dr1GqHYzuGELMPSuAMS0uxtMtrYB4cJHKs3VXACXAAi6+AKeTqiAXwAtYSCevRiHo+bzzV4pdcCS36yqJGXt6mEeZxE3X8VcRjMKfXnsCGYcu7xM3rXt9/NcGWJGwr5OrE0hEIw2ab8FMqpnTsqk7/u6YtXYoSuAJl4KU5xy4c1UEBcKOKiGXwBhzw+7T87ThsvZOwzHNMZ7hRxrR0dMqLuv56rKEXYDaJY0v1gx3wPGRjA+sVzoHtYZvFqPf4US7yBRG4YQrOCY4HjeRmwTFB8OfbBf9hfOHJs/n/hT8FGACo4J/df5/hDwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="42f8971c-eaa8-466f-8920-ef66fc66be43" Type="res" Name="e838371e-93f5-4671-a205-4d4dd4b8713e_png_promail_refresh">iVBORw0KGgoAAAANSUhEUgAAABEAAAAOCAYAAADJ7fe0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkZGNEQ4NTYwMEI2NzExRTE5NzkwQjNDREI4MDZCMzc3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkZGNEQ4NTYxMEI2NzExRTE5NzkwQjNDREI4MDZCMzc3Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RkY0RDg1NUUwQjY3MTFFMTk3OTBCM0NEQjgwNkIzNzciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RkY0RDg1NUYwQjY3MTFFMTk3OTBCM0NEQjgwNkIzNzciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7uIDQAAAAA/UlEQVR42oySMQrCQBBFs1oEBElnYWG8gYJgJeQCttYBD2BpaY7iASyClWCjBxAUJGBnbxNbq/gn/MCwbKILj5DJn5/d+et5v1fY9LEoCmc9AAnIRaNIwegfExE92ZSBDYjAhPhs6jWZXGmwAkYEGqmBAfhUu7JNYhqs7WYlbIMHdSeXiRQzR6PedmLNKZZ6ixo59xjcyz0bU6IX3jvUvFm6gaEeZuX8AhcR10WnBh/Zx0mV0UF/sI4XKl1gm4S8FzL1LlNwDXdHg21dxJLO3JUMhQsa5NUuam9sdR/4lEin4KhiDW29qRmeD2ZgCfpM4gz2rp+ahhT+Xl8BBgA6iLbL9+1w5wAAAABJRU5ErkJggg==</Resource>
		<Resource ID="4b271a23-c139-45ad-8916-19645a80017b" Type="png" Name="switch.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAASVJREFUeNrkVdENgjAUROMAjOAIuAFsAB/wK2ygE+gGxAnAX35wAxmBERyhG+A1eS9pSFuKSGLiJS9EKHe94/m6HYbBW7O23sr4fYEsy/y1HVQQidcUkA5aiJx0DzfyS2tsB7iUjgIBiUjUqHPTNIIf7gzkT+WlOchJ8KCNaCG5hNx5od4YO4gVcl4sJkhL2nWPShDPyyagosDih0ObCl32LgLCMZYbbwRi7MbDvUgnIO11qgB9FzG2zhi5lGtDowMsrsku288p44TEXf4TbhGB/IrLhXeG31PkR47HKkCzpaKOUjtlDgrbqAhH5HNRUNTWURGTC860d+yqu0puFFC6p0XtURFe7L56HoCwp5nSL5q1Ludqmqb+p2eyMaL/OZOn8BZgADpI7ramXtTPAAAAAElFTkSuQmCC</Resource>
		<Resource ID="a9e0c250-0deb-46e0-925d-655b513ed119" Type="png" Name="application-icon.png">iVBORw0KGgoAAAANSUhEUgAAAFAAAABPCAMAAABLT7LRAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjk1QjlFMjlGQ0M5ODExRTBCOTk1QzFBMDAyNzhCNTFEIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjk1QjlFMkEwQ0M5ODExRTBCOTk1QzFBMDAyNzhCNTFEIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6OTVCOUUyOURDQzk4MTFFMEI5OTVDMUEwMDI3OEI1MUQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6OTVCOUUyOUVDQzk4MTFFMEI5OTVDMUEwMDI3OEI1MUQiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6TkjWnAAADAFBMVEX+65X10iv/64z94UH95oD29fDx5rr8/Pv95X37+vj/62f42V3/64r/6275+fbz3pH18uX/65Hh3cP74lz100v+6Vn+6FX29ez940X53EL+87Px8Oj/647+5lH31Fr8/Pr/6l7u7OH0zk381zn1zlHzy0P+/v383T785Hr85nX63W3o5dL64W3/63H0yCzJuGz84nXp5Mvv4av29Or63Wr/62v/64D42WH00UH+6Yj+8bj82jv/63vp5cz74HD/6oPl4sv+6Ibw7+X74HT84nnEtXv49/PyyTL/6mP95oT63kzEtXL60DL75XHv4bL/63jv4aT53Wb+6Ijly2r20lXzzTn87Kv11TTawmf96nz64Gn+6nf/64H85nL10kX21VH31Fb/63763nH32Frzxyzt6t7r6NH75G786Hj53GH2zCbt6tn/6n395lX+6nTw4Zr85WH/64b2zyr74Hru7N339vT21DD96nr+6oL62Tn+65nt6tT8+/j84nH30i374H364Gb52j774ErEtYHx4JT+6ILyyTb50DL00jD10VHRvWjyyTr08+3+6IT86Hv73T760jX+6Yr+6mj96n/64E7y8uv84oL84n3yzDT/63T2yij98K/q6Nb41jL54IH522X74oX842b64Ff41l3842L+7H/85or+5Ev84k7o48n+6Hz61jf96nj3zCzyyj394kjr6drr58786Hb+6Gr+6GD842r74FP50TD5+PP96YPv4Z/+6HH311b31zb00D7zzjzxyC7+/v771Db71Tf95Ej+5Uz///7/87z8/Pn//v7//v/9/fz+//7/6mH+5lD0zUn95Er+/v/18+f95k/IuH/zzEj95mf96Xn96Xr65Z375YL85Hf5zzL+/vv84lP85Ff41C/j38f+6Y3+///964D+6YD+6X3++Of96H/8423853T75nT+6XX09PD++/D63Gj61Tb20Cjv0mT9/vv+/fv+6Wj74GH95U/47cfy46755KL4zi31zDTzy0z82zz////SMvRhAAAGDklEQVR42uyXe1RTdRzAN7hrw+GMGAgh0CbOMaBmTtkgsAHxsJZJII1gQ0jGI4yQR/IwtEBMfCwkUEAMwixKBUUzQJ0mNTA0zCApFStTyswie1ji73fv2B3D/Zzn0Dn+wecc2O/+ft99+D7u7hmU4XGGMiGcEE4IJ4QTwrHCXxYtqnqQwMfH51NT+EBgYFVV1aKv//nRtPBpcVx8v7xsbkNDzDxpuFptYTFtDBYWanV42BlGmbwvyV0WHeHmttW08L5lCrZAKJeXNTQ0HJBKJcAIIV0Qdbg0DGNclPc2u8sWRrhxdz6LyHDbdqWiNrAPNxaRRgvSp8Z9FevlSc2xMm83t/+K2V8ihFspuQliZvx63IiFScP1Sh1qiVR6hhHE70sajFXVu7mdLmZufQ0tzI0XKwVJcvnihu+xsHVSicSa1FlLJDC9oP7e5kGZpwsoNzKQsu1OwtwKMVvQD41lGIYbdUpr6MMwvlAIywXj4K49dCYXLXyVAgGN9AajkTdcYmCwk9YEQFeEMYIC40G5cByni5XbQfRbSKENbrRpEzP9e4GRwcBwJY50XRHGB76fQPtqQftCEvBYtPAChUAkVvon5cjlfD5IsgjcQlKoY/CF8YKCQZmKCdtXYAOZhhQuu2CjI0jBFkFjEG7EgeX6CzxjZSoX2L4gIvBCBVKo1n8iMKXY2z1H3ieESuwSBtMLjBeJYmUtoH0hbKkuTl3xhGnho4ES8h6RJBxsk+XkJAn7gZLB5/cL/QVXF8pUhWu4M0La9IGSIKRQam1ArZjt2ZvjXiCEgGqv1npfViWv4a6tLCSD5iGF/gdeNqRArIhu/qDAHyIQ1Xozo1VM7oniSHeDmFeESOEP80bhrhQnDDZHi0QikB2zfmFLAihX8b5hSFkBSuh5MWY0F5WH2mSDV2uhziU5Oo4747AyJmauAXKkMLpvsREvJh9UeKq86+td4hIK15xYG3LdKCDnMkpY2PvYGArF4uRol7iIuGTuiZDKFv3+AoLnWxDCZwp/XjAWlSKyzTsiArTvsKJ1zOnSt59ECK+3bjZmaV1rK7tS4RIBfOzNX9kan3vdQehlzPySPV6tbZGHuDsr67y80kvSjc4nv4MS2u6ZbMT8knT4khxZGYkv6kpsRwfMQQrr/pgzGseodKOdsyX7dKtJOG/aIoQf14VOGsXKqL2TjDlH3WR4GYoU7tsbasjK7HOhY9lB3UQsPofsPYcSbrJ7iMSuvd3wkiStxNHg6uwjpoUvzU+zI4nKtre7PTsyHPVr+x0o4ao0+xGc26Oc7U1xkrphZJm2CiV0/NNZxylq9ilnE3R3d++itncTnEILTx4jOJld8+4xFA7Udl3kqjdMC19fuesTHAdqjW5lEktqDRG6ASm0dICAYIc7Ykk9D6MtkcLllpAN185bmsHMa1T4chMlbJwJWH6tZqZZ3FxBvQnCnzMtnLLR19e3MeW8r7lkZCz3PYoSrm6c/mvKiulm05iR0XgEKTyyP2X/0bshI2UjSvgN8B25O25sQXzHnvLhlhtPmcVqki2/mRb+9e/D5vGCASF/T/yv9z8LNd9qwO/Ozk6N5ovOzuEOyPHvNBqttuP4cXjB03Z0aLVas4W833mkUEsIO4Y1GrAihBBzhRqcu6+SeI/unRTCM14d1GiMhESSGh6vC0CnDw0N0T/DcdUBNuh0eNjF492mIlyoX3fRgYPumm/FYrGCg2nBtKmA2T0994/QMxswdSo4Cf4IwLLKzwd2IIU/wxqyh/APddFdcVEW7UppeblTQAAnMzM1Ly8vscnPb5YOv6ampsS81MzMTE5AgFN5eSmNlhXMsrLKp+NevXBEl5UFbFDG4XCW7K728PB4HDAw8ICegYEBsOPhUV29ewmHE+DkVF56hZaVxaLjxtEZgi08QxqttNwJJshZkppaXZ0IMpw16z0IyNDPLzERT1FngylmsazoRhmSTQSDAC2EYthE0EPQM9BCfRd7eogeQkAMKNaVaCI5HF3JBjPm4cA5uoJoMOR8EmLe9CFiypAxt9wo4T3xcBipdqRsin57fDMcd+E9/IC9JcAApsx/IkK41QIAAAAASUVORK5CYII=</Resource>
		<Resource ID="3ede624f-e19d-4fc5-aeb9-99a58aaf3b41" Type="res" Name="resize.gif">R0lGODlhDgANAJEDAJGRkZKSkv///9jm7yH5BAEAAAMALAAAAAAOAA0AAAIfnI8mkS3Q0opoUsVUtIMf7mFfVpGPY5qiAolg2sFrAQA7</Resource>
		<Resource ID="d12698fa-888b-4890-88a5-42863f2bafca" Type="png" Name="outbox.png">iVBORw0KGgoAAAANSUhEUgAAAAwAAAAOCAYAAAAbvf3sAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjc4QzlBODYwQ0M5RTExRTA4RUQ5OTE5QTQyODQzRUE0IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjc4QzlBODYxQ0M5RTExRTA4RUQ5OTE5QTQyODQzRUE0Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NzhDOUE4NUVDQzlFMTFFMDhFRDk5MTlBNDI4NDNFQTQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NzhDOUE4NUZDQzlFMTFFMDhFRDk5MTlBNDI4NDNFQTQiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6dkG1IAAABe0lEQVR42pRSzUsCQRR/M7OruxV+JImQeEkPLgYRdIqColMI/QEdjG5B0CkvoZfs2Cno2qmyi0KH8BQEHTsWEp6CagsjWj9a13ZmGqNAWgmbOcxjHr/3++Ahzjn85+Ben49ZbV7Pant9Ae4z8aggzWMM63db8Y3ffdQt6SGjeRnnV16VRGWMoGZRatk8GcmVSw6G+k7ChRAUBt046iIIRA2qjImEUf4tlxh3AATPqHhOPii/+CEVtUkZTwsVoZ6Svj3s+1WyRoSkl6ZthLfLvu6+1CsJm3UYxe2RuAMgE3RZtyjpgIQX05FSYVk9HltYXWJtE9cYr7YbzQhm7Gu2CAlhRb4OqkpMUjC/KR6dSRLDk9F4QmW0BUa9FT4vFQ9UzjYx4fzdYruzi0ktMOwDIrmhcno4JVnUdr0+69A06uAN+GF6Zi5lVPUUF6Y9Xj+oQEG/rYDiD4LJYQCtTKB0aAhiQgT7c4cQ4KcGVJDHDTGCYaSfxaMMqp8CDAD3n5pxxi2NIgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="24ea8730-c6e1-4ecf-bc1e-97ebfd448468" Type="png" Name="ug-magnifier-icon.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAQ9JREFUeNqkk01LQkEUhu90xcTMTWBC0iaTNiLkR7tatWjRj25dtC2oRUJf4kIww4Ls9hw5I4fL3AQ98DDM3HnfmXdmrkuSJFqnnBg453w/B/uwB2WYwBv04TstnmuNwRb0oARDFRehouIbGGUZyMqnsiO4hrGZJyZtba/gyxpEegYHcAnbGVE34QKa6R14gzM4WXJeIj6HDWvgO6XUtkP1AXmI7aA3mGrG/0q+/8AsZPAKVc0aqliv9h1+QwZP6twJmMgNtaAQegv2HexAV8ef4VNFNW193cFj6CH5nHXY1QOTzANduZ42CRnYaLHG8pkP4cjMuUf7kGWQVdbkBe1ttMLf2IBj2eUiwjr1J8AAi05rdiGUY0oAAAAASUVORK5CYII=</Resource>
		<Resource ID="8037310d-b527-4072-af20-28295e7d678c" Type="png" Name="rules.png">iVBORw0KGgoAAAANSUhEUgAAAMgAAABQCAIAAADTD63nAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjg1QTAxN0MxRDIxNjExRTA4QTkyOTdGRDQxQTRBMzBDIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjg1QTAxN0MyRDIxNjExRTA4QTkyOTdGRDQxQTRBMzBDIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODVBMDE3QkZEMjE2MTFFMDhBOTI5N0ZENDFBNEEzMEMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6ODVBMDE3QzBEMjE2MTFFMDhBOTI5N0ZENDFBNEEzMEMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4nKOs4AAAM3ElEQVR42uyda2ykVRnHz+W9zK1z67TbTqe7XXYXBCQiGG5Z9YMmKGJM1MRvGJVovMXwiQ8CISGSaAjGREMMGvmAgaAfMKBIxASjiKywssvS3e12S7eXaafbTuf63s95PDPTaefeLuGDvj3/vJt0Z95532TOL//nOc85zzsYAJCU1ActIr8CKQmWlARLSoIlJSXBkpJgSUmwpKQkWFL/B1JkgVRKOpaUBEtKgiUlJcGSkmBJSbCkpCRYUhIsKQmWlJQES+p/XXJJRwoB4/bamr28Wjx5qnjipJ1bEy+qsejQjTfEb7kpOHVQHx0hAf2KrokZY/Kb3b9IFQ1+YaV4+szS669Up2e9YpGZ1g4ciqLGY8HDB6O33Dx60w3hY0fIRFqCJTVQnDvPvOY+fwJmVj1wZ6z/VLwCwbT7RMFHCPFj4KnpcfWuOwNfv4eMjUqwpHqIvbtoP/4ie/PiVqKNaZltzphve+CQ9rRb5EkYwRHwoiJg1l+hx46GHrxfPX67BEuqlSluP/ua+8u/iCDYNonDyoozt2DNEEw67GoCvHHE2yjRtOA3vxb8wXcRJRIsKQS2azz8HH/pbdQ1Y8MIA4JZ63Tey1G0FRA9hGL1IAh16+qQ9vm7wj9+BPdJ6mW5YR/J/sUf2Z9PoV51AEEVRmRSO6rjECBey8EEOggy4KFeVAk5L/zJeOgR1MeYJFj7Rd7rZ+1n38Cc9/UzxEM0elA/hmruVYNpAlioTlhfUn//vPnrpyRY+zgI5grGo38gDq8Fvf4HBxhW0qNqxgE3xZ0UOEw41sDD+tnPvdPv9MixPM+T37vfsQLjoafdF091pOC9k25EHDBX7ZlRbip9gmCHlA9fG33qpzg2JMHaXyr9+3T2nu+NuRar2dIgkcy4cv01JDlMaQrZAW8my2ZXd70+xZQ8cHfoyx9vo01+777X2t//tuKWQtxNIOjnIvTYkcC37lXuuI2MHdhxuqLB31lwfvMqe2uuv8NhjEnu5b8e/tJx8afMsfZNGGTMnL4gHGSJ6DZWMKao61A/c2fkt09pX/xCK1U1aGIhevxDwSfu1b76yXpU7HEIu8o52cW3X2WGIZP3fSQ3X6hMnycILISXcI/hVm6/NfzYoyQ13PcSmqLd9zn1K3f08DlEy6y86Jxnm6XK9IwEax/JWlxy1tbrEKA8ohuItC4H4mAg9OD9OBTc9Tra9z9LpkY6giBDfN4+53KDIFx865QEax+pdbzFYGcRNVpGXfnEcXrNsb1cB0cCyt03t+fsyrJzqeDlFKyK/1bOTEuw9pHKp860eAzyMF7ESqOcJaTe+rG9X4pem0EK3aYq7+WzzkW1uSHCXFhilepOhJUb/fwtZz3fYSQlRFYRnWisxcRiVwDAUABrFDwmpoEuuJfsaQCX4K3CgqDKrVRIOCQda59KOEwO0xKqZ/IYX9mH6+cTRC7ZswYrULxTruoAVIK174TrdYJFpHgIXRFWUKdKwcqam1tzLil4UBFUFkh9ro888+QHdSniuoQjg1sLTq1+MdiVJFhSewfLUTfz58mCxUsK0Xinn0mwpN7fPEBhrjV7oGSPoDjuiqJ0KKRwIsGSeh9pP7NjhdENXTMj3du0oBxgXK4VSr0PrjSdYFJMFV3FabDUdmBAQW3HsWQdy0/iK6voX2eVmcv1TaBieCl54gV8Kdd2DobC1FUkmsCMqXd+1LsutWEsQ/+dV1CPa0mK0dIy2C5SWCVZjF1OEsCt+7VwoUIe/x3EIohxJN5zHEeOhz/k/eN184GH0fx6LDdMGe2zS4+VR8fcsQxt7lHGiCw5s8vOLO2VF9W9CA4jloSdXYJAIJiPRorRPvuWuauoMhT6R+aPfsKXV5nuVuOlPv7DzFDEGR2jbWEKxtWpGE1x1GN/qQBnBHgrVTUWAVuxsq1bPQth4tLlsXEJln8Ey9naqHNsR6tmpNqVQIOrKEY6oxC1tVFHGJKClYP61SoOQLsDCZjCwNOIQRc7QKE6XGSEdbHFqvEkSo5IsPxEVhMAwGai5CpuK1sCmuroOAkPde9854hHSGxCuwrajYcgmERM6RXwBL4s4BjxcjtY3NEDTnqCyFmhr9Rc+BOhiiusmizyHSR4NZZgw6OkTxsgQ3xEzQwrY2yrk75mV+PAIs3O+h53Y8SKVq2g0WQLOCaV8QxRNMy5BMunjHHihk0z2giI3FE1ezyjDFpyrs3xJvVjQRKGuqfFgR9AnO92n1pApI1tOLySGsGxRKN1UYLlp1DIWg8xwGZ809GqgIgxPkn1IOIwoKlQvBcgkUn9ao6wyt1JcDAwaL9m1y0YV+1KYgMh1wpF3dE0ad5C1rF8VMQiUSBa2+yNciOFqDfCYlHs7V5XEnEwSofHtamAt6pyvsfGQDsKFa45iTQmmDU/JJd0/CMaug0Rt+0VTMuBStaenqzMKbCn7lMRRCd4RD30KTtvKnszHYKVOfWi6p4cLe9ULCRYPgKr1su1kxSRWnTDS/aFvLehATqE9vBcIeFx110bf/JXOD0SeGO2+p0nkbOLbSlY3fAur1hzCvIiLcm+zLF8lWS1HhjTRWeu6OV0rF0mWh6rtFdTYesBhAx9+z5BVY2YW48qn76hXzth4yAYW9x8z3qXijQfa0tEY5g2WhclWH51L2XTW8/atWaHRnK+jKk50EhA2JWl0/hOg6ESoAgPJgTP2+dtXiGYUgQVRFaaSEmwfCiCiMOdeetc/dlppDHMFsLL9c3EuA9VGEh4I9a60UotFhDz+u2LV7Cy6mTX3aXtPcriLquIbtbcT4LlyyJWo9mBtzU7iL8KiKy1N6y2ghUoRHRHawPUsQNrOegFFkW0wqqLznna8u6WNaLarhoJlg+DYM5bXXcXupsdxGCvYKWCOp+NDATUajBcinRviNA31tRiUeRe7eBiD/H3rLOMWwTRjltYGAu2JFj+CoKYGsxcsM5ixLt3D+N6aFzAtK0/R4RAl0TyUQy4h/cBD64sE8dpe5IMVrLOfJHlaK9GHQHaBiayQOqnCFhr7pt3zrlgNNree456LcVGdLJZfRDDH9qMqp7WZ3MVIY4ZWM2amUMt04KNrDNHMe2f5MlQ6Cu7UrPuYsFd6UfVNltrmBbqAREI18rBYDU88Nl9WCvk1c0NERDrz/tz5+2zAB7pDw+WYPlJZVZcti+QXQoEWw2rS5jaBBRbGyrE8JZzDfgECuVWFNPEhC44FwxeHGBXSJYbfKZF64IHtjAVGFzWrI+6gUiWK6F8FDHKatsZthaWWxd++M6CM+Kera+ubNrZNXtBTAl3vYVc0vGPwpvVzHoC8F6TZjEZPB2zK4kqafnEjZoXa/59MWpkxzZbOCsGyuT6jSHU3kbRUxIs/2g0ZI+wCOJ0bw87ZnY0UYjzgjPXmi1BSwzjKvKCO5cSvjWCrJSu6KXorreQodBHybvmFJIFQLuGKWg00lTH0hn9aIKkABiu9wV2m9326xxQFPgYQDlRtgJWc0LZfxlRjod/BMQdMnu1UXSdiKCcTuNgkHI0qV+t4+B2GwU4OxtvwHWb5yMxz5wERmo/jQLVZLGWmA18Vo0Ey1cS1mIkSo7qDBx1Vk0kUSJFGOOIh+nQhHZku5q59tIrWycZxuY/TzSo4rX9714YAW9sqA84lXhp4C1A5lg+My0MCheOoqwNk95ZELcDQWdsgvKttznwYXW8xPPrTpZguvz0c+b8QnDqoKDKXFxupFZJxEZamnswI46wRrMaNEI9ky3hf9iyLDkc/lDlxtuh/sO7QHizU7lj1IFjXO+vj+OWbX+4tvHUPmecNHmpY+1PWJSO4Bi4nYV5ga1HoispzVO77sKMSEwu6fjIrWA7IGIzXlEtTbeD7Tzw8sgYisZw+2ZSYTAizZrUjs5ap+q/L4e3UyuhDHg66uqS5sIamZEsqWvJ9ojIHVU10xmZY/kzIGIC1eFSe6cyM8MRNjq+HQTbTAa8hDpyQDvU0opYry+AF+/TWljvMLOq0UprsiU+bByYoMGQBMun4pjpIsUuQiPWIfCoYqQnCaGoT4wSsSutTkVpktdBEv8iiKcHtxYCMuNlW9vef8WMxDBPpmTDqt+cqsNRnKhhhc0GaJUD4yQUGfhDmKAQ7aB+jUp0hoDW6wuDi621nTaUG8NFTnjtl4H1oD2Wrj1xBOSs0E+1BixMx+0Y+Wp8XTOH7aEMT6XrHcuDik/i/SGaSmtH56wzGXCH0O6thZghV69Uh3C4lDLSU1QPI6/283VYzBrlkPhDxjd+6J042+lbAiRT4YG4ommwa8d8A0bESrARFSfveWZHAHM7SIbi9VJX/SoSLP8EwpW8+9jL/M055HrNOkJtkWbGmQbn0mHOyN4WEcVZEfOQN3w9U/smZG1UYVrkhVnz5KRXTTTJ+q8AAwAxmWMUN1abDgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="4b65916e-eba7-4d1f-b158-dbb76968968f" Type="res" Name="menu2-128.png">iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAY1JREFUSA29VjtSwzAQjT8MaYGSKwDHgJTQkSPBQcgVKOEw0KUmFLbyntkVG4/kjGRNNLOj9dvVe9ZnbS0WJ25Vhl6LMc6M64xf3K0DjCEskPYHpcyQxD3suq7rNYf3fb9B9wXTGOEirRGWq6ZpPmFO7AP4pcQ0Rx7ndWccDpG1CPXoaRR+Fuoh55hM2vpX1VYIuRXDdlT/2DGtpLh/MezfC2b1Q6NvWHyOwWa5lvAGTDRtNqZYkd4vpbCNn4uIWJLQTEKYHXPgDxt/gMQfSMw6XGL/Vkzruu4d3Q6mMcJFms6CYhuY1iELfykKmlNEUOvwyYip6KMolK/DyKvbD3kkJR3W5Rov6RuozoVOcybZ5xwaJ4fmFwoU44Eq3kKzCGFR4ZwvvF0V60dFcgN2JncguTVENmbgfNcT4oP9itLY0egbSp9jsGx3qLG2bR/GdQjsXljL16FzTv/urL2h/oBdZE9jYqAertlXjJRTxj2ylygnl6hv4BqbeOe8UOhghLAoe8oMleSkF2EVze73UxRRXuV4umcAAAAASUVORK5CYII=</Resource>
		<Resource ID="e6c2e4b8-9823-4a41-ae6a-b6d82efb0896" Type="res" Name="labels.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABA0lEQVQ4jaXQvUrDYBjF8f8T0jswQaSjozcRinuyFAcFN+/CkFyDd1AEt+QO6jVI6eRcypvdSXocTFprPujHGd+X3+HwGAOpkvRS4t4M7/+fxBfwYgN4jJhjXO9BWCEw48pg1FlQxekY2rguiGo07yyokhrTxnUWAgxuWgUH4L0YjLbHORY38c7BAN4ZeIW08RDFCXgNur0o842H8XEUldYSk6DIl/B7gyfg7SCLHNgkLLNl82YAVZz6GDPgbsA7IAqKHW4WEJTZN/DQt0Tg1IG3C5pUybOPbIbtlkhyYNHf2b0FAC5JfeDVYCpwSFFY5p24swDAxalvxqPgPSyyzz4M8ANEvmMc4IRHkAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="67549176-ab7e-423f-ab49-8315a0b86c9d" Type="png" Name="add-new-item.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQ2QTk5Qjg2QzQwQzExRTBBNDA3RDU1QzQxNDA3NjBCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjQ2QTk5Qjg3QzQwQzExRTBBNDA3RDU1QzQxNDA3NjBCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NDZBOTlCODRDNDBDMTFFMEE0MDdENTVDNDE0MDc2MEIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NDZBOTlCODVDNDBDMTFFMEE0MDdENTVDNDE0MDc2MEIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6n6dqpAAAC10lEQVR42qRT3UtUQRT/zdzr7r3triu6fra7tohQECgaGSEkRCFEPURk9VK+FUGE9Rf0mok9BVn0JthDH2QEJUUlSdgHfiW2WFqr1bblft+9d++d6c6GX1C9NHCYOXPO78w58zuHcM7xP4ucGCleUbjF4fRStPqOkZfpgWbG2VZxTwmdbHF3vB6O9XM9wUAksoKR/xB0/6NXty8F+M56Lw8KMJL0M4ZwJ6zU4pxtv/evDLpcX7d07w4eJ0qRa13UnJHB0PwNnq2ZOW9n0LN8T9f47JIX/RfbQh1EKWdIlYRRVVOJyspKxNUw1AqGtrojhCxUXxS+KwGMnxKEpL+wC9uCe6in1oBckgGXdTRVtKO5ut0+5yCVpOG1bS2b9lLhu4xb/gNfmWNjq7+uGAkWAc8TZI3cSmrJVBx509Y5Q6CuFGWxja0pRH22KSYbWl74hGoC1ZQWadgs70WD68C6+k81Xivsw7O3EJeewV9RTcfmF0KFAObvh3SpyLAL0uwj+yvnDDrifBqyw4SN0ws0Ktwr9plo4nPSQFXxpH4dY5k+ZDMMJ0MPCsDL4+1wKnkwbqJMkvA9EUnauJm1LOhzH5f6U7kYvApHqZvAra4SVGI3l9+vIhjwwMpzfJj90S8wwibV7CTQ0gZMjbz6kv5+LBQo95SqHhimBT2rYDE1jSQZQ6lHRVLP4v7TscV4hB21MRmBkw41ncXjvvco36FnliL5odmlhX2GO+t1qw7ozimknW+hkTTGv83i4dN3n75O5ffJDvphoseF7WUHV1t55ALH6dNnJp6/uNr45GOk682mhcPOYlJfqC/Jw4k5ftNYVHtaHMcTfd198HhWZ0FMhtMWtbe3dwNjTLUndMCWu7KKDcLJ1CDo0Sm1fG/oFZcsy0LPig4XAcQ85zo7O43R0dFUNBqlmqZJpmlSy7IKYyepErdBTFEU5vP5rIaGBjY4OFjg+5cAAwCa9UD+Mfu8bgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="0cf03b40-cb5d-4cba-9f63-37110836f398" Type="png" Name="logout.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAVCAIAAADTi7lxAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkEwNDgyNDgwMkM3MDExRTE5OUVFQjA1NDc0RjA3MkRFIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkEwNDgyNDgxMkM3MDExRTE5OUVFQjA1NDc0RjA3MkRFIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QTA0ODI0N0UyQzcwMTFFMTk5RUVCMDU0NzRGMDcyREUiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6QTA0ODI0N0YyQzcwMTFFMTk5RUVCMDU0NzRGMDcyREUiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4h0o27AAAA8UlEQVR42qyUzQpFQBTHMbakhoUX8LnzAt7Y2/jICyBZoGQj95SSxuFy7/nX1CzO/OZ8y+u6ShRS4SRJcm/EOY/j+N5GkYj0DrQsy11ou6IoMgzjbMQY2y5t2/Z977ruF5CmaSjoqDRNoT6e5xHkKMuyoihokn1m/V41gaWeLaqqmucZfTwMg8CCfPm+j4PKsuy67qFfeZ6bpmlZ1r8NCe4ABffItm1d19Fn0zQ1TXOkbHHhIMdxrv6v63oHHSk46ImCIBB6UiGhiB6N47iPlTBrMD3bPQxDdNZkaITn+wimH/3pdWhXFMrFJlPt7I8AAwBCj1zF8477SwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="bdd14bc5-8c5d-4fe0-a1bd-090bb5fa8100" Type="png" Name="acl-group-icon.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjg0Q0IyREZDRjY0OTExRTBCMENCQjM3QkUzOTNFRkFCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjg0Q0IyREZERjY0OTExRTBCMENCQjM3QkUzOTNFRkFCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODRDQjJERkFGNjQ5MTFFMEIwQ0JCMzdCRTM5M0VGQUIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6ODRDQjJERkJGNjQ5MTFFMEIwQ0JCMzdCRTM5M0VGQUIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6Nuo4BAAACPklEQVR42qxTTW8SURS98wUDA5RaoFBSx1UJEkCCxJX/oHFTdyTqQuOiivEnGONebDemSzHapGHvym78iGLpok3FtFbTggZsLAPMDDPzZrxDbBNCdKG9m/vycu655577HmVZFvxPUCdGIIri7xsAk5iDzLGcnd1gQQRxOp7riCA2bPfz7gDO/o1d0zTO4/XkfBjEJNCROl5ZljcpijrG/ImAx2Jq7vIce/jz0NdoNMBW6nQ4J8UzYs0yTWOEwDCMAcjhdJwWPELCRVz0/t7+lxs3rzfv33sQYhgaZi/NGplMxlAVZdSDbDaLo1ocIeSi2+0WbJndbte4eu3KWiKROKcTAyrvKq2F4sIeMUirLbWHFRTuFsDr8zIryyv0xsYmsAwDkakIjURmqVRqWibw69X1QDAUnJR78mssaQ8piE5HIZc7z+fz+XTlw1qo1+1AMpmSah9rtUg0Mr30eCnM8zwSs/ao36vV6nu7jj5SoGu6682rtxdKT56ykXC4FYvFpNWXq3q5XI6P+/0/5m/Py4PN6BqYpjkx4sFMbCbFMIyoqiqgRIWmaQoN5TmOs7t+Ky4+bD5/tpzmeSfE43GtcOvOiyEPsGAKXQSPxwOCILhsYpqiwUDzpLYUxvudR4vFbWxAkPTguO7okEwlWf+4H/r9PnQ6Hej1eiCrMuBKIZVOUvV6ncLHtEUz9Cfc1MHICDtft8/iozklK4qAmdFxVnTc5J28MuYfkwyDbAUCEyoqHeAD/uAJf6Z/jV8CDAByEA2WOZz+tgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="9c30d469-3562-4c65-bd17-3f8cb0849cf2" Type="png" Name="body-no-subhead-bg.png">iVBORw0KGgoAAAANSUhEUgAAAAMAAABZCAIAAAB0Xwl5AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjIzMjIzQzExRDIxNDExRTA4RDdBQkUwOTFGOUJFRjcwIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjIzMjIzQzEyRDIxNDExRTA4RDdBQkUwOTFGOUJFRjcwIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MjMyMjNDMEZEMjE0MTFFMDhEN0FCRTA5MUY5QkVGNzAiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MjMyMjNDMTBEMjE0MTFFMDhEN0FCRTA5MUY5QkVGNzAiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5nMlP6AAAAfUlEQVR42qySSQrAIAxFTcjejfc/iEfxFgG3aqGmWEpaIzarhxl+BiHG6E4DZu5EOWeh1londJdpRADwzNByR9ztzaqxHLejZu2Aaq1CiPjuVXf16Z3o/nwZ87zKdrXK67ufqGneEIKQ916olGK6wsY/WK8MY46UUqdDgAEAqZJiiIXx5PgAAAAASUVORK5CYII=</Resource>
		<Resource ID="97af72e7-0479-4672-8e73-4f080b6fa7f3" Type="res" Name="1447603481_checkbox-unchecked.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAJklEQVR4Xu3TMQEAAAiEQLR/53cwAusT4DYGCCYJZJEVKFDg0zsf1TMEGcWLZyUAAAAASUVORK5CYII=</Resource>
		<Resource ID="54fea75b-527b-44e5-85d2-2b50dd4ff611" Type="res" Name="Deep_Edit.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAB30lEQVR4nJWST2sTURTFz32T0WgXJbWxCIKgWLpoSkutmqJYBxIsLrpxVaiLrsRv4MaNX8GFUKiIOz+AiihYlEK0DbT+oSK4KKI1TSZNbDOZP/c+F22HZExSelbvvfvO7x7ue4QDlLWuH4mZ5rRXd1++XljYiNbVQQACTQeeP0eK8tfG01Pp0RFqrBudzJOZzDkQ1ut154vrODc5CGa06NN9vT1vfxc2vY4JspbVrWLGK8M0V+PHu46RYaSd2k7eqe3MchDc75jAunqFlGE80iITwmICuBEzzX4As9vVak0Rvfljl38AQKwVQERuBYE/szcD0tAAkDkaj+cSvcnBxaXlcJj/AcYvjJ5i5ofMTETUNDCt9S+laKvxrAkwNjSohHleRJIRLwC4RHR7cWm53hbAzHe11tndXUjQIGgCHijDWIlSwzbDA/1nAHwG0NVQ03vr90qpifzXNYkCwlfYKJYqyUS3zRxYImwKM4QZIlyF1pMr377bUXNTgn2lzp8d8Fz3sdb6IgAoUnfW1n/OtTI3JdhXwS4X+070PGXfJ2EuKqXulap/2/l3E1weGaZE8uT8dmXrxbvch2dtb7dQ+JXLm4Upz3WfjA2lLh0a4HtuvGKXnjNz6uPqp9xhAP8AGJLHYaqkJrgAAAAASUVORK5CYII=</Resource>
		<Resource ID="a11e1662-a3a1-4098-9087-e7c7511b662b" Type="png" Name="logo.png">iVBORw0KGgoAAAANSUhEUgAAAOIAAABPCAMAAADBTOnVAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkIyNTA0NjQ0Q0M5ODExRTA4MTgwQzZGQjA0RTlFNEIyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkIyNTA0NjQ1Q0M5ODExRTA4MTgwQzZGQjA0RTlFNEIyIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QjI1MDQ2NDJDQzk4MTFFMDgxODBDNkZCMDRFOUU0QjIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6QjI1MDQ2NDNDQzk4MTFFMDgxODBDNkZCMDRFOUU0QjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7gz4VbAAAAM1BMVEVAQECAgIC/v7/v7+8QEBCfn5/Pz88gICBgYGDf399QUFCPj48wMDCvr69wcHAAAAD///8kxSJdAAAFjElEQVR42uya2RLjKAxFxW7jLf//tZN4ldDFTvqha6oLnhIH2xyQdCUIvf75Rg2xITbEhtgQG2JDbIgNsSE2xIbYEBtiQ/wHWqRPs38F0dnJvNtg+7+KaJdPg4iBymaCGJzuQJ2xtbmcx+Vsqat0s2adBHW9X69XH67fZkw8Pg/rKyNCnBfQxnD1y6jDkowDQ6eyG8Hh7t3UdbNdN18Sdp/OQdwLfZEgwTLGYjwaMpYWCidjBmPzC7Cq9wP8T4jT1rtnvB4ijhUCfxCk5anHbjW+MllqufsFo4TlJ8QsJmpdCYKINYAluYcOZw8xPt1UXAuVH9JviCRWMf0B4v6mfnnqwa3mqZt0f2h4XyMaMU/oTmKxFi/SU4dlfLRSMdHKuyO+/CWi+9xAjhv/E+L8jtcdH2osDHCN6MJ3T0vlV2l6X7Ydu9LJN5/XhWzE5UfE9y2X9iJZ3BHNNZBravY2yQ70UstqhShtLQDndJglKwn4DVFZ+QPiHnBd4UOdChuzQnReE/I72cVjPqiM8aulJfpTRKOn8kAkRUASkdTkWoVooAz2FUtd0TeDj8UYB4gYw5EQrmkRRJxRMlEiZoyY7hBdKZ3eARHgcenw281XByn73mlEZ87H+C7xpdcLM0JEHdpHaV7a8UJp21Nluajwc+4JfZDOGLa7FWLwVZkVCzMioS0Rg/JFq7/KkXfKOSNIOQvZ2IxgCzpernivEDutQJ14juG8M0K89auig46UtjTI9Kog2uIq7YOKPCDSq0Q8CNO7vMH+MvCFMQ+IfQmQCyNU+kBq3fMXiHmfb+Kh9vgiEfd35W0iNtvepOz80XLeCSHyUbxboFL0mKispSJIw20tVcOIfp98w6wuHiYgEGOhOFLeDTcDqPwKEbv1XO8QbklqP/TH94lZ9ln5CUQqNHUSkSvzbwYlihsiLQ+lEj0S1hEzCkPToTbuGlV/0nJEW9q+ERFKJA8G1tj0FcH4XBBTJVHDojGfIxvP18znp8QQc7kysxAGr2QxQcTqGobXba01PMrfVdzLTO0qXefDGXfZL0oip4SWxAWdr9AviBRfKloW+xXuEdHBqviCCEdCEi4uhhhUkEw6FglZ7BAiLgYpFDp9XyvWECcUaePlBf1xS7oyP9a7U08UzED5zQPivn+YzeTU7uRqax9RmT0Ydg1xRmGI7wWm7SfLnsaerFKyCOo3qyauRDQ4UUZxf3tZ73UmU8vfEnJFvjZ7Jp5ZoFoKm81qup0Ymb2TxQKRnhCzsr5ei8aE96u6oswY2UJ0Pe9xIeqdikEYirDjAcriiphvtzthtegVj8WFRkKLK8Lkal4089Fdr7IK0YilIK388NiGnjYTdAdwy4LKxQ7GU5E7X9PVvb5AlMIgNhUzlMUV0eOtB7CTVKSG4m0ZLOOwQA8VHnTd2H+NaOoFMUHEWup1gxh0vOEbUXnLyHJly18kluc8dK8aIr2QoipX9brM2RFjdatTu9nNJXkm8K7tUnXD34vobdX8XgN3RSzetwbtD7L4QbS11OuOB6z83XayOPnoCyW4yX32eRuKDQ5pTJY/dkCIA1IurBkjWLKAVP72bGcqpptKJ1HZzTpwF1I500AWB2ujQvxBFgmUSPd7LMUZHog2+/FsV66yEabh9zp8PJKwXsniVMEgPtp8e74lYgael/kpWWer5h5Osw06uzVW+AeQRXiE+geyyPMbIURWn0PqI+IF6xdGdKMsfUTKkbj3THVEjw9QUMU3gSOJ4oFBTLsHB/3xzmJ0nHRmf3+2TGKSVbJ4HjiMOqKerWI7sEP9LmfNvJUrIeI/c3xaf/dvD9nBfXb4z9f0gzFTzwZxvmQaP2JlYvtrUUNsiA2xITbEhtgQG2JDbIgNsSE2xIbYEBtiQ/z/tP8EGACwaiCaQMAqxQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="69b8d848-09b3-4b80-a1eb-a28054feed31" Type="png" Name="ug-delete-icon.png">iVBORw0KGgoAAAANSUhEUgAAABwAAAARCAYAAADOk8xKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAATBJREFUeNpi/P//PwM9ARMDncHwt5CFGEUfg4MjgFQ/EDvxr117HU1OG0jtBeIcoNwaqvjw/+8/c4FYAoiPf/Dz14SJA9k6IDEgFgfi+VTz4f8fv62A1BEg5gfi4+/dvIyBNDMQHwNiXiD+BMTWxJjFSGy2eGvnogekjgIxDxC/A+kFYkEg/gzEVsKH9lyhqoUg8NrEDhScB4FYFCr0CojtRM8cuknVRAMD/779+AsKYWQhIP5LihlE+/CFgr4OUpx9gAYpKE4/ArGlxIOL16lm4TMxTWTLPkm9us4PFAMF7ylonIItBYpfp4qFT3iVvwApblACkfl8lw9JXB+akDDkyM6Hj9nk2P///J0OxK/RDQTyLwLFrUByQJxKtSB9xCjFKPf/GVWqFcZhXz0BBBgALnON8+eYl7gAAAAASUVORK5CYII=</Resource>
		<Resource ID="481f8fe9-bef1-491a-96da-36340b0b2346" Type="res" Name="f3351c8c-c6f4-4122-95d7-d3e11581405f_png_ico-forward">iVBORw0KGgoAAAANSUhEUgAAABwAAAARCAYAAADOk8xKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjYxOEYyRTVEQ0Q2RDExRTA4RTQ2QUM0OTFEMUZERTc4IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjYxOEYyRTVFQ0Q2RDExRTA4RTQ2QUM0OTFEMUZERTc4Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NjE4RjJFNUJDRDZEMTFFMDhFNDZBQzQ5MUQxRkRFNzgiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NjE4RjJFNUNDRDZEMTFFMDhFNDZBQzQ5MUQxRkRFNzgiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6Ku/D7AAACr0lEQVR42rxUS2hTURCdd1/ykiZ5zafBSAz90ZI2pDZaoxs3blwZlyLiorgQXQnibyGYpagIrhRxISgiulDIsuDKtP5KqVYoREJrqMY2iUlsmvR9Emdek2ptbNMuMjC8++49M+eeuXMvV6lUoJmmqw2OhcMh/Li3mefbs3A4siVCVVV3nQ6F7gb7+sDR2toQSyafh/fT03A/Ejnb6M7YKqGicENINjY1BfPZLCjl8oZOGMJSDMXW8piHL39sOXnxzqYKFUVhVosF9ni9MDo5Cfv9fnBYrfWV5XLwDskIQzGLJcVuOH5eOw6OcT5b145O8/CV3UpJOrr89PavugoVWWYqNlArJtjb3w/RiQmYz2RAUdU1TnO0RhjCUsxsoXyNN+hi5KLbsdh9OCC29bkPMh0/hxvx11eIhFQqGZOKROrzwevxcTgwOAgOm21FGZbxLaqnOcIQFhgD11CPYO/pFv5UC2Bn0Ktz+rvE2Ms3USzxw+Ljm+fWKJSJEHcrIZpcbzCAx+OBKJImUynNaUxztFbDUYwiqxrJvw56AUwuO8/xbN86hbIkMbWqUJJlSOE5eVwusKOSMSQiCwYCYDabIYlldeL5Cno96DAmO/sD8vmVvrF724E3CqCWJEiMfMjKheKL4qMbp9YTVhUWSiVIY+nasIwclssiihAYGNAwNCajRkmm0xpGbzSCMvd9JJ0ojGpl/xS/avN1sZ+f4/R7BJsmWvcMUSFfRLLkwgI4HQ5gPK+1P5lYvZe1f1qzIjlhDUhokXOvlp8/uE5rxhMXLuViiS84PIRk6f9ei2wmI8RnZqCzowMEQdj0AreYTJpTDMXW5ktPbpk2iuNqb6mlt/cMM5nat/OulZeWvi7GYvcawa4SchxHu7T9rbpBo37MYh5pS4TNMgZNtqYT/hZgAFOSXrtQX5LzAAAAAElFTkSuQmCC</Resource>
		<Resource ID="2f14249e-70f7-41c9-a277-1511b7705c4e" Type="png" Name="settings.png">iVBORw0KGgoAAAANSUhEUgAAAEAAAAAvCAYAAABTy8xRAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2RpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1M0QwREMyNDJGQzNFMDExQkE2RUE1N0VDQjdEMzE2QSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo1RjZENzBDMkMzRUQxMUUwQjcwM0E5Nzk2OTY3MjVDOSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo1RjZENzBDMUMzRUQxMUUwQjcwM0E5Nzk2OTY3MjVDOSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdpbmRvd3MiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo1M0QwREMyNDJGQzNFMDExQkE2RUE1N0VDQjdEMzE2QSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo1M0QwREMyNDJGQzNFMDExQkE2RUE1N0VDQjdEMzE2QSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PmEzrRsAAAmZSURBVHja7Fp7cFRXGf/OuXff2Wx2ExJICA3lDRbLWDqjpdUZFaszCnSG6ZQ+8MnU+hYGX1OHamkVHHyNY7Xt+EelWqtQR+0fDlXbiijUgbFFwUApCRACIY/d7Pvec/yd3bPJZdlX2LRE8WZ+uXfPnnvP+b7z+17nLpNS0tV8cLrKD7Nahz/Mvr7sd4Ix6mQ2TRP2gsD55jWeuPs2Ivk1fPVb3eVNwMuOW9LAI8BnJzRL+dzUY4AAIkwGW2zrEUFiXzw8/LBtiuVEbKtDsbcU3eZRtxW1Lawi/dQzATUlr8GpXVghXN5BkoVtV5bizaMkOVuKtseAbwGfLnG74bj+CLAf+Bkwo+RgTLyuCmDVnGCxCajeDNSfLS0KSVsxYTeaVue+Y5KCA2HyjgY0R0oew8Au4FVgi4Mtx7RCXnDyLBsKkWv4mSnDgIBkbFMLk/O18OqIjmkTiEdiZPkspaVyz2gCPgw8WOSD5mr/4CuoWpguSrbPnDomAIEfCDDaPl1kXwQTPoem7wHrxunBSBgWxUPDuBRaJRM6FDNSmpuU7JxJttd/ZaOAg/p3G5xv7JBZMqVshXg7Spsso4w3RcmmFPmGAsrGah3iFeCh/FCCMpEWygbDxLPWlGBAK0LejjbQvkHYVM0tMfwlgyNkedMTYYFyqG1KeMvnn5bo6Jh3GQx6fRQAgWNNTP6kVWRrC0pqDWECo5ERsl01M6AT+A18xy9SMzoQGcwXmBCzrrgC1PTdnCfbpbUZnb9SqzgM/sByp2EKMfiDGonG7CXJGTPWZhtDXRBeRYWGK54JKm/egZX3S0E20eDEYixPpgKjwpVyezyjPpOkqMgzyx+kdHMb9CDuQMPPC+Y3ct3nr8H5gP6snO7tQC+gUsRnnNlSdG6Ejmy4gaQxrvSVK1dePgMiXC5pIrEcU38rPt5bo+x/Az6IaS3CuSveNHKT7bK3QSWxskxzIeR1zoK++QU4TiV8GPgi8Gfg98C1uut64APAJ4D7HcK71b/GY4PU/tyrk8eAdivzO7UKMu+RvDU8cyfw0bFwhhttMzsAJewPng8/i+j2S7S2FK9+cnrnEcvr38It+ynduBh42NFJZZcvAW8rWkBT5xBKaSop29r+xxNWbE6EonMi9WeCg12L5QSS0YPACiBxyQpjqg1DYfKN+NfCFJ4aDw8IeeHIkcSs2UuZQIyVUs16UAt2Uq1BlZLkoFboNbpNKeGuxIxg4l/33QizctVnAhPMxL9fSvi8BiQlGofhGLOYIDs0lu25Pcj2OlBPkBJeMUd99xlgszaDak78LQ7h1dGhpu3vi1Hns/9+Q/cDhLbXslFBGAiNzVFLmGxvIXdOdMzcJ03PIXh95WO+q8PhdxSVx9PiCdVpXy2YX+tfe6n5UF+dCpDWRuAx4AJAFSCA0Up9mG1T1h1DkjQYh2egZOt0FDuRf0J4pQ3YPPPnLeOygX/s48CdwKOIv/Nm/fponWHQPX2HY4U3VHnWAqCvSlSlVIQWcHeYsi3TlIZHQA435v84PjQD36yTias01JFyR1OfqksBpn954bK7hsFVjP5TFb/bhXL6HSd8r5GRPrhjWpo22uPFZDVG7tU1g3J671ZRr0r/9SxvTscvWwHIaE2deHysBgWsz6WzeZQcz2DGjgF5rul08hiZtrXbD8cfkGKXyDuvRWXuS+nQutPRNh94ArixzD1pyeUubzQ4WlcYRBb2ZG7Xp/ZDDbgReBoYcrQv4sQfSrH06qPpQ5TKjGB0gzVgia4VGWlgHhVm8uWinKBwzNG5QdOlYVc+YGa8W0L9zago99RVDo9O0AZV/v4jYBOwD1DZ3xxUiDfD1gO99nFKZobJUDtjEDoGqftxPZMssks/Dw6TflpmrOPa5FYXLStxwRcGBoLzuJXbebLrCYNPVHpAhQPlLN2jU9ZbkeIG+uEfB9Nn8sLnjxVqAue5uXmIm3t4efoPVRinv1Qs9EVDt7szbiRJ8tv15gEqtj+vr88AhyeqCdg9aBSjM6luYtZFqdU25fmkENv7iG/IQNGs9D7BogqPX3Yx9QW5kz7yjviVJtTmZKAuBcS6mqSmM2Ir3QC8S2drtVWE+Msym3pA/YyVUsWO8+v92v03JoitO2N6pIqT7FIzvb/Mzspdek5jccSwXBQYDsEExrbUu+tSwMnbFqt8WuXbT+oYfxb4eq0b9gxD9Nk9FE3A0uUlw72oz4/DCT44iIgziP4lJvV+nePfrBkxXzvGR8dk0Orxj4TIzBgwGfklyr+AebouBcQ7Gun0yrnF+/r31LLXpWx9mA/R2cxrGKhk9yX6fFiHJOrjLopzo9TEVukt8+OagVud1anahPUkGsgT8ynnqpj1DZ1aH6+7Fji7YhYNXtdW+HinI9OquPJplqFT6W4S2TSx0gp4c4EBypmhx+GMEN1nmJnzumU03FxcI6j3EWbWQ/6hBigxx/1bdN5QVb7aiiHYZc+qhZQO58Z9uYRW/1Gw5zFj5Ix65QkaTStSG+WevFTPoVfX+cvw4X1RSf3nwARes5/hFBhsJCM7dodPp+3GpFWDSnilBIym/ME7afwF6FG9Q/N24G4gq6g/IPrpQqIHVzl3dE7TtrhUVrb1Hn2t4nVWm4JxDpEjyoyqE1Sr74sFyZX0qorrqCN3+GTheZNWDisz6L8pt1GrNirWAPdpkzip4/U+zngizhN0KtON8JYj8l+0p1YbJdtLhOw5RW2bwJ8WGxXiaW4igrCyzgbZHrnToP6wX7D8XoLaG/iCTtv3T+Z7gbGj973zc44Rh3pj8UPg746QF0BNHOq1EPIy8QL1D2iKx7VTOqqTl53aq/+gaAiVuDyvJhaXtPssd61ll+4z2BgswW0DwjehXuHoLqN6jG2Uf9k6SbvCxSN7TTq5ZhEt/PFLxDMXJ4icGSdPy557hxKnlsMMuvIvOmivo8uQTluVKfSUGUIp6FZVWHEpfzVAbKCBGW1haa8Q46n5KlQO5/0jjXtcSVcrKnU1ka7LqZ3ZVPiJTMUfYQAeg6+ba2e2u6Vow2xfAfWv9yQDFDzX9CEm5DJdKxwom5tU+IEFu9p/I1STCTDG/msEmuiC/v9HUpP0HFalXZbpU2iXRffUuozySimgeDuWaxSuTZ2FcX02HH2cfYv9ndQQGpaGrSH02dlHOvCGMsApeLGwLv1sdXbra1Pf49F93Y5JFwtk6yxOJVcZjYIysvpM9QherwKcE2Z6UqyI9qxEWylzkWVMpljAam1vuA+Qk2WHU94J/i/nCld9GLzqFfAfAQYAcsiOaop00yYAAAAASUVORK5CYII=</Resource>
		<Resource ID="0f73e9c5-3d39-4cc5-9128-43dc341eb2b0" Type="png" Name="acl-user-icon.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAANRJREFUeNpi/P//PwMtARMDjQHNLWAhRlFYWJgAkAoA4nggVgDiB0A8cdWqVRuo5YP9QDwfiB2gFoDo9UCL91NsAdAQkGEGOKQdhn8kU2wBMAgNaO0DAUotACXJDzjkQOIXKLIAmNZBFhTikE4Eyn+gRhBdIMf1pFiAK5wVCGlkxFeaIhUR9TgMAwVfIxBvwBVUWC0AGgwyLB+IEwilEqTgWgAtnx7gtACapvuJKQLwgAOgRAG06AK2OKDUcFj51D98K5xCIiOVmEgnnExHK30QAAgwAAqbQID1OIW0AAAAAElFTkSuQmCC</Resource>
		<Resource ID="10acd88f-dafd-4a00-b5a4-58549c32e7aa" Type="res" Name="small_black_triangle_down.gif">R0lGODlhCwAPAJEAAAAAAP///////wAAACH5BAUUAAIALAAAAAALAA8AAAIRlI+py+0CopRnUmTX1a/77xQAOw==</Resource>
		<Resource ID="2982ac5b-058e-40f6-a343-daeac6ec91f4" Type="png" Name="ug-magnifier_roll.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAASlJREFUeNqk0j9IQlEUx3GvmP/A/lBYIEk0twVGi9HSLuLQ0tzkFgg1Nzq3CA0RhDRJuNkQ4VLQ2iYpLi0FkVHC63vr3Hxc7kPCA5/3fA/P73LPu8rzvNAkFdEXpZR5TmAHeaygj1s08Wo368XVz+U3IINDLOMBPaSxLs3HeLQDQrKFJE5Qw6q10BKqOMd8UEABDVndVTOoY98OCMvvbdyjGxCgt9DCppmbKROgV+6MGfgTphFzBTxjcUyAHugAn66AG2xgLqA5Kp+2jS9XwBU+UMGs1RxHGQt4sZP952ANR3q4uJZDpJu25G7qFJeug2S+eRE5pPCOO1m5aIe4AvxHPC4DM0MrYc/3nzN6LyIBQxvizXpXl7sJyY6O4/9qFweY+tvCJPUtwACWpmJ8Pi65LQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="b3bad439-ffee-4253-9939-a14ec36ef8bc" Type="png" Name="inbox.png">iVBORw0KGgoAAAANSUhEUgAAAAwAAAAOCAYAAAAbvf3sAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjc0MUNDQThEQ0M5RTExRTA5RDdEQTkwRDc2QzAwODMzIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjc0MUNDQThFQ0M5RTExRTA5RDdEQTkwRDc2QzAwODMzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NzQxQ0NBOEJDQzlFMTFFMDlEN0RBOTBENzZDMDA4MzMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NzQxQ0NBOENDQzlFMTFFMDlEN0RBOTBENzZDMDA4MzMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4dQNm3AAABfklEQVR42pRS3yuDYRR+zvt+9u0zmybjQq0UkvI7ZeWCuFKS5Ypy4R9QLjZFriRK/oZdu7BLJNouXMmdK9aSrGgxtg/bPt/7+rYoNhan3jo9z3POc87bISkl/hNKKRCI0JL5hmkpAMahb43K4YoFltirudDPLEa/x1Mpz8oADtAHypXykehzh5VT8uZ0LPMqDNk0dIAAI4t8/gUh1YH9dZ8Mf3NYG5DXVu2DlRbFRZLBRgSflR6XOXzG4iHt2mswVdghm0FSIXVwYyQb/3UHa6TZ3DPOLHHe+in/V3ExCg6lLxBFUzBK/p84Cs/Yd5pH5iYUYVIa8uI5rfcwIUSh2athcNVRde5xOZoVaOLiILSnMCF7W7u77JR7RerxqfMkdrTNBV+VXPL0S2ZzbHyyvc7thuB2xCLUqRgGtFTiBnomBVddI3r6uxZSd/oCMRNOdz1skiMRv0KtsxaGCY3m+3iwoVq0CAlR6YYYgd3quCSXijaFwfOXw3sTSL4LMACkKKhNJkYdPQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="8a418abc-270a-4be3-bd68-b3a25dd60e37" Type="png" Name="ug-subject-edit.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjNCNjMyOURBRkUxMjExRTBBMjg3RURGMTQ0MzRCRjk3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjNCNjMyOURCRkUxMjExRTBBMjg3RURGMTQ0MzRCRjk3Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6M0I2MzI5RDhGRTEyMTFFMEEyODdFREYxNDQzNEJGOTciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6M0I2MzI5RDlGRTEyMTFFMEEyODdFREYxNDQzNEJGOTciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7nzBj+AAAA2ElEQVR42pzTuw3CMBAG4N8nFmAF09O4TJuaLoxgVmAN0pEVXNKmpYsXQCJlUjKCOScRQrzi4yTbZ0v5dE4uqjEGxpgAjopzDpUvd0gJfbMgXkPLk8tz5DziHoKIAJzW0Dy897BWhlA1XgF1XaPQW6A7QBfXZCRWoJxz/PAebbxLX4oQmlbF1Q8hRegp/wuhl70YoQ9nIoS+VJaM0I/3k4TQzFeaRSihV96Qc7mCzpoBocSOfSDcc8jWxyHv+h4LwX8TkVBoC1xGbXPqRMCE+BCrqTAidwEGALgSe9gxTACHAAAAAElFTkSuQmCC</Resource>
		<Resource ID="ea0e37fe-c53f-4db2-8904-abad6e6ba4c9" Type="png" Name="us.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAALCAIAAAD5gJpuAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAUZJREFUeNp8UjtLA0EQ3o2XRysxyiUHgo1/wE47/Rcp7CxsUlhYpYtomVY7sVCwigpG0DKVj2CioFELi0QlPgvdu53ZPWfvCIZI8sEO38zuzHzDLGcsy/6gLthOyGRgsYsDXQcku39QF0KSXVkta61VAAwAAFJKz/Nc1xVCPFbPLcqYm52Mx62Z6Yny0XVrOUcRH1Ej+gCUzkBqAOIJO31WXDcJxye39Lq0VwNU9lrR7wPO+dT8AiWoWr15WL5CpRWo1tKiqU0OSNMBkSlUntQIiXSmsrHF4a09NJwMaxgx/RGJRF4bN1Y9mbILefX16ZNWo5vUG8W620XTKppxTjd3uWi/RIMOg8vTLc3wft+wLlNj44W8fG4NqK09s4mY41S2S/z7qRkbGe2Z4V83E6Dz8XBnVe1MzyJFZ+0/HeKFvyCwvwIMAK6MVBBB5ZSrAAAAAElFTkSuQmCC</Resource>
		<Resource ID="ec4c5674-1137-4fbf-b026-4c2ac78f2fd0" Type="png" Name="login-sign.png">iVBORw0KGgoAAAANSUhEUgAAAHAAAAAiCAIAAAAIxMrgAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjc4NzNEMTJCQzMzRjExRTA4QTU1ODQ2Njc5NTU0MDA0IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjc4NzNEMTJDQzMzRjExRTA4QTU1ODQ2Njc5NTU0MDA0Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6Nzg3M0QxMjlDMzNGMTFFMDhBNTU4NDY2Nzk1NTQwMDQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6Nzg3M0QxMkFDMzNGMTFFMDhBNTU4NDY2Nzk1NTQwMDQiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz44fMqTAAAMBElEQVR42uxaW4zcVhn2Ob7OeK6b7KY0abNNQkMLJGkp2qpq6SIIAgFVW8pDi1pWVUUlUNUKhatU2NIHhACRdh/oAyJRKx4QhER5QUp42JS2SSgoyUptEbl0c2t3N7s7V3t8OT6H32OPxzPrGXt281jLGnmO7fP/5/P/f//FRowx7qPt+m1C+/DyInv7And1yZlfdlLCGudFpoOXGk5O4DLK2rXkdYuX5euyYMZhOl/BxTSS+DXPxRyB0c3D/N3b+W2bOgBlR06zP7/Bzl7gzs42uMpCo7wWQRjx68UbMcdTzlm0P6DMWaPmwziVLl0POGXJGhlhho0YlZaWOEbXNBvGjRukcj6NM5nMxNfz333UHXNPvHeZ7TvCpo+zf/6LmGXWWEqpKeY+zFXuOX4doNmcnYfjtUwFOyjD0bpTlNaOp715I6DpGhDCdja3xtmcvMC0Rb6ybF68OPf8b/Xjp3xA6b4j9Owsff8SS0um41qCqtUFZZUuluKzMk4HcMAxjKyekhQZlIEDUAzUW8uDIaMbnZIe/HVkmShrsJsQVhgxcMbzL/zOB5SdPssuXIQDQ6gx5AeprGVyCA0qhkdCji92gZLjh2B8FUqDAq4a3l/EQD0YWSXdZVVidodfks0yflXRAqEurBDml8+80wJ0ucJqmp3HFNlt06COqgzqZSgvDMOc3bj44wNjAQqAGsFfUA+UXJVBIXtkmBEnYjyXg99BJ1yJVVoWzGqlxaGU0hRvsUo3eTV0MT2AU2T4vIiiiQLG4exASoNoUKBrEJSk2YG5iGy7mVYbkaeoIBJVHWg2UCACK13jJcmP8gzzJleKTEczer0kSJTEh2kRy2kXsp5ZrcrnDdawqJkofgo8iI6cC1RVhCxHkmYOdH2BVA2ut2IknUaWiW07Gan3xCptGr6FEoVQHJ1AQKjO4CSUggr8eo/s8M6t0jMPebvwwD1o84bgMeaF9ak7Prnl9OHt5f8MTz7TZ8KMlyVEAoSppdrx/FvMikf3yuwN8eAvubwa48Lg+MkCBojuhRUO8lDCmX2qJdmyFDXT0Bp91g9hByMBoFT/sAdv3tCdrBx+S3vqN02RwshzT4mjG+F46LmJhcmp6DxBTclavY9KNqfz+SFcsfrVAt95AH/xLneF934a79hCXp/pF7Iwb2eyYq0aY+x5yeaWY3wrUXCAzEDuGaDcxAhnUCGT+cvPV6Lp6nFxvr1O5EdVbfpktEKy5OVJ/TeDlZgSkzn4YJXrzsyF+KRSUSCR6jehIoDQRKUn60MwnkdDZuDY5eiiCOcEN3WXH98NmPqrnTpIjp1x4du5Vbh/p/HqkWB+bc8r0plzGq2W9h2IFAqCUJw+TZ2YIemy0fMxW1MHbMajTMo6/BYt15PYjZXNyfYShOjIs6akM8T6FrXh0jM25hDgblXTja5xyIdQM08C4ILBxtRB5q0BHG3qYIc5P74bfhWsyrtuCxtpceJhdXxMWpfnHerMXoHdnj5JTr/rih4fE3bd7s+8d5/84G5x/G5+dJN72csH0KlL0YB//zFOEj3FzFePuEKfeciPQq/PAMTSA/eITZ0Bce8CCAWAqVSJsBynKDi0HtclSGyhfhTTNTOl2g0jFLizEorofeSP/hqsEvQmZ853mPPmDennH/dX9Qu73gQ0teu2Tft/JTWJ1X943JhvzpMv6Xv3pZ57Uhp3RwBfgNI79i6zRzeZX/sJ0rrJ1NmyKfPUVz3+sV+fAbzEz+0IRMNfQDPwJzhFZ+fsJslSSSKpFN/oCBhMhaJomcWl0WFAGUsEKZc19GXMs6ZTCEjM8MXgNvvYGdCsCzjn4jxo32gZaZhh8cwHMAPNK11odpBvucpCjzuw0zb042MVXFFwOuynrJizNTuQBYp1WYz8xJe6I9jOrVYratmZDLIs5JCgA2LgCkXx+HgYJgpKbcGMZiSPJVChWfwEnK1PHTQPv9V9fRNZ8DXvGjx6Q4chi+vzD+4O0KxPvrRQ2FmZ+EHb0GavuKi1cIS/5Qefhms8KmhlUcTOsXbowNgqFPBNI2HDYU3Iwoy0dOsTtWbiEb6mXT7l80H5BJODiAE6UNyAVZdiNGQ1lRUKAuoOCKBi5ZFJNwR1BgGlZREo365JwMUEThp66Ct+QJg+oe39I3MfVLsJRGavhEca+w+Y0ydY03IDiJvlU43mfOYhW29mdTPsCl204zLJi6+BhuFIxSpah2fwAlFdQoBpYfKknYeBglKH49dMJKgEReRS5ol/w8799GXpvl35V36M8hnPTqnk0hzeMtxWujmi3H+nf+P0SeZbfgegYsjNA72FkM0yP4taTkk5q6gSrYwlhLeub98lEpAl3HFLl2j+ztG2oKtXvMFQ/cRhAnlSPHVGcChKDePMTcnvkxZrCOK9qlHbZy5cyAEQnof6mdPfL6vvP+bBAQZF65fdNWws+OZ5+l0YoaF2ifDx7aADPAD5C/f7K5o5ByP8x9quSucanp64BTqrk0Bz0+GWZI1o+pBtcql2YWodP0brVZQRwqLde61Km1s+PO8N+p5EsWhkmdvs2pi8vYX0hZaFEoGzkjaWBL2OLJdTJDRkcIt+bTPxSHbyWdAVdmf2qnt2fCwwLuOQn4dCrhOKNlxVVTeUq3wTndS3vszfdKO4Y0sQfGlZB62E27e3H+Wi4Y6E2NA+9X6geW2ImHMuRjBtIRTlnCY/BEbtiW5S821t0EOk7EYtNMTZBiApVCySziTuwQjhtCmR0yPbxprm+2bVEAtZoBg3o5r4hhc9xBWBGBZQ27uvC1DAXVdShtYoH/rHuomHvUGpmSQAteEmps7sXJdW9sx5GAkTcRBbrQyqLVz13V9roC2bA0Gs5UNdIwG3BBD7aqAsqhj+XZrGiRITxeROj6PCXA/SZUyoVTvayVWEqdvE0PYfsDsfsqeovv+v18Yf9aggQNN9lpV6zXK7Ox9Mvlw+dNSzI+Pwm0u79zitOpVcnGedmZZTdgv8sIVaZ867MQpzFXOB0TYs/M03Bjp0iablmp9ytZ59WHNYDiwqvEZYMsdY8riE4OLS539kvvO/eGevVXmju1KCpNfg28wtj98drGQlxMFW6iwQfN7A6vBnxtYd9bOZ6p7f614BE7dVCqa+MNedoqaUYkMbrD3OOMUZiigTFIUkeAF1zpi7t3o8aaWETRMbRsRlmiUWCyb1yzVj+kSsYC2tWq0SFgj0E9N/qk2fNGevCIVcceKRdlhrJuTxXZIC0lag6Rpvw6inVVUfAFOJL3BVa6VQWDiSZBr3HnuA0hNR6jl7NNYlwuckB1mJGhCCEG4I5MbH5NGNcotGg60+9TcS6lH17KdJqFK+2vPJ6YYoCBJJlJbzTIKF9FqjABQlilA1xAKaqFISqhWu7wcmopXmWHyDFpKsKi92Deqn3+vwr3Kt+uJrsCcJAWW55lj9ms0gjiYKD8hdQr9HR4VqJRFW7myO0wctXtchuMd4n0EkuWjGNV9rasbpbFSXDh0tNYNSrtXyqE6fzPJFlY/nLH2ImXNLMV1O0wKhubgGq4SKnGGx2AxH1510NO609dFEE1BJcKAIjnoriQkRXG3i2QxXTD6fJlxPzjIkuaHpPQNLiHxrtCRhZWVp24FUGlWvXUqS7YFQUZIUy+xtUyoonzAHp5JEhYg3zyYlLC37Lo9uyNPozICBnTd7UcneU2oCpDDRHxlA2kqTzgMXlsg12lsuRVyJLlGHJpwQRJMe74pBYVA7aSvDTRyjAVkmdWXXNh/QzA+/aWNmr/gCSajXOYcM0DohjswVI8mumlYZGeALJ8LsmtOTQOpFYleryWcD0a4Cke9vuGLU+/rebAsuW+8mkLKjL7L6rT/7ng+osmNb7oVvz9tlOAGweqaBLJNv6IO+AUc1U0Td79/1VNrSG4N+TKA5NZNF3GXlUH3uyqCzgQKgRrdLoTwoPOgaARYAx3U7RuvUvGQtnTM+vOX5p9fdc4ef2Pswv3nqvy/tX3p7Rp+/xhiVTJ1b5aejyJQgiPl9EwehGrDzqqbCCOdxFoVSEYZQBTiW2KvSC2U5xrc0gWllSxyw0RZMhS05BRNKI0OFuz51+7NPjtz3WS6olLiPtuu3/V+AAQDZ8wHgoQ5XRAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="47d1dfbd-feef-42ba-a264-e7c999d13e7b" Type="png" Name="proplanning.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAzxJREFUeNrsVUloFEEUfdVd3Z0MM0OcCRknRsWIIF7c4sWDSk5RJKjgQaOGEUXjdtKDKIKgkktAFGMOEYwYxA0FFYLiRdCDiXpwO0iixoXszhKnM93VXVZ1jwpBsS8eBLspZvhVU+/99//7o3DO8TeXgr/8/PsA9FfBr20XwU2zHJ8GjMF4DNcTVefJwODdhtxop8E5ceQhQvBoRlXNI5sdrR0arl8I7nzsup9Z3HN3/I8A7E1fo3nvQYuTSRthl0FZuz48p7d3OZ4/PTJGNLjijMpthJPTqLFsaUnl1ZsvP4OjkMn2iq0FfwTItV86wLLDcdkDDmyolgVrZEzLf+jTCjAgMyCwwBQDhDFk378LcxF1QGcHksgxTRE3fLkEs2FdRbSUCuaSPfUyUGTcUDFuaJigOnRmizixAgFwhbiSpStYyreq6zZiX7KYAIO8Ru5JxrT/PWbduQ2H5cWOIhYNVmTJUCaszpyNaCyKOpvBSUbgTJsO9cc+x1zXhSuosPmLMN73Dk4uGwyAWRPQ5s3F9Ae3oEQj8CiLC10uP3661ItKt4Y09Ld34sXOHcEAHM5gJJOg8Ygf0Ly+9EzjWgTMFvJoFIouzlo+Pq2qlDkHM5qUwHU82nj+7AVSjSmsXbMOhw4exujICPSQiqGhQWzetBlnWk+BEgFi255swTIoaiyPd/d0I5PNoDxejhPNx1G7ohaFpwU07dqJ/g/9oFRkovhSuUFHhd9BvuZbt6dwufMKup90IxKJIBQqBVEI9u7ZB13Xoao+R5dzv1TBAHw2InPcuHYTLSdb0HysGblcDh0XOrByVR22NDTCEga0batYbPwS4PcSiV9IgHw+j7NtrUgkElhSswRbU9vACg5M00R1dTUqKhIee+6RClgDJm0khploFjRs2Ij61fVIp9OITYlD0zTkxydQVlaGxw97xMwjgoRfXjdoBoI7ZYWCtysFKJkSRjIWhmwsJhbVqSeJTnxpxEiC40qHu8EARkHeuE+ezXm9bT/UyqliFLCiDH7xv3eM5zv5ikIPdN2TMzYSCOAV7N1RizXxc6dD4uriaCj6o9gAk7+r0MWsMt5Ovot8t/z//+TfPd8EGABpXs5eB+rEJwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="e93af2b7-81a0-4a9c-907c-ae98a014e5ef" Type="jpg" Name="login_bg.jpg"></Resource>
		<Resource ID="5bdfab98-2d10-42a9-8ddf-444c833b6ba3" Type="png" Name="fr.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAALCAIAAAD5gJpuAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAATpJREFUeNo8kjtOxDAQhv1iBRLb8kjDCShokbgBDfego6Ghod4KCYmKG1FxBySEkHbZPBw/ZvjHTjJSRnb8zfz/JNYPr59qDs58f3uMRd/3yDFG5IvrK3kzTIzDc3fT1E3O1DRrZp63WYjNBnm1/0PePj67erbvA06JqOs6LkHEpSatv7/UONI42rOmVcrABhpXOmXWWoNGNkZPJgrNwXPfimDO0knoxInEgzEG/aEAGTkqdA6BvJeCwceYJhrZWivWjXEGXUSp0hyCXoaOmQqdY5rGrWOgEkLSW0SC8h6e3K4dQVR6DKlCCy1RaIpBpTgrRKp0HQYkMy1RaYpRpxxQ8Lvrc6KjQ3fgNMrg2lpTplD1A5jTc/QG7ShNCk9vH9X6z7ZrVidY+K4bYFop/JbLl3cswnwb/gUYAGT6J6EoTrgVAAAAAElFTkSuQmCC</Resource>
		<Resource ID="6096b141-6be5-418a-9a46-e73213ad8ebe" Type="png" Name="start-button-roll.png">iVBORw0KGgoAAAANSUhEUgAAAJcAAAAjCAIAAAAWpg9NAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAALEwAACxMBAJqcGAAABCVpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjE1MTwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzU8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8ZGM6c3ViamVjdD4KICAgICAgICAgICAgPHJkZjpCYWcvPgogICAgICAgICA8L2RjOnN1YmplY3Q+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE1OjA1OjA0IDIyOjA1Ojg5PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5QaXhlbG1hdG9yIDMuMy4yPC94bXA6Q3JlYXRvclRvb2w+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgrPJgmQAAALEklEQVRoBe2ad2xU2RXGp3jGNsbAArsrTBMlhKaASLL0FauIIgJZYKkBiQ2mKAEh2h9IFIEACVFCFILA1AXthppEBFE3NLFAELuQ0CxKKAYZNhhjG7cZT8kPH/ZwPW9mGCyKTOYJPc495zvn3nu+e+67743tLVq0sMWvKp4BRxUff3z4TzMQZ/FdWAdxFv+PWWzevPnmzZsXLVpUt27ddyENVXwO9pc93dSsWXPq1KlDhw51Op3Mvbi4eNWqVTBaVlZWxVNRhYf/EixC28iRIydPnpyamhoy4zt37ixevPjIkSMhem3a7fZgMKjNuPBqM+CsU6dOLBG7d+9OzQ0YMCAxMdGKr1WrVr9+/dq3b3/lypXc3FwrIEQDqaYmpGmaIsmVcIkU6h3Qv7gWmzRpMmvWLFiMZbZ+v3/Lli3w/eTJk0j4KHUpprALJVK0KqT3eDyvabTRWGTnnDhx4qhRo1wul7X7wNnr/uzHrl/+1Jbw9AFpXvn5+cuXL9++fbupjF12u92xg6sQ0uv1vqbRRmSxf//+c+bM4Sxj7Tj4j/O+Px/3fHPdV62ao0Va0uCO7qFdrLDMzEyK+PLly1ZTdI2yuG7duk6dOoWAd+3atWLFioKCAvQNGjRgrdSoUSMEs3Hjxg0bNghGTGAGDx6cnp4u4Hv37u3cuROY6Yhp//793Lt27Wr6CoZ12atXL7oO8TIjiMzpb8yYMdOnTz906BCaixcv4oLj62MxwToI0fCcs1IYPHjafiU7mPU4cC476EqxOVzBQp//cnbpHw846td2f1qhLlu1atWnT59KsCjnILJppZCxQUb9+vXHjRuH3Lp1a2ElZBYkEQx5FD2w9evXm0joJ9fc58+fr764CIZ+Dx48qHqEzp07Q6FoXnhM+335JWC6QLh79654RXmaCJ4BsAUKjKeSdTEJLOQekcUKuGDQs/dw2Vd7HYcvOgOptg5tbYM/ciUnJiTYbYWlvjPXA7e+B+/98ihF6R4R0xO0QvyKDZmwzL+i5VmLnEIM64O8hwWg7N2797x588gCeSGrQk8IeMiQIbB1+vRp0WuPBD9w4IAJZllIk05fyKLpSCiayqL6WulMTk5u1KhRUlKSuvMuXlpampWVVVJSosqwQkzfbnwXbvi/vui/+rik+nv51R0FBQ88RTm2RinOtGqBB3f9WVcDvu/55394y3cl03f+WtieUFY4mFZsmiamyqUMwQS54GI/1Mg0wWjeIaMc0hrCFANzYKBKYVhD4lB2TzsrvwRGxk0lFqqQdSObivDxzCHCf4yTS4wakybM6dhoqowAhXxIMSkUKxr0WE2wVY6pFn27/2V/YHP/ZrDvfnYwxRbwefLP/jNh51dJbKmdO7iG/Dz46LG9RnVHg3reA8f9GVmpaxZae0JTYeA/NJkZetMkM9TU60K+dOmShpUcNWzYUDSK0ZqDe1Yx1rFjxwqGmuNBi3zq1CkoadOmDTJ3TSg94rVjxw62YrY1ZHGcNm0aeNwBS0z0fPfgkiACY9Pm2YnMugEsYRmPjkQ7Ejx3mTvsUoUOR/iKQo/12rVrVneNE95TzSLYXUn+zId5Gfv8abUSP26fn5Ode+dase+x35frv/ydrawg+bcjbA5P0cKFZd+esCW84DwtC1KXpcmfKunXZEiGQdZ0YFIZyjRUcZjiUs6EMLKsvEKPuitDqkGgR1aDbLBdujw7r9EpeuihL6yCR8kDlWbHjh15/HPhRb1ipTuJI0gGoF6iMe8yd1aMVKHP5zPfRthIA4EAeKxgTMcQOaZatDmCXv+TYl+u7db1B3/d4qpT+4PRI5xZWa6aqYmNGni/PlKy7A8BvsAFvU+jO0xeQrp73owCkkWnDHFE4nruWV5MUpfKtGlFhjBhkf1TTbjoclZqeSlSJT2yOIDBMY5yXmVZULtcFChWwHQKhXQxd+5cDY6v1J8MG+Z0FuKlSKuQkpIiSj6B8SBkC+WNuaio6ObNm3xOkTmCCbvyxDGmWnT+orW/W+Mi5xOPtzDgdvz37Nn//CnD3riR1+3KXbi47MwZu9tp85fZXE53j26Jg35lHaipicZfOY75c0ViiASRPgAmQ2Z8ZPa98hhBZctUmsEl3QKmR2EazqhFlFKIy5YtQ5aqQuDcRLS1a9eKF3cKBV/pVFjUAaDXLmSQ5n4jGn0dl6PAjRs38vLyoBB9vXr1BJOQEK3eYmKx5PC5Yk9+jVG9a3X+mcNvd9ldNruz8PbdvMwbpQ5XwJ5g8/rd3bsnp4+x2Zye3Xul40rfyYvsS9YIJHTQoEGSI5NmvulzkVlxmTFjBhGIY0Ygv5J3uFF2hTb08oST0kRJkx2S9xneR2kKN2KlXwTlCV8ZibBlymZMHUyFMZWPT39IYOds1qwZSIoS2ihKJY/N1pxLiBwTi6Xeggcnjt7cuMmbn9f481EffvKxw+X2+gLFvmCh0x3s3i1hQP/gk0Lvpi+9x7+xlUXrL6T7sE2mIVkT68CBA3/0w5WRkcE6BWBidLGzB2pA4Yxcq2bYsGF4kdnx48eLEsd9+/aVB3vWo3CDEgBLgTdmetS+dPWwuYmX1Zd+4VgGKbPgrV9gOhIEsyLZPNUEkWlpaZxo8FUKsZoYBasQrU4VVFKS7wmUlgU9hZlXS27fS/zg/Yaf/9qd9qEvryChw0+816+XHD6ekJPj8Hp5Fgdf9LWQCVjXo/QlJs2aKMmCjsQUtJ4kuZhMzsgCjidPniSn8vkC8pQ/iSMMiSw1JKG4U39t27ZdunSpxDStBGQpMEgdjGlFllWF1dQL2PqaiJ63ex6HcsChWbv8ErzcsUb5Lg0mplpM7dvV3bJxeUR70Fv26PDxe1u22ex2R7Xk21u23j98orTU47M/PdU4W7ZIGvqZOYLKyZytxZGMRIqgGDIuGPKrYLGi0W1WTSLA0LZt21TJmgCs3Y0ePXr27NnQLADhQ6ysDJbFypUr1ZeHKCbpnX51PLLONCZ45f75EihXslbkOKoxVUAva0s1ViGmWnyvW6ePdm+9/5e/ex8+Kvj230QJeDx5Z86VPcr1lnigs6SoOKl5s6SenyR+9qk93E9XZsfmBEw9spiYqtaZbEchMGlKZpFJn2aHlImeCKJcs2YNWRg+fDhfR8UR8tgzIcMMixe+GoctcevWrQoQK0o06Ak+YcIEjiECgDaU+MIuSE06AgBgS5Ys0QWhMU2BlwpgrACtSLHG+O0m4tdweu3Ro4fZk8jZ2/+WlfFF8a077/ftCYuPznxXvVmTFtN+V6dvTyuYOpAXYaspikaf9lEwVdGkZ9FIg2e/5bjLJRsvuyiXLqxIXugj/kp8//79du3asUWHOKe2bVVvyAB3ndp2h92ZnFx/+KCWC2altP5xCIzm+fPnV69eHcuPxiG+/EgZonk3mvI3LjIX83Rjzo63fpjj9MTd/AJgYqxyxFoESq8cyuVzlNUziiY7O5svlnv27ImCiWKKcvyJ4hVi4jfPSqyFsF4vNR7KiJGYBcTR4+kHmIrXS8Ws6BqmFY1FgbPXm38uFSaGoWIf5zm0adMmBEP9FsTKpalyXjo9K4Vqeq1CxB1Ve6Wujx07xl9GNW3aVH9nUKspUHyTJk06evRo9FdU0yUuv5IMvLgWzW74+DRz5kxeS00l8oULFxYsWMA9RB9vvpkMvByLjImjcHp6Oq/PcibOycnhbxH4K4o3M9x4L2Ez8NIsShTKccqUKZxieJfgD4vDho4r31gGKsniGxtfvKNYMhDTF7hYAsUxbzEDcRbfYvJfWddxFl9ZKt9ioP8Bxax6gqoMW3IAAAAASUVORK5CYII=</Resource>
		<Resource ID="a2d0d1cf-a18a-40a3-a9b6-9779bd7e69de" Type="png" Name="home.png">iVBORw0KGgoAAAANSUhEUgAAAEAAAAAvCAYAAABTy8xRAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkQyOTUxNjQyQ0M5QjExRTA4Q0ZBQ0MyMDUyRjMyRDI5IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkQyOTUxNjQzQ0M5QjExRTA4Q0ZBQ0MyMDUyRjMyRDI5Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RDI5NTE2NDBDQzlCMTFFMDhDRkFDQzIwNTJGMzJEMjkiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RDI5NTE2NDFDQzlCMTFFMDhDRkFDQzIwNTJGMzJEMjkiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5OIDnPAAAGQElEQVR42uxaW2wUVRj+z5mZnZ0t3bpAFU2sLxoleHnwAaOgYoshETQoJj75YNVEojECMfGCJkp8kRLjlQQJj5ggLag8qCQixhilJvoAMUEUNbbdbet22fvszBy/sz1bhukW6C5d2nRP83XOzs6cOf/3X8+ZZUIIms+N0zxvTQKaBDQJmN9Nr+Wm1C2b5OEa4F3gViAHVE0nTP2NOkP0Z+E4eeQCnFpxdQeVKIzbvNrmrgEmsAd4Z/HpE4WGEQCxFhF5A+hswRC7iNwuKWq1JhQNMf0qShtjNFj6m0JIvVeCiDqEV83bhrF70Ck12AXYDkHsBdcZPS2ckdXEjDepLIqYggSXOOO0xLyO2rQoXSFy1CaKJATmXRsGSDhrmda+FYNESdgrG+oCbuF4G0TdQaJ4g+MkNmli6Wsg5Rfhpnbi6/YqfgAKiFoyYVrqxijXZhEXjGQNxhib7tO/Fe5YNzc6Tgktuoy4+Qlc7Bi++K5hBHj2SWVy/Bn8u9kt/NpNrKWXRO4ECRc+ye44xwK4R0YhROHEQgjeQqFwBxVi6LvudB/9vvAymxkzbOItG4SwP2RaDISzbxrrAiykoEvA/PQjJArrMNxvcIf7gN0AlcF14p5FkVQ7jpGyCYcScdLyBRCjjZvHhZHGQE+i8xzjrTYxaxuI3sdIax8XgVGDY8CkhozA+oBXgTw+y8k+C+Rh6RQ500qhvAzYXvmRvJAhc3iImOequYvz4QSwGvfuxoer0f8c/VcmX3f56wCpTgRD2gcsBj7wuLfGzFq/m2krMElOobFRCiX/IyFjwNRxYD9wL/AjsAI4Cqyd7YXQBuCIx8RyM28dBQF3c1f74lwCIDAiYDgxSHouO05CINIBW9VYw8BG4Cvg+rlRCTKxDFH+63C6pRsEDMJkER/oreCjWckmMz5I3HH8VoDraT2AHE/SdD6W1qT6c6MUFkyQmY20wu/l5N8DEDEJfkuPKo1OWIKRTlFodLjiCjKV3QPAz+kmQEb37jm1FhBckG6biPqtCHJSq0IGwy+BG4FPgVXATxOuIOvZkQQZmfRHcIv78fEk8Ijy9+VzajEkNc9cTi1jUdJKuj/wyUB2CFgDHFck7FFTyDHXexqusNEYSzpC07Yootrn5Gowko5QKFtJeRNtCHgcWAK8rBZPTwCykHoA2KVnU9fq2XQP88T3cIXnZ/VqsLrpe8j1YbKQ8wNNCv8gcEyZBBZPdDvwFLBTXXMnsuhe40wqKYYGXrRjsR88M2zAJbbPCQuQps8dnSIwfekCPtOPA+uU8HcBnynSH1YB7rHxFSUdRjzoYK5zm3EmeUgrFKLMdXvUd7PcAth4KLNSC8r1vk94mc4eAvrHNUwHgUW+O+U+wt6gPngx3xlKjfU6VmQ9cd6jvtg+ay1AMJh+1qJwJhI0+4rmV1QR/rxT0lPJTgMkIDXCpMrr/c2zkgCZ8jTbKGufexOmX/H5n5XZH1Cl8cWbFMYJj8S79Gy2l7iGfMp2zJQ78Hr8nkFoC/nesM2g8BXNH7h4zQeqRMcma2igk5WKvYLzKE7OSEyoywLkIiecjVRSnt/sV05f85OnpuWwakwkusgTvThRIWHzZSegXO0h4EntM3GOz/crzffVpvnJrhBKjhDiQScKJEmCzLGX1B1qIqBc7UF43ZUrYBFXS9T++sx+CldwSxTGgknL5zvhCn3VLEFjWmMJiCSjwihvcIiK5isB7+ClE/7sNoNWzJI5HAcZXicC4n6/JTCIYIui0VACrExkAQw0GfB5KfzCmUpWRnkDZRTBl3eBhImY4JH7xrD9b2O3xeH3p1Q11+8TfhHNWGN4JlIjrEAGRtQHXdD8AWi+baD4x+vDpYG3G50FXpK7PmqVJ8vbWCPWbUiJZMkNlFKJGNdWFb1cX9z+a3HBy/xT+95N8wcS1CSgScA8bjUth6f/Pm/mW62xrGkBlyxRn/+8mOIaMVH0BxcBF6n4y0VA8O0lp7NvKbkaV1N9zdfngWv9rfIDA6H6Eo6Cq+Cpo/+aul4Q6nVqnfuE9AtrqLHlMaT6urrHVNf698+CAkkhZXkrf/ZiK1TIKKkjUb1vRusgwD9hpibFAmbPqpyr5i5iCpcJCnihc81KsJkFmgQ0CZh2+1+AAQD+r26fLsPMrAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="04d353e8-51b6-4832-8ec5-d317e14a3eee" Type="res" Name="0b3994be-cb96-446b-9a20-cab3330ba172.res">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NDE2NDRFQTZBRTIwMTFFMUJCRkRERkZFRTlCREM2MjMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NDE2NDRFQTdBRTIwMTFFMUJCRkRERkZFRTlCREM2MjMiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MTY0NEVBNEFFMjAxMUUxQkJGRERGRkVFOUJEQzYyMyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0MTY0NEVBNUFFMjAxMUUxQkJGRERGRkVFOUJEQzYyMyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PqQfDwIAAAFUSURBVHjaxJM7TsNAEIZnTbwORsFKgUgDPcIdElICouAKabgAouEunABxAXIECiQID1EAQrKokKCDFAmPPGzs5Z+whhUxoXDBSJ9mNbMzOzO7K5RSlEcsyim5ExTSRadeZ7UBdsC6it4D1Y+GPlG0SdiFRSwPwLbXaOyPVIAAZhdUwAlMC8ZBPtvALNjLrECfVgNHwAOcZAlMwNeELoFnsJKZQMtV0g95w7FOcs4d6OAXDraK8mZcApbrpBsuQx+CGW17BGuWK29/HWLv8u5zKK4k4Toxd2XsS0ActzqE5FT+owJfdQdpz23dQgVcgCoIxr0DHyc0QQnwwMrQVfAKPPDzdr4riNtvJBz7FMspHpg1KT3tCpJeuGoM9gxMZ1XgqEG0BZ7MDentwF5jH9g0HSL9TA9ynh+SwItTqIRQwXCgPDRUQAj8CpoL70cT/Ntn+hBgAKkpn9FRLWOaAAAAAElFTkSuQmCC</Resource>
		<Resource ID="027a5359-0d88-4895-ab27-94bc97487928" Type="png" Name="promail.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAApdJREFUeNrslV9P01AYxp/TnrYbY4xtjE3xz2B6YbjxwoAxGk28NcZbv4Hfyg/gtdF44RXBmEgQY6KSYDaRMDYYbKzrn9P2+LYDFToCXBBu6Hbabu37/N73OW9PFSklznIoOOPtAnD+AL5/0v1492WieOspz04DLAA8FQjUk6kwSUqCjhzBbhW92vyr4XufXhwAGGOPSr79NeevvoMxcZ+uJACKgTymyDAZ7tNRgWh8gNv6DZ6/Mx6ziKm6Z4w/gzpUhlN7C9mrARoFMwpGcMTw++KBDaf6Gn63jaHJ55Rb0YtZFKUbWOCZ21CTl+DU34Nn1+j3DNkV3sYOpU62aLR312H9nAMfrZALD/pgAg6YZJeGQxEmmJ4hm56EPLgbb0h781/G+4NL+O0FWCtzMEqz0AuzUSwkBTEXAyogcdj9zOjLGKOgGXidZapmHkZ+iu6+Sddp4hUBb3MOYsdEovwYijZC/F0cTDYGCP+0Yi7wkWvUHBrs7SqM1AaYUYGztoiApZAsP4w6B7J7yD5nEMCOA0LfPRO++Rn6cAWu5SBoLkHJlMj+BrzeD/DU1J5tJwL0Dor7XTiNRWjZSSjJPHTDhUynoehpsmSUrFuIrOFpsk7+D7EHAMIZDfZKJf+l2IXb+Aaeuw7FyBGsTUj6cBadhwnoxWlqgi9UZZe6rUKQoJ+YtOIAKXuURP/JlaIDp1mFHorrw5Be+8jnTM/fgLu1TDFL1NaT/R4JBgDgOySkInA6EFvr0McmwDQ9quS4Tctegdj8Bbf+HVruaqQVr0AI1bfr8LZb0AqXo3VIWmZcTR6xqKUKEK0GxOoKlHRBjQNcseN3zRbP0DIiGVXinH7lTGXhd7bhNptt7e86KOXFC+d8AX8EGADIN2F/uQDk5AAAAABJRU5ErkJggg==</Resource>
		<Resource ID="95ceacbe-9f50-4088-9a67-4f1dc0bd7d38" Type="png" Name="icons.png">iVBORw0KGgoAAAANSUhEUgAAAQAAAADwCAMAAADYSUr5AAAA7VBMVEUiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiJdmhHzAAAATnRSTlMAGBAyBAhQv4OZLiJUcEBmYBoSzQwgPBZCSEoeWiYwUiyFNIeBw2rJz8c4RBy9uXyrtaWNqa2zKP2fJO8KBgKPo2KVoa9s351GPm5+kWho0kj9AAAPhUlEQVR4nO1djWLbthEGyUiq5YSSLXtp7FpLOmfzkmxr126tmi2p03RJ1/Xe/3EGgARxPyAgRbIk2/hkSz4CJO4+HsE7AJSVysjI2AMUUOxahZ2iANhzBtZWr4BoIRSYAVN5u4QwDwQDRbcwfUi5KS3wFuDmFnQLa4Dtb//cqktwD5QEFFwfUs7PoCCA7y4bEJVFizcIob8KmhAplwwqVjt+9FBl3uINQniwEiryEyw9JHqGpQdEFNi+B4QQ7QOiHhysIPoAxUqxvdvvA9K42bsAv4S2fxfYOe57IJSRkZGRkZGxx7jxSHDHcRBXQMTyIjInBgHwBJ/bEx8PEANC+uhbpSSggCBAVODVabpI1S/k4WLZpTn6NpMhoX9Y40hxYERFpMcqUs4AloCtDQdID1YhnyXZ2hLjAYWiO9Dy1PDB7tPhIqLx+uMB8grZaR+Qxl2/C2RkZGRkZGRk7A7rBf7J0DR5/LUTjzUPIPSPGvQJiVJiB7kcQCiUOJrcFNtDZIf2xarQ3aGvLNxAVIFAabz90BFiBIlycTBhgWwOWCH0FLYHlPqwHaCvcIn2ZbosCevfPTRiFFcgvHukCjWwrc3GrGh1fsAof8EaUReKXkCB4/MzFNo97qLpFiKFYv/kNR5YQxQbQEofkZ2OuEOHqqT6gFTpru8CN7x/+jaZkZGRkZGRcV+x/rLUNcMMqUAscgnFocmpqkTzqymwVAPxfJ5PnIUUQOUKT04tEdWZyv3JCQSn96WS4pD97QfyW25A7NhSAbyhmVj0FEltA4vdiygBibXhoUYgykCUP7HwPTDeEqAIcHVMkZg7Zx4k0uFANs63hPQXCoRLAwdgGsr9Az7Qv7sgQGgg1aPl/BJLExBWgG4RFRLFImGmIquPC/klEGyCG0AuAXaJJC+B8FVe9NYQDEcXB8g6AQcjYJ1goJIggHWCrFR0S6kRHN5+4BzFi8NaoN35NRxUvL+JJdZr7PV4wK6fj8nIyMjIyNhr3OxdXAYq7FHZwB6bDSzSh4sF0utChqo0NAvaT1hLzXwFinmCzmeDucEQK18TTaQoFgP7bNC+RZ4OT4T6gQogDFYk+1QxQlj19QGSAWKiLYp8P0Ag1Gbz1ULfWHLg9iUnQNK5QQJcukm04blKLH2GgEJCY+HzXAZWCvHKco3Bp6MIaCjSXXRJyOxeqhnzEaF93MfFGW/O16ZvDL5TM4MJIjujz/cHypkQuuzRwWJ93BKdIt+wCRAPl9kpe2Ikkb2mFgGlxh/i40d3EHfdvoyMjIyMu43ylt/IAmGHnN5iIt7wKfbv01RAcJqFRl9lcjYQSnbQqKgC4fYOwSJt6N6trE0twZ9kN/PqNpTQeICvr4TLsDYC06U7BMjshS+v1/aT7IwQYD5LcgRQXMT2FrBfBLjZ6151jDElk9tPFfpUgk2yregusX25BJbwAFEfM+YI6vGAti4bTtizB+TjfQCrERyhKb2X8D6A9wX75P4t4neBYJeP6pdhg/gQl8MWvytzeSTjgOQBynQdh/iXKdxOrGJ/RkZGRsb9QmXihGr5+g8GGg9uTh+KoVZuNIzV+CwRucFBEyr1mVjx4irOxwM1BhirB6Q+2eNQi4eqR+aF6mELtoMzCR7V9RAFe/ZvQogNiyY8FPSUTFsLp8TeTmMui5mtw7bcaT0Yw2AA4wFRQIlkgq+1DQrNhkmoxS5Jq+u6bMAIGRECEANgXHTgWzwgBOhDH2l0oTQ4D8D5NMktBgNywAEMjo8rwATMZrPY7JGxBoJCkIBDQiAY09EGTUiBCWkUpISfGPR5AAwBfZiG2z7Ayc1yeKTxid39xBNwfHr4O0LA48ePFTvhYrF1r4tyAoz9n2MCqEuBtp/6GDR0oAYfG/R6wJExHYZHfhygsv7fEWCOj4bYmsP5A+pL4MkTfAnMlD4F+r3bobKvTyTA2P/w7PN+Agq2QW8piqMCpTBwenoKvX0AHGkGtP2YAPvTEWA7QUTAudn7/NxtOG46wWNmDtpBEkBzN7rBEvAFHp+YTB/q97qPAN4gHFqgBi8uLsC7qPCA6mg41G/+ErByPwEXDdoNxRhOx+M5jPEzQugS0ht+b1/Y3gEnYMAIAOIBE29/hIDucE8tmMsNOgK4B1RHFu4UCRlMHzv0xzcajcfdXWDs2h8TArBCkoDUJYDLmz6w7ip3BFS0ve5wTRwAn6keMA9I3QYbfSZ0DKbyt+7OXjGI1idPcfNyAyfAMlCrzaGqphYrxHocLHRJVycnfGUcbtT+jIyMjIw9x7Nn8fJSzG0TmFtO8rZT+XT3S3ub+tKJbbLd5diTVp50+zahyeHSslJ/YPrU0fuazrZO2CZ92/ZCCVXlGRiZKPJyPPRxyIFWeXLQBXJBKiq/3divEAN6ZwM200Qjm7EJBZeWm/PRWVCbYK7s7u2l4XaCz+lzgOfMfhMonXr7TWzeZb98dbgIzBT8Ub8eYYUqfZ4rVJ/MDbIDgPqTulJ/xvntWAtjIisqnwxOkGz0n077FARoY79GdA6HPE4rOy196NiMWHTZlSSApcOgXpy/fHV2joaNKu3ffsAnRcBf4K/6NcIG6tIxk3HyoXPjASqfUgXbYN5PzpL2njkR9QMjeDTVHDTCgRuxOegjoO0FvKzP/t/gmVdI24+G7NIe8JX6Wv3dDyldMA+4YB5wwTygtd+dwRqaTqrLb1l73zTSN52CNpnHuQOYPsDblybgxfkXh/oVtr+N1DEBJdhRJyd/Bd/q1z+cbNrD17iVKyajcnv9arhOkRPgsruuD6DmNPwpDNrLw2CoTgHni4yALr0L29+tiKAEIPn868ejx//8rpWP3OEOl5On9OwpcQm0MhafP/ey8f1uvDNIgGLQG8z4YO99ENgg95etwv4uYJYY8fUGHYH6j6fscHFZMftlAl9i+9XL73X3N/n+ZStOzfVfRvYXhrbdKOpEgVQTg/wsDuDD3kwOfQNMTJ5y+/ltUDWLunyxnRF46IqlBzGMY4X7inggREFioIyMjIyMHWCIB6ZNKAcXseo3vLTQTkVE7348dlwJJSz0+wLfmi8BhZqfw3D4ww/wHVLnEd5/fgYvXsDZ3MlsvYUbbnDjDZ3MN3TJG4+bxjAaDl8TBri9qxEw1ccao2wTNAMLHo2f+sjrXwb/9qHoYqgPMBXJTVfOpmrZH23y6uvo0LHSyY6fHGwKfHJlAuMFvObjDYrIqxBgQi20h7Hd/nYVLmno+eaNUm/eeH2GCuopntnhBJAlI2AHo9CCh1I1QxUdAbqqGY9BBLwyc3W4wYVhvY8A4BoIc1l5M7vnPWphZW9/Ses3n37y9a0uGqFwFQZsQQbd386DogpgEk+dzynsAZMJXq8+ns9NeukJ0PYrNATGGefJQlhkLo7DTXr+y3bNiOsDvrXTz/C2q1DXZH84iRNwrP88Nj+u2DjYEE6RBxD9Knj16ujVHC67A7422o02RwD3gB+t7EblWvu9geOFxSnd3ROmT+nJyQkhoPlsxVONc/3TEdBos+jtA+ZzcwHgTvD1cDjaYCcItA8w9i88A8b+mqSjc6Pvqd998QguEQPmQMeo23ODN86+p0/bn1buBkT6+oBhNZ/PYY4ZAHYb3PRd4LkZmPX68NRtMZn4ASvdA+qf0jMA5MP9eeg28Nug9QiLnj5A33U1MAES6xHAUNpz/9zFAYE1gqQDMT3G6xI9pwdw/aIgKoHCS1YGlRnSq9yCjdXjgN3j+N27YyROHxmuNAeNKPpYuXIyIyMjYy0M8eros59MF/PT2c602T7eA7zvhJ9dr/vzDjXaLp4Yc5+0wllzxzHv3gdmMMM7/CcQzKgVBqYTmFn+Z+mKm8J7k0A5F/jgCfjQ1WBhQyiOqD0lYuqBb+AyzMw9Ha2G3m6c8qQx+AlqnIceQp+Sb6i9UyQWbhr54+AjnZ0VzW2TAN0DmBT6PWmc6jDBE2PK2u+nF43dyP7Q0t1pOcX2fdRvH0mF2Q4JqN35rnHjVIeaXfIAVyUuw/aHCCiJy9iF5l1621zweI8KZrPZ9iJdb7DXJ3US0OSrtZ10imt7wHY7QesAzUMz1oZ3noB3qFJ/H18j97FYuw8QDN4oeKf30osvcSW2ExLo+VcbuAuo/sUIm8fMG9xocO3Ea19J9gFYivnHJ2KnyfovZlgW3v6ySx32abQiIyMjIyPjhlFDTLxpwIgFMnTp6A3g4IDKNY+stkwAMAoIAbasxBXqUWneSAWTMjt50lTqT29rFjvXohjsDNm2YPXDFlICmrJOZ3t6tHm8AiEAl0sCeLIIorIRt+cFbew/QRsoAXb4o1XSfoywzm0FTMAoYBNvLyFu8v8HpLBtD1iKgC17wHb7AI6d9wFbvguAIGTHd4E9wG7jgIyMjIyM+434c2R3HeV/Ffx6jtZu6ijl8h59T655jhR+rdHzDOP6beABCheb8O8/WFXeOyzgf5oAhVYnKxP7CwaAf1afJu8bSrhS6tdaXeGnrRenOqOlz9d6QwYnA/3TLd+GE7qe3chA5YF5DfY0vK3adfOX/gyNp2BW25MHdxAB9qvRiiP3/XpQQFGYDU4+Mi///XumXG8pjvaUAOsBGlf4jJt+YYEzeEzAdw06F19R3juM7D1wita86GR0CKfDHgLuXCc4Bri6vMLdfjMc4VNSUNsdodo2xu/1+Xl/K5+az8jIyMhYG/z5gJTMF1GtKq/a3rpyCvz5gJTMl9GtKq/a3rpyCmfQ4WwZmS+kXFVetb115ST48wEf/AGcfG1iw+tWbpbS2vJ3nQxcVr3lH3z5h972FUTLzYpOVk7l5hD+eYcYwDcAnewOotrZ4OtrPDucqi/LRX0/RR4qx7Nn4U8g+qjffvuN6Gf+nC85vwauHjaYyubqvWYKY4VEfSUMitdnBCT1Ue63R5439m+OgCn6DroAAaHPVQxKth/wkJgHmG8bmQMsT0D6EjDfvhVRKO3ywOQUgRA7nmL1uawZmHf1k+DPBwQ6NdcJ+k6Md1LA5f5ONdhJ8vZ5J0vLHT99srkGOjmJbd/G1r2Nriqnse1AZt1AalU5jW2HsuuG0qvKGRkZGRkZGRG0gcONyXsP9v8D0/IdJADiBNiXl3327WRGgOL/9HC/0XwlIURkRhC4tz6Z/fu7fUf2gHvfB9z3u0BGRkZGRkbGplHcnkgguQoSqtUXuhbs/wPtMwqV0HUJAvj5vk32b8IDuL23yn7qAXZ5u32hbRX7d3o82Df1FZXvbh9QOfhyxldr/+3xgXU9oKmvsHyr7F/XA269/eveBXrsv7N9QALe/tvjA0kPWAXGbvebkbHn+D/J5nMcHzx1UAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="2648ee0f-4c11-414e-a5f8-f0357a718f10" Type="res" Name="b7c8e353-635d-4f0d-ba4d-a76d7fe1c261.res">iVBORw0KGgoAAAANSUhEUgAAAloAAADvCAIAAACloe1SAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6OTRFQURBMDFBQkJBMTFFMUJGN0M4ODE4RDc4REMxMEYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6OTRFQURBMDJBQkJBMTFFMUJGN0M4ODE4RDc4REMxMEYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NEVBRDlGRkFCQkExMUUxQkY3Qzg4MThENzhEQzEwRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo5NEVBREEwMEFCQkExMUUxQkY3Qzg4MThENzhEQzEwRiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pk1txvsAAAMvSURBVHja7NqhDsMgFIbR0WBIdS3v/1AoLB6B2qoRy+R6z5FX/uYLTdOc8wUAsR0mAAA5BAA5BAA5BAA5BIBb3k9jDLsA8GDXdX3P4Uet1VgAPFLvfT/6WAoAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAfynvp7VWa800AITOYSnFLgBEz+F5nnYBIHoOc852ASB6Do/D/zUAhM9hSskuAITiIQgAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAcggAv3gLMAAgzxCji0egBwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="b2fb47b0-4c31-4b43-9148-6a1ba8c8c1a3" Type="res" Name="e1e1a7f6-a559-4915-b814-c54f4d481f62.res">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QTVDMkE2OURBRTFCMTFFMUIyNTg4RThCNDI4NjlFQTQiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTVDMkE2OUVBRTFCMTFFMUIyNTg4RThCNDI4NjlFQTQiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpBNUMyQTY5QkFFMUIxMUUxQjI1ODhFOEI0Mjg2OUVBNCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpBNUMyQTY5Q0FFMUIxMUUxQjI1ODhFOEI0Mjg2OUVBNCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PvsQj6cAAAJbSURBVHjapFPPixJxFP/ONP4c/O1imWjIKsIueOiSpKREktZlD2a3/Se87XWxiwcP3aIfZH9AHYShDCHZLaKCvI2HLqYJq7sDizoSap837Cy2bXToweMx79f3vc/nDbdcLtn/iPC3QKlUEmG+QEfQZKVSWfyzAYo2YQ6R3Ie9wXFcNBQKsVQqtYvvHcTXYS2It/UaTl8Bwasw70wm0xiFb1VVTYmieBnC4FO63W5TUZSbRqORi8fjt4vF4v7ZCY7MZrMaCATWFovF/clkwqxWqxaYzWZOl8u1hTjzeDxKNpvNwy3TerxejbG+8Twv0USCIDC73c5sNtuBxWIZUtxgMGg+n88noxn51NMJML6FgCIdj8daYjQafZNMJj/M5/NRo9G41ev17lDucDiM4FuUJInHo0yf4D32fo2Rg3iRQQ/S6fQeJpGw/0PsvIX9f1AisHHLsryLR/bwadIx4ILBIIF1Ci49BtWAqlarGhQAVVuFNBaLEc3beoNrGLfcbre3AZhrOp166/V6rtlsPjtptgO9QomESSKReBkOh4nqKbdyiYZyufzC4XDcoxdIMHYfO/9ETgjoM7fbzcDSx3w+/xzhV9C+sHJEl2AyVIwmms/pdPppbJ0FksFgsNnpdMYA+Tt98yt3YEOSGRQd+/3+z8DjSC8EnSP4PuGIjsmHe9ig/r9dIkmtVruey+Xuer3eUavVEoDJA2qQyWQeRyKRr7jGQ9zKBq5TQfoTApo7529cI7awkgqq9lF4sVAoPAWlj+DvQmknI13uHxOcIxeIqhMmiJH52YRfAgwAIgvZAmBlhb8AAAAASUVORK5CYII=</Resource>
		<Resource ID="539df93d-5840-476c-9b65-ddf5e8dfd362" Type="res" Name="1eaa5df0-fca4-4b55-8968-28cc9abd4735.res">iVBORw0KGgoAAAANSUhEUgAAAloAAADvCAIAAACloe1SAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzEzOTFGNTNBQkM0MTFFMUE5NTdFRDE3QzIwMzgyRkQiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzEzOTFGNTRBQkM0MTFFMUE5NTdFRDE3QzIwMzgyRkQiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMTM5MUY1MUFCQzQxMUUxQTk1N0VEMTdDMjAzODJGRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMTM5MUY1MkFCQzQxMUUxQTk1N0VEMTdDMjAzODJGRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pl3MTuQAAAYpSURBVHja7N3PTuJcGMBhKNwCGxfe/8WoMfEONMaFe1ZSvnd4MydnevhTlMXX+jwLUqF9gSYzv5zCOMvtdrs4pu/7ruuWy2VsxO1+v4/bBQBMTZ2w3G6j1p06eLVaxe1ut/uz06GLTigAUxQV2/+V223UulNLw9w7ohi3GUUAmO7qMEIY2xnCjOKFHJZjIor54+AYAJhWDkvI8hPAvL2Qw9wp98vtvHAKAFOUFStXShd/vx9zIYdxWH9QvkpTVooAMDn1R3652IvSDT4HXLeHfXx8ZBHLJdP2GisATEiELFd66/U6bjebzSBtR3IYu97d3eWRg7UkAExapO3t7W1xuHb6Ty+P7poV1EIA5rdMPPpPBwvu+L7e1/X5fb9S35+80xxxzzDHHnFvNKYU6esgNclierOu6vB28guVyuT/IjXKbhw/uLHu278ccc8wxxxxzvj3nT9sOhSoDb5zDnFu/oMhvfWcdzsF7a99hO9kcc8wxxxxzfjLnzMLxovVVl0m/vr7W63V51lwm1q+gbOf90cvcJx8qP14stjnmmGOOOeZ8Y069f3vPbVaH8eKihbkizNdar17LerFewMabqfev31tslGu7dcPNMcccc8wx59tzyv4lhO03XX6aw/KR4cPDQ/749PSUz/T8/Jxv4OXlJZ/48fExX0c8lC86NvLlxkN5VO4c98RD/YE55phjjjnm/GTObreLe+oVYX6OePkDwe12O7jr8/Pz/v7+1Ldp8jni+VarVXvFNu+vQ92uW8ujgyH1mtccc8wxxxxzvjGnLtRgz+L19XWz2fzoH1qUdWt57vIGMs7lyzzlKzb1wrbcWT56LAcOVrXmmGOOOeaYc+2cnFDXsf0yzm1WhwAwdTdYHQLALMkhAMghAMghAMghAMghAMghAMghAMghAHM3/n8AlkMAkEMA5mvkf3YohwAghwDM2sj/+1cOAZj1mq8bmzk5BGDORn65VA4BmLOR36aRQwCQQwCQQwCQQwCQQwCQQwDmza/wBgCrQwDwK7wBYOFiKQBcRQ4BmC0XSwHA6hAAfHYIAAsXSwHgqgWiHAJggSiHACCHAMybi6UA4GIpAIwmhwAghwDMms8O4QZ/eHJ7/C+2+IV/uYw8Oc7hmTNz7Sl1MuuT0G7UP/Z9/6PPDk9Nh9+g/sOT2+N/scVvOz/jT45zeObMXHtKncz6JLQb9Y9d17U5i4faTHanniaPLHvrIgBTz2dUMG9Xq1Vun8th7lGKOOgiAExOpi0Xi4MQnsxhaWZ9mcjqEICprw7L0jCiNljmrdtjdrvd+/v74NsEUVRFBGCKMn55m9ocLrfb7XDB2HVRxPrT3fHfzAGA/+fqMBMYgYvMtd+mOf7ZYewRe/cHuTR0KgGYqCxaXuPMFrZp+0+AAQDUPnUm4jiRpwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="8ea72905-faea-4e2a-82f3-e5320386dca2" Type="png" Name="start_container_back.png">iVBORw0KGgoAAAANSUhEUgAAAAEAAAAeCAIAAABi9+OQAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjY1QThCQkNCMThFNjExRTJBNTJBRjEzQ0E5RDMzQkJBIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjY1QThCQkNDMThFNjExRTJBNTJBRjEzQ0E5RDMzQkJBIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NjVBOEJCQzkxOEU2MTFFMkE1MkFGMTNDQTlEMzNCQkEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NjVBOEJCQ0ExOEU2MTFFMkE1MkFGMTNDQTlEMzNCQkEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7cY9LOAAAAGUlEQVR42mJgAIKgoCBmLi4uJiCTXhggwACICAFOJdlDjwAAAABJRU5ErkJggg==</Resource>
		<Resource ID="a3946d3b-bef6-443d-a48d-ad4adb8ab502" Type="png" Name="rs-cross.png">iVBORw0KGgoAAAANSUhEUgAAAA0AAAANCAYAAABy6+R8AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAQVJREFUeNpi+P//P8N2GZkAIDYAsbFhkBxIDYzPtENWNoGBgWE9EO8Hsg0Y0ABUbD9IDVQtA9Pf///7gZgBiAWAeP9WoKkwDSA2SAwqB1LTDxJn+fvvnyPUJAEo3r9JSsoRqg8mDgIfgBgszghy41pJSQMsChjQNQQ/f34BrgkEVoiLo2tkQNYQ8fLlBZgAXBMILBYRAXl0PpqmxNg3bxYgC8A1zRUSwmtT8rt3qDbNEBAgyk8ZHz5A/DSJl9cAVyhhE8/99OkCy+9//zAkir58AZvYx8ODER1ALAiK3EJoxH0AYrgGEACxQWJQOZCaQrAEyE/tHBwBQIwz7YHkQGpgfIAAAwBC98ydpFBpmAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="72541a0c-bf3d-4471-9b83-9a0ac54be1cf" Type="res" Name="9238c80d-f1ca-4b81-bf4a-59d54bd5c6eb.res">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RjkyRkUyNzhBQkM1MTFFMTg1QjZDQjAxNzZFOUQ5QTQiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RjkyRkUyNzlBQkM1MTFFMTg1QjZDQjAxNzZFOUQ5QTQiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpGOTJGRTI3NkFCQzUxMUUxODVCNkNCMDE3NkU5RDlBNCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpGOTJGRTI3N0FCQzUxMUUxODVCNkNCMDE3NkU5RDlBNCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PnrJ2zkAAACKSURBVHjatFLBDcAgCFTjLI7mBP6lfydwNJehNikNMUWtppf4Ae4M3GlEVDswvWYIAa+3JEBE55zKOeMnAU4mSCJmhtwT0cIRoQ5HXvDeH7w/ugGUUl7rnDx0YdvGaYEZv6V8WCreV392TCnpdl8OmreDz+D3G9gmKLHaF5cFpAT2wJMIKyucAgwAso08cLRft/sAAAAASUVORK5CYII=</Resource>
		<Resource ID="6d1190f1-5bf1-414e-85fc-9a016b3856cc" Type="res" Name="trash.png">iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAD8GlDQ1BJQ0MgUHJvZmlsZQAAOI2NVd1v21QUP4lvXKQWP6Cxjg4Vi69VU1u5GxqtxgZJk6XpQhq5zdgqpMl1bhpT1za2021Vn/YCbwz4A4CyBx6QeEIaDMT2su0BtElTQRXVJKQ9dNpAaJP2gqpwrq9Tu13GuJGvfznndz7v0TVAx1ea45hJGWDe8l01n5GPn5iWO1YhCc9BJ/RAp6Z7TrpcLgIuxoVH1sNfIcHeNwfa6/9zdVappwMknkJsVz19HvFpgJSpO64PIN5G+fAp30Hc8TziHS4miFhheJbjLMMzHB8POFPqKGKWi6TXtSriJcT9MzH5bAzzHIK1I08t6hq6zHpRdu2aYdJYuk9Q/881bzZa8Xrx6fLmJo/iu4/VXnfH1BB/rmu5ScQvI77m+BkmfxXxvcZcJY14L0DymZp7pML5yTcW61PvIN6JuGr4halQvmjNlCa4bXJ5zj6qhpxrujeKPYMXEd+q00KR5yNAlWZzrF+Ie+uNsdC/MO4tTOZafhbroyXuR3Df08bLiHsQf+ja6gTPWVimZl7l/oUrjl8OcxDWLbNU5D6JRL2gxkDu16fGuC054OMhclsyXTOOFEL+kmMGs4i5kfNuQ62EnBuam8tzP+Q+tSqhz9SuqpZlvR1EfBiOJTSgYMMM7jpYsAEyqJCHDL4dcFFTAwNMlFDUUpQYiadhDmXteeWAw3HEmA2s15k1RmnP4RHuhBybdBOF7MfnICmSQ2SYjIBM3iRvkcMki9IRcnDTthyLz2Ld2fTzPjTQK+Mdg8y5nkZfFO+se9LQr3/09xZr+5GcaSufeAfAww60mAPx+q8u/bAr8rFCLrx7s+vqEkw8qb+p26n11Aruq6m1iJH6PbWGv1VIY25mkNE8PkaQhxfLIF7DZXx80HD/A3l2jLclYs061xNpWCfoB6WHJTjbH0mV35Q/lRXlC+W8cndbl9t2SfhU+Fb4UfhO+F74GWThknBZ+Em4InwjXIyd1ePnY/Psg3pb1TJNu15TMKWMtFt6ScpKL0ivSMXIn9QtDUlj0h7U7N48t3i8eC0GnMC91dX2sTivgloDTgUVeEGHLTizbf5Da9JLhkhh29QOs1luMcScmBXTIIt7xRFxSBxnuJWfuAd1I7jntkyd/pgKaIwVr3MgmDo2q8x6IdB5QH162mcX7ajtnHGN2bov71OU1+U0fqqoXLD0wX5ZM005UHmySz3qLtDqILDvIL+iH6jB9y2x83ok898GOPQX3lk3Itl0A+BrD6D7tUjWh3fis58BXDigN9yF8M5PJH4B8Gr79/F/XRm8m241mw/wvur4BGDj42bzn+Vmc+NL9L8GcMn8F1kAcXgSteGGAAAACXBIWXMAAAsTAAALEwEAmpwYAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAABGUlEQVQoFXWRsU4CURBFxQWjkYqAiQnE2FDQ0hFqPsX/kJ/xX+itNFhQKCGSiIKaiOs5Lw6BRW9ydt+bnZm9b1528L/afKrD/K+UrBCs/Sb3eF9BH77hHY5gBUklnhav4QKuoQkmGsuhDMfwCEO4h8ygH5Wdp3ACSzgEG39BFWZgM5VbGJqweIYuWGyhzXxr8xYeIGm70MAljOAMtPsB53AHLQiVioWffNGSZ3oD96dgrAGhHasGtaVNrYmqQFhPAR8mFuUAPJtD237v5BULTfZ6jAdO1nVMn+X+H01YgBftlXhOB2TMBqG94WhtAJ7JAvfeoRN9glCuLS1EN//SgVeIqb6wtsENjCHlRgH7jbQbDQ2aEwNzn/QDAdtBd5Zzk/IAAAAASUVORK5CYII=</Resource>
		<Resource ID="2ab567dc-6daa-4f6a-afbc-1107d773cee3" Type="res" Name="icons.png"></Resource>
		<Resource ID="ef917842-c29d-4405-8fa2-503164ff1a3c" Type="res" Name="1447603486_checkbox-checked.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAY0lEQVR4Xr2T0QqAIAxFb7EPbV9Wf2oPBedhuCEDL4iCnjNjdkgaamZ02FPNbBfc3yC2CF8izg1ChQomllWYwA97008ASOAgcADmABdd8P+gEjgTIMnhuo0e1gsCwB1Puf07v5tzFWpkt96mAAAAAElFTkSuQmCC</Resource>
		<Resource ID="73d1b11e-8a39-4518-86b9-d30756c7fe85" Type="png" Name="login-sign-hover.png">iVBORw0KGgoAAAANSUhEUgAAAHAAAAAiCAIAAAAIxMrgAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjdGOEVGRkNDQzMzRjExRTBBMUZCOUVGMkFEQjU1NjkxIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjdGOEVGRkNEQzMzRjExRTBBMUZCOUVGMkFEQjU1NjkxIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6N0Y4RUZGQ0FDMzNGMTFFMEExRkI5RUYyQURCNTU2OTEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6N0Y4RUZGQ0JDMzNGMTFFMEExRkI5RUYyQURCNTU2OTEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5FYPvDAAAP4klEQVR42uxaaYwcx3V+r3umZ2fn2Nnl3tyDS0oyHUq2JOaiLEWRYlhOpARxINmIFBtJBNhxLiAEEgRCkAjxj9gwoAARHAGhJf2IoTiiDScQBUdBAkcRzZUSixJJUQcpcZdccu/duXZnZ3q666W6uqq7uqdnqQD+6d7msLu6urrqq+8d9V4hEcFPjh/fgSGgVzfp9Bwsldl6lVkmIP/jz1HUkpXln1/uF3oVUDWmVeDNXm7DuAUZDJ5D0BbG7hM6xptQvwBtgLRenbSL/88hqtOlFs5YHQ1QeEviH6lyEsMJgAqeEmMpEyZKePiAMTMWAZT+/Sz98ym6eBkuLrTS1XqzjAoa/osBtOjjh8GNuJaF/p94kjZ7bwe0ABxqvM5/5WxAFxwVbuJtSgDZLMElQxs9JkGJ18e3kINDh6C6Da4DH1wE14UoiloLpE79OlpiYHtfullIY64384VPZ7/0Wf7A8J6+c42e/U/6rx/RK6dd2oLmmlUqeFiHKHi/hIquGACCIdO1bhuZAwJN/jSNmRv1DkKsv4iEYvq9CxSFGBsZDPeDswozOfVF7JgX7ECzC+/v/jjUGt4nzBSM7Y1+BztexKTbsIRGe2BrCZt1Z2Gh8viTzdfOSEDZs//BLi6wuatUzDruMi+xKmUj3yuHjeKbnWiGIh/0RGCRHgVzkILC1CCkxhLnfZfhhzQoFWllxbtwLtFgXrxLCvdgAnyBDEqCOtHz7p+mS3VSn6NCkUr90bf0E6PXGL1GKvU6zqKHVbkMadMkvPqVJyWg9OYlurTAv9NOb/rwcfQyjQYahkbGKGu6lRs9hjXjoyyaEhBzwhrZTsg0cLsQinegVg1loOcal7KkyhjVrUl1xoegHk6lBGV0HKxMUmuJtxFr4VhrxPWlGGnPzjYYZuXseQXoZo3qDXfIIMMORmswJ53PSn2GCBBTgwjxcq+LZuYjhCmJUchSA62DXOXEuYmhHk/iCFBfjtx2eGs0aTqVXDOkT1JTXJncfBM17VCloI8q0t69StVAB1V1IYg8YmMpQlu1Aui6Vq7HrtaVDmWMihmH1vV2PctSq5l9RX8SNCwQFItj4mmkJ8AoBCpVdVSM0CyANQVdNDyoIUWOwQHY3Iizx12AvcXd/RbVsEbVT38CrtZihkvC1NMLg0NdRQQShJCG8y5bATU0/91UrYLZrGJoyrRhWZtPUkCQVS2DlSKNUKoVIuk+KCVrFtCa9K87aeK9a02R2UfBK6omk00Fvok4MxatLZNeEpz0AWWt5EfKuwn6750H99NCvfOpJxjilg0OUTardZs6FDGFDM1YLlz1SlCRAyWs6Z0tD1lv1nMOmS5EbQzJO7JMtJU/FvhF/uSHPEXTtG4kUWgeGjOOKDW6UGFvL/Nf8qnRc9A4UEl/489xatR56rjztWegmzOZ6u4DpRwYbsBl8zoOdn8u/fwfG5+8mb2+0P7D71KtGbfp2oqG9k7ApfeBuV3cL43Xe5pEbuikao36vBKAUiP0jSDizXMgjEbD3LOHlWu+lsSIEyxtk5Hez82OcfO49bcP4mR/XExfeqd99F+ErsiYf/DbHE3vw19+qC0AjXme3vXwAKws7yp/azB9E1yu7VLF/OK9HE1PBg9P4qFRmp2Pg4XBogYhnYGRMVy6trt7S+N5RvPUoTqE6lZ2NMC200kMjvTGBuRykZrCgssPpgYwPQzFHuuZz3ei6fNUk/0ev5CdfCPuIfnXhQKtLO9qecTpvk99vbvXke3Xmuz8cqI7FRluqeQ5Urs0WMgydiWyWkKMgoaSoaEkdDhDCjNM2c22NIwhlL7qMKwbeM3U5w5jUYLV/uYpJhhheOK/r338zeDD9uPfT51fhPZV57kXkkW61fhQi0iDQXEdqr3dnrefPkmlIbRM56V3hbxTgv+PUU9wfAI+2AbHSVx0sfwmIKMQqXgQxL9N6S6MVwUpdI4wxNSwW+bAIKvUYgsL00PTU3jmkf3hYI6donrLu+KwfnM28Ae87z10q/dqaghvuYlOng7aTz38y+YnboOhfrBturJIV5bck6fZuQveJ+683bjlJtnyU98277+bl+DUOK/W/odT9PLlJA2Kqb98ENuih0f2Ocff9Gb+0Z+XKujVOao2U/cd5JPNbznizvOnxSARxiZwYT7UioFcT2epvRZip62Vhd7AYKmYgsDqRfQjQjT84C15Njfs/gGq1gN4jPQYmv0Q4yxA9juPto+/4c7Os/NLMlzge7MTpfTRe2Sfvt7gkHmlt9zY843HfMWqjttBBEPsrx7jCKa+/JscQY8j5y4Ydx72r/1qHNbmg8dgpUOZfvJI+jO38s958M3OcxHhsKaP/qJE+3jJvO9gIE/mkRlaKLuzc95NLkf9e6C8HrFgQ3nWngM9YBKKPSUwlKJGJgojKXp7ss69rbZpkRdTQORWiHtCqoIze8m8Q5KUa1Lr6L0eBAsV5/gb9tOzfpvGZCm0VO/ZZOSwgJk4mlqPq1uREIHiaWh57rydzMuQHoK2E5bO7IXVbR9NAegcRaEQUhLVH4dGef8lRCMjuL0FtvIKUiYZV6Vj57kGejwqIHEYnhJ+qIKZMCl+EZozrkOY2ZvxdakQdiOIatnHfuj829vxjk6WrKP3pB894ncnGKRsvOej5v2/YCg0W189Vp/+pZ3f/+sQdC77Ho4yvMKuLDUe+VNexxWqQLaTatEEC01HKkUz+3CkoNsK3knjp8I5s59+devIEztHv9cxUhWX0ZdP44xSdsxQ62tYUC503MoH/4ULAAqWhkFDZNSqOFAyrUk0egNS+680/uQ7jd/9lv38aeX0KSfhodtkQ0rKfEkEzKUf+JS8PXnafurbXp0+DYsrS3pJ+7kTvpaA6lYAsXh5ESb75Dv3/Rws13Rnw317ObYQaj3xA95DvZPere4DZHpoaFj4SUXmriRDqdXXV/wprR5hxMSTbkxICzGZa3XM7GHGGhTyEImIYvvsufbZt3a+jqmfvaH3bx7GYtbnKcttezVm8mGD+W3eqHnHR/xb5+TrUsv05TWGLplRMScp+yFn5Xjc9yE/AQeGYPUa5NE4oMVisjuU2zI+PhQ2kvPmw7h1IPzQ2hLltrVlIABHO9/D2BxoCwiijmA06nHUwG3KTWLJUSF3FMsfHyCfv4ZaDhneyeX80iqsl9ngBuwwGRjpK2KpwK4sBrA7L7zKfu8uHw5ux2B51hPeod+QAzh3gZZndeLgwVtp9DIWsua998o67y7S6BGYORAOu1bwSjTOUsvySwSBEfIrsLYOjRrgdPCW8/K/eoY085nopwHq+0Kk5v8HVi6EeDkGVse8IMbo7VKg9UWpt1pWCpKCRwyqVxSgdhqaGQGlRJBk+N2QK0gQUHq/YJQ3odEWRmmaYM6fm8wjv5p97Iu8r+7Z91whhum7Dgfkar/4sk9wY2o8sDYicjzML3xKWr/+M8bIkHloNFALVLZhK2/OzITDXgWv5FCoDd0z67xE3tzQgjMLotkRY2pMs2xeECjojH/L+2N+LOS+c+6iLgZo7ocdETZc2KY9gxIv7wkjHVZREq4YbCuw8iI8QSpIrxQAIRMQYxgHaDahvCkncqkOk8PkrvA3Mr/1gN9ps8MQ8wHs/P0/SVFV43TPvUd9/bC2ab/435mHf0VqH+EVcnXmY8quVkiFYOSwzy95t8UMRLSYqDCCcO41KX5rG8b+qZCPvjQqUvMS5l8p3cJ7SHr+wxyFy1V5vbkOvb3U06OwA42qnKBuaOMlwD4lAzNHpJE4qonFcg9XlzX2EywhuJancL71gnP2vU4oW8+dqN3/Jd90oMYaVm/Q9g5/cedrz9gvvuJz1n7p7dpnn+WelgrUlT0toZkXJkyHqdlrbnCEZSeqnycW2npj77B8xQMr+umKNGgpNfeO8Bnku04GrhmkAQLLi154U9ESOiwSRRJNwuuufOor9rtXVKzT16GGCpL4wu7JurG+hvV6NI2DntObnlf5J+SSjkqoHc250RKnfsxmGMqV+DNz2Dx8T/H53/HvGo9/v+WtcD7EMVOHt05TNM5C/SXcXE1IeUKXCJef2Grvh9V6LGFHxSJ3TgW6UUkngiD2SHRxa+6OtRPKsec1fBApGsJD0QRHmPu69aqnTGP+/9oWTE+R46//yH7lddTi0NHRqID00Ai3adJ6FfN9J55sn3yDLSwbxXzmkQdCb3F2/kPliPchRzPm03i/5QoNjuD6SmzJQruEj61puFZPSH/WKpTrpVwuDAVrPA2YSkH4DtQiQCHJiAyV0RXAOA7vGUVCBhobLjdgvEC4JWhKpKV3OuPgnj7iaKqvpu+6zZwaMx8ei1XbefpV92rl+mjmEeb/t2tsfb3MPUpoNXdP4PsgIRVgrkFd0tGerpucBtMMUvJ+bLrzo0aoaCPRKiLJbeHMr61yPQIJQVUVk9vqB4bxsFg8UyRuM72RCY1bWK4rthtP/ICfH2rbQnERtre75f48vybTqwt5chDPQ8aA+h5IILG6dl1cWSLpP0mS6nmBgLYpmVPSVvOCZEYQ1DCqVWg2KIx9JaVfajtY2MdgLkrSeArR00SrZZ28rROvtIRRSt8pV1Nc/CG9H6zJ6+PJl75nLlwnD1TbopHRaLiaYprT95OoVk/a7qApkp0GVjZZXwlII5NUrJx9zA/tCR2aNpk3Rz5kwglVKhVt23M85fssGj0xIjbnWh0nBog2xIKLUKUZKAhd5Qu0uokdiw5/juyTp8PQmzMHqX4w8l3nj5fvMeH8D7UAUPedOasbUChAvdY174aDsFBP2j9CMc2MmxuQ7YG0JfrPdKLbrAW9lhR5HCm4zA0kXeakvIMZ66v8zWj2iqIXYfIL1nvISQXaJSZZzJHlrFMwKaZtiLXeEd+Fjryb+DWQ3AvMcUjLbkGQBybQrK/vDLGOFLGy0G4K1rLRrlKXhB3vl3AcPfWn9U2QdKNVtW6ZloDm/uzX2gazWZtkMpDEYJhR2YS2nQQiJOcXmzbiVFTFyLGxwWFqtfTAlf6UIlEHkaBhDWp9kACBP9n7m3TtGugqTHeKMHQO5dm0/WBHLJIpau+jZivKj84vhuVgt3BjXSKpCsvt2ppbvvEvHpWAZg7tz//V55ZbGxWn7nBYBZmxuWNExCS2VSpxWw13g+tgjMs1AqmNa/0DxA1uGMpK2EGp5ZHV6sJZBHczYQfHXoPOvBZhGalFtQ5wrHHegYGBEBq/hrkXlmpJm4OoQ97DUWOtAjs7XIq4WG872wuNxYtb8/se+8LAkY9FtjNWTp298Hf/uPGjtxor67x2qlEHoo69KLtvqpLbSSjbJHTklhM0mcrZatui8Hq7m6SvD6kJ6SDLAt7UErR2Ei3QLtvvZEqCs1/mir0FFjZ6InHNOHbddrl5yRK3t48rK2u4v3T44Ef/6PNDKo+AP9lw++M9/k+AAQCWRmEjz1/W0wAAAABJRU5ErkJggg==</Resource>
		<Resource ID="4d827ae1-a2c9-449e-96f6-7510be1caa7e" Type="png" Name="prosearch.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2xJREFUeNrslU1oXFUUx8/9eJ+ZvDZfnXGSVN2UfiABaV24EKyIIll14aaLdhkEKS4UxFZblYrixm1CqQVBrIuCRhclFl1IChZsE9FFOk1MNB8zmXlv3sz7uu++e72TRDC2nU4WXQgeOFzufY/ze///PYeHpZTwMBPDQ47/PoD+++D6+eMg1SrTBLOEHS87Q89Uex4txEAtWV1u7FqcvZULq5cSYswLKe9Z9OSn0/cHtIKk8SOu1f/B3NGTWvPxI3/GGnWFhF1IwJ7K6uIoXL04emDmyjmkmV9LhHamgAhu13uG373z0pu/NXvzcysNsCohaAGHnPKzZ7h/b8U58c5jNy73fvjk9EQkdGsKAHUOkJiMrT47difqy19b81VxBtTNwPQ5NJoZNJcSaB7MQTxw7FU0u3b7tZHStWmmWwHIDi/ZH3riQDS8/9sogZirrYYhsAiENoHAxNCsZ1D7pQELEYL54KljA4mQR6XY3vttAcnQoVWlq6zei3QMkSoaGggCA29kQ4GakQR3OYDlqHhw1bf6DmOR7cAi2/HVYUwxEFWQMgxCgeRWgjpDmRpQL4WqpPYK163dKPU7B2ihZxECTBUzlD3S2ExgW8V1BJgrMEdQT8JmYrHAlW0u+S6LrMVbBZ3LnIUhVQVTBeJqZcbmPjFbiSDONPC6lma6dsfVn4iSqz4GNCQ31rYA849fZ63Sz6OWDa61aQ/fypYqZhIF0CHETGiHZ76MGrjrm9uRCXORAaXE3ljbWgQIXez9/sLHoTOwYBaGf0hDyHEBKFWQlABKNAVLQR+Z/OiV9bmSeVPb91y5vv7dhr2UQsp5ewUCkVjzy2cHvzjzYt/0V2/YkbfX0EEYBnATZfbg7zeff+HzUyfCqSvm1VL96aXFhSmT4nMte2jLIiQfoKDVSVRfJyx4vTA1Pur8ePnlRnfBjpU0cCvSXivN1+rBmevLbKh/YM+NuudRSsjbjuMQIcTpB3bRPyZaXYA1qUX+pOOVdTvllGUiFISCDzpU1leqMeNjg4PFCc/zEKX0re7u7jjLsvc7AmwDUYNlQJgA5e/WUBFKwPXcC1nGk2KxeMl1Xaxp2ntRFDXU4086BrQLogbG9/3PWt2dz+fHlRJQObIjBR1CJjjnVbU9UqvVxrc1pbzPT+P/f/Lf8ZcAAwB3oOB0QT5lzAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="92e097db-dad9-412f-936e-229731d0bf78" Type="gif" Name="throbber.gif">R0lGODlhFgAWAOenAAQEBAcHBwkJCQoKCg0NDQ4ODhAQEBsbGxwcHB4eHiEhISMjIyQkJCYmJicnJygoKDIyMjMzMzY2Njk5OTo6Ojs7Ozw8PD09PT8/P0BAQEFBQUJCQkVFRUdHR0lJSUpKSktLS09PT1JSUlNTU1VVVVZWVllZWV1dXV9fX2BgYGFhYWJiYmRkZGVlZWZmZmdnZ2pqamtra21tbXV1dXZ2dnl5eX19fYGBgYKCgoSEhIaGhoeHh4iIiImJiYqKio6Ojo+Pj5GRkZKSkpOTk5SUlJaWlpmZmZqampubm5ycnJ2dnZ6enp+fn6CgoKGhoaKioqOjo6SkpKWlpaampqenp6ioqKmpqaqqqqurq62tra6urrCwsLGxsbKysrOzs7S0tLW1tba2tre3t7i4uLm5ubq6ury8vL29vb6+vsDAwMHBwcLCwsPDw8TExMXFxcbGxsfHx8jIyMnJycrKysvLy8zMzM3Nzc7Ozs/Pz9DQ0NHR0dPT09TU1NXV1dbW1tfX19jY2NnZ2dra2tvb29zc3N3d3d7e3t/f3+Dg4OHh4eLi4uPj4+Tk5OXl5ebm5ufn5+jo6Onp6erq6uvr6+zs7O3t7e7u7u/v7/Dw8PHx8fLy8vPz8/T09PX19fb29vf39/j4+Pn5+fr6+vv7+/z8/P39/f7+/v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////yH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQACgD/ACwAAAAAFgAWAAAI/gBPCRw4kI4DJgM7jSLI0NOaTAKlBDAhcBKcRQwJzmlwotMpJwBEnPIEZ0yijAMRVXiQ5WPIU4bEsPGEUiApJQ5AEAIpQtSZMYxOmeqkidQpTl2oRDpViUSCIXluWNkkB88oUIbSjJF0qlGLCinCaAKDYg9BUKEwlSQjR5TANi8sTJDBFaWcMG4WLRwIyYqHGJRqYjrkEWWjQDUFZmLEmBGmO1uuSO6T+JSgMJhlEtmRo7Oayo7siL7DmI+e05Aqb3KLstMhTDU/vTljiObAUYvchKlTU1SeMWLgTBIoSg6ZMWwuhQJFEJMcTKMYsRkDx6OkMWkMgRqFR84mR4IyTR0KA4e5p0R6T5HS1MnUKUZjzoiyE4ZRJzdjDLmv6YmNGEOn0BfUImSkURhKiVBHk4CnjGKcJoktIpxAd4gR1CmiSGJUTaMcKB1sNQUEACH5BAEKAP8ALAAAAAAWABYAAAj+AE8JHDjQTgUuAw9dIsjQk5xNArUoiCFwDIYlDAneueDC0yksCVicQnShwJGMAxmJyEDmY8hTRAREYIRSYCksGFQkAslC0AEBGE110kTqVCg9cTCdqpRCgpE+QLrM2eDhEihDachIOmXpyY4iez6loRGIoCNGluCMISNHlMBGT3LokKKpppwwbhaNIpjpzY8mdVFiOtSp5iRINQVmYsSYESZGd+xIdpT4lKAwmMWwYSMGcxhBlR1JtnPHcWNGmSpvcouy0yGlKD+9OWPI48BRi9yEqVNTVJ4xYuBMEihKDpkxcDCFAkUQkxxMoxixQV5Y0pg0hkCNwvPQ0aBMh8JKwGHuKZHeU6Q0dTJ1itGYM6LshGHUyc0YQ+xreuJs6JR8mouQkUZhNSWCnEf/nTKKcYGhtIhwAt0hBk2niCJJUTWNQmB7bMCGUkAAIfkEAQoA/wAsAAAAABYAFgAACP4ATwkcOBAQiTEDEXEiyFCUoU8Cx1CwIbCNCCwMCRLisUXUqS8SZpxyVKIBlIwDLRHpcedjyFNHFnRghFJgKTs+kkgCOaMRBAZbTpEq5GbTqVGLEnk61YlJDjSBkJQJNOJEJkdBHhAgwxTOGDaMRP2h4ojgo0dZKhAwwCGTwElwxIyRAxHlBwAUpnQi6MmQmTd1M8apEajmJaM1T2VixJgRJkZ37Egum1hQmMti2LARczmMoMQjJdu547gxI7eJN3lE2ekQppqf3pwxtHQgUjdh6tQUlWeMGDiTBIqSQ2YMHEyhQBHEJAfTKEZsjO+VNCaNIVCj8MjZ5GhQpkNh4Ego95Ro0SihmjqZOsVozBlRdsIw6uRmjKH1NT1tNnQqPs1FZKSxV02JGLeUf0cRp0liiwAn0B1i0HSKKJKQktgoA7LHxms1BQQAIfkEAQoA/wAsAAAAABYAFgAACP4ATwkcOJARkTsDG3EiyJCUJFEC+ezYIrBNiy4MCTYaI2fUKT05rpyC9KIClYwDO6Uhs+hjyFNWLKSIhFKgKUNj3GQCeaWRhwlhTpFCNMfTqVGLEhkFBSeMH0hr+gSKIUNTJSUVGqw51QnOGDaMRCmSg4kgJUlgSDh4cCKTwElwxIyBYxQligQgsnQi6MmQGTefau4ZQqjmpU01BeZxwlgKHUZ37Eh2lPjUDQCYAzhgIyaMZ0GVrYgYbYIJJkaoGblNvAkiyk6HyqL89OaMoboCkboJU6emqDxjxMCZJFCUHDJzMYUCRRAT2VGM2MzdK2lMGkOgRuGRs8nRoEyHwkrAYe4p0SKPpDR1MnWK0ZgzouyEYdTJzRhD7Gt64mzolHxGpyxCRhp71ZTIXEb9d9RxmiS2yHAC3SEGgKeIIgkpiY1SYHtsyIZSQAAh+QQBCgD/ACwAAAAAFgAWAAAI/gBPCRw4kNKVPwMthSLIkJQkUQILKSkjcFATPQwJNhojZ9SpQEcoZnKyI07GgZ3SkFn0MeSpNzmKYDop0JShMW4ygSwz6YeOPadKMbrj6dSoRYmKgoITxg8lO4QgNZHyqRIWERfknOoEZwwbRqIUyZk5UJOmNCkwZHCxSeAkOGLGwCl6UoYEFWToCvRkyIybTzT5GElE81Jbmqf6YFmsxc5QO5AdIT71I4FlBRXYiAnDWdDkLixCw+CCiZFpRpkmB0JEs9MhshkXWUBAhPXAo27C1KHJyIMAARfGCBQlh4xcTKFAEcQkx9KlJREGaGAtaUwaQ6BG4ZGzydGgTIfCTsBRzkgIFE6nSGnqZOoUozFnRNkJw6iTmzGG2tP0pNnQqfmMnLIIGWl0glgichUFoFHFaYLYInBMItAdYgR4iiiSkILYKAYKxAgbsGUUEAAh+QQBCgD/ACwAAAAAFgAWAAAI/gBPCRw4EBMbRgVDEVxISpIogYzE3BHYiAughQQbjZEz6hSjMHZOcfLShBDGgZ3SkFnkEeSpPUyqbDop0JShMW4yfbRT6YmSi6UsEXo4alEiT6dAwQnjJ9MgR5XEnAnVyQ0RHoZOdYIz5qAoRXIwEfzk6Q+THT2efBI4CY6YMXCQnqSSI8mdhwM9GTLjZu1JR2gk0bw0k+apQF8SjwHE6I6dx44MnzoioTIFEmzEhNksSHKZGaBtjMHEqDSjTJIDNaLZ6ZDYk49GQDgSeWBRN2Hq0IS0gsGCEm0EipJDBi6mUKAIxvmgRdOWDg1EIDolaUwaQ6BG4ZGzydGgTDYATFSIzCgKFk6nSGnqZMrjmDOi7IRhNIgCgSCkDHvKnFU+wikGPFCIYYnAhZR/WnFAgBuGLQLHJALdIQZCp2RCRmEnjdLJQIyw8dpJAQEAIfkEAQoA/wAsAAAAABYAFgAACP4ATwkcOBATG0YDO40iyJCUJFECGYm5I3ASnEUMCTYaI2chozB2TnmCMyZRxoRpyGD8GNKQGDaeTgo0ZWiMm0wsL5kZg9BUp0akTo1alCgmKDhh/GQa5GiTHDiiQBlKKelUJ5IHRSmSg4kgKE+KSJKRA/GURTFj4MQ8KSeMm0ULB3oyZMbNJ5mYlMq8tEmmQEh6AvNhxOiOncOO/J5ak6PxDiJsxISZLEhxnyuYt9zBRJhwJsWBGsnsdKjrSUoxPFiBRHComzB1ZEqSMcHCizYCRckhkxZTKFAE96AAoylMigotREsak8YQqFF45GyygiPPkAQkKp2KRMULp1OkNER1MnWK0ZgzokQAcEIIhAMlQWV6imzolHonp7I8qIDIb6K0Md1n1QkNzOHXInBMIpAJAUghUCZrrHXSKJ0MxIQDdPgVEAAh+QQBCgD/ACwAAAAAFgAWAAAI/gBPCRw4EBMbRgM7jSLIkJQkUQIZibkjcBKcRQwJNhojZyGjMHZOeYIzJlHGhGnIYPwY0pAYNp5OCjRlaIybTCwvmRmD0FSnRqROjVqUKCYoOGH8ZBrkaJMcOKJAGUop6VQnkgdFKZKDiSAoT4pIkpED8ZRFMWPgxDwpJ4ybRQsHejJkxs0nmZiUyry0SaZAnIwCY2J0x45hR35PCQrD+CUbMYzDCErsyLCdO4wGB2aUKTGkSTI7Hep6UlOTH286DxzqJkwdmZqk6MjhZJBAUXLIpL3ECOPAQDTSfNpTZEcTS6ckjUljCNQlDxTmdAHSx4iEFJVOYYqjJ9QpUpo6RZk6tUQAAkQsEmBJpAIDllJ+GUUQQORUeiynxmAQgVDmkQIXIGKfela5cAFFMi2BwRgCxaCAFgI5tdZJlxwyEBcVhCRTQAAh+QQBCgD/ACwAAAAAFgAWAAAI/gBPCRw4EBMbRgM7jSLIkJQkUQIZibkjcBKcRQwJNhojZyGjMHZOeYIzJlHGhGnIYPwY0pAYNp5OCjRlaIybTCwvmRmD0FSnRqROjVqUKCYoOGH8ZBrkaJMcOKJAGUop6VQnkgdFKZKDiSAoT4pIkpED8ZRFMWPgxDwpJ4ybRQsHejJkxs0nmZiUyry0SaZAnIwCY2J0x45hR35PCQrD+CUbMYzDCErsyLCdO4wGB2aUKfGmSzID1Ygj89MbM4bWCuw0hQKAD6XljBEDZ9JfDgYIVNAC6RFBR1T+iGLEJm2nU2QIPAjiSNOKEYHKIAmEJgeT454SwT21yU2hoFsYQkBoNEPCF0lKdrgp5ZdRhwVHTpX/cqqPDyKW/EJpUALx/FOiPMEDIX5hIUIbAtlAwRgCfWJIWSdxgshAY4Sgh18BAQAh+QQBCgD/ACwAAAAAFgAWAAAI/gBPCRw4EBMbRgM7jSLIkJQkUQIZibkjcBKcRQwJNhojZyGjMHZOeYIzJlHGhGnIYPwY0pAYNp5OCjRlaIybTCwvmRmD0FSnRqROjVqUKCYoOGH8ZBrkaJMcOKJAGUop6VQnkgdFKZKDiSAoT4pIkpED8ZRFMWPgxDwpJ4ybRQsHejJkxs0nmZiUyry0SaZAnIwCY2JiQoRhK35PCQrD+KWDAAAi30jsyI7lO4zoSHHCOU/iTZdkEhqyR+anN2YMrRXYKQuIBChMyxkjBs6kvyceOCABRhIlgpjkKBLFiE3aTqfWNKigpJImGTEC9VkDyU8YOKBEJoIrcg6ioGEmQHhodCWHnkxuxhgy5TdSCguIy+s5tYhMGuQyqVR4AemUfKFykNGIX1600IZAW+zAh0CiSBKUTJwMKNAdRCAkU0AAIfkEAQoA/wAsAAAAABYAFgAACP4ATwkcOBATG0YDO40iyJCUJFECGYm5I3ASnEUMCTYaI2chozB2TnmCMyZRxoRpyGD8GNKQGDaeTgo0ZWiMm0wsL5kZg9BUp0akTnGCEgQhKDhh/GQa5GiTHDiiQBlKKekUIg0DIiy5pEgOJoKgPCkiSUYOxFNjLggQ4AHhSTlh3CxaOBAREQQWMJ7EpFQmokAyBeJkRBgTExMiElsJfEpQmMcvHQQAQPkGY0d2Mt9hREeKk895GG+6JDORET4yP70xYyjmQE9kVEiQkVrOGDFwJgnc5CIDhhRpNGkiiEmOIlGM2IyB0+mUnAsisFT6JKUJJEeDMvkJAweUyERzRUVuLnVqj44fk+yEYZTJzRhDpgJjKpLjzSn1CBeRSdNcZpwdT2Ry33qnjCIHGY0EpkcTCZ5yhxhuiSJJUDKFUslAyX0lU0AAIfkEAQoA/wAsAAAAABYAFgAACP4ATwkcOBATG0YDO40iyHATmUwCGYm5I3ASnEUMCbohwKHTKUZh7JzyBGdMoowDCz0wMOVjyFOGxLDxhFIgqSAEKAQCaeeSmTEITXVqROoUJyxREDqqAKBGpkGONsmBIwqUoTRkJJ1CJKJBhy2atHyIQxCUJ0UlycgRJbBNiQUMVkCqKSeMm0ULBzo6AmHEo5qY/EBE2ShQTYGZGClmhGmMjRmQyxw+JSiMZZkkKEjYfGSyIzug7zACNOaLacOHN12qKQmNo5qf3pgxRHOgqDtJclCBLWeMGDiTBH560qOHkj+eQBHEJEeRKEZsxsDxaIgHETqZRMGRs8nRoEx+wkrAUe4pEd5ToghZKvVxjJlLdsIwyuRmjCFThz2xEWPoVHyEi5CRhkc1JSIdTf+dMoocZDRy2CLACXSHGAihJ0lRNY1C4EdsYHJYQAA7</Resource>
		<Resource ID="effb9aac-77ea-48b6-8ab4-01b56004628e" Type="png" Name="bulg.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAALCAYAAAB24g05AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjI5MEE1OUNCMzExRjExRTFBOERBREFCOUU1MUZFNzMzIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjI5MEE1OUNDMzExRjExRTFBOERBREFCOUU1MUZFNzMzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MjkwQTU5QzkzMTFGMTFFMUE4REFEQUI5RTUxRkU3MzMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MjkwQTU5Q0EzMTFGMTFFMUE4REFEQUI5RTUxRkU3MzMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz47BGyCAAAA6klEQVR42qRSwY3CMBCcsY0S4CQe94AqePCnI1qgC4qhACrgTQF8TohPEhDxso4tCOEQEoy18ire2Z1ZhUVR7PAFWJal5Hn+EbmqKhh8Cbc97JFlGRjkaEgIkZg192uczmflrBYCMjF9JNZ6ywXwPn5/Mq7h9aFn4X4HP+qDyvVNhEemcytuMeMIr3xBbQj3N+zHKaHQ2P8nPiHZswZuud6AmsCYt57vQqSxYEN6nE+EYTL5qPa21gDfma9rU7vO13CH6QiGNhaTnQYtye00KKU20MZuPOuhviQCpbu1TjNJDuLvY/oWVwEGAOpcVlY78Lh/AAAAAElFTkSuQmCC</Resource>
		<Resource ID="ed048b51-ed74-46bb-bf9a-eefaf8822634" Type="png" Name="login_bg.png"></Resource>
		<Resource ID="32036af7-013b-4a6b-aeb8-8bbdb09b3161" Type="res" Name="close_btns.png">iVBORw0KGgoAAAANSUhEUgAAABUAAAApCAYAAADar2JAAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KAtiABQAAALRJREFUSA3tldEJgDAMRK0zdbiO0OG6k3LIwRligv4J6UebS5MXvA+7bbXKgUcH5pyHXlqtd4wbA+9UwBijWe31IBdCUaAgaCwMuCJ/Dy/ZouAMiJ4UqkAOycA7C71TgQrSvNeX5izA6hRQBeVAOVAO/M+Btdbt4bPa+6Lwz6+A3nuz2gMiF0JRoCBoLAy4In8PL9mi4AyInhSqQA7JwOHDp0AFaZ6DXp0WYPUrWBWXA98cOAFDDU3vRnEfbgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="930ce7b6-8706-4ce1-a5c9-7ee6a606999c" Type="png" Name="remote-connection.png">iVBORw0KGgoAAAANSUhEUgAAAMgAAABQCAIAAADTD63nAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkQ4MjUzNzM3RThFNzExRTA5QzRBQUIzM0NCRTc1RjU2IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkQ4MjUzNzM4RThFNzExRTA5QzRBQUIzM0NCRTc1RjU2Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RDgyNTM3MzVFOEU3MTFFMDlDNEFBQjMzQ0JFNzVGNTYiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RDgyNTM3MzZFOEU3MTFFMDlDNEFBQjMzQ0JFNzVGNTYiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7nZ1R7AAAIzElEQVR42uydD3AU1R3H37+9zT9JQGIpQqEBoYlpqVqgtAWpYikM0hJrUVusTrV1ACe0maZUrANtBwICqUqtUHEoSkBkAlQkQmdqoVNxLFOEhALCCEQkgAZCkrv9+97r27sE8udgnL2T3Ca/b3Yyk93L5s29z3x/f/bdC5ZSIhAo2SLwFoAALBCABQKwQCAACwRggQAsEAjAAgVADBqkIHAsUHAcC94CkJI4e874yxr+3xpUH9aHFYR+eDe+a1QiN8RCCHhbe7jsXbubZxeL5kbqMM3SdSudmRp57F75bDGABfLrVWfOXrhzEgobGGFmaXokPWSmE5cgieTzc9Bjd0OOBfIjc22FNE0iGXN0TXmVlUYchqQCA+OyCkjeQT7l1hyUWLkTpo7GnBCRbZCoPYfONwFYID+ShkU5pU6I2TpzNCSpOhc9omo2oCoE+cqyEaGupimwHIo5RklqawJYPV2EE2qHNFtTCTvmnagDsED+RF3GzBC1mGdXyRM80unxYDmE2DTWX2iXXcUyMIWHL0IgeQewNOpQlGx7gVAIORbFXoshyWSBY/X4qlDQz4RXeGd7Olh+sygACxSV47jv7jX+vErWn29/4VNTJSXe8BbatR85LuRYIMSPHrNf327t/Ls4ehxLqk+ahK/v48vcMC5bj6s/QIWD5T23y/vGo2EDAaweidT/DptrXrG3VUnLlCpFF4zKdIwTSKqy0r2uac1JXLMGL6vgP56EZk/D+QMBrJ4ief6C8cJqc20Fsm0v2GH1DROXag7DIimNUInCJnlxu7t5j5zzA/qz7+KczHZgQYO0+8nevtNYvEycOt0awlTpR7DE1GbMYh16nlJe7cHNlV/sNVQxF+x8g7Nkg1W1jz45nd1RCMl7NzWqxqbIvAXhx0suUaUioDqUSzHvgaDOXC15HSuMpMCuTY0IPXzCnrXKWrRZhk0Aq9tlVO8fa3rgYWvDpo6zr5JuqYKgt4QBS5o0qlpDInY4NQ0WCfOX3zIeXSlOfAxgdaPwV7Wz6f6H+KEjbaY+6lUqArqMOcquQip5x7ZEIgHLMqzO5wjnyrS0pkYaicjqk5FHXnD/eRDA6hZUVW4NF5fKhovtwmIMLE4ZDzFHIyptJxq6ZyzKzfb/l8Z9GWmsvW951oWFrUyL2iZxHVTfaJa+AlVh8KnatCU896m43XMiiEqqNEvXcBb+0QQ56/tyxJBE/pYon4ln3IVXbPE6pbZ7OSYKjoXlORbTpPdTCBwr4FS98Wb4ifkdqPLWsEep8tYcWyz0ja/jN5+Vq0oSpKrl5rfeJF76ldhVLu+4pc1Zr0iklsmaG5V1Ka8EsIKcrR86Eil9EnEe96pKrTT9ev3pJ/CWp9GtNyW5/Bw5XOwoEyseR70yWqtA7FWI4WYWbqamCX2swHYWmpvDv5wrTStexeZ96oblF+rLF+D8LyYyxVdf6Cd/PkWOKSAPLcHVx2OvxoIr35KRMDhWUGUsXMrfPxa/EyCIPnZc2vo/Kao+c76/ksd3LpZ33nKpt0FsR5kWgBXM1Or1KntjZWejksT7XLs+eXL6ynKUc901Gk3fbF65QE77ZkuF6DrEjABYwZOoO2P8blF8/yBSGz8uffkfUEi7pmPK0PnauXLCbS3teO4AWMGTuaRcXmjoZFdeE1wrHJHxx8WIdUUXKS3EK+bJrw6NAi4ArIDJfXev/caOjkYV7YWSnN6ZS8twVmaXDa53lvhrKcrOUiUpgBWsKCjM5c+hK2wQlDF/Hhn8hS6uVQsG8fJZyj+h8x4ou3rvgLt3X8cIGJU+ZTKbMjEl+iAzJshte6CPFSRZFRvjnqeZ2Wklc/xO5dV/S/q4LV/4U3CswEh+Uu/+Y1fnMlB9Cz34AO7fz+d9r1o/yjTdz1DzPg85VnDi4NvvyMamznZDevUOzZjun9eRw694aeANvpdCAFiBkbP73x0qQeR9PoLoU6bivn1831Y8PBGF4gcuMXOq79sCWAGRbfP3qtun7dElDDikFU1N5MZySH/+YklntkTRWDGnyPdtIccKhvjJD8WpU+2JwJhTbfjNpGBook2M+74thw0gyzbh/xzBF5q8hTH3jhOPTE7kngBWQMCqPoi4uBQE1VdsuRW7/VuIJCHsKJj4ut8kccAQCgMC1r797YKgRN7+jqZOx9yWmgOGPlZAwDpQ0yYGIqLAshnL6isLBqOUnEFwrGBIfHT68pxxwhxNczU2YBDq0ys1BwxgBUPyYqNKrARVaRamXKOuThwNDeiHMAawQMmYMGVXVkizdG9/xxtzU3acUBUGxLFilSAn1GEhS2PR3bNF32wAC5SwVymwVGpladRi1I5ucpyhp+5oYcICA5ZLNTMWBFnLigSCU3a04FiBiYXEoSoCUkfDsWXISqYNjgVKzACc6CZEtoYF8xpZMTWEU3fA0CANhDRHZ24IC4yluNwRPV2fstMHoTAgYKHrqCs7bJ2NT56FUAhKSDT3Buwqu2qXreMP6lDrDnoAFsiP8PA873++tY97+NTHHlsAFsh/UTiqIM5ZIck7hwAsUAJgjf5S3I/TkB17ASyQf4n8QTI3J878/asa19UDWCC/6p0lR+TFOX8xTLbuAbBACZjW+BHxC8bVVZ/mvyYBWKArgDXxa3H32sDVx8nf9gBYIL/5+82Dxej8uJfY4ldb9zBODRk2PNIJjjDiP/kOeTtOfwEfOEFXbnNnfy9FRspWbMWGYcCUBUZNETZ6Jqo9F+dSdibf/Ywc0r/r+T9cS8f/AsAKmIyXKpueei7uJW1kYc7Gcqx15fNfadkNRcXO/sMAVtBSeNM6ev+jxuX9kmVLmIwq98HpN/66uAuHd+r3Sz/ZUAnJe/BE0vR+pbMNKgzKvYOI6MFjP9auq6h7eX1Xje2j1Ws/fG1TbCQAVvCUPWbU54qmIRd7B2893JbjxKJnzm3edu1HdXbjltplzyNVm0aHAWAFUoNKZqUNzRMqMsY7jv524ZlXK6/leOrWvXZsflnbMfxfgAEAQJzDTqqr758AAAAASUVORK5CYII=</Resource>
		<Resource ID="893cc0d1-ae4a-4751-9fc4-fa9483f794c4" Type="res" Name="d5050ad4-749b-4ed2-a23c-2488a83a0a79.png">iVBORw0KGgoAAAANSUhEUgAAABwAAAARCAYAAADOk8xKAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAT1JREFUeNrclb9Kw1AUhxsVXKylg+grFIOLU6s4+BRO2cQhDglkDBlKhmyZshQkkNlXcBC00VEQgq+gINrWJX+s34UUgotXuHTogY9f7jk35+Tk5BJtPp+3lmlrrSXb6hfckNmUJMkZEsKpYRjZr9g+cgOXxK6VdFhV1RXsQRrHcW/h51oXPtiFWFmHRVEMkDvoQDoajQ7RdRhDGyZwJJNLkz0WURQdIPewBe/iXujCFAamaT4rLSgsDEPxOm9hp3a9wolt2y9KP5qF5XleIc0n/BYj/k8O6Q5939cbM/uoX6mY6Sf0XdfNlJ1Dz/N0uhtDGyYk76J9mEEHUvb0lBUk4UNdbDocDkVXLTRjfQxfddFHJQUdx9ksy/IC3oIg2G7GWD/hH4gYnEvNRszwLyzL0mT2yaCt/O/pR4ABAJRW+AL2MDepAAAAAElFTkSuQmCC</Resource>
		<Resource ID="65d58d5b-f87c-4d5d-acab-332e39a6a0ca" Type="png" Name="start-button.png">iVBORw0KGgoAAAANSUhEUgAAAJcAAAAjCAIAAAAWpg9NAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAALEwAACxMBAJqcGAAABCVpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjE1MTwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzU8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8ZGM6c3ViamVjdD4KICAgICAgICAgICAgPHJkZjpCYWcvPgogICAgICAgICA8L2RjOnN1YmplY3Q+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE1OjA1OjA0IDIyOjA1OjgzPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5QaXhlbG1hdG9yIDMuMy4yPC94bXA6Q3JlYXRvclRvb2w+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpoJSGyAAALaElEQVRoBe1aaWxU1xV+9y0zY3tmvEEIeAFTQgI2LYEgNlEaIJA0UlnCVrUJCasUVW1ZpAoVsVSqWrHkD1nY1KZpCgZEC23ZmkqBEmzxI4migKBAarBZCsSObbzNvHnv9ntzhuubmXljG4wCdK5G43PPfs93z33LmA0cOFBJj4e8AupDnn86facCaRQfhX2QRvH/GMUBYeMPV/J/fSOnh6U9CmV4yNegdzX/bEtdWhucXZ+lKZai+Cbbj73Zo2mn8V9TsbvqKq3fXRXQ8vPzO+kLTffyV4G3r+UPbzVUhXFVsz0+FsgZnlk8ydv3Om+p5s1JXbHoSCpKM7ulAp1FcVyL762rvabdzvRyxEUXKoAwkhmw/EHb5wtqGVPU3mVq7r95Q70SjssMIHLumIkBjqBBxE1lkRt9FyZurh4BPuvwebGYsxVN3gn1Ab3Ny2JYWFwzzEC2mZ0TyfJz3XBwsAAttxVeblXtsC40KRGqDiSJEMZxRB1J2ev1Cs6jRIRCofu0nFS96FeUxZa9MmL3A0C2olqKagNGpjDN8mbYE59RvjfUrKljNo+i64ggG6LmTdf63ubmOd5ASXe1bzTt0bxjspyNfl+G65PGZEvZG1LmRpjBmG3Yps80M0xbtwAhf2EM273K+5dfZvz2x8Hyn3tnjXKaUBpBxVipf/t947tPsWyJ3WVy+/btnyeMNWvWBINB8lVYWHjy5MkElc+XLl0qdEgT0/nz5wvlw4cPYxqXEHRIIc6W1DZt2oRAiVZxTjBFdGhOnjyZRKDBSVTrRo7rPepzth7EOwF0GU5EVbE8SoRzz6SxylODlIH91HFlTuOh+/w+rbTY97M8+2pd+MDHSqR9uw1keRO1gnORBrfz020ZpI9Sjho1KlFn5syZBQUFixYtgmjw4MFJK45aQ2f58uVkDrUdO3bImoAflcX3unXrRAiYkA7iHj16VPBBjB49WqDS4XLeiA4yRwgQNTU1ZJV4fZGj3DXtiiJT/Yx54NcBS1e8Uyf4Zk/VxgwDh5+tsf7+sQ3AcMD6fcaIb6klvcD3/GhMeE9FeNeJ9mx4O6jtzI4oWjCtP6kuagpgzpw5g7onVQBzypQpa9eubWxsBDCoqgyhMJk1axbQqqysJI6ICOdHjhwRaiBECyJohyjKhnCFqUBR2HYvnK4nKtPzVaNANfqoeoFn+LPeF1/UhjoJOaNn0Mrikaov7Mv/UfMM1juH2Cw3Ux2Ypw7JtiM36MPt2ySKKcgT5wLbPmQaS8UQCAEJ1AJjwYIFwgBT6Ii6A4yoymAAJnSAHHQAlVCDNM4P2s4JFh2khorLTEjQhdg3wA+eCY+Ygcsf5IlBQuETU/n+AFOR570Trr2oajmq2jMagHlfekErLAi9f9x6LCvc+BVucrKeKfNNHw9ppPKT0M4DLD+XNzbZV657nh/vfW1S+NQxyoyrzfKb2rjEaQr8QMgiWqEovdjIp0+fJrf4phoVFRURR+iIngP21dXVkC5cuJB00HO40IKuqKgAJKWlpaDxLQqKiLDas2cPjuJAIACaDJctWwZ9mEOZfII/OzrICanh0Ma1EzT2DZTJLfIRmYhApI9vWruY3jXh2osKw/ODj6kZKstiEaYOKvAtntJ89dr148es/Cyt6HEKqT1ZoqiR1jff4mZz5srX9adLeaiZW3Wxj92SmBm1nWg+GT/BhJWMEDlB3YQ36gyBNKA6Gx0CMwIMVRa4Ah5hLhASHBCIiN1AB+yYMWNIhKDgAx7EglQwcUHFdOTIkYOiA1boV0gRjvyQJhIQVsSRv+W1g49mzcrKkhUwlTtYFsm0ay9Gn/0iTFGdOxzLJButMLff938a+rL22u//FCwq0BsaWHWN57kJmctfVwwj5hfKPP7BXw5JdNwCZAXaswKh56NDVkAzUV8KpGUpaABGKOL8FCKYiG4Q0DY0tN98ISI2B9SAMQxxHws1bAuEw0CDQgoPCAoIEWL16tXCOWyp/yhtICdWQVZCMwUxYMAARLx48SKyglp2djY4SObChQsprCBy78Vov+P5D0qhf37aevwzOxS2NW6F2nJHDCv6yeKmy9XhcDhz1S/0kSOUcFjBQ55pho/9K/Tn/c7TZeyTBKwkrDs5kgjrx3BDCAVC+aAgI3THQewvzr2oDy7QgkAwZedUblJGREIamKEXwaRG3LhxI2jqKhC4b4K3bdu2kRW+cfzClvwTiiIW+CIEJSefN7F07/y5efMmSCAH/AhCTIl5RyX539QoMuf6o1jqs4NsnV9/b29txSkVb2qiw9O/v14a2+nM6zU/qmz93Xs4FLzTpipMj31S7pLkGUWveah+UhRR0BkzZlCNZAW8gcJAZcnnihUr4MHJXRqoL9Ud2Ah0CTbw6QpHrQkmpjgh8Tyze/duTAkbkiIuCIETbCkTQkumZZ8ima/lJKUHEm7RiCCeiA4Qoi+/rhg/c0URXagy1VasVuu2qUWyxg7t/epsPdtf8+7OLz/8yDZNruu2rnPLajtR0bb/oBoIZLz2smf8uOjRig0nPvEhO5xjwVQ10pw+fTqtCt9bt26tr6+HgqwjNjvOQOGcMEOtBWfOnDmwQmUXL15MTBgeOnQo6iwWkbABEwrYCmgIRBSxxO7BKUdWibaICzAoSVoFnvpJTWQCwq0jYVtVVYVrIcalS5cwla3caNfrouNG0SO8rcVq8HucVzOqYfgHPZlZ0i9889aVd3e2XLvhzQk2f/JZcEB/beJ4vUcPxRN9vuzoLSgW4LYfSSSqRkmjCkmzF/1ExYWOjBkqCEO8i0EhAAakAE/gRw4JIaKph8gVvtF/ZWVlGzZsIJ+yFA6xFZAkGeJbloKmXRXHJ2UUVTYUHmSirq4ORzQ4tbW1Mj8F7dqLsInwcIt9uzFSe+1vB5vOnY96YarH6DFxfOErc3HYmi2tvV75oX/ieMuXQclZ586H9uxLEa+TouLiYtJERdxMhA4qTjryziUpOOKYjfMDhMrLywUTewLKIty8efNWrVoFmEmBcCIpdga2xebNm4UtLqIQUXTEFfnQPhM+oS8gbN8CwotEXI4OidEB6dqLNrdDvLnFamzhTbdPHL819VTvl6Z6e/bIGfE0XKpeb97IYUZ+npbhcyL4/aELF80PPgzt26+EQim6DbopFkAiLFX0GR1HToiEQZUFG+UT1UHJiA8PxNyyZQv6ae7cuWPHjiUfAA9nJsCQXco9BD6OxF27dgkFkoIJDvhwvmTJErqGgQPYwEQ4oAtNamjwqY+htn79erEhhM9uJFx/mVqvfWeIzeoiN5qs+hBv0xh+GQbkvM+c6cVLXs0s6Xvz0AdAMXfk8OYvqq6+8Xbk4NGgYnkVDiWcv4THHzW+RXdO4y4N04w92HTJ6sFXNsTDWHfn6opimRKYbwcCkUacq3hhqjINz44UXcvM6DN3hvfxXnow0Hj67PV9f1Vb2zIUO0exg9z2OU+aDNCdVvlvdPuS23XcfSV4gHEXPsQST/S+gRaQ+rjq6iJdUYQjgDbWYtMiRoai0g8Yid5jZ6DzwpwHFTuX237FvsXYO7r9DzXF2ZnoqZ3TLSvU6D8S2r12ikpq1aV8nJtC6foHGmVMPI665LPD1FP9SgwQqlXlpG5lKKyIoxeTDDDxwS8X6D88nOBlz07d/pVhn0+qncTBI8VKhBDLu8u93JXCpOpF2U8hV2dHjCfwS2OyARSR66eqdUAza+/8W0cyxTTvvlQgVS/KARsZr9Ss64yXcBWtKYtAX2L2diN8TIu0xkviFNPT+1KBzqJIwYHiCc35Ob+Ex/43Buju1c1y3WxIt+B9AahTTjt7osY5y+PsB5ZRx/hRzbxf/9gVFzI9da/AXaLo7jAt+QYqkPxu5RtIJB3yHiqQRvEeivfAmKZRfGCguIdE/geeTmNwmz5ptgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="5a60e33a-0270-45b3-b6d6-0b8127a42152" Type="res" Name="e597afd1-31c9-4ac2-9b37-7bcaa7e87046.png">iVBORw0KGgoAAAANSUhEUgAAAAIAAAAqCAIAAAAWKx0oAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAABlJREFUeNpi+P///82bN5kYwGCUwk4BBBgAeBUF2wiiDxAAAAAASUVORK5CYII=</Resource>
		<Resource ID="2b1b03fb-a2ac-4d2a-b78f-1663e341b510" Type="png" Name="e574b9ce-9582-4962-ad7b-b11820dacc3d.png">iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NzhCM0RCQTRBRTM0MTFFMUE0QkVDQkE1ODAwRDc5MUMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NzhCM0RCQTVBRTM0MTFFMUE0QkVDQkE1ODAwRDc5MUMiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3OEIzREJBMkFFMzQxMUUxQTRCRUNCQTU4MDBENzkxQyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3OEIzREJBM0FFMzQxMUUxQTRCRUNCQTU4MDBENzkxQyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PvS8FRgAAAXpSURBVHja7JrJSmRZEIYjTed5niccNoUjCrpwJfgALtTGfe+L7pfoTYHQ0OAT2IJuFGwXjYgLQUFQceEEKrZWifOs5dTnO2XILUk1U71VZlEHDnkz7xT/iT/+iDjqETM6Ojqi29raPkRERPwSEhKSKEEwbm5u9s7Ozv7u7u7+/f379yce81vo8vLyX4mJib9KEI69vb0/CwsLfwNI3Pb29qrX600IRiBXV1f7KSkpeSHmOCpYQTBubY8CiFeCf3gB4vkBgHhC5AcZP4G8tRH63BsHBwfl9PRUmpubfZ4fHh6WnZ0dMQmW5IVMSlNTkyQkJLwdjwwNDcna2po1dHx83Oc1u7u7cn5+LhcXF3J5eSmHh4f22FWPsGKBgPj06ZOUlJTI58+fpby83Of9ycnJEh4eLmFhYfa7SbpofkDvcs0jCiI/P1+SkpIkJiZG+vv75eTk5O6a/f19mZmZsV6Iioq6m9HR0TI9PS1zc3P23Kvrr5nZhgZrgYCA56wu1Pn48aNsbm5KbW2tpRkUSktLk9zcXDH1m72OAViu3djYkIODAyktLZWGhga7IC8d5hk5fgHxBUIpCRiAmOJNIiMjJS4uzq4+XggNDRWP50u+vb6+tteailWOj49tfG1tbcm7d++ksbHRfSAPgXCU05YqBDLniAmU6olCzwLCMzwbkC0tLXYhXAMyOjpqDU1NTbVG6wo/NjAsNjbWGgYw7kMYjo6O7KcCBRC/AQZQ7e3td+Lw6kBMsyUrKytSXFws8/PzlhL3vaKeYWZmZlrvcQwgVSkWgPvIPTwPwwHENXhnfX3dnjMNnnsxwipBHUAtLi7aeHCCwRiktqyszH5n1R+USWM815JneJZKMmKwuroq2dnZUl9fHzAQv+RXExnBet9QQBDUVVVVNkmiWk/RDg8gCgQ6tMVbiENWVpYsLCx8JeeuZfaJiQlrjNIJnpMUp6amxPTP0tnZaT321AAAni4oKLALhafIS1CTd7gKZGlpydKCqcaQL/hEcjHK9M/S09PjFxgWxLSpFpB6FmUk+F0FAnWgBC9U2c3IyLDHBHhNTY2lR05OjvT29vrtmby8vDu6ai4i+F0DQiLjRXAaSsXHx9+VG3zHGwBCqglaf8FQAQCEBSH48S7J0rWiUdVJAx5aOO9FDKCaeowBGMp3vQ8acZ5FcHoFReQeVTUCPpACM6B+hJeo7BKgGHR/ABC6Oe+hOsCbmmu4F/q1trZ+dR2AAMFzH5PwFwNx1k5QSdXLl1wrmOXlZbv6/KZAMPJ+BawyrKB8LdKresRZojym9woG/jsBYzDfUSdno0VWJzZ0KBVdCXaSlhoFxShXnkqkrCz810kN5hQJHSRSrcG0VnPNI0oRXkjQIsf+CIQ/ss7CKJ0AiZC45hEaJqUDrmeFZ2dnX9wYURVAK2irxaarQCgfCHLVezw0OTkZsMI4B60v9ysQnp+enm4/XQOCy0l4qjDURmwy9PX1PWtTgVJkbGzMelqDm4KyqKjI/aKRckKTKJzWWqmrq8vmCn8HJfzAwIBNoJQkxB1eIL881WE+uPlg1GctkJvgMLymXOEYGWZ1CdqKigqpq6vz2XwxULqRkRHbj2g5gzd4DgAqKysDpqphRc6zgPBCWlRWVStXXo6RAKJOIodgJNznPPLKLgrXQSXOE2PaCjOrq6ufFW/PBqJZHirR/mptBTVIbIBkcqzxxKoDivxAbOFNbXUBQ3ep2f+bAtGkyAAMQepMaLqzwrH26wDm07n5gNcIbkA/dxcSIAFvmd5XMYyiQ2Rvix5Cd0mcDZivGINWNGLq2e+2G+80CkMwDO7jGWKE3wDl9AgJlOvIE7php/sA3x2I0zvqIQJZKaTZWjM2dHoND7gGxOmhl2T6b/r3kbc4fgJ5i0BujN4fBiuAW9tvAHJlSo1/gxWI6Yf+AQNATltbW/8wReCA0fSTYAGArdjc3t7+AQyeWwlONjPXTNqyiGDBYia7eP+Zuetx5JOo2+mVt///KdRUtJCnt/PyfwEGAF9I69c7IyQzAAAAAElFTkSuQmCC</Resource>
		<Resource ID="98c8dfbf-efd5-434a-846b-f8d571c63b1e" Type="res" Name="header-bg.gif">R0lGODlhAQAeAJEAAO3t7evr6/Ly8gAAACH5BAAAAAAALAAAAAABAB4AAAIHlI8Jwe1eAAA7</Resource>
		<Resource ID="97300803-bb07-459c-85a9-de973dda8110" Type="res" Name="abfbe7cf-76ac-46ba-9ba8-6c89933d7cae.png">iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzFFRjk4ODVBQkQwMTFFMUFEOTZGNkQ0NTAzRjAwQjciIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzFFRjk4ODZBQkQwMTFFMUFEOTZGNkQ0NTAzRjAwQjciPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMUVGOTg4M0FCRDAxMUUxQUQ5NkY2RDQ1MDNGMDBCNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMUVGOTg4NEFCRDAxMUUxQUQ5NkY2RDQ1MDNGMDBCNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PsQauKYAAAZsSURBVHja7JpbTxRZEMdrhkEYFLnjhdsQQiAkIGLQB+UB/Q66Cc/7TnY/xD5tYrLJfgOS9cUEeACyiy8maIxGSCSI8cYteGe4i4Js/2qnSEOGmWmcJg7Zk5zMON3ndP2r/vWvOo0BccbNmzfzbty48XtOTs5PwWCwUDJgbG9vRz9//vzXrVu3fu3u7l4LOL+FXr9+/WdhYeHPkoEjGo3+EYlEfgFI/sePH2eysrIKMhHI1tbWYklJSVXQ+R7OVBCMmO1hgGRJ5o8sgASOAJBAUI7IODJAQj6qiXz58kW+ffv2n8eCQQmHw5kF5MOHDzIwMCDv379HVfS3zc1NaWxslKtXr/oCyBcgQ0NDcvz4cTl79uwOkK9fvyrAkZERuXbtmj9AnHKf1k0BkJ+fL3l5eUopBhTj38x0P+9AyY5B0CTRuHjxokbCQKg+BgJy4sQJOX/+fMK1RO5QqAU9bt++Lbm5uVJXVyfV1dVy+vRpOXbsmBrLwGBAANrAAH5vbnB9bW1N5ubmZGpqSl6+fCkFBQVy/fr1HUr6BmRhYUFKS0vF6ZRldnZWJiYmxOlCJTs7W2mDAaFQSOlVVlbm7lbFaU7l4cOHCoq5urqqv7MOKlZUVMjy8rL+fvLkSf+A8FCnwVQj8TryyoQOfGKc27A9PZEUFRVphDY2NvQT8EyiyeQ7EcdBTU1N/gFZX1+XT58+SWVlpUaEaQCZ1A6rGUyjmgFByQAJpbhm97jv4575+Xl/geB1jMd7uxqdmDHu5I6rLLHrifjP/tQfHOMGmFbVwuM8KJnB3zNwEkICxXyTX3IAb3rxlOc21tkbZ62srPgHxF3I+G7ROUiBM+qQ4KicJb5Rz2vUPeUISsUkIZ0zvqrQ0tKSvHjxYseIVEEwq6qqxDmm7iqG09PTKgbUJt+AoO0XLlxQD1otMJl1F7/9OgK4X1xcrMkMcJwyNjamkk50WlpaJBKJ6ERYvETaExCMYXN3i8J3jEAI9gPCOmhYX1+v91JQ2YdCevfuXb1GNFjf3t5+OE1jvHsxwvgeDwRKRAtPAg8PD0tNTY1S89GjR1rNiRKgXr16pXtxjY4B6nZ2dh5eG09UoFs80ACpra1VEH19fVpUkVauEZny8nLtwaxTphjSc+EU8uXevXty6dKlpMnvGQh9EA92bxyNRnf1VW4gGE5LQg+FGkEvUzrrDogm14gEextNeRaRSkTbAwGhPenv79ekxXAUBxC6USj+VgCYmZmRhoYGOXPmjHa37jMKQNjPmkgU0V1TTp06pdRMRn/PvRYes8r75s0bVTIM3Nt28GAMbmtrU+PgvvusgeGWH9AIr9PS0yFbL8YnCkeTmtYc4YHoOxSwTpdIuM8ibkPJAQzlvPHgwQONhrU6XGNyH/RhPQ6iISVH2JfJOeXt27fS0dGR8KzvqXza5jyQGkANYfN4TSB5YVG8c+eOrrMzBpFhLZ9GGeue2dcKJg6CWtAXEUhbi+KlemOUUYmoQD8cYNHaj/Osg1J84iDAw4L9cvBAQPBQqr0VxlgNoVLjBFuLFJPYiU6h9gzWQElqStqAoDB41166JTt7cNLDoHPnzunZ3roAPP3kyZO460ZHR3eqvKlaa2vrTn6l7S0KG9IH7VUojMP7PNi+49menh6ZnJxUB5ggoGJEpbe3V4XAZJpcevbsmdKJPQBkdEzmPM8F0XQeqgCKSYLuVa3Hjx9rogKSezGKOgQgjCNnkO/BwUEVBO5BxVAt24813JNKJ+wZCA+xlgGqkJTIpztv0P53795pwcRgAAHCZJa17GNtPAYTARTQrYLcSy5Z/Up7r4VBicb9+/fVQDPk6dOn0tzcrLkCQGtNoJdRx31Y4zfW8Z11RCulyp7uV5jUCChob+DHx8c1clR5rmEoRi4uLuqhDGklBzCYl37kF1XeTospiYsf5+4rV67sFDYA0YqgUiS2UQS60PECys4zpohcA0CqIJSGvHN2TmhzaX2h7ETCXhlZtDEo3ntd91sZrid7rxxvODSu8OXPChhtiZ1s0MrYfd9Dcd/+YuXFsHTk6P9/DP0RgWw7SbacqQBitm8DZOv58+f/ZCoQp9gOgIFeIOj0O5OXL1+ucFrlCqc4ZWcCAEft1pxC+3dXV9dvTsM5H4gpV7EzK5FkpD1DgsERlFf2sxxhAi4ZDsdmlvz4/z8FveavSuuxufmvAAMA72F0VEE1sbcAAAAASUVORK5CYII=</Resource>
		<Resource ID="da39157c-f46a-48bf-94e6-c1cb49fe7c5a" Type="png" Name="procont.png">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA9tJREFUeNrsVU1oXFUU/u59f/OTSdOpmUmiZoyS+FNBjFAFG0SkCuLPQmtaqWizEyuIexFcldKNSim4kC7cqAv/0IWCWJTWgm1M2hBLm0Yzps1MMpmZzMzrzLz743lvJjFjX911IXjhDu+++875zvm+c85wrTVu5Oa4weu/D2BuPozuexXP79qF/r6+V2YuzI9eTQ6w3D1jYEpeNzqLKZgMmHPV8umF3PuGEkUNhuqLw9cCeEI8eOrczOOFn399p1KpoXRLAwtbHwZkCIAmAC4D59p3ZHCYzXrKK1w5UDd8tyEAT409tHf+cv6lnqhAuiuJKTLyw+R6PWQ6GBZ51LAhYVNmeiMdBs+wRgS9ObyYDadosL//jens2mS+5h3TngvWq4ie9iUj59UK9NQJGI2rYKk+6O0P/J0QIRmEccRoYqJZDQc48skXKdPZMghugFN0XGmYdQlptzn56WvEV5dgJ1PQC5cg07dCpfoDCl2yeTK3snPim+OnSzX3RA/w+jUA948MHSxVauMNTyBqxzBL/BpNBU1UyeoKrGIezsAQnS0w4YFVy4APQOCaKDJWy936+zOjxSiv9ISV6XOPPXKga0vqrYpwkC83oaQKAjfrVBfFIgzDgGK0paBN/HtNoq4tOD3UlfRWVKm4WnfzoRQd/uhTd61pVv0GZ2TMkmTv+D5I1EgM9ENstIVVlJmTgG7QSdK99nAyc9sPR4eHdo9dOCtCAaK2ddSx9B6lFaJmDBepfHiEgWkq00QSqjcDWSnA1wjRBFR8ACi3S5gruML2Do7vL9c/+xiPhlH02gvPvpe5OXOMm3HU6qpFEcWvXA+6Rpxn7oMfmqLsVPp26rJYi5/1aKVkgnrg0PjL4VX04Zffzv6+7J6SlDK8BhgppQVRUfXoQUEWFiHKBZixbtIkBxZL0qaPSJMAx9eCgqKQwgEu5/NvR01rL0yOeDyCLBnotSbxXIc3/R3Ucha8a2sgNJbmoRfPw7x7DDx1R6sR1ltm03MHRW/u2z11ZyZzPhHrooqxIBvknIKTuTnIK3OUURqaylcJoogy8v2IP6bpA29jfGzssAx+nJz5/OylJYP64JmAor500ES8Ow1zeAdxHum0JgSW2BboFKBRYzLVidABcPzM5B7Hjk1EiCLbtrDsvyROeXwb+MjODhra0448EKg/bX0MxpimeeHPpVCA/U8/Mfjb/J+9S8UyGDnOCe0bBZEFQv5zKdG6M51gVkmLusPhLeAwgB3b7zp08pdzH8xezH4Vdex7cVM30HBbjq676N6gBjRQUu7Ku0GPMLZZcP3/f/K/rr8EGAARWAeC8KlbFgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="67e469c0-4cbd-4f26-85ad-1aea8aee69ab" Type="png" Name="background.png">iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAIAAACzY+a1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAFq1JREFUeNrsXdt22zgMZF3t/3/X/pPbXbdMERiYGYKk7Lgn0UOP4koUr7hj8O3ff//99u3bjx8/juP47/fVWut/tj9X/9Gu/vzlcrnd9P/yv/Rnbve3X37+/Nnbud30H/397YH+rr0FL+vV9+/fYTu3f6/X6+3GHuhv3e5vv1gPwy9+OHZ/a+f2gPWq/2kthAmx4dv/2p+3zvRu201/2B6zFnwj+Sv9v/oYfYO+Gxe7C/8RxvkZrleYh/C5ytcvcL9/wvULy5ZnICzt6yzn0Q9yP6r9kHZqA0lNb+X2gCeh/Xd/Y/9rFAD2r78yJKR6DL0d+1D/tCd0nnbd7nvnA8myqw/ceERvNjzp/+ytWbPGUMI+8N0QQ/PT1VvzHfAswM/2EWi676h9WBAW+Iyfx//+XIxSVVYOEjf/uv1in869Cn3Oz7B5oBTs9463LRtu7PLbNCxk2L7h3jNRMTmHfzl3N2yfPPv+A2zZclemyHXezrkbYWnh6maywQ6HX4xNSjjF2/zoxMqFSTjCr4IHLF+Z6sJTnmWzsFFYOyfym7wzRPs/f1/5FBq7sT53OTmTqPCKia/hdUYL3wmp/7t4RODUQ6KRGZ7/JT8pKJh/Jbef2wzbebjY7PiyFzWPf9p15BHCqYTdhaQ8L4yXXIIgA1cXilF5wbJABJdwOITAF9jWFPv4dnrsOHZRyItX/TGvz/mW86E0fRd+3ROk/l8Hm3rrFnuzwvA/9rIVDXMRNoSNrg+5LiR/I1fmqZXzkKmRkJz9PjiCZAUPB5NRwzNZuKhrC1PEqq6Yi6OWR5cFSC1WwO5BIc5f+UUmseeuQoH5CB/rT1+v13/++Sdv3sAwbKhm+4Gn02tjts2DWDicJi8v3BoxSmUfzZvAiBvstt839onbwI/jYKKEFnzYEbff+1Ex5buTXPtiNhx6KpjVQfvzWCNQ8BTq5z1ZCwyyImgEzhqa0oTuRQh73xl9OD9+/DDSfVtFtoSaT/UHnrGEWUxYVipgU0NedbqaBIlhIIyZogY+1U/h7fr+/bu3wti9p2rBJOT/63jOBgxUy5YnUzMxQZm4fbgtF/LCLDcF6TRLUvAUhhmwV8wbs34KYb+1SMKuBRtH2N1FWaP+uYcS0rBmpkLYqvj7orXvOGv3FWXFbFyAtjr/Z344/153PpzLGoPeIug8s2x0QhpIaD6F/t1zCKngYVrdgeKMEPTzw/C+bt47d/20ThLGaCtk5rRg1NRkw148gZAyvbAolEIJJeu8mXcyy1zx66/AOIPVtIudwbU33C6X31c0sFnIgv0ZNvuazAINsFCc0eZ1SHiZ/2GW1PtXLOrCh3qIjWKzb8/0qQsiqLljAw38pZj/jncRJFdshbclHNpqmei8T3weffTru03biWZHPTTZwF8WfFjvBrZAjrX/ZYfnQz6nSWKIB9CixM5CCjl21vj35CW8CNkd2u5O4SjQnjs0I5wlksBBweG3v+E62tf1MKYAnWL17VvxkNwtoXAhCU/T5jlgRBLakXdoplByoCtgk+Nm8SQrNjvhHV7SPNq9W4vJh5ssh0WRDONEAunPkbKbTJrtce+D3eeyD6XJxzBsSxhQdnSjE82SJ5om2KIu9ATqS0ESXhYvPE06oOnSvFn5MyHQz/x2Oda9a1RmKLL/NR2URTQF+hOUwv560GX7LxY+1B+2kM7moolCAFwIsfGeyKFQoyPMikZacV6ZwByCSw6vfto7pv8H32y7D/cwpqr131m2cRYNt2AWW11oz4TWS/MECVo6PJ2BCzIeLEgCXEJzdPdpP00iXebJQ6Vi2cL5aGfv7CmseLYrrDo8dnji6cMCWgrztRtzKPt9UbT16S4ykrK2GJ0qGtG2/Ws0QxDSwAVmlxByB/Pat3uPkhB82Cm8Yx8Pon5nSSjnmvReNthuKI03FCzfr0Ve2O4dKCHwaVkKnwpHHl59FIFb+4CGTV44qxcaV24uD4Z5+bMq6ZfAVmeRF+bw7R2VMVgPoOK4c4ByMP9ZWlrdOlPsfyVYMpyiX6dwgRd69S7I8cv0k4kAU+IApEIW2WDJaU/ghXAsPmWCKS1QrdLC0dGcV8wHZwY3bI78zOEefmrsS97FbP3ObrPKrvSf8N+COrJ1qQtZPssZivLBsW5uP5/8PethznMYVii7P4dWxubyO994YasFoXh6bVq/X/WsyoQGfZJAyBmH2gVMhIPtCMNHQ4nqIUS4YgGBzGl4OoMkAr3fkGtUvDe2BEcOKwrTUVdsYXpNnfdAh+IUt9NmvIrxLOcvwpSMuqygFScxhLqZ+9K+rr/8usBUGAidMWTmMEtmNq9lQSOEVKgYPxFGx/LrWLDakJDqhJg8hKL7JQZe1PM/PDv1HMUz/EBwvPThzQpQYRjyQthOpuEhCabdJ80W9wfLU1wQZyC1hIlzs1v2TZzpFv0ubZtIHeSUYGAL/bPYrCy+2o9elAimADaMPNEei6L7IkxzD8J3CBfzXYKIHV5U9v3sn5iiE0xgya+zSFGxJ2wSbAevWGd8UuuOpwJucCaFLwcoeE9FMCS9uKcizwycja2civ1gCGHAPCvOYw0p5RU8FToS7p0XrnkqAhJPJ8KzngrIeKBVbO3yKUJezfiLPBVwQxidf1N29zfgQ+ODz3WD/HXAZCGFIafU/FLt1zwVXqLpp3DBWcEQBitPFj0V4SR5VKzX91Sw7waCd5zIGBbM0LNBiI/u0kt5KorZASu8MIQ/bQYDsvSG/VRe6KkIXslX9lSIJfShCAcDnfG/Z8kiE5lAWgPF6NpnP/5dDYVwCcyi6B82XbAj0rYU1BXM8RC5J6c8tvv8dwYls3BMGXrs0BTMrKnBTPGV2XR+ZlNRnzszmvsrs0mQsp0pXvC6LFwH626O4J7FdKq7h+pBiKfMRYAsgm1u5naz+OaHRHN/OWseYZ2BwiAMMDgzv1C4VASiwaONXo8AO9comCdy3OdcX5lNmHNXMpuG2FNCJtg5DzG/8CuzaTmzaXZ/PGgJL1ZbxE9Q171mtzlDB2eGvibh3AQAcHgLQqrXZyckQwVdtnH0qv5A19LMhN3x8QKes3/m9m9/q/3BXmyFqG2hVh2bR6o4WQGZM4CW6FiENgKAqvP/V7BZB+igom35ZAw2ITQPhRe4JMwAdCKAVzsJjl1okJBJ+13LMNg69EzFphqcEFunUKA2DSVAgUdaweZeAPB6pl4hkBDZGnu6Guyf2g7+PDxSWHpjQXxnWNizkLIfRVQZBpsdKX+2soXdBmKCywm8cFkCbE+BlH0+e2sjJETogg+FfYZVhk4gpLN4pO2DIGUfDQU0i4QIAQ08IX0esPMCpGwjcFIVRROKMxUDI1vCjzq7OZaun786vLqtXERCDPVquow09C20hJBfcTL0nkGs6qFJut1XGGupNlqeMtFDSNt7wUyP9lHhtdBKl+PE+9qYrtmV7x6qmkmOj5XKVCcW/MmJ8/BgMdIH01AXkjy0p6IuJEMrc3YXCHNd1gdmeeGzK6dBguOhYRpB0gsk/tXswsOYhjA6nwHZCljQHoIBBrw8qXIaK5NYERlYJsOQ7UF1vqjaw3aGASlF4EmorYt3LYzW62o5i+PhldOgA7ZSwSXLx7rsZBbMKhOa22T5vaJ+YcU6o7NY6o6OD3A2aZliH9iawYcvKBWMJG4qBmslKEUV0WdXTmu8BCWLkGcRYMIX0UjW1kLJmdCOLn4nqr2x2lo7wavM9Vg5D+uV04qlFJkxGtIiZkuruJmKS1gsZQm5bCtHKIlVhFVETWF/WuW0i5c/e5+yFS58PhAQCGiY66TBaZ26BJ0Pscsh0tf31sMrZKrTB27zEMC/8osWcJsNnqy8jw4VCDgZ5o/0Rpyw6hd2htqnvEQxtx0o5n0DnvjuZZYEf4b1+8B5WKjQeoG77y+K3zrd7fCB1Kjo+wxkmZ7CT3uJit0PVf50OrjyPU2BQHyqK2uuOoNn//RrK/yAkDKbyOdcs9ehBJXrAm2Jn/ZEVlDVn0zJtbR1Z2DLVp/KboUF7ATke0P+sDZCyIeeBKbt5uBVHbfI0AkzfRuW9czsMxuzhjYamIkhttfBxNF6pWNdUBCuDayB0xCYOqtiKGhOMJdMaXUQkmDtRAqAs2IdEx+36A2z3r/bDDpoU3dhm5EZsfYrIsCsY2ZLY1FVm5xpH1L8FCfrsfB57VIIXjHhcGgEKKklDKzsgxXURkc9zY7ulPPHejv0Apk/snH/5QHD9zU/z07XlnKUgm0TArNmT1OdAbfkQc1f1EyFfWUn82/I2xaCWvNbgBfmeJmp0ouvLL5OnUKYv7lASJk0l9MnhrzWI+EbXwztHJDVF5EemBzEQCOgk0gY74WsAfuQo4yEoFQf0VkUdROah/JCAb1XEUfZyjUeh/+4JWwkjW0qW78+ITsJ1nX9LcC/BGXs1xJ6ZcvieXpko2HL5x19vV57Pk6/8cfcR7JayZ3Mvf13K9BBPofPs/cA1+89aj6HrweI3m4gI+//doecR38PDAUeiEq0GNMiPAJa1oJCBFQIzrCbu/Anw86xOivCZBewgop5oJUjBY8Fs0/mY+eHqjXX0KBVvtGRyrnegzZDZ42WeYBh/1lIqgU6H7kfcAlZdAxcP0aamMFCVLlpKPxQFH+AEwR5W+6Gz0fROBHBtw5jiBrJxBNWHoZYkSOVPE0+htoVCwRtKCKBZXEKYxvD4xZI7SJjZqjbCKTzoFlltScrr3ngRQVx0yBwt4QQzj3YdcIM+uwNb8DM+VcssqZx0FihvDcUvwoXJsRZhzGHBAS/3j4TJasWYg+1+xjf2bX0TBcO3E+X1zTeXL5s/EP+vKDbioURNwJuZ60nontMu9frVzdbN1T8QJiW8gxYQNR7wR9o2PW4sUFQvPy5mktXDFsj3MPTUxFnYA4p5KlCb8m9hYF+fYNnMY2ZZ2FtJhjsymz3wbSbM2wq2yKKM6GKgAh2zuiV/k8h1w0lBSHOiBYMuj8LqBqf0u57ha1cmmsY6p7XTHujGAhJdtrAP207vkMHaVcn1NV8sbUwxbCcQEAzZgYncRB972H7vtlwAox5d01Xg+8GG7SOioDCsEZVDWJXc6jaofEQk+9T9f2ZORi6VhEgDfoQoNFZnLM1ZgbFGdGNYWTCrFuDWZ/rvlwojg3lJupsYjh92WSXE++YKsK8EEJ4m1pFkQsBHVts/Zhvqy7cF82wbBWZWlXBo7nshG8IzfRx0dDFTwy7+tC+7T9Q78mhyyCInCAmIDC8tCKG7HB4wlLF7O9QstWRBrPY3DDag1lKg/TAxJ8iqtxlNsaizRSlfPIprHTmxNDeinHxETMQT+EQLFRYI1k2tmhzP2CkYoSDBjYmqTHxoc4OdSPMEpSZNysLr3nhwZizDphgfHhKsj0rMmyoGGhxBq76mjjTamVTRPQJBOrQsIEHXH+PE+ZLkEDvUjGDJAtsszWCwlzXqVbWkX1Gp9kEAosK82B24KEKzyTJkJfJqoLlQA3mUFuHV/fgU3YvyjbBODZfK6R4BWS5YTSmdziHsu0LQx5CZjIbUwWmoWI3YD15BoweSzmfPYWsnWdeQ6i55Ram8EF3l9AXxjFrqlgPJsQvLABDAGCn1oik4Z+dGJ19ikRWcXRAMxCADnrclSN2TjGw7WyF/ZOnxRC4QsNa2hVrjpJIH8cL2YItBMZPrdaJvFAs3lSkISuqNkQXFqzxGbyQuejWchv22znrOO7XexABNfUa9c/ghSElYJOKDhFkHsQLZ1X+NlmCsijOAIkUhu9VVFpTsHxd0qD+C/1SV3dkg/Txk1mfgzvawhRaIVeE/ckKqmuCr6GSgiE6o0yGWfIOUa9HHj6ONmwxZiBlBmsm8TO/6Bov1MEZsDOwWq/IUAmOp4prGmbNDSGesq9KB6PAwMGjcrTzGohVzL0X7ezbuysZo7po8NSWWqizqOXYihdBR4gfLUHbQr+MHmEF9qzSzqxoWgSEK7ZT2Q3MRuopYQiYGELEMnEmyxCwM0cjsMOfEzpIRNdN0QMR9j+VEN9kbNg7pGxFCByGIWuBW4O9TlHOIE/tCP0V8GvRvgfxXfAFDm2hgQczOnFoNVPEmdetRFPTNKtXsWVjejG0Vwn8JNG+qCwn5kRwTT0iRsAPkZwuSD/sR9FfKoCdK4em8dAxDZbSePiWtpIwmsZwV6BHJXcAngS/itmT86bLH3eZMIeINfZBsUExstRDj2AsJJqw5MsgdQEweRiPEz5363YAMvcGCm9+E2JBmJ8AIiqS6OpIDawoTmAlbzHBjECfWL/3LAyzR2ChDfMghXAxC2qjp1ovv2jkaCj5Yag2VOJfBE9d3hlCi1jo0qz+p1MnmZ0LqmoNYZQPKxfmt9owjnTKTqgZ++Mi2NbywWYHvha3t7Y5hNYB0q3XzLjL9t+nuRROf/FlsVmOofDWOILaUIXQlQM2nU3Q6ToEumcVZ5nPVosVbQn3YmhCG5Y49o9dYPKDgA7Uyc1FInbWKdEfGka0ZsVxmIwBbdaN57hDXH2REC8OBizGM30KN6MlcrmeU9rZ3A26FJSoFLdJV1hmNnTri0aOri1BSmWhjxZUYTd5GUR0CRNkelLgTYH1+X8WXZl/HwpE9cgw83H2EeUSE20UamZq8fV6tRYsyVSXlPRCig9pCNqFjzX17QTF+mg8oIMBPLRRebgpM03jSWWziHaVzghDl56HuvbCXIMtZcHB+HyNlp5/PIQlMHyvvmZ6Tof0ZJY6CfwlYeANaIEaRKUikjCCDxmqZpxTJuVDW/2HWZ+vcwqFaXe4dURtYd3sFJQ5C9qv1KUUG/EyFNIerZMNs4qWG1x4q1KRUvQfsjSorcOkFAjmyLr3HlOjrQM71pOPuna6rR33FepSiW0YZiPr8O2wkACPtO61F4hiFWukdpHn3ytJX6Iu2azpjvGIuiVWA41pSOo564weFSTWw8WuMGQG7tjmo2Aq5kex4c71SGtDh8Z3aPNQxIcO8glRmhCauJHKqSINgDntLKTYQ9iEuFOt/AlxLKikXo6DdRaH2qeFs/Z2ujPSPtrxWm0aTeVt987XjC1r7dvkh1MR1vsQ5Nu7fP0Abko3rM/OkEyEk71PX8aB97PjK3Vqz1c2o8AsXJvrMK4QT7vvixAFgetEBeIp+E8cC130VoxKyNcQuWAIViFgIdjAWBbugjvpRJFqwScsYGffeaEmu8xNMeRVGcQDOj+LSzgkdJp9algAXT/7LDY5lc1bbPCNkDICkkVHgTUgYt10X4uEVNsqG3epCw5aMWh9rJqUHQM4v3Bh92VM42UCVT+FxU2tH5iKSd+USLNoOhvm2ggyjH9gghdqZE6RaKIN/x5CMYidlpLPMt/qiiwr9jSrdy7rFae47WB/FCENE+eF3UymoPolYOI8IQ1I0RVCyr6S7VKZ1Otx7Z9OYRWbMhFkFFZYXunQHWX+qiYrFvgPC2SSkLPpy9rY7wEghjXlS2pAxhyIhBjX8vljaTFaVpqyf/nyBtfrtd8f0Bqk0ZIhCfJ6VXACmEu5kVzD4GsNE2pJxexk3AYDvZs5o1OPa1ijMnzCu8r9FhmKh+deR+PZ6zqrkdk+sq0oD8lnrnqy7P8MhNQaESVbclE5DdWqoc219N+71C9j2B8S5aYIKSywE6xEQxt3k37X29WLC9mGMMLrl7DNgO+FqHUWl8bGNRRf/WmzJWypCMTzlrAS+M3APIUilcNDMifPKAYB1zuk6md6269u8Csm6g3zk4XdjtmV2j0g+JNP4f8CDAA2i2Ds37qikQAAAABJRU5ErkJggg==</Resource>
		<Resource ID="15c9fffc-4c20-4bb2-aaa7-3be814bfca49" Type="png" Name="acl-small-button.png">iVBORw0KGgoAAAANSUhEUgAAAAEAAAAOCAIAAABhIeELAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkVFQzQ4N0U2RkJBOTExRTA5NTlCRjU4NDc4MEI1OEYzIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkVFQzQ4N0U3RkJBOTExRTA5NTlCRjU4NDc4MEI1OEYzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RUVDNDg3RTRGQkE5MTFFMDk1OUJGNTg0NzgwQjU4RjMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RUVDNDg3RTVGQkE5MTFFMDk1OUJGNTg0NzgwQjU4RjMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6euM84AAAAIElEQVR42mL4+/cv079//8AYxIbhP3/+oNAwDFULEGAAjiApoxupNcMAAAAASUVORK5CYII=</Resource>
		<Resource ID="55aed72c-64ed-4e3c-a084-0d1550f650cc" Type="png" Name="users-management.png">iVBORw0KGgoAAAANSUhEUgAAAMgAAABQCAIAAADTD63nAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkIzM0RGMzAxRDIxNjExRTA4MzI3OTAzQzhGMjIyODU0IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkIzM0RGMzAyRDIxNjExRTA4MzI3OTAzQzhGMjIyODU0Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QjMzREYyRkZEMjE2MTFFMDgzMjc5MDNDOEYyMjI4NTQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6QjMzREYzMDBEMjE2MTFFMDgzMjc5MDNDOEYyMjI4NTQiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz60F7VHAAAJmklEQVR42uyde2xT1x3H77nXvn47Nnk4IYkTKIS2QBgMDVgXto62YkUUdTAmbaLaVqRtYtM2aa9q06r+s5eqbqN/sG6VKJ3EVGgLg6rtxsOBiE2UR2GQBEhCUuIkhjgvv+7z3DObGDtxru1rJ5Nyrd9X/sM+Pr97T+796Pf7nZ/PPUGEEAoEmmshAAsEYIEALBCABVcBBGCBACwQgAUCAVggPYClKApcBRCABQKwQAAWCARggQAsEIAFAgFYIAALBGCBQAAWaH6DhTGGqwACsEAAFgjAAoFmCl+/gy/04PZ+MjBKJmKU1URXu5hmL7NmcfxF0QjAAhUm+eNu7vX3pfOdRJTjkCRZSVODDGuWWL652bhxJYAF0iZJir3yKv/6AUoDGKavPGt98QVktQJYoFwivBD90c/Ef57UbmLcsM7+5z8hhx3AAmXDikRfeFE49G6hduwTj9v3/ZFimKmNNFxP0KSEw0eKoCou8aQvETozPJYsy3BNQWR8PLR1pzI4VGRxwe12Hj9E11SDxwJN9zpHjhdNVYLLsbEMbwdggShKUSTf2dlWKFrbKKwAWKAp7io4ErjSMcuD4JtduOc2gAWakrYP3RvgRZ5Cs8rSBIGMjqY+GuCyllRMuzEgn+9SOgfkweHeWDtd6XSsWuFav9b5qZU5PVYwHg27aWa5Is8GLmV8AsAqOaRuDop/OSmf7aCkRGHyNt8+Jt+NvwmeaEUM7W7Z0LBnt3N1s3oUi8QSRyD0kJFdKInFDyIWg1BYUpLfu8Q9v08+dW2SqhE5MElVMkhhZbT13NVd3xk8+LZ6FKOS+3cEZSoyGyRQ2tYAm4LonqqjF4SXDqcTJoXrF26puDRe6PrVbxRJrn3uq5k8GNKBq99sbeIjTHFDcTpSOIHH0nkEvHZH+O3Rqb6nT+jEJGvR+/avX5n46HJGo7mulkLJ5EoSxAGLtciJ4fUO8iAaAli6xkoR935ACVKqISB+EsHjueZuGN/+/V4ipU2EwL3AoSO0iU21jPPyGF2Mz+L37sO3ugEs3Qtf6sUXe1Ifozg0JPbmtQpfvT527qM0Df7BobeOUNMzogGDSSy8+kBXVTK1tQCW/sHytaedF8F9YkcqDc+tUV9b6r2t6SFTjUcRpk0G46lYv9VWaPbNNC1FleUAlv4jYUd/OukWu3gc02g4cflqevrmdDial8/sE+XEYSNb0Hgsn/kilBv0L14iIS6ZFcnBoDRYgKsLRxQx7aLcj61T7RZQUExzQDQx5cyWzwNYuhfhRcIl4JCI+Il4ozBXJ0oKx6c+VmzeZFzgVutH4gFRywPNNKat279OGjxpRwh1LL2CpZD4jY+/6eM7ZaXgcjm5ryQErrJFP/5e90u/y8i0EnNGThw0WeoELvfRHN51yi93TZ0BgMfSq5DJSLGGYWkghEcKtmWNjH3aKnXPjmcW/fyH6pm+iEM5ObFEHPQTLZRlWkIGYOk4FIpmxS90FWErjYwOvvn3jEbPtqdNtTWq/f1mq5wl2WIkg02qJDtaMoMj3CGdSnz5WE/HaYUqZk8XhRdi3ZkVL8Zuq97+jGp/WRD9quV4gpyRauVL68jDXgCrRBQqE6PiWNHm7pYNMxs927caypzqp+OlIG3MaLRF3UxEUb67VSWdhzukUxk+u6xo27hzcqxaoVIyqPF4nt2SzSrAGKYuBjTyrGXERDY2k/WPAlilI0fzcrayojjbBV/4XJwh1a/qdu8yul3qAVTGqXI8UmhnuCrR+NRa1U0cACzdeqwyZ3wqV4ShsXyBd8/z2b5lqypVC/GT4jgxwJoSWEerUCyx9ousf0R9eFDH0q/qv/0NYWDo3rEPCrKq3rnNsrgxx313rG4ePXMu27fDMlUTtbOj972UmSXeStVDwdJkHYu2mBt/+v1RX5scjmg0QQxT/uTjeYJsY4MNmRBCqgUGWqHNEfOtRjyGOFN97bIyi+oKGwBL34qnWXVbnh45dOw+Nfl/13O0rLMvfzhPBoatVb129TTLZA4vbcJLkNMs+SPnmXI7bVNfFQhg6T8gbv/y4pdbKVnD5i4IyX/Ymb/wZTVlM495vZP7ZFl4o7dxbcTNIEZ9SSAk77oXaV6s7NioqefyBmXT6qJPxHuqscmS+ljpN9tq67OGabgxJSC8Z1vujRuTgaylmTJoWHPMq/ykLdvsQmVVRmNVH0uybIMFYJWE02qqI7WV+butXKQpwe8NZBoyDFfvnbk6FfUME04AsEpXLhtVr6FYWqehz0SU/uv7GW3cwjrFYFQhNcThN9ogeS9pp+W05YmFrIFUL8jjq/zDzC/2o847Uxsll1sqc2Uzkff7iCLTzz1mcE3rAwXSUpHNnKeDmSVuu/rtjvK07wpz+Cz9r4vU2LSSmMKy3IMHb7JmeAfaQqd8Y6vcFZufdH56Fc2y4LFKSFK+nRllPPUJxKSLut7HvNNGHz2X4aVS9QWuzktQ/nzf5jeMTJxpf+sf9hWPVGzeVL55E4BVKhqeyNOBE9FgkCxZOAkZfeISc+AE/eEF1TngpISKKtlq03h+b3hNqPxk5Hpn/NX/2hsAVikIXe6mr+V7VJUQ+qCPPNpAv9PG/O0kungrT4CzWPkqT0HDWIrXt5v+QwQGhyOI53m4MfpO26/dNO1+FV29rTUVi+a/44SmIw81KSZToYO5a7/pDwxAjqVnnoaDsu+s9N6H+OJlMmKzUNpiVlSTH+GrFxZBVVyeyLIxTyB6F4PH0p/wpY+lI8fjVJFg8vkcRJDz3gIjz87J8SWHM9awqPjhIfEaaQWw9OOiYjH51Bnp7aP4/AVqRtXAIBhdd8spgmZ7FoMhvHQZYWYVysbNfgBLD0iFI9LBQ3EvpfT25ehmCdtto45ZnivauFi2O2Y/ZgBrvku54+d+8BOlQ9ND9M4RNxsxF30usbyCq6mdm4kqgDWvfVU0Gvvat5QbtzT2Z2QmHhCRXMy2aYlFfEuatKwW1CL4SWdeS3xtv3aqEomzAUddEXuwLMkKg2msDTKEYvXeuaKKgtUN89pdDd2V3jxYqBVvi/HO5EZZnCMms5r+CVdiEZ/ZMoeDB7Dmr+TTrYTjiknAy8LYJCuMIlr5qDuU/0Q2u1BRNbeDB7DmqzCWT5wu0tXRSsQVklkJG2XJLMRcuZ7hSSziq/PO+fCh8j5fJ4NdPfjKf4s2j/MUx2vyfcwZMQgsy6mXTxOL+IzGOR8/eKz5Ggd9ZylemNUR2AeLZBCJuScIUpml5V7EB2CVnAQRt/17LjE1yjOTrcQivoW1/6e/4H8CDAAeJDcSshbKGgAAAABJRU5ErkJggg==</Resource>
		<Resource ID="00056c03-8d21-48df-b6ce-af5ff57aea69" Type="png" Name="rug-proadmin_icon.png">iVBORw0KGgoAAAANSUhEUgAAAMgAAAC0CAMAAADmZpMWAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjYwOEIwNzdGMTFBMzExRTE5RDI0QzRDRUJDQTUzNEZCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjYwOEIwNzgwMTFBMzExRTE5RDI0QzRDRUJDQTUzNEZCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NjA4QjA3N0QxMUEzMTFFMTlEMjRDNENFQkNBNTM0RkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NjA4QjA3N0UxMUEzMTFFMTlEMjRDNENFQkNBNTM0RkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5sg/RsAAAAM1BMVEX////Nzc3a2try8vL8/PzQ0NDm5ubs7e3T09Pg4OD19fXj4+PX19f5+fnv7+/d3d3p6uqhzWj4AAAEv0lEQVR42uyd2XbjIAyGDZjN4OX9n3bans6Z2MEJwkjgjP7rtPYX0IIAZRhYLBaLxWKxWCwW66DZayFENOPNOYz4lV5uzeHFP9kbc9gHDqHn+4K4RxDhb8ux7DiEvr+l/0p9gqnfGkQyCIMwCIMwCIMwCIMwCIMwCIMwCIPcHmTxaw6IiqbnKtdsnBAyC+S7Hmw7rQer9edts0GE0KHDYVF/3xoA8l19nDvFgIL0hTKvD28LBRG6m72TfWUUDCKE62LvRO1L7iUgQqxjZ8NRCtJ8Q2uOog6IEKFpHNeiGoiI7dzXlnidchChp0YcXtQFabRfOq7Jd3E2B2T0uheSMSaHw+am8aNJooQuOJyCrEfSKL49h7bQhdUYmo+JTHyVY8EKcYpt7eTZX2lVuNQ1LUmeH57OlbLW7JN7+m9U8WR5erK5UnwYn+appkkhJ52b8OVWUZ5sPjZxWOeZRXY5yLZwXSE/Q8qvaz2R4JfAjlnSq1NYgAKdpTaT0QEyVkil0RJH+ADJvEElU0s6uSbQ02C130OUdZSpyTZUBDl+3CByWNg8BoIc7A/T3vdPcmNdkKNHDFQDoobKIMckbqYZkDBUBxkiiQu2sIlVAqJIrGT/dS0DAsjBB+M4LnVW9akJMmv8WOLBgbdkM9RAhx2eZYEHpAhk3A3Jim7qCgvkMCQI5r6CB6QMZIYkQZdnlsUD2duixJ1ZmRcoQhGIwp1ba0EWZMrKPA61yKUL3mgqW2EEzDRlKopTsihOT5gxcSvKr3evFLOnu0NMgX1ZvLVFG2seMbjvEkZIgvb325UA97MgJo7lvt16KWUA1aVHvEiiaOuZDs3aF9r9i7VwIgNDG35d1qDtlgS0r+j9BKj6vUnam6oKLQGWqAnpa7dV1f9GWpABDYR6S58ExBCDrHcGQbNJBvnfQUhsZCUG4TjSQWSfSUCoc62qqwbi7NeiZb8fsx75mBXix6zZB0HptmbEp0VKa8esa3nsnT2qh22URoJZ+53wd42JnqXRXPvr6OtR522gm1nV7bFkD7FCzKq/h1iyq1th7BEWPytRTJyxv7GCkw/XE0aMkw/7QyJoQ4J/FqXgdND1AUHJISZBMCQU57UOu+YLvsvCqjyBzzRejSFoJ3+hp0zhlu5ozmJbgWzvgeootsOdXIrscPzhmlhlL78PIbh3YWC3FXr65y9jSV0fTHp/BHajp3wxjV8GBN2xuuAR8YtnCqe/wZHD4V8ODRgkDe4hHi8tVCGxmZd/MRPU5I38a/6KZlNsANyezvQfrW5Pp/qhyPJHK9ewP0qiw0BpaGzaYeBQUrnQkEk17vmQ7sIBTo5G377HS7ovCugl0n1RyHvVpDvV5KOcdKpp0XMn3QPJZXWSnPrpHTScdXP6Mvs3nSTnLab/ULf69RsrzrRuZ7FAhXj2R836a329lT5FEVoaqx6HZlKbj+efB1zLwDAUKd5J/ii+/VzTHnTpyFwi3b6F7hQrcKxdNM80+iKG66Wj8ewvzSoz9CMlizl8Z+2LC1F8j62LPXxSddoY+6cndrZk1z/HN4U8lrj1/1t8k3ljLnq1t/lFQWXWdJyUwU7D3fSVJRojf+XNIYdksVgsFovFYrFYrM/QHwEGAFe/JtchvZCmAAAAAElFTkSuQmCC</Resource>
		<Resource ID="7783bb35-5916-4359-ac16-75bcb157821b" Type="png" Name="acl-container-bg.png">iVBORw0KGgoAAAANSUhEUgAAAAsAAAABCAYAAAAIN1RAAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQ0OTNDQjE2RjY0OTExRTA5RTFEQkQ1QTNEMUY3NEVBIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjQ0OTNDQjE3RjY0OTExRTA5RTFEQkQ1QTNEMUY3NEVBIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NDQ5M0NCMTRGNjQ5MTFFMDlFMURCRDVBM0QxRjc0RUEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NDQ5M0NCMTVGNjQ5MTFFMDlFMURCRDVBM0QxRjc0RUEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7GHWqnAAAAJ0lEQVR42mL89OnT/4sXLzIAQSMQPwPi50j0ZyD+YWNj8xukACDAAIUMDf+yt2nYAAAAAElFTkSuQmCC</Resource>
		<Resource ID="1000b57a-6d90-42ae-a330-14383a48f797" Type="png" Name="block_start_container_back.png">iVBORw0KGgoAAAANSUhEUgAAAAEAAAAjCAIAAADaE/fjAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkRBRjVDMkE3MThFNjExRTI4NUNFQ0IxOTExQTI4Rjc2IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkRBRjVDMkE4MThFNjExRTI4NUNFQ0IxOTExQTI4Rjc2Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6REFGNUMyQTUxOEU2MTFFMjg1Q0VDQjE5MTFBMjhGNzYiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6REFGNUMyQTYxOEU2MTFFMjg1Q0VDQjE5MTFBMjhGNzYiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6e9MkoAAAAG0lEQVR42mJgYGBgDAoKYubi4mICsgcSAwQYAKMgAVlzrq0zAAAAAElFTkSuQmCC</Resource>
		<Resource ID="97ccfaf3-c58c-4bb5-9f25-12277be218d0" Type="png" Name="ru.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAALCAIAAAD5gJpuAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAARtJREFUeNp8UUtqAzEMtWO3i9BFVg0UAt029+gmF8kBco1eokcohZylywYKWQS6yYw9lmS5kj0T0i4qsNDnPVkf3/fFXEnOPBm5ahJNpBpJI17efK6IUhrTymMW2qy6t9X2lX9zPJ59qzehG9Rc2+0rAVirtexmk7dbezqNoJRGwjBQM0LQWgC8WLjd7tvv92a9NoeDRhEMoCVigIJoEAtopAxRs6uVfjW7NCAgQDOh+Q86BCZyI6HmBGT/QTeYbunduCd8CcOXzhcHTcRYbdUEsbaq8Tt6eDOv/llI8MH5U+ZFZpcSYdJtQKeLgl41Ks3h4327g8pyqaG+b6cpXScRjlE65pRE26RVZGp7noZO5pdcXGyHn9wfAQYAEr7diYCkqswAAAAASUVORK5CYII=</Resource>
		<Resource ID="0a7c80b4-e26a-4200-a42d-442df1edb2e8" Type="png" Name="acl-apply.png">iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkQ1ODU0RDEzRkJBOTExRTBBMDBFOTE2REFCODcyMDcyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkQ1ODU0RDE0RkJBOTExRTBBMDBFOTE2REFCODcyMDcyIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RDU4NTREMTFGQkE5MTFFMEEwMEU5MTZEQUI4NzIwNzIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RDU4NTREMTJGQkE5MTFFMEEwMEU5MTZEQUI4NzIwNzIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz42jxqTAAAAWUlEQVR42oyOgQnAMAgEX+kSzuEajut+NhYsKSQ2B0YxhzypKkQEDTGKGD2Rh7Lzn+Tu6C5+pHx4yrGVSnxz7KTkysX4CDN7FiupRJRc8yo0RQROYBxyCzAAJzIjM6qtHFkAAAAASUVORK5CYII=</Resource>
		<Resource ID="9720cab2-23dd-42d3-b648-15a4d1d3098b" Type="png" Name="greenlight.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAPlJREFUeNpi/P//PwMlgImBQsCCTXDSE2tOIBUCxMZALAfE14D4VJ7M0U3oahnRvTDxgYUZkFoN1YgODgJxRL7CiRdYXdB321gUSG0BYlEcLrYH4qVA7Iw1DP79+j0NiEWBmAEPduq5qpeJ4YKO8xpCQCqQyLBLA+LpKAb8/flTBUgxE2mAOoYL/v749YuE2PuFYcCfnz9vAqnvQMxJhAGnMAKxyf3N97+/fnUDMQMRuBtrNP799bsVSPkBsQEe26d3BH/fjTMhla1g4QFSvdCQRgZfgLi+K+JPH96UCAMlSxhBKdEMmqjuAPHZnpj/7wgmZbrnRoAAAwAaP4bljCBvywAAAABJRU5ErkJggg==</Resource>
		<Resource ID="c4fb9306-b2a4-4c19-b903-f656b50b926c" Type="res" Name="e9c97927-a0da-4ead-bb10-e4c2c9b3b459.res">iVBORw0KGgoAAAANSUhEUgAAAloAAACxCAIAAACTJYTVAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Q0YxREMxNjFBRTBCMTFFMUI4NTZEM0VFM0Q3RjBDOTMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6Q0YxREMxNjJBRTBCMTFFMUI4NTZEM0VFM0Q3RjBDOTMiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpDRjFEQzE1RkFFMEIxMUUxQjg1NkQzRUUzRDdGMEM5MyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpDRjFEQzE2MEFFMEIxMUUxQjg1NkQzRUUzRDdGMEM5MyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pi3U4GIAAASoSURBVHja7NzdSuNqFIBh89NLKHjk/V+MiHgJnij0vAg2zV7TJYtvouNQdgt7x+c5KGmSrtaevHxJZ7q3t7fj8XgDAD9VH7QQgB8uUtj7FgBADgGgyWHXdfM8x8YwDLkBACsTgYvM5UaE77ccZgjzJmJsv7+/dye+NQDWJOuWmbs53TKsKI5VyHw+TdNutxvHMTYUEYD1LQ0Ph8N2u601Yl4QHeukXB3G4c1mc3t7m+cBwJrEYu/19TUaV9dEc39f68e+77OTkU0tBGCVcnWYK8IIX+Xw42JpRbEOLO4xAsD/XaUtHzN/ubPPPNZ5bRp9cQCsSbvkq95lBD8ukB6Px7peKoQArD6KeaU0f1x6Uz+lib3+rSEAP0fdPvzooG8EAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAOQQAP5TOZznebHxzdN8PB6P38/ME9qXmGOOOeaYY8715lxsdRjv13Xd4mlbynyaj33ff/7c7aePExYvMcccc8wxx5xrzLlYDrOCbQunaWqftmdWNRef+3NE25PNMcccc8wx5xpzLpbDdhEaj/n06ekpjz4+Ps4nsZF7Hh4espe15/7+frERh+KEOtkcc8wxxxxzrjHnXN1+v1/s2u12d3d3dd02FqH5mG85DMOfLp/GxuFwGMexzq+m1sl5KE8zxxxzzDHHnGvM+XI1WZ6fn7fb7Xk5XNzSrDdbXKXNN64T8qPE0+4k9+Tl3fqU7cnmmGOOOeaYc9k55+Zw/OuPaGJ6rgi/vK3424XX0zqyPkr+Me3RutRbdz7NMcccc8wx50pzzjL+9QeldXW0jfPnz7T40PnabHX9bbXzm4abY4455phjzr+c017LvMy9QwBYmS8vlvpfaQBADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgFADgHgjBx2XTfPcz3mgdj27QCwJpW2z+Hr83B7IM+uLgLAOmTasnRt+G7qYmlbyHEcp2nyrQGwPhG4yNwifL/aV6vD3HU4eXl5iRdYIAKwJtG7YRgicFG6zWZTi8VfCdzv97VUzCjm0lALAVhlEeMxotjeHIyNfwQYAKjFmKMZRghgAAAAAElFTkSuQmCC</Resource>
		<Resource ID="b3916fc3-7dbf-4f7c-add3-a1e578047bd6" Type="png" Name="acl-app-object-icon.png">iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjcyRDc2RDYxRjY0OTExRTBCNTA3OUNDNUQ2ODk3N0Y3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjcyRDc2RDYyRjY0OTExRTBCNTA3OUNDNUQ2ODk3N0Y3Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NzJENzZENUZGNjQ5MTFFMEI1MDc5Q0M1RDY4OTc3RjciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NzJENzZENjBGNjQ5MTFFMEI1MDc5Q0M1RDY4OTc3RjciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6wQRNOAAABt0lEQVR42qxUzU7CQBDelm6LpQkU5cCBA56MkUQPxCiCoF6rEZ9GEx9JE8PFmyaS+AAmHuUB0IQEDOnSdt0Zs2tLCELCNNvttzPzdX461TjnZBViwK28WV43DGM7lUrlNKIt5MjFFYbhIAiC995H7wuJctls1TQtSk1KNG1BIpHJhE1yjPlVAR+RiJomzTgZIiJaisg0TcJHnKrUgEDXdVQuUzPwAV9FFEURYYyR+4c7ZdS+uFJG8wR8FRFEAURCOtJAkHr/kVyet1UGSCSqj+twv0aYz4hBDQxbdBLf2H196Rwd1D04k7hZb3mO46BfIjUwEqKigEJSSonv+6RRO0a9ZVmIBYkqeCI1YIV62LZN0um0igZ2+UbsriCOYyBKRhRGeAhkssDSCHRS5uFfIh6pEKc78tx9UrjVOEng0+YZ+uKnEC/29JKd3Nmq4D4ejxMY9InUeMRnRhQGIdmt7OEz7JB2HNtrdnJoXdclw9Fw5mDGO6lrovgk9OL6vJv/S+3m9npSLBbViMgFXYMuwhzCDkMdx6VSCX2BQwOHz0G/IJ4h8cySv6Fvsd42coW+tqof248AAwAAav0Anb4LigAAAABJRU5ErkJggg==</Resource>
		<Resource ID="5eea6bc1-f346-4c42-a1d4-844c39820bf3" Type="png" Name="redlight.png">iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAPlJREFUeNpi/P//PwMlgImBQsCCTfCJdT4nkAoBYmMglgPia0B8SuboxE3oahnRvfDAIsMMSK2GakQHB4E4QuHEjBdYXXDbOEEUSG0BYlEcLrYH4qVA7Iw1DH79/jYNiEWBmAEPdrqqF5aJ4YLzGl5CQCqQyLBLA+LpKAb8/PlFBUgxE2mAOoYLfvz68ouE2PuFYcDPn59vAqnvQMxJhAGnMAxwf3P7+2Y+qW4gs44IA7qxpoO1nAJsQOokEBvg0Tw9+PuHLJwJaQULOw+Q6oWGNDL4AsT1EX9+9uFNiTCwhJERlBLNoInqDhCfjfn//x3BpEz33AgQYADuJ2gSYacpkAAAAABJRU5ErkJggg==</Resource>
		<Resource ID="1d50c132-3610-402c-a337-d020d0f955b4" Type="png" Name="disabled-16x16.gif">R0lGODlhEAAQAOYAAOXl5f39/fPz8/v7+3h4eNvb2/+NWv3Owf9vQvz8/N3d3efn5319ffo+GePj44+Pj+M7FpOTk7q6uum2rf9xPf2chr6akf40Af9vPP1UIv9JFdJcQeTk5L+/v7y8vP+BTug/GOQ+GbI/Nfihj/01BP2ljf+EUPhtT/5oQ79RO/eikf9zP+u/s/2eif+pdv5NHNuNef2dbPE/GKNeU9t9cOhkSvuOdW1tbf9iNMkuFv6Ka29vb/9/Xes3Dv/LlvhvUv9NGfRsTf+ndP40AvyRefdpSf+aZ6enp4JjX/o5C8gtFvdnSLuPiblCN/Hx8f9aJ5WVlf+XZPtvUPpxUf2ZZ/Ly8vZCGv9dKv9LGP83Av9rOPw0Av+DUP+IVPk9ELm5uf99W/9yP/5sSOo4D+Q8F//Ik/9pNv9kNv1XJvwyAv6LbYFkX/7+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAQABAAAAeogG2Cg4SFhm1siWyHgwdSDQ1BLAIBhyVpSyojRSQwCwOFB0M/RC0VNidbFguVg1NeYjxqOmAoSRsdAoRWFy9nCAg4WFkgUACEMhpPZhRhWldAEAwKhDUZGB8GBlwraCnThBM9JlFCLkZdY2sRx4MCNGRUZT4xITM7HrqDAQBMTTlKRCC5cQRAq0EDAEh4QIDAgy8cQBlKUMVBgQIOnCRgJEjRIo4gBQUCADs=</Resource>
	</Resources>
	<Databases>
